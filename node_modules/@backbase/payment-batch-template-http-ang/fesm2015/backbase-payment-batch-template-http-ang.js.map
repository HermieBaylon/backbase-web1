{"version":3,"file":"backbase-payment-batch-template-http-ang.js","sources":["../../model/batchStatus.ts","../../model/batchTemplateStatus.ts","../../model/creditDebitIndicator.ts","../../model/creditDebitMixedIndicator.ts","../../model/schemeNames.ts","../../variables.ts","../../configuration.ts","../../api.module.ts","../../encoder.ts","../../api/batchTemplates.service.ts","../../api/batchTemplates.service.mocks.ts"],"sourcesContent":["/**\n * Batch Templates client\n * Manage batch templates.\n *\n * The version of the OpenAPI document: 1.11.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * The status of the batch order. PROCESSED, REJECTED, INVALID and CANCELLED are end states. The uploaded batch order happy flow is OPEN - CLOSED - VALID - [ENTERED] - READY - [ACKNOWLEDGED] - [DOWNLOADING] - ACCEPTED - PROCESSED. The manually edited batch order happy flow is DRAFT - VALID - [ENTERED] - READY - [ACKNOWLEDGED] - [DOWNLOADING] - ACCEPTED - PROCESSED. \n */\nexport type BatchStatus = 'OPEN' | 'CLOSED' | 'DRAFT' | 'INVALID' | 'VALID' | 'ENTERED' | 'REJECTED' | 'CANCELLED' | 'READY' | 'ACKNOWLEDGED' | 'DOWNLOADING' | 'ACCEPTED' | 'PROCESSED';\n\nexport const BatchStatus = {\n    OPEN: 'OPEN' as BatchStatus,\n    CLOSED: 'CLOSED' as BatchStatus,\n    DRAFT: 'DRAFT' as BatchStatus,\n    INVALID: 'INVALID' as BatchStatus,\n    VALID: 'VALID' as BatchStatus,\n    ENTERED: 'ENTERED' as BatchStatus,\n    REJECTED: 'REJECTED' as BatchStatus,\n    CANCELLED: 'CANCELLED' as BatchStatus,\n    READY: 'READY' as BatchStatus,\n    ACKNOWLEDGED: 'ACKNOWLEDGED' as BatchStatus,\n    DOWNLOADING: 'DOWNLOADING' as BatchStatus,\n    ACCEPTED: 'ACCEPTED' as BatchStatus,\n    PROCESSED: 'PROCESSED' as BatchStatus\n};\n\n","/**\n * Batch Templates client\n * Manage batch templates.\n *\n * The version of the OpenAPI document: 1.11.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * The batch template status.\n */\nexport type BatchTemplateStatus = 'DRAFT' | 'AVAILABLE';\n\nexport const BatchTemplateStatus = {\n    DRAFT: 'DRAFT' as BatchTemplateStatus,\n    AVAILABLE: 'AVAILABLE' as BatchTemplateStatus\n};\n\n","/**\n * Batch Templates client\n * Manage batch templates.\n *\n * The version of the OpenAPI document: 1.11.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Payment can be either debit or credit.\n */\nexport type CreditDebitIndicator = 'CREDIT' | 'DEBIT';\n\nexport const CreditDebitIndicator = {\n    CREDIT: 'CREDIT' as CreditDebitIndicator,\n    DEBIT: 'DEBIT' as CreditDebitIndicator\n};\n\n","/**\n * Batch Templates client\n * Manage batch templates.\n *\n * The version of the OpenAPI document: 1.11.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Batch order(s) can contain only credit records, only debit records or mixed credit and debit records.\n */\nexport type CreditDebitMixedIndicator = 'CREDIT' | 'DEBIT' | 'MIXED';\n\nexport const CreditDebitMixedIndicator = {\n    CREDIT: 'CREDIT' as CreditDebitMixedIndicator,\n    DEBIT: 'DEBIT' as CreditDebitMixedIndicator,\n    MIXED: 'MIXED' as CreditDebitMixedIndicator\n};\n\n","/**\n * Batch Templates client\n * Manage batch templates.\n *\n * The version of the OpenAPI document: 1.11.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * This describes the type of the account identifier. ID will mean it refers to an account known within DBS.\n */\nexport type SchemeNames = 'IBAN' | 'BBAN' | 'ID' | 'EXTERNAL_ID' | 'EMAIL' | 'MOBILE';\n\nexport const SchemeNames = {\n    IBAN: 'IBAN' as SchemeNames,\n    BBAN: 'BBAN' as SchemeNames,\n    ID: 'ID' as SchemeNames,\n    EXTERNALID: 'EXTERNAL_ID' as SchemeNames,\n    EMAIL: 'EMAIL' as SchemeNames,\n    MOBILE: 'MOBILE' as SchemeNames\n};\n\n","import { InjectionToken } from '@angular/core';\n\nexport const PAYMENT_BATCH_TEMPLATE_BASE_PATH = new InjectionToken<string>('PAYMENT_BATCH_TEMPLATE_BASE_PATH');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nimport { InjectionToken } from '@angular/core';\n\nexport interface PaymentBatchTemplateConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class PaymentBatchTemplateConfiguration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: PaymentBatchTemplateConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link PaymentBatchTemplateConfiguration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link PaymentBatchTemplateConfiguration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n\nexport const CONFIG_TOKEN = new InjectionToken('api-data-module PaymentBatchTemplateConfiguration');\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { PaymentBatchTemplateConfiguration, CONFIG_TOKEN } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DataModulesManager } from \"@backbase/foundation-ang/data-http\";\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers:    []\n})\nexport class PaymentBatchTemplateApiModule {\n    public static forRoot(configurationFactory: () => PaymentBatchTemplateConfiguration): ModuleWithProviders<PaymentBatchTemplateApiModule> {\n        return {\n            ngModule: PaymentBatchTemplateApiModule,\n            providers: [ { provide: PaymentBatchTemplateConfiguration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: PaymentBatchTemplateApiModule,\n                 @Optional() http: HttpClient,\n                 @Optional() dataModulesManager: DataModulesManager | null,\n                 config: PaymentBatchTemplateConfiguration,\n\n        ) {\n        if (parentModule) {\n            throw new Error('PaymentBatchTemplateApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","/**\n * Batch Templates client\n * Manage batch templates.\n *\n * The version of the OpenAPI document: 1.11.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { BadRequestError } from '../model/models';\nimport { BatchOrderFromTemplatePostResponse } from '../model/models';\nimport { BatchTemplatePaymentsGetResponse } from '../model/models';\nimport { BatchTemplatePaymentsPostRequest } from '../model/models';\nimport { BatchTemplatePaymentsPostResponse } from '../model/models';\nimport { BatchTemplatePaymentsPutRequest } from '../model/models';\nimport { BatchTemplatePaymentsPutResponse } from '../model/models';\nimport { BatchTemplatesAttributesPostRequest } from '../model/models';\nimport { BatchTemplatesAttributesPostResponse } from '../model/models';\nimport { BatchTemplatesGetResponse } from '../model/models';\nimport { BatchTemplatesPostRequest } from '../model/models';\nimport { BatchTemplatesPostResponse } from '../model/models';\nimport { BatchTemplatesPutRequest } from '../model/models';\nimport { BatchTemplatesPutResponse } from '../model/models';\nimport { BatchTemplatesStatusUpdateRequest } from '../model/models';\nimport { BatchTemplatesStatusUpdateResponse } from '../model/models';\nimport { ConflictError } from '../model/models';\nimport { ErrorItem } from '../model/models';\nimport { ForbiddenError } from '../model/models';\nimport { NotFoundError } from '../model/models';\n\nimport { PAYMENT_BATCH_TEMPLATE_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { PaymentBatchTemplateConfiguration }                                     from '../configuration';\n\n\nexport interface CreateBatchOrderFromTemplateRequestParams {\n    /** Batch template id */\n    [\"batchTemplateId\"]: string;\n}\n\nexport interface DeleteBatchTemplateByIdRequestParams {\n    /** Batch template id */\n    [\"batchTemplateId\"]: string;\n}\n\nexport interface DeleteBatchTemplatePaymentByIdRequestParams {\n    /** Batch template id */\n    [\"batchTemplateId\"]: string;\n    /** Batch template payment id */\n    [\"batchTemplatePaymentId\"]: string;\n}\n\nexport interface GetBatchTemplatePaymentsByIdRequestParams {\n    /** Batch template id */\n    [\"batchTemplateId\"]: string;\n    /** Page Number. Skip over pages of elements by specifying a start value for the query. */\n    [\"from\"]?: number;\n    /** Limit the number of elements on the response. */\n    [\"size\"]?: number;\n    /** An array of the user privileges to check on the business function of the batch type &amp; arrangement id of the template with AVAILABLE status. By Default view &amp; create privileges are checked if this parameter value is not specified in the request.  */\n    [\"privilegesToCheck\"]?: Array<'VIEW' | 'CREATE'>;\n}\n\nexport interface GetBatchTemplatesRequestParams {\n    /** The search term used to make partial search on template name. */\n    [\"query\"]?: string;\n    /** Page Number. Skip over pages of elements by specifying a start value for the query. */\n    [\"from\"]?: number;\n    /** Limit the number of elements on the response. */\n    [\"size\"]?: number;\n    /** Field used for searching batch templates by batch type. */\n    [\"batchType\"]?: string;\n    /** Field used for searching batch templates on creditDebitMixedIndicator value. */\n    [\"creditDebitMixedIndicator\"]?: 'CREDIT' | 'DEBIT' | 'MIXED';\n    /** An array of the user privileges to check on the business function of the batch type &amp; arrangement id when retrieving the batch templates list. By Default view &amp; create privileges are checked if this parameter value is not specified in the request.  */\n    [\"privilegesToCheck\"]?: Array<'VIEW' | 'CREATE'>;\n}\n\nexport interface PostBatchTemplatePaymentsRequestParams {\n    /** Batch template id */\n    [\"batchTemplateId\"]: string;\n    /** Request for a new batch template payment. */\n    [\"batchTemplatePaymentsPostRequest\"]: BatchTemplatePaymentsPostRequest;\n}\n\nexport interface PostBatchTemplatesRequestParams {\n    /** The existing batch template id used to create the draft template. */\n    [\"draftOf\"]?: string;\n    /** The existing batch template id used to duplicate the template. */\n    [\"copyFrom\"]?: string;\n    /** Name of the new duplicated batch template. */\n    [\"name\"]?: string;\n    /** Request for a new batch template. */\n    [\"batchTemplatesPostRequest\"]?: BatchTemplatesPostRequest;\n}\n\nexport interface PostBatchTemplatesFromAttributesRequestParams {\n    /** Request for a new batch template draft. */\n    [\"batchTemplatesAttributesPostRequest\"]: BatchTemplatesAttributesPostRequest;\n}\n\nexport interface PutBatchTemplatePaymentByIdRequestParams {\n    /** Batch template id */\n    [\"batchTemplateId\"]: string;\n    /** Batch template payment id */\n    [\"batchTemplatePaymentId\"]: string;\n    /** Updates a batch template payment. */\n    [\"batchTemplatePaymentsPutRequest\"]: BatchTemplatePaymentsPutRequest;\n}\n\nexport interface UpdateBatchTemplateByIdRequestParams {\n    /** Batch template id */\n    [\"batchTemplateId\"]: string;\n    /** The id of the draft template used to update the original template */\n    [\"draftTemplateId\"]?: string;\n    /** Request to update a batch template. */\n    [\"batchTemplatesPutRequest\"]?: BatchTemplatesPutRequest;\n}\n\nexport interface UpdateBatchTemplateStatusByIdRequestParams {\n    /** Batch template id */\n    [\"batchTemplateId\"]: string;\n    /** Request to update the status of a batch template. */\n    [\"batchTemplatesStatusUpdateRequest\"]: BatchTemplatesStatusUpdateRequest;\n    /** Set this parameter to true to run the update without changes on the server (e.g. when transitioning batch template to AVAILABLE status, the validations are run, but the batch template status is not updated).  */\n    [\"dryRun\"]?: boolean;\n    /** Set this parameter to validate the total persisted credit transactions count against the intended credit transactions count. required: false  */\n    [\"intendedCreditTransactionsCount\"]?: number;\n    /** Set this parameter to validate the total persisted debit transactions count against the intended debit transactions count.  */\n    [\"intendedDebitTransactionsCount\"]?: number;\n    /** Set this parameter to validate the total persisted credit amount against the intended credit amount.  */\n    [\"intendedCreditAmount\"]?: number;\n    /** Set this parameter to validate the total persisted debit amount against the intended debit amount.  */\n    [\"intendedDebitAmount\"]?: number;\n}\n\nexport interface ValidateBatchTemplateRequestParams {\n    /** Batch template id */\n    [\"batchTemplateId\"]: string;\n    /** Set this parameter to validate the total persisted credit transactions count against the intended credit transactions count.  */\n    [\"intendedCreditTransactionsCount\"]?: number;\n    /** Set this parameter to validate the total persisted debit transactions count against the intended debit transactions count.  */\n    [\"intendedDebitTransactionsCount\"]?: number;\n    /** Set this parameter to validate the total persisted credit amount against the intended credit amount.  */\n    [\"intendedCreditAmount\"]?: number;\n    /** Set this parameter to validate the total persisted debit amount against the intended debit amount.  */\n    [\"intendedDebitAmount\"]?: number;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BatchTemplatesHttpService {\n\n    protected basePath = '';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new PaymentBatchTemplateConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(PAYMENT_BATCH_TEMPLATE_BASE_PATH) basePath: string, @Optional() configuration: PaymentBatchTemplateConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Creates batch order from a batch template.\n     * Creates batch order from a batch template.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createBatchOrderFromTemplate(requestParameters: CreateBatchOrderFromTemplateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchOrderFromTemplatePostResponse>;\n    /**\n     * Creates batch order from a batch template.\n     * Creates batch order from a batch template.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createBatchOrderFromTemplate(requestParameters: CreateBatchOrderFromTemplateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchOrderFromTemplatePostResponse>>;\n    /**\n     * Creates batch order from a batch template.\n     * Creates batch order from a batch template.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createBatchOrderFromTemplate(requestParameters: CreateBatchOrderFromTemplateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchOrderFromTemplatePostResponse>>;\n    /**\n     * Creates batch order from a batch template.\n     * Creates batch order from a batch template.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createBatchOrderFromTemplate(requestParameters: CreateBatchOrderFromTemplateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchTemplateId = requestParameters[\"batchTemplateId\"];\n        if (_batchTemplateId === null || _batchTemplateId === undefined) {\n            throw new Error('Required parameter batchTemplateId was null or undefined when calling createBatchOrderFromTemplate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<BatchOrderFromTemplatePostResponse>(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-order`,\n            null,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public createBatchOrderFromTemplateUrl(requestParameters: CreateBatchOrderFromTemplateRequestParams): string {\n        const _batchTemplateId = requestParameters[\"batchTemplateId\"];\n        if (_batchTemplateId === null || _batchTemplateId === undefined) {\n            throw new Error('Required parameter batchTemplateId was null or undefined when calling createBatchOrderFromTemplate.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-order`;\n    }\n\n    /**\n     * Deletes a batch template.\n     * Deletes a batch template. If template is in draft state, only the creator of the batch template can delete it. If template is available, user has to have delete access to Batch Templates business function, view access to proper batch type and delete access to originating account.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchTemplateById(requestParameters: DeleteBatchTemplateByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    /**\n     * Deletes a batch template.\n     * Deletes a batch template. If template is in draft state, only the creator of the batch template can delete it. If template is available, user has to have delete access to Batch Templates business function, view access to proper batch type and delete access to originating account.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchTemplateById(requestParameters: DeleteBatchTemplateByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    /**\n     * Deletes a batch template.\n     * Deletes a batch template. If template is in draft state, only the creator of the batch template can delete it. If template is available, user has to have delete access to Batch Templates business function, view access to proper batch type and delete access to originating account.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchTemplateById(requestParameters: DeleteBatchTemplateByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    /**\n     * Deletes a batch template.\n     * Deletes a batch template. If template is in draft state, only the creator of the batch template can delete it. If template is available, user has to have delete access to Batch Templates business function, view access to proper batch type and delete access to originating account.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchTemplateById(requestParameters: DeleteBatchTemplateByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchTemplateId = requestParameters[\"batchTemplateId\"];\n        if (_batchTemplateId === null || _batchTemplateId === undefined) {\n            throw new Error('Required parameter batchTemplateId was null or undefined when calling deleteBatchTemplateById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public deleteBatchTemplateByIdUrl(requestParameters: DeleteBatchTemplateByIdRequestParams): string {\n        const _batchTemplateId = requestParameters[\"batchTemplateId\"];\n        if (_batchTemplateId === null || _batchTemplateId === undefined) {\n            throw new Error('Required parameter batchTemplateId was null or undefined when calling deleteBatchTemplateById.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}`;\n    }\n\n    /**\n     * Deletes a batch template payment.\n     * Deletes a batch template payment. Only the creator of the batch template can delete it. Only batch templates in status DRAFT payments can be deleted.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchTemplatePaymentById(requestParameters: DeleteBatchTemplatePaymentByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    /**\n     * Deletes a batch template payment.\n     * Deletes a batch template payment. Only the creator of the batch template can delete it. Only batch templates in status DRAFT payments can be deleted.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchTemplatePaymentById(requestParameters: DeleteBatchTemplatePaymentByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    /**\n     * Deletes a batch template payment.\n     * Deletes a batch template payment. Only the creator of the batch template can delete it. Only batch templates in status DRAFT payments can be deleted.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchTemplatePaymentById(requestParameters: DeleteBatchTemplatePaymentByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    /**\n     * Deletes a batch template payment.\n     * Deletes a batch template payment. Only the creator of the batch template can delete it. Only batch templates in status DRAFT payments can be deleted.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteBatchTemplatePaymentById(requestParameters: DeleteBatchTemplatePaymentByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchTemplateId = requestParameters[\"batchTemplateId\"];\n        if (_batchTemplateId === null || _batchTemplateId === undefined) {\n            throw new Error('Required parameter batchTemplateId was null or undefined when calling deleteBatchTemplatePaymentById.');\n        }\n        const _batchTemplatePaymentId = requestParameters[\"batchTemplatePaymentId\"];\n        if (_batchTemplatePaymentId === null || _batchTemplatePaymentId === undefined) {\n            throw new Error('Required parameter batchTemplatePaymentId was null or undefined when calling deleteBatchTemplatePaymentById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments/${encodeURIComponent(String(_batchTemplatePaymentId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public deleteBatchTemplatePaymentByIdUrl(requestParameters: DeleteBatchTemplatePaymentByIdRequestParams): string {\n        const _batchTemplateId = requestParameters[\"batchTemplateId\"];\n        if (_batchTemplateId === null || _batchTemplateId === undefined) {\n            throw new Error('Required parameter batchTemplateId was null or undefined when calling deleteBatchTemplatePaymentById.');\n        }\n        const _batchTemplatePaymentId = requestParameters[\"batchTemplatePaymentId\"];\n        if (_batchTemplatePaymentId === null || _batchTemplatePaymentId === undefined) {\n            throw new Error('Required parameter batchTemplatePaymentId was null or undefined when calling deleteBatchTemplatePaymentById.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments/${encodeURIComponent(String(_batchTemplatePaymentId))}`;\n    }\n\n    /**\n     * Get batch template payments.\n     * Get batch template payments. Only the creator of the template can retrieve the payments for the templates with status DRAFT. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchTemplatePaymentsById(requestParameters: GetBatchTemplatePaymentsByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchTemplatePaymentsGetResponse>;\n    /**\n     * Get batch template payments.\n     * Get batch template payments. Only the creator of the template can retrieve the payments for the templates with status DRAFT. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchTemplatePaymentsById(requestParameters: GetBatchTemplatePaymentsByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchTemplatePaymentsGetResponse>>;\n    /**\n     * Get batch template payments.\n     * Get batch template payments. Only the creator of the template can retrieve the payments for the templates with status DRAFT. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchTemplatePaymentsById(requestParameters: GetBatchTemplatePaymentsByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchTemplatePaymentsGetResponse>>;\n    /**\n     * Get batch template payments.\n     * Get batch template payments. Only the creator of the template can retrieve the payments for the templates with status DRAFT. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchTemplatePaymentsById(requestParameters: GetBatchTemplatePaymentsByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchTemplateId = requestParameters[\"batchTemplateId\"];\n        if (_batchTemplateId === null || _batchTemplateId === undefined) {\n            throw new Error('Required parameter batchTemplateId was null or undefined when calling getBatchTemplatePaymentsById.');\n        }\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _privilegesToCheck = requestParameters[\"privilegesToCheck\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        if (_privilegesToCheck) {\n            _privilegesToCheck.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'privilegesToCheck');\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<BatchTemplatePaymentsGetResponse>(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getBatchTemplatePaymentsByIdUrl(requestParameters: GetBatchTemplatePaymentsByIdRequestParams): string {\n        const _batchTemplateId = requestParameters[\"batchTemplateId\"];\n        if (_batchTemplateId === null || _batchTemplateId === undefined) {\n            throw new Error('Required parameter batchTemplateId was null or undefined when calling getBatchTemplatePaymentsById.');\n        }\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _privilegesToCheck = requestParameters[\"privilegesToCheck\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        if (_privilegesToCheck) {\n            _privilegesToCheck.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'privilegesToCheck');\n            })\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Get batch templates.\n     * Get batch templates.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchTemplates(requestParameters: GetBatchTemplatesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchTemplatesGetResponse>;\n    /**\n     * Get batch templates.\n     * Get batch templates.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchTemplates(requestParameters: GetBatchTemplatesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchTemplatesGetResponse>>;\n    /**\n     * Get batch templates.\n     * Get batch templates.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchTemplates(requestParameters: GetBatchTemplatesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchTemplatesGetResponse>>;\n    /**\n     * Get batch templates.\n     * Get batch templates.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBatchTemplates(requestParameters: GetBatchTemplatesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _query = requestParameters[\"query\"];\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _batchType = requestParameters[\"batchType\"];\n        const _creditDebitMixedIndicator = requestParameters[\"creditDebitMixedIndicator\"];\n        const _privilegesToCheck = requestParameters[\"privilegesToCheck\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_query !== undefined && _query !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_query, 'query');\n        }\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        if (_batchType !== undefined && _batchType !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_batchType, 'batchType');\n        }\n        if (_creditDebitMixedIndicator !== undefined && _creditDebitMixedIndicator !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_creditDebitMixedIndicator, 'creditDebitMixedIndicator');\n        }\n        if (_privilegesToCheck) {\n            _privilegesToCheck.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'privilegesToCheck');\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<BatchTemplatesGetResponse>(`${this.configuration.basePath}/client-api/v1/batch-templates`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getBatchTemplatesUrl(requestParameters: GetBatchTemplatesRequestParams): string {\n        const _query = requestParameters[\"query\"];\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _batchType = requestParameters[\"batchType\"];\n        const _creditDebitMixedIndicator = requestParameters[\"creditDebitMixedIndicator\"];\n        const _privilegesToCheck = requestParameters[\"privilegesToCheck\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_query !== undefined && _query !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_query, 'query');\n        }\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        if (_batchType !== undefined && _batchType !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_batchType, 'batchType');\n        }\n        if (_creditDebitMixedIndicator !== undefined && _creditDebitMixedIndicator !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_creditDebitMixedIndicator, 'creditDebitMixedIndicator');\n        }\n        if (_privilegesToCheck) {\n            _privilegesToCheck.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'privilegesToCheck');\n            })\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v1/batch-templates${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Creates a batch template payment.\n     * Adds new payment under the batch template in status DRAFT. Only the creator of the batch template can add payments. When counterparty arrangement id is provided, then the account information (IBAN/BBAN, bank branch code and account name) is going to be pulled from Product Summary, overwriting the account information that was directly provided. When current user has no access to the requested arrangement or the arrangement does not exist, the create fails with bad request status. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchTemplatePayments(requestParameters: PostBatchTemplatePaymentsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchTemplatePaymentsPostResponse>;\n    /**\n     * Creates a batch template payment.\n     * Adds new payment under the batch template in status DRAFT. Only the creator of the batch template can add payments. When counterparty arrangement id is provided, then the account information (IBAN/BBAN, bank branch code and account name) is going to be pulled from Product Summary, overwriting the account information that was directly provided. When current user has no access to the requested arrangement or the arrangement does not exist, the create fails with bad request status. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchTemplatePayments(requestParameters: PostBatchTemplatePaymentsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchTemplatePaymentsPostResponse>>;\n    /**\n     * Creates a batch template payment.\n     * Adds new payment under the batch template in status DRAFT. Only the creator of the batch template can add payments. When counterparty arrangement id is provided, then the account information (IBAN/BBAN, bank branch code and account name) is going to be pulled from Product Summary, overwriting the account information that was directly provided. When current user has no access to the requested arrangement or the arrangement does not exist, the create fails with bad request status. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchTemplatePayments(requestParameters: PostBatchTemplatePaymentsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchTemplatePaymentsPostResponse>>;\n    /**\n     * Creates a batch template payment.\n     * Adds new payment under the batch template in status DRAFT. Only the creator of the batch template can add payments. When counterparty arrangement id is provided, then the account information (IBAN/BBAN, bank branch code and account name) is going to be pulled from Product Summary, overwriting the account information that was directly provided. When current user has no access to the requested arrangement or the arrangement does not exist, the create fails with bad request status. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchTemplatePayments(requestParameters: PostBatchTemplatePaymentsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchTemplateId = requestParameters[\"batchTemplateId\"];\n        if (_batchTemplateId === null || _batchTemplateId === undefined) {\n            throw new Error('Required parameter batchTemplateId was null or undefined when calling postBatchTemplatePayments.');\n        }\n        const _batchTemplatePaymentsPostRequest = requestParameters[\"batchTemplatePaymentsPostRequest\"];\n        if (_batchTemplatePaymentsPostRequest === null || _batchTemplatePaymentsPostRequest === undefined) {\n            throw new Error('Required parameter batchTemplatePaymentsPostRequest was null or undefined when calling postBatchTemplatePayments.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<BatchTemplatePaymentsPostResponse>(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments`,\n            _batchTemplatePaymentsPostRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postBatchTemplatePaymentsUrl(requestParameters: PostBatchTemplatePaymentsRequestParams): string {\n        const _batchTemplateId = requestParameters[\"batchTemplateId\"];\n        if (_batchTemplateId === null || _batchTemplateId === undefined) {\n            throw new Error('Required parameter batchTemplateId was null or undefined when calling postBatchTemplatePayments.');\n        }\n        const _batchTemplatePaymentsPostRequest = requestParameters[\"batchTemplatePaymentsPostRequest\"];\n        if (_batchTemplatePaymentsPostRequest === null || _batchTemplatePaymentsPostRequest === undefined) {\n            throw new Error('Required parameter batchTemplatePaymentsPostRequest was null or undefined when calling postBatchTemplatePayments.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments`;\n    }\n\n    /**\n     * Creates a batch template.\n     * Creates a batch template from a batch order with id sent in the payload or from an existing batch template with id sent in the parameters. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchTemplates(requestParameters: PostBatchTemplatesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchTemplatesPostResponse>;\n    /**\n     * Creates a batch template.\n     * Creates a batch template from a batch order with id sent in the payload or from an existing batch template with id sent in the parameters. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchTemplates(requestParameters: PostBatchTemplatesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchTemplatesPostResponse>>;\n    /**\n     * Creates a batch template.\n     * Creates a batch template from a batch order with id sent in the payload or from an existing batch template with id sent in the parameters. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchTemplates(requestParameters: PostBatchTemplatesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchTemplatesPostResponse>>;\n    /**\n     * Creates a batch template.\n     * Creates a batch template from a batch order with id sent in the payload or from an existing batch template with id sent in the parameters. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchTemplates(requestParameters: PostBatchTemplatesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _draftOf = requestParameters[\"draftOf\"];\n        const _copyFrom = requestParameters[\"copyFrom\"];\n        const _name = requestParameters[\"name\"];\n        const _batchTemplatesPostRequest = requestParameters[\"batchTemplatesPostRequest\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_draftOf !== undefined && _draftOf !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_draftOf, 'draftOf');\n        }\n        if (_copyFrom !== undefined && _copyFrom !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_copyFrom, 'copyFrom');\n        }\n        if (_name !== undefined && _name !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_name, 'name');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<BatchTemplatesPostResponse>(`${this.configuration.basePath}/client-api/v1/batch-templates`,\n            _batchTemplatesPostRequest,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postBatchTemplatesUrl(requestParameters: PostBatchTemplatesRequestParams): string {\n        const _draftOf = requestParameters[\"draftOf\"];\n        const _copyFrom = requestParameters[\"copyFrom\"];\n        const _name = requestParameters[\"name\"];\n        const _batchTemplatesPostRequest = requestParameters[\"batchTemplatesPostRequest\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_draftOf !== undefined && _draftOf !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_draftOf, 'draftOf');\n        }\n        if (_copyFrom !== undefined && _copyFrom !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_copyFrom, 'copyFrom');\n        }\n        if (_name !== undefined && _name !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_name, 'name');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v1/batch-templates${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Creates a batch template draft from given set of attributes.\n     * Creates a batch template draft from given set of attributes.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchTemplatesFromAttributes(requestParameters: PostBatchTemplatesFromAttributesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchTemplatesAttributesPostResponse>;\n    /**\n     * Creates a batch template draft from given set of attributes.\n     * Creates a batch template draft from given set of attributes.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchTemplatesFromAttributes(requestParameters: PostBatchTemplatesFromAttributesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchTemplatesAttributesPostResponse>>;\n    /**\n     * Creates a batch template draft from given set of attributes.\n     * Creates a batch template draft from given set of attributes.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchTemplatesFromAttributes(requestParameters: PostBatchTemplatesFromAttributesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchTemplatesAttributesPostResponse>>;\n    /**\n     * Creates a batch template draft from given set of attributes.\n     * Creates a batch template draft from given set of attributes.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postBatchTemplatesFromAttributes(requestParameters: PostBatchTemplatesFromAttributesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchTemplatesAttributesPostRequest = requestParameters[\"batchTemplatesAttributesPostRequest\"];\n        if (_batchTemplatesAttributesPostRequest === null || _batchTemplatesAttributesPostRequest === undefined) {\n            throw new Error('Required parameter batchTemplatesAttributesPostRequest was null or undefined when calling postBatchTemplatesFromAttributes.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<BatchTemplatesAttributesPostResponse>(`${this.configuration.basePath}/client-api/v1/batch-templates/from-attributes`,\n            _batchTemplatesAttributesPostRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postBatchTemplatesFromAttributesUrl(requestParameters: PostBatchTemplatesFromAttributesRequestParams): string {\n        const _batchTemplatesAttributesPostRequest = requestParameters[\"batchTemplatesAttributesPostRequest\"];\n        if (_batchTemplatesAttributesPostRequest === null || _batchTemplatesAttributesPostRequest === undefined) {\n            throw new Error('Required parameter batchTemplatesAttributesPostRequest was null or undefined when calling postBatchTemplatesFromAttributes.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/batch-templates/from-attributes`;\n    }\n\n    /**\n     * Updates a batch template payment.\n     * Updates a batch template payment identified by batch template id and batch template payment id pair. The update is not partial, meaning the new state will overrite the exisitng state by replacing it completely. Only the creator of the batch template can update payments. When counterparty arrangement id is provided, then the account information (IBAN/BBAN, bank branch code and account name) is going to be pulled from Product Summary, overwriting the account information that was directly provided. When current user has no access to the requested arrangement or the arrangement does not exist, the update fails with bad request status. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putBatchTemplatePaymentById(requestParameters: PutBatchTemplatePaymentByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchTemplatePaymentsPutResponse>;\n    /**\n     * Updates a batch template payment.\n     * Updates a batch template payment identified by batch template id and batch template payment id pair. The update is not partial, meaning the new state will overrite the exisitng state by replacing it completely. Only the creator of the batch template can update payments. When counterparty arrangement id is provided, then the account information (IBAN/BBAN, bank branch code and account name) is going to be pulled from Product Summary, overwriting the account information that was directly provided. When current user has no access to the requested arrangement or the arrangement does not exist, the update fails with bad request status. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putBatchTemplatePaymentById(requestParameters: PutBatchTemplatePaymentByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchTemplatePaymentsPutResponse>>;\n    /**\n     * Updates a batch template payment.\n     * Updates a batch template payment identified by batch template id and batch template payment id pair. The update is not partial, meaning the new state will overrite the exisitng state by replacing it completely. Only the creator of the batch template can update payments. When counterparty arrangement id is provided, then the account information (IBAN/BBAN, bank branch code and account name) is going to be pulled from Product Summary, overwriting the account information that was directly provided. When current user has no access to the requested arrangement or the arrangement does not exist, the update fails with bad request status. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putBatchTemplatePaymentById(requestParameters: PutBatchTemplatePaymentByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchTemplatePaymentsPutResponse>>;\n    /**\n     * Updates a batch template payment.\n     * Updates a batch template payment identified by batch template id and batch template payment id pair. The update is not partial, meaning the new state will overrite the exisitng state by replacing it completely. Only the creator of the batch template can update payments. When counterparty arrangement id is provided, then the account information (IBAN/BBAN, bank branch code and account name) is going to be pulled from Product Summary, overwriting the account information that was directly provided. When current user has no access to the requested arrangement or the arrangement does not exist, the update fails with bad request status. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putBatchTemplatePaymentById(requestParameters: PutBatchTemplatePaymentByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchTemplateId = requestParameters[\"batchTemplateId\"];\n        if (_batchTemplateId === null || _batchTemplateId === undefined) {\n            throw new Error('Required parameter batchTemplateId was null or undefined when calling putBatchTemplatePaymentById.');\n        }\n        const _batchTemplatePaymentId = requestParameters[\"batchTemplatePaymentId\"];\n        if (_batchTemplatePaymentId === null || _batchTemplatePaymentId === undefined) {\n            throw new Error('Required parameter batchTemplatePaymentId was null or undefined when calling putBatchTemplatePaymentById.');\n        }\n        const _batchTemplatePaymentsPutRequest = requestParameters[\"batchTemplatePaymentsPutRequest\"];\n        if (_batchTemplatePaymentsPutRequest === null || _batchTemplatePaymentsPutRequest === undefined) {\n            throw new Error('Required parameter batchTemplatePaymentsPutRequest was null or undefined when calling putBatchTemplatePaymentById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<BatchTemplatePaymentsPutResponse>(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments/${encodeURIComponent(String(_batchTemplatePaymentId))}`,\n            _batchTemplatePaymentsPutRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public putBatchTemplatePaymentByIdUrl(requestParameters: PutBatchTemplatePaymentByIdRequestParams): string {\n        const _batchTemplateId = requestParameters[\"batchTemplateId\"];\n        if (_batchTemplateId === null || _batchTemplateId === undefined) {\n            throw new Error('Required parameter batchTemplateId was null or undefined when calling putBatchTemplatePaymentById.');\n        }\n        const _batchTemplatePaymentId = requestParameters[\"batchTemplatePaymentId\"];\n        if (_batchTemplatePaymentId === null || _batchTemplatePaymentId === undefined) {\n            throw new Error('Required parameter batchTemplatePaymentId was null or undefined when calling putBatchTemplatePaymentById.');\n        }\n        const _batchTemplatePaymentsPutRequest = requestParameters[\"batchTemplatePaymentsPutRequest\"];\n        if (_batchTemplatePaymentsPutRequest === null || _batchTemplatePaymentsPutRequest === undefined) {\n            throw new Error('Required parameter batchTemplatePaymentsPutRequest was null or undefined when calling putBatchTemplatePaymentById.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments/${encodeURIComponent(String(_batchTemplatePaymentId))}`;\n    }\n\n    /**\n     * Updates a batch template.\n     * Updates a batch template. A batch template with status DRAFT can only be updated with the payload values. A batch template with status AVAILABLE can only be updated from another draft template created from this template with id given in parameters. The draft template is valiated before updating the existing template. The access control check depends on the batch template status.   1. If the status is DRAFT then the Create access to the business function of the batch templates, View access to the batch type and Originator account is validated.   2. If the status is AVAILABLE, then the Edit access to the business function of the batch templates, View access to the batch type and originator account is validated. The update is not partial, meaning the new state will overrite the exisitng state by replacing it completely. All the details are updated except batchType, servicAgreementId and creditDebitMixedIndicator. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateBatchTemplateById(requestParameters: UpdateBatchTemplateByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchTemplatesPutResponse>;\n    /**\n     * Updates a batch template.\n     * Updates a batch template. A batch template with status DRAFT can only be updated with the payload values. A batch template with status AVAILABLE can only be updated from another draft template created from this template with id given in parameters. The draft template is valiated before updating the existing template. The access control check depends on the batch template status.   1. If the status is DRAFT then the Create access to the business function of the batch templates, View access to the batch type and Originator account is validated.   2. If the status is AVAILABLE, then the Edit access to the business function of the batch templates, View access to the batch type and originator account is validated. The update is not partial, meaning the new state will overrite the exisitng state by replacing it completely. All the details are updated except batchType, servicAgreementId and creditDebitMixedIndicator. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateBatchTemplateById(requestParameters: UpdateBatchTemplateByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchTemplatesPutResponse>>;\n    /**\n     * Updates a batch template.\n     * Updates a batch template. A batch template with status DRAFT can only be updated with the payload values. A batch template with status AVAILABLE can only be updated from another draft template created from this template with id given in parameters. The draft template is valiated before updating the existing template. The access control check depends on the batch template status.   1. If the status is DRAFT then the Create access to the business function of the batch templates, View access to the batch type and Originator account is validated.   2. If the status is AVAILABLE, then the Edit access to the business function of the batch templates, View access to the batch type and originator account is validated. The update is not partial, meaning the new state will overrite the exisitng state by replacing it completely. All the details are updated except batchType, servicAgreementId and creditDebitMixedIndicator. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateBatchTemplateById(requestParameters: UpdateBatchTemplateByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchTemplatesPutResponse>>;\n    /**\n     * Updates a batch template.\n     * Updates a batch template. A batch template with status DRAFT can only be updated with the payload values. A batch template with status AVAILABLE can only be updated from another draft template created from this template with id given in parameters. The draft template is valiated before updating the existing template. The access control check depends on the batch template status.   1. If the status is DRAFT then the Create access to the business function of the batch templates, View access to the batch type and Originator account is validated.   2. If the status is AVAILABLE, then the Edit access to the business function of the batch templates, View access to the batch type and originator account is validated. The update is not partial, meaning the new state will overrite the exisitng state by replacing it completely. All the details are updated except batchType, servicAgreementId and creditDebitMixedIndicator. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateBatchTemplateById(requestParameters: UpdateBatchTemplateByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchTemplateId = requestParameters[\"batchTemplateId\"];\n        if (_batchTemplateId === null || _batchTemplateId === undefined) {\n            throw new Error('Required parameter batchTemplateId was null or undefined when calling updateBatchTemplateById.');\n        }\n        const _draftTemplateId = requestParameters[\"draftTemplateId\"];\n        const _batchTemplatesPutRequest = requestParameters[\"batchTemplatesPutRequest\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_draftTemplateId !== undefined && _draftTemplateId !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_draftTemplateId, 'draftTemplateId');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<BatchTemplatesPutResponse>(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}`,\n            _batchTemplatesPutRequest,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public updateBatchTemplateByIdUrl(requestParameters: UpdateBatchTemplateByIdRequestParams): string {\n        const _batchTemplateId = requestParameters[\"batchTemplateId\"];\n        if (_batchTemplateId === null || _batchTemplateId === undefined) {\n            throw new Error('Required parameter batchTemplateId was null or undefined when calling updateBatchTemplateById.');\n        }\n        const _draftTemplateId = requestParameters[\"draftTemplateId\"];\n        const _batchTemplatesPutRequest = requestParameters[\"batchTemplatesPutRequest\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_draftTemplateId !== undefined && _draftTemplateId !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_draftTemplateId, 'draftTemplateId');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Updates the status of a batch template.\n     * Updates the status of a batch template. Valid transition from status DRAFT is AVAILABLE. By setting status to AVAILABLE with dryRun &#x3D; false, the batch template is validated and updated with status as AVAILABLE and this can be used as accelerator to create new batch orders. By setting status to AVAILABLE with dryRun &#x3D; true, the batch template is validated but status is not updated. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateBatchTemplateStatusById(requestParameters: UpdateBatchTemplateStatusByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BatchTemplatesStatusUpdateResponse>;\n    /**\n     * Updates the status of a batch template.\n     * Updates the status of a batch template. Valid transition from status DRAFT is AVAILABLE. By setting status to AVAILABLE with dryRun &#x3D; false, the batch template is validated and updated with status as AVAILABLE and this can be used as accelerator to create new batch orders. By setting status to AVAILABLE with dryRun &#x3D; true, the batch template is validated but status is not updated. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateBatchTemplateStatusById(requestParameters: UpdateBatchTemplateStatusByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BatchTemplatesStatusUpdateResponse>>;\n    /**\n     * Updates the status of a batch template.\n     * Updates the status of a batch template. Valid transition from status DRAFT is AVAILABLE. By setting status to AVAILABLE with dryRun &#x3D; false, the batch template is validated and updated with status as AVAILABLE and this can be used as accelerator to create new batch orders. By setting status to AVAILABLE with dryRun &#x3D; true, the batch template is validated but status is not updated. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateBatchTemplateStatusById(requestParameters: UpdateBatchTemplateStatusByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BatchTemplatesStatusUpdateResponse>>;\n    /**\n     * Updates the status of a batch template.\n     * Updates the status of a batch template. Valid transition from status DRAFT is AVAILABLE. By setting status to AVAILABLE with dryRun &#x3D; false, the batch template is validated and updated with status as AVAILABLE and this can be used as accelerator to create new batch orders. By setting status to AVAILABLE with dryRun &#x3D; true, the batch template is validated but status is not updated. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateBatchTemplateStatusById(requestParameters: UpdateBatchTemplateStatusByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchTemplateId = requestParameters[\"batchTemplateId\"];\n        if (_batchTemplateId === null || _batchTemplateId === undefined) {\n            throw new Error('Required parameter batchTemplateId was null or undefined when calling updateBatchTemplateStatusById.');\n        }\n        const _batchTemplatesStatusUpdateRequest = requestParameters[\"batchTemplatesStatusUpdateRequest\"];\n        if (_batchTemplatesStatusUpdateRequest === null || _batchTemplatesStatusUpdateRequest === undefined) {\n            throw new Error('Required parameter batchTemplatesStatusUpdateRequest was null or undefined when calling updateBatchTemplateStatusById.');\n        }\n        const _dryRun = requestParameters[\"dryRun\"];\n        const _intendedCreditTransactionsCount = requestParameters[\"intendedCreditTransactionsCount\"];\n        const _intendedDebitTransactionsCount = requestParameters[\"intendedDebitTransactionsCount\"];\n        const _intendedCreditAmount = requestParameters[\"intendedCreditAmount\"];\n        const _intendedDebitAmount = requestParameters[\"intendedDebitAmount\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_dryRun !== undefined && _dryRun !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_dryRun, 'dryRun');\n        }\n        if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');\n        }\n        if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');\n        }\n        if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedCreditAmount, 'intendedCreditAmount');\n        }\n        if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedDebitAmount, 'intendedDebitAmount');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<BatchTemplatesStatusUpdateResponse>(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/status`,\n            _batchTemplatesStatusUpdateRequest,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public updateBatchTemplateStatusByIdUrl(requestParameters: UpdateBatchTemplateStatusByIdRequestParams): string {\n        const _batchTemplateId = requestParameters[\"batchTemplateId\"];\n        if (_batchTemplateId === null || _batchTemplateId === undefined) {\n            throw new Error('Required parameter batchTemplateId was null or undefined when calling updateBatchTemplateStatusById.');\n        }\n        const _batchTemplatesStatusUpdateRequest = requestParameters[\"batchTemplatesStatusUpdateRequest\"];\n        if (_batchTemplatesStatusUpdateRequest === null || _batchTemplatesStatusUpdateRequest === undefined) {\n            throw new Error('Required parameter batchTemplatesStatusUpdateRequest was null or undefined when calling updateBatchTemplateStatusById.');\n        }\n        const _dryRun = requestParameters[\"dryRun\"];\n        const _intendedCreditTransactionsCount = requestParameters[\"intendedCreditTransactionsCount\"];\n        const _intendedDebitTransactionsCount = requestParameters[\"intendedDebitTransactionsCount\"];\n        const _intendedCreditAmount = requestParameters[\"intendedCreditAmount\"];\n        const _intendedDebitAmount = requestParameters[\"intendedDebitAmount\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_dryRun !== undefined && _dryRun !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_dryRun, 'dryRun');\n        }\n        if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');\n        }\n        if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');\n        }\n        if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedCreditAmount, 'intendedCreditAmount');\n        }\n        if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedDebitAmount, 'intendedDebitAmount');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/status${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Retrieves the validation errors by validating the draft template and the associated payments.\n     * Validates a draft template and the associated payments. Only the creator of the draft template can perform the validations. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public validateBatchTemplate(requestParameters: ValidateBatchTemplateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<ErrorItem>>;\n    /**\n     * Retrieves the validation errors by validating the draft template and the associated payments.\n     * Validates a draft template and the associated payments. Only the creator of the draft template can perform the validations. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public validateBatchTemplate(requestParameters: ValidateBatchTemplateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<ErrorItem>>>;\n    /**\n     * Retrieves the validation errors by validating the draft template and the associated payments.\n     * Validates a draft template and the associated payments. Only the creator of the draft template can perform the validations. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public validateBatchTemplate(requestParameters: ValidateBatchTemplateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<ErrorItem>>>;\n    /**\n     * Retrieves the validation errors by validating the draft template and the associated payments.\n     * Validates a draft template and the associated payments. Only the creator of the draft template can perform the validations. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public validateBatchTemplate(requestParameters: ValidateBatchTemplateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _batchTemplateId = requestParameters[\"batchTemplateId\"];\n        if (_batchTemplateId === null || _batchTemplateId === undefined) {\n            throw new Error('Required parameter batchTemplateId was null or undefined when calling validateBatchTemplate.');\n        }\n        const _intendedCreditTransactionsCount = requestParameters[\"intendedCreditTransactionsCount\"];\n        const _intendedDebitTransactionsCount = requestParameters[\"intendedDebitTransactionsCount\"];\n        const _intendedCreditAmount = requestParameters[\"intendedCreditAmount\"];\n        const _intendedDebitAmount = requestParameters[\"intendedDebitAmount\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');\n        }\n        if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');\n        }\n        if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedCreditAmount, 'intendedCreditAmount');\n        }\n        if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedDebitAmount, 'intendedDebitAmount');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<ErrorItem>>(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/validation-errors`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public validateBatchTemplateUrl(requestParameters: ValidateBatchTemplateRequestParams): string {\n        const _batchTemplateId = requestParameters[\"batchTemplateId\"];\n        if (_batchTemplateId === null || _batchTemplateId === undefined) {\n            throw new Error('Required parameter batchTemplateId was null or undefined when calling validateBatchTemplate.');\n        }\n        const _intendedCreditTransactionsCount = requestParameters[\"intendedCreditTransactionsCount\"];\n        const _intendedDebitTransactionsCount = requestParameters[\"intendedDebitTransactionsCount\"];\n        const _intendedCreditAmount = requestParameters[\"intendedCreditAmount\"];\n        const _intendedDebitAmount = requestParameters[\"intendedDebitAmount\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');\n        }\n        if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');\n        }\n        if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedCreditAmount, 'intendedCreditAmount');\n        }\n        if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_intendedDebitAmount, 'intendedDebitAmount');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/validation-errors${queryString ? `?${queryString}` : ''}`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /client-api/v1/batch-templates/{batchTemplateId}/batch-order URL pattern\n*/\nexport const BatchTemplatesHttpServiceCreateBatchOrderFromTemplateMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/batch-templates/{batchTemplateId}/batch-order\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 201,\n                    body: {\n  \"id\" : \"c1263fd6-8bd3-4a0b-be02-5db5cb1d6d06\",\n  \"name\" : \"Europe branches cash distribution\",\n  \"type\" : \"INTRACOMPANY_PAYMENT_CREDIT_USA\",\n  \"status\" : \"DRAFT\",\n  \"creditDebitMixedIndicator\" : \"CREDIT\",\n  \"totalCreditTransactionsCount\" : 120,\n  \"totalCreditInstructedAmount\" : {\n    \"amount\" : \"322038.00\",\n    \"currencyCode\" : \"USD\"\n  },\n  \"entryClass\" : \"CCD\",\n  \"account\" : {\n    \"name\" : \"Main Current\",\n    \"identification\" : {\n      \"identification\" : \"4902331374\",\n      \"schemeName\" : \"BBAN\"\n    }\n  },\n  \"companyId\" : \"1800948594\",\n  \"companyName\" : \"Your Company\",\n  \"bankBranchCode\" : \"113105452\"\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/batch-templates/{batchTemplateId} URL pattern\n*/\nexport const BatchTemplatesHttpServiceDeleteBatchTemplateByIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/batch-templates/{batchTemplateId}\",\n        method: \"DELETE\",\n        responses: [\n                {\n                status: 204,\n                body: \"\"\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments/{batchTemplatePaymentId} URL pattern\n*/\nexport const BatchTemplatesHttpServiceDeleteBatchTemplatePaymentByIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments/{batchTemplatePaymentId}\",\n        method: \"DELETE\",\n        responses: [\n                {\n                status: 204,\n                body: \"\"\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Batch template not found\",\n  \"errors\" : [ ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Batch template payment not found\",\n  \"errors\" : [ ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments URL pattern\n*/\nexport const BatchTemplatesHttpServiceGetBatchTemplatePaymentsByIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"batchTemplatePayments\" : [ {\n    \"id\" : \"6c357c28-6714-11e7-907b-a6006ad3dcd0\",\n    \"counterpartyName\" : \"A. Hamers\",\n    \"counterpartyAccountNumber\" : \"5802354374\",\n    \"counterpartyBankBranchCode\" : \"214105452\",\n    \"creditDebitIndicator\" : \"DEBIT\",\n    \"instructedAmount\" : {\n      \"amount\" : \"4102.00\",\n      \"currencyCode\" : \"USD\"\n    },\n    \"description\" : \"Salary Mar 2021 empl.no:902713\"\n  } ],\n  \"totalBatchTemplatePayments\" : 1,\n  \"batchTemplate\" : {\n    \"id\" : \"7d341c28-6714-11e7-907b-a6006ad3dba0\",\n    \"name\" : \"Internal transfers Acme corp\",\n    \"serviceAgreementId\" : \"d6fdc581-1306-412a-9e40-86d851190acf\",\n    \"createdAt\" : \"2019-05-10T10:29:10Z\",\n    \"createdBy\" : \"U00243\",\n    \"canApply\" : true,\n    \"canDelete\" : true,\n    \"canEdit\" : true,\n    \"canDuplicate\" : true,\n    \"details\" : {\n      \"batchType\" : \"INTRACOMPANY_PAYMENT_CREDIT_USA\",\n      \"batchName\" : \"Europe branches cash distribution\",\n      \"creditDebitMixedIndicator\" : \"CREDIT\",\n      \"totalCreditTransactionsCount\" : 120,\n      \"totalCreditInstructedAmount\" : {\n        \"amount\" : \"4102.00\",\n        \"currencyCode\" : \"USD\"\n      },\n      \"entryClass\" : \"CCD\",\n      \"originatorAccount\" : {\n        \"name\" : \"Main Current\",\n        \"identification\" : {\n          \"identification\" : \"4902331374\",\n          \"schemeName\" : \"BBAN\"\n        }\n      },\n      \"companyId\" : \"1800948594\",\n      \"companyName\" : \"Your Company\",\n      \"bankBranchCode\" : \"113105452\"\n    }\n  }\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/batch-templates URL pattern\n*/\nexport const BatchTemplatesHttpServiceGetBatchTemplatesMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/batch-templates\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"batchTemplates\" : [ {\n    \"id\" : \"7d341c28-6714-11e7-907b-a6006ad3dba0\",\n    \"name\" : \"Internal transfers Acme corp\",\n    \"serviceAgreementId\" : \"d6fdc581-1306-412a-9e40-86d851190acf\",\n    \"createdAt\" : \"2019-05-10T10:29:10Z\",\n    \"createdBy\" : \"Ulli Ulrich\",\n    \"updatedAt\" : \"2021-05-10T10:29:10Z\",\n    \"updatedBy\" : \"Jinnu Ulrich\",\n    \"canApply\" : true,\n    \"canDelete\" : true,\n    \"canEdit\" : true,\n    \"canDuplicate\" : true,\n    \"details\" : {\n      \"batchType\" : \"INTRACOMPANY_PAYMENT_CREDIT_USA\",\n      \"batchName\" : \"Europe branches cash distribution\",\n      \"creditDebitMixedIndicator\" : \"CREDIT\",\n      \"totalCreditTransactionsCount\" : 120,\n      \"totalCreditInstructedAmount\" : {\n        \"amount\" : \"322038.00\",\n        \"currencyCode\" : \"USD\"\n      },\n      \"entryClass\" : \"CCD\",\n      \"originatorAccount\" : {\n        \"name\" : \"Main Current\",\n        \"identification\" : {\n          \"identification\" : \"4902331374\",\n          \"schemeName\" : \"BBAN\"\n        }\n      },\n      \"companyId\" : \"1800948594\",\n      \"companyName\" : \"Your Company\",\n      \"bankBranchCode\" : \"113105452\"\n    }\n  } ],\n  \"totalBatchTemplates\" : 1,\n  \"creditDebitMixedIndicator\" : \"CREDIT\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments URL pattern\n*/\nexport const BatchTemplatesHttpServicePostBatchTemplatePaymentsMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 201,\n                    body: {\n  \"id\" : \"6c357c28-6714-11e7-907b-a6006ad3dcd0\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Batch template not found\",\n  \"errors\" : [ ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/batch-templates URL pattern\n*/\nexport const BatchTemplatesHttpServicePostBatchTemplatesMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/batch-templates\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 201,\n                    body: {\n  \"batchTemplate\" : {\n    \"id\" : \"7d341c28-6714-11e7-907b-a6006ad3dba0\",\n    \"name\" : \"Internal transfers Acme corp\",\n    \"serviceAgreementId\" : \"d6fdc581-1306-412a-9e40-86d851190acf\",\n    \"status\" : \"AVAILABLE\",\n    \"createdAt\" : \"2019-05-10T10:29:10Z\",\n    \"createdBy\" : \"Uli Ulrich\",\n    \"details\" : {\n      \"batchType\" : \"INTRACOMPANY_PAYMENT_CREDIT_USA\",\n      \"batchName\" : \"Europe branches cash distribution\",\n      \"creditDebitMixedIndicator\" : \"CREDIT\",\n      \"totalCreditTransactionsCount\" : 120,\n      \"totalCreditInstructedAmount\" : {\n        \"amount\" : \"322038.00\",\n        \"currencyCode\" : \"USD\"\n      },\n      \"entryClass\" : \"CCD\",\n      \"originatorAccount\" : {\n        \"name\" : \"Main Current\",\n        \"identification\" : {\n          \"identification\" : \"4902331374\",\n          \"schemeName\" : \"BBAN\"\n        }\n      },\n      \"companyId\" : \"1800948594\",\n      \"companyName\" : \"Your Company\",\n      \"bankBranchCode\" : \"113105452\"\n    }\n  }\n}\n                },\n                {\n                    status: 201,\n                    body: {\n  \"batchTemplate\" : {\n    \"id\" : \"7c341c49-6344-22e7-907b-b6006ad3ecd0\",\n    \"name\" : \"Internal transfers Acme corp\",\n    \"serviceAgreementId\" : \"d6fdc581-1306-412a-9e40-86d851190acf\",\n    \"status\" : \"DRAFT\",\n    \"details\" : {\n      \"batchType\" : \"INTRACOMPANY_PAYMENT_CREDIT_USA\",\n      \"batchName\" : \"Europe branches cash distribution\",\n      \"creditDebitMixedIndicator\" : \"CREDIT\",\n      \"totalCreditTransactionsCount\" : 120,\n      \"totalCreditInstructedAmount\" : {\n        \"amount\" : \"322038.00\",\n        \"currencyCode\" : \"USD\"\n      },\n      \"entryClass\" : \"CCD\",\n      \"originatorAccount\" : {\n        \"name\" : \"Main Current\",\n        \"identification\" : {\n          \"identification\" : \"4902331374\",\n          \"schemeName\" : \"BBAN\"\n        }\n      },\n      \"companyId\" : \"1800948594\",\n      \"companyName\" : \"Your Company\",\n      \"bankBranchCode\" : \"113105452\"\n    }\n  }\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/batch-templates/from-attributes URL pattern\n*/\nexport const BatchTemplatesHttpServicePostBatchTemplatesFromAttributesMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/batch-templates/from-attributes\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 201,\n                    body: {\n  \"id\" : \"7c341c49-6344-22e7-907b-b6006ad3ecd0\",\n  \"status\" : \"DRAFT\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments/{batchTemplatePaymentId} URL pattern\n*/\nexport const BatchTemplatesHttpServicePutBatchTemplatePaymentByIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments/{batchTemplatePaymentId}\",\n        method: \"PUT\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"6c357c28-6714-11e7-907b-a6006ad3dcd0\",\n  \"counterpartyName\" : \"A. Hamers\",\n  \"counterpartyAccountNumber\" : \"5802354374\",\n  \"counterpartyBankBranchCode\" : \"214105452\",\n  \"creditDebitIndicator\" : \"CREDIT\",\n  \"instructedAmount\" : {\n    \"amount\" : \"4102.00\",\n    \"currencyCode\" : \"USD\"\n  },\n  \"description\" : \"Salary Mar 2021 empl.no:902713\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Batch template not found\",\n  \"errors\" : [ ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Batch template payment not found\",\n  \"errors\" : [ ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/batch-templates/{batchTemplateId} URL pattern\n*/\nexport const BatchTemplatesHttpServiceUpdateBatchTemplateByIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/batch-templates/{batchTemplateId}\",\n        method: \"PUT\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"batchTemplate\" : {\n    \"id\" : \"7c341c49-6344-22e7-907b-b6006ad3ecd0\",\n    \"name\" : \"Internal transfers Acme corp\",\n    \"serviceAgreementId\" : \"d6fdc581-1306-412a-9e40-86d851190acf\",\n    \"status\" : \"DRAFT\",\n    \"details\" : {\n      \"batchType\" : \"INTRACOMPANY_PAYMENT_CREDIT_USA\",\n      \"batchName\" : \"Europe branches cash distribution\",\n      \"creditDebitMixedIndicator\" : \"CREDIT\",\n      \"totalCreditTransactionsCount\" : 120,\n      \"totalCreditInstructedAmount\" : {\n        \"amount\" : \"322038.00\",\n        \"currencyCode\" : \"USD\"\n      },\n      \"entryClass\" : \"CCD\",\n      \"originatorAccount\" : {\n        \"name\" : \"Main Current\",\n        \"identification\" : {\n          \"identification\" : \"4902331374\",\n          \"schemeName\" : \"BBAN\"\n        }\n      },\n      \"companyId\" : \"1800948594\",\n      \"companyName\" : \"Your Company\",\n      \"bankBranchCode\" : \"113105452\"\n    }\n  }\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"batchTemplate\" : {\n    \"id\" : \"7d341c28-6714-11e7-907b-a6006ad3dba0\",\n    \"name\" : \"Internal transfers Acme corp\",\n    \"serviceAgreementId\" : \"d6fdc581-1306-412a-9e40-86d851190acf\",\n    \"status\" : \"AVAILABLE\",\n    \"createdAt\" : \"2019-05-10T10:29:10Z\",\n    \"createdBy\" : \"Ulli Ulrich\",\n    \"updatedAt\" : \"2021-05-10T10:29:10Z\",\n    \"updatedBy\" : \"Jinnu Ulrich\",\n    \"details\" : {\n      \"batchType\" : \"INTRACOMPANY_PAYMENT_CREDIT_USA\",\n      \"batchName\" : \"Europe branches cash distribution\",\n      \"creditDebitMixedIndicator\" : \"CREDIT\",\n      \"totalCreditTransactionsCount\" : 120,\n      \"totalCreditInstructedAmount\" : {\n        \"amount\" : \"322038.00\",\n        \"currencyCode\" : \"USD\"\n      },\n      \"entryClass\" : \"CCD\",\n      \"originatorAccount\" : {\n        \"name\" : \"Main Current\",\n        \"identification\" : {\n          \"identification\" : \"4902331374\",\n          \"schemeName\" : \"BBAN\"\n        }\n      },\n      \"companyId\" : \"1800948594\",\n      \"companyName\" : \"Your Company\",\n      \"bankBranchCode\" : \"113105452\"\n    }\n  }\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/batch-templates/{batchTemplateId}/status URL pattern\n*/\nexport const BatchTemplatesHttpServiceUpdateBatchTemplateStatusByIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/batch-templates/{batchTemplateId}/status\",\n        method: \"PUT\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"batchTemplate\" : {\n    \"id\" : \"7c341c49-6344-22e7-907b-b6006ad3ecd0\",\n    \"name\" : \"Internal transfers Acme corp\",\n    \"serviceAgreementId\" : \"d6fdc581-1306-412a-9e40-86d851190acf\",\n    \"status\" : \"DRAFT\",\n    \"details\" : {\n      \"batchType\" : \"INTRACOMPANY_PAYMENT_CREDIT_USA\",\n      \"batchName\" : \"Europe branches cash distribution\",\n      \"creditDebitMixedIndicator\" : \"CREDIT\",\n      \"totalCreditTransactionsCount\" : 120,\n      \"totalCreditInstructedAmount\" : {\n        \"amount\" : \"322038.00\",\n        \"currencyCode\" : \"USD\"\n      },\n      \"entryClass\" : \"CCD\",\n      \"originatorAccount\" : {\n        \"name\" : \"Main Current\",\n        \"identification\" : {\n          \"identification\" : \"4902331374\",\n          \"schemeName\" : \"BBAN\"\n        }\n      },\n      \"companyId\" : \"1800948594\",\n      \"companyName\" : \"Your Company\",\n      \"bankBranchCode\" : \"113105452\"\n    }\n  }\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/batch-templates/{batchTemplateId}/validation-errors URL pattern\n*/\nexport const BatchTemplatesHttpServiceValidateBatchTemplateMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/batch-templates/{batchTemplateId}/validation-errors\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: [ {\n  \"message\" : \"Total credit transactions count {{totalCreditTransactionsCount}} does not match the intended total credit transactions count {{intendedTotalCreditTransactionsCount}}.\",\n  \"key\" : \"TotalCreditTransactionsCountMismatch\",\n  \"context\" : {\n    \"intendedTotalCreditTransactionsCount\" : \"10000\",\n    \"totalCreditTransactionsCount\" : \"2\"\n  }\n} ]\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n\nexport const BatchTemplatesHttpServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/client-api/v1/batch-templates/{batchTemplateId}/batch-order\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 201,\n                body: {\n  \"id\" : \"c1263fd6-8bd3-4a0b-be02-5db5cb1d6d06\",\n  \"name\" : \"Europe branches cash distribution\",\n  \"type\" : \"INTRACOMPANY_PAYMENT_CREDIT_USA\",\n  \"status\" : \"DRAFT\",\n  \"creditDebitMixedIndicator\" : \"CREDIT\",\n  \"totalCreditTransactionsCount\" : 120,\n  \"totalCreditInstructedAmount\" : {\n    \"amount\" : \"322038.00\",\n    \"currencyCode\" : \"USD\"\n  },\n  \"entryClass\" : \"CCD\",\n  \"account\" : {\n    \"name\" : \"Main Current\",\n    \"identification\" : {\n      \"identification\" : \"4902331374\",\n      \"schemeName\" : \"BBAN\"\n    }\n  },\n  \"companyId\" : \"1800948594\",\n  \"companyName\" : \"Your Company\",\n  \"bankBranchCode\" : \"113105452\"\n}\n            },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/batch-templates/{batchTemplateId}\",\n        method: \"DELETE\",\n        responses: [\n\n        {\n          status: 204,\n          body: \"\"\n        },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments/{batchTemplatePaymentId}\",\n        method: \"DELETE\",\n        responses: [\n\n        {\n          status: 204,\n          body: \"\"\n        },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Batch template not found\",\n  \"errors\" : [ ]\n}\n            },\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Batch template payment not found\",\n  \"errors\" : [ ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"batchTemplatePayments\" : [ {\n    \"id\" : \"6c357c28-6714-11e7-907b-a6006ad3dcd0\",\n    \"counterpartyName\" : \"A. Hamers\",\n    \"counterpartyAccountNumber\" : \"5802354374\",\n    \"counterpartyBankBranchCode\" : \"214105452\",\n    \"creditDebitIndicator\" : \"DEBIT\",\n    \"instructedAmount\" : {\n      \"amount\" : \"4102.00\",\n      \"currencyCode\" : \"USD\"\n    },\n    \"description\" : \"Salary Mar 2021 empl.no:902713\"\n  } ],\n  \"totalBatchTemplatePayments\" : 1,\n  \"batchTemplate\" : {\n    \"id\" : \"7d341c28-6714-11e7-907b-a6006ad3dba0\",\n    \"name\" : \"Internal transfers Acme corp\",\n    \"serviceAgreementId\" : \"d6fdc581-1306-412a-9e40-86d851190acf\",\n    \"createdAt\" : \"2019-05-10T10:29:10Z\",\n    \"createdBy\" : \"U00243\",\n    \"canApply\" : true,\n    \"canDelete\" : true,\n    \"canEdit\" : true,\n    \"canDuplicate\" : true,\n    \"details\" : {\n      \"batchType\" : \"INTRACOMPANY_PAYMENT_CREDIT_USA\",\n      \"batchName\" : \"Europe branches cash distribution\",\n      \"creditDebitMixedIndicator\" : \"CREDIT\",\n      \"totalCreditTransactionsCount\" : 120,\n      \"totalCreditInstructedAmount\" : {\n        \"amount\" : \"4102.00\",\n        \"currencyCode\" : \"USD\"\n      },\n      \"entryClass\" : \"CCD\",\n      \"originatorAccount\" : {\n        \"name\" : \"Main Current\",\n        \"identification\" : {\n          \"identification\" : \"4902331374\",\n          \"schemeName\" : \"BBAN\"\n        }\n      },\n      \"companyId\" : \"1800948594\",\n      \"companyName\" : \"Your Company\",\n      \"bankBranchCode\" : \"113105452\"\n    }\n  }\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/batch-templates\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"batchTemplates\" : [ {\n    \"id\" : \"7d341c28-6714-11e7-907b-a6006ad3dba0\",\n    \"name\" : \"Internal transfers Acme corp\",\n    \"serviceAgreementId\" : \"d6fdc581-1306-412a-9e40-86d851190acf\",\n    \"createdAt\" : \"2019-05-10T10:29:10Z\",\n    \"createdBy\" : \"Ulli Ulrich\",\n    \"updatedAt\" : \"2021-05-10T10:29:10Z\",\n    \"updatedBy\" : \"Jinnu Ulrich\",\n    \"canApply\" : true,\n    \"canDelete\" : true,\n    \"canEdit\" : true,\n    \"canDuplicate\" : true,\n    \"details\" : {\n      \"batchType\" : \"INTRACOMPANY_PAYMENT_CREDIT_USA\",\n      \"batchName\" : \"Europe branches cash distribution\",\n      \"creditDebitMixedIndicator\" : \"CREDIT\",\n      \"totalCreditTransactionsCount\" : 120,\n      \"totalCreditInstructedAmount\" : {\n        \"amount\" : \"322038.00\",\n        \"currencyCode\" : \"USD\"\n      },\n      \"entryClass\" : \"CCD\",\n      \"originatorAccount\" : {\n        \"name\" : \"Main Current\",\n        \"identification\" : {\n          \"identification\" : \"4902331374\",\n          \"schemeName\" : \"BBAN\"\n        }\n      },\n      \"companyId\" : \"1800948594\",\n      \"companyName\" : \"Your Company\",\n      \"bankBranchCode\" : \"113105452\"\n    }\n  } ],\n  \"totalBatchTemplates\" : 1,\n  \"creditDebitMixedIndicator\" : \"CREDIT\"\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 201,\n                body: {\n  \"id\" : \"6c357c28-6714-11e7-907b-a6006ad3dcd0\"\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Batch template not found\",\n  \"errors\" : [ ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/batch-templates\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 201,\n                body: {\n  \"batchTemplate\" : {\n    \"id\" : \"7d341c28-6714-11e7-907b-a6006ad3dba0\",\n    \"name\" : \"Internal transfers Acme corp\",\n    \"serviceAgreementId\" : \"d6fdc581-1306-412a-9e40-86d851190acf\",\n    \"status\" : \"AVAILABLE\",\n    \"createdAt\" : \"2019-05-10T10:29:10Z\",\n    \"createdBy\" : \"Uli Ulrich\",\n    \"details\" : {\n      \"batchType\" : \"INTRACOMPANY_PAYMENT_CREDIT_USA\",\n      \"batchName\" : \"Europe branches cash distribution\",\n      \"creditDebitMixedIndicator\" : \"CREDIT\",\n      \"totalCreditTransactionsCount\" : 120,\n      \"totalCreditInstructedAmount\" : {\n        \"amount\" : \"322038.00\",\n        \"currencyCode\" : \"USD\"\n      },\n      \"entryClass\" : \"CCD\",\n      \"originatorAccount\" : {\n        \"name\" : \"Main Current\",\n        \"identification\" : {\n          \"identification\" : \"4902331374\",\n          \"schemeName\" : \"BBAN\"\n        }\n      },\n      \"companyId\" : \"1800948594\",\n      \"companyName\" : \"Your Company\",\n      \"bankBranchCode\" : \"113105452\"\n    }\n  }\n}\n            },\n            {\n                status: 201,\n                body: {\n  \"batchTemplate\" : {\n    \"id\" : \"7c341c49-6344-22e7-907b-b6006ad3ecd0\",\n    \"name\" : \"Internal transfers Acme corp\",\n    \"serviceAgreementId\" : \"d6fdc581-1306-412a-9e40-86d851190acf\",\n    \"status\" : \"DRAFT\",\n    \"details\" : {\n      \"batchType\" : \"INTRACOMPANY_PAYMENT_CREDIT_USA\",\n      \"batchName\" : \"Europe branches cash distribution\",\n      \"creditDebitMixedIndicator\" : \"CREDIT\",\n      \"totalCreditTransactionsCount\" : 120,\n      \"totalCreditInstructedAmount\" : {\n        \"amount\" : \"322038.00\",\n        \"currencyCode\" : \"USD\"\n      },\n      \"entryClass\" : \"CCD\",\n      \"originatorAccount\" : {\n        \"name\" : \"Main Current\",\n        \"identification\" : {\n          \"identification\" : \"4902331374\",\n          \"schemeName\" : \"BBAN\"\n        }\n      },\n      \"companyId\" : \"1800948594\",\n      \"companyName\" : \"Your Company\",\n      \"bankBranchCode\" : \"113105452\"\n    }\n  }\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/batch-templates/from-attributes\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 201,\n                body: {\n  \"id\" : \"7c341c49-6344-22e7-907b-b6006ad3ecd0\",\n  \"status\" : \"DRAFT\"\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments/{batchTemplatePaymentId}\",\n        method: \"PUT\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : \"6c357c28-6714-11e7-907b-a6006ad3dcd0\",\n  \"counterpartyName\" : \"A. Hamers\",\n  \"counterpartyAccountNumber\" : \"5802354374\",\n  \"counterpartyBankBranchCode\" : \"214105452\",\n  \"creditDebitIndicator\" : \"CREDIT\",\n  \"instructedAmount\" : {\n    \"amount\" : \"4102.00\",\n    \"currencyCode\" : \"USD\"\n  },\n  \"description\" : \"Salary Mar 2021 empl.no:902713\"\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Batch template not found\",\n  \"errors\" : [ ]\n}\n            },\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Batch template payment not found\",\n  \"errors\" : [ ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/batch-templates/{batchTemplateId}\",\n        method: \"PUT\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"batchTemplate\" : {\n    \"id\" : \"7c341c49-6344-22e7-907b-b6006ad3ecd0\",\n    \"name\" : \"Internal transfers Acme corp\",\n    \"serviceAgreementId\" : \"d6fdc581-1306-412a-9e40-86d851190acf\",\n    \"status\" : \"DRAFT\",\n    \"details\" : {\n      \"batchType\" : \"INTRACOMPANY_PAYMENT_CREDIT_USA\",\n      \"batchName\" : \"Europe branches cash distribution\",\n      \"creditDebitMixedIndicator\" : \"CREDIT\",\n      \"totalCreditTransactionsCount\" : 120,\n      \"totalCreditInstructedAmount\" : {\n        \"amount\" : \"322038.00\",\n        \"currencyCode\" : \"USD\"\n      },\n      \"entryClass\" : \"CCD\",\n      \"originatorAccount\" : {\n        \"name\" : \"Main Current\",\n        \"identification\" : {\n          \"identification\" : \"4902331374\",\n          \"schemeName\" : \"BBAN\"\n        }\n      },\n      \"companyId\" : \"1800948594\",\n      \"companyName\" : \"Your Company\",\n      \"bankBranchCode\" : \"113105452\"\n    }\n  }\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"batchTemplate\" : {\n    \"id\" : \"7d341c28-6714-11e7-907b-a6006ad3dba0\",\n    \"name\" : \"Internal transfers Acme corp\",\n    \"serviceAgreementId\" : \"d6fdc581-1306-412a-9e40-86d851190acf\",\n    \"status\" : \"AVAILABLE\",\n    \"createdAt\" : \"2019-05-10T10:29:10Z\",\n    \"createdBy\" : \"Ulli Ulrich\",\n    \"updatedAt\" : \"2021-05-10T10:29:10Z\",\n    \"updatedBy\" : \"Jinnu Ulrich\",\n    \"details\" : {\n      \"batchType\" : \"INTRACOMPANY_PAYMENT_CREDIT_USA\",\n      \"batchName\" : \"Europe branches cash distribution\",\n      \"creditDebitMixedIndicator\" : \"CREDIT\",\n      \"totalCreditTransactionsCount\" : 120,\n      \"totalCreditInstructedAmount\" : {\n        \"amount\" : \"322038.00\",\n        \"currencyCode\" : \"USD\"\n      },\n      \"entryClass\" : \"CCD\",\n      \"originatorAccount\" : {\n        \"name\" : \"Main Current\",\n        \"identification\" : {\n          \"identification\" : \"4902331374\",\n          \"schemeName\" : \"BBAN\"\n        }\n      },\n      \"companyId\" : \"1800948594\",\n      \"companyName\" : \"Your Company\",\n      \"bankBranchCode\" : \"113105452\"\n    }\n  }\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/batch-templates/{batchTemplateId}/status\",\n        method: \"PUT\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"batchTemplate\" : {\n    \"id\" : \"7c341c49-6344-22e7-907b-b6006ad3ecd0\",\n    \"name\" : \"Internal transfers Acme corp\",\n    \"serviceAgreementId\" : \"d6fdc581-1306-412a-9e40-86d851190acf\",\n    \"status\" : \"DRAFT\",\n    \"details\" : {\n      \"batchType\" : \"INTRACOMPANY_PAYMENT_CREDIT_USA\",\n      \"batchName\" : \"Europe branches cash distribution\",\n      \"creditDebitMixedIndicator\" : \"CREDIT\",\n      \"totalCreditTransactionsCount\" : 120,\n      \"totalCreditInstructedAmount\" : {\n        \"amount\" : \"322038.00\",\n        \"currencyCode\" : \"USD\"\n      },\n      \"entryClass\" : \"CCD\",\n      \"originatorAccount\" : {\n        \"name\" : \"Main Current\",\n        \"identification\" : {\n          \"identification\" : \"4902331374\",\n          \"schemeName\" : \"BBAN\"\n        }\n      },\n      \"companyId\" : \"1800948594\",\n      \"companyName\" : \"Your Company\",\n      \"bankBranchCode\" : \"113105452\"\n    }\n  }\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/batch-templates/{batchTemplateId}/validation-errors\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: [ {\n  \"message\" : \"Total credit transactions count {{totalCreditTransactionsCount}} does not match the intended total credit transactions count {{intendedTotalCreditTransactionsCount}}.\",\n  \"key\" : \"TotalCreditTransactionsCountMismatch\",\n  \"context\" : {\n    \"intendedTotalCreditTransactionsCount\" : \"10000\",\n    \"totalCreditTransactionsCount\" : \"2\"\n  }\n} ]\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n    ]\n},\n]\n);\n\n\n"],"names":[],"mappings":"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"}