import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { PAYMENT_BATCH_TEMPLATE_BASE_PATH } from '../variables';
import { PaymentBatchTemplateConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class BatchTemplatesHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PaymentBatchTemplateConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    createBatchOrderFromTemplate(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling createBatchOrderFromTemplate.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-order`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    createBatchOrderFromTemplateUrl(requestParameters) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling createBatchOrderFromTemplate.');
        }
        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-order`;
    }
    deleteBatchTemplateById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling deleteBatchTemplateById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteBatchTemplateByIdUrl(requestParameters) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling deleteBatchTemplateById.');
        }
        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}`;
    }
    deleteBatchTemplatePaymentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling deleteBatchTemplatePaymentById.');
        }
        const _batchTemplatePaymentId = requestParameters["batchTemplatePaymentId"];
        if (_batchTemplatePaymentId === null || _batchTemplatePaymentId === undefined) {
            throw new Error('Required parameter batchTemplatePaymentId was null or undefined when calling deleteBatchTemplatePaymentById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments/${encodeURIComponent(String(_batchTemplatePaymentId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteBatchTemplatePaymentByIdUrl(requestParameters) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling deleteBatchTemplatePaymentById.');
        }
        const _batchTemplatePaymentId = requestParameters["batchTemplatePaymentId"];
        if (_batchTemplatePaymentId === null || _batchTemplatePaymentId === undefined) {
            throw new Error('Required parameter batchTemplatePaymentId was null or undefined when calling deleteBatchTemplatePaymentById.');
        }
        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments/${encodeURIComponent(String(_batchTemplatePaymentId))}`;
    }
    getBatchTemplatePaymentsById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling getBatchTemplatePaymentsById.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _privilegesToCheck = requestParameters["privilegesToCheck"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_privilegesToCheck) {
            _privilegesToCheck.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'privilegesToCheck');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBatchTemplatePaymentsByIdUrl(requestParameters) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling getBatchTemplatePaymentsById.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _privilegesToCheck = requestParameters["privilegesToCheck"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_privilegesToCheck) {
            _privilegesToCheck.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'privilegesToCheck');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments${queryString ? `?${queryString}` : ''}`;
    }
    getBatchTemplates(requestParameters, observe = 'body', reportProgress = false, options) {
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _batchType = requestParameters["batchType"];
        const _creditDebitMixedIndicator = requestParameters["creditDebitMixedIndicator"];
        const _privilegesToCheck = requestParameters["privilegesToCheck"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_batchType !== undefined && _batchType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _batchType, 'batchType');
        }
        if (_creditDebitMixedIndicator !== undefined && _creditDebitMixedIndicator !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _creditDebitMixedIndicator, 'creditDebitMixedIndicator');
        }
        if (_privilegesToCheck) {
            _privilegesToCheck.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'privilegesToCheck');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/batch-templates`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBatchTemplatesUrl(requestParameters) {
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _batchType = requestParameters["batchType"];
        const _creditDebitMixedIndicator = requestParameters["creditDebitMixedIndicator"];
        const _privilegesToCheck = requestParameters["privilegesToCheck"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_batchType !== undefined && _batchType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _batchType, 'batchType');
        }
        if (_creditDebitMixedIndicator !== undefined && _creditDebitMixedIndicator !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _creditDebitMixedIndicator, 'creditDebitMixedIndicator');
        }
        if (_privilegesToCheck) {
            _privilegesToCheck.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'privilegesToCheck');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/batch-templates${queryString ? `?${queryString}` : ''}`;
    }
    postBatchTemplatePayments(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling postBatchTemplatePayments.');
        }
        const _batchTemplatePaymentsPostRequest = requestParameters["batchTemplatePaymentsPostRequest"];
        if (_batchTemplatePaymentsPostRequest === null || _batchTemplatePaymentsPostRequest === undefined) {
            throw new Error('Required parameter batchTemplatePaymentsPostRequest was null or undefined when calling postBatchTemplatePayments.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments`, _batchTemplatePaymentsPostRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBatchTemplatePaymentsUrl(requestParameters) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling postBatchTemplatePayments.');
        }
        const _batchTemplatePaymentsPostRequest = requestParameters["batchTemplatePaymentsPostRequest"];
        if (_batchTemplatePaymentsPostRequest === null || _batchTemplatePaymentsPostRequest === undefined) {
            throw new Error('Required parameter batchTemplatePaymentsPostRequest was null or undefined when calling postBatchTemplatePayments.');
        }
        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments`;
    }
    postBatchTemplates(requestParameters, observe = 'body', reportProgress = false, options) {
        const _draftOf = requestParameters["draftOf"];
        const _copyFrom = requestParameters["copyFrom"];
        const _name = requestParameters["name"];
        const _batchTemplatesPostRequest = requestParameters["batchTemplatesPostRequest"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_draftOf !== undefined && _draftOf !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _draftOf, 'draftOf');
        }
        if (_copyFrom !== undefined && _copyFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _copyFrom, 'copyFrom');
        }
        if (_name !== undefined && _name !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _name, 'name');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/batch-templates`, _batchTemplatesPostRequest, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBatchTemplatesUrl(requestParameters) {
        const _draftOf = requestParameters["draftOf"];
        const _copyFrom = requestParameters["copyFrom"];
        const _name = requestParameters["name"];
        const _batchTemplatesPostRequest = requestParameters["batchTemplatesPostRequest"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_draftOf !== undefined && _draftOf !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _draftOf, 'draftOf');
        }
        if (_copyFrom !== undefined && _copyFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _copyFrom, 'copyFrom');
        }
        if (_name !== undefined && _name !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _name, 'name');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/batch-templates${queryString ? `?${queryString}` : ''}`;
    }
    postBatchTemplatesFromAttributes(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplatesAttributesPostRequest = requestParameters["batchTemplatesAttributesPostRequest"];
        if (_batchTemplatesAttributesPostRequest === null || _batchTemplatesAttributesPostRequest === undefined) {
            throw new Error('Required parameter batchTemplatesAttributesPostRequest was null or undefined when calling postBatchTemplatesFromAttributes.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/batch-templates/from-attributes`, _batchTemplatesAttributesPostRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBatchTemplatesFromAttributesUrl(requestParameters) {
        const _batchTemplatesAttributesPostRequest = requestParameters["batchTemplatesAttributesPostRequest"];
        if (_batchTemplatesAttributesPostRequest === null || _batchTemplatesAttributesPostRequest === undefined) {
            throw new Error('Required parameter batchTemplatesAttributesPostRequest was null or undefined when calling postBatchTemplatesFromAttributes.');
        }
        return `${this.configuration.basePath}/client-api/v1/batch-templates/from-attributes`;
    }
    putBatchTemplatePaymentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling putBatchTemplatePaymentById.');
        }
        const _batchTemplatePaymentId = requestParameters["batchTemplatePaymentId"];
        if (_batchTemplatePaymentId === null || _batchTemplatePaymentId === undefined) {
            throw new Error('Required parameter batchTemplatePaymentId was null or undefined when calling putBatchTemplatePaymentById.');
        }
        const _batchTemplatePaymentsPutRequest = requestParameters["batchTemplatePaymentsPutRequest"];
        if (_batchTemplatePaymentsPutRequest === null || _batchTemplatePaymentsPutRequest === undefined) {
            throw new Error('Required parameter batchTemplatePaymentsPutRequest was null or undefined when calling putBatchTemplatePaymentById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments/${encodeURIComponent(String(_batchTemplatePaymentId))}`, _batchTemplatePaymentsPutRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putBatchTemplatePaymentByIdUrl(requestParameters) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling putBatchTemplatePaymentById.');
        }
        const _batchTemplatePaymentId = requestParameters["batchTemplatePaymentId"];
        if (_batchTemplatePaymentId === null || _batchTemplatePaymentId === undefined) {
            throw new Error('Required parameter batchTemplatePaymentId was null or undefined when calling putBatchTemplatePaymentById.');
        }
        const _batchTemplatePaymentsPutRequest = requestParameters["batchTemplatePaymentsPutRequest"];
        if (_batchTemplatePaymentsPutRequest === null || _batchTemplatePaymentsPutRequest === undefined) {
            throw new Error('Required parameter batchTemplatePaymentsPutRequest was null or undefined when calling putBatchTemplatePaymentById.');
        }
        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments/${encodeURIComponent(String(_batchTemplatePaymentId))}`;
    }
    updateBatchTemplateById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling updateBatchTemplateById.');
        }
        const _draftTemplateId = requestParameters["draftTemplateId"];
        const _batchTemplatesPutRequest = requestParameters["batchTemplatesPutRequest"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_draftTemplateId !== undefined && _draftTemplateId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _draftTemplateId, 'draftTemplateId');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}`, _batchTemplatesPutRequest, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateBatchTemplateByIdUrl(requestParameters) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling updateBatchTemplateById.');
        }
        const _draftTemplateId = requestParameters["draftTemplateId"];
        const _batchTemplatesPutRequest = requestParameters["batchTemplatesPutRequest"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_draftTemplateId !== undefined && _draftTemplateId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _draftTemplateId, 'draftTemplateId');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}${queryString ? `?${queryString}` : ''}`;
    }
    updateBatchTemplateStatusById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling updateBatchTemplateStatusById.');
        }
        const _batchTemplatesStatusUpdateRequest = requestParameters["batchTemplatesStatusUpdateRequest"];
        if (_batchTemplatesStatusUpdateRequest === null || _batchTemplatesStatusUpdateRequest === undefined) {
            throw new Error('Required parameter batchTemplatesStatusUpdateRequest was null or undefined when calling updateBatchTemplateStatusById.');
        }
        const _dryRun = requestParameters["dryRun"];
        const _intendedCreditTransactionsCount = requestParameters["intendedCreditTransactionsCount"];
        const _intendedDebitTransactionsCount = requestParameters["intendedDebitTransactionsCount"];
        const _intendedCreditAmount = requestParameters["intendedCreditAmount"];
        const _intendedDebitAmount = requestParameters["intendedDebitAmount"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_dryRun !== undefined && _dryRun !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dryRun, 'dryRun');
        }
        if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');
        }
        if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');
        }
        if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditAmount, 'intendedCreditAmount');
        }
        if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitAmount, 'intendedDebitAmount');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/status`, _batchTemplatesStatusUpdateRequest, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateBatchTemplateStatusByIdUrl(requestParameters) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling updateBatchTemplateStatusById.');
        }
        const _batchTemplatesStatusUpdateRequest = requestParameters["batchTemplatesStatusUpdateRequest"];
        if (_batchTemplatesStatusUpdateRequest === null || _batchTemplatesStatusUpdateRequest === undefined) {
            throw new Error('Required parameter batchTemplatesStatusUpdateRequest was null or undefined when calling updateBatchTemplateStatusById.');
        }
        const _dryRun = requestParameters["dryRun"];
        const _intendedCreditTransactionsCount = requestParameters["intendedCreditTransactionsCount"];
        const _intendedDebitTransactionsCount = requestParameters["intendedDebitTransactionsCount"];
        const _intendedCreditAmount = requestParameters["intendedCreditAmount"];
        const _intendedDebitAmount = requestParameters["intendedDebitAmount"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_dryRun !== undefined && _dryRun !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dryRun, 'dryRun');
        }
        if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');
        }
        if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');
        }
        if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditAmount, 'intendedCreditAmount');
        }
        if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitAmount, 'intendedDebitAmount');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/status${queryString ? `?${queryString}` : ''}`;
    }
    validateBatchTemplate(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling validateBatchTemplate.');
        }
        const _intendedCreditTransactionsCount = requestParameters["intendedCreditTransactionsCount"];
        const _intendedDebitTransactionsCount = requestParameters["intendedDebitTransactionsCount"];
        const _intendedCreditAmount = requestParameters["intendedCreditAmount"];
        const _intendedDebitAmount = requestParameters["intendedDebitAmount"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');
        }
        if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');
        }
        if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditAmount, 'intendedCreditAmount');
        }
        if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitAmount, 'intendedDebitAmount');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/validation-errors`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    validateBatchTemplateUrl(requestParameters) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling validateBatchTemplate.');
        }
        const _intendedCreditTransactionsCount = requestParameters["intendedCreditTransactionsCount"];
        const _intendedDebitTransactionsCount = requestParameters["intendedDebitTransactionsCount"];
        const _intendedCreditAmount = requestParameters["intendedCreditAmount"];
        const _intendedDebitAmount = requestParameters["intendedDebitAmount"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');
        }
        if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');
        }
        if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditAmount, 'intendedCreditAmount');
        }
        if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitAmount, 'intendedDebitAmount');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/validation-errors${queryString ? `?${queryString}` : ''}`;
    }
}
BatchTemplatesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BatchTemplatesHttpService, deps: [{ token: i1.HttpClient }, { token: PAYMENT_BATCH_TEMPLATE_BASE_PATH, optional: true }, { token: i2.PaymentBatchTemplateConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BatchTemplatesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BatchTemplatesHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BatchTemplatesHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PAYMENT_BATCH_TEMPLATE_BASE_PATH]
                }] }, { type: i2.PaymentBatchTemplateConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2hUZW1wbGF0ZXMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwaS9iYXRjaFRlbXBsYXRlcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUEyQixlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFjLFdBQVcsRUFBRSxVQUFVLEVBQ1UsTUFBWSxzQkFBc0IsQ0FBQztBQUN6RixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBK0IsWUFBWSxDQUFDO0FBd0IvRSxPQUFPLEVBQUUsZ0NBQWdDLEVBQXNCLE1BQTBCLGNBQWMsQ0FBQztBQUN4RyxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBMEMsa0JBQWtCLENBQUM7Ozs7QUF5SHpHLE1BQU0sT0FBTyx5QkFBeUI7SUFPbEMsWUFBc0IsVUFBc0IsRUFBd0QsUUFBZ0IsRUFBYyxhQUFnRDtRQUE1SixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBTGxDLGFBQVEsR0FBRyxFQUFFLENBQUM7UUFDakIsbUJBQWMsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ25DLGtCQUFhLEdBQUcsSUFBSSxpQ0FBaUMsRUFBRSxDQUFDO1FBSTNELElBQUksYUFBYSxFQUFFO1lBQ2YsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7U0FDdEM7UUFDRCxJQUFJLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ2pELElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFO2dCQUM5QixRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQzthQUM1QjtZQUNELElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztTQUMxQztRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLElBQUksSUFBSSx3QkFBd0Is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QyxnQ0FBZ0M7MkhBUHpGLHlCQUF5QixjQUZ4QixNQUFNOzRGQUVQLHlCQUF5QjtrQkFIckMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7OzBCQVFrRCxRQUFROzswQkFBSSxNQUFNOzJCQUFDLGdDQUFnQzs7MEJBQXFCLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJhdGNoIFRlbXBsYXRlcyBjbGllbnRcbiAqIE1hbmFnZSBiYXRjaCB0ZW1wbGF0ZXMuXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDEuMTEuMFxuICogXG4gKlxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSBPcGVuQVBJIEdlbmVyYXRvciAoaHR0cHM6Ly9naXRodWIuY29tL0JhY2tiYXNlL2JhY2tiYXNlLW9wZW5hcGktdG9vbHMpLlxuICogaHR0cHM6Ly9naXRodWIuY29tL0JhY2tiYXNlL2JhY2tiYXNlLW9wZW5hcGktdG9vbHNcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgbWVtYmVyLW9yZGVyaW5nICovXG5cbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSAgICAgICAgICAgICAgICAgICAgICBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzLCBIdHRwUGFyYW1zLFxuICAgICAgICAgSHR0cFJlc3BvbnNlLCBIdHRwRXZlbnQsIEh0dHBQYXJhbWV0ZXJDb2RlYyB9ICAgICAgIGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEN1c3RvbUh0dHBQYXJhbWV0ZXJDb2RlYyB9ICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tICcuLi9lbmNvZGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgQmFkUmVxdWVzdEVycm9yIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IEJhdGNoT3JkZXJGcm9tVGVtcGxhdGVQb3N0UmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgQmF0Y2hUZW1wbGF0ZVBheW1lbnRzR2V0UmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgQmF0Y2hUZW1wbGF0ZVBheW1lbnRzUG9zdFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgQmF0Y2hUZW1wbGF0ZVBheW1lbnRzUG9zdFJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IEJhdGNoVGVtcGxhdGVQYXltZW50c1B1dFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgQmF0Y2hUZW1wbGF0ZVBheW1lbnRzUHV0UmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgQmF0Y2hUZW1wbGF0ZXNBdHRyaWJ1dGVzUG9zdFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgQmF0Y2hUZW1wbGF0ZXNBdHRyaWJ1dGVzUG9zdFJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IEJhdGNoVGVtcGxhdGVzR2V0UmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgQmF0Y2hUZW1wbGF0ZXNQb3N0UmVxdWVzdCB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBCYXRjaFRlbXBsYXRlc1Bvc3RSZXNwb25zZSB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBCYXRjaFRlbXBsYXRlc1B1dFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgQmF0Y2hUZW1wbGF0ZXNQdXRSZXNwb25zZSB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBCYXRjaFRlbXBsYXRlc1N0YXR1c1VwZGF0ZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgQmF0Y2hUZW1wbGF0ZXNTdGF0dXNVcGRhdGVSZXNwb25zZSB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBDb25mbGljdEVycm9yIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IEVycm9ySXRlbSB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBGb3JiaWRkZW5FcnJvciB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBOb3RGb3VuZEVycm9yIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcblxuaW1wb3J0IHsgUEFZTUVOVF9CQVRDSF9URU1QTEFURV9CQVNFX1BBVEgsIENPTExFQ1RJT05fRk9STUFUUyB9ICAgICAgICAgICAgICAgICAgICAgZnJvbSAnLi4vdmFyaWFibGVzJztcbmltcG9ydCB7IFBheW1lbnRCYXRjaFRlbXBsYXRlQ29uZmlndXJhdGlvbiB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gJy4uL2NvbmZpZ3VyYXRpb24nO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlQmF0Y2hPcmRlckZyb21UZW1wbGF0ZVJlcXVlc3RQYXJhbXMge1xuICAgIC8qKiBCYXRjaCB0ZW1wbGF0ZSBpZCAqL1xuICAgIFtcImJhdGNoVGVtcGxhdGVJZFwiXTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlbGV0ZUJhdGNoVGVtcGxhdGVCeUlkUmVxdWVzdFBhcmFtcyB7XG4gICAgLyoqIEJhdGNoIHRlbXBsYXRlIGlkICovXG4gICAgW1wiYmF0Y2hUZW1wbGF0ZUlkXCJdOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVsZXRlQmF0Y2hUZW1wbGF0ZVBheW1lbnRCeUlkUmVxdWVzdFBhcmFtcyB7XG4gICAgLyoqIEJhdGNoIHRlbXBsYXRlIGlkICovXG4gICAgW1wiYmF0Y2hUZW1wbGF0ZUlkXCJdOiBzdHJpbmc7XG4gICAgLyoqIEJhdGNoIHRlbXBsYXRlIHBheW1lbnQgaWQgKi9cbiAgICBbXCJiYXRjaFRlbXBsYXRlUGF5bWVudElkXCJdOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0QmF0Y2hUZW1wbGF0ZVBheW1lbnRzQnlJZFJlcXVlc3RQYXJhbXMge1xuICAgIC8qKiBCYXRjaCB0ZW1wbGF0ZSBpZCAqL1xuICAgIFtcImJhdGNoVGVtcGxhdGVJZFwiXTogc3RyaW5nO1xuICAgIC8qKiBQYWdlIE51bWJlci4gU2tpcCBvdmVyIHBhZ2VzIG9mIGVsZW1lbnRzIGJ5IHNwZWNpZnlpbmcgYSBzdGFydCB2YWx1ZSBmb3IgdGhlIHF1ZXJ5LiAqL1xuICAgIFtcImZyb21cIl0/OiBudW1iZXI7XG4gICAgLyoqIExpbWl0IHRoZSBudW1iZXIgb2YgZWxlbWVudHMgb24gdGhlIHJlc3BvbnNlLiAqL1xuICAgIFtcInNpemVcIl0/OiBudW1iZXI7XG4gICAgLyoqIEFuIGFycmF5IG9mIHRoZSB1c2VyIHByaXZpbGVnZXMgdG8gY2hlY2sgb24gdGhlIGJ1c2luZXNzIGZ1bmN0aW9uIG9mIHRoZSBiYXRjaCB0eXBlICZhbXA7IGFycmFuZ2VtZW50IGlkIG9mIHRoZSB0ZW1wbGF0ZSB3aXRoIEFWQUlMQUJMRSBzdGF0dXMuIEJ5IERlZmF1bHQgdmlldyAmYW1wOyBjcmVhdGUgcHJpdmlsZWdlcyBhcmUgY2hlY2tlZCBpZiB0aGlzIHBhcmFtZXRlciB2YWx1ZSBpcyBub3Qgc3BlY2lmaWVkIGluIHRoZSByZXF1ZXN0LiAgKi9cbiAgICBbXCJwcml2aWxlZ2VzVG9DaGVja1wiXT86IEFycmF5PCdWSUVXJyB8ICdDUkVBVEUnPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRCYXRjaFRlbXBsYXRlc1JlcXVlc3RQYXJhbXMge1xuICAgIC8qKiBUaGUgc2VhcmNoIHRlcm0gdXNlZCB0byBtYWtlIHBhcnRpYWwgc2VhcmNoIG9uIHRlbXBsYXRlIG5hbWUuICovXG4gICAgW1wicXVlcnlcIl0/OiBzdHJpbmc7XG4gICAgLyoqIFBhZ2UgTnVtYmVyLiBTa2lwIG92ZXIgcGFnZXMgb2YgZWxlbWVudHMgYnkgc3BlY2lmeWluZyBhIHN0YXJ0IHZhbHVlIGZvciB0aGUgcXVlcnkuICovXG4gICAgW1wiZnJvbVwiXT86IG51bWJlcjtcbiAgICAvKiogTGltaXQgdGhlIG51bWJlciBvZiBlbGVtZW50cyBvbiB0aGUgcmVzcG9uc2UuICovXG4gICAgW1wic2l6ZVwiXT86IG51bWJlcjtcbiAgICAvKiogRmllbGQgdXNlZCBmb3Igc2VhcmNoaW5nIGJhdGNoIHRlbXBsYXRlcyBieSBiYXRjaCB0eXBlLiAqL1xuICAgIFtcImJhdGNoVHlwZVwiXT86IHN0cmluZztcbiAgICAvKiogRmllbGQgdXNlZCBmb3Igc2VhcmNoaW5nIGJhdGNoIHRlbXBsYXRlcyBvbiBjcmVkaXREZWJpdE1peGVkSW5kaWNhdG9yIHZhbHVlLiAqL1xuICAgIFtcImNyZWRpdERlYml0TWl4ZWRJbmRpY2F0b3JcIl0/OiAnQ1JFRElUJyB8ICdERUJJVCcgfCAnTUlYRUQnO1xuICAgIC8qKiBBbiBhcnJheSBvZiB0aGUgdXNlciBwcml2aWxlZ2VzIHRvIGNoZWNrIG9uIHRoZSBidXNpbmVzcyBmdW5jdGlvbiBvZiB0aGUgYmF0Y2ggdHlwZSAmYW1wOyBhcnJhbmdlbWVudCBpZCB3aGVuIHJldHJpZXZpbmcgdGhlIGJhdGNoIHRlbXBsYXRlcyBsaXN0LiBCeSBEZWZhdWx0IHZpZXcgJmFtcDsgY3JlYXRlIHByaXZpbGVnZXMgYXJlIGNoZWNrZWQgaWYgdGhpcyBwYXJhbWV0ZXIgdmFsdWUgaXMgbm90IHNwZWNpZmllZCBpbiB0aGUgcmVxdWVzdC4gICovXG4gICAgW1wicHJpdmlsZWdlc1RvQ2hlY2tcIl0/OiBBcnJheTwnVklFVycgfCAnQ1JFQVRFJz47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9zdEJhdGNoVGVtcGxhdGVQYXltZW50c1JlcXVlc3RQYXJhbXMge1xuICAgIC8qKiBCYXRjaCB0ZW1wbGF0ZSBpZCAqL1xuICAgIFtcImJhdGNoVGVtcGxhdGVJZFwiXTogc3RyaW5nO1xuICAgIC8qKiBSZXF1ZXN0IGZvciBhIG5ldyBiYXRjaCB0ZW1wbGF0ZSBwYXltZW50LiAqL1xuICAgIFtcImJhdGNoVGVtcGxhdGVQYXltZW50c1Bvc3RSZXF1ZXN0XCJdOiBCYXRjaFRlbXBsYXRlUGF5bWVudHNQb3N0UmVxdWVzdDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQb3N0QmF0Y2hUZW1wbGF0ZXNSZXF1ZXN0UGFyYW1zIHtcbiAgICAvKiogVGhlIGV4aXN0aW5nIGJhdGNoIHRlbXBsYXRlIGlkIHVzZWQgdG8gY3JlYXRlIHRoZSBkcmFmdCB0ZW1wbGF0ZS4gKi9cbiAgICBbXCJkcmFmdE9mXCJdPzogc3RyaW5nO1xuICAgIC8qKiBUaGUgZXhpc3RpbmcgYmF0Y2ggdGVtcGxhdGUgaWQgdXNlZCB0byBkdXBsaWNhdGUgdGhlIHRlbXBsYXRlLiAqL1xuICAgIFtcImNvcHlGcm9tXCJdPzogc3RyaW5nO1xuICAgIC8qKiBOYW1lIG9mIHRoZSBuZXcgZHVwbGljYXRlZCBiYXRjaCB0ZW1wbGF0ZS4gKi9cbiAgICBbXCJuYW1lXCJdPzogc3RyaW5nO1xuICAgIC8qKiBSZXF1ZXN0IGZvciBhIG5ldyBiYXRjaCB0ZW1wbGF0ZS4gKi9cbiAgICBbXCJiYXRjaFRlbXBsYXRlc1Bvc3RSZXF1ZXN0XCJdPzogQmF0Y2hUZW1wbGF0ZXNQb3N0UmVxdWVzdDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQb3N0QmF0Y2hUZW1wbGF0ZXNGcm9tQXR0cmlidXRlc1JlcXVlc3RQYXJhbXMge1xuICAgIC8qKiBSZXF1ZXN0IGZvciBhIG5ldyBiYXRjaCB0ZW1wbGF0ZSBkcmFmdC4gKi9cbiAgICBbXCJiYXRjaFRlbXBsYXRlc0F0dHJpYnV0ZXNQb3N0UmVxdWVzdFwiXTogQmF0Y2hUZW1wbGF0ZXNBdHRyaWJ1dGVzUG9zdFJlcXVlc3Q7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHV0QmF0Y2hUZW1wbGF0ZVBheW1lbnRCeUlkUmVxdWVzdFBhcmFtcyB7XG4gICAgLyoqIEJhdGNoIHRlbXBsYXRlIGlkICovXG4gICAgW1wiYmF0Y2hUZW1wbGF0ZUlkXCJdOiBzdHJpbmc7XG4gICAgLyoqIEJhdGNoIHRlbXBsYXRlIHBheW1lbnQgaWQgKi9cbiAgICBbXCJiYXRjaFRlbXBsYXRlUGF5bWVudElkXCJdOiBzdHJpbmc7XG4gICAgLyoqIFVwZGF0ZXMgYSBiYXRjaCB0ZW1wbGF0ZSBwYXltZW50LiAqL1xuICAgIFtcImJhdGNoVGVtcGxhdGVQYXltZW50c1B1dFJlcXVlc3RcIl06IEJhdGNoVGVtcGxhdGVQYXltZW50c1B1dFJlcXVlc3Q7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlQmF0Y2hUZW1wbGF0ZUJ5SWRSZXF1ZXN0UGFyYW1zIHtcbiAgICAvKiogQmF0Y2ggdGVtcGxhdGUgaWQgKi9cbiAgICBbXCJiYXRjaFRlbXBsYXRlSWRcIl06IHN0cmluZztcbiAgICAvKiogVGhlIGlkIG9mIHRoZSBkcmFmdCB0ZW1wbGF0ZSB1c2VkIHRvIHVwZGF0ZSB0aGUgb3JpZ2luYWwgdGVtcGxhdGUgKi9cbiAgICBbXCJkcmFmdFRlbXBsYXRlSWRcIl0/OiBzdHJpbmc7XG4gICAgLyoqIFJlcXVlc3QgdG8gdXBkYXRlIGEgYmF0Y2ggdGVtcGxhdGUuICovXG4gICAgW1wiYmF0Y2hUZW1wbGF0ZXNQdXRSZXF1ZXN0XCJdPzogQmF0Y2hUZW1wbGF0ZXNQdXRSZXF1ZXN0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVwZGF0ZUJhdGNoVGVtcGxhdGVTdGF0dXNCeUlkUmVxdWVzdFBhcmFtcyB7XG4gICAgLyoqIEJhdGNoIHRlbXBsYXRlIGlkICovXG4gICAgW1wiYmF0Y2hUZW1wbGF0ZUlkXCJdOiBzdHJpbmc7XG4gICAgLyoqIFJlcXVlc3QgdG8gdXBkYXRlIHRoZSBzdGF0dXMgb2YgYSBiYXRjaCB0ZW1wbGF0ZS4gKi9cbiAgICBbXCJiYXRjaFRlbXBsYXRlc1N0YXR1c1VwZGF0ZVJlcXVlc3RcIl06IEJhdGNoVGVtcGxhdGVzU3RhdHVzVXBkYXRlUmVxdWVzdDtcbiAgICAvKiogU2V0IHRoaXMgcGFyYW1ldGVyIHRvIHRydWUgdG8gcnVuIHRoZSB1cGRhdGUgd2l0aG91dCBjaGFuZ2VzIG9uIHRoZSBzZXJ2ZXIgKGUuZy4gd2hlbiB0cmFuc2l0aW9uaW5nIGJhdGNoIHRlbXBsYXRlIHRvIEFWQUlMQUJMRSBzdGF0dXMsIHRoZSB2YWxpZGF0aW9ucyBhcmUgcnVuLCBidXQgdGhlIGJhdGNoIHRlbXBsYXRlIHN0YXR1cyBpcyBub3QgdXBkYXRlZCkuICAqL1xuICAgIFtcImRyeVJ1blwiXT86IGJvb2xlYW47XG4gICAgLyoqIFNldCB0aGlzIHBhcmFtZXRlciB0byB2YWxpZGF0ZSB0aGUgdG90YWwgcGVyc2lzdGVkIGNyZWRpdCB0cmFuc2FjdGlvbnMgY291bnQgYWdhaW5zdCB0aGUgaW50ZW5kZWQgY3JlZGl0IHRyYW5zYWN0aW9ucyBjb3VudC4gcmVxdWlyZWQ6IGZhbHNlICAqL1xuICAgIFtcImludGVuZGVkQ3JlZGl0VHJhbnNhY3Rpb25zQ291bnRcIl0/OiBudW1iZXI7XG4gICAgLyoqIFNldCB0aGlzIHBhcmFtZXRlciB0byB2YWxpZGF0ZSB0aGUgdG90YWwgcGVyc2lzdGVkIGRlYml0IHRyYW5zYWN0aW9ucyBjb3VudCBhZ2FpbnN0IHRoZSBpbnRlbmRlZCBkZWJpdCB0cmFuc2FjdGlvbnMgY291bnQuICAqL1xuICAgIFtcImludGVuZGVkRGViaXRUcmFuc2FjdGlvbnNDb3VudFwiXT86IG51bWJlcjtcbiAgICAvKiogU2V0IHRoaXMgcGFyYW1ldGVyIHRvIHZhbGlkYXRlIHRoZSB0b3RhbCBwZXJzaXN0ZWQgY3JlZGl0IGFtb3VudCBhZ2FpbnN0IHRoZSBpbnRlbmRlZCBjcmVkaXQgYW1vdW50LiAgKi9cbiAgICBbXCJpbnRlbmRlZENyZWRpdEFtb3VudFwiXT86IG51bWJlcjtcbiAgICAvKiogU2V0IHRoaXMgcGFyYW1ldGVyIHRvIHZhbGlkYXRlIHRoZSB0b3RhbCBwZXJzaXN0ZWQgZGViaXQgYW1vdW50IGFnYWluc3QgdGhlIGludGVuZGVkIGRlYml0IGFtb3VudC4gICovXG4gICAgW1wiaW50ZW5kZWREZWJpdEFtb3VudFwiXT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0ZUJhdGNoVGVtcGxhdGVSZXF1ZXN0UGFyYW1zIHtcbiAgICAvKiogQmF0Y2ggdGVtcGxhdGUgaWQgKi9cbiAgICBbXCJiYXRjaFRlbXBsYXRlSWRcIl06IHN0cmluZztcbiAgICAvKiogU2V0IHRoaXMgcGFyYW1ldGVyIHRvIHZhbGlkYXRlIHRoZSB0b3RhbCBwZXJzaXN0ZWQgY3JlZGl0IHRyYW5zYWN0aW9ucyBjb3VudCBhZ2FpbnN0IHRoZSBpbnRlbmRlZCBjcmVkaXQgdHJhbnNhY3Rpb25zIGNvdW50LiAgKi9cbiAgICBbXCJpbnRlbmRlZENyZWRpdFRyYW5zYWN0aW9uc0NvdW50XCJdPzogbnVtYmVyO1xuICAgIC8qKiBTZXQgdGhpcyBwYXJhbWV0ZXIgdG8gdmFsaWRhdGUgdGhlIHRvdGFsIHBlcnNpc3RlZCBkZWJpdCB0cmFuc2FjdGlvbnMgY291bnQgYWdhaW5zdCB0aGUgaW50ZW5kZWQgZGViaXQgdHJhbnNhY3Rpb25zIGNvdW50LiAgKi9cbiAgICBbXCJpbnRlbmRlZERlYml0VHJhbnNhY3Rpb25zQ291bnRcIl0/OiBudW1iZXI7XG4gICAgLyoqIFNldCB0aGlzIHBhcmFtZXRlciB0byB2YWxpZGF0ZSB0aGUgdG90YWwgcGVyc2lzdGVkIGNyZWRpdCBhbW91bnQgYWdhaW5zdCB0aGUgaW50ZW5kZWQgY3JlZGl0IGFtb3VudC4gICovXG4gICAgW1wiaW50ZW5kZWRDcmVkaXRBbW91bnRcIl0/OiBudW1iZXI7XG4gICAgLyoqIFNldCB0aGlzIHBhcmFtZXRlciB0byB2YWxpZGF0ZSB0aGUgdG90YWwgcGVyc2lzdGVkIGRlYml0IGFtb3VudCBhZ2FpbnN0IHRoZSBpbnRlbmRlZCBkZWJpdCBhbW91bnQuICAqL1xuICAgIFtcImludGVuZGVkRGViaXRBbW91bnRcIl0/OiBudW1iZXI7XG59XG5cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQmF0Y2hUZW1wbGF0ZXNIdHRwU2VydmljZSB7XG5cbiAgICBwcm90ZWN0ZWQgYmFzZVBhdGggPSAnJztcbiAgICBwdWJsaWMgZGVmYXVsdEhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKTtcbiAgICBwdWJsaWMgY29uZmlndXJhdGlvbiA9IG5ldyBQYXltZW50QmF0Y2hUZW1wbGF0ZUNvbmZpZ3VyYXRpb24oKTtcbiAgICBwdWJsaWMgZW5jb2RlcjogSHR0cFBhcmFtZXRlckNvZGVjO1xuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsIEBPcHRpb25hbCgpIEBJbmplY3QoUEFZTUVOVF9CQVRDSF9URU1QTEFURV9CQVNFX1BBVEgpIGJhc2VQYXRoOiBzdHJpbmcsIEBPcHRpb25hbCgpIGNvbmZpZ3VyYXRpb246IFBheW1lbnRCYXRjaFRlbXBsYXRlQ29uZmlndXJhdGlvbikge1xuICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uID0gY29uZmlndXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYmFzZVBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgYmFzZVBhdGggPSB0aGlzLmJhc2VQYXRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRoID0gYmFzZVBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbmNvZGVyID0gdGhpcy5jb25maWd1cmF0aW9uLmVuY29kZXIgfHwgbmV3IEN1c3RvbUh0dHBQYXJhbWV0ZXJDb2RlYygpO1xuICAgIH1cblxuXG4gICAgcHJpdmF0ZSBhZGRUb0h0dHBQYXJhbXMoaHR0cFBhcmFtczogSHR0cFBhcmFtcywgdmFsdWU6IGFueSwga2V5Pzogc3RyaW5nKTogSHR0cFBhcmFtcyB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgaW5zdGFuY2VvZiBEYXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaHR0cFBhcmFtcyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zUmVjdXJzaXZlKGh0dHBQYXJhbXMsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGh0dHBQYXJhbXMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtc1JlY3Vyc2l2ZShodHRwUGFyYW1zLCB2YWx1ZSwga2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaHR0cFBhcmFtcztcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZFRvSHR0cFBhcmFtc1JlY3Vyc2l2ZShodHRwUGFyYW1zOiBIdHRwUGFyYW1zLCB2YWx1ZT86IGFueSwga2V5Pzogc3RyaW5nKTogSHR0cFBhcmFtcyB7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gaHR0cFBhcmFtcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICh2YWx1ZSBhcyBhbnlbXSkuZm9yRWFjaCggZWxlbSA9PiBodHRwUGFyYW1zID0gdGhpcy5hZGRUb0h0dHBQYXJhbXNSZWN1cnNpdmUoaHR0cFBhcmFtcywgZWxlbSwga2V5KSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBodHRwUGFyYW1zID0gaHR0cFBhcmFtcy5hcHBlbmQoa2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgKHZhbHVlIGFzIERhdGUpLnRvSVNPU3RyaW5nKCkuc3Vic3RyKDAsIDEwKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcImtleSBtYXkgbm90IGJlIG51bGwgaWYgdmFsdWUgaXMgRGF0ZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKCBrID0+IGh0dHBQYXJhbXMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtc1JlY3Vyc2l2ZShcbiAgICAgICAgICAgICAgICAgICAgaHR0cFBhcmFtcywgdmFsdWVba10sIGtleSAhPSBudWxsID8gYCR7a2V5fS4ke2t9YCA6IGspKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChrZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgaHR0cFBhcmFtcyA9IGh0dHBQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJrZXkgbWF5IG5vdCBiZSBudWxsIGlmIHZhbHVlIGlzIG5vdCBvYmplY3Qgb3IgYXJyYXlcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGh0dHBQYXJhbXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBiYXRjaCBvcmRlciBmcm9tIGEgYmF0Y2ggdGVtcGxhdGUuXG4gICAgICogQ3JlYXRlcyBiYXRjaCBvcmRlciBmcm9tIGEgYmF0Y2ggdGVtcGxhdGUuXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGNyZWF0ZUJhdGNoT3JkZXJGcm9tVGVtcGxhdGUocmVxdWVzdFBhcmFtZXRlcnM6IENyZWF0ZUJhdGNoT3JkZXJGcm9tVGVtcGxhdGVSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEJhdGNoT3JkZXJGcm9tVGVtcGxhdGVQb3N0UmVzcG9uc2U+O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYmF0Y2ggb3JkZXIgZnJvbSBhIGJhdGNoIHRlbXBsYXRlLlxuICAgICAqIENyZWF0ZXMgYmF0Y2ggb3JkZXIgZnJvbSBhIGJhdGNoIHRlbXBsYXRlLlxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGVCYXRjaE9yZGVyRnJvbVRlbXBsYXRlKHJlcXVlc3RQYXJhbWV0ZXJzOiBDcmVhdGVCYXRjaE9yZGVyRnJvbVRlbXBsYXRlUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEJhdGNoT3JkZXJGcm9tVGVtcGxhdGVQb3N0UmVzcG9uc2U+PjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGJhdGNoIG9yZGVyIGZyb20gYSBiYXRjaCB0ZW1wbGF0ZS5cbiAgICAgKiBDcmVhdGVzIGJhdGNoIG9yZGVyIGZyb20gYSBiYXRjaCB0ZW1wbGF0ZS5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlQmF0Y2hPcmRlckZyb21UZW1wbGF0ZShyZXF1ZXN0UGFyYW1ldGVyczogQ3JlYXRlQmF0Y2hPcmRlckZyb21UZW1wbGF0ZVJlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8QmF0Y2hPcmRlckZyb21UZW1wbGF0ZVBvc3RSZXNwb25zZT4+O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYmF0Y2ggb3JkZXIgZnJvbSBhIGJhdGNoIHRlbXBsYXRlLlxuICAgICAqIENyZWF0ZXMgYmF0Y2ggb3JkZXIgZnJvbSBhIGJhdGNoIHRlbXBsYXRlLlxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGVCYXRjaE9yZGVyRnJvbVRlbXBsYXRlKHJlcXVlc3RQYXJhbWV0ZXJzOiBDcmVhdGVCYXRjaE9yZGVyRnJvbVRlbXBsYXRlUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgY29uc3QgX2JhdGNoVGVtcGxhdGVJZCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiYmF0Y2hUZW1wbGF0ZUlkXCJdO1xuICAgICAgICBpZiAoX2JhdGNoVGVtcGxhdGVJZCA9PT0gbnVsbCB8fCBfYmF0Y2hUZW1wbGF0ZUlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGJhdGNoVGVtcGxhdGVJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGNyZWF0ZUJhdGNoT3JkZXJGcm9tVGVtcGxhdGUuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdDxCYXRjaE9yZGVyRnJvbVRlbXBsYXRlUG9zdFJlc3BvbnNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjEvYmF0Y2gtdGVtcGxhdGVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhfYmF0Y2hUZW1wbGF0ZUlkKSl9L2JhdGNoLW9yZGVyYCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBjcmVhdGVCYXRjaE9yZGVyRnJvbVRlbXBsYXRlVXJsKHJlcXVlc3RQYXJhbWV0ZXJzOiBDcmVhdGVCYXRjaE9yZGVyRnJvbVRlbXBsYXRlUmVxdWVzdFBhcmFtcyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IF9iYXRjaFRlbXBsYXRlSWQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVGVtcGxhdGVJZFwiXTtcbiAgICAgICAgaWYgKF9iYXRjaFRlbXBsYXRlSWQgPT09IG51bGwgfHwgX2JhdGNoVGVtcGxhdGVJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBiYXRjaFRlbXBsYXRlSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBjcmVhdGVCYXRjaE9yZGVyRnJvbVRlbXBsYXRlLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjEvYmF0Y2gtdGVtcGxhdGVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhfYmF0Y2hUZW1wbGF0ZUlkKSl9L2JhdGNoLW9yZGVyYDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIGEgYmF0Y2ggdGVtcGxhdGUuXG4gICAgICogRGVsZXRlcyBhIGJhdGNoIHRlbXBsYXRlLiBJZiB0ZW1wbGF0ZSBpcyBpbiBkcmFmdCBzdGF0ZSwgb25seSB0aGUgY3JlYXRvciBvZiB0aGUgYmF0Y2ggdGVtcGxhdGUgY2FuIGRlbGV0ZSBpdC4gSWYgdGVtcGxhdGUgaXMgYXZhaWxhYmxlLCB1c2VyIGhhcyB0byBoYXZlIGRlbGV0ZSBhY2Nlc3MgdG8gQmF0Y2ggVGVtcGxhdGVzIGJ1c2luZXNzIGZ1bmN0aW9uLCB2aWV3IGFjY2VzcyB0byBwcm9wZXIgYmF0Y2ggdHlwZSBhbmQgZGVsZXRlIGFjY2VzcyB0byBvcmlnaW5hdGluZyBhY2NvdW50LlxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBkZWxldGVCYXRjaFRlbXBsYXRlQnlJZChyZXF1ZXN0UGFyYW1ldGVyczogRGVsZXRlQmF0Y2hUZW1wbGF0ZUJ5SWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPGFueT47XG4gICAgLyoqXG4gICAgICogRGVsZXRlcyBhIGJhdGNoIHRlbXBsYXRlLlxuICAgICAqIERlbGV0ZXMgYSBiYXRjaCB0ZW1wbGF0ZS4gSWYgdGVtcGxhdGUgaXMgaW4gZHJhZnQgc3RhdGUsIG9ubHkgdGhlIGNyZWF0b3Igb2YgdGhlIGJhdGNoIHRlbXBsYXRlIGNhbiBkZWxldGUgaXQuIElmIHRlbXBsYXRlIGlzIGF2YWlsYWJsZSwgdXNlciBoYXMgdG8gaGF2ZSBkZWxldGUgYWNjZXNzIHRvIEJhdGNoIFRlbXBsYXRlcyBidXNpbmVzcyBmdW5jdGlvbiwgdmlldyBhY2Nlc3MgdG8gcHJvcGVyIGJhdGNoIHR5cGUgYW5kIGRlbGV0ZSBhY2Nlc3MgdG8gb3JpZ2luYXRpbmcgYWNjb3VudC5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsZXRlQmF0Y2hUZW1wbGF0ZUJ5SWQocmVxdWVzdFBhcmFtZXRlcnM6IERlbGV0ZUJhdGNoVGVtcGxhdGVCeUlkUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPGFueT4+O1xuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgYSBiYXRjaCB0ZW1wbGF0ZS5cbiAgICAgKiBEZWxldGVzIGEgYmF0Y2ggdGVtcGxhdGUuIElmIHRlbXBsYXRlIGlzIGluIGRyYWZ0IHN0YXRlLCBvbmx5IHRoZSBjcmVhdG9yIG9mIHRoZSBiYXRjaCB0ZW1wbGF0ZSBjYW4gZGVsZXRlIGl0LiBJZiB0ZW1wbGF0ZSBpcyBhdmFpbGFibGUsIHVzZXIgaGFzIHRvIGhhdmUgZGVsZXRlIGFjY2VzcyB0byBCYXRjaCBUZW1wbGF0ZXMgYnVzaW5lc3MgZnVuY3Rpb24sIHZpZXcgYWNjZXNzIHRvIHByb3BlciBiYXRjaCB0eXBlIGFuZCBkZWxldGUgYWNjZXNzIHRvIG9yaWdpbmF0aW5nIGFjY291bnQuXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGRlbGV0ZUJhdGNoVGVtcGxhdGVCeUlkKHJlcXVlc3RQYXJhbWV0ZXJzOiBEZWxldGVCYXRjaFRlbXBsYXRlQnlJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj47XG4gICAgLyoqXG4gICAgICogRGVsZXRlcyBhIGJhdGNoIHRlbXBsYXRlLlxuICAgICAqIERlbGV0ZXMgYSBiYXRjaCB0ZW1wbGF0ZS4gSWYgdGVtcGxhdGUgaXMgaW4gZHJhZnQgc3RhdGUsIG9ubHkgdGhlIGNyZWF0b3Igb2YgdGhlIGJhdGNoIHRlbXBsYXRlIGNhbiBkZWxldGUgaXQuIElmIHRlbXBsYXRlIGlzIGF2YWlsYWJsZSwgdXNlciBoYXMgdG8gaGF2ZSBkZWxldGUgYWNjZXNzIHRvIEJhdGNoIFRlbXBsYXRlcyBidXNpbmVzcyBmdW5jdGlvbiwgdmlldyBhY2Nlc3MgdG8gcHJvcGVyIGJhdGNoIHR5cGUgYW5kIGRlbGV0ZSBhY2Nlc3MgdG8gb3JpZ2luYXRpbmcgYWNjb3VudC5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsZXRlQmF0Y2hUZW1wbGF0ZUJ5SWQocmVxdWVzdFBhcmFtZXRlcnM6IERlbGV0ZUJhdGNoVGVtcGxhdGVCeUlkUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgY29uc3QgX2JhdGNoVGVtcGxhdGVJZCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiYmF0Y2hUZW1wbGF0ZUlkXCJdO1xuICAgICAgICBpZiAoX2JhdGNoVGVtcGxhdGVJZCA9PT0gbnVsbCB8fCBfYmF0Y2hUZW1wbGF0ZUlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGJhdGNoVGVtcGxhdGVJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGRlbGV0ZUJhdGNoVGVtcGxhdGVCeUlkLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmRlbGV0ZTxhbnk+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY2xpZW50LWFwaS92MS9iYXRjaC10ZW1wbGF0ZXMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKF9iYXRjaFRlbXBsYXRlSWQpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVsZXRlQmF0Y2hUZW1wbGF0ZUJ5SWRVcmwocmVxdWVzdFBhcmFtZXRlcnM6IERlbGV0ZUJhdGNoVGVtcGxhdGVCeUlkUmVxdWVzdFBhcmFtcyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IF9iYXRjaFRlbXBsYXRlSWQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVGVtcGxhdGVJZFwiXTtcbiAgICAgICAgaWYgKF9iYXRjaFRlbXBsYXRlSWQgPT09IG51bGwgfHwgX2JhdGNoVGVtcGxhdGVJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBiYXRjaFRlbXBsYXRlSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBkZWxldGVCYXRjaFRlbXBsYXRlQnlJZC4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YxL2JhdGNoLXRlbXBsYXRlcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2JhdGNoVGVtcGxhdGVJZCkpfWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlcyBhIGJhdGNoIHRlbXBsYXRlIHBheW1lbnQuXG4gICAgICogRGVsZXRlcyBhIGJhdGNoIHRlbXBsYXRlIHBheW1lbnQuIE9ubHkgdGhlIGNyZWF0b3Igb2YgdGhlIGJhdGNoIHRlbXBsYXRlIGNhbiBkZWxldGUgaXQuIE9ubHkgYmF0Y2ggdGVtcGxhdGVzIGluIHN0YXR1cyBEUkFGVCBwYXltZW50cyBjYW4gYmUgZGVsZXRlZC5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsZXRlQmF0Y2hUZW1wbGF0ZVBheW1lbnRCeUlkKHJlcXVlc3RQYXJhbWV0ZXJzOiBEZWxldGVCYXRjaFRlbXBsYXRlUGF5bWVudEJ5SWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPGFueT47XG4gICAgLyoqXG4gICAgICogRGVsZXRlcyBhIGJhdGNoIHRlbXBsYXRlIHBheW1lbnQuXG4gICAgICogRGVsZXRlcyBhIGJhdGNoIHRlbXBsYXRlIHBheW1lbnQuIE9ubHkgdGhlIGNyZWF0b3Igb2YgdGhlIGJhdGNoIHRlbXBsYXRlIGNhbiBkZWxldGUgaXQuIE9ubHkgYmF0Y2ggdGVtcGxhdGVzIGluIHN0YXR1cyBEUkFGVCBwYXltZW50cyBjYW4gYmUgZGVsZXRlZC5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsZXRlQmF0Y2hUZW1wbGF0ZVBheW1lbnRCeUlkKHJlcXVlc3RQYXJhbWV0ZXJzOiBEZWxldGVCYXRjaFRlbXBsYXRlUGF5bWVudEJ5SWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj47XG4gICAgLyoqXG4gICAgICogRGVsZXRlcyBhIGJhdGNoIHRlbXBsYXRlIHBheW1lbnQuXG4gICAgICogRGVsZXRlcyBhIGJhdGNoIHRlbXBsYXRlIHBheW1lbnQuIE9ubHkgdGhlIGNyZWF0b3Igb2YgdGhlIGJhdGNoIHRlbXBsYXRlIGNhbiBkZWxldGUgaXQuIE9ubHkgYmF0Y2ggdGVtcGxhdGVzIGluIHN0YXR1cyBEUkFGVCBwYXltZW50cyBjYW4gYmUgZGVsZXRlZC5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsZXRlQmF0Y2hUZW1wbGF0ZVBheW1lbnRCeUlkKHJlcXVlc3RQYXJhbWV0ZXJzOiBEZWxldGVCYXRjaFRlbXBsYXRlUGF5bWVudEJ5SWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+O1xuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgYSBiYXRjaCB0ZW1wbGF0ZSBwYXltZW50LlxuICAgICAqIERlbGV0ZXMgYSBiYXRjaCB0ZW1wbGF0ZSBwYXltZW50LiBPbmx5IHRoZSBjcmVhdG9yIG9mIHRoZSBiYXRjaCB0ZW1wbGF0ZSBjYW4gZGVsZXRlIGl0LiBPbmx5IGJhdGNoIHRlbXBsYXRlcyBpbiBzdGF0dXMgRFJBRlQgcGF5bWVudHMgY2FuIGJlIGRlbGV0ZWQuXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGRlbGV0ZUJhdGNoVGVtcGxhdGVQYXltZW50QnlJZChyZXF1ZXN0UGFyYW1ldGVyczogRGVsZXRlQmF0Y2hUZW1wbGF0ZVBheW1lbnRCeUlkUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgY29uc3QgX2JhdGNoVGVtcGxhdGVJZCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiYmF0Y2hUZW1wbGF0ZUlkXCJdO1xuICAgICAgICBpZiAoX2JhdGNoVGVtcGxhdGVJZCA9PT0gbnVsbCB8fCBfYmF0Y2hUZW1wbGF0ZUlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGJhdGNoVGVtcGxhdGVJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGRlbGV0ZUJhdGNoVGVtcGxhdGVQYXltZW50QnlJZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfYmF0Y2hUZW1wbGF0ZVBheW1lbnRJZCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiYmF0Y2hUZW1wbGF0ZVBheW1lbnRJZFwiXTtcbiAgICAgICAgaWYgKF9iYXRjaFRlbXBsYXRlUGF5bWVudElkID09PSBudWxsIHx8IF9iYXRjaFRlbXBsYXRlUGF5bWVudElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGJhdGNoVGVtcGxhdGVQYXltZW50SWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBkZWxldGVCYXRjaFRlbXBsYXRlUGF5bWVudEJ5SWQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZGVsZXRlPGFueT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YxL2JhdGNoLXRlbXBsYXRlcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2JhdGNoVGVtcGxhdGVJZCkpfS9iYXRjaC10ZW1wbGF0ZS1wYXltZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2JhdGNoVGVtcGxhdGVQYXltZW50SWQpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVsZXRlQmF0Y2hUZW1wbGF0ZVBheW1lbnRCeUlkVXJsKHJlcXVlc3RQYXJhbWV0ZXJzOiBEZWxldGVCYXRjaFRlbXBsYXRlUGF5bWVudEJ5SWRSZXF1ZXN0UGFyYW1zKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgX2JhdGNoVGVtcGxhdGVJZCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiYmF0Y2hUZW1wbGF0ZUlkXCJdO1xuICAgICAgICBpZiAoX2JhdGNoVGVtcGxhdGVJZCA9PT0gbnVsbCB8fCBfYmF0Y2hUZW1wbGF0ZUlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGJhdGNoVGVtcGxhdGVJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGRlbGV0ZUJhdGNoVGVtcGxhdGVQYXltZW50QnlJZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfYmF0Y2hUZW1wbGF0ZVBheW1lbnRJZCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiYmF0Y2hUZW1wbGF0ZVBheW1lbnRJZFwiXTtcbiAgICAgICAgaWYgKF9iYXRjaFRlbXBsYXRlUGF5bWVudElkID09PSBudWxsIHx8IF9iYXRjaFRlbXBsYXRlUGF5bWVudElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGJhdGNoVGVtcGxhdGVQYXltZW50SWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBkZWxldGVCYXRjaFRlbXBsYXRlUGF5bWVudEJ5SWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY2xpZW50LWFwaS92MS9iYXRjaC10ZW1wbGF0ZXMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKF9iYXRjaFRlbXBsYXRlSWQpKX0vYmF0Y2gtdGVtcGxhdGUtcGF5bWVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKF9iYXRjaFRlbXBsYXRlUGF5bWVudElkKSl9YDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYmF0Y2ggdGVtcGxhdGUgcGF5bWVudHMuXG4gICAgICogR2V0IGJhdGNoIHRlbXBsYXRlIHBheW1lbnRzLiBPbmx5IHRoZSBjcmVhdG9yIG9mIHRoZSB0ZW1wbGF0ZSBjYW4gcmV0cmlldmUgdGhlIHBheW1lbnRzIGZvciB0aGUgdGVtcGxhdGVzIHdpdGggc3RhdHVzIERSQUZULiBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0QmF0Y2hUZW1wbGF0ZVBheW1lbnRzQnlJZChyZXF1ZXN0UGFyYW1ldGVyczogR2V0QmF0Y2hUZW1wbGF0ZVBheW1lbnRzQnlJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8QmF0Y2hUZW1wbGF0ZVBheW1lbnRzR2V0UmVzcG9uc2U+O1xuICAgIC8qKlxuICAgICAqIEdldCBiYXRjaCB0ZW1wbGF0ZSBwYXltZW50cy5cbiAgICAgKiBHZXQgYmF0Y2ggdGVtcGxhdGUgcGF5bWVudHMuIE9ubHkgdGhlIGNyZWF0b3Igb2YgdGhlIHRlbXBsYXRlIGNhbiByZXRyaWV2ZSB0aGUgcGF5bWVudHMgZm9yIHRoZSB0ZW1wbGF0ZXMgd2l0aCBzdGF0dXMgRFJBRlQuIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRCYXRjaFRlbXBsYXRlUGF5bWVudHNCeUlkKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRCYXRjaFRlbXBsYXRlUGF5bWVudHNCeUlkUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEJhdGNoVGVtcGxhdGVQYXltZW50c0dldFJlc3BvbnNlPj47XG4gICAgLyoqXG4gICAgICogR2V0IGJhdGNoIHRlbXBsYXRlIHBheW1lbnRzLlxuICAgICAqIEdldCBiYXRjaCB0ZW1wbGF0ZSBwYXltZW50cy4gT25seSB0aGUgY3JlYXRvciBvZiB0aGUgdGVtcGxhdGUgY2FuIHJldHJpZXZlIHRoZSBwYXltZW50cyBmb3IgdGhlIHRlbXBsYXRlcyB3aXRoIHN0YXR1cyBEUkFGVC4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldEJhdGNoVGVtcGxhdGVQYXltZW50c0J5SWQocmVxdWVzdFBhcmFtZXRlcnM6IEdldEJhdGNoVGVtcGxhdGVQYXltZW50c0J5SWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PEJhdGNoVGVtcGxhdGVQYXltZW50c0dldFJlc3BvbnNlPj47XG4gICAgLyoqXG4gICAgICogR2V0IGJhdGNoIHRlbXBsYXRlIHBheW1lbnRzLlxuICAgICAqIEdldCBiYXRjaCB0ZW1wbGF0ZSBwYXltZW50cy4gT25seSB0aGUgY3JlYXRvciBvZiB0aGUgdGVtcGxhdGUgY2FuIHJldHJpZXZlIHRoZSBwYXltZW50cyBmb3IgdGhlIHRlbXBsYXRlcyB3aXRoIHN0YXR1cyBEUkFGVC4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldEJhdGNoVGVtcGxhdGVQYXltZW50c0J5SWQocmVxdWVzdFBhcmFtZXRlcnM6IEdldEJhdGNoVGVtcGxhdGVQYXltZW50c0J5SWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBjb25zdCBfYmF0Y2hUZW1wbGF0ZUlkID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJiYXRjaFRlbXBsYXRlSWRcIl07XG4gICAgICAgIGlmIChfYmF0Y2hUZW1wbGF0ZUlkID09PSBudWxsIHx8IF9iYXRjaFRlbXBsYXRlSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgYmF0Y2hUZW1wbGF0ZUlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0QmF0Y2hUZW1wbGF0ZVBheW1lbnRzQnlJZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfZnJvbSA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiZnJvbVwiXTtcbiAgICAgICAgY29uc3QgX3NpemUgPSByZXF1ZXN0UGFyYW1ldGVyc1tcInNpemVcIl07XG4gICAgICAgIGNvbnN0IF9wcml2aWxlZ2VzVG9DaGVjayA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wicHJpdmlsZWdlc1RvQ2hlY2tcIl07XG5cbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiB0aGlzLmVuY29kZXJ9KTtcbiAgICAgICAgaWYgKF9mcm9tICE9PSB1bmRlZmluZWQgJiYgX2Zyb20gIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9mcm9tLCAnZnJvbScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfc2l6ZSAhPT0gdW5kZWZpbmVkICYmIF9zaXplICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5fc2l6ZSwgJ3NpemUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3ByaXZpbGVnZXNUb0NoZWNrKSB7XG4gICAgICAgICAgICBfcHJpdmlsZWdlc1RvQ2hlY2suZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3ByaXZpbGVnZXNUb0NoZWNrJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxCYXRjaFRlbXBsYXRlUGF5bWVudHNHZXRSZXNwb25zZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YxL2JhdGNoLXRlbXBsYXRlcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2JhdGNoVGVtcGxhdGVJZCkpfS9iYXRjaC10ZW1wbGF0ZS1wYXltZW50c2AsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGFyYW1zOiBxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRCYXRjaFRlbXBsYXRlUGF5bWVudHNCeUlkVXJsKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRCYXRjaFRlbXBsYXRlUGF5bWVudHNCeUlkUmVxdWVzdFBhcmFtcyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IF9iYXRjaFRlbXBsYXRlSWQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVGVtcGxhdGVJZFwiXTtcbiAgICAgICAgaWYgKF9iYXRjaFRlbXBsYXRlSWQgPT09IG51bGwgfHwgX2JhdGNoVGVtcGxhdGVJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBiYXRjaFRlbXBsYXRlSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRCYXRjaFRlbXBsYXRlUGF5bWVudHNCeUlkLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IF9mcm9tID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJmcm9tXCJdO1xuICAgICAgICBjb25zdCBfc2l6ZSA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wic2l6ZVwiXTtcbiAgICAgICAgY29uc3QgX3ByaXZpbGVnZXNUb0NoZWNrID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJwcml2aWxlZ2VzVG9DaGVja1wiXTtcbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiB0aGlzLmVuY29kZXJ9KTtcbiAgICAgICAgaWYgKF9mcm9tICE9PSB1bmRlZmluZWQgJiYgX2Zyb20gIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9mcm9tLCAnZnJvbScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfc2l6ZSAhPT0gdW5kZWZpbmVkICYmIF9zaXplICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5fc2l6ZSwgJ3NpemUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3ByaXZpbGVnZXNUb0NoZWNrKSB7XG4gICAgICAgICAgICBfcHJpdmlsZWdlc1RvQ2hlY2suZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3ByaXZpbGVnZXNUb0NoZWNrJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gcXVlcnlQYXJhbWV0ZXJzLnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjEvYmF0Y2gtdGVtcGxhdGVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhfYmF0Y2hUZW1wbGF0ZUlkKSl9L2JhdGNoLXRlbXBsYXRlLXBheW1lbnRzJHtxdWVyeVN0cmluZyA/IGA/JHtxdWVyeVN0cmluZ31gIDogJyd9YDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYmF0Y2ggdGVtcGxhdGVzLlxuICAgICAqIEdldCBiYXRjaCB0ZW1wbGF0ZXMuXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldEJhdGNoVGVtcGxhdGVzKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRCYXRjaFRlbXBsYXRlc1JlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8QmF0Y2hUZW1wbGF0ZXNHZXRSZXNwb25zZT47XG4gICAgLyoqXG4gICAgICogR2V0IGJhdGNoIHRlbXBsYXRlcy5cbiAgICAgKiBHZXQgYmF0Y2ggdGVtcGxhdGVzLlxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRCYXRjaFRlbXBsYXRlcyhyZXF1ZXN0UGFyYW1ldGVyczogR2V0QmF0Y2hUZW1wbGF0ZXNSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8QmF0Y2hUZW1wbGF0ZXNHZXRSZXNwb25zZT4+O1xuICAgIC8qKlxuICAgICAqIEdldCBiYXRjaCB0ZW1wbGF0ZXMuXG4gICAgICogR2V0IGJhdGNoIHRlbXBsYXRlcy5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0QmF0Y2hUZW1wbGF0ZXMocmVxdWVzdFBhcmFtZXRlcnM6IEdldEJhdGNoVGVtcGxhdGVzUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxCYXRjaFRlbXBsYXRlc0dldFJlc3BvbnNlPj47XG4gICAgLyoqXG4gICAgICogR2V0IGJhdGNoIHRlbXBsYXRlcy5cbiAgICAgKiBHZXQgYmF0Y2ggdGVtcGxhdGVzLlxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRCYXRjaFRlbXBsYXRlcyhyZXF1ZXN0UGFyYW1ldGVyczogR2V0QmF0Y2hUZW1wbGF0ZXNSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBjb25zdCBfcXVlcnkgPSByZXF1ZXN0UGFyYW1ldGVyc1tcInF1ZXJ5XCJdO1xuICAgICAgICBjb25zdCBfZnJvbSA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiZnJvbVwiXTtcbiAgICAgICAgY29uc3QgX3NpemUgPSByZXF1ZXN0UGFyYW1ldGVyc1tcInNpemVcIl07XG4gICAgICAgIGNvbnN0IF9iYXRjaFR5cGUgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVHlwZVwiXTtcbiAgICAgICAgY29uc3QgX2NyZWRpdERlYml0TWl4ZWRJbmRpY2F0b3IgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImNyZWRpdERlYml0TWl4ZWRJbmRpY2F0b3JcIl07XG4gICAgICAgIGNvbnN0IF9wcml2aWxlZ2VzVG9DaGVjayA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wicHJpdmlsZWdlc1RvQ2hlY2tcIl07XG5cbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiB0aGlzLmVuY29kZXJ9KTtcbiAgICAgICAgaWYgKF9xdWVyeSAhPT0gdW5kZWZpbmVkICYmIF9xdWVyeSAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X3F1ZXJ5LCAncXVlcnknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2Zyb20gIT09IHVuZGVmaW5lZCAmJiBfZnJvbSAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2Zyb20sICdmcm9tJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9zaXplICE9PSB1bmRlZmluZWQgJiYgX3NpemUgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9zaXplLCAnc2l6ZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfYmF0Y2hUeXBlICE9PSB1bmRlZmluZWQgJiYgX2JhdGNoVHlwZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2JhdGNoVHlwZSwgJ2JhdGNoVHlwZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfY3JlZGl0RGViaXRNaXhlZEluZGljYXRvciAhPT0gdW5kZWZpbmVkICYmIF9jcmVkaXREZWJpdE1peGVkSW5kaWNhdG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5fY3JlZGl0RGViaXRNaXhlZEluZGljYXRvciwgJ2NyZWRpdERlYml0TWl4ZWRJbmRpY2F0b3InKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3ByaXZpbGVnZXNUb0NoZWNrKSB7XG4gICAgICAgICAgICBfcHJpdmlsZWdlc1RvQ2hlY2suZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3ByaXZpbGVnZXNUb0NoZWNrJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxCYXRjaFRlbXBsYXRlc0dldFJlc3BvbnNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjEvYmF0Y2gtdGVtcGxhdGVzYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEJhdGNoVGVtcGxhdGVzVXJsKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRCYXRjaFRlbXBsYXRlc1JlcXVlc3RQYXJhbXMpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBfcXVlcnkgPSByZXF1ZXN0UGFyYW1ldGVyc1tcInF1ZXJ5XCJdO1xuICAgICAgICBjb25zdCBfZnJvbSA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiZnJvbVwiXTtcbiAgICAgICAgY29uc3QgX3NpemUgPSByZXF1ZXN0UGFyYW1ldGVyc1tcInNpemVcIl07XG4gICAgICAgIGNvbnN0IF9iYXRjaFR5cGUgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVHlwZVwiXTtcbiAgICAgICAgY29uc3QgX2NyZWRpdERlYml0TWl4ZWRJbmRpY2F0b3IgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImNyZWRpdERlYml0TWl4ZWRJbmRpY2F0b3JcIl07XG4gICAgICAgIGNvbnN0IF9wcml2aWxlZ2VzVG9DaGVjayA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wicHJpdmlsZWdlc1RvQ2hlY2tcIl07XG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogdGhpcy5lbmNvZGVyfSk7XG4gICAgICAgIGlmIChfcXVlcnkgIT09IHVuZGVmaW5lZCAmJiBfcXVlcnkgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9xdWVyeSwgJ3F1ZXJ5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9mcm9tICE9PSB1bmRlZmluZWQgJiYgX2Zyb20gIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9mcm9tLCAnZnJvbScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfc2l6ZSAhPT0gdW5kZWZpbmVkICYmIF9zaXplICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5fc2l6ZSwgJ3NpemUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2JhdGNoVHlwZSAhPT0gdW5kZWZpbmVkICYmIF9iYXRjaFR5cGUgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9iYXRjaFR5cGUsICdiYXRjaFR5cGUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2NyZWRpdERlYml0TWl4ZWRJbmRpY2F0b3IgIT09IHVuZGVmaW5lZCAmJiBfY3JlZGl0RGViaXRNaXhlZEluZGljYXRvciAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2NyZWRpdERlYml0TWl4ZWRJbmRpY2F0b3IsICdjcmVkaXREZWJpdE1peGVkSW5kaWNhdG9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9wcml2aWxlZ2VzVG9DaGVjaykge1xuICAgICAgICAgICAgX3ByaXZpbGVnZXNUb0NoZWNrLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdwcml2aWxlZ2VzVG9DaGVjaycpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBxdWVyeVN0cmluZyA9IHF1ZXJ5UGFyYW1ldGVycy50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YxL2JhdGNoLXRlbXBsYXRlcyR7cXVlcnlTdHJpbmcgPyBgPyR7cXVlcnlTdHJpbmd9YCA6ICcnfWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJhdGNoIHRlbXBsYXRlIHBheW1lbnQuXG4gICAgICogQWRkcyBuZXcgcGF5bWVudCB1bmRlciB0aGUgYmF0Y2ggdGVtcGxhdGUgaW4gc3RhdHVzIERSQUZULiBPbmx5IHRoZSBjcmVhdG9yIG9mIHRoZSBiYXRjaCB0ZW1wbGF0ZSBjYW4gYWRkIHBheW1lbnRzLiBXaGVuIGNvdW50ZXJwYXJ0eSBhcnJhbmdlbWVudCBpZCBpcyBwcm92aWRlZCwgdGhlbiB0aGUgYWNjb3VudCBpbmZvcm1hdGlvbiAoSUJBTi9CQkFOLCBiYW5rIGJyYW5jaCBjb2RlIGFuZCBhY2NvdW50IG5hbWUpIGlzIGdvaW5nIHRvIGJlIHB1bGxlZCBmcm9tIFByb2R1Y3QgU3VtbWFyeSwgb3ZlcndyaXRpbmcgdGhlIGFjY291bnQgaW5mb3JtYXRpb24gdGhhdCB3YXMgZGlyZWN0bHkgcHJvdmlkZWQuIFdoZW4gY3VycmVudCB1c2VyIGhhcyBubyBhY2Nlc3MgdG8gdGhlIHJlcXVlc3RlZCBhcnJhbmdlbWVudCBvciB0aGUgYXJyYW5nZW1lbnQgZG9lcyBub3QgZXhpc3QsIHRoZSBjcmVhdGUgZmFpbHMgd2l0aCBiYWQgcmVxdWVzdCBzdGF0dXMuIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBwb3N0QmF0Y2hUZW1wbGF0ZVBheW1lbnRzKHJlcXVlc3RQYXJhbWV0ZXJzOiBQb3N0QmF0Y2hUZW1wbGF0ZVBheW1lbnRzUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxCYXRjaFRlbXBsYXRlUGF5bWVudHNQb3N0UmVzcG9uc2U+O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXRjaCB0ZW1wbGF0ZSBwYXltZW50LlxuICAgICAqIEFkZHMgbmV3IHBheW1lbnQgdW5kZXIgdGhlIGJhdGNoIHRlbXBsYXRlIGluIHN0YXR1cyBEUkFGVC4gT25seSB0aGUgY3JlYXRvciBvZiB0aGUgYmF0Y2ggdGVtcGxhdGUgY2FuIGFkZCBwYXltZW50cy4gV2hlbiBjb3VudGVycGFydHkgYXJyYW5nZW1lbnQgaWQgaXMgcHJvdmlkZWQsIHRoZW4gdGhlIGFjY291bnQgaW5mb3JtYXRpb24gKElCQU4vQkJBTiwgYmFuayBicmFuY2ggY29kZSBhbmQgYWNjb3VudCBuYW1lKSBpcyBnb2luZyB0byBiZSBwdWxsZWQgZnJvbSBQcm9kdWN0IFN1bW1hcnksIG92ZXJ3cml0aW5nIHRoZSBhY2NvdW50IGluZm9ybWF0aW9uIHRoYXQgd2FzIGRpcmVjdGx5IHByb3ZpZGVkLiBXaGVuIGN1cnJlbnQgdXNlciBoYXMgbm8gYWNjZXNzIHRvIHRoZSByZXF1ZXN0ZWQgYXJyYW5nZW1lbnQgb3IgdGhlIGFycmFuZ2VtZW50IGRvZXMgbm90IGV4aXN0LCB0aGUgY3JlYXRlIGZhaWxzIHdpdGggYmFkIHJlcXVlc3Qgc3RhdHVzLiBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcG9zdEJhdGNoVGVtcGxhdGVQYXltZW50cyhyZXF1ZXN0UGFyYW1ldGVyczogUG9zdEJhdGNoVGVtcGxhdGVQYXltZW50c1JlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxCYXRjaFRlbXBsYXRlUGF5bWVudHNQb3N0UmVzcG9uc2U+PjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYmF0Y2ggdGVtcGxhdGUgcGF5bWVudC5cbiAgICAgKiBBZGRzIG5ldyBwYXltZW50IHVuZGVyIHRoZSBiYXRjaCB0ZW1wbGF0ZSBpbiBzdGF0dXMgRFJBRlQuIE9ubHkgdGhlIGNyZWF0b3Igb2YgdGhlIGJhdGNoIHRlbXBsYXRlIGNhbiBhZGQgcGF5bWVudHMuIFdoZW4gY291bnRlcnBhcnR5IGFycmFuZ2VtZW50IGlkIGlzIHByb3ZpZGVkLCB0aGVuIHRoZSBhY2NvdW50IGluZm9ybWF0aW9uIChJQkFOL0JCQU4sIGJhbmsgYnJhbmNoIGNvZGUgYW5kIGFjY291bnQgbmFtZSkgaXMgZ29pbmcgdG8gYmUgcHVsbGVkIGZyb20gUHJvZHVjdCBTdW1tYXJ5LCBvdmVyd3JpdGluZyB0aGUgYWNjb3VudCBpbmZvcm1hdGlvbiB0aGF0IHdhcyBkaXJlY3RseSBwcm92aWRlZC4gV2hlbiBjdXJyZW50IHVzZXIgaGFzIG5vIGFjY2VzcyB0byB0aGUgcmVxdWVzdGVkIGFycmFuZ2VtZW50IG9yIHRoZSBhcnJhbmdlbWVudCBkb2VzIG5vdCBleGlzdCwgdGhlIGNyZWF0ZSBmYWlscyB3aXRoIGJhZCByZXF1ZXN0IHN0YXR1cy4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHBvc3RCYXRjaFRlbXBsYXRlUGF5bWVudHMocmVxdWVzdFBhcmFtZXRlcnM6IFBvc3RCYXRjaFRlbXBsYXRlUGF5bWVudHNSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PEJhdGNoVGVtcGxhdGVQYXltZW50c1Bvc3RSZXNwb25zZT4+O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXRjaCB0ZW1wbGF0ZSBwYXltZW50LlxuICAgICAqIEFkZHMgbmV3IHBheW1lbnQgdW5kZXIgdGhlIGJhdGNoIHRlbXBsYXRlIGluIHN0YXR1cyBEUkFGVC4gT25seSB0aGUgY3JlYXRvciBvZiB0aGUgYmF0Y2ggdGVtcGxhdGUgY2FuIGFkZCBwYXltZW50cy4gV2hlbiBjb3VudGVycGFydHkgYXJyYW5nZW1lbnQgaWQgaXMgcHJvdmlkZWQsIHRoZW4gdGhlIGFjY291bnQgaW5mb3JtYXRpb24gKElCQU4vQkJBTiwgYmFuayBicmFuY2ggY29kZSBhbmQgYWNjb3VudCBuYW1lKSBpcyBnb2luZyB0byBiZSBwdWxsZWQgZnJvbSBQcm9kdWN0IFN1bW1hcnksIG92ZXJ3cml0aW5nIHRoZSBhY2NvdW50IGluZm9ybWF0aW9uIHRoYXQgd2FzIGRpcmVjdGx5IHByb3ZpZGVkLiBXaGVuIGN1cnJlbnQgdXNlciBoYXMgbm8gYWNjZXNzIHRvIHRoZSByZXF1ZXN0ZWQgYXJyYW5nZW1lbnQgb3IgdGhlIGFycmFuZ2VtZW50IGRvZXMgbm90IGV4aXN0LCB0aGUgY3JlYXRlIGZhaWxzIHdpdGggYmFkIHJlcXVlc3Qgc3RhdHVzLiBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcG9zdEJhdGNoVGVtcGxhdGVQYXltZW50cyhyZXF1ZXN0UGFyYW1ldGVyczogUG9zdEJhdGNoVGVtcGxhdGVQYXltZW50c1JlcXVlc3RQYXJhbXMsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IF9iYXRjaFRlbXBsYXRlSWQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVGVtcGxhdGVJZFwiXTtcbiAgICAgICAgaWYgKF9iYXRjaFRlbXBsYXRlSWQgPT09IG51bGwgfHwgX2JhdGNoVGVtcGxhdGVJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBiYXRjaFRlbXBsYXRlSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBwb3N0QmF0Y2hUZW1wbGF0ZVBheW1lbnRzLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IF9iYXRjaFRlbXBsYXRlUGF5bWVudHNQb3N0UmVxdWVzdCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiYmF0Y2hUZW1wbGF0ZVBheW1lbnRzUG9zdFJlcXVlc3RcIl07XG4gICAgICAgIGlmIChfYmF0Y2hUZW1wbGF0ZVBheW1lbnRzUG9zdFJlcXVlc3QgPT09IG51bGwgfHwgX2JhdGNoVGVtcGxhdGVQYXltZW50c1Bvc3RSZXF1ZXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGJhdGNoVGVtcGxhdGVQYXltZW50c1Bvc3RSZXF1ZXN0IHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgcG9zdEJhdGNoVGVtcGxhdGVQYXltZW50cy4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICBdO1xuICAgICAgICBjb25zdCBodHRwQ29udGVudFR5cGVTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckNvbnRlbnRUeXBlKGNvbnN1bWVzKTtcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0PEJhdGNoVGVtcGxhdGVQYXltZW50c1Bvc3RSZXNwb25zZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YxL2JhdGNoLXRlbXBsYXRlcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2JhdGNoVGVtcGxhdGVJZCkpfS9iYXRjaC10ZW1wbGF0ZS1wYXltZW50c2AsXG4gICAgICAgICAgICBfYmF0Y2hUZW1wbGF0ZVBheW1lbnRzUG9zdFJlcXVlc3QsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBwb3N0QmF0Y2hUZW1wbGF0ZVBheW1lbnRzVXJsKHJlcXVlc3RQYXJhbWV0ZXJzOiBQb3N0QmF0Y2hUZW1wbGF0ZVBheW1lbnRzUmVxdWVzdFBhcmFtcyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IF9iYXRjaFRlbXBsYXRlSWQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVGVtcGxhdGVJZFwiXTtcbiAgICAgICAgaWYgKF9iYXRjaFRlbXBsYXRlSWQgPT09IG51bGwgfHwgX2JhdGNoVGVtcGxhdGVJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBiYXRjaFRlbXBsYXRlSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBwb3N0QmF0Y2hUZW1wbGF0ZVBheW1lbnRzLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IF9iYXRjaFRlbXBsYXRlUGF5bWVudHNQb3N0UmVxdWVzdCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiYmF0Y2hUZW1wbGF0ZVBheW1lbnRzUG9zdFJlcXVlc3RcIl07XG4gICAgICAgIGlmIChfYmF0Y2hUZW1wbGF0ZVBheW1lbnRzUG9zdFJlcXVlc3QgPT09IG51bGwgfHwgX2JhdGNoVGVtcGxhdGVQYXltZW50c1Bvc3RSZXF1ZXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGJhdGNoVGVtcGxhdGVQYXltZW50c1Bvc3RSZXF1ZXN0IHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgcG9zdEJhdGNoVGVtcGxhdGVQYXltZW50cy4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YxL2JhdGNoLXRlbXBsYXRlcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2JhdGNoVGVtcGxhdGVJZCkpfS9iYXRjaC10ZW1wbGF0ZS1wYXltZW50c2A7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJhdGNoIHRlbXBsYXRlLlxuICAgICAqIENyZWF0ZXMgYSBiYXRjaCB0ZW1wbGF0ZSBmcm9tIGEgYmF0Y2ggb3JkZXIgd2l0aCBpZCBzZW50IGluIHRoZSBwYXlsb2FkIG9yIGZyb20gYW4gZXhpc3RpbmcgYmF0Y2ggdGVtcGxhdGUgd2l0aCBpZCBzZW50IGluIHRoZSBwYXJhbWV0ZXJzLiBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcG9zdEJhdGNoVGVtcGxhdGVzKHJlcXVlc3RQYXJhbWV0ZXJzOiBQb3N0QmF0Y2hUZW1wbGF0ZXNSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEJhdGNoVGVtcGxhdGVzUG9zdFJlc3BvbnNlPjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYmF0Y2ggdGVtcGxhdGUuXG4gICAgICogQ3JlYXRlcyBhIGJhdGNoIHRlbXBsYXRlIGZyb20gYSBiYXRjaCBvcmRlciB3aXRoIGlkIHNlbnQgaW4gdGhlIHBheWxvYWQgb3IgZnJvbSBhbiBleGlzdGluZyBiYXRjaCB0ZW1wbGF0ZSB3aXRoIGlkIHNlbnQgaW4gdGhlIHBhcmFtZXRlcnMuIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBwb3N0QmF0Y2hUZW1wbGF0ZXMocmVxdWVzdFBhcmFtZXRlcnM6IFBvc3RCYXRjaFRlbXBsYXRlc1JlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxCYXRjaFRlbXBsYXRlc1Bvc3RSZXNwb25zZT4+O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXRjaCB0ZW1wbGF0ZS5cbiAgICAgKiBDcmVhdGVzIGEgYmF0Y2ggdGVtcGxhdGUgZnJvbSBhIGJhdGNoIG9yZGVyIHdpdGggaWQgc2VudCBpbiB0aGUgcGF5bG9hZCBvciBmcm9tIGFuIGV4aXN0aW5nIGJhdGNoIHRlbXBsYXRlIHdpdGggaWQgc2VudCBpbiB0aGUgcGFyYW1ldGVycy4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHBvc3RCYXRjaFRlbXBsYXRlcyhyZXF1ZXN0UGFyYW1ldGVyczogUG9zdEJhdGNoVGVtcGxhdGVzUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxCYXRjaFRlbXBsYXRlc1Bvc3RSZXNwb25zZT4+O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXRjaCB0ZW1wbGF0ZS5cbiAgICAgKiBDcmVhdGVzIGEgYmF0Y2ggdGVtcGxhdGUgZnJvbSBhIGJhdGNoIG9yZGVyIHdpdGggaWQgc2VudCBpbiB0aGUgcGF5bG9hZCBvciBmcm9tIGFuIGV4aXN0aW5nIGJhdGNoIHRlbXBsYXRlIHdpdGggaWQgc2VudCBpbiB0aGUgcGFyYW1ldGVycy4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHBvc3RCYXRjaFRlbXBsYXRlcyhyZXF1ZXN0UGFyYW1ldGVyczogUG9zdEJhdGNoVGVtcGxhdGVzUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgY29uc3QgX2RyYWZ0T2YgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImRyYWZ0T2ZcIl07XG4gICAgICAgIGNvbnN0IF9jb3B5RnJvbSA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiY29weUZyb21cIl07XG4gICAgICAgIGNvbnN0IF9uYW1lID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJuYW1lXCJdO1xuICAgICAgICBjb25zdCBfYmF0Y2hUZW1wbGF0ZXNQb3N0UmVxdWVzdCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiYmF0Y2hUZW1wbGF0ZXNQb3N0UmVxdWVzdFwiXTtcblxuICAgICAgICBsZXQgcXVlcnlQYXJhbWV0ZXJzID0gbmV3IEh0dHBQYXJhbXMoe2VuY29kZXI6IHRoaXMuZW5jb2Rlcn0pO1xuICAgICAgICBpZiAoX2RyYWZ0T2YgIT09IHVuZGVmaW5lZCAmJiBfZHJhZnRPZiAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2RyYWZ0T2YsICdkcmFmdE9mJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9jb3B5RnJvbSAhPT0gdW5kZWZpbmVkICYmIF9jb3B5RnJvbSAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2NvcHlGcm9tLCAnY29weUZyb20nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX25hbWUgIT09IHVuZGVmaW5lZCAmJiBfbmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X25hbWUsICduYW1lJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdDxCYXRjaFRlbXBsYXRlc1Bvc3RSZXNwb25zZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YxL2JhdGNoLXRlbXBsYXRlc2AsXG4gICAgICAgICAgICBfYmF0Y2hUZW1wbGF0ZXNQb3N0UmVxdWVzdCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIHBvc3RCYXRjaFRlbXBsYXRlc1VybChyZXF1ZXN0UGFyYW1ldGVyczogUG9zdEJhdGNoVGVtcGxhdGVzUmVxdWVzdFBhcmFtcyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IF9kcmFmdE9mID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJkcmFmdE9mXCJdO1xuICAgICAgICBjb25zdCBfY29weUZyb20gPSByZXF1ZXN0UGFyYW1ldGVyc1tcImNvcHlGcm9tXCJdO1xuICAgICAgICBjb25zdCBfbmFtZSA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wibmFtZVwiXTtcbiAgICAgICAgY29uc3QgX2JhdGNoVGVtcGxhdGVzUG9zdFJlcXVlc3QgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVGVtcGxhdGVzUG9zdFJlcXVlc3RcIl07XG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogdGhpcy5lbmNvZGVyfSk7XG4gICAgICAgIGlmIChfZHJhZnRPZiAhPT0gdW5kZWZpbmVkICYmIF9kcmFmdE9mICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5fZHJhZnRPZiwgJ2RyYWZ0T2YnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2NvcHlGcm9tICE9PSB1bmRlZmluZWQgJiYgX2NvcHlGcm9tICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5fY29weUZyb20sICdjb3B5RnJvbScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfbmFtZSAhPT0gdW5kZWZpbmVkICYmIF9uYW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5fbmFtZSwgJ25hbWUnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBxdWVyeVN0cmluZyA9IHF1ZXJ5UGFyYW1ldGVycy50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YxL2JhdGNoLXRlbXBsYXRlcyR7cXVlcnlTdHJpbmcgPyBgPyR7cXVlcnlTdHJpbmd9YCA6ICcnfWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJhdGNoIHRlbXBsYXRlIGRyYWZ0IGZyb20gZ2l2ZW4gc2V0IG9mIGF0dHJpYnV0ZXMuXG4gICAgICogQ3JlYXRlcyBhIGJhdGNoIHRlbXBsYXRlIGRyYWZ0IGZyb20gZ2l2ZW4gc2V0IG9mIGF0dHJpYnV0ZXMuXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHBvc3RCYXRjaFRlbXBsYXRlc0Zyb21BdHRyaWJ1dGVzKHJlcXVlc3RQYXJhbWV0ZXJzOiBQb3N0QmF0Y2hUZW1wbGF0ZXNGcm9tQXR0cmlidXRlc1JlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8QmF0Y2hUZW1wbGF0ZXNBdHRyaWJ1dGVzUG9zdFJlc3BvbnNlPjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYmF0Y2ggdGVtcGxhdGUgZHJhZnQgZnJvbSBnaXZlbiBzZXQgb2YgYXR0cmlidXRlcy5cbiAgICAgKiBDcmVhdGVzIGEgYmF0Y2ggdGVtcGxhdGUgZHJhZnQgZnJvbSBnaXZlbiBzZXQgb2YgYXR0cmlidXRlcy5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcG9zdEJhdGNoVGVtcGxhdGVzRnJvbUF0dHJpYnV0ZXMocmVxdWVzdFBhcmFtZXRlcnM6IFBvc3RCYXRjaFRlbXBsYXRlc0Zyb21BdHRyaWJ1dGVzUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEJhdGNoVGVtcGxhdGVzQXR0cmlidXRlc1Bvc3RSZXNwb25zZT4+O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXRjaCB0ZW1wbGF0ZSBkcmFmdCBmcm9tIGdpdmVuIHNldCBvZiBhdHRyaWJ1dGVzLlxuICAgICAqIENyZWF0ZXMgYSBiYXRjaCB0ZW1wbGF0ZSBkcmFmdCBmcm9tIGdpdmVuIHNldCBvZiBhdHRyaWJ1dGVzLlxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBwb3N0QmF0Y2hUZW1wbGF0ZXNGcm9tQXR0cmlidXRlcyhyZXF1ZXN0UGFyYW1ldGVyczogUG9zdEJhdGNoVGVtcGxhdGVzRnJvbUF0dHJpYnV0ZXNSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PEJhdGNoVGVtcGxhdGVzQXR0cmlidXRlc1Bvc3RSZXNwb25zZT4+O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXRjaCB0ZW1wbGF0ZSBkcmFmdCBmcm9tIGdpdmVuIHNldCBvZiBhdHRyaWJ1dGVzLlxuICAgICAqIENyZWF0ZXMgYSBiYXRjaCB0ZW1wbGF0ZSBkcmFmdCBmcm9tIGdpdmVuIHNldCBvZiBhdHRyaWJ1dGVzLlxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBwb3N0QmF0Y2hUZW1wbGF0ZXNGcm9tQXR0cmlidXRlcyhyZXF1ZXN0UGFyYW1ldGVyczogUG9zdEJhdGNoVGVtcGxhdGVzRnJvbUF0dHJpYnV0ZXNSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBjb25zdCBfYmF0Y2hUZW1wbGF0ZXNBdHRyaWJ1dGVzUG9zdFJlcXVlc3QgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVGVtcGxhdGVzQXR0cmlidXRlc1Bvc3RSZXF1ZXN0XCJdO1xuICAgICAgICBpZiAoX2JhdGNoVGVtcGxhdGVzQXR0cmlidXRlc1Bvc3RSZXF1ZXN0ID09PSBudWxsIHx8IF9iYXRjaFRlbXBsYXRlc0F0dHJpYnV0ZXNQb3N0UmVxdWVzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBiYXRjaFRlbXBsYXRlc0F0dHJpYnV0ZXNQb3N0UmVxdWVzdCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHBvc3RCYXRjaFRlbXBsYXRlc0Zyb21BdHRyaWJ1dGVzLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGh0dHBDb250ZW50VHlwZVNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQ29udGVudFR5cGUoY29uc3VtZXMpO1xuICAgICAgICBpZiAoaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCBodHRwQ29udGVudFR5cGVTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Q8QmF0Y2hUZW1wbGF0ZXNBdHRyaWJ1dGVzUG9zdFJlc3BvbnNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjEvYmF0Y2gtdGVtcGxhdGVzL2Zyb20tYXR0cmlidXRlc2AsXG4gICAgICAgICAgICBfYmF0Y2hUZW1wbGF0ZXNBdHRyaWJ1dGVzUG9zdFJlcXVlc3QsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBwb3N0QmF0Y2hUZW1wbGF0ZXNGcm9tQXR0cmlidXRlc1VybChyZXF1ZXN0UGFyYW1ldGVyczogUG9zdEJhdGNoVGVtcGxhdGVzRnJvbUF0dHJpYnV0ZXNSZXF1ZXN0UGFyYW1zKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgX2JhdGNoVGVtcGxhdGVzQXR0cmlidXRlc1Bvc3RSZXF1ZXN0ID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJiYXRjaFRlbXBsYXRlc0F0dHJpYnV0ZXNQb3N0UmVxdWVzdFwiXTtcbiAgICAgICAgaWYgKF9iYXRjaFRlbXBsYXRlc0F0dHJpYnV0ZXNQb3N0UmVxdWVzdCA9PT0gbnVsbCB8fCBfYmF0Y2hUZW1wbGF0ZXNBdHRyaWJ1dGVzUG9zdFJlcXVlc3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgYmF0Y2hUZW1wbGF0ZXNBdHRyaWJ1dGVzUG9zdFJlcXVlc3Qgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBwb3N0QmF0Y2hUZW1wbGF0ZXNGcm9tQXR0cmlidXRlcy4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YxL2JhdGNoLXRlbXBsYXRlcy9mcm9tLWF0dHJpYnV0ZXNgO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgYSBiYXRjaCB0ZW1wbGF0ZSBwYXltZW50LlxuICAgICAqIFVwZGF0ZXMgYSBiYXRjaCB0ZW1wbGF0ZSBwYXltZW50IGlkZW50aWZpZWQgYnkgYmF0Y2ggdGVtcGxhdGUgaWQgYW5kIGJhdGNoIHRlbXBsYXRlIHBheW1lbnQgaWQgcGFpci4gVGhlIHVwZGF0ZSBpcyBub3QgcGFydGlhbCwgbWVhbmluZyB0aGUgbmV3IHN0YXRlIHdpbGwgb3ZlcnJpdGUgdGhlIGV4aXNpdG5nIHN0YXRlIGJ5IHJlcGxhY2luZyBpdCBjb21wbGV0ZWx5LiBPbmx5IHRoZSBjcmVhdG9yIG9mIHRoZSBiYXRjaCB0ZW1wbGF0ZSBjYW4gdXBkYXRlIHBheW1lbnRzLiBXaGVuIGNvdW50ZXJwYXJ0eSBhcnJhbmdlbWVudCBpZCBpcyBwcm92aWRlZCwgdGhlbiB0aGUgYWNjb3VudCBpbmZvcm1hdGlvbiAoSUJBTi9CQkFOLCBiYW5rIGJyYW5jaCBjb2RlIGFuZCBhY2NvdW50IG5hbWUpIGlzIGdvaW5nIHRvIGJlIHB1bGxlZCBmcm9tIFByb2R1Y3QgU3VtbWFyeSwgb3ZlcndyaXRpbmcgdGhlIGFjY291bnQgaW5mb3JtYXRpb24gdGhhdCB3YXMgZGlyZWN0bHkgcHJvdmlkZWQuIFdoZW4gY3VycmVudCB1c2VyIGhhcyBubyBhY2Nlc3MgdG8gdGhlIHJlcXVlc3RlZCBhcnJhbmdlbWVudCBvciB0aGUgYXJyYW5nZW1lbnQgZG9lcyBub3QgZXhpc3QsIHRoZSB1cGRhdGUgZmFpbHMgd2l0aCBiYWQgcmVxdWVzdCBzdGF0dXMuIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBwdXRCYXRjaFRlbXBsYXRlUGF5bWVudEJ5SWQocmVxdWVzdFBhcmFtZXRlcnM6IFB1dEJhdGNoVGVtcGxhdGVQYXltZW50QnlJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8QmF0Y2hUZW1wbGF0ZVBheW1lbnRzUHV0UmVzcG9uc2U+O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgYSBiYXRjaCB0ZW1wbGF0ZSBwYXltZW50LlxuICAgICAqIFVwZGF0ZXMgYSBiYXRjaCB0ZW1wbGF0ZSBwYXltZW50IGlkZW50aWZpZWQgYnkgYmF0Y2ggdGVtcGxhdGUgaWQgYW5kIGJhdGNoIHRlbXBsYXRlIHBheW1lbnQgaWQgcGFpci4gVGhlIHVwZGF0ZSBpcyBub3QgcGFydGlhbCwgbWVhbmluZyB0aGUgbmV3IHN0YXRlIHdpbGwgb3ZlcnJpdGUgdGhlIGV4aXNpdG5nIHN0YXRlIGJ5IHJlcGxhY2luZyBpdCBjb21wbGV0ZWx5LiBPbmx5IHRoZSBjcmVhdG9yIG9mIHRoZSBiYXRjaCB0ZW1wbGF0ZSBjYW4gdXBkYXRlIHBheW1lbnRzLiBXaGVuIGNvdW50ZXJwYXJ0eSBhcnJhbmdlbWVudCBpZCBpcyBwcm92aWRlZCwgdGhlbiB0aGUgYWNjb3VudCBpbmZvcm1hdGlvbiAoSUJBTi9CQkFOLCBiYW5rIGJyYW5jaCBjb2RlIGFuZCBhY2NvdW50IG5hbWUpIGlzIGdvaW5nIHRvIGJlIHB1bGxlZCBmcm9tIFByb2R1Y3QgU3VtbWFyeSwgb3ZlcndyaXRpbmcgdGhlIGFjY291bnQgaW5mb3JtYXRpb24gdGhhdCB3YXMgZGlyZWN0bHkgcHJvdmlkZWQuIFdoZW4gY3VycmVudCB1c2VyIGhhcyBubyBhY2Nlc3MgdG8gdGhlIHJlcXVlc3RlZCBhcnJhbmdlbWVudCBvciB0aGUgYXJyYW5nZW1lbnQgZG9lcyBub3QgZXhpc3QsIHRoZSB1cGRhdGUgZmFpbHMgd2l0aCBiYWQgcmVxdWVzdCBzdGF0dXMuIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBwdXRCYXRjaFRlbXBsYXRlUGF5bWVudEJ5SWQocmVxdWVzdFBhcmFtZXRlcnM6IFB1dEJhdGNoVGVtcGxhdGVQYXltZW50QnlJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxCYXRjaFRlbXBsYXRlUGF5bWVudHNQdXRSZXNwb25zZT4+O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgYSBiYXRjaCB0ZW1wbGF0ZSBwYXltZW50LlxuICAgICAqIFVwZGF0ZXMgYSBiYXRjaCB0ZW1wbGF0ZSBwYXltZW50IGlkZW50aWZpZWQgYnkgYmF0Y2ggdGVtcGxhdGUgaWQgYW5kIGJhdGNoIHRlbXBsYXRlIHBheW1lbnQgaWQgcGFpci4gVGhlIHVwZGF0ZSBpcyBub3QgcGFydGlhbCwgbWVhbmluZyB0aGUgbmV3IHN0YXRlIHdpbGwgb3ZlcnJpdGUgdGhlIGV4aXNpdG5nIHN0YXRlIGJ5IHJlcGxhY2luZyBpdCBjb21wbGV0ZWx5LiBPbmx5IHRoZSBjcmVhdG9yIG9mIHRoZSBiYXRjaCB0ZW1wbGF0ZSBjYW4gdXBkYXRlIHBheW1lbnRzLiBXaGVuIGNvdW50ZXJwYXJ0eSBhcnJhbmdlbWVudCBpZCBpcyBwcm92aWRlZCwgdGhlbiB0aGUgYWNjb3VudCBpbmZvcm1hdGlvbiAoSUJBTi9CQkFOLCBiYW5rIGJyYW5jaCBjb2RlIGFuZCBhY2NvdW50IG5hbWUpIGlzIGdvaW5nIHRvIGJlIHB1bGxlZCBmcm9tIFByb2R1Y3QgU3VtbWFyeSwgb3ZlcndyaXRpbmcgdGhlIGFjY291bnQgaW5mb3JtYXRpb24gdGhhdCB3YXMgZGlyZWN0bHkgcHJvdmlkZWQuIFdoZW4gY3VycmVudCB1c2VyIGhhcyBubyBhY2Nlc3MgdG8gdGhlIHJlcXVlc3RlZCBhcnJhbmdlbWVudCBvciB0aGUgYXJyYW5nZW1lbnQgZG9lcyBub3QgZXhpc3QsIHRoZSB1cGRhdGUgZmFpbHMgd2l0aCBiYWQgcmVxdWVzdCBzdGF0dXMuIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBwdXRCYXRjaFRlbXBsYXRlUGF5bWVudEJ5SWQocmVxdWVzdFBhcmFtZXRlcnM6IFB1dEJhdGNoVGVtcGxhdGVQYXltZW50QnlJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8QmF0Y2hUZW1wbGF0ZVBheW1lbnRzUHV0UmVzcG9uc2U+PjtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGEgYmF0Y2ggdGVtcGxhdGUgcGF5bWVudC5cbiAgICAgKiBVcGRhdGVzIGEgYmF0Y2ggdGVtcGxhdGUgcGF5bWVudCBpZGVudGlmaWVkIGJ5IGJhdGNoIHRlbXBsYXRlIGlkIGFuZCBiYXRjaCB0ZW1wbGF0ZSBwYXltZW50IGlkIHBhaXIuIFRoZSB1cGRhdGUgaXMgbm90IHBhcnRpYWwsIG1lYW5pbmcgdGhlIG5ldyBzdGF0ZSB3aWxsIG92ZXJyaXRlIHRoZSBleGlzaXRuZyBzdGF0ZSBieSByZXBsYWNpbmcgaXQgY29tcGxldGVseS4gT25seSB0aGUgY3JlYXRvciBvZiB0aGUgYmF0Y2ggdGVtcGxhdGUgY2FuIHVwZGF0ZSBwYXltZW50cy4gV2hlbiBjb3VudGVycGFydHkgYXJyYW5nZW1lbnQgaWQgaXMgcHJvdmlkZWQsIHRoZW4gdGhlIGFjY291bnQgaW5mb3JtYXRpb24gKElCQU4vQkJBTiwgYmFuayBicmFuY2ggY29kZSBhbmQgYWNjb3VudCBuYW1lKSBpcyBnb2luZyB0byBiZSBwdWxsZWQgZnJvbSBQcm9kdWN0IFN1bW1hcnksIG92ZXJ3cml0aW5nIHRoZSBhY2NvdW50IGluZm9ybWF0aW9uIHRoYXQgd2FzIGRpcmVjdGx5IHByb3ZpZGVkLiBXaGVuIGN1cnJlbnQgdXNlciBoYXMgbm8gYWNjZXNzIHRvIHRoZSByZXF1ZXN0ZWQgYXJyYW5nZW1lbnQgb3IgdGhlIGFycmFuZ2VtZW50IGRvZXMgbm90IGV4aXN0LCB0aGUgdXBkYXRlIGZhaWxzIHdpdGggYmFkIHJlcXVlc3Qgc3RhdHVzLiBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcHV0QmF0Y2hUZW1wbGF0ZVBheW1lbnRCeUlkKHJlcXVlc3RQYXJhbWV0ZXJzOiBQdXRCYXRjaFRlbXBsYXRlUGF5bWVudEJ5SWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBjb25zdCBfYmF0Y2hUZW1wbGF0ZUlkID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJiYXRjaFRlbXBsYXRlSWRcIl07XG4gICAgICAgIGlmIChfYmF0Y2hUZW1wbGF0ZUlkID09PSBudWxsIHx8IF9iYXRjaFRlbXBsYXRlSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgYmF0Y2hUZW1wbGF0ZUlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgcHV0QmF0Y2hUZW1wbGF0ZVBheW1lbnRCeUlkLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IF9iYXRjaFRlbXBsYXRlUGF5bWVudElkID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJiYXRjaFRlbXBsYXRlUGF5bWVudElkXCJdO1xuICAgICAgICBpZiAoX2JhdGNoVGVtcGxhdGVQYXltZW50SWQgPT09IG51bGwgfHwgX2JhdGNoVGVtcGxhdGVQYXltZW50SWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgYmF0Y2hUZW1wbGF0ZVBheW1lbnRJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHB1dEJhdGNoVGVtcGxhdGVQYXltZW50QnlJZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfYmF0Y2hUZW1wbGF0ZVBheW1lbnRzUHV0UmVxdWVzdCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiYmF0Y2hUZW1wbGF0ZVBheW1lbnRzUHV0UmVxdWVzdFwiXTtcbiAgICAgICAgaWYgKF9iYXRjaFRlbXBsYXRlUGF5bWVudHNQdXRSZXF1ZXN0ID09PSBudWxsIHx8IF9iYXRjaFRlbXBsYXRlUGF5bWVudHNQdXRSZXF1ZXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGJhdGNoVGVtcGxhdGVQYXltZW50c1B1dFJlcXVlc3Qgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBwdXRCYXRjaFRlbXBsYXRlUGF5bWVudEJ5SWQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucHV0PEJhdGNoVGVtcGxhdGVQYXltZW50c1B1dFJlc3BvbnNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjEvYmF0Y2gtdGVtcGxhdGVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhfYmF0Y2hUZW1wbGF0ZUlkKSl9L2JhdGNoLXRlbXBsYXRlLXBheW1lbnRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhfYmF0Y2hUZW1wbGF0ZVBheW1lbnRJZCkpfWAsXG4gICAgICAgICAgICBfYmF0Y2hUZW1wbGF0ZVBheW1lbnRzUHV0UmVxdWVzdCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIHB1dEJhdGNoVGVtcGxhdGVQYXltZW50QnlJZFVybChyZXF1ZXN0UGFyYW1ldGVyczogUHV0QmF0Y2hUZW1wbGF0ZVBheW1lbnRCeUlkUmVxdWVzdFBhcmFtcyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IF9iYXRjaFRlbXBsYXRlSWQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVGVtcGxhdGVJZFwiXTtcbiAgICAgICAgaWYgKF9iYXRjaFRlbXBsYXRlSWQgPT09IG51bGwgfHwgX2JhdGNoVGVtcGxhdGVJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBiYXRjaFRlbXBsYXRlSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBwdXRCYXRjaFRlbXBsYXRlUGF5bWVudEJ5SWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgX2JhdGNoVGVtcGxhdGVQYXltZW50SWQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVGVtcGxhdGVQYXltZW50SWRcIl07XG4gICAgICAgIGlmIChfYmF0Y2hUZW1wbGF0ZVBheW1lbnRJZCA9PT0gbnVsbCB8fCBfYmF0Y2hUZW1wbGF0ZVBheW1lbnRJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBiYXRjaFRlbXBsYXRlUGF5bWVudElkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgcHV0QmF0Y2hUZW1wbGF0ZVBheW1lbnRCeUlkLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IF9iYXRjaFRlbXBsYXRlUGF5bWVudHNQdXRSZXF1ZXN0ID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJiYXRjaFRlbXBsYXRlUGF5bWVudHNQdXRSZXF1ZXN0XCJdO1xuICAgICAgICBpZiAoX2JhdGNoVGVtcGxhdGVQYXltZW50c1B1dFJlcXVlc3QgPT09IG51bGwgfHwgX2JhdGNoVGVtcGxhdGVQYXltZW50c1B1dFJlcXVlc3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgYmF0Y2hUZW1wbGF0ZVBheW1lbnRzUHV0UmVxdWVzdCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHB1dEJhdGNoVGVtcGxhdGVQYXltZW50QnlJZC4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YxL2JhdGNoLXRlbXBsYXRlcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2JhdGNoVGVtcGxhdGVJZCkpfS9iYXRjaC10ZW1wbGF0ZS1wYXltZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2JhdGNoVGVtcGxhdGVQYXltZW50SWQpKX1gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgYSBiYXRjaCB0ZW1wbGF0ZS5cbiAgICAgKiBVcGRhdGVzIGEgYmF0Y2ggdGVtcGxhdGUuIEEgYmF0Y2ggdGVtcGxhdGUgd2l0aCBzdGF0dXMgRFJBRlQgY2FuIG9ubHkgYmUgdXBkYXRlZCB3aXRoIHRoZSBwYXlsb2FkIHZhbHVlcy4gQSBiYXRjaCB0ZW1wbGF0ZSB3aXRoIHN0YXR1cyBBVkFJTEFCTEUgY2FuIG9ubHkgYmUgdXBkYXRlZCBmcm9tIGFub3RoZXIgZHJhZnQgdGVtcGxhdGUgY3JlYXRlZCBmcm9tIHRoaXMgdGVtcGxhdGUgd2l0aCBpZCBnaXZlbiBpbiBwYXJhbWV0ZXJzLiBUaGUgZHJhZnQgdGVtcGxhdGUgaXMgdmFsaWF0ZWQgYmVmb3JlIHVwZGF0aW5nIHRoZSBleGlzdGluZyB0ZW1wbGF0ZS4gVGhlIGFjY2VzcyBjb250cm9sIGNoZWNrIGRlcGVuZHMgb24gdGhlIGJhdGNoIHRlbXBsYXRlIHN0YXR1cy4gICAxLiBJZiB0aGUgc3RhdHVzIGlzIERSQUZUIHRoZW4gdGhlIENyZWF0ZSBhY2Nlc3MgdG8gdGhlIGJ1c2luZXNzIGZ1bmN0aW9uIG9mIHRoZSBiYXRjaCB0ZW1wbGF0ZXMsIFZpZXcgYWNjZXNzIHRvIHRoZSBiYXRjaCB0eXBlIGFuZCBPcmlnaW5hdG9yIGFjY291bnQgaXMgdmFsaWRhdGVkLiAgIDIuIElmIHRoZSBzdGF0dXMgaXMgQVZBSUxBQkxFLCB0aGVuIHRoZSBFZGl0IGFjY2VzcyB0byB0aGUgYnVzaW5lc3MgZnVuY3Rpb24gb2YgdGhlIGJhdGNoIHRlbXBsYXRlcywgVmlldyBhY2Nlc3MgdG8gdGhlIGJhdGNoIHR5cGUgYW5kIG9yaWdpbmF0b3IgYWNjb3VudCBpcyB2YWxpZGF0ZWQuIFRoZSB1cGRhdGUgaXMgbm90IHBhcnRpYWwsIG1lYW5pbmcgdGhlIG5ldyBzdGF0ZSB3aWxsIG92ZXJyaXRlIHRoZSBleGlzaXRuZyBzdGF0ZSBieSByZXBsYWNpbmcgaXQgY29tcGxldGVseS4gQWxsIHRoZSBkZXRhaWxzIGFyZSB1cGRhdGVkIGV4Y2VwdCBiYXRjaFR5cGUsIHNlcnZpY0FncmVlbWVudElkIGFuZCBjcmVkaXREZWJpdE1peGVkSW5kaWNhdG9yLiBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgdXBkYXRlQmF0Y2hUZW1wbGF0ZUJ5SWQocmVxdWVzdFBhcmFtZXRlcnM6IFVwZGF0ZUJhdGNoVGVtcGxhdGVCeUlkUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxCYXRjaFRlbXBsYXRlc1B1dFJlc3BvbnNlPjtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGEgYmF0Y2ggdGVtcGxhdGUuXG4gICAgICogVXBkYXRlcyBhIGJhdGNoIHRlbXBsYXRlLiBBIGJhdGNoIHRlbXBsYXRlIHdpdGggc3RhdHVzIERSQUZUIGNhbiBvbmx5IGJlIHVwZGF0ZWQgd2l0aCB0aGUgcGF5bG9hZCB2YWx1ZXMuIEEgYmF0Y2ggdGVtcGxhdGUgd2l0aCBzdGF0dXMgQVZBSUxBQkxFIGNhbiBvbmx5IGJlIHVwZGF0ZWQgZnJvbSBhbm90aGVyIGRyYWZ0IHRlbXBsYXRlIGNyZWF0ZWQgZnJvbSB0aGlzIHRlbXBsYXRlIHdpdGggaWQgZ2l2ZW4gaW4gcGFyYW1ldGVycy4gVGhlIGRyYWZ0IHRlbXBsYXRlIGlzIHZhbGlhdGVkIGJlZm9yZSB1cGRhdGluZyB0aGUgZXhpc3RpbmcgdGVtcGxhdGUuIFRoZSBhY2Nlc3MgY29udHJvbCBjaGVjayBkZXBlbmRzIG9uIHRoZSBiYXRjaCB0ZW1wbGF0ZSBzdGF0dXMuICAgMS4gSWYgdGhlIHN0YXR1cyBpcyBEUkFGVCB0aGVuIHRoZSBDcmVhdGUgYWNjZXNzIHRvIHRoZSBidXNpbmVzcyBmdW5jdGlvbiBvZiB0aGUgYmF0Y2ggdGVtcGxhdGVzLCBWaWV3IGFjY2VzcyB0byB0aGUgYmF0Y2ggdHlwZSBhbmQgT3JpZ2luYXRvciBhY2NvdW50IGlzIHZhbGlkYXRlZC4gICAyLiBJZiB0aGUgc3RhdHVzIGlzIEFWQUlMQUJMRSwgdGhlbiB0aGUgRWRpdCBhY2Nlc3MgdG8gdGhlIGJ1c2luZXNzIGZ1bmN0aW9uIG9mIHRoZSBiYXRjaCB0ZW1wbGF0ZXMsIFZpZXcgYWNjZXNzIHRvIHRoZSBiYXRjaCB0eXBlIGFuZCBvcmlnaW5hdG9yIGFjY291bnQgaXMgdmFsaWRhdGVkLiBUaGUgdXBkYXRlIGlzIG5vdCBwYXJ0aWFsLCBtZWFuaW5nIHRoZSBuZXcgc3RhdGUgd2lsbCBvdmVycml0ZSB0aGUgZXhpc2l0bmcgc3RhdGUgYnkgcmVwbGFjaW5nIGl0IGNvbXBsZXRlbHkuIEFsbCB0aGUgZGV0YWlscyBhcmUgdXBkYXRlZCBleGNlcHQgYmF0Y2hUeXBlLCBzZXJ2aWNBZ3JlZW1lbnRJZCBhbmQgY3JlZGl0RGViaXRNaXhlZEluZGljYXRvci4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZUJhdGNoVGVtcGxhdGVCeUlkKHJlcXVlc3RQYXJhbWV0ZXJzOiBVcGRhdGVCYXRjaFRlbXBsYXRlQnlJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxCYXRjaFRlbXBsYXRlc1B1dFJlc3BvbnNlPj47XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBhIGJhdGNoIHRlbXBsYXRlLlxuICAgICAqIFVwZGF0ZXMgYSBiYXRjaCB0ZW1wbGF0ZS4gQSBiYXRjaCB0ZW1wbGF0ZSB3aXRoIHN0YXR1cyBEUkFGVCBjYW4gb25seSBiZSB1cGRhdGVkIHdpdGggdGhlIHBheWxvYWQgdmFsdWVzLiBBIGJhdGNoIHRlbXBsYXRlIHdpdGggc3RhdHVzIEFWQUlMQUJMRSBjYW4gb25seSBiZSB1cGRhdGVkIGZyb20gYW5vdGhlciBkcmFmdCB0ZW1wbGF0ZSBjcmVhdGVkIGZyb20gdGhpcyB0ZW1wbGF0ZSB3aXRoIGlkIGdpdmVuIGluIHBhcmFtZXRlcnMuIFRoZSBkcmFmdCB0ZW1wbGF0ZSBpcyB2YWxpYXRlZCBiZWZvcmUgdXBkYXRpbmcgdGhlIGV4aXN0aW5nIHRlbXBsYXRlLiBUaGUgYWNjZXNzIGNvbnRyb2wgY2hlY2sgZGVwZW5kcyBvbiB0aGUgYmF0Y2ggdGVtcGxhdGUgc3RhdHVzLiAgIDEuIElmIHRoZSBzdGF0dXMgaXMgRFJBRlQgdGhlbiB0aGUgQ3JlYXRlIGFjY2VzcyB0byB0aGUgYnVzaW5lc3MgZnVuY3Rpb24gb2YgdGhlIGJhdGNoIHRlbXBsYXRlcywgVmlldyBhY2Nlc3MgdG8gdGhlIGJhdGNoIHR5cGUgYW5kIE9yaWdpbmF0b3IgYWNjb3VudCBpcyB2YWxpZGF0ZWQuICAgMi4gSWYgdGhlIHN0YXR1cyBpcyBBVkFJTEFCTEUsIHRoZW4gdGhlIEVkaXQgYWNjZXNzIHRvIHRoZSBidXNpbmVzcyBmdW5jdGlvbiBvZiB0aGUgYmF0Y2ggdGVtcGxhdGVzLCBWaWV3IGFjY2VzcyB0byB0aGUgYmF0Y2ggdHlwZSBhbmQgb3JpZ2luYXRvciBhY2NvdW50IGlzIHZhbGlkYXRlZC4gVGhlIHVwZGF0ZSBpcyBub3QgcGFydGlhbCwgbWVhbmluZyB0aGUgbmV3IHN0YXRlIHdpbGwgb3ZlcnJpdGUgdGhlIGV4aXNpdG5nIHN0YXRlIGJ5IHJlcGxhY2luZyBpdCBjb21wbGV0ZWx5LiBBbGwgdGhlIGRldGFpbHMgYXJlIHVwZGF0ZWQgZXhjZXB0IGJhdGNoVHlwZSwgc2VydmljQWdyZWVtZW50SWQgYW5kIGNyZWRpdERlYml0TWl4ZWRJbmRpY2F0b3IuIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVCYXRjaFRlbXBsYXRlQnlJZChyZXF1ZXN0UGFyYW1ldGVyczogVXBkYXRlQmF0Y2hUZW1wbGF0ZUJ5SWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PEJhdGNoVGVtcGxhdGVzUHV0UmVzcG9uc2U+PjtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGEgYmF0Y2ggdGVtcGxhdGUuXG4gICAgICogVXBkYXRlcyBhIGJhdGNoIHRlbXBsYXRlLiBBIGJhdGNoIHRlbXBsYXRlIHdpdGggc3RhdHVzIERSQUZUIGNhbiBvbmx5IGJlIHVwZGF0ZWQgd2l0aCB0aGUgcGF5bG9hZCB2YWx1ZXMuIEEgYmF0Y2ggdGVtcGxhdGUgd2l0aCBzdGF0dXMgQVZBSUxBQkxFIGNhbiBvbmx5IGJlIHVwZGF0ZWQgZnJvbSBhbm90aGVyIGRyYWZ0IHRlbXBsYXRlIGNyZWF0ZWQgZnJvbSB0aGlzIHRlbXBsYXRlIHdpdGggaWQgZ2l2ZW4gaW4gcGFyYW1ldGVycy4gVGhlIGRyYWZ0IHRlbXBsYXRlIGlzIHZhbGlhdGVkIGJlZm9yZSB1cGRhdGluZyB0aGUgZXhpc3RpbmcgdGVtcGxhdGUuIFRoZSBhY2Nlc3MgY29udHJvbCBjaGVjayBkZXBlbmRzIG9uIHRoZSBiYXRjaCB0ZW1wbGF0ZSBzdGF0dXMuICAgMS4gSWYgdGhlIHN0YXR1cyBpcyBEUkFGVCB0aGVuIHRoZSBDcmVhdGUgYWNjZXNzIHRvIHRoZSBidXNpbmVzcyBmdW5jdGlvbiBvZiB0aGUgYmF0Y2ggdGVtcGxhdGVzLCBWaWV3IGFjY2VzcyB0byB0aGUgYmF0Y2ggdHlwZSBhbmQgT3JpZ2luYXRvciBhY2NvdW50IGlzIHZhbGlkYXRlZC4gICAyLiBJZiB0aGUgc3RhdHVzIGlzIEFWQUlMQUJMRSwgdGhlbiB0aGUgRWRpdCBhY2Nlc3MgdG8gdGhlIGJ1c2luZXNzIGZ1bmN0aW9uIG9mIHRoZSBiYXRjaCB0ZW1wbGF0ZXMsIFZpZXcgYWNjZXNzIHRvIHRoZSBiYXRjaCB0eXBlIGFuZCBvcmlnaW5hdG9yIGFjY291bnQgaXMgdmFsaWRhdGVkLiBUaGUgdXBkYXRlIGlzIG5vdCBwYXJ0aWFsLCBtZWFuaW5nIHRoZSBuZXcgc3RhdGUgd2lsbCBvdmVycml0ZSB0aGUgZXhpc2l0bmcgc3RhdGUgYnkgcmVwbGFjaW5nIGl0IGNvbXBsZXRlbHkuIEFsbCB0aGUgZGV0YWlscyBhcmUgdXBkYXRlZCBleGNlcHQgYmF0Y2hUeXBlLCBzZXJ2aWNBZ3JlZW1lbnRJZCBhbmQgY3JlZGl0RGViaXRNaXhlZEluZGljYXRvci4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZUJhdGNoVGVtcGxhdGVCeUlkKHJlcXVlc3RQYXJhbWV0ZXJzOiBVcGRhdGVCYXRjaFRlbXBsYXRlQnlJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IF9iYXRjaFRlbXBsYXRlSWQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVGVtcGxhdGVJZFwiXTtcbiAgICAgICAgaWYgKF9iYXRjaFRlbXBsYXRlSWQgPT09IG51bGwgfHwgX2JhdGNoVGVtcGxhdGVJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBiYXRjaFRlbXBsYXRlSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB1cGRhdGVCYXRjaFRlbXBsYXRlQnlJZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfZHJhZnRUZW1wbGF0ZUlkID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJkcmFmdFRlbXBsYXRlSWRcIl07XG4gICAgICAgIGNvbnN0IF9iYXRjaFRlbXBsYXRlc1B1dFJlcXVlc3QgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVGVtcGxhdGVzUHV0UmVxdWVzdFwiXTtcblxuICAgICAgICBsZXQgcXVlcnlQYXJhbWV0ZXJzID0gbmV3IEh0dHBQYXJhbXMoe2VuY29kZXI6IHRoaXMuZW5jb2Rlcn0pO1xuICAgICAgICBpZiAoX2RyYWZ0VGVtcGxhdGVJZCAhPT0gdW5kZWZpbmVkICYmIF9kcmFmdFRlbXBsYXRlSWQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9kcmFmdFRlbXBsYXRlSWQsICdkcmFmdFRlbXBsYXRlSWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICBdO1xuICAgICAgICBjb25zdCBodHRwQ29udGVudFR5cGVTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckNvbnRlbnRUeXBlKGNvbnN1bWVzKTtcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wdXQ8QmF0Y2hUZW1wbGF0ZXNQdXRSZXNwb25zZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YxL2JhdGNoLXRlbXBsYXRlcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2JhdGNoVGVtcGxhdGVJZCkpfWAsXG4gICAgICAgICAgICBfYmF0Y2hUZW1wbGF0ZXNQdXRSZXF1ZXN0LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlQmF0Y2hUZW1wbGF0ZUJ5SWRVcmwocmVxdWVzdFBhcmFtZXRlcnM6IFVwZGF0ZUJhdGNoVGVtcGxhdGVCeUlkUmVxdWVzdFBhcmFtcyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IF9iYXRjaFRlbXBsYXRlSWQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVGVtcGxhdGVJZFwiXTtcbiAgICAgICAgaWYgKF9iYXRjaFRlbXBsYXRlSWQgPT09IG51bGwgfHwgX2JhdGNoVGVtcGxhdGVJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBiYXRjaFRlbXBsYXRlSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB1cGRhdGVCYXRjaFRlbXBsYXRlQnlJZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfZHJhZnRUZW1wbGF0ZUlkID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJkcmFmdFRlbXBsYXRlSWRcIl07XG4gICAgICAgIGNvbnN0IF9iYXRjaFRlbXBsYXRlc1B1dFJlcXVlc3QgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVGVtcGxhdGVzUHV0UmVxdWVzdFwiXTtcbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiB0aGlzLmVuY29kZXJ9KTtcbiAgICAgICAgaWYgKF9kcmFmdFRlbXBsYXRlSWQgIT09IHVuZGVmaW5lZCAmJiBfZHJhZnRUZW1wbGF0ZUlkICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5fZHJhZnRUZW1wbGF0ZUlkLCAnZHJhZnRUZW1wbGF0ZUlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcXVlcnlTdHJpbmcgPSBxdWVyeVBhcmFtZXRlcnMudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY2xpZW50LWFwaS92MS9iYXRjaC10ZW1wbGF0ZXMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKF9iYXRjaFRlbXBsYXRlSWQpKX0ke3F1ZXJ5U3RyaW5nID8gYD8ke3F1ZXJ5U3RyaW5nfWAgOiAnJ31gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHN0YXR1cyBvZiBhIGJhdGNoIHRlbXBsYXRlLlxuICAgICAqIFVwZGF0ZXMgdGhlIHN0YXR1cyBvZiBhIGJhdGNoIHRlbXBsYXRlLiBWYWxpZCB0cmFuc2l0aW9uIGZyb20gc3RhdHVzIERSQUZUIGlzIEFWQUlMQUJMRS4gQnkgc2V0dGluZyBzdGF0dXMgdG8gQVZBSUxBQkxFIHdpdGggZHJ5UnVuICYjeDNEOyBmYWxzZSwgdGhlIGJhdGNoIHRlbXBsYXRlIGlzIHZhbGlkYXRlZCBhbmQgdXBkYXRlZCB3aXRoIHN0YXR1cyBhcyBBVkFJTEFCTEUgYW5kIHRoaXMgY2FuIGJlIHVzZWQgYXMgYWNjZWxlcmF0b3IgdG8gY3JlYXRlIG5ldyBiYXRjaCBvcmRlcnMuIEJ5IHNldHRpbmcgc3RhdHVzIHRvIEFWQUlMQUJMRSB3aXRoIGRyeVJ1biAmI3gzRDsgdHJ1ZSwgdGhlIGJhdGNoIHRlbXBsYXRlIGlzIHZhbGlkYXRlZCBidXQgc3RhdHVzIGlzIG5vdCB1cGRhdGVkLiBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgdXBkYXRlQmF0Y2hUZW1wbGF0ZVN0YXR1c0J5SWQocmVxdWVzdFBhcmFtZXRlcnM6IFVwZGF0ZUJhdGNoVGVtcGxhdGVTdGF0dXNCeUlkUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxCYXRjaFRlbXBsYXRlc1N0YXR1c1VwZGF0ZVJlc3BvbnNlPjtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBzdGF0dXMgb2YgYSBiYXRjaCB0ZW1wbGF0ZS5cbiAgICAgKiBVcGRhdGVzIHRoZSBzdGF0dXMgb2YgYSBiYXRjaCB0ZW1wbGF0ZS4gVmFsaWQgdHJhbnNpdGlvbiBmcm9tIHN0YXR1cyBEUkFGVCBpcyBBVkFJTEFCTEUuIEJ5IHNldHRpbmcgc3RhdHVzIHRvIEFWQUlMQUJMRSB3aXRoIGRyeVJ1biAmI3gzRDsgZmFsc2UsIHRoZSBiYXRjaCB0ZW1wbGF0ZSBpcyB2YWxpZGF0ZWQgYW5kIHVwZGF0ZWQgd2l0aCBzdGF0dXMgYXMgQVZBSUxBQkxFIGFuZCB0aGlzIGNhbiBiZSB1c2VkIGFzIGFjY2VsZXJhdG9yIHRvIGNyZWF0ZSBuZXcgYmF0Y2ggb3JkZXJzLiBCeSBzZXR0aW5nIHN0YXR1cyB0byBBVkFJTEFCTEUgd2l0aCBkcnlSdW4gJiN4M0Q7IHRydWUsIHRoZSBiYXRjaCB0ZW1wbGF0ZSBpcyB2YWxpZGF0ZWQgYnV0IHN0YXR1cyBpcyBub3QgdXBkYXRlZC4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZUJhdGNoVGVtcGxhdGVTdGF0dXNCeUlkKHJlcXVlc3RQYXJhbWV0ZXJzOiBVcGRhdGVCYXRjaFRlbXBsYXRlU3RhdHVzQnlJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxCYXRjaFRlbXBsYXRlc1N0YXR1c1VwZGF0ZVJlc3BvbnNlPj47XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgc3RhdHVzIG9mIGEgYmF0Y2ggdGVtcGxhdGUuXG4gICAgICogVXBkYXRlcyB0aGUgc3RhdHVzIG9mIGEgYmF0Y2ggdGVtcGxhdGUuIFZhbGlkIHRyYW5zaXRpb24gZnJvbSBzdGF0dXMgRFJBRlQgaXMgQVZBSUxBQkxFLiBCeSBzZXR0aW5nIHN0YXR1cyB0byBBVkFJTEFCTEUgd2l0aCBkcnlSdW4gJiN4M0Q7IGZhbHNlLCB0aGUgYmF0Y2ggdGVtcGxhdGUgaXMgdmFsaWRhdGVkIGFuZCB1cGRhdGVkIHdpdGggc3RhdHVzIGFzIEFWQUlMQUJMRSBhbmQgdGhpcyBjYW4gYmUgdXNlZCBhcyBhY2NlbGVyYXRvciB0byBjcmVhdGUgbmV3IGJhdGNoIG9yZGVycy4gQnkgc2V0dGluZyBzdGF0dXMgdG8gQVZBSUxBQkxFIHdpdGggZHJ5UnVuICYjeDNEOyB0cnVlLCB0aGUgYmF0Y2ggdGVtcGxhdGUgaXMgdmFsaWRhdGVkIGJ1dCBzdGF0dXMgaXMgbm90IHVwZGF0ZWQuIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVCYXRjaFRlbXBsYXRlU3RhdHVzQnlJZChyZXF1ZXN0UGFyYW1ldGVyczogVXBkYXRlQmF0Y2hUZW1wbGF0ZVN0YXR1c0J5SWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PEJhdGNoVGVtcGxhdGVzU3RhdHVzVXBkYXRlUmVzcG9uc2U+PjtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBzdGF0dXMgb2YgYSBiYXRjaCB0ZW1wbGF0ZS5cbiAgICAgKiBVcGRhdGVzIHRoZSBzdGF0dXMgb2YgYSBiYXRjaCB0ZW1wbGF0ZS4gVmFsaWQgdHJhbnNpdGlvbiBmcm9tIHN0YXR1cyBEUkFGVCBpcyBBVkFJTEFCTEUuIEJ5IHNldHRpbmcgc3RhdHVzIHRvIEFWQUlMQUJMRSB3aXRoIGRyeVJ1biAmI3gzRDsgZmFsc2UsIHRoZSBiYXRjaCB0ZW1wbGF0ZSBpcyB2YWxpZGF0ZWQgYW5kIHVwZGF0ZWQgd2l0aCBzdGF0dXMgYXMgQVZBSUxBQkxFIGFuZCB0aGlzIGNhbiBiZSB1c2VkIGFzIGFjY2VsZXJhdG9yIHRvIGNyZWF0ZSBuZXcgYmF0Y2ggb3JkZXJzLiBCeSBzZXR0aW5nIHN0YXR1cyB0byBBVkFJTEFCTEUgd2l0aCBkcnlSdW4gJiN4M0Q7IHRydWUsIHRoZSBiYXRjaCB0ZW1wbGF0ZSBpcyB2YWxpZGF0ZWQgYnV0IHN0YXR1cyBpcyBub3QgdXBkYXRlZC4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZUJhdGNoVGVtcGxhdGVTdGF0dXNCeUlkKHJlcXVlc3RQYXJhbWV0ZXJzOiBVcGRhdGVCYXRjaFRlbXBsYXRlU3RhdHVzQnlJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IF9iYXRjaFRlbXBsYXRlSWQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVGVtcGxhdGVJZFwiXTtcbiAgICAgICAgaWYgKF9iYXRjaFRlbXBsYXRlSWQgPT09IG51bGwgfHwgX2JhdGNoVGVtcGxhdGVJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBiYXRjaFRlbXBsYXRlSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB1cGRhdGVCYXRjaFRlbXBsYXRlU3RhdHVzQnlJZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfYmF0Y2hUZW1wbGF0ZXNTdGF0dXNVcGRhdGVSZXF1ZXN0ID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJiYXRjaFRlbXBsYXRlc1N0YXR1c1VwZGF0ZVJlcXVlc3RcIl07XG4gICAgICAgIGlmIChfYmF0Y2hUZW1wbGF0ZXNTdGF0dXNVcGRhdGVSZXF1ZXN0ID09PSBudWxsIHx8IF9iYXRjaFRlbXBsYXRlc1N0YXR1c1VwZGF0ZVJlcXVlc3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgYmF0Y2hUZW1wbGF0ZXNTdGF0dXNVcGRhdGVSZXF1ZXN0IHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdXBkYXRlQmF0Y2hUZW1wbGF0ZVN0YXR1c0J5SWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgX2RyeVJ1biA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiZHJ5UnVuXCJdO1xuICAgICAgICBjb25zdCBfaW50ZW5kZWRDcmVkaXRUcmFuc2FjdGlvbnNDb3VudCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiaW50ZW5kZWRDcmVkaXRUcmFuc2FjdGlvbnNDb3VudFwiXTtcbiAgICAgICAgY29uc3QgX2ludGVuZGVkRGViaXRUcmFuc2FjdGlvbnNDb3VudCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiaW50ZW5kZWREZWJpdFRyYW5zYWN0aW9uc0NvdW50XCJdO1xuICAgICAgICBjb25zdCBfaW50ZW5kZWRDcmVkaXRBbW91bnQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImludGVuZGVkQ3JlZGl0QW1vdW50XCJdO1xuICAgICAgICBjb25zdCBfaW50ZW5kZWREZWJpdEFtb3VudCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiaW50ZW5kZWREZWJpdEFtb3VudFwiXTtcblxuICAgICAgICBsZXQgcXVlcnlQYXJhbWV0ZXJzID0gbmV3IEh0dHBQYXJhbXMoe2VuY29kZXI6IHRoaXMuZW5jb2Rlcn0pO1xuICAgICAgICBpZiAoX2RyeVJ1biAhPT0gdW5kZWZpbmVkICYmIF9kcnlSdW4gIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9kcnlSdW4sICdkcnlSdW4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2ludGVuZGVkQ3JlZGl0VHJhbnNhY3Rpb25zQ291bnQgIT09IHVuZGVmaW5lZCAmJiBfaW50ZW5kZWRDcmVkaXRUcmFuc2FjdGlvbnNDb3VudCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2ludGVuZGVkQ3JlZGl0VHJhbnNhY3Rpb25zQ291bnQsICdpbnRlbmRlZENyZWRpdFRyYW5zYWN0aW9uc0NvdW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9pbnRlbmRlZERlYml0VHJhbnNhY3Rpb25zQ291bnQgIT09IHVuZGVmaW5lZCAmJiBfaW50ZW5kZWREZWJpdFRyYW5zYWN0aW9uc0NvdW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5faW50ZW5kZWREZWJpdFRyYW5zYWN0aW9uc0NvdW50LCAnaW50ZW5kZWREZWJpdFRyYW5zYWN0aW9uc0NvdW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9pbnRlbmRlZENyZWRpdEFtb3VudCAhPT0gdW5kZWZpbmVkICYmIF9pbnRlbmRlZENyZWRpdEFtb3VudCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2ludGVuZGVkQ3JlZGl0QW1vdW50LCAnaW50ZW5kZWRDcmVkaXRBbW91bnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2ludGVuZGVkRGViaXRBbW91bnQgIT09IHVuZGVmaW5lZCAmJiBfaW50ZW5kZWREZWJpdEFtb3VudCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2ludGVuZGVkRGViaXRBbW91bnQsICdpbnRlbmRlZERlYml0QW1vdW50Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucHV0PEJhdGNoVGVtcGxhdGVzU3RhdHVzVXBkYXRlUmVzcG9uc2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY2xpZW50LWFwaS92MS9iYXRjaC10ZW1wbGF0ZXMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKF9iYXRjaFRlbXBsYXRlSWQpKX0vc3RhdHVzYCxcbiAgICAgICAgICAgIF9iYXRjaFRlbXBsYXRlc1N0YXR1c1VwZGF0ZVJlcXVlc3QsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGFyYW1zOiBxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGVCYXRjaFRlbXBsYXRlU3RhdHVzQnlJZFVybChyZXF1ZXN0UGFyYW1ldGVyczogVXBkYXRlQmF0Y2hUZW1wbGF0ZVN0YXR1c0J5SWRSZXF1ZXN0UGFyYW1zKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgX2JhdGNoVGVtcGxhdGVJZCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiYmF0Y2hUZW1wbGF0ZUlkXCJdO1xuICAgICAgICBpZiAoX2JhdGNoVGVtcGxhdGVJZCA9PT0gbnVsbCB8fCBfYmF0Y2hUZW1wbGF0ZUlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGJhdGNoVGVtcGxhdGVJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHVwZGF0ZUJhdGNoVGVtcGxhdGVTdGF0dXNCeUlkLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IF9iYXRjaFRlbXBsYXRlc1N0YXR1c1VwZGF0ZVJlcXVlc3QgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVGVtcGxhdGVzU3RhdHVzVXBkYXRlUmVxdWVzdFwiXTtcbiAgICAgICAgaWYgKF9iYXRjaFRlbXBsYXRlc1N0YXR1c1VwZGF0ZVJlcXVlc3QgPT09IG51bGwgfHwgX2JhdGNoVGVtcGxhdGVzU3RhdHVzVXBkYXRlUmVxdWVzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBiYXRjaFRlbXBsYXRlc1N0YXR1c1VwZGF0ZVJlcXVlc3Qgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB1cGRhdGVCYXRjaFRlbXBsYXRlU3RhdHVzQnlJZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfZHJ5UnVuID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJkcnlSdW5cIl07XG4gICAgICAgIGNvbnN0IF9pbnRlbmRlZENyZWRpdFRyYW5zYWN0aW9uc0NvdW50ID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJpbnRlbmRlZENyZWRpdFRyYW5zYWN0aW9uc0NvdW50XCJdO1xuICAgICAgICBjb25zdCBfaW50ZW5kZWREZWJpdFRyYW5zYWN0aW9uc0NvdW50ID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJpbnRlbmRlZERlYml0VHJhbnNhY3Rpb25zQ291bnRcIl07XG4gICAgICAgIGNvbnN0IF9pbnRlbmRlZENyZWRpdEFtb3VudCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiaW50ZW5kZWRDcmVkaXRBbW91bnRcIl07XG4gICAgICAgIGNvbnN0IF9pbnRlbmRlZERlYml0QW1vdW50ID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJpbnRlbmRlZERlYml0QW1vdW50XCJdO1xuICAgICAgICBsZXQgcXVlcnlQYXJhbWV0ZXJzID0gbmV3IEh0dHBQYXJhbXMoe2VuY29kZXI6IHRoaXMuZW5jb2Rlcn0pO1xuICAgICAgICBpZiAoX2RyeVJ1biAhPT0gdW5kZWZpbmVkICYmIF9kcnlSdW4gIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9kcnlSdW4sICdkcnlSdW4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2ludGVuZGVkQ3JlZGl0VHJhbnNhY3Rpb25zQ291bnQgIT09IHVuZGVmaW5lZCAmJiBfaW50ZW5kZWRDcmVkaXRUcmFuc2FjdGlvbnNDb3VudCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2ludGVuZGVkQ3JlZGl0VHJhbnNhY3Rpb25zQ291bnQsICdpbnRlbmRlZENyZWRpdFRyYW5zYWN0aW9uc0NvdW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9pbnRlbmRlZERlYml0VHJhbnNhY3Rpb25zQ291bnQgIT09IHVuZGVmaW5lZCAmJiBfaW50ZW5kZWREZWJpdFRyYW5zYWN0aW9uc0NvdW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5faW50ZW5kZWREZWJpdFRyYW5zYWN0aW9uc0NvdW50LCAnaW50ZW5kZWREZWJpdFRyYW5zYWN0aW9uc0NvdW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9pbnRlbmRlZENyZWRpdEFtb3VudCAhPT0gdW5kZWZpbmVkICYmIF9pbnRlbmRlZENyZWRpdEFtb3VudCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2ludGVuZGVkQ3JlZGl0QW1vdW50LCAnaW50ZW5kZWRDcmVkaXRBbW91bnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2ludGVuZGVkRGViaXRBbW91bnQgIT09IHVuZGVmaW5lZCAmJiBfaW50ZW5kZWREZWJpdEFtb3VudCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2ludGVuZGVkRGViaXRBbW91bnQsICdpbnRlbmRlZERlYml0QW1vdW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcXVlcnlTdHJpbmcgPSBxdWVyeVBhcmFtZXRlcnMudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY2xpZW50LWFwaS92MS9iYXRjaC10ZW1wbGF0ZXMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKF9iYXRjaFRlbXBsYXRlSWQpKX0vc3RhdHVzJHtxdWVyeVN0cmluZyA/IGA/JHtxdWVyeVN0cmluZ31gIDogJyd9YDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHZhbGlkYXRpb24gZXJyb3JzIGJ5IHZhbGlkYXRpbmcgdGhlIGRyYWZ0IHRlbXBsYXRlIGFuZCB0aGUgYXNzb2NpYXRlZCBwYXltZW50cy5cbiAgICAgKiBWYWxpZGF0ZXMgYSBkcmFmdCB0ZW1wbGF0ZSBhbmQgdGhlIGFzc29jaWF0ZWQgcGF5bWVudHMuIE9ubHkgdGhlIGNyZWF0b3Igb2YgdGhlIGRyYWZ0IHRlbXBsYXRlIGNhbiBwZXJmb3JtIHRoZSB2YWxpZGF0aW9ucy4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHZhbGlkYXRlQmF0Y2hUZW1wbGF0ZShyZXF1ZXN0UGFyYW1ldGVyczogVmFsaWRhdGVCYXRjaFRlbXBsYXRlUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxBcnJheTxFcnJvckl0ZW0+PjtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHZhbGlkYXRpb24gZXJyb3JzIGJ5IHZhbGlkYXRpbmcgdGhlIGRyYWZ0IHRlbXBsYXRlIGFuZCB0aGUgYXNzb2NpYXRlZCBwYXltZW50cy5cbiAgICAgKiBWYWxpZGF0ZXMgYSBkcmFmdCB0ZW1wbGF0ZSBhbmQgdGhlIGFzc29jaWF0ZWQgcGF5bWVudHMuIE9ubHkgdGhlIGNyZWF0b3Igb2YgdGhlIGRyYWZ0IHRlbXBsYXRlIGNhbiBwZXJmb3JtIHRoZSB2YWxpZGF0aW9ucy4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHZhbGlkYXRlQmF0Y2hUZW1wbGF0ZShyZXF1ZXN0UGFyYW1ldGVyczogVmFsaWRhdGVCYXRjaFRlbXBsYXRlUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEFycmF5PEVycm9ySXRlbT4+PjtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHZhbGlkYXRpb24gZXJyb3JzIGJ5IHZhbGlkYXRpbmcgdGhlIGRyYWZ0IHRlbXBsYXRlIGFuZCB0aGUgYXNzb2NpYXRlZCBwYXltZW50cy5cbiAgICAgKiBWYWxpZGF0ZXMgYSBkcmFmdCB0ZW1wbGF0ZSBhbmQgdGhlIGFzc29jaWF0ZWQgcGF5bWVudHMuIE9ubHkgdGhlIGNyZWF0b3Igb2YgdGhlIGRyYWZ0IHRlbXBsYXRlIGNhbiBwZXJmb3JtIHRoZSB2YWxpZGF0aW9ucy4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHZhbGlkYXRlQmF0Y2hUZW1wbGF0ZShyZXF1ZXN0UGFyYW1ldGVyczogVmFsaWRhdGVCYXRjaFRlbXBsYXRlUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxBcnJheTxFcnJvckl0ZW0+Pj47XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSB2YWxpZGF0aW9uIGVycm9ycyBieSB2YWxpZGF0aW5nIHRoZSBkcmFmdCB0ZW1wbGF0ZSBhbmQgdGhlIGFzc29jaWF0ZWQgcGF5bWVudHMuXG4gICAgICogVmFsaWRhdGVzIGEgZHJhZnQgdGVtcGxhdGUgYW5kIHRoZSBhc3NvY2lhdGVkIHBheW1lbnRzLiBPbmx5IHRoZSBjcmVhdG9yIG9mIHRoZSBkcmFmdCB0ZW1wbGF0ZSBjYW4gcGVyZm9ybSB0aGUgdmFsaWRhdGlvbnMuIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyB2YWxpZGF0ZUJhdGNoVGVtcGxhdGUocmVxdWVzdFBhcmFtZXRlcnM6IFZhbGlkYXRlQmF0Y2hUZW1wbGF0ZVJlcXVlc3RQYXJhbXMsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IF9iYXRjaFRlbXBsYXRlSWQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVGVtcGxhdGVJZFwiXTtcbiAgICAgICAgaWYgKF9iYXRjaFRlbXBsYXRlSWQgPT09IG51bGwgfHwgX2JhdGNoVGVtcGxhdGVJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBiYXRjaFRlbXBsYXRlSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB2YWxpZGF0ZUJhdGNoVGVtcGxhdGUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgX2ludGVuZGVkQ3JlZGl0VHJhbnNhY3Rpb25zQ291bnQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImludGVuZGVkQ3JlZGl0VHJhbnNhY3Rpb25zQ291bnRcIl07XG4gICAgICAgIGNvbnN0IF9pbnRlbmRlZERlYml0VHJhbnNhY3Rpb25zQ291bnQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImludGVuZGVkRGViaXRUcmFuc2FjdGlvbnNDb3VudFwiXTtcbiAgICAgICAgY29uc3QgX2ludGVuZGVkQ3JlZGl0QW1vdW50ID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJpbnRlbmRlZENyZWRpdEFtb3VudFwiXTtcbiAgICAgICAgY29uc3QgX2ludGVuZGVkRGViaXRBbW91bnQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImludGVuZGVkRGViaXRBbW91bnRcIl07XG5cbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiB0aGlzLmVuY29kZXJ9KTtcbiAgICAgICAgaWYgKF9pbnRlbmRlZENyZWRpdFRyYW5zYWN0aW9uc0NvdW50ICE9PSB1bmRlZmluZWQgJiYgX2ludGVuZGVkQ3JlZGl0VHJhbnNhY3Rpb25zQ291bnQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9pbnRlbmRlZENyZWRpdFRyYW5zYWN0aW9uc0NvdW50LCAnaW50ZW5kZWRDcmVkaXRUcmFuc2FjdGlvbnNDb3VudCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfaW50ZW5kZWREZWJpdFRyYW5zYWN0aW9uc0NvdW50ICE9PSB1bmRlZmluZWQgJiYgX2ludGVuZGVkRGViaXRUcmFuc2FjdGlvbnNDb3VudCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2ludGVuZGVkRGViaXRUcmFuc2FjdGlvbnNDb3VudCwgJ2ludGVuZGVkRGViaXRUcmFuc2FjdGlvbnNDb3VudCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfaW50ZW5kZWRDcmVkaXRBbW91bnQgIT09IHVuZGVmaW5lZCAmJiBfaW50ZW5kZWRDcmVkaXRBbW91bnQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9pbnRlbmRlZENyZWRpdEFtb3VudCwgJ2ludGVuZGVkQ3JlZGl0QW1vdW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9pbnRlbmRlZERlYml0QW1vdW50ICE9PSB1bmRlZmluZWQgJiYgX2ludGVuZGVkRGViaXRBbW91bnQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9pbnRlbmRlZERlYml0QW1vdW50LCAnaW50ZW5kZWREZWJpdEFtb3VudCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxBcnJheTxFcnJvckl0ZW0+PihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjEvYmF0Y2gtdGVtcGxhdGVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhfYmF0Y2hUZW1wbGF0ZUlkKSl9L3ZhbGlkYXRpb24tZXJyb3JzYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIHZhbGlkYXRlQmF0Y2hUZW1wbGF0ZVVybChyZXF1ZXN0UGFyYW1ldGVyczogVmFsaWRhdGVCYXRjaFRlbXBsYXRlUmVxdWVzdFBhcmFtcyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IF9iYXRjaFRlbXBsYXRlSWQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJhdGNoVGVtcGxhdGVJZFwiXTtcbiAgICAgICAgaWYgKF9iYXRjaFRlbXBsYXRlSWQgPT09IG51bGwgfHwgX2JhdGNoVGVtcGxhdGVJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBiYXRjaFRlbXBsYXRlSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB2YWxpZGF0ZUJhdGNoVGVtcGxhdGUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgX2ludGVuZGVkQ3JlZGl0VHJhbnNhY3Rpb25zQ291bnQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImludGVuZGVkQ3JlZGl0VHJhbnNhY3Rpb25zQ291bnRcIl07XG4gICAgICAgIGNvbnN0IF9pbnRlbmRlZERlYml0VHJhbnNhY3Rpb25zQ291bnQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImludGVuZGVkRGViaXRUcmFuc2FjdGlvbnNDb3VudFwiXTtcbiAgICAgICAgY29uc3QgX2ludGVuZGVkQ3JlZGl0QW1vdW50ID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJpbnRlbmRlZENyZWRpdEFtb3VudFwiXTtcbiAgICAgICAgY29uc3QgX2ludGVuZGVkRGViaXRBbW91bnQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImludGVuZGVkRGViaXRBbW91bnRcIl07XG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogdGhpcy5lbmNvZGVyfSk7XG4gICAgICAgIGlmIChfaW50ZW5kZWRDcmVkaXRUcmFuc2FjdGlvbnNDb3VudCAhPT0gdW5kZWZpbmVkICYmIF9pbnRlbmRlZENyZWRpdFRyYW5zYWN0aW9uc0NvdW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5faW50ZW5kZWRDcmVkaXRUcmFuc2FjdGlvbnNDb3VudCwgJ2ludGVuZGVkQ3JlZGl0VHJhbnNhY3Rpb25zQ291bnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2ludGVuZGVkRGViaXRUcmFuc2FjdGlvbnNDb3VudCAhPT0gdW5kZWZpbmVkICYmIF9pbnRlbmRlZERlYml0VHJhbnNhY3Rpb25zQ291bnQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9pbnRlbmRlZERlYml0VHJhbnNhY3Rpb25zQ291bnQsICdpbnRlbmRlZERlYml0VHJhbnNhY3Rpb25zQ291bnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2ludGVuZGVkQ3JlZGl0QW1vdW50ICE9PSB1bmRlZmluZWQgJiYgX2ludGVuZGVkQ3JlZGl0QW1vdW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5faW50ZW5kZWRDcmVkaXRBbW91bnQsICdpbnRlbmRlZENyZWRpdEFtb3VudCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfaW50ZW5kZWREZWJpdEFtb3VudCAhPT0gdW5kZWZpbmVkICYmIF9pbnRlbmRlZERlYml0QW1vdW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5faW50ZW5kZWREZWJpdEFtb3VudCwgJ2ludGVuZGVkRGViaXRBbW91bnQnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBxdWVyeVN0cmluZyA9IHF1ZXJ5UGFyYW1ldGVycy50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YxL2JhdGNoLXRlbXBsYXRlcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2JhdGNoVGVtcGxhdGVJZCkpfS92YWxpZGF0aW9uLWVycm9ycyR7cXVlcnlTdHJpbmcgPyBgPyR7cXVlcnlTdHJpbmd9YCA6ICcnfWA7XG4gICAgfVxuXG59XG4iXX0=