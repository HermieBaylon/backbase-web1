import { ChangeDetectionStrategy, Component } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../messages-client-inbox-journey-config.service";
import * as i2 from "@angular/router";
import * as i3 from "@backbase/messages-conversation-thread-widget-ang";
import * as i4 from "@angular/common";
export class MessagesClientInboxThreadComponent {
    constructor(config, route, router) {
        var _a;
        this.config = config;
        this.route = route;
        this.router = router;
        this.conversationId$$ = new BehaviorSubject('');
        /**
         * Selected conversation id stream
         */
        this.conversationId$ = this.conversationId$$.pipe(distinctUntilChanged());
        this.destroy$$ = new Subject();
        const routeConfig = this.route.snapshot.routeConfig;
        this.mailboxTypeTitle = (_a = routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.data) === null || _a === void 0 ? void 0 : _a.mailboxTypeTitle;
    }
    ngOnInit() {
        this.route.params.pipe(takeUntil(this.destroy$$)).subscribe(({ id }) => {
            this.conversationId$$.next(id || '');
        });
    }
    /**
     * Navigates back
     */
    navigateBack() {
        this.router.navigate([`../`], { relativeTo: this.route });
    }
    ngOnDestroy() {
        this.destroy$$.next();
    }
}
MessagesClientInboxThreadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientInboxThreadComponent, deps: [{ token: i1.MessagesClientInboxJourneyConfigService }, { token: i2.ActivatedRoute }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Component });
MessagesClientInboxThreadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesClientInboxThreadComponent, selector: "bb-messages-client-inbox-thread", ngImport: i0, template: "<bb-messages-conversation-thread-widget-ang\n  [selectedConversationId]=\"conversationId$ | async\"\n  [customerServiceTitle]=\"config.customerServiceTitle\"\n  [replyMessageMaxLength]=\"config.replyMessageMaxLength\"\n  [maxAttachmentSize]=\"config.maxAttachmentSize\"\n  [mailboxTypeTitle]=\"mailboxTypeTitle\"\n  (back)=\"navigateBack()\"\n></bb-messages-conversation-thread-widget-ang>\n", components: [{ type: i3.MessagesConversationThreadWidgetComponent, selector: "bb-messages-conversation-thread-widget-ang", inputs: ["mailboxTypeTitle", "maxAttachmentSize", "replyMessageMaxLength", "customerServiceTitle"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientInboxThreadComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-client-inbox-thread',
                    templateUrl: './messages-client-inbox-thread.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.MessagesClientInboxJourneyConfigService }, { type: i2.ActivatedRoute }, { type: i2.Router }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMtY2xpZW50LWluYm94LXRocmVhZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL21lc3NhZ2VzLWNsaWVudC1pbmJveC1qb3VybmV5L3NyYy9jb21wb25lbnRzL21lc3NhZ2VzLWNsaWVudC1pbmJveC10aHJlYWQvbWVzc2FnZXMtY2xpZW50LWluYm94LXRocmVhZC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL21lc3NhZ2VzLWNsaWVudC1pbmJveC1qb3VybmV5L3NyYy9jb21wb25lbnRzL21lc3NhZ2VzLWNsaWVudC1pbmJveC10aHJlYWQvbWVzc2FnZXMtY2xpZW50LWluYm94LXRocmVhZC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUV0RixPQUFPLEVBQUUsZUFBZSxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM1RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7OztBQVFqRSxNQUFNLE9BQU8sa0NBQWtDO0lBZTdDLFlBQ2tCLE1BQStDLEVBQzlDLEtBQXFCLEVBQ3JCLE1BQWM7O1FBRmYsV0FBTSxHQUFOLE1BQU0sQ0FBeUM7UUFDOUMsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFDckIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQWpCaEIscUJBQWdCLEdBQUcsSUFBSSxlQUFlLENBQVMsRUFBRSxDQUFDLENBQUM7UUFFcEU7O1dBRUc7UUFDSCxvQkFBZSxHQUF1QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQztRQU94RSxjQUFTLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQU8vQyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDcEQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLE1BQUEsV0FBVyxhQUFYLFdBQVcsdUJBQVgsV0FBVyxDQUFFLElBQUksMENBQUUsZ0JBQWdCLENBQUM7SUFDOUQsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFVLEVBQUUsRUFBRTtZQUM3RSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNILFlBQVk7UUFDVixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN4QixDQUFDOztnSUF2Q1Usa0NBQWtDO29IQUFsQyxrQ0FBa0MsdUVDWC9DLHlZQVFBOzRGREdhLGtDQUFrQztrQkFMOUMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsaUNBQWlDO29CQUMzQyxXQUFXLEVBQUUsK0NBQStDO29CQUM1RCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIFBhcmFtcywgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE1lc3NhZ2VzQ2xpZW50SW5ib3hKb3VybmV5Q29uZmlnU2VydmljZSB9IGZyb20gJy4uLy4uL21lc3NhZ2VzLWNsaWVudC1pbmJveC1qb3VybmV5LWNvbmZpZy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItbWVzc2FnZXMtY2xpZW50LWluYm94LXRocmVhZCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9tZXNzYWdlcy1jbGllbnQtaW5ib3gtdGhyZWFkLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VzQ2xpZW50SW5ib3hUaHJlYWRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29udmVyc2F0aW9uSWQkJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8c3RyaW5nPignJyk7XG5cbiAgLyoqXG4gICAqIFNlbGVjdGVkIGNvbnZlcnNhdGlvbiBpZCBzdHJlYW1cbiAgICovXG4gIGNvbnZlcnNhdGlvbklkJDogT2JzZXJ2YWJsZTxzdHJpbmc+ID0gdGhpcy5jb252ZXJzYXRpb25JZCQkLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG5cbiAgLyoqXG4gICAqIE1haWxib3ggdHlwZSB0aXRsZVxuICAgKi9cbiAgbWFpbGJveFR5cGVUaXRsZTogc3RyaW5nO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgZGVzdHJveSQkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29uZmlnOiBNZXNzYWdlc0NsaWVudEluYm94Sm91cm5leUNvbmZpZ1NlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSByb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgcHJpdmF0ZSByZWFkb25seSByb3V0ZXI6IFJvdXRlcixcbiAgKSB7XG4gICAgY29uc3Qgcm91dGVDb25maWcgPSB0aGlzLnJvdXRlLnNuYXBzaG90LnJvdXRlQ29uZmlnO1xuICAgIHRoaXMubWFpbGJveFR5cGVUaXRsZSA9IHJvdXRlQ29uZmlnPy5kYXRhPy5tYWlsYm94VHlwZVRpdGxlO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5yb3V0ZS5wYXJhbXMucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCQpKS5zdWJzY3JpYmUoKHsgaWQgfTogUGFyYW1zKSA9PiB7XG4gICAgICB0aGlzLmNvbnZlcnNhdGlvbklkJCQubmV4dChpZCB8fCAnJyk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTmF2aWdhdGVzIGJhY2tcbiAgICovXG4gIG5hdmlnYXRlQmFjaygpIHtcbiAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbYC4uL2BdLCB7IHJlbGF0aXZlVG86IHRoaXMucm91dGUgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmRlc3Ryb3kkJC5uZXh0KCk7XG4gIH1cbn1cbiIsIjxiYi1tZXNzYWdlcy1jb252ZXJzYXRpb24tdGhyZWFkLXdpZGdldC1hbmdcbiAgW3NlbGVjdGVkQ29udmVyc2F0aW9uSWRdPVwiY29udmVyc2F0aW9uSWQkIHwgYXN5bmNcIlxuICBbY3VzdG9tZXJTZXJ2aWNlVGl0bGVdPVwiY29uZmlnLmN1c3RvbWVyU2VydmljZVRpdGxlXCJcbiAgW3JlcGx5TWVzc2FnZU1heExlbmd0aF09XCJjb25maWcucmVwbHlNZXNzYWdlTWF4TGVuZ3RoXCJcbiAgW21heEF0dGFjaG1lbnRTaXplXT1cImNvbmZpZy5tYXhBdHRhY2htZW50U2l6ZVwiXG4gIFttYWlsYm94VHlwZVRpdGxlXT1cIm1haWxib3hUeXBlVGl0bGVcIlxuICAoYmFjayk9XCJuYXZpZ2F0ZUJhY2soKVwiXG4+PC9iYi1tZXNzYWdlcy1jb252ZXJzYXRpb24tdGhyZWFkLXdpZGdldC1hbmc+XG4iXX0=