import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import '@angular/localize/init';
import * as i0 from "@angular/core";
export const MessagesClientInboxJourneyConfigurationToken = new InjectionToken('MessagesClientInboxJourneyConfiguration injection token');
export const configDefaults = {
    headingTitle: $localize `:Client Inbox Journey - Heading title@@messages-client-inbox-journey.heading-title:Messages`,
    headingType: 'h1',
    headingWrapperClasses: '',
    // eslint-disable-next-line max-len
    buttonText: $localize `:Client Inbox Journey - Compose button text@@messages-client-inbox-journey.compose-button-text:Compose`,
    createMessageOpenEventName: 'bb.event.messages.create.message.open',
    createMessageClosedEventName: 'bb.event.messages.create.message.close',
    itemsPerPage: 10,
    // eslint-disable-next-line max-len
    customerServiceTitle: $localize `:Client Inbox Journey - Customer Service title@@messages-client-inbox-journey.customer-service-title:Customer Service`,
    hideAssignedToColumn: false,
    maxAttachmentSize: '10',
    replyMessageMaxLength: '300',
    maxSubjectLength: 100,
    maxMessageLength: 300,
    // eslint-disable-next-line max-len
    modalHeader: $localize `:Client Inbox Journey - Create new message modal header@@messages-client-inbox-journey.create-new-message-modal-header:New message`,
    hideComposeButton: true,
};
export const MessagesClientInboxJourneyConfigurationProvider = {
    provide: MessagesClientInboxJourneyConfigurationToken,
    useValue: configDefaults,
};
export class MessagesClientInboxJourneyConfigService {
    constructor(staticConfig) {
        this._config = Object.assign(Object.assign({}, configDefaults), staticConfig);
    }
    get headingTitle() {
        return this._config.headingTitle;
    }
    get headingType() {
        return this._config.headingType;
    }
    get headingWrapperClasses() {
        return this._config.headingWrapperClasses;
    }
    get buttonText() {
        return this._config.buttonText;
    }
    get createMessageOpenEventName() {
        return this._config.createMessageOpenEventName;
    }
    get createMessageClosedEventName() {
        return this._config.createMessageClosedEventName;
    }
    get itemsPerPage() {
        return this._config.itemsPerPage;
    }
    get customerServiceTitle() {
        return this._config.customerServiceTitle;
    }
    get hideAssignedToColumn() {
        return this._config.hideAssignedToColumn;
    }
    get maxAttachmentSize() {
        return this._config.maxAttachmentSize;
    }
    get replyMessageMaxLength() {
        return this._config.replyMessageMaxLength;
    }
    get maxSubjectLength() {
        return this._config.maxSubjectLength;
    }
    get maxMessageLength() {
        return this._config.maxMessageLength;
    }
    get modalHeader() {
        return this._config.modalHeader;
    }
    get hideComposeButton() {
        return this._config.hideComposeButton;
    }
}
MessagesClientInboxJourneyConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientInboxJourneyConfigService, deps: [{ token: MessagesClientInboxJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
MessagesClientInboxJourneyConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientInboxJourneyConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientInboxJourneyConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MessagesClientInboxJourneyConfigurationToken]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,