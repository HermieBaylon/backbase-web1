import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Optional, Inject, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import * as i4$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import '@angular/localize/init';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
import * as i2 from '@angular/router';
import { provideRoutes, RouterModule } from '@angular/router';
import * as i3 from '@backbase/messages-create-message-modal-widget-ang';
import { MessagesCreateMessageModalWidgetModule } from '@backbase/messages-create-message-modal-widget-ang';
import * as i4 from '@backbase/messages-ui-ang';
import { MessagesCollectionUiAngModule } from '@backbase/messages-ui-ang';
import * as i1 from '@backbase/foundation-ang/core';
import { TemplateRegistry, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import { BehaviorSubject, Subject } from 'rxjs';
import * as i3$1 from '@backbase/messages-conversations-list-widget-ang';
import { MessagesConversationsListWidgetModule } from '@backbase/messages-conversations-list-widget-ang';
import * as i3$2 from '@backbase/messages-conversation-thread-widget-ang';
import { MessagesConversationThreadWidgetModule } from '@backbase/messages-conversation-thread-widget-ang';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';

const MessagesClientInboxJourneyConfigurationToken = new InjectionToken('MessagesClientInboxJourneyConfiguration injection token');
const configDefaults = {
    headingTitle: $localize `:Client Inbox Journey - Heading title@@messages-client-inbox-journey.heading-title:Messages`,
    headingType: 'h1',
    headingWrapperClasses: '',
    // eslint-disable-next-line max-len
    buttonText: $localize `:Client Inbox Journey - Compose button text@@messages-client-inbox-journey.compose-button-text:Compose`,
    createMessageOpenEventName: 'bb.event.messages.create.message.open',
    createMessageClosedEventName: 'bb.event.messages.create.message.close',
    itemsPerPage: 10,
    // eslint-disable-next-line max-len
    customerServiceTitle: $localize `:Client Inbox Journey - Customer Service title@@messages-client-inbox-journey.customer-service-title:Customer Service`,
    hideAssignedToColumn: false,
    maxAttachmentSize: '10',
    replyMessageMaxLength: '300',
    maxSubjectLength: 100,
    maxMessageLength: 300,
    // eslint-disable-next-line max-len
    modalHeader: $localize `:Client Inbox Journey - Create new message modal header@@messages-client-inbox-journey.create-new-message-modal-header:New message`,
    hideComposeButton: true,
};
const MessagesClientInboxJourneyConfigurationProvider = {
    provide: MessagesClientInboxJourneyConfigurationToken,
    useValue: configDefaults,
};
class MessagesClientInboxJourneyConfigService {
    constructor(staticConfig) {
        this._config = Object.assign(Object.assign({}, configDefaults), staticConfig);
    }
    get headingTitle() {
        return this._config.headingTitle;
    }
    get headingType() {
        return this._config.headingType;
    }
    get headingWrapperClasses() {
        return this._config.headingWrapperClasses;
    }
    get buttonText() {
        return this._config.buttonText;
    }
    get createMessageOpenEventName() {
        return this._config.createMessageOpenEventName;
    }
    get createMessageClosedEventName() {
        return this._config.createMessageClosedEventName;
    }
    get itemsPerPage() {
        return this._config.itemsPerPage;
    }
    get customerServiceTitle() {
        return this._config.customerServiceTitle;
    }
    get hideAssignedToColumn() {
        return this._config.hideAssignedToColumn;
    }
    get maxAttachmentSize() {
        return this._config.maxAttachmentSize;
    }
    get replyMessageMaxLength() {
        return this._config.replyMessageMaxLength;
    }
    get maxSubjectLength() {
        return this._config.maxSubjectLength;
    }
    get maxMessageLength() {
        return this._config.maxMessageLength;
    }
    get modalHeader() {
        return this._config.modalHeader;
    }
    get hideComposeButton() {
        return this._config.hideComposeButton;
    }
}
MessagesClientInboxJourneyConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientInboxJourneyConfigService, deps: [{ token: MessagesClientInboxJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
MessagesClientInboxJourneyConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientInboxJourneyConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientInboxJourneyConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MessagesClientInboxJourneyConfigurationToken]
                }] }]; } });

class MessagesClientInboxJourneyComponent {
    constructor(config, eventBus, route) {
        this.config = config;
        this.eventBus = eventBus;
        this.route = route;
        /**
         * Collection of Tabs to be rendered according to the journey layout and routing.
         */
        this.tabs = [];
        const routeConfig = this.route.snapshot.routeConfig;
        if (routeConfig && routeConfig.children) {
            this.tabs = (routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.children) ? this.initializeTabs(routeConfig) : [];
        }
    }
    initializeTabs({ children = [] }) {
        return children
            .filter(routeItem => routeItem.path && routeItem.data)
            .map((routeItem, index) => {
            var _a;
            return ({
                title: ((_a = routeItem.data) === null || _a === void 0 ? void 0 : _a.title) ||
                    $localize `Default unnamed tab title@@messages-client-inbox-journey.default-tab.title:Tab${index + 1}`,
                route: routeItem.path || `${index + 1}`,
            });
        });
    }
    /**
     * Handler for the header button to open the upload modal
     */
    openComposeModal() {
        this.eventBus.publish(this.config.createMessageOpenEventName, undefined);
    }
}
MessagesClientInboxJourneyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientInboxJourneyComponent, deps: [{ token: MessagesClientInboxJourneyConfigService }, { token: PUBSUB }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
MessagesClientInboxJourneyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesClientInboxJourneyComponent, selector: "bb-messages-client-inbox-journey", ngImport: i0, template: "<bb-messages-create-message-modal-widget-ang\n  [maxAttachmentSize]=\"config.maxAttachmentSize\"\n  [maxSubjectLength]=\"config.maxSubjectLength\"\n  [maxMessageLength]=\"config.maxMessageLength\"\n  [modalHeader]=\"config.modalHeader\"\n  [hideComposeButton]=\"config.hideComposeButton\"\n  [createMessageOpenEventName]=\"config.createMessageOpenEventName\"\n  [createMessageClosedEventName]=\"config.createMessageClosedEventName\"\n>\n</bb-messages-create-message-modal-widget-ang>\n<bb-messages-heading\n  [headingTitle]=\"config.headingTitle\"\n  [headingType]=\"config.headingType\"\n  [headingWrapperClasses]=\"config.headingWrapperClasses\"\n  [buttonText]=\"config.buttonText\"\n  (buttonAction)=\"openComposeModal()\"\n>\n</bb-messages-heading>\n<div class=\"bb-messages bb-messages__tabs-wrapper\">\n  <bb-messages-tabs data-role=\"client-inbox__tabs\" [tabs]=\"tabs\"></bb-messages-tabs>\n</div>\n", components: [{ type: i3.MessagesCreateMessageModalWidgetComponent, selector: "bb-messages-create-message-modal-widget-ang" }, { type: i4.MessagesHeadingComponent, selector: "bb-messages-heading", inputs: ["headingTitle", "headingType", "headingClasses", "headingWrapperClasses", "buttonText", "showButton"], outputs: ["buttonAction"] }, { type: i4.MessagesTabsComponent, selector: "bb-messages-tabs", inputs: ["tabs"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientInboxJourneyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-client-inbox-journey',
                    templateUrl: './messages-client-inbox-journey.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: MessagesClientInboxJourneyConfigService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }, { type: i2.ActivatedRoute }]; } });

class MessagesClientInboxListComponent {
    constructor(config, route, router) {
        var _a;
        this.config = config;
        this.route = route;
        this.router = router;
        this.mailboxType$$ = new BehaviorSubject(undefined);
        /**
         * Mailbox type title
         */
        this.mailboxType$ = this.mailboxType$$.asObservable();
        /**
         * List of shown tabs
         */
        this.tabs = [];
        const routeConfig = this.route.snapshot.routeConfig;
        this.mailboxType$$.next((_a = routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.data) === null || _a === void 0 ? void 0 : _a.mailboxType);
    }
    /**
     * Open conversation thread
     */
    openConversation(id) {
        this.router.navigate(['../conversation', { id }], { relativeTo: this.route });
    }
}
MessagesClientInboxListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientInboxListComponent, deps: [{ token: MessagesClientInboxJourneyConfigService }, { token: i2.ActivatedRoute }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Component });
MessagesClientInboxListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesClientInboxListComponent, selector: "bb-messages-client-inbox-list", ngImport: i0, template: "<bb-messages-conversations-list-widget-ang\n  [mailboxType]=\"mailboxType$ | async\"\n  (conversationId)=\"openConversation($event)\"\n  [itemsPerPage]=\"config.itemsPerPage\"\n  [customerServiceTitle]=\"config.customerServiceTitle\"\n  [createMessageClosedEventName]=\"config.createMessageClosedEventName\"\n>\n</bb-messages-conversations-list-widget-ang>\n", components: [{ type: i3$1.MessagesConversationsListWidgetComponent, selector: "bb-messages-conversations-list-widget-ang", inputs: ["mailboxType", "itemsPerPage", "createMessageClosedEventName", "customerServiceTitle"] }], pipes: { "async": i4$1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientInboxListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-client-inbox-list',
                    templateUrl: './messages-client-inbox-list.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: MessagesClientInboxJourneyConfigService }, { type: i2.ActivatedRoute }, { type: i2.Router }]; } });

class MessagesClientInboxThreadComponent {
    constructor(config, route, router) {
        var _a;
        this.config = config;
        this.route = route;
        this.router = router;
        this.conversationId$$ = new BehaviorSubject('');
        /**
         * Selected conversation id stream
         */
        this.conversationId$ = this.conversationId$$.pipe(distinctUntilChanged());
        this.destroy$$ = new Subject();
        const routeConfig = this.route.snapshot.routeConfig;
        this.mailboxTypeTitle = (_a = routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.data) === null || _a === void 0 ? void 0 : _a.mailboxTypeTitle;
    }
    ngOnInit() {
        this.route.params.pipe(takeUntil(this.destroy$$)).subscribe(({ id }) => {
            this.conversationId$$.next(id || '');
        });
    }
    /**
     * Navigates back
     */
    navigateBack() {
        this.router.navigate([`../`], { relativeTo: this.route });
    }
    ngOnDestroy() {
        this.destroy$$.next();
    }
}
MessagesClientInboxThreadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientInboxThreadComponent, deps: [{ token: MessagesClientInboxJourneyConfigService }, { token: i2.ActivatedRoute }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Component });
MessagesClientInboxThreadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesClientInboxThreadComponent, selector: "bb-messages-client-inbox-thread", ngImport: i0, template: "<bb-messages-conversation-thread-widget-ang\n  [selectedConversationId]=\"conversationId$ | async\"\n  [customerServiceTitle]=\"config.customerServiceTitle\"\n  [replyMessageMaxLength]=\"config.replyMessageMaxLength\"\n  [maxAttachmentSize]=\"config.maxAttachmentSize\"\n  [mailboxTypeTitle]=\"mailboxTypeTitle\"\n  (back)=\"navigateBack()\"\n></bb-messages-conversation-thread-widget-ang>\n", components: [{ type: i3$2.MessagesConversationThreadWidgetComponent, selector: "bb-messages-conversation-thread-widget-ang", inputs: ["mailboxTypeTitle", "maxAttachmentSize", "replyMessageMaxLength", "customerServiceTitle"] }], pipes: { "async": i4$1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientInboxThreadComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-client-inbox-thread',
                    templateUrl: './messages-client-inbox-thread.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: MessagesClientInboxJourneyConfigService }, { type: i2.ActivatedRoute }, { type: i2.Router }]; } });

class MessagesManageConversationsComponent {
}
MessagesManageConversationsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesManageConversationsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
MessagesManageConversationsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesManageConversationsComponent, selector: "bb-messages-manage-conversations-view", ngImport: i0, template: `<router-outlet></router-outlet>`, isInline: true, directives: [{ type: i2.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesManageConversationsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-manage-conversations-view',
                    template: `<router-outlet></router-outlet>`,
                }]
        }] });

const mailboxTypeTitles = {
    inbox: $localize `:Client Inbox Journey - Inbox mailbox type@@messages-client-inbox-journey.inbox.mailbox-type:Inbox`,
    // eslint-disable-next-line max-len
    outbox: $localize `:Client Inbox Journey - Outbox mailbox type@@messages-client-inbox-journey.outbox.mailbox-type:Outbox`,
    // eslint-disable-next-line max-len
    drafts: $localize `:Client Inbox Journey - Drafts mailbox type@@messages-client-inbox-journey.drafts.mailbox-type:Drafts`,
};
const defaultRoute = {
    path: '',
    component: MessagesClientInboxJourneyComponent,
    children: [
        { path: '', redirectTo: 'inbox/list' },
        {
            path: 'inbox',
            data: { title: mailboxTypeTitles.inbox },
            component: MessagesManageConversationsComponent,
            children: [
                { path: '', redirectTo: 'list', pathMatch: 'full' },
                { path: 'list', component: MessagesClientInboxListComponent, data: { mailboxType: 'inbox' } },
                {
                    path: 'conversation',
                    component: MessagesClientInboxThreadComponent,
                    data: { mailboxTypeTitle: mailboxTypeTitles.inbox },
                },
            ],
        },
        {
            path: 'outbox',
            data: { title: mailboxTypeTitles.outbox },
            component: MessagesManageConversationsComponent,
            children: [
                { path: '', redirectTo: 'list', pathMatch: 'full' },
                { path: 'list', component: MessagesClientInboxListComponent, data: { mailboxType: 'outbox' } },
                {
                    path: 'conversation',
                    component: MessagesClientInboxThreadComponent,
                    data: { mailboxTypeTitle: mailboxTypeTitles.outbox },
                },
            ],
        },
        {
            path: 'drafts',
            data: { title: mailboxTypeTitles.drafts },
            component: MessagesManageConversationsComponent,
            children: [
                { path: '', redirectTo: 'list', pathMatch: 'full' },
                { path: 'list', component: MessagesClientInboxListComponent, data: { mailboxType: 'drafts' } },
                {
                    path: 'conversation',
                    component: MessagesClientInboxThreadComponent,
                    data: { mailboxTypeTitle: mailboxTypeTitles.drafts },
                },
            ],
        },
    ],
};

const components = [
    MessagesClientInboxJourneyComponent,
    MessagesClientInboxListComponent,
    MessagesClientInboxThreadComponent,
    MessagesManageConversationsComponent,
];
class MessagesClientInboxJourneyModule {
    static forRoot(data = { routes: defaultRoute }) {
        return {
            ngModule: MessagesClientInboxJourneyModule,
            providers: [provideRoutes([data.routes])],
        };
    }
}
MessagesClientInboxJourneyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientInboxJourneyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MessagesClientInboxJourneyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientInboxJourneyModule, declarations: [MessagesClientInboxJourneyComponent,
        MessagesClientInboxListComponent,
        MessagesClientInboxThreadComponent,
        MessagesManageConversationsComponent], imports: [CommonModule,
        RouterModule,
        MessagesCreateMessageModalWidgetModule,
        MessagesConversationsListWidgetModule,
        MessagesConversationThreadWidgetModule,
        MessagesCollectionUiAngModule, i1.BackbaseCoreModule] });
MessagesClientInboxJourneyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientInboxJourneyModule, providers: [MessagesClientInboxJourneyConfigService, TemplateRegistry], imports: [[
            CommonModule,
            RouterModule,
            MessagesCreateMessageModalWidgetModule,
            MessagesConversationsListWidgetModule,
            MessagesConversationThreadWidgetModule,
            MessagesCollectionUiAngModule,
            BackbaseCoreModule.withConfig({
                classMap: {
                    MessagesClientInboxJourneyComponent,
                },
            }),
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesClientInboxJourneyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components],
                    imports: [
                        CommonModule,
                        RouterModule,
                        MessagesCreateMessageModalWidgetModule,
                        MessagesConversationsListWidgetModule,
                        MessagesConversationThreadWidgetModule,
                        MessagesCollectionUiAngModule,
                        BackbaseCoreModule.withConfig({
                            classMap: {
                                MessagesClientInboxJourneyComponent,
                            },
                        }),
                    ],
                    providers: [MessagesClientInboxJourneyConfigService, TemplateRegistry],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { MessagesClientInboxJourneyComponent, MessagesClientInboxJourneyConfigService, MessagesClientInboxJourneyConfigurationProvider, MessagesClientInboxJourneyConfigurationToken, MessagesClientInboxJourneyModule, MessagesClientInboxListComponent, MessagesClientInboxThreadComponent, MessagesManageConversationsComponent };
//# sourceMappingURL=backbase-messages-client-inbox-journey-ang.js.map
