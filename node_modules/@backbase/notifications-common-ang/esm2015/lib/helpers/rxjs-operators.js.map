{"version":3,"file":"rxjs-operators.js","sourceRoot":"","sources":["../../../../../../libs/notifications-common-ang/src/lib/helpers/rxjs-operators.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAElD,MAAM,UAAU,qBAAqB;IACnC,OAAO,OAAO,CAAC,EAAE,CACf,OAAO,CAAC,IAAI,CACV,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAC3D,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAC9C,CAAC;AACN,CAAC;AAED,MAAM,CAAC,MAAM,eAAe,GAAG,GAAG,EAAE,CAClC,UAAa,MAAqB;IAChC,oEAAoE;IACpE,OAAO,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACrE,CAAC,CAAC","sourcesContent":["import { Observable, OperatorFunction } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\nexport function propertiesListToArray(): OperatorFunction<string, string[]> {\n  return source$ =>\n    source$.pipe(\n      map(properties => properties.replace(/\\s/g, '').split(',')),\n      map(properties => properties.filter(Boolean)),\n    );\n}\n\nexport const shareReplayOnce = () =>\n  function <T>(source: Observable<T>) {\n    // use refCount: true to prevent memory leaks issue with shareReplay\n    return source.pipe(shareReplay({ refCount: true, bufferSize: 1 }));\n  };\n"]}