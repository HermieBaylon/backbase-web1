import { ChangeDetectorRef, Directive, ElementRef, Input } from '@angular/core';
import { isElementContentTruncated } from './../helpers/is-truncated';
import * as i0 from "@angular/core";
export class IsElementContentTruncatedDirective {
    constructor(elementRef, cd) {
        this.elementRef = elementRef;
        this.cd = cd;
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.setIsContentTruncatedInParentComponent();
        });
    }
    setIsContentTruncatedInParentComponent() {
        const isContentTruncated = isElementContentTruncated(this.elementRef.nativeElement);
        this.hostRef.setIsContentTruncated(isContentTruncated);
        this.cd.markForCheck();
    }
}
/** @nocollapse */ IsElementContentTruncatedDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IsElementContentTruncatedDirective, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ IsElementContentTruncatedDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IsElementContentTruncatedDirective, selector: "[bbIsElementContentTruncated]", inputs: { hostRef: "hostRef" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IsElementContentTruncatedDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbIsElementContentTruncated]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { hostRef: [{
                type: Input
            }] } });
//# sourceMappingURL=is-element-content-truncated.directive.js.map