import { Injectable, Optional } from '@angular/core';
import { ItemModel } from '@backbase/foundation-ang/core';
import { BehaviorSubject, defer, of } from 'rxjs';
import { first, publishReplay, refCount } from 'rxjs/operators';
import { getPropertyValue } from '../helpers/item-model-property';
import { propertiesListToArray } from '../helpers/rxjs-operators';
import { modelItemToArray } from '../helpers/type-helpers';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
export const DefaultBaseWidgetProperties = {
    allowedRoutes: [],
    origins: [],
    severityLevels: [],
};
export class BaseWidgetPropertiesService {
    constructor(itemModel) {
        this.itemModel = itemModel;
        this.allowedRoutes$$ = new BehaviorSubject(undefined);
        this.origins$$ = new BehaviorSubject(undefined);
        this.severityLevels$$ = new BehaviorSubject(undefined);
        this.allowedRoutes$ = getPropertyValue(this.allowedRoutes$$, this.allowedRoutes);
        this.origins$ = getPropertyValue(this.origins$$, this.origins);
        this.severityLevels$ = getPropertyValue(this.severityLevels$$, this.severityLevels);
    }
    get allowedRoutes() {
        if (!this.itemModel) {
            return this.defaultModelObservable(DefaultBaseWidgetProperties.allowedRoutes);
        }
        return this.itemModel.property('allowedRoutes', '').pipe(first(), propertiesListToArray());
    }
    get origins() {
        if (!this.itemModel) {
            return this.defaultModelObservable(DefaultBaseWidgetProperties.origins);
        }
        return this.itemModel.property('origins', '').pipe(propertiesListToArray());
    }
    get severityLevels() {
        if (!this.itemModel) {
            return this.defaultModelObservable(DefaultBaseWidgetProperties.severityLevels);
        }
        return this.itemModel.property('severityLevels', '').pipe(propertiesListToArray());
    }
    setAllowedRoutes(value) {
        this.allowedRoutes$$.next(modelItemToArray(value));
    }
    setOrigins(value) {
        this.origins$$.next(modelItemToArray(value));
    }
    setSeverityLevels(value) {
        this.severityLevels$$.next(modelItemToArray(value));
    }
    defaultModelObservable(value) {
        return defer(() => of(value)).pipe(publishReplay(1), refCount());
    }
}
/** @nocollapse */ BaseWidgetPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BaseWidgetPropertiesService, deps: [{ token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ BaseWidgetPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BaseWidgetPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BaseWidgetPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=base-widget-properties.service.js.map