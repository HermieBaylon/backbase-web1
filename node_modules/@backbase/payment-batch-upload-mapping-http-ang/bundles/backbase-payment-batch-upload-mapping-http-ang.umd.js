(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/payment-batch-upload-mapping-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["payment-batch-upload-mapping-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var CreditDebitMixedIndicator = {
        CREDIT: 'CREDIT',
        DEBIT: 'DEBIT',
        MIXED: 'MIXED'
    };

    var SchemeNames = {
        IBAN: 'IBAN',
        BBAN: 'BBAN',
        ID: 'ID',
        EXTERNALID: 'EXTERNAL_ID',
        EMAIL: 'EMAIL',
        MOBILE: 'MOBILE'
    };

    var PAYMENT_BATCH_UPLOAD_MAPPING_BASE_PATH = new i0.InjectionToken('PAYMENT_BATCH_UPLOAD_MAPPING_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var PaymentBatchUploadMappingConfiguration = /** @class */ (function () {
        function PaymentBatchUploadMappingConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        PaymentBatchUploadMappingConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        PaymentBatchUploadMappingConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        PaymentBatchUploadMappingConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        PaymentBatchUploadMappingConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return PaymentBatchUploadMappingConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module PaymentBatchUploadMappingConfiguration');

    var PaymentBatchUploadMappingApiModule = /** @class */ (function () {
        function PaymentBatchUploadMappingApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('PaymentBatchUploadMappingApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        PaymentBatchUploadMappingApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: PaymentBatchUploadMappingApiModule,
                providers: [{ provide: PaymentBatchUploadMappingConfiguration, useFactory: configurationFactory }]
            };
        };
        return PaymentBatchUploadMappingApiModule;
    }());
    PaymentBatchUploadMappingApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentBatchUploadMappingApiModule, deps: [{ token: PaymentBatchUploadMappingApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: PaymentBatchUploadMappingConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PaymentBatchUploadMappingApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentBatchUploadMappingApiModule });
    PaymentBatchUploadMappingApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentBatchUploadMappingApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentBatchUploadMappingApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: PaymentBatchUploadMappingApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: PaymentBatchUploadMappingConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var BatchUploadMappingsService = /** @class */ (function () {
        function BatchUploadMappingsService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new PaymentBatchUploadMappingConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        BatchUploadMappingsService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        BatchUploadMappingsService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        BatchUploadMappingsService.prototype.deleteUploadMapping = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _uploadMappingId = requestParameters["uploadMappingId"];
            if (_uploadMappingId === null || _uploadMappingId === undefined) {
                throw new Error('Required parameter uploadMappingId was null or undefined when calling deleteUploadMapping.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v1/batch-upload-mappings/" + encodeURIComponent(String(_uploadMappingId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchUploadMappingsService.prototype.deleteUploadMappingUrl = function (requestParameters) {
            var _uploadMappingId = requestParameters["uploadMappingId"];
            if (_uploadMappingId === null || _uploadMappingId === undefined) {
                throw new Error('Required parameter uploadMappingId was null or undefined when calling deleteUploadMapping.');
            }
            return this.configuration.basePath + "/client-api/v1/batch-upload-mappings/" + encodeURIComponent(String(_uploadMappingId));
        };
        BatchUploadMappingsService.prototype.getUploadMapping = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _uploadMappingId = requestParameters["uploadMappingId"];
            if (_uploadMappingId === null || _uploadMappingId === undefined) {
                throw new Error('Required parameter uploadMappingId was null or undefined when calling getUploadMapping.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/batch-upload-mappings/" + encodeURIComponent(String(_uploadMappingId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchUploadMappingsService.prototype.getUploadMappingUrl = function (requestParameters) {
            var _uploadMappingId = requestParameters["uploadMappingId"];
            if (_uploadMappingId === null || _uploadMappingId === undefined) {
                throw new Error('Required parameter uploadMappingId was null or undefined when calling getUploadMapping.');
            }
            return this.configuration.basePath + "/client-api/v1/batch-upload-mappings/" + encodeURIComponent(String(_uploadMappingId));
        };
        BatchUploadMappingsService.prototype.getUploadMappings = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _batchType = requestParameters["batchType"];
            var _fieldDelimiter = requestParameters["fieldDelimiter"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_batchType !== undefined && _batchType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _batchType, 'batchType');
            }
            if (_fieldDelimiter !== undefined && _fieldDelimiter !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _fieldDelimiter, 'fieldDelimiter');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/batch-upload-mappings", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchUploadMappingsService.prototype.getUploadMappingsUrl = function (requestParameters) {
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _batchType = requestParameters["batchType"];
            var _fieldDelimiter = requestParameters["fieldDelimiter"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_batchType !== undefined && _batchType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _batchType, 'batchType');
            }
            if (_fieldDelimiter !== undefined && _fieldDelimiter !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _fieldDelimiter, 'fieldDelimiter');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/batch-upload-mappings" + (queryString ? "?" + queryString : '');
        };
        BatchUploadMappingsService.prototype.postUploadMapping = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _uploadMappingPostRequest = requestParameters["uploadMappingPostRequest"];
            if (_uploadMappingPostRequest === null || _uploadMappingPostRequest === undefined) {
                throw new Error('Required parameter uploadMappingPostRequest was null or undefined when calling postUploadMapping.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/batch-upload-mappings", _uploadMappingPostRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchUploadMappingsService.prototype.postUploadMappingUrl = function (requestParameters) {
            var _uploadMappingPostRequest = requestParameters["uploadMappingPostRequest"];
            if (_uploadMappingPostRequest === null || _uploadMappingPostRequest === undefined) {
                throw new Error('Required parameter uploadMappingPostRequest was null or undefined when calling postUploadMapping.');
            }
            return this.configuration.basePath + "/client-api/v1/batch-upload-mappings";
        };
        BatchUploadMappingsService.prototype.putUploadMapping = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _uploadMappingId = requestParameters["uploadMappingId"];
            if (_uploadMappingId === null || _uploadMappingId === undefined) {
                throw new Error('Required parameter uploadMappingId was null or undefined when calling putUploadMapping.');
            }
            var _uploadMappingPutRequest = requestParameters["uploadMappingPutRequest"];
            if (_uploadMappingPutRequest === null || _uploadMappingPutRequest === undefined) {
                throw new Error('Required parameter uploadMappingPutRequest was null or undefined when calling putUploadMapping.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v1/batch-upload-mappings/" + encodeURIComponent(String(_uploadMappingId)), _uploadMappingPutRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchUploadMappingsService.prototype.putUploadMappingUrl = function (requestParameters) {
            var _uploadMappingId = requestParameters["uploadMappingId"];
            if (_uploadMappingId === null || _uploadMappingId === undefined) {
                throw new Error('Required parameter uploadMappingId was null or undefined when calling putUploadMapping.');
            }
            var _uploadMappingPutRequest = requestParameters["uploadMappingPutRequest"];
            if (_uploadMappingPutRequest === null || _uploadMappingPutRequest === undefined) {
                throw new Error('Required parameter uploadMappingPutRequest was null or undefined when calling putUploadMapping.');
            }
            return this.configuration.basePath + "/client-api/v1/batch-upload-mappings/" + encodeURIComponent(String(_uploadMappingId));
        };
        return BatchUploadMappingsService;
    }());
    BatchUploadMappingsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BatchUploadMappingsService, deps: [{ token: i1__namespace.HttpClient }, { token: PAYMENT_BATCH_UPLOAD_MAPPING_BASE_PATH, optional: true }, { token: PaymentBatchUploadMappingConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    BatchUploadMappingsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BatchUploadMappingsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BatchUploadMappingsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [PAYMENT_BATCH_UPLOAD_MAPPING_BASE_PATH]
                        }] }, { type: PaymentBatchUploadMappingConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var BatchUploadMappingsServiceDeleteUploadMappingMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/batch-upload-mappings/{uploadMappingId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchUploadMappingsServiceGetUploadMappingMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/batch-upload-mappings/{uploadMappingId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "647c2ee5-68f5-47ad-a98c-73211887009f",
                        "name": "Default upload mapping",
                        "details": {
                            "fieldDelimiter": ";",
                            "skipFirstRows": 1,
                            "columnMapping": {
                                "counterpartyName": 2,
                                "counterpartyBankBranchCode": 3,
                                "counterpartyAccountNumber": 6,
                                "amount": 5,
                                "accountType": 9,
                                "reference": 8
                            },
                            "valueColumnMappings": [{
                                    "from": "accountType",
                                    "to": "transactionCode",
                                    "valueMapping": {
                                        "SAV": "32",
                                        "CH": "22"
                                    }
                                }],
                            "fixedValueMapping": {
                                "description": "salary"
                            },
                            "version": 0
                        },
                        "header": {
                            "serviceAgreementId": "8a49cb097b538069017b540190140542",
                            "batchType": "ACH_CREDIT_MANUAL",
                            "entryClass": "PPD",
                            "version": 0
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchUploadMappingsServiceGetUploadMappingsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/batch-upload-mappings",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "uploadMappings": [{
                                "name": "Default upload mapping",
                                "details": {
                                    "fieldDelimiter": ";",
                                    "skipFirstRows": 1,
                                    "columnMapping": {
                                        "counterpartyName": 2,
                                        "counterpartyBankBranchCode": 3,
                                        "counterpartyAccountNumber": 6,
                                        "amount": 5,
                                        "accountType": 9,
                                        "reference": 8
                                    },
                                    "valueColumnMappings": [{
                                            "from": "accountType",
                                            "to": "transactionCode",
                                            "valueMapping": {
                                                "SAV": "32",
                                                "CH": "22"
                                            }
                                        }],
                                    "fixedValueMapping": {
                                        "description": "salary"
                                    }
                                },
                                "header": {
                                    "batchType": "ACH_CREDIT_MANUAL",
                                    "entryClass": "PPD"
                                }
                            }],
                        "totalUploadMappings": 1
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchUploadMappingsServicePostUploadMappingMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/batch-upload-mappings",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "647c2ee5-68f5-47ad-a98c-73211887009f",
                        "name": "Default upload mapping",
                        "details": {
                            "fieldDelimiter": ";",
                            "skipFirstRows": 1,
                            "columnMapping": {
                                "counterpartyName": 2,
                                "counterpartyBankBranchCode": 3,
                                "counterpartyAccountNumber": 6,
                                "amount": 5,
                                "accountType": 9,
                                "reference": 8
                            },
                            "valueColumnMappings": [{
                                    "from": "accountType",
                                    "to": "transactionCode",
                                    "valueMapping": {
                                        "SAV": "32",
                                        "CH": "22"
                                    }
                                }],
                            "fixedValueMapping": {
                                "description": "salary"
                            },
                            "version": 0
                        },
                        "header": {
                            "serviceAgreementId": "8a49cb097b538069017b540190140542",
                            "batchType": "ACH_CREDIT_MANUAL",
                            "entryClass": "PPD",
                            "version": 0
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchUploadMappingsServicePutUploadMappingMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/batch-upload-mappings/{uploadMappingId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "647c2ee5-68f5-47ad-a98c-73211887009f",
                        "name": "Default upload mapping",
                        "details": {
                            "fieldDelimiter": ";",
                            "skipFirstRows": 1,
                            "columnMapping": {
                                "counterpartyName": 2,
                                "counterpartyBankBranchCode": 3,
                                "counterpartyAccountNumber": 6,
                                "amount": 5,
                                "accountType": 9,
                                "reference": 8
                            },
                            "valueColumnMappings": [{
                                    "from": "accountType",
                                    "to": "transactionCode",
                                    "valueMapping": {
                                        "SAV": "32",
                                        "CH": "22"
                                    }
                                }],
                            "fixedValueMapping": {
                                "description": "salary"
                            },
                            "version": 0
                        },
                        "header": {
                            "serviceAgreementId": "8a49cb097b538069017b540190140542",
                            "batchType": "ACH_CREDIT_MANUAL",
                            "entryClass": "PPD",
                            "version": 0
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchUploadMappingsServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v1/batch-upload-mappings/{uploadMappingId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/batch-upload-mappings/{uploadMappingId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "647c2ee5-68f5-47ad-a98c-73211887009f",
                        "name": "Default upload mapping",
                        "details": {
                            "fieldDelimiter": ";",
                            "skipFirstRows": 1,
                            "columnMapping": {
                                "counterpartyName": 2,
                                "counterpartyBankBranchCode": 3,
                                "counterpartyAccountNumber": 6,
                                "amount": 5,
                                "accountType": 9,
                                "reference": 8
                            },
                            "valueColumnMappings": [{
                                    "from": "accountType",
                                    "to": "transactionCode",
                                    "valueMapping": {
                                        "SAV": "32",
                                        "CH": "22"
                                    }
                                }],
                            "fixedValueMapping": {
                                "description": "salary"
                            },
                            "version": 0
                        },
                        "header": {
                            "serviceAgreementId": "8a49cb097b538069017b540190140542",
                            "batchType": "ACH_CREDIT_MANUAL",
                            "entryClass": "PPD",
                            "version": 0
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/batch-upload-mappings",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "uploadMappings": [{
                                "name": "Default upload mapping",
                                "details": {
                                    "fieldDelimiter": ";",
                                    "skipFirstRows": 1,
                                    "columnMapping": {
                                        "counterpartyName": 2,
                                        "counterpartyBankBranchCode": 3,
                                        "counterpartyAccountNumber": 6,
                                        "amount": 5,
                                        "accountType": 9,
                                        "reference": 8
                                    },
                                    "valueColumnMappings": [{
                                            "from": "accountType",
                                            "to": "transactionCode",
                                            "valueMapping": {
                                                "SAV": "32",
                                                "CH": "22"
                                            }
                                        }],
                                    "fixedValueMapping": {
                                        "description": "salary"
                                    }
                                },
                                "header": {
                                    "batchType": "ACH_CREDIT_MANUAL",
                                    "entryClass": "PPD"
                                }
                            }],
                        "totalUploadMappings": 1
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/batch-upload-mappings",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "647c2ee5-68f5-47ad-a98c-73211887009f",
                        "name": "Default upload mapping",
                        "details": {
                            "fieldDelimiter": ";",
                            "skipFirstRows": 1,
                            "columnMapping": {
                                "counterpartyName": 2,
                                "counterpartyBankBranchCode": 3,
                                "counterpartyAccountNumber": 6,
                                "amount": 5,
                                "accountType": 9,
                                "reference": 8
                            },
                            "valueColumnMappings": [{
                                    "from": "accountType",
                                    "to": "transactionCode",
                                    "valueMapping": {
                                        "SAV": "32",
                                        "CH": "22"
                                    }
                                }],
                            "fixedValueMapping": {
                                "description": "salary"
                            },
                            "version": 0
                        },
                        "header": {
                            "serviceAgreementId": "8a49cb097b538069017b540190140542",
                            "batchType": "ACH_CREDIT_MANUAL",
                            "entryClass": "PPD",
                            "version": 0
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/batch-upload-mappings/{uploadMappingId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "647c2ee5-68f5-47ad-a98c-73211887009f",
                        "name": "Default upload mapping",
                        "details": {
                            "fieldDelimiter": ";",
                            "skipFirstRows": 1,
                            "columnMapping": {
                                "counterpartyName": 2,
                                "counterpartyBankBranchCode": 3,
                                "counterpartyAccountNumber": 6,
                                "amount": 5,
                                "accountType": 9,
                                "reference": 8
                            },
                            "valueColumnMappings": [{
                                    "from": "accountType",
                                    "to": "transactionCode",
                                    "valueMapping": {
                                        "SAV": "32",
                                        "CH": "22"
                                    }
                                }],
                            "fixedValueMapping": {
                                "description": "salary"
                            },
                            "version": 0
                        },
                        "header": {
                            "serviceAgreementId": "8a49cb097b538069017b540190140542",
                            "batchType": "ACH_CREDIT_MANUAL",
                            "entryClass": "PPD",
                            "version": 0
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    exports.BatchUploadMappingsService = BatchUploadMappingsService;
    exports.BatchUploadMappingsServiceDeleteUploadMappingMocksProvider = BatchUploadMappingsServiceDeleteUploadMappingMocksProvider;
    exports.BatchUploadMappingsServiceGetUploadMappingMocksProvider = BatchUploadMappingsServiceGetUploadMappingMocksProvider;
    exports.BatchUploadMappingsServiceGetUploadMappingsMocksProvider = BatchUploadMappingsServiceGetUploadMappingsMocksProvider;
    exports.BatchUploadMappingsServiceMocksProvider = BatchUploadMappingsServiceMocksProvider;
    exports.BatchUploadMappingsServicePostUploadMappingMocksProvider = BatchUploadMappingsServicePostUploadMappingMocksProvider;
    exports.BatchUploadMappingsServicePutUploadMappingMocksProvider = BatchUploadMappingsServicePutUploadMappingMocksProvider;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.CreditDebitMixedIndicator = CreditDebitMixedIndicator;
    exports.PAYMENT_BATCH_UPLOAD_MAPPING_BASE_PATH = PAYMENT_BATCH_UPLOAD_MAPPING_BASE_PATH;
    exports.PaymentBatchUploadMappingApiModule = PaymentBatchUploadMappingApiModule;
    exports.PaymentBatchUploadMappingConfiguration = PaymentBatchUploadMappingConfiguration;
    exports.SchemeNames = SchemeNames;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-payment-batch-upload-mapping-http-ang.umd.js.map
