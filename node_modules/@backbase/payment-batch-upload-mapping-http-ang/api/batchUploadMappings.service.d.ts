import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { UploadMappingGetResponse } from '../model/models';
import { UploadMappingPostRequest } from '../model/models';
import { UploadMappingPostResponse } from '../model/models';
import { UploadMappingPutRequest } from '../model/models';
import { UploadMappingPutResponse } from '../model/models';
import { UploadMappingsGetResponse } from '../model/models';
import { PaymentBatchUploadMappingConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteUploadMappingRequestParams {
    ["uploadMappingId"]: string;
}
export interface GetUploadMappingRequestParams {
    ["uploadMappingId"]: string;
}
export interface GetUploadMappingsRequestParams {
    ["query"]?: string;
    ["from"]?: number;
    ["size"]?: number;
    ["batchType"]?: string;
    ["fieldDelimiter"]?: string;
}
export interface PostUploadMappingRequestParams {
    ["uploadMappingPostRequest"]: UploadMappingPostRequest;
}
export interface PutUploadMappingRequestParams {
    ["uploadMappingId"]: string;
    ["uploadMappingPutRequest"]: UploadMappingPutRequest;
}
export declare class BatchUploadMappingsService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PaymentBatchUploadMappingConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PaymentBatchUploadMappingConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deleteUploadMapping(requestParameters: DeleteUploadMappingRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteUploadMapping(requestParameters: DeleteUploadMappingRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteUploadMapping(requestParameters: DeleteUploadMappingRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteUploadMappingUrl(requestParameters: DeleteUploadMappingRequestParams): string;
    getUploadMapping(requestParameters: GetUploadMappingRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<UploadMappingGetResponse>;
    getUploadMapping(requestParameters: GetUploadMappingRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<UploadMappingGetResponse>>;
    getUploadMapping(requestParameters: GetUploadMappingRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<UploadMappingGetResponse>>;
    getUploadMappingUrl(requestParameters: GetUploadMappingRequestParams): string;
    getUploadMappings(requestParameters: GetUploadMappingsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<UploadMappingsGetResponse>;
    getUploadMappings(requestParameters: GetUploadMappingsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<UploadMappingsGetResponse>>;
    getUploadMappings(requestParameters: GetUploadMappingsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<UploadMappingsGetResponse>>;
    getUploadMappingsUrl(requestParameters: GetUploadMappingsRequestParams): string;
    postUploadMapping(requestParameters: PostUploadMappingRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<UploadMappingPostResponse>;
    postUploadMapping(requestParameters: PostUploadMappingRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<UploadMappingPostResponse>>;
    postUploadMapping(requestParameters: PostUploadMappingRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<UploadMappingPostResponse>>;
    postUploadMappingUrl(requestParameters: PostUploadMappingRequestParams): string;
    putUploadMapping(requestParameters: PutUploadMappingRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<UploadMappingPutResponse>;
    putUploadMapping(requestParameters: PutUploadMappingRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<UploadMappingPutResponse>>;
    putUploadMapping(requestParameters: PutUploadMappingRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<UploadMappingPutResponse>>;
    putUploadMappingUrl(requestParameters: PutUploadMappingRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<BatchUploadMappingsService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<BatchUploadMappingsService>;
}
