{"version":3,"file":"backbase-payment-batch-upload-mapping-http-ang.js","sources":["../../model/creditDebitMixedIndicator.ts","../../model/schemeNames.ts","../../variables.ts","../../configuration.ts","../../api.module.ts","../../encoder.ts","../../api/batchUploadMappings.service.ts","../../api/batchUploadMappings.service.mocks.ts"],"sourcesContent":["/**\n * Batch Upload Mappings client\n * Manage batch upload mappings.\n *\n * The version of the OpenAPI document: 1.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Batch order(s) can contain only credit records, only debit records or mixed credit and debit records.\n */\nexport type CreditDebitMixedIndicator = 'CREDIT' | 'DEBIT' | 'MIXED';\n\nexport const CreditDebitMixedIndicator = {\n    CREDIT: 'CREDIT' as CreditDebitMixedIndicator,\n    DEBIT: 'DEBIT' as CreditDebitMixedIndicator,\n    MIXED: 'MIXED' as CreditDebitMixedIndicator\n};\n\n","/**\n * Batch Upload Mappings client\n * Manage batch upload mappings.\n *\n * The version of the OpenAPI document: 1.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * This describes the type of the account identifier. ID will mean it refers to an account known within DBS.\n */\nexport type SchemeNames = 'IBAN' | 'BBAN' | 'ID' | 'EXTERNAL_ID' | 'EMAIL' | 'MOBILE';\n\nexport const SchemeNames = {\n    IBAN: 'IBAN' as SchemeNames,\n    BBAN: 'BBAN' as SchemeNames,\n    ID: 'ID' as SchemeNames,\n    EXTERNALID: 'EXTERNAL_ID' as SchemeNames,\n    EMAIL: 'EMAIL' as SchemeNames,\n    MOBILE: 'MOBILE' as SchemeNames\n};\n\n","import { InjectionToken } from '@angular/core';\n\nexport const PAYMENT_BATCH_UPLOAD_MAPPING_BASE_PATH = new InjectionToken<string>('PAYMENT_BATCH_UPLOAD_MAPPING_BASE_PATH');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nimport { InjectionToken } from '@angular/core';\n\nexport interface PaymentBatchUploadMappingConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class PaymentBatchUploadMappingConfiguration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: PaymentBatchUploadMappingConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link PaymentBatchUploadMappingConfiguration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link PaymentBatchUploadMappingConfiguration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n\nexport const CONFIG_TOKEN = new InjectionToken('api-data-module PaymentBatchUploadMappingConfiguration');\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { PaymentBatchUploadMappingConfiguration, CONFIG_TOKEN } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DataModulesManager } from \"@backbase/foundation-ang/data-http\";\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers:    []\n})\nexport class PaymentBatchUploadMappingApiModule {\n    public static forRoot(configurationFactory: () => PaymentBatchUploadMappingConfiguration): ModuleWithProviders<PaymentBatchUploadMappingApiModule> {\n        return {\n            ngModule: PaymentBatchUploadMappingApiModule,\n            providers: [ { provide: PaymentBatchUploadMappingConfiguration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: PaymentBatchUploadMappingApiModule,\n                 @Optional() http: HttpClient,\n                 @Optional() dataModulesManager: DataModulesManager | null,\n                 config: PaymentBatchUploadMappingConfiguration,\n\n        ) {\n        if (parentModule) {\n            throw new Error('PaymentBatchUploadMappingApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","/**\n * Batch Upload Mappings client\n * Manage batch upload mappings.\n *\n * The version of the OpenAPI document: 1.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { BadRequestError } from '../model/models';\nimport { ConflictError } from '../model/models';\nimport { ForbiddenError } from '../model/models';\nimport { NotFoundError } from '../model/models';\nimport { UploadMappingGetResponse } from '../model/models';\nimport { UploadMappingPostRequest } from '../model/models';\nimport { UploadMappingPostResponse } from '../model/models';\nimport { UploadMappingPutRequest } from '../model/models';\nimport { UploadMappingPutResponse } from '../model/models';\nimport { UploadMappingsGetResponse } from '../model/models';\n\nimport { PAYMENT_BATCH_UPLOAD_MAPPING_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { PaymentBatchUploadMappingConfiguration }                                     from '../configuration';\n\n\nexport interface DeleteUploadMappingRequestParams {\n    /** Upload mapping id */\n    [\"uploadMappingId\"]: string;\n}\n\nexport interface GetUploadMappingRequestParams {\n    /** Upload mapping id */\n    [\"uploadMappingId\"]: string;\n}\n\nexport interface GetUploadMappingsRequestParams {\n    /** The search term used to make partial search on upload mapping name. */\n    [\"query\"]?: string;\n    /** The number of the results page to be returned. */\n    [\"from\"]?: number;\n    /** The number of items in the results page. */\n    [\"size\"]?: number;\n    /** Field used for searching batch upload mappings by batch type. */\n    [\"batchType\"]?: string;\n    /** Field used for searching batch upload mappings by field delimiter. */\n    [\"fieldDelimiter\"]?: string;\n}\n\nexport interface PostUploadMappingRequestParams {\n    /** Request for a new batch upload mapping. */\n    [\"uploadMappingPostRequest\"]: UploadMappingPostRequest;\n}\n\nexport interface PutUploadMappingRequestParams {\n    /** Upload mapping id */\n    [\"uploadMappingId\"]: string;\n    /** Request for update a batch upload mapping. */\n    [\"uploadMappingPutRequest\"]: UploadMappingPutRequest;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BatchUploadMappingsService {\n\n    protected basePath = '';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new PaymentBatchUploadMappingConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(PAYMENT_BATCH_UPLOAD_MAPPING_BASE_PATH) basePath: string, @Optional() configuration: PaymentBatchUploadMappingConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Delete a batch upload mapping.\n     * Delete a batch upload mapping with the given id. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUploadMapping(requestParameters: DeleteUploadMappingRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    /**\n     * Delete a batch upload mapping.\n     * Delete a batch upload mapping with the given id. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUploadMapping(requestParameters: DeleteUploadMappingRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    /**\n     * Delete a batch upload mapping.\n     * Delete a batch upload mapping with the given id. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUploadMapping(requestParameters: DeleteUploadMappingRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    /**\n     * Delete a batch upload mapping.\n     * Delete a batch upload mapping with the given id. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUploadMapping(requestParameters: DeleteUploadMappingRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _uploadMappingId = requestParameters[\"uploadMappingId\"];\n        if (_uploadMappingId === null || _uploadMappingId === undefined) {\n            throw new Error('Required parameter uploadMappingId was null or undefined when calling deleteUploadMapping.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/client-api/v1/batch-upload-mappings/${encodeURIComponent(String(_uploadMappingId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public deleteUploadMappingUrl(requestParameters: DeleteUploadMappingRequestParams): string {\n        const _uploadMappingId = requestParameters[\"uploadMappingId\"];\n        if (_uploadMappingId === null || _uploadMappingId === undefined) {\n            throw new Error('Required parameter uploadMappingId was null or undefined when calling deleteUploadMapping.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/batch-upload-mappings/${encodeURIComponent(String(_uploadMappingId))}`;\n    }\n\n    /**\n     * Retrieve a batch upload mapping.\n     * Retrieve a batch upload mapping with the given id. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUploadMapping(requestParameters: GetUploadMappingRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<UploadMappingGetResponse>;\n    /**\n     * Retrieve a batch upload mapping.\n     * Retrieve a batch upload mapping with the given id. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUploadMapping(requestParameters: GetUploadMappingRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<UploadMappingGetResponse>>;\n    /**\n     * Retrieve a batch upload mapping.\n     * Retrieve a batch upload mapping with the given id. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUploadMapping(requestParameters: GetUploadMappingRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<UploadMappingGetResponse>>;\n    /**\n     * Retrieve a batch upload mapping.\n     * Retrieve a batch upload mapping with the given id. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUploadMapping(requestParameters: GetUploadMappingRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _uploadMappingId = requestParameters[\"uploadMappingId\"];\n        if (_uploadMappingId === null || _uploadMappingId === undefined) {\n            throw new Error('Required parameter uploadMappingId was null or undefined when calling getUploadMapping.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<UploadMappingGetResponse>(`${this.configuration.basePath}/client-api/v1/batch-upload-mappings/${encodeURIComponent(String(_uploadMappingId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getUploadMappingUrl(requestParameters: GetUploadMappingRequestParams): string {\n        const _uploadMappingId = requestParameters[\"uploadMappingId\"];\n        if (_uploadMappingId === null || _uploadMappingId === undefined) {\n            throw new Error('Required parameter uploadMappingId was null or undefined when calling getUploadMapping.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/batch-upload-mappings/${encodeURIComponent(String(_uploadMappingId))}`;\n    }\n\n    /**\n     * Retrieve batch upload mappings.\n     * Retrieve batch upload mappings that meet the given criteria. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUploadMappings(requestParameters: GetUploadMappingsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<UploadMappingsGetResponse>;\n    /**\n     * Retrieve batch upload mappings.\n     * Retrieve batch upload mappings that meet the given criteria. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUploadMappings(requestParameters: GetUploadMappingsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<UploadMappingsGetResponse>>;\n    /**\n     * Retrieve batch upload mappings.\n     * Retrieve batch upload mappings that meet the given criteria. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUploadMappings(requestParameters: GetUploadMappingsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<UploadMappingsGetResponse>>;\n    /**\n     * Retrieve batch upload mappings.\n     * Retrieve batch upload mappings that meet the given criteria. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUploadMappings(requestParameters: GetUploadMappingsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _query = requestParameters[\"query\"];\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _batchType = requestParameters[\"batchType\"];\n        const _fieldDelimiter = requestParameters[\"fieldDelimiter\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_query !== undefined && _query !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_query, 'query');\n        }\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        if (_batchType !== undefined && _batchType !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_batchType, 'batchType');\n        }\n        if (_fieldDelimiter !== undefined && _fieldDelimiter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_fieldDelimiter, 'fieldDelimiter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<UploadMappingsGetResponse>(`${this.configuration.basePath}/client-api/v1/batch-upload-mappings`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getUploadMappingsUrl(requestParameters: GetUploadMappingsRequestParams): string {\n        const _query = requestParameters[\"query\"];\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _batchType = requestParameters[\"batchType\"];\n        const _fieldDelimiter = requestParameters[\"fieldDelimiter\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_query !== undefined && _query !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_query, 'query');\n        }\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        if (_batchType !== undefined && _batchType !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_batchType, 'batchType');\n        }\n        if (_fieldDelimiter !== undefined && _fieldDelimiter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_fieldDelimiter, 'fieldDelimiter');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v1/batch-upload-mappings${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Creates a batch upload mapping.\n     * Creates a batch upload mapping from provided data. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postUploadMapping(requestParameters: PostUploadMappingRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<UploadMappingPostResponse>;\n    /**\n     * Creates a batch upload mapping.\n     * Creates a batch upload mapping from provided data. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postUploadMapping(requestParameters: PostUploadMappingRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<UploadMappingPostResponse>>;\n    /**\n     * Creates a batch upload mapping.\n     * Creates a batch upload mapping from provided data. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postUploadMapping(requestParameters: PostUploadMappingRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<UploadMappingPostResponse>>;\n    /**\n     * Creates a batch upload mapping.\n     * Creates a batch upload mapping from provided data. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postUploadMapping(requestParameters: PostUploadMappingRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _uploadMappingPostRequest = requestParameters[\"uploadMappingPostRequest\"];\n        if (_uploadMappingPostRequest === null || _uploadMappingPostRequest === undefined) {\n            throw new Error('Required parameter uploadMappingPostRequest was null or undefined when calling postUploadMapping.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<UploadMappingPostResponse>(`${this.configuration.basePath}/client-api/v1/batch-upload-mappings`,\n            _uploadMappingPostRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postUploadMappingUrl(requestParameters: PostUploadMappingRequestParams): string {\n        const _uploadMappingPostRequest = requestParameters[\"uploadMappingPostRequest\"];\n        if (_uploadMappingPostRequest === null || _uploadMappingPostRequest === undefined) {\n            throw new Error('Required parameter uploadMappingPostRequest was null or undefined when calling postUploadMapping.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/batch-upload-mappings`;\n    }\n\n    /**\n     * Updates a batch upload mapping.\n     * Updates a batch upload mapping with provided data. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putUploadMapping(requestParameters: PutUploadMappingRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<UploadMappingPutResponse>;\n    /**\n     * Updates a batch upload mapping.\n     * Updates a batch upload mapping with provided data. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putUploadMapping(requestParameters: PutUploadMappingRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<UploadMappingPutResponse>>;\n    /**\n     * Updates a batch upload mapping.\n     * Updates a batch upload mapping with provided data. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putUploadMapping(requestParameters: PutUploadMappingRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<UploadMappingPutResponse>>;\n    /**\n     * Updates a batch upload mapping.\n     * Updates a batch upload mapping with provided data. \n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public putUploadMapping(requestParameters: PutUploadMappingRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _uploadMappingId = requestParameters[\"uploadMappingId\"];\n        if (_uploadMappingId === null || _uploadMappingId === undefined) {\n            throw new Error('Required parameter uploadMappingId was null or undefined when calling putUploadMapping.');\n        }\n        const _uploadMappingPutRequest = requestParameters[\"uploadMappingPutRequest\"];\n        if (_uploadMappingPutRequest === null || _uploadMappingPutRequest === undefined) {\n            throw new Error('Required parameter uploadMappingPutRequest was null or undefined when calling putUploadMapping.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<UploadMappingPutResponse>(`${this.configuration.basePath}/client-api/v1/batch-upload-mappings/${encodeURIComponent(String(_uploadMappingId))}`,\n            _uploadMappingPutRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public putUploadMappingUrl(requestParameters: PutUploadMappingRequestParams): string {\n        const _uploadMappingId = requestParameters[\"uploadMappingId\"];\n        if (_uploadMappingId === null || _uploadMappingId === undefined) {\n            throw new Error('Required parameter uploadMappingId was null or undefined when calling putUploadMapping.');\n        }\n        const _uploadMappingPutRequest = requestParameters[\"uploadMappingPutRequest\"];\n        if (_uploadMappingPutRequest === null || _uploadMappingPutRequest === undefined) {\n            throw new Error('Required parameter uploadMappingPutRequest was null or undefined when calling putUploadMapping.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/batch-upload-mappings/${encodeURIComponent(String(_uploadMappingId))}`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /client-api/v1/batch-upload-mappings/{uploadMappingId} URL pattern\n*/\nexport const BatchUploadMappingsServiceDeleteUploadMappingMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/batch-upload-mappings/{uploadMappingId}\",\n        method: \"DELETE\",\n        responses: [\n                {\n                status: 204,\n                body: \"\"\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Resource not found.\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/batch-upload-mappings/{uploadMappingId} URL pattern\n*/\nexport const BatchUploadMappingsServiceGetUploadMappingMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/batch-upload-mappings/{uploadMappingId}\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"647c2ee5-68f5-47ad-a98c-73211887009f\",\n  \"name\" : \"Default upload mapping\",\n  \"details\" : {\n    \"fieldDelimiter\" : \";\",\n    \"skipFirstRows\" : 1,\n    \"columnMapping\" : {\n      \"counterpartyName\" : 2,\n      \"counterpartyBankBranchCode\" : 3,\n      \"counterpartyAccountNumber\" : 6,\n      \"amount\" : 5,\n      \"accountType\" : 9,\n      \"reference\" : 8\n    },\n    \"valueColumnMappings\" : [ {\n      \"from\" : \"accountType\",\n      \"to\" : \"transactionCode\",\n      \"valueMapping\" : {\n        \"SAV\" : \"32\",\n        \"CH\" : \"22\"\n      }\n    } ],\n    \"fixedValueMapping\" : {\n      \"description\" : \"salary\"\n    },\n    \"version\" : 0\n  },\n  \"header\" : {\n    \"serviceAgreementId\" : \"8a49cb097b538069017b540190140542\",\n    \"batchType\" : \"ACH_CREDIT_MANUAL\",\n    \"entryClass\" : \"PPD\",\n    \"version\" : 0\n  }\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Resource not found.\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/batch-upload-mappings URL pattern\n*/\nexport const BatchUploadMappingsServiceGetUploadMappingsMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/batch-upload-mappings\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"uploadMappings\" : [ {\n    \"name\" : \"Default upload mapping\",\n    \"details\" : {\n      \"fieldDelimiter\" : \";\",\n      \"skipFirstRows\" : 1,\n      \"columnMapping\" : {\n        \"counterpartyName\" : 2,\n        \"counterpartyBankBranchCode\" : 3,\n        \"counterpartyAccountNumber\" : 6,\n        \"amount\" : 5,\n        \"accountType\" : 9,\n        \"reference\" : 8\n      },\n      \"valueColumnMappings\" : [ {\n        \"from\" : \"accountType\",\n        \"to\" : \"transactionCode\",\n        \"valueMapping\" : {\n          \"SAV\" : \"32\",\n          \"CH\" : \"22\"\n        }\n      } ],\n      \"fixedValueMapping\" : {\n        \"description\" : \"salary\"\n      }\n    },\n    \"header\" : {\n      \"batchType\" : \"ACH_CREDIT_MANUAL\",\n      \"entryClass\" : \"PPD\"\n    }\n  } ],\n  \"totalUploadMappings\" : 1\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/batch-upload-mappings URL pattern\n*/\nexport const BatchUploadMappingsServicePostUploadMappingMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/batch-upload-mappings\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 201,\n                    body: {\n  \"id\" : \"647c2ee5-68f5-47ad-a98c-73211887009f\",\n  \"name\" : \"Default upload mapping\",\n  \"details\" : {\n    \"fieldDelimiter\" : \";\",\n    \"skipFirstRows\" : 1,\n    \"columnMapping\" : {\n      \"counterpartyName\" : 2,\n      \"counterpartyBankBranchCode\" : 3,\n      \"counterpartyAccountNumber\" : 6,\n      \"amount\" : 5,\n      \"accountType\" : 9,\n      \"reference\" : 8\n    },\n    \"valueColumnMappings\" : [ {\n      \"from\" : \"accountType\",\n      \"to\" : \"transactionCode\",\n      \"valueMapping\" : {\n        \"SAV\" : \"32\",\n        \"CH\" : \"22\"\n      }\n    } ],\n    \"fixedValueMapping\" : {\n      \"description\" : \"salary\"\n    },\n    \"version\" : 0\n  },\n  \"header\" : {\n    \"serviceAgreementId\" : \"8a49cb097b538069017b540190140542\",\n    \"batchType\" : \"ACH_CREDIT_MANUAL\",\n    \"entryClass\" : \"PPD\",\n    \"version\" : 0\n  }\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/batch-upload-mappings/{uploadMappingId} URL pattern\n*/\nexport const BatchUploadMappingsServicePutUploadMappingMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/batch-upload-mappings/{uploadMappingId}\",\n        method: \"PUT\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : \"647c2ee5-68f5-47ad-a98c-73211887009f\",\n  \"name\" : \"Default upload mapping\",\n  \"details\" : {\n    \"fieldDelimiter\" : \";\",\n    \"skipFirstRows\" : 1,\n    \"columnMapping\" : {\n      \"counterpartyName\" : 2,\n      \"counterpartyBankBranchCode\" : 3,\n      \"counterpartyAccountNumber\" : 6,\n      \"amount\" : 5,\n      \"accountType\" : 9,\n      \"reference\" : 8\n    },\n    \"valueColumnMappings\" : [ {\n      \"from\" : \"accountType\",\n      \"to\" : \"transactionCode\",\n      \"valueMapping\" : {\n        \"SAV\" : \"32\",\n        \"CH\" : \"22\"\n      }\n    } ],\n    \"fixedValueMapping\" : {\n      \"description\" : \"salary\"\n    },\n    \"version\" : 0\n  },\n  \"header\" : {\n    \"serviceAgreementId\" : \"8a49cb097b538069017b540190140542\",\n    \"batchType\" : \"ACH_CREDIT_MANUAL\",\n    \"entryClass\" : \"PPD\",\n    \"version\" : 0\n  }\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Resource not found.\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n\nexport const BatchUploadMappingsServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/client-api/v1/batch-upload-mappings/{uploadMappingId}\",\n        method: \"DELETE\",\n        responses: [\n\n        {\n          status: 204,\n          body: \"\"\n        },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Resource not found.\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/batch-upload-mappings/{uploadMappingId}\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : \"647c2ee5-68f5-47ad-a98c-73211887009f\",\n  \"name\" : \"Default upload mapping\",\n  \"details\" : {\n    \"fieldDelimiter\" : \";\",\n    \"skipFirstRows\" : 1,\n    \"columnMapping\" : {\n      \"counterpartyName\" : 2,\n      \"counterpartyBankBranchCode\" : 3,\n      \"counterpartyAccountNumber\" : 6,\n      \"amount\" : 5,\n      \"accountType\" : 9,\n      \"reference\" : 8\n    },\n    \"valueColumnMappings\" : [ {\n      \"from\" : \"accountType\",\n      \"to\" : \"transactionCode\",\n      \"valueMapping\" : {\n        \"SAV\" : \"32\",\n        \"CH\" : \"22\"\n      }\n    } ],\n    \"fixedValueMapping\" : {\n      \"description\" : \"salary\"\n    },\n    \"version\" : 0\n  },\n  \"header\" : {\n    \"serviceAgreementId\" : \"8a49cb097b538069017b540190140542\",\n    \"batchType\" : \"ACH_CREDIT_MANUAL\",\n    \"entryClass\" : \"PPD\",\n    \"version\" : 0\n  }\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Resource not found.\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/batch-upload-mappings\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"uploadMappings\" : [ {\n    \"name\" : \"Default upload mapping\",\n    \"details\" : {\n      \"fieldDelimiter\" : \";\",\n      \"skipFirstRows\" : 1,\n      \"columnMapping\" : {\n        \"counterpartyName\" : 2,\n        \"counterpartyBankBranchCode\" : 3,\n        \"counterpartyAccountNumber\" : 6,\n        \"amount\" : 5,\n        \"accountType\" : 9,\n        \"reference\" : 8\n      },\n      \"valueColumnMappings\" : [ {\n        \"from\" : \"accountType\",\n        \"to\" : \"transactionCode\",\n        \"valueMapping\" : {\n          \"SAV\" : \"32\",\n          \"CH\" : \"22\"\n        }\n      } ],\n      \"fixedValueMapping\" : {\n        \"description\" : \"salary\"\n      }\n    },\n    \"header\" : {\n      \"batchType\" : \"ACH_CREDIT_MANUAL\",\n      \"entryClass\" : \"PPD\"\n    }\n  } ],\n  \"totalUploadMappings\" : 1\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/batch-upload-mappings\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 201,\n                body: {\n  \"id\" : \"647c2ee5-68f5-47ad-a98c-73211887009f\",\n  \"name\" : \"Default upload mapping\",\n  \"details\" : {\n    \"fieldDelimiter\" : \";\",\n    \"skipFirstRows\" : 1,\n    \"columnMapping\" : {\n      \"counterpartyName\" : 2,\n      \"counterpartyBankBranchCode\" : 3,\n      \"counterpartyAccountNumber\" : 6,\n      \"amount\" : 5,\n      \"accountType\" : 9,\n      \"reference\" : 8\n    },\n    \"valueColumnMappings\" : [ {\n      \"from\" : \"accountType\",\n      \"to\" : \"transactionCode\",\n      \"valueMapping\" : {\n        \"SAV\" : \"32\",\n        \"CH\" : \"22\"\n      }\n    } ],\n    \"fixedValueMapping\" : {\n      \"description\" : \"salary\"\n    },\n    \"version\" : 0\n  },\n  \"header\" : {\n    \"serviceAgreementId\" : \"8a49cb097b538069017b540190140542\",\n    \"batchType\" : \"ACH_CREDIT_MANUAL\",\n    \"entryClass\" : \"PPD\",\n    \"version\" : 0\n  }\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/batch-upload-mappings/{uploadMappingId}\",\n        method: \"PUT\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : \"647c2ee5-68f5-47ad-a98c-73211887009f\",\n  \"name\" : \"Default upload mapping\",\n  \"details\" : {\n    \"fieldDelimiter\" : \";\",\n    \"skipFirstRows\" : 1,\n    \"columnMapping\" : {\n      \"counterpartyName\" : 2,\n      \"counterpartyBankBranchCode\" : 3,\n      \"counterpartyAccountNumber\" : 6,\n      \"amount\" : 5,\n      \"accountType\" : 9,\n      \"reference\" : 8\n    },\n    \"valueColumnMappings\" : [ {\n      \"from\" : \"accountType\",\n      \"to\" : \"transactionCode\",\n      \"valueMapping\" : {\n        \"SAV\" : \"32\",\n        \"CH\" : \"22\"\n      }\n    } ],\n    \"fixedValueMapping\" : {\n      \"description\" : \"salary\"\n    },\n    \"version\" : 0\n  },\n  \"header\" : {\n    \"serviceAgreementId\" : \"8a49cb097b538069017b540190140542\",\n    \"batchType\" : \"ACH_CREDIT_MANUAL\",\n    \"entryClass\" : \"PPD\",\n    \"version\" : 0\n  }\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Resource not found.\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"key\" : \"GENERAL_ERROR\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n    ]\n},\n]\n);\n\n\n"],"names":[],"mappings":"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"}