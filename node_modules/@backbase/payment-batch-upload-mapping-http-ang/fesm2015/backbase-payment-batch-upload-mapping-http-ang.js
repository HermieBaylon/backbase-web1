import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const CreditDebitMixedIndicator = {
    CREDIT: 'CREDIT',
    DEBIT: 'DEBIT',
    MIXED: 'MIXED'
};

const SchemeNames = {
    IBAN: 'IBAN',
    BBAN: 'BBAN',
    ID: 'ID',
    EXTERNALID: 'EXTERNAL_ID',
    EMAIL: 'EMAIL',
    MOBILE: 'MOBILE'
};

const PAYMENT_BATCH_UPLOAD_MAPPING_BASE_PATH = new InjectionToken('PAYMENT_BATCH_UPLOAD_MAPPING_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class PaymentBatchUploadMappingConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module PaymentBatchUploadMappingConfiguration');

class PaymentBatchUploadMappingApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('PaymentBatchUploadMappingApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: PaymentBatchUploadMappingApiModule,
            providers: [{ provide: PaymentBatchUploadMappingConfiguration, useFactory: configurationFactory }]
        };
    }
}
PaymentBatchUploadMappingApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentBatchUploadMappingApiModule, deps: [{ token: PaymentBatchUploadMappingApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: PaymentBatchUploadMappingConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
PaymentBatchUploadMappingApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentBatchUploadMappingApiModule });
PaymentBatchUploadMappingApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentBatchUploadMappingApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentBatchUploadMappingApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: PaymentBatchUploadMappingApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: PaymentBatchUploadMappingConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class BatchUploadMappingsService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PaymentBatchUploadMappingConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteUploadMapping(requestParameters, observe = 'body', reportProgress = false, options) {
        const _uploadMappingId = requestParameters["uploadMappingId"];
        if (_uploadMappingId === null || _uploadMappingId === undefined) {
            throw new Error('Required parameter uploadMappingId was null or undefined when calling deleteUploadMapping.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v1/batch-upload-mappings/${encodeURIComponent(String(_uploadMappingId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteUploadMappingUrl(requestParameters) {
        const _uploadMappingId = requestParameters["uploadMappingId"];
        if (_uploadMappingId === null || _uploadMappingId === undefined) {
            throw new Error('Required parameter uploadMappingId was null or undefined when calling deleteUploadMapping.');
        }
        return `${this.configuration.basePath}/client-api/v1/batch-upload-mappings/${encodeURIComponent(String(_uploadMappingId))}`;
    }
    getUploadMapping(requestParameters, observe = 'body', reportProgress = false, options) {
        const _uploadMappingId = requestParameters["uploadMappingId"];
        if (_uploadMappingId === null || _uploadMappingId === undefined) {
            throw new Error('Required parameter uploadMappingId was null or undefined when calling getUploadMapping.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/batch-upload-mappings/${encodeURIComponent(String(_uploadMappingId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUploadMappingUrl(requestParameters) {
        const _uploadMappingId = requestParameters["uploadMappingId"];
        if (_uploadMappingId === null || _uploadMappingId === undefined) {
            throw new Error('Required parameter uploadMappingId was null or undefined when calling getUploadMapping.');
        }
        return `${this.configuration.basePath}/client-api/v1/batch-upload-mappings/${encodeURIComponent(String(_uploadMappingId))}`;
    }
    getUploadMappings(requestParameters, observe = 'body', reportProgress = false, options) {
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _batchType = requestParameters["batchType"];
        const _fieldDelimiter = requestParameters["fieldDelimiter"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_batchType !== undefined && _batchType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _batchType, 'batchType');
        }
        if (_fieldDelimiter !== undefined && _fieldDelimiter !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fieldDelimiter, 'fieldDelimiter');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/batch-upload-mappings`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUploadMappingsUrl(requestParameters) {
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _batchType = requestParameters["batchType"];
        const _fieldDelimiter = requestParameters["fieldDelimiter"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_batchType !== undefined && _batchType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _batchType, 'batchType');
        }
        if (_fieldDelimiter !== undefined && _fieldDelimiter !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fieldDelimiter, 'fieldDelimiter');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/batch-upload-mappings${queryString ? `?${queryString}` : ''}`;
    }
    postUploadMapping(requestParameters, observe = 'body', reportProgress = false, options) {
        const _uploadMappingPostRequest = requestParameters["uploadMappingPostRequest"];
        if (_uploadMappingPostRequest === null || _uploadMappingPostRequest === undefined) {
            throw new Error('Required parameter uploadMappingPostRequest was null or undefined when calling postUploadMapping.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/batch-upload-mappings`, _uploadMappingPostRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postUploadMappingUrl(requestParameters) {
        const _uploadMappingPostRequest = requestParameters["uploadMappingPostRequest"];
        if (_uploadMappingPostRequest === null || _uploadMappingPostRequest === undefined) {
            throw new Error('Required parameter uploadMappingPostRequest was null or undefined when calling postUploadMapping.');
        }
        return `${this.configuration.basePath}/client-api/v1/batch-upload-mappings`;
    }
    putUploadMapping(requestParameters, observe = 'body', reportProgress = false, options) {
        const _uploadMappingId = requestParameters["uploadMappingId"];
        if (_uploadMappingId === null || _uploadMappingId === undefined) {
            throw new Error('Required parameter uploadMappingId was null or undefined when calling putUploadMapping.');
        }
        const _uploadMappingPutRequest = requestParameters["uploadMappingPutRequest"];
        if (_uploadMappingPutRequest === null || _uploadMappingPutRequest === undefined) {
            throw new Error('Required parameter uploadMappingPutRequest was null or undefined when calling putUploadMapping.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/batch-upload-mappings/${encodeURIComponent(String(_uploadMappingId))}`, _uploadMappingPutRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putUploadMappingUrl(requestParameters) {
        const _uploadMappingId = requestParameters["uploadMappingId"];
        if (_uploadMappingId === null || _uploadMappingId === undefined) {
            throw new Error('Required parameter uploadMappingId was null or undefined when calling putUploadMapping.');
        }
        const _uploadMappingPutRequest = requestParameters["uploadMappingPutRequest"];
        if (_uploadMappingPutRequest === null || _uploadMappingPutRequest === undefined) {
            throw new Error('Required parameter uploadMappingPutRequest was null or undefined when calling putUploadMapping.');
        }
        return `${this.configuration.basePath}/client-api/v1/batch-upload-mappings/${encodeURIComponent(String(_uploadMappingId))}`;
    }
}
BatchUploadMappingsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BatchUploadMappingsService, deps: [{ token: i1.HttpClient }, { token: PAYMENT_BATCH_UPLOAD_MAPPING_BASE_PATH, optional: true }, { token: PaymentBatchUploadMappingConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BatchUploadMappingsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BatchUploadMappingsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BatchUploadMappingsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PAYMENT_BATCH_UPLOAD_MAPPING_BASE_PATH]
                }] }, { type: PaymentBatchUploadMappingConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const BatchUploadMappingsServiceDeleteUploadMappingMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-upload-mappings/{uploadMappingId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchUploadMappingsServiceGetUploadMappingMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-upload-mappings/{uploadMappingId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "647c2ee5-68f5-47ad-a98c-73211887009f",
                    "name": "Default upload mapping",
                    "details": {
                        "fieldDelimiter": ";",
                        "skipFirstRows": 1,
                        "columnMapping": {
                            "counterpartyName": 2,
                            "counterpartyBankBranchCode": 3,
                            "counterpartyAccountNumber": 6,
                            "amount": 5,
                            "accountType": 9,
                            "reference": 8
                        },
                        "valueColumnMappings": [{
                                "from": "accountType",
                                "to": "transactionCode",
                                "valueMapping": {
                                    "SAV": "32",
                                    "CH": "22"
                                }
                            }],
                        "fixedValueMapping": {
                            "description": "salary"
                        },
                        "version": 0
                    },
                    "header": {
                        "serviceAgreementId": "8a49cb097b538069017b540190140542",
                        "batchType": "ACH_CREDIT_MANUAL",
                        "entryClass": "PPD",
                        "version": 0
                    }
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchUploadMappingsServiceGetUploadMappingsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-upload-mappings",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "uploadMappings": [{
                            "name": "Default upload mapping",
                            "details": {
                                "fieldDelimiter": ";",
                                "skipFirstRows": 1,
                                "columnMapping": {
                                    "counterpartyName": 2,
                                    "counterpartyBankBranchCode": 3,
                                    "counterpartyAccountNumber": 6,
                                    "amount": 5,
                                    "accountType": 9,
                                    "reference": 8
                                },
                                "valueColumnMappings": [{
                                        "from": "accountType",
                                        "to": "transactionCode",
                                        "valueMapping": {
                                            "SAV": "32",
                                            "CH": "22"
                                        }
                                    }],
                                "fixedValueMapping": {
                                    "description": "salary"
                                }
                            },
                            "header": {
                                "batchType": "ACH_CREDIT_MANUAL",
                                "entryClass": "PPD"
                            }
                        }],
                    "totalUploadMappings": 1
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchUploadMappingsServicePostUploadMappingMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-upload-mappings",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "647c2ee5-68f5-47ad-a98c-73211887009f",
                    "name": "Default upload mapping",
                    "details": {
                        "fieldDelimiter": ";",
                        "skipFirstRows": 1,
                        "columnMapping": {
                            "counterpartyName": 2,
                            "counterpartyBankBranchCode": 3,
                            "counterpartyAccountNumber": 6,
                            "amount": 5,
                            "accountType": 9,
                            "reference": 8
                        },
                        "valueColumnMappings": [{
                                "from": "accountType",
                                "to": "transactionCode",
                                "valueMapping": {
                                    "SAV": "32",
                                    "CH": "22"
                                }
                            }],
                        "fixedValueMapping": {
                            "description": "salary"
                        },
                        "version": 0
                    },
                    "header": {
                        "serviceAgreementId": "8a49cb097b538069017b540190140542",
                        "batchType": "ACH_CREDIT_MANUAL",
                        "entryClass": "PPD",
                        "version": 0
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchUploadMappingsServicePutUploadMappingMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-upload-mappings/{uploadMappingId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "647c2ee5-68f5-47ad-a98c-73211887009f",
                    "name": "Default upload mapping",
                    "details": {
                        "fieldDelimiter": ";",
                        "skipFirstRows": 1,
                        "columnMapping": {
                            "counterpartyName": 2,
                            "counterpartyBankBranchCode": 3,
                            "counterpartyAccountNumber": 6,
                            "amount": 5,
                            "accountType": 9,
                            "reference": 8
                        },
                        "valueColumnMappings": [{
                                "from": "accountType",
                                "to": "transactionCode",
                                "valueMapping": {
                                    "SAV": "32",
                                    "CH": "22"
                                }
                            }],
                        "fixedValueMapping": {
                            "description": "salary"
                        },
                        "version": 0
                    },
                    "header": {
                        "serviceAgreementId": "8a49cb097b538069017b540190140542",
                        "batchType": "ACH_CREDIT_MANUAL",
                        "entryClass": "PPD",
                        "version": 0
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchUploadMappingsServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/batch-upload-mappings/{uploadMappingId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-upload-mappings/{uploadMappingId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "647c2ee5-68f5-47ad-a98c-73211887009f",
                    "name": "Default upload mapping",
                    "details": {
                        "fieldDelimiter": ";",
                        "skipFirstRows": 1,
                        "columnMapping": {
                            "counterpartyName": 2,
                            "counterpartyBankBranchCode": 3,
                            "counterpartyAccountNumber": 6,
                            "amount": 5,
                            "accountType": 9,
                            "reference": 8
                        },
                        "valueColumnMappings": [{
                                "from": "accountType",
                                "to": "transactionCode",
                                "valueMapping": {
                                    "SAV": "32",
                                    "CH": "22"
                                }
                            }],
                        "fixedValueMapping": {
                            "description": "salary"
                        },
                        "version": 0
                    },
                    "header": {
                        "serviceAgreementId": "8a49cb097b538069017b540190140542",
                        "batchType": "ACH_CREDIT_MANUAL",
                        "entryClass": "PPD",
                        "version": 0
                    }
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-upload-mappings",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "uploadMappings": [{
                            "name": "Default upload mapping",
                            "details": {
                                "fieldDelimiter": ";",
                                "skipFirstRows": 1,
                                "columnMapping": {
                                    "counterpartyName": 2,
                                    "counterpartyBankBranchCode": 3,
                                    "counterpartyAccountNumber": 6,
                                    "amount": 5,
                                    "accountType": 9,
                                    "reference": 8
                                },
                                "valueColumnMappings": [{
                                        "from": "accountType",
                                        "to": "transactionCode",
                                        "valueMapping": {
                                            "SAV": "32",
                                            "CH": "22"
                                        }
                                    }],
                                "fixedValueMapping": {
                                    "description": "salary"
                                }
                            },
                            "header": {
                                "batchType": "ACH_CREDIT_MANUAL",
                                "entryClass": "PPD"
                            }
                        }],
                    "totalUploadMappings": 1
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-upload-mappings",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "647c2ee5-68f5-47ad-a98c-73211887009f",
                    "name": "Default upload mapping",
                    "details": {
                        "fieldDelimiter": ";",
                        "skipFirstRows": 1,
                        "columnMapping": {
                            "counterpartyName": 2,
                            "counterpartyBankBranchCode": 3,
                            "counterpartyAccountNumber": 6,
                            "amount": 5,
                            "accountType": 9,
                            "reference": 8
                        },
                        "valueColumnMappings": [{
                                "from": "accountType",
                                "to": "transactionCode",
                                "valueMapping": {
                                    "SAV": "32",
                                    "CH": "22"
                                }
                            }],
                        "fixedValueMapping": {
                            "description": "salary"
                        },
                        "version": 0
                    },
                    "header": {
                        "serviceAgreementId": "8a49cb097b538069017b540190140542",
                        "batchType": "ACH_CREDIT_MANUAL",
                        "entryClass": "PPD",
                        "version": 0
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-upload-mappings/{uploadMappingId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "647c2ee5-68f5-47ad-a98c-73211887009f",
                    "name": "Default upload mapping",
                    "details": {
                        "fieldDelimiter": ";",
                        "skipFirstRows": 1,
                        "columnMapping": {
                            "counterpartyName": 2,
                            "counterpartyBankBranchCode": 3,
                            "counterpartyAccountNumber": 6,
                            "amount": 5,
                            "accountType": 9,
                            "reference": 8
                        },
                        "valueColumnMappings": [{
                                "from": "accountType",
                                "to": "transactionCode",
                                "valueMapping": {
                                    "SAV": "32",
                                    "CH": "22"
                                }
                            }],
                        "fixedValueMapping": {
                            "description": "salary"
                        },
                        "version": 0
                    },
                    "header": {
                        "serviceAgreementId": "8a49cb097b538069017b540190140542",
                        "batchType": "ACH_CREDIT_MANUAL",
                        "entryClass": "PPD",
                        "version": 0
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    },
]);

export { BatchUploadMappingsService, BatchUploadMappingsServiceDeleteUploadMappingMocksProvider, BatchUploadMappingsServiceGetUploadMappingMocksProvider, BatchUploadMappingsServiceGetUploadMappingsMocksProvider, BatchUploadMappingsServiceMocksProvider, BatchUploadMappingsServicePostUploadMappingMocksProvider, BatchUploadMappingsServicePutUploadMappingMocksProvider, COLLECTION_FORMATS, CONFIG_TOKEN, CreditDebitMixedIndicator, PAYMENT_BATCH_UPLOAD_MAPPING_BASE_PATH, PaymentBatchUploadMappingApiModule, PaymentBatchUploadMappingConfiguration, SchemeNames };
//# sourceMappingURL=backbase-payment-batch-upload-mapping-http-ang.js.map
