import { createMocks } from '@backbase/foundation-ang/data-http';
export const BatchUploadMappingsServiceDeleteUploadMappingMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-upload-mappings/{uploadMappingId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const BatchUploadMappingsServiceGetUploadMappingMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-upload-mappings/{uploadMappingId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "647c2ee5-68f5-47ad-a98c-73211887009f",
                    "name": "Default upload mapping",
                    "details": {
                        "fieldDelimiter": ";",
                        "skipFirstRows": 1,
                        "columnMapping": {
                            "counterpartyName": 2,
                            "counterpartyBankBranchCode": 3,
                            "counterpartyAccountNumber": 6,
                            "amount": 5,
                            "accountType": 9,
                            "reference": 8
                        },
                        "valueColumnMappings": [{
                                "from": "accountType",
                                "to": "transactionCode",
                                "valueMapping": {
                                    "SAV": "32",
                                    "CH": "22"
                                }
                            }],
                        "fixedValueMapping": {
                            "description": "salary"
                        },
                        "version": 0
                    },
                    "header": {
                        "serviceAgreementId": "8a49cb097b538069017b540190140542",
                        "batchType": "ACH_CREDIT_MANUAL",
                        "entryClass": "PPD",
                        "version": 0
                    }
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const BatchUploadMappingsServiceGetUploadMappingsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-upload-mappings",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "uploadMappings": [{
                            "name": "Default upload mapping",
                            "details": {
                                "fieldDelimiter": ";",
                                "skipFirstRows": 1,
                                "columnMapping": {
                                    "counterpartyName": 2,
                                    "counterpartyBankBranchCode": 3,
                                    "counterpartyAccountNumber": 6,
                                    "amount": 5,
                                    "accountType": 9,
                                    "reference": 8
                                },
                                "valueColumnMappings": [{
                                        "from": "accountType",
                                        "to": "transactionCode",
                                        "valueMapping": {
                                            "SAV": "32",
                                            "CH": "22"
                                        }
                                    }],
                                "fixedValueMapping": {
                                    "description": "salary"
                                }
                            },
                            "header": {
                                "batchType": "ACH_CREDIT_MANUAL",
                                "entryClass": "PPD"
                            }
                        }],
                    "totalUploadMappings": 1
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
export const BatchUploadMappingsServicePostUploadMappingMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-upload-mappings",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "647c2ee5-68f5-47ad-a98c-73211887009f",
                    "name": "Default upload mapping",
                    "details": {
                        "fieldDelimiter": ";",
                        "skipFirstRows": 1,
                        "columnMapping": {
                            "counterpartyName": 2,
                            "counterpartyBankBranchCode": 3,
                            "counterpartyAccountNumber": 6,
                            "amount": 5,
                            "accountType": 9,
                            "reference": 8
                        },
                        "valueColumnMappings": [{
                                "from": "accountType",
                                "to": "transactionCode",
                                "valueMapping": {
                                    "SAV": "32",
                                    "CH": "22"
                                }
                            }],
                        "fixedValueMapping": {
                            "description": "salary"
                        },
                        "version": 0
                    },
                    "header": {
                        "serviceAgreementId": "8a49cb097b538069017b540190140542",
                        "batchType": "ACH_CREDIT_MANUAL",
                        "entryClass": "PPD",
                        "version": 0
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
export const BatchUploadMappingsServicePutUploadMappingMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-upload-mappings/{uploadMappingId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "647c2ee5-68f5-47ad-a98c-73211887009f",
                    "name": "Default upload mapping",
                    "details": {
                        "fieldDelimiter": ";",
                        "skipFirstRows": 1,
                        "columnMapping": {
                            "counterpartyName": 2,
                            "counterpartyBankBranchCode": 3,
                            "counterpartyAccountNumber": 6,
                            "amount": 5,
                            "accountType": 9,
                            "reference": 8
                        },
                        "valueColumnMappings": [{
                                "from": "accountType",
                                "to": "transactionCode",
                                "valueMapping": {
                                    "SAV": "32",
                                    "CH": "22"
                                }
                            }],
                        "fixedValueMapping": {
                            "description": "salary"
                        },
                        "version": 0
                    },
                    "header": {
                        "serviceAgreementId": "8a49cb097b538069017b540190140542",
                        "batchType": "ACH_CREDIT_MANUAL",
                        "entryClass": "PPD",
                        "version": 0
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    }]);
export const BatchUploadMappingsServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/batch-upload-mappings/{uploadMappingId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-upload-mappings/{uploadMappingId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "647c2ee5-68f5-47ad-a98c-73211887009f",
                    "name": "Default upload mapping",
                    "details": {
                        "fieldDelimiter": ";",
                        "skipFirstRows": 1,
                        "columnMapping": {
                            "counterpartyName": 2,
                            "counterpartyBankBranchCode": 3,
                            "counterpartyAccountNumber": 6,
                            "amount": 5,
                            "accountType": 9,
                            "reference": 8
                        },
                        "valueColumnMappings": [{
                                "from": "accountType",
                                "to": "transactionCode",
                                "valueMapping": {
                                    "SAV": "32",
                                    "CH": "22"
                                }
                            }],
                        "fixedValueMapping": {
                            "description": "salary"
                        },
                        "version": 0
                    },
                    "header": {
                        "serviceAgreementId": "8a49cb097b538069017b540190140542",
                        "batchType": "ACH_CREDIT_MANUAL",
                        "entryClass": "PPD",
                        "version": 0
                    }
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-upload-mappings",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "uploadMappings": [{
                            "name": "Default upload mapping",
                            "details": {
                                "fieldDelimiter": ";",
                                "skipFirstRows": 1,
                                "columnMapping": {
                                    "counterpartyName": 2,
                                    "counterpartyBankBranchCode": 3,
                                    "counterpartyAccountNumber": 6,
                                    "amount": 5,
                                    "accountType": 9,
                                    "reference": 8
                                },
                                "valueColumnMappings": [{
                                        "from": "accountType",
                                        "to": "transactionCode",
                                        "valueMapping": {
                                            "SAV": "32",
                                            "CH": "22"
                                        }
                                    }],
                                "fixedValueMapping": {
                                    "description": "salary"
                                }
                            },
                            "header": {
                                "batchType": "ACH_CREDIT_MANUAL",
                                "entryClass": "PPD"
                            }
                        }],
                    "totalUploadMappings": 1
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-upload-mappings",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "647c2ee5-68f5-47ad-a98c-73211887009f",
                    "name": "Default upload mapping",
                    "details": {
                        "fieldDelimiter": ";",
                        "skipFirstRows": 1,
                        "columnMapping": {
                            "counterpartyName": 2,
                            "counterpartyBankBranchCode": 3,
                            "counterpartyAccountNumber": 6,
                            "amount": 5,
                            "accountType": 9,
                            "reference": 8
                        },
                        "valueColumnMappings": [{
                                "from": "accountType",
                                "to": "transactionCode",
                                "valueMapping": {
                                    "SAV": "32",
                                    "CH": "22"
                                }
                            }],
                        "fixedValueMapping": {
                            "description": "salary"
                        },
                        "version": 0
                    },
                    "header": {
                        "serviceAgreementId": "8a49cb097b538069017b540190140542",
                        "batchType": "ACH_CREDIT_MANUAL",
                        "entryClass": "PPD",
                        "version": 0
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-upload-mappings/{uploadMappingId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "647c2ee5-68f5-47ad-a98c-73211887009f",
                    "name": "Default upload mapping",
                    "details": {
                        "fieldDelimiter": ";",
                        "skipFirstRows": 1,
                        "columnMapping": {
                            "counterpartyName": 2,
                            "counterpartyBankBranchCode": 3,
                            "counterpartyAccountNumber": 6,
                            "amount": 5,
                            "accountType": 9,
                            "reference": 8
                        },
                        "valueColumnMappings": [{
                                "from": "accountType",
                                "to": "transactionCode",
                                "valueMapping": {
                                    "SAV": "32",
                                    "CH": "22"
                                }
                            }],
                        "fixedValueMapping": {
                            "description": "salary"
                        },
                        "version": 0
                    },
                    "header": {
                        "serviceAgreementId": "8a49cb097b538069017b540190140542",
                        "batchType": "ACH_CREDIT_MANUAL",
                        "entryClass": "PPD",
                        "version": 0
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    },
]);
//# sourceMappingURL=data:application/json;base64,