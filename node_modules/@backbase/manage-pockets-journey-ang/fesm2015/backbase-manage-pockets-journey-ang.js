import * as i0 from '@angular/core';
import { EventEmitter, Directive, Input, Output, Component, HostListener, Injectable, Pipe, NgModule, InjectionToken, Optional, Inject } from '@angular/core';
import { __rest } from 'tslib';
import * as i1 from '@backbase/foundation-ang/core';
import { BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i2 from '@backbase/ui-ang/dropdown-menu';
import { DropdownMenuModule } from '@backbase/ui-ang/dropdown-menu';
import * as i3 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i4 from '@backbase/ui-ang/progressbar';
import { ProgressbarModule } from '@backbase/ui-ang/progressbar';
import * as i1$1 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i6 from '@angular/common';
import { CommonModule, TitleCasePipe } from '@angular/common';
import * as i7 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i4$3 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import { BehaviorSubject, of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import * as i1$2 from '@backbase/data-ang/pocket-tailor';
import * as i2$1 from '@backbase/data-ang/arrangements';
import * as i3$1 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import * as i1$4 from '@backbase/ui-ang/stepper';
import { StepperModule } from '@backbase/ui-ang/stepper';
import * as i1$3 from '@angular/forms';
import { Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';
import * as i3$2 from '@backbase/ui-ang/input-text';
import { InputTextModule } from '@backbase/ui-ang/input-text';
import * as i4$1 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i6$1 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i2$2 from '@backbase/ui-ang/amount-input';
import { AmountInputModule } from '@backbase/ui-ang/amount-input';
import * as i4$2 from '@backbase/ui-ang/input-datepicker';
import { InputDatepickerModule } from '@backbase/ui-ang/input-datepicker';
import * as i3$3 from '@angular/router';
import { provideRoutes, RouterModule } from '@angular/router';
import '@angular/localize/init';
import * as i5 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i7$1 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i2$3 from '@backbase/ui-ang/account-selector';
import { AccountSelectorModule } from '@backbase/ui-ang/account-selector';
import * as i3$4 from '@backbase/ui-ang/notification';
import * as i1$5 from '@backbase/data-ang/payment-order';

class ManagePocketsBaseWrapperComponent {
    constructor() {
        this.cancel = new EventEmitter();
        this.currentStep = 1;
        this.showDialog = false;
    }
    confirmAbort() {
        this.cancel.emit();
        this.showDialog = false;
    }
    showAbortDialog() {
        this.showDialog = true;
    }
    closeAbortDialog() {
        this.showDialog = false;
    }
    goBack() {
        this.goToStep(this.currentStep - 1);
    }
    goToStep(value) {
        this.currentStep = value;
    }
}
ManagePocketsBaseWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsBaseWrapperComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive });
ManagePocketsBaseWrapperComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsBaseWrapperComponent, inputs: { journeyCurrency: "journeyCurrency" }, outputs: { cancel: "cancel" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsBaseWrapperComponent, decorators: [{
            type: Directive
        }], propDecorators: { journeyCurrency: [{
                type: Input
            }], cancel: [{
                type: Output
            }] } });

function pocketFormatDate(date = new Date()) {
    date.setMinutes(date.getMinutes() - date.getTimezoneOffset());
    return date.toISOString().slice(0, 10);
}

var TransferTypeEnum;
(function (TransferTypeEnum) {
    TransferTypeEnum["ADD"] = "ADD";
    TransferTypeEnum["WITHDRAW"] = "WITHDRAW";
})(TransferTypeEnum || (TransferTypeEnum = {}));
var PocketNamespace;
(function (PocketNamespace) {
    function buildNewPocketPostRequest(pocketItem) {
        const { name = '', icon = '', goal = {} } = pocketItem, others = __rest(pocketItem, ["name", "icon", "goal"]);
        return {
            pocketPostRequest: Object.assign({ name,
                icon, goal: formatGoal(goal) }, others),
        };
    }
    PocketNamespace.buildNewPocketPostRequest = buildNewPocketPostRequest;
    function formatGoal(pocketGoal) {
        var _a, _b;
        const amount = ((_a = pocketGoal === null || pocketGoal === void 0 ? void 0 : pocketGoal.amountCurrency) === null || _a === void 0 ? void 0 : _a.amount) || undefined;
        const currencyCode = ((_b = pocketGoal === null || pocketGoal === void 0 ? void 0 : pocketGoal.amountCurrency) === null || _b === void 0 ? void 0 : _b.currencyCode) || undefined;
        const deadline = (pocketGoal === null || pocketGoal === void 0 ? void 0 : pocketGoal.deadline) ? pocketFormatDate(new Date(pocketGoal.deadline)) : undefined;
        const amountCurrency = amount && currencyCode ? { amount, currencyCode } : undefined;
        return Object.assign(Object.assign({}, (!!deadline ? { deadline } : {})), (!!amountCurrency ? { amountCurrency } : {}));
    }
})(PocketNamespace || (PocketNamespace = {}));

class ManagePocketsCardComponent {
    constructor(assetsService) {
        this.assetsService = assetsService;
        this.pocketTransfer = new EventEmitter();
        this.dropdownMenuOptions = [
            {
                label: $localize `:Add Money dropdown option@@managePockets.common.card.dropdown.addMoney.label:Add Money`,
                value: TransferTypeEnum.ADD,
            },
            {
                label: $localize `:Withdraw Money dropdown option@@managePockets.common.card.dropdown.withdrawMoney.label:Withdraw Money`,
                value: TransferTypeEnum.WITHDRAW,
            },
        ];
        this.dropdownMenuOptionsLabel = this.dropdownMenuOptions.map((item) => item.label);
        this.resolveAsset = this.assetsService.createAssetsResolver({
            widgetName: 'bb-manage-pockets-journey-ang',
            getURIFromAssetID: (assetId) => assetId,
        });
    }
    ngOnInit() {
        this.pocketImage = this.resolveAsset(`${this.pocket.icon}-img.webp`);
    }
    onButtonDropdownSelect(label) {
        const item = this.dropdownMenuOptions.find((option) => option.label === label);
        if (item && this.pocket) {
            this.pocketTransfer.emit({
                pocket: this.pocket,
                transferType: item.value,
            });
        }
    }
}
ManagePocketsCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsCardComponent, deps: [{ token: i1.AssetsService }], target: i0.ɵɵFactoryTarget.Component });
ManagePocketsCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsCardComponent, selector: "bb-manage-pockets-card", inputs: { pocket: "pocket" }, outputs: { pocketTransfer: "pocketTransfer" }, ngImport: i0, template: "<div class=\"bb-card bb-card--lg\">\n  <div class=\"bb-card__body\">\n    <div class=\"bb-stack bb-stack--wrap\">\n      <div class=\"bb-stack__item bb-stack__item--spacing-lg bb-manage-pockets-common-pocket-card__pocket-image-container\">\n        <img \n          [src]=\"pocketImage | async\" \n          alt=\"Representation of the selected pocket type\" \n          i18n-alt=\"Pocket image|changes according to the type of pocket@@managePockets.common.card.pocketImage\" \n          class=\"bb-manage-pockets-common-pocket-card__pocket-image\"\n        >\n      </div>\n      <div class=\"bb-stack__break bb-stack__break--sm-down\"></div>\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <div class=\"bb-block bb-block--md\">\n          <div class=\"bb-stack\">\n            <div class=\"bb-stack__item\">\n              <h2 class=\"bb-block bb-block--no-margin\">\n                {{pocket?.name}}\n              </h2>\n            </div>\n            <div class=\"bb-stack__item bb-stack__item--push-right\">\n              <bb-dropdown-menu-ui\n                icon=\"ellipsis-h\"\n                btnColor=\"link-dark\"\n                [btnCircle]=\"true\"\n                container=\"body\"\n                [options]=\"dropdownMenuOptionsLabel\"\n                (select)=\"onButtonDropdownSelect($event)\"\n              ></bb-dropdown-menu-ui>\n            </div>\n          </div>\n        </div>\n        <div class=\"bb-block bb-block--sm bb-subtitle bb-text-support\">\n          <span i18n=\"Available Balance|Current stored balance in pocket@@managePockets.common.card.availableBalance\">\n            Available Balance\n          </span\n          ><span *ngIf=\"!!pocket?.goal?.amountCurrency?.amount\" i18n=\"Pocket Goal|Expected amount to reach to complete pocket@@managePockets.common.card.goalAmount\">\n            / Goal Amount\n          </span>\n        </div>\n        <div class=\"bb-block\" [ngClass]=\"{ 'bb-block--xl': pocket?.goal?.progress != undefined }\">\n          <span class=\"bb-heading-2\">\n            <bb-amount-ui\n              [amount]=\"pocket?.balance?.amount\"\n              [currency]=\"pocket?.balance?.currencyCode\"\n            ></bb-amount-ui>\n          </span>\n          <span class=\"bb-manage-pockets-common-pocket-card__goal-amount bb-heading-3 bb-text-support\" *ngIf=\"!!pocket?.goal?.amountCurrency?.amount\">\n            /\n            <bb-amount-ui\n              [amount]=\"pocket?.goal?.amountCurrency?.amount\"\n              [currency]=\"pocket?.goal?.amountCurrency?.currencyCode\"\n              [decimalPlaces]=\"0\"\n            ></bb-amount-ui>\n          </span>\n        </div>\n        <ng-container *ngIf=\"!!pocket?.goal\">\n          <div class=\"bb-block bb-block--sm\" *ngIf=\"!!pocket?.goal?.progress || pocket?.goal?.progress == 0\">\n            <bb-progressbar-ui\n              [type]=\"pocket?.goal?.progress != '100' ? 'primary' : 'success'\"\n              height=\"8px\"\n              [value]=\"pocket?.goal?.progress\"\n            >\n            </bb-progressbar-ui>\n          </div>\n          <div class=\"bb-block\">\n            <div class=\"bb-stack\">\n              <div class=\"bb-stack__item\" *ngIf=\"!!pocket?.goal?.progress || pocket?.goal?.progress == 0\">\n                <div [ngClass]=\"pocket?.goal?.progress != 100 ? 'bb-text-primary' : 'bb-text-success'\">\n                  <span class=\"bb-manage-pockets-common-pocket-card__goal-percentage\">\n                    <bb-amount-ui\n                      [amount]=\"pocket?.goal?.progress\"\n                      [showPercent]=\"true\"\n                      [trailingZeroes]=\"false\"\n                    ></bb-amount-ui>\n                    <span i18n=\"Completed|Percentage of the goal currently completed@@managePockets.common.card.amountCompleted\">\n                      Completed\n                    </span>\n                  </span>\n                  <bb-icon-ui\n                    *ngIf=\"pocket?.goal?.progress == '100'\"\n                    name=\"check\"\n                    [inverse]=\"true\"\n                    size=\"sm\"\n                  ></bb-icon-ui>\n                </div>\n              </div>\n              <div class=\"bb-stack__item bb-stack__item--push-right bb-text-support\" *ngIf=\"!!pocket?.goal?.deadline\">\n                <bb-icon-ui\n                  name=\"calendar-today\"\n                  [inverse]=\"true\"\n                  size=\"sm\"\n                ></bb-icon-ui>\n                <span class=\"bb-manage-pockets-common-pocket-card__deadline-date\">\n                  {{pocket?.goal?.deadline | date}}\n                </span>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n</div>", components: [{ type: i2.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i3.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i4.ProgressbarComponent, selector: "bb-progressbar-ui", inputs: ["height", "max", "showValue", "striped", "animated", "type", "value"] }, { type: i1$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i6.AsyncPipe, "date": i6.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-card',
                    templateUrl: './manage-pockets-card.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.AssetsService }]; }, propDecorators: { pocket: [{
                type: Input
            }], pocketTransfer: [{
                type: Output
            }] } });

class AccessibilityKeyboardDirective {
    constructor(element) {
        this.element = element;
        element.nativeElement.tabIndex = 0;
    }
    // eslint-disable-next-line
    eventListener(event) {
        this.element.nativeElement.click(event);
    }
}
AccessibilityKeyboardDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessibilityKeyboardDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
AccessibilityKeyboardDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: AccessibilityKeyboardDirective, selector: "[bbAccessibilityKeyboard]", host: { listeners: { "keydown.enter": "eventListener($event)", "keydown.space": "eventListener($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessibilityKeyboardDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccessibilityKeyboard]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { eventListener: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }] } });

/**
 * Utility service for DOM manipulations
 */
class DomAttributesService {
    constructor() {
        this.basePrefix = 'bb_manage_pockets';
        this.idCounter = 0;
    }
    nextId(prefix) {
        return `${this.basePrefix}-${!!prefix ? prefix : 'default'}-${Date.now()}-${this.idCounter++}`;
    }
}
DomAttributesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DomAttributesService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DomAttributesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DomAttributesService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DomAttributesService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

/**
 * Dynamic id generator
 * Intended use is to improve accesibility by relating inputs to other label or error messages
 *
 * <label [for]="labelInput.id"> Label </label>
 * <input bbDynamicId #labelInput />
 */
class DynamicIdDirective {
    constructor(_elRef, _renderer, domAttributesService, cd) {
        this._elRef = _elRef;
        this._renderer = _renderer;
        this.domAttributesService = domAttributesService;
        this.cd = cd;
    }
    ngOnInit() {
        setTimeout(() => {
            this._renderer.setAttribute(this._elRef.nativeElement, 'id', this.domAttributesService.nextId(this.bbDynamicId));
            this.cd.markForCheck();
        });
    }
}
DynamicIdDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DynamicIdDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: DomAttributesService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
DynamicIdDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DynamicIdDirective, selector: "[bbDynamicId]", inputs: { bbDynamicId: "bbDynamicId" }, exportAs: ["bbDynamicId"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DynamicIdDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbDynamicId]',
                    exportAs: 'bbDynamicId',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: DomAttributesService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { bbDynamicId: [{
                type: Input
            }] } });

class RegexReplacePipe {
    transform(value, regexValue, replaceValue) {
        let regex = new RegExp(regexValue, 'g');
        return value.replace(regex, replaceValue);
    }
}
RegexReplacePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RegexReplacePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
RegexReplacePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RegexReplacePipe, name: "bbRegexReplace" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RegexReplacePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'bbRegexReplace',
                }]
        }] });

var AccountsNamespace;
(function (AccountsNamespace) {
    function formatHttpresponse(accountList) {
        const formattedItem = accountList.map((account) => ({
            id: account.id,
            name: account.name || '',
            balance: account.availableBalance,
            number: account.number,
            currency: account.currency,
            favorite: account.favorite,
            bankBranchCode: account.bankBranchCode,
        }));
        return formattedItem;
    }
    AccountsNamespace.formatHttpresponse = formatHttpresponse;
})(AccountsNamespace || (AccountsNamespace = {}));

class ManagePocketsService {
    constructor(pocketTailorService, productSummaryDataService) {
        this.pocketTailorService = pocketTailorService;
        this.productSummaryDataService = productSummaryDataService;
        this.pocketListApiError = new BehaviorSubject(false);
        this.pocketListApiError$ = this.pocketListApiError.asObservable();
        this.handleApiError = () => {
            this.pocketListApiError.next(true);
            return of({ pockets: [] });
        };
    }
    retrievePocketList() {
        this.pocketListApiError.next(false);
        return this.pocketTailorService.listPockets().pipe(catchError(this.handleApiError));
    }
    postPocket(newPocketItem) {
        const payload = PocketNamespace.buildNewPocketPostRequest(newPocketItem);
        return this.pocketTailorService.postPocket(payload);
    }
    retrieveAccountList() {
        const RESOURCE_NAME = 'Payments';
        const PRIVILEGE = 'create';
        const FROM_PAGES = 0;
        const PAGE_SIZE = 50;
        const BUSINESS_FUNCTION = 'A2A Transfer';
        const productSummaryParameters = {
            businessFunction: BUSINESS_FUNCTION,
            resourceName: RESOURCE_NAME,
            privilege: PRIVILEGE,
            from: FROM_PAGES,
            size: PAGE_SIZE,
        };
        return this.productSummaryDataService
            .getArrangementsByBusinessFunction(productSummaryParameters)
            .pipe(map(AccountsNamespace.formatHttpresponse));
    }
}
ManagePocketsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsService, deps: [{ token: i1$2.PocketTailorClientHttpService }, { token: i2$1.ProductSummaryHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
ManagePocketsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$2.PocketTailorClientHttpService }, { type: i2$1.ProductSummaryHttpService }]; } });

const modules$3 = [AmountModule, ButtonModule, DropdownMenuModule, EmptyStateModule, IconModule, ProgressbarModule];
const components$3 = [AccessibilityKeyboardDirective, DynamicIdDirective, ManagePocketsCardComponent, RegexReplacePipe];
class ManagePocketsCommonModule {
}
ManagePocketsCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ManagePocketsCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsCommonModule, declarations: [AccessibilityKeyboardDirective, DynamicIdDirective, ManagePocketsCardComponent, RegexReplacePipe], imports: [CommonModule, AmountModule, ButtonModule, DropdownMenuModule, EmptyStateModule, IconModule, ProgressbarModule], exports: [AccessibilityKeyboardDirective, DynamicIdDirective, ManagePocketsCardComponent, RegexReplacePipe, AmountModule, ButtonModule, DropdownMenuModule, EmptyStateModule, IconModule, ProgressbarModule] });
ManagePocketsCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsCommonModule, providers: [ManagePocketsService, DomAttributesService], imports: [[CommonModule, ...modules$3], AmountModule, ButtonModule, DropdownMenuModule, EmptyStateModule, IconModule, ProgressbarModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsCommonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...modules$3],
                    providers: [ManagePocketsService, DomAttributesService],
                    declarations: [...components$3],
                    exports: [...components$3, ...modules$3],
                }]
        }] });

const POCKET_LOCALIZATIONS = {
    transfers: {
        details: {
            addMoneyContinueButton: $localize `:Review Transfer@@managePockets.transfers.details.button.continue.add:Review Transfer`,
            addMoneyError: $localize `:Your account balance is insufficient@@managePockets.transfers.details.amount.error.add.max:Your account balance is insufficient`,
            addMoneyHeader: $localize `:From Account@@managePockets.transfers.details.heading.addMoney:From Account`,
            withdrawMoneyContinueButton: $localize `:Review Withdrawal@@managePockets.transfers.details.button.continue.withdraw:Review Withdrawal`,
            withdrawMoneyError: $localize `:Your pocket balance is insufficient@@managePockets.transfers.details.amount.error.withdraw.max:Your pocket balance is insufficient`,
            withdrawMoneyHeader: $localize `:To Account@@managePockets.transfers.details.heading.withdrawMoney:To Account`,
        },
        review: {
            addMoneyHeader: $localize `:Review Your Transfer@@managePockets.transfers.review.header.add:Review Your Transfer`,
            withdrawMoneyHeader: $localize `:Review Your Withdrawal@@managePockets.transfers.review.header.withdraw:Review Your Withdrawal`,
        },
        wrapper: {
            addMoneyModalBody: $localize `:All transfer information will be permanently lost.@@managePockets.transfers.wrapper.modal.body.add:All transfer information will be permanently lost.`,
            addMoneyModalConfirm: $localize `:Discard Transfer@@managePockets.transfers.wrapper.modal.button.confirm.add:Discard Transfer`,
            addMoneyModalHeader: $localize `:Discard Transfer?@@managePockets.transfers.wrapper.modal.header.add:Discard Transfer?`,
            withdrawMoneyModalBody: $localize `:All withdrawal information will be permanently lost.@@managePockets.transfers.wrapper.modal.body.withdraw:All withdrawal information will be permanently lost.`,
            withdrawMoneyModalConfirm: $localize `:Discard Withdrawal@@managePockets.transfers.wrapper.modal.button.confirm.withdraw:Discard Withdrawal`,
            withdrawMoneyModalHeader: $localize `:Discard Withdrawal?@@managePockets.transfers.wrapper.modal.header.withdraw:Discard Withdrawal?`,
        },
    },
    views: {
        transfers: {
            addMoneyHeader: $localize `:Add Money@@managePockets.transfersView.heading.add:Add Money`,
            withdrawMoneyHeader: $localize `:Withdraw Money@@managePockets.transfersView.heading.withdraw:Withdraw Money`,
        },
    },
};

// eslint-disable-next-line
class ManagePocketsBaseStep {
    constructor() {
        this.back = new EventEmitter();
        this.cancel = new EventEmitter();
        this.pocketLocalizations = POCKET_LOCALIZATIONS;
        this.transferTypesEnum = TransferTypeEnum;
    }
    goBack() {
        this.back.emit();
    }
    abort() {
        this.cancel.emit();
    }
    isFieldValid(form, fieldName) {
        const controlField = form === null || form === void 0 ? void 0 : form.get(fieldName || '');
        return !!(controlField === null || controlField === void 0 ? void 0 : controlField.valid) || !!(controlField === null || controlField === void 0 ? void 0 : controlField.untouched);
    }
    getFieldErrors(form, field) {
        var _a;
        return (_a = form === null || form === void 0 ? void 0 : form.get(field || '')) === null || _a === void 0 ? void 0 : _a.errors;
    }
}
ManagePocketsBaseStep.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsBaseStep, deps: [], target: i0.ɵɵFactoryTarget.Directive });
ManagePocketsBaseStep.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsBaseStep, inputs: { journeyCurrency: "journeyCurrency", partialNewPayment: "partialNewPayment" }, outputs: { back: "back", cancel: "cancel" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsBaseStep, decorators: [{
            type: Directive
        }], propDecorators: { back: [{
                type: Output
            }], cancel: [{
                type: Output
            }], journeyCurrency: [{
                type: Input
            }], partialNewPayment: [{
                type: Input
            }] } });

// eslint-disable-next-line
class ManagePocketsCreateBaseStep extends ManagePocketsBaseStep {
    constructor() {
        super();
        this.next = new EventEmitter();
    }
    goNext(newPocket) {
        this.next.emit(newPocket);
    }
}
ManagePocketsCreateBaseStep.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsCreateBaseStep, deps: [], target: i0.ɵɵFactoryTarget.Directive });
ManagePocketsCreateBaseStep.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsCreateBaseStep, inputs: { partialPocket: "partialPocket" }, outputs: { next: "next" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsCreateBaseStep, decorators: [{
            type: Directive
        }], ctorParameters: function () { return []; }, propDecorators: { next: [{
                type: Output
            }], partialPocket: [{
                type: Input
            }] } });

class ManagePocketsConfirmationComponent extends ManagePocketsCreateBaseStep {
    constructor(assetsService) {
        super();
        this.assetsService = assetsService;
        this.newPocket = new EventEmitter();
        this.resolveAsset = this.assetsService.createAssetsResolver({
            widgetName: 'bb-manage-pockets-journey-ang',
            getURIFromAssetID: (assetId) => assetId,
        });
    }
    ngOnInit() {
        var _a;
        this.selectedImageAssetUrl = this.resolveAsset(`${(_a = this.partialPocket) === null || _a === void 0 ? void 0 : _a.icon}-img.webp`);
    }
    saveNewPocket() {
        this.newPocket.emit(this.partialPocket);
    }
}
ManagePocketsConfirmationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsConfirmationComponent, deps: [{ token: i1.AssetsService }], target: i0.ɵɵFactoryTarget.Component });
ManagePocketsConfirmationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsConfirmationComponent, selector: "bb-manage-pockets-confirmation", inputs: { awaitingCreateResponse: "awaitingCreateResponse" }, outputs: { newPocket: "newPocket" }, usesInheritance: true, ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <h2 i18n=\"Review And Confirm Your Pocket Details@@managePockets.create.confirmation.header\">\n    Review And Confirm Your Pocket Details\n  </h2>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <div class=\"bb-stack bb-stack--density-xl bb-stack--wrap\">\n    <div class=\"bb-stack__item\">\n      <!-- Pocket Image -->\n      <img \n        [src]=\"selectedImageAssetUrl | async\" \n        class=\"bb-manage-pockets-common-pocket-card__pocket-image bb-block bb-block--sm\" \n        alt=\"Representation of the selected pocket type\"\n        i18n-alt=\"Pocket image|changes according to the type of pocket@@managePockets.create.confirmation.selectedImageAssetUrl\"\n      >\n    </div>\n    <div class=\"bb-stack__break bb-stack__break--xs bb-block bb-block--lg\"></div>\n    <div class=\"bb-stack__item bb-stack__item--align-top\">\n      <!-- Pocket Name  -->\n      <div class=\"bb-block bb-block--md\">\n        <p class=\"bb-block bb-block--no-margin bb-subtitle bb-text-support\" i18n=\"Pocket Name@@managePockets.create.confirmation.name.label\">\n          Pocket Name\n        </p>\n        <h3>{{partialPocket?.name}}</h3>  \n      </div>\n  \n      <!-- Goal Date -->\n      <div class=\"bb-block bb-block--md\" *ngIf=\"partialPocket?.goal?.deadline | date as pocketDate\">\n        <p class=\"bb-block bb-block--no-margin bb-subtitle bb-text-support\" i18n=\"Goal Date@@managePockets.create.confirmation.date.label\">\n          Goal Date\n        </p>\n        <h3>{{pocketDate | date}}</h3>  \n      </div>\n  \n      <!-- Goal Amount -->\n      <div class=\"bb-block bb-block--md\" *ngIf=\"partialPocket?.goal?.amountCurrency?.amount as pocketAmount\">\n        <p class=\"bb-block bb-block--no-margin bb-subtitle bb-text-support\" i18n=\"Goal Amount@@managePockets.create.confirmation.amount.label\">\n          Goal Amount\n        </p>\n        <h3>\n          <bb-amount-ui\n            [currency]=\"journeyCurrency\"\n            [amount]=\"pocketAmount\"\n            [mapCurrency]=\"true\"\n          ></bb-amount-ui>\n        </h3>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n<div class=\"bb-button-bar\">    \n  <bb-load-button-ui\n    i18n=\"Confirm Pocket@@managePockets.create.confirmation.button.continue\"\n    color=\"primary\"\n    class=\"bb-button-bar__button\"\n    [isLoading]=\"awaitingCreateResponse\"\n    (click)=\"!awaitingCreateResponse && saveNewPocket()\"\n  >\n    Confirm Pocket\n  </bb-load-button-ui>\n  <button \n    bbButton\n    i18n=\"Back@@managePockets.create.confirmation.button.back\"\n    class=\"bb-button-bar__button\"\n    color=\"secondary\" \n    (click)=\"goBack()\"\n  >\n    Back\n  </button>\n  <button \n    bbButton \n    color=\"link\"\n    class=\"bb-button-bar__button bb-button-bar__button--across\"\n    i18n=\"Cancel@@managePockets.create.confirmation.button.cancel\"\n    (click)=\"abort()\"\n  >\n    Cancel\n  </button>\n</div>\n", components: [{ type: i3.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i3$1.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i6.AsyncPipe, "date": i6.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsConfirmationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-confirmation',
                    templateUrl: './manage-pockets-confirmation.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.AssetsService }]; }, propDecorators: { awaitingCreateResponse: [{
                type: Input
            }], newPocket: [{
                type: Output
            }] } });

class ManagePocketsCreateComponent {
}
ManagePocketsCreateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsCreateComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ManagePocketsCreateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsCreateComponent, selector: "bb-manage-pockets-create", ngImport: i0, template: "<div class=\"bb-card bb-card--lg\">\n  <div class=\"bb-card__body\">\n    <ng-content></ng-content>\n  </div>\n</div>" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsCreateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-create',
                    templateUrl: './manage-pockets-create.component.html',
                }]
        }] });

class ManagePocketsDetailsComponent extends ManagePocketsCreateBaseStep {
    constructor(formBuilder, assetsService) {
        super();
        this.formBuilder = formBuilder;
        this.assetsService = assetsService;
        this.showDialog = false;
        this.resolveAsset = this.assetsService.createAssetsResolver({
            widgetName: 'bb-manage-pockets-journey-ang',
            getURIFromAssetID: (assetId) => assetId,
        });
    }
    ngOnInit() {
        var _a, _b, _c, _d;
        const defaultImage = ((_a = this.pocketImageList) === null || _a === void 0 ? void 0 : _a[0]) || 'home';
        this.pocketDetailsForm = this.formBuilder.group({
            name: [((_b = this.partialPocket) === null || _b === void 0 ? void 0 : _b.name) || this.formatName(defaultImage), Validators.required],
            icon: [((_c = this.partialPocket) === null || _c === void 0 ? void 0 : _c.icon) || defaultImage, Validators.required],
        });
        this.selectedImageAssetUrl = this.resolveAsset(`${((_d = this.partialPocket) === null || _d === void 0 ? void 0 : _d.icon) || defaultImage}-img.webp`);
    }
    formatName(pocketName) {
        const titleCasePipe = new TitleCasePipe();
        const regexPipe = new RegexReplacePipe();
        let formatedTittle = pocketName;
        formatedTittle = regexPipe.transform(formatedTittle, '-', ' ');
        formatedTittle = titleCasePipe.transform(formatedTittle);
        return formatedTittle;
    }
    openDialog() {
        this.showDialog = true;
    }
    closeDialog() {
        this.showDialog = false;
    }
    changeType(img) {
        this.pocketDetailsForm.patchValue({ name: this.formatName(img), icon: img });
        this.selectedImageAssetUrl = this.resolveAsset(`${img}-img.webp`);
        this.closeDialog();
    }
    getImage(img) {
        return this.resolveAsset(`${img}-img.webp`);
    }
    isTypeSelected(img) {
        return this.pocketDetailsForm.get('icon').value === img;
    }
    save() {
        if (this.pocketDetailsForm.valid) {
            this.goNext(this.formatDetailsValues());
        }
        else {
            this.pocketDetailsForm.markAllAsTouched();
        }
    }
    formatDetailsValues() {
        const { name, icon } = this.pocketDetailsForm.value;
        return { name, icon };
    }
}
ManagePocketsDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsDetailsComponent, deps: [{ token: i1$3.FormBuilder }, { token: i1.AssetsService }], target: i0.ɵɵFactoryTarget.Component });
ManagePocketsDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsDetailsComponent, selector: "bb-manage-pockets-details", inputs: { pocketImageList: "pocketImageList" }, usesInheritance: true, ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <h2 i18n=\"Choose Your Pocket Image and Name@@managePockets.create.details.header\">\n    Choose Your Pocket Image and Name\n  </h2>\n</div>\n<form [formGroup]=\"pocketDetailsForm\" (submit)=\"save()\">\n  <div class=\"bb-block bb-block--xl\">\n    <div class=\"bb-stack bb-stack--wrap bb-stack--align-top\">\n      <div class=\"bb-stack__item bb-stack__item--spacing-xl bb-manage-pockets-create-details__pocket-image-container\">\n        <img \n          [src]=\"selectedImageAssetUrl | async\" \n          class=\"bb-manage-pockets-create-details__pocket-image bb-block bb-block--sm\" \n          alt=\"Representation of the selected pocket type\"\n          i18n-alt=\"Pocket image|changes according to the type of pocket@@managePockets.create.details.selectedImageAssetUrl\"\n          (click)=\"openDialog()\"\n        >\n        <div>\n          <button\n            #button\n            bbButton\n            buttonSize=\"sm\"\n            [block]=\"true\"\n            color=\"link-text\"\n            (click)=\"openDialog()\"\n            i18n=\"Change image button@@managePockets.create.details.button.changeImage\"\n          >\n            Change image\n          </button>\n        </div>\n      </div>\n      <div class=\"bb-stack__break bb-stack__break--xs-down\"></div>\n      <div class=\"bb-stack__item bb-manage-pockets-create-details__input-container\">\n        <bb-input-text-ui\n          formControlName=\"name\"\n          data-role=\"manage-pocket-creation-name\"\n          label=\"What's this Pocket for?\"\n          i18n-label=\"What's this Pocket for?@@managePockets.create.details.input.label\"\n          maxLength=\"50\"\n          [attr.aria-invalid]=\"!isFieldValid(pocketDetailsForm, 'name')\"\n          [attr.aria-describedby]=\"pocketNameError?.id\"\n        ></bb-input-text-ui>\n        <bb-input-validation-message-ui [showErrors]=\"!isFieldValid(pocketDetailsForm, 'name')\">\n          <span \n            #pocketNameError\n            bbDynamicId\n            data-role=\"user-details-phone-number-validation-msg\"\n            i18n=\"You need to specify a Pocket name@@managePockets.create.details.input.validationError.required\"\n          >\n            You need to specify a Pocket name\n          </span>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"bb-button-bar\">    \n    <button \n      bbButton \n      i18n=\"Continue@@managePockets.create.details.button.continue\"\n      class=\"bb-button-bar__button\" \n      type=\"submit\"\n    >\n      Continue\n    </button>\n    <button \n      bbButton \n      color=\"link\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      i18n=\"Cancel@@managePockets.create.details.button.cancel\"\n      (click)=\"abort()\"\n    >\n      Cancel\n    </button>\n  </div>\n</form>\n\n<bb-modal-ui [isOpen]=\"showDialog\" (cancel)=\"closeDialog()\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <div class=\"bb-stack\">\n        <div class=\"bb-stack__item\">\n          <span class=\"modal-title\" i18n=\"Choose pocket image@@managePockets.create.details.modal.title\">\n            Choose Pocket Image\n          </span>\n        </div>\n        <div class=\"bb-stack__item--push-right\">\n          <button\n            bbButton\n            (click)=\"closeDialog()\"\n            class=\"bb-stack__item-sm\"\n            color=\"unstyled\"\n            aria-label=\"close dialog\"\n            i18n-aria-label=\"close dialog button@@managePockets.create.details.modal.button.close\"\n          >\n            <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n          </button>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div class=\"bb-stack bb-stack--wrap\">\n        <div class=\"bb-stack__box-item bb-manage-pockets-create-details__modal-image-item\" *ngFor=\"let imageName of pocketImageList\" bbAccessibilityKeyboard (click)=\"changeType(imageName)\">\n          <div class=\"bb-block bb-block--sm\">\n            <img\n              class=\"bb-manage-pockets-create-details__pocket-image\"\n              [ngClass]=\"{ 'active': isTypeSelected(imageName)}\"\n              [src]=\"getImage(imageName) | async\" \n              alt=\"\" \n            >\n          </div>\n          <p class=\"bb-text-align-center bb-subtitle bb-text-bold\" [ngClass]=\"isTypeSelected(imageName) ? 'bb-text-primary' : 'bb-text-support'\">\n            {{imageName | bbRegexReplace: '-' : ' ' | titlecase}}\n          </p>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-body-ui>\n</bb-modal-ui>", components: [{ type: i3$2.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i4$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i6$1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i6$1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i6$1.ModalBodyComponent, selector: "bb-modal-body-ui" }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicIdDirective, selector: "[bbDynamicId]", inputs: ["bbDynamicId"], exportAs: ["bbDynamicId"] }, { type: i6$1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i6$1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: AccessibilityKeyboardDirective, selector: "[bbAccessibilityKeyboard]" }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i6.AsyncPipe, "titlecase": i6.TitleCasePipe, "bbRegexReplace": RegexReplacePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-details',
                    templateUrl: './manage-pockets-details.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }, { type: i1.AssetsService }]; }, propDecorators: { pocketImageList: [{
                type: Input
            }] } });

function nonZero() {
    return (control) => {
        const validAmount = control.value.length === 0 || control.value != 0;
        return validAmount ? null : { isZero: true };
    };
}

class ManagePocketsGoalsComponent extends ManagePocketsCreateBaseStep {
    constructor(formBuilder) {
        super();
        this.formBuilder = formBuilder;
        this.today = new Date();
        this.minDate = new Date(this.today.getFullYear(), this.today.getMonth(), this.today.getDate(), 0, 0).toISOString();
    }
    ngOnInit() {
        var _a, _b, _c, _d, _e;
        this.pocketGoalsForm = this.formBuilder.group({
            amount: [((_c = (_b = (_a = this.partialPocket) === null || _a === void 0 ? void 0 : _a.goal) === null || _b === void 0 ? void 0 : _b.amountCurrency) === null || _c === void 0 ? void 0 : _c.amount) || '', nonZero()],
            deadline: [((_e = (_d = this.partialPocket) === null || _d === void 0 ? void 0 : _d.goal) === null || _e === void 0 ? void 0 : _e.deadline) || ''],
        });
    }
    save() {
        if (this.pocketGoalsForm.valid) {
            this.goNext(this.formatGoalsValues());
        }
        else {
            this.pocketGoalsForm.markAllAsTouched();
        }
    }
    formatGoalsValues() {
        const { amount, deadline } = this.pocketGoalsForm.value;
        return { goal: { amountCurrency: { amount, currencyCode: this.journeyCurrency }, deadline } };
    }
}
ManagePocketsGoalsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsGoalsComponent, deps: [{ token: i1$3.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
ManagePocketsGoalsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsGoalsComponent, selector: "bb-manage-pockets-goals", usesInheritance: true, ngImport: i0, template: "<div class=\"bb-block bb-block--sm\">\n  <h2 i18n=\"Choose Your Goal Amount And Date@@managePockets.create.goals.header\">\n    Choose Your Goal Amount And Date\n  </h2>\n</div>\n<div class=\"bb-block bb-block--xl\">\n  <p class=\"bb-text-support bb-subtitle\" i18n=\"You can choose to skip this step by clicking 'Continue'@@managePockets.create.goals.description\">\n    You can choose to skip this step by clicking 'Continue'.\n  </p>\n</div>\n\n<form [formGroup]=\"pocketGoalsForm\" (submit)=\"save()\">\n  <div class=\"bb-block--lg\">\n\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--xl col-md-6\">\n        <bb-amount-input-ui\n          label=\"Goal Amount\"\n          i18n-label=\"Goal Amount@@managePockets.create.goals.amount.label\"\n          [attr.aria-invalid]=\"!isFieldValid(pocketGoalsForm, 'amount')\"\n          [attr.aria-describedby]=\"goalAmountZeroError?.id\"\n          formControlName=\"amount\"\n          [currency]=\"journeyCurrency\"\n          placeholder=\"0.00\"\n          i18n-placeholder=\"0.00|Price example@@managePockets.create.goals.amount.placeholder\"\n        ></bb-amount-input-ui>\n        <bb-input-validation-message-ui [showErrors]=\"!isFieldValid(pocketGoalsForm, 'amount')\">\n          <span i18n=\"Goal amount can only be bigger than 0 or empty@@managePockets.create.goals.amount.error.zero\" bbDynamicId #goalAmountZeroError>\n            Goal amount can only be bigger than 0 or empty\n          </span>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--sm col-md-6\">\n        <bb-input-datepicker-ui\n          label=\"Goal Date\"\n          i18n-label=\"Goal Date@@managePockets.create.goals.deadline.label\"\n          [attr.aria-invalid]=\"!isFieldValid(pocketGoalsForm, 'deadline')\"\n          datepickerDescribedby=\"{{datePickerDescription?.id}} {{datePickerError?.id}}\"\n          formControlName=\"deadline\"\n          [minDate]=\"minDate\"\n        ></bb-input-datepicker-ui>\n      </div>\n    </div>\n    <div bbDynamicId #datePickerError>\n      <bb-input-validation-message-ui [showErrors]=\"!isFieldValid(pocketGoalsForm, 'deadline')\">\n        <ng-container *ngFor=\"let error of getFieldErrors(pocketGoalsForm, 'deadline') | keyvalue; last as last\">\n          <ng-container *ngIf=\"last\" [ngSwitch]=\"error.key\">\n            <div class=\"bb-block bb-block--md\">\n              <span i18n=\"Enter a valid date format@@managePockets.create.goals.deadline.error.invalidFormat\" *ngSwitchCase=\"'invalidDateFormat'\">\n                Enter a valid date format\n              </span>\n              <span i18n=\"Invalid goal date@@managePockets.create.goals.deadline.error.invalidDate\" *ngSwitchCase=\"'dateLessThanMinDate'\">\n                Invalid goal date\n              </span>\n            </div>\n          </ng-container>\n        </ng-container>\n      </bb-input-validation-message-ui>\n    </div>\n    <p\n      bbDynamicId\n      #datePickerDescription\n      i18n=\"It will help you to track progress towards your goal@@managePockets.create.goals.deadline.description\" \n      class=\"bb-text-support bb-subtitle\"\n    >\n      It will help you to track progress towards your goal\n    </p>\n\n  </div>\n  <div class=\"bb-button-bar\">    \n    <button \n      bbButton \n      i18n=\"Continue@@managePockets.create.goals.button.continue\"\n      class=\"bb-button-bar__button\" \n      type=\"submit\"\n    >\n      Continue\n    </button>\n    <button \n      bbButton\n      i18n=\"Back@@managePockets.create.goals.button.back\"\n      class=\"bb-button-bar__button\"\n      color=\"secondary\" \n      (click)=\"goBack()\"\n    >\n      Back\n    </button>\n    <button \n      bbButton \n      color=\"link\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      i18n=\"Cancel@@managePockets.create.goals.button.cancel\"\n      (click)=\"abort()\"\n    >\n      Cancel\n    </button>\n  </div>\n</form>\n\n", components: [{ type: i2$2.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: i4$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4$2.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicIdDirective, selector: "[bbDynamicId]", inputs: ["bbDynamicId"], exportAs: ["bbDynamicId"] }, { type: i4$2.MinDateValidatorDirective, selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i6.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "keyvalue": i6.KeyValuePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsGoalsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-goals',
                    templateUrl: './manage-pockets-goals.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }]; } });

class ManagePocketsCreateWrapperComponent extends ManagePocketsBaseWrapperComponent {
    constructor() {
        super(...arguments);
        this.newPocket = new EventEmitter();
        this.pocketStore = new BehaviorSubject({});
        this.partialPocket = this.pocketStore.asObservable();
    }
    goNext(partialPocket) {
        this.setCurrentUserValue(partialPocket);
        this.goToStep(this.currentStep + 1);
    }
    saveNewPocket(newPocketItem) {
        this.newPocket.emit(newPocketItem);
    }
    setCurrentUserValue(value) {
        this.pocketStore.next(Object.assign(Object.assign({}, this.pocketStore.value), value));
    }
}
ManagePocketsCreateWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsCreateWrapperComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
ManagePocketsCreateWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsCreateWrapperComponent, selector: "bb-manage-pockets-create-wrapper", inputs: { pocketImageList: "pocketImageList", awaitingCreateResponse: "awaitingCreateResponse" }, outputs: { newPocket: "newPocket" }, usesInheritance: true, ngImport: i0, template: "<div class=\"bb-block bb-block--lg row bb-stack--center\">\n  <bb-stepper-ui class=\"col-12 col-md-8\">\n    <bb-stepper-step-ui\n      label=\"Make It Yours\"\n      i18n-label=\"Make It Yours@@managePockets.create.wrapper.stepper.step1.label\"\n      [isActive]=\"currentStep >= 1\"\n      [isChecked]=\"currentStep > 1\"\n      [isCurrent]=\"currentStep === 1\"\n    ></bb-stepper-step-ui>\n    <bb-stepper-step-ui\n      label=\"What's Your Goal?\"\n      i18n-label=\"What's Your Goal?@@managePockets.create.wrapper.stepper.step2.label\"\n      [isActive]=\"currentStep >= 2\"\n      [isChecked]=\"currentStep > 2\"\n      [isCurrent]=\"currentStep === 2\"\n    ></bb-stepper-step-ui>\n    <bb-stepper-step-ui\n      label=\"Review Pocket\"\n      i18n-label=\"Review Pocket@@managePockets.create.wrapper.stepper.step3.label\"\n      [isActive]=\"currentStep >= 3\"\n      [isChecked]=\"currentStep > 3\"\n      [isCurrent]=\"currentStep === 3\"\n    ></bb-stepper-step-ui>\n  </bb-stepper-ui>\n</div>\n\n<bb-manage-pockets-create>\n  <bb-manage-pockets-details\n    *ngIf=\"currentStep === 1\"\n    [pocketImageList]=\"pocketImageList\"\n    [partialPocket]=\"partialPocket | async\"\n    (next)=\"goNext($event)\"\n    (back)=\"goBack()\"\n    (cancel)=\"showAbortDialog()\"\n  ></bb-manage-pockets-details>\n\n  <bb-manage-pockets-goals\n    *ngIf=\"currentStep === 2\"\n    [partialPocket]=\"partialPocket | async\"\n    [journeyCurrency]=\"journeyCurrency\"\n    (next)=\"goNext($event)\"\n    (back)=\"goBack()\"\n    (cancel)=\"showAbortDialog()\"\n  ></bb-manage-pockets-goals>\n\n  <bb-manage-pockets-confirmation\n    *ngIf=\"currentStep === 3\"\n    [partialPocket]=\"partialPocket | async\"\n    [journeyCurrency]=\"journeyCurrency\"\n    [awaitingCreateResponse]=\"awaitingCreateResponse\"\n    (newPocket)=\"saveNewPocket($event)\"\n    (back)=\"goBack()\"\n    (cancel)=\"showAbortDialog()\"\n  ></bb-manage-pockets-confirmation>\n</bb-manage-pockets-create>\n\n<bb-modal-ui [isOpen]=\"showDialog\" (cancel)=\"closeAbortDialog()\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <div class=\"bb-stack\">\n        <div class=\"bb-stack__item\">\n          <span class=\"modal-title\" i18n=\"Discard Pocket?@@managePockets.create.wrapper.modal.header\">\n            Discard Pocket?\n          </span>\n        </div>\n        <div class=\"bb-stack__item--push-right\">\n          <button\n            bbButton\n            (click)=\"closeAbortDialog()\"\n            class=\"bb-stack__item-sm\"\n            color=\"unstyled\"\n            aria-label=\"close dialog\"\n            i18n-aria-label=\"close dialog button@@managePockets.create.wrapper.modal.button.close\"\n          >\n            <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n          </button>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <span i18n=\"All this pocket information will be permanently lost.@@managePockets.create.wrapper.modal.body\">\n        All this pocket information will be permanently lost.\n      </span>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          (click)=\"confirmAbort()\"\n          i18n=\"Discard Pocket@@managePockets.create.wrapper.modal.button.confirm\"\n        >\n          Discard Pocket\n        </button>\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          (click)=\"closeAbortDialog()\"\n          i18n=\"Keep it@@managePockets.create.wrapper.modal.button.cancel\"\n        >\n          Keep it\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>", components: [{ type: i1$4.StepperComponent, selector: "bb-stepper-ui", outputs: ["select"] }, { type: i1$4.StepperStepComponent, selector: "bb-stepper-step-ui", inputs: ["label", "stateLabel", "data", "ariaLabel", "isCurrent", "isChecked", "isActive"] }, { type: ManagePocketsCreateComponent, selector: "bb-manage-pockets-create" }, { type: ManagePocketsDetailsComponent, selector: "bb-manage-pockets-details", inputs: ["pocketImageList"] }, { type: ManagePocketsGoalsComponent, selector: "bb-manage-pockets-goals" }, { type: ManagePocketsConfirmationComponent, selector: "bb-manage-pockets-confirmation", inputs: ["awaitingCreateResponse"], outputs: ["newPocket"] }, { type: i6$1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i6$1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i6$1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i6$1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6$1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6$1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i6$1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i6.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsCreateWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-create-wrapper',
                    templateUrl: './manage-pockets-create-wrapper.component.html',
                }]
        }], propDecorators: { pocketImageList: [{
                type: Input
            }], awaitingCreateResponse: [{
                type: Input
            }], newPocket: [{
                type: Output
            }] } });

const components$2 = [
    ManagePocketsCreateComponent,
    ManagePocketsCreateWrapperComponent,
    ManagePocketsDetailsComponent,
    ManagePocketsGoalsComponent,
    ManagePocketsConfirmationComponent,
];
const modules$2 = [
    AmountInputModule,
    FormsModule,
    IconModule,
    InputDatepickerModule,
    InputTextModule,
    InputValidationMessageModule,
    LoadButtonModule,
    ModalModule,
    ReactiveFormsModule,
    StepperModule,
];
class ManagePocketsCreateModule {
}
ManagePocketsCreateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsCreateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ManagePocketsCreateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsCreateModule, declarations: [ManagePocketsCreateComponent,
        ManagePocketsCreateWrapperComponent,
        ManagePocketsDetailsComponent,
        ManagePocketsGoalsComponent,
        ManagePocketsConfirmationComponent], imports: [CommonModule,
        ManagePocketsCommonModule, AmountInputModule,
        FormsModule,
        IconModule,
        InputDatepickerModule,
        InputTextModule,
        InputValidationMessageModule,
        LoadButtonModule,
        ModalModule,
        ReactiveFormsModule,
        StepperModule, i1.BackbaseCoreModule], exports: [ManagePocketsCreateComponent,
        ManagePocketsCreateWrapperComponent,
        ManagePocketsDetailsComponent,
        ManagePocketsGoalsComponent,
        ManagePocketsConfirmationComponent, AmountInputModule,
        FormsModule,
        IconModule,
        InputDatepickerModule,
        InputTextModule,
        InputValidationMessageModule,
        LoadButtonModule,
        ModalModule,
        ReactiveFormsModule,
        StepperModule] });
ManagePocketsCreateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsCreateModule, imports: [[
            CommonModule,
            ManagePocketsCommonModule,
            ...modules$2,
            BackbaseCoreModule.withConfig({
                classMap: { ManagePocketsCreateWrapperComponent },
            }),
        ], AmountInputModule,
        FormsModule,
        IconModule,
        InputDatepickerModule,
        InputTextModule,
        InputValidationMessageModule,
        LoadButtonModule,
        ModalModule,
        ReactiveFormsModule,
        StepperModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsCreateModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components$2],
                    imports: [
                        CommonModule,
                        ManagePocketsCommonModule,
                        ...modules$2,
                        BackbaseCoreModule.withConfig({
                            classMap: { ManagePocketsCreateWrapperComponent },
                        }),
                    ],
                    exports: [...components$2, ...modules$2],
                }]
        }] });

const ManagePocketsJourneyConfigurationToken = new InjectionToken('ManagePocketsJourneyConfiguration injection token');
const configDefaults = {
    displayHeaders: true,
    journeyCurrency: 'EUR',
    pocketImageList: [
        'home',
        'travel',
        'rent',
        'holidays',
        'savings',
        'utilities',
        'new-car',
        'insurance',
        'new-phone',
        'entertainment',
        'gift',
        'business',
        'custom',
    ],
};
const getDefaultConfigValues = (config) => (Object.assign(Object.assign({}, configDefaults), (config || {})));
class ManagePocketsJourneyConfigService {
    constructor(config) {
        this._config = getDefaultConfigValues(config);
    }
    get defaults() {
        return configDefaults;
    }
    /**
     * Defines if the journey display header on each view
     */
    get displayHeaders() {
        return this._config.displayHeaders;
    }
    /**
     * Names for pockets images, used to both name the type and look for the asset
     */
    get pocketImageList() {
        return this._config.pocketImageList;
    }
    /**
     * Currency used across the whole journey
     */
    get journeyCurrency() {
        return this._config.journeyCurrency;
    }
}
ManagePocketsJourneyConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsJourneyConfigService, deps: [{ token: ManagePocketsJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ManagePocketsJourneyConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsJourneyConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsJourneyConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ManagePocketsJourneyConfigurationToken]
                }] }]; } });

class ManagePocketsJourneyComponent {
}
ManagePocketsJourneyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsJourneyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ManagePocketsJourneyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsJourneyComponent, selector: "bb-manage-pockets-journey", providers: [ManagePocketsJourneyConfigService], ngImport: i0, template: '<router-outlet></router-outlet>', isInline: true, directives: [{ type: i3$3.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsJourneyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-journey',
                    template: '<router-outlet></router-outlet>',
                    providers: [ManagePocketsJourneyConfigService],
                }]
        }] });

class ManagePocketsEmptyListComponent {
    constructor() {
        this.createPocket = new EventEmitter();
    }
    goToCreatePocket() {
        this.createPocket.emit();
    }
}
ManagePocketsEmptyListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsEmptyListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ManagePocketsEmptyListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsEmptyListComponent, selector: "bb-manage-pockets-empty-list", inputs: { emptyStateImageUrl: "emptyStateImageUrl" }, outputs: { createPocket: "createPocket" }, ngImport: i0, template: "<div class=\"bb-card bb-card--lg\">\n  <div class=\"bb-card__body bb-text-align-center\">\n    <div class=\"bb-block bb-block--lg\">\n      <img \n        class=\"img-fluid\" \n        *ngIf=\"!!emptyStateImageUrl\" \n        [src]=\"emptyStateImageUrl\"\n        alt=\"empty-state-image\"\n      />\n    </div>\n    <h2 \n      class=\"bb-block bb-block--sm\"\n      data-role=\"empty-state-message\"\n      i18n=\"Manage pockets empty state header@@managePockets.list.empty.state.header\"\n    >\n      Save More With Pockets!\n    </h2>\n    <div class=\"bb-block bb-block--lg\">\n      <span\n        class=\"bb-text-support text-small\"\n        data-role=\"empty-state-description\"\n        i18n=\"Manage pockets empty state description@managePockets.list.empty.state.description\"\n      >\n        Set up a dedicated space to help you stay on track with your saving goals\n      </span>\n    </div>\n    <div class=\"bb-block\">\n      <button bbButton color=\"primary\" (click)=\"goToCreatePocket()\">\n        <bb-icon-ui name=\"add\"></bb-icon-ui> \n        <span i18n=\"Create new pocket button@@managePockets.list.empty.state.createPocket.button\">\n          Create Pocket\n        </span>\n      </button>\n    </div>\n  </div>\n</div>", components: [{ type: i1$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsEmptyListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-empty-list',
                    templateUrl: `./manage-pockets-empty-list.component.html`,
                }]
        }], propDecorators: { emptyStateImageUrl: [{
                type: Input
            }], createPocket: [{
                type: Output
            }] } });

class ManagePocketsListComponent {
    constructor() {
        this.pocketTransfer = new EventEmitter();
    }
    goToPocketTransfer(transferType) {
        this.pocketTransfer.emit(transferType);
    }
}
ManagePocketsListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ManagePocketsListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsListComponent, selector: "bb-manage-pockets-list", inputs: { pocketList: "pocketList" }, outputs: { pocketTransfer: "pocketTransfer" }, ngImport: i0, template: "<ng-container *ngFor=\"let pocket of pocketList\">\n  <div class=\"bb-block bb-block--xl\">\n    <bb-manage-pockets-card\n      [pocket]=\"pocket\"\n      (pocketTransfer)=\"goToPocketTransfer($event)\"\n    ></bb-manage-pockets-card>\n  </div>\n</ng-container>", components: [{ type: ManagePocketsCardComponent, selector: "bb-manage-pockets-card", inputs: ["pocket"], outputs: ["pocketTransfer"] }], directives: [{ type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-list',
                    templateUrl: `./manage-pockets-list.component.html`,
                }]
        }], propDecorators: { pocketList: [{
                type: Input
            }], pocketTransfer: [{
                type: Output
            }] } });

class ManagePocketsListWrapperComponent {
    constructor() {
        this.refreshData = new EventEmitter();
        this.createPocket = new EventEmitter();
        this.pocketTransfer = new EventEmitter();
    }
    goToPocketTransfer(transferType) {
        this.pocketTransfer.emit(transferType);
    }
    onRefreshData() {
        this.refreshData.emit();
    }
    goToCreatePocket() {
        this.createPocket.emit();
    }
}
ManagePocketsListWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsListWrapperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ManagePocketsListWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsListWrapperComponent, selector: "bb-manage-pockets-list-wrapper", inputs: { pocketList: "pocketList", pocketListApiError: "pocketListApiError", emptyStateImageUrl: "emptyStateImageUrl" }, outputs: { refreshData: "refreshData", createPocket: "createPocket", pocketTransfer: "pocketTransfer" }, ngImport: i0, template: "<ng-container *ngIf=\"!pocketListApiError; else errorState\">\n  <ng-container *ngIf=\"pocketList?.pockets?.length > 0; else emptyState\">\n    <div class=\"bb-block bb-block--lg bb-card bb-card--sm\">\n      <div class=\"bb-card__body\">\n        <div class=\"bb-stack\">\n          <div class=\"bb-stack__item bb-stack__item--fill bb-stack\">\n            <bb-icon-ui name=\"attach-money\" size=\"lg\"></bb-icon-ui>\n            <h5 \n              class=\"bb-block bb-block--no-margin\"\n              i18n=\"Plan to save something else?|New Pocket title@@managePockets.component.listWrapper.header.title\"\n            >\n              Plan to save for something else?\n            </h5>\n          </div>\n          <div class=\"bb-stack__item\">\n            <button bbButton color=\"primary\" (click)=\"goToCreatePocket()\">\n              <bb-icon-ui name=\"add\" cropped></bb-icon-ui> \n              <span i18n=\"Create new pocket button@@managePockets.component.listWrapper.header.createPocket.button\">\n                Create Pocket\n              </span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <bb-manage-pockets-list\n      [pocketList]=\"pocketList.pockets\"\n      (pocketTransfer)=\"goToPocketTransfer($event)\"\n    ></bb-manage-pockets-list>\n  </ng-container>\n</ng-container>\n\n<ng-template #emptyState>\n  <bb-manage-pockets-empty-list [emptyStateImageUrl]=\"emptyStateImageUrl\" (createPocket)=\"goToCreatePocket()\"></bb-manage-pockets-empty-list>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"card\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        iconModifier=\"error-outline\"\n        iconColor=\"dark\"\n        iconSize='xxl'\n        title=\"Page couldn't load\"\n        i18n-title=\"Error state title@@managePockets.component.listWrapper.errorState.title\"\n        subtitle=\"Try to reload the page or contact the system administrator.\"\n        i18n-subtitle=\"Error state message@@managePockets.component.listWrapper.errorState.message\"\n      ></bb-empty-state-ui>\n      <div class=\"bb-state-container__footer\">\n        <button \n          bbButton \n          color=\"primary\" \n          i18n=\"Reload button text@@managePockets.component.listWrapper.errorState.reloadButton\"\n          (click)=\"onRefreshData()\"\n        >\n          Reload\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>", components: [{ type: i1$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: ManagePocketsListComponent, selector: "bb-manage-pockets-list", inputs: ["pocketList"], outputs: ["pocketTransfer"] }, { type: ManagePocketsEmptyListComponent, selector: "bb-manage-pockets-empty-list", inputs: ["emptyStateImageUrl"], outputs: ["createPocket"] }, { type: i4$3.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsListWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-list-wrapper',
                    templateUrl: `manage-pockets-list-wrapper.component.html`,
                }]
        }], propDecorators: { pocketList: [{
                type: Input
            }], pocketListApiError: [{
                type: Input
            }], emptyStateImageUrl: [{
                type: Input
            }], refreshData: [{
                type: Output
            }], createPocket: [{
                type: Output
            }], pocketTransfer: [{
                type: Output
            }] } });

const components$1 = [ManagePocketsEmptyListComponent, ManagePocketsListComponent, ManagePocketsListWrapperComponent];
const modules$1 = [LoadingIndicatorModule];
class ManagePocketsListModule {
}
ManagePocketsListModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsListModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ManagePocketsListModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsListModule, declarations: [ManagePocketsEmptyListComponent, ManagePocketsListComponent, ManagePocketsListWrapperComponent], imports: [CommonModule,
        ManagePocketsCommonModule, LoadingIndicatorModule, i1.BackbaseCoreModule], exports: [ManagePocketsEmptyListComponent, ManagePocketsListComponent, ManagePocketsListWrapperComponent, LoadingIndicatorModule] });
ManagePocketsListModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsListModule, imports: [[
            CommonModule,
            ManagePocketsCommonModule,
            ...modules$1,
            BackbaseCoreModule.withConfig({
                classMap: { ManagePocketsListWrapperComponent },
            }),
        ], LoadingIndicatorModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsListModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components$1],
                    imports: [
                        CommonModule,
                        ManagePocketsCommonModule,
                        ...modules$1,
                        BackbaseCoreModule.withConfig({
                            classMap: { ManagePocketsListWrapperComponent },
                        }),
                    ],
                    exports: [...components$1, ...modules$1],
                }]
        }] });

class ManagePocketsTransfersDetailsComponent extends ManagePocketsBaseStep {
    constructor(formBuilder) {
        super();
        this.formBuilder = formBuilder;
        this.accountChange = new EventEmitter();
        this.next = new EventEmitter();
    }
    ngOnInit() {
        var _a, _b;
        this.transferDetailsForm = this.formBuilder.group({
            amount: [
                ((_a = this.partialNewPayment) === null || _a === void 0 ? void 0 : _a.amount) || '',
                Validators.compose([
                    Validators.required,
                    Validators.min(0.01),
                    this.validatorsSelector((_b = this.partialNewPayment) === null || _b === void 0 ? void 0 : _b.account),
                ]),
            ],
        });
    }
    goNext() {
        if (this.transferDetailsForm.valid) {
            const paymentForm = Object.assign(Object.assign({}, this.partialNewPayment), { amount: this.transferDetailsForm.get('amount').value });
            this.next.emit(paymentForm);
        }
        else {
            this.transferDetailsForm.markAllAsTouched();
        }
    }
    onAccountSelection(account) {
        const control = this.transferDetailsForm.get('amount');
        control.setValidators([Validators.required, Validators.min(0.01), this.validatorsSelector(account)]);
        control.updateValueAndValidity();
        this.accountChange.emit(account);
    }
    validatorsSelector(account) {
        var _a, _b, _c, _d;
        const pocketBalance = ((_b = (_a = this.partialNewPayment) === null || _a === void 0 ? void 0 : _a.pocketInfo) === null || _b === void 0 ? void 0 : _b.pocket.balance.amount) || 0;
        return ((_d = (_c = this.partialNewPayment) === null || _c === void 0 ? void 0 : _c.pocketInfo) === null || _d === void 0 ? void 0 : _d.transferType) === this.transferTypesEnum.ADD
            ? Validators.max((account === null || account === void 0 ? void 0 : account.balance) || 0)
            : Validators.max(Number(pocketBalance));
    }
}
ManagePocketsTransfersDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsTransfersDetailsComponent, deps: [{ token: i1$3.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
ManagePocketsTransfersDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsTransfersDetailsComponent, selector: "bb-manage-pockets-transfers-details", inputs: { accountList: "accountList", journeyCurrency: "journeyCurrency" }, outputs: { accountChange: "accountChange", next: "next" }, usesInheritance: true, ngImport: i0, template: "<form [formGroup]=\"transferDetailsForm\" (submit)=\"goNext()\">\n  <div class=\"bb-block bb-block--xl\">\n\n    <label>\n      {{ partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.transfers.details.addMoneyHeader : pocketLocalizations.transfers.details.withdrawMoneyHeader }}\n    </label>\n\n    <bb-account-selector-ui\n      [items]=\"accountList\"\n      [selectedItems]=\"partialNewPayment?.account ?? ''\"\n      [closeOnSelect]=\"true\"\n      [highlight]=\"false\"\n      [required]=\"true\"\n      dropdownPosition=\"bottom\"\n      placeholder=\"Select an Account\"\n      i18n-placeholder=\"Select an Account@@managePockets.transfers.details.accountSelector.placeholder\"\n      (change)=\"onAccountSelection($event)\"\n    ></bb-account-selector-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <div class=\"bb-stack row\">\n      <div class=\"bb-stack__item col-6\">\n        <div class=\"bb-block bb-block--sm\">\n          <bb-amount-input-ui\n            formControlName=\"amount\"\n            label=\"Amount\"\n            i18n-label=\"Amount@@managePockets.transfers.details.amount.placeholder\"\n            [attr.aria-invalid]=\"!isFieldValid(transferDetailsForm, 'amount')\"\n            [currency]=\"journeyCurrency\"\n            placeholder=\"0.00\"\n            i18n-placeholder=\"0.00|Price example@@managePockets.transfers.details.amount.placeholder\"\n          ></bb-amount-input-ui>\n        </div>\n        <div class=\"bb-subtitle bb-text-support\" i18n=\"Available balance|Value includes a formatted currendy@@managePockets.transfers.details.availableBalance\" *ngIf=\"partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.WITHDRAW\">\n          <span>Available Balance: </span>\n          <bb-amount-ui\n            [amount]=\"partialNewPayment?.pocketInfo?.pocket?.balance?.amount\"\n            [currency]=\"partialNewPayment?.pocketInfo?.pocket?.balance?.currencyCode\"\n          ></bb-amount-ui>\n        </div>\n        <bb-input-validation-message-ui [showErrors]=\"!isFieldValid(transferDetailsForm, 'amount')\" >\n          <ng-container *ngFor=\"let error of getFieldErrors(transferDetailsForm, 'amount') | keyvalue; last as last\">\n            <ng-container *ngIf=\"last\" [ngSwitch]=\"error.key\">\n              <span *ngSwitchCase=\"'max'\">\n                {{ partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.transfers.details.addMoneyError : pocketLocalizations.transfers.details.withdrawMoneyError }}\n              </span>\n              <span i18n=\"Amount is required@@managePockets.transfers.details.amount.error.required\" *ngSwitchDefault>\n                Amount is required\n              </span>\n            </ng-container>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"bb-button-bar\">\n    <button \n      bbButton \n      class=\"bb-button-bar__button\" \n      type=\"submit\"\n    >\n      {{ partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.transfers.details.addMoneyContinueButton : pocketLocalizations.transfers.details.withdrawMoneyContinueButton }}\n    </button>\n    <button \n      bbButton \n      color=\"link\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      i18n=\"Cancel@@managePockets.transfers.details.button.cancel\"\n      (click)=\"abort()\"\n    >\n      Cancel\n    </button>\n  </div>\n</form>\n", components: [{ type: i2$3.AccountSelectorComponent, selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: i2$2.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: i3.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i4$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i6.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i6.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "keyvalue": i6.KeyValuePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsTransfersDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-transfers-details',
                    templateUrl: './manage-pockets-transfers-details.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }]; }, propDecorators: { accountList: [{
                type: Input
            }], journeyCurrency: [{
                type: Input
            }], accountChange: [{
                type: Output
            }], next: [{
                type: Output
            }] } });

class ManagePocketsTransfersReviewComponent extends ManagePocketsBaseStep {
    constructor() {
        super(...arguments);
        this.newTransfer = new EventEmitter();
    }
    performTransfer() {
        this.newTransfer.emit(this.partialNewPayment);
    }
}
ManagePocketsTransfersReviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsTransfersReviewComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
ManagePocketsTransfersReviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsTransfersReviewComponent, selector: "bb-manage-pockets-transfers-review", inputs: { awaitingTransferResponse: "awaitingTransferResponse" }, outputs: { newTransfer: "newTransfer" }, usesInheritance: true, ngImport: i0, template: "<div class=\"bb-block bb-block--lg\">\n  <h2>{{ partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.transfers.review.addMoneyHeader : pocketLocalizations.transfers.review.withdrawMoneyHeader }}</h2>\n</div>\n\n<div class=\"bb-item-log bb-block bb-block--lg\">\n  <div class=\"bb-item-log__record bb-item-log__record--has-bullet\">\n    <div class=\"bb-item-log-record__bullet-icon bb-item-log-record__bullet-icon--filled bb-item-log-record__bullet-icon--spacing-md\"></div>\n    <div class=\"bb-block bb-block--md bb-item-log-record__details\">\n      <div class=\"bb-text-bold bb-block bb-block--sm\" i18n=\"From@@managePockets.transfers.review.itemLog.from.label\">\n        From\n      </div>\n      <ng-container *ngIf=\"partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD; then accountSlot; else pocketSlot\"></ng-container>\n    </div>\n  </div>\n  <div class=\"bb-item-log__record bb-item-log__record--has-bullet\">\n    <div class=\"bb-item-log-record__bullet-icon bb-item-log-record__bullet-icon--spacing-md\"></div>\n    <div class=\"bb-item-log-record__details\">\n      <div class=\"bb-text-bold bb-block bb-block--sm\" i18n=\"To@@managePockets.transfers.review.itemLog.to.label\">\n        To\n      </div>\n      <ng-container *ngIf=\"partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD; then pocketSlot; else accountSlot\"></ng-container>\n    </div>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <div class=\"bb-block bb-block--sm\">\n    <span class=\"bb-text-semi-bold\" i18n=\"Amount@@managePockets.transfers.review.amount.header\">\n      Amount\n    </span>\n  </div>\n  <bb-amount-ui\n    class=\"bb-heading-1\"\n    [amount]=\"partialNewPayment?.amount\"\n    [currency]=\"journeyCurrency\"\n  ></bb-amount-ui>\n</div>\n\n<div class=\"bb-button-bar\">\n  <bb-load-button-ui\n    i18n=\"Confirm Transfer@@managePockets.transfers.review.button.confirmTransfer\"\n    color=\"primary\"\n    class=\"bb-button-bar__button\"\n    [isLoading]=\"awaitingTransferResponse\"\n    (click)=\"!awaitingTransferResponse && performTransfer()\"\n  >\n    Confirm Transfer\n  </bb-load-button-ui>\n  <button \n    bbButton \n    color=\"secondary\"\n    class=\"bb-button-bar__button\"\n    i18n=\"Back@@managePockets.transfers.review.button.back\"\n    (click)=\"goBack()\"\n  >\n    Back\n  </button>\n  <button \n    bbButton \n    color=\"link\"\n    class=\"bb-button-bar__button bb-button-bar__button--across\"\n    i18n=\"Cancel@@managePockets.transfers.review.button.cancel\"\n    (click)=\"abort()\"\n  >\n    Cancel\n  </button>\n</div>\n\n<ng-template #pocketSlot>\n  <div class=\"break-word bb-highlight bb-block bb-block--xs\">\n    {{partialNewPayment?.pocketInfo?.pocket?.name}}\n  </div>\n  <div class=\"bb-text-support bb-subtitle break-word contextual-alternates-off\" i18n=\"Pocket@@managePockets.transfers.review.itemLog.to.details\">\n    Pocket\n  </div>\n</ng-template>\n\n<ng-template #accountSlot>\n  <div class=\"break-word bb-highlight bb-block bb-block--xs\">\n    {{partialNewPayment?.account?.name}}\n  </div>\n  <div class=\"bb-text-support bb-subtitle break-word contextual-alternates-off\">\n    {{partialNewPayment?.account?.number}}\n  </div>\n</ng-template>", components: [{ type: i3.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i3$1.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsTransfersReviewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-transfers-review',
                    templateUrl: './manage-pockets-transfers-review.component.html',
                }]
        }], propDecorators: { awaitingTransferResponse: [{
                type: Input
            }], newTransfer: [{
                type: Output
            }] } });

class ManagePocketsTransfersWrapperComponent extends ManagePocketsBaseWrapperComponent {
    constructor() {
        super(...arguments);
        this.newTransfer = new EventEmitter();
        this.transferTypesEnum = TransferTypeEnum;
        this.pocketLocalizations = POCKET_LOCALIZATIONS;
    }
    ngOnInit() {
        this.partialNewPayment = this.generatePaymentInfo();
    }
    accountChange(account) {
        this.partialNewPayment = Object.assign(Object.assign({}, this.partialNewPayment), { account });
    }
    goNext(paymentData) {
        this.partialNewPayment = paymentData;
        this.goToStep(this.currentStep + 1);
    }
    performTransfer(paymentInfo) {
        this.newTransfer.emit(paymentInfo);
    }
    generatePaymentInfo() {
        var _a;
        return Object.assign(Object.assign({}, this.partialNewPayment), { account: (_a = this.accountList) === null || _a === void 0 ? void 0 : _a[0], currencyCode: this.journeyCurrency, pocketInfo: this.pocketInfo });
    }
}
ManagePocketsTransfersWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsTransfersWrapperComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
ManagePocketsTransfersWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsTransfersWrapperComponent, selector: "bb-manage-pockets-transfers-wrapper", inputs: { accountList: "accountList", awaitingTransferResponse: "awaitingTransferResponse", partialNewPayment: "partialNewPayment", pocketInfo: "pocketInfo" }, outputs: { newTransfer: "newTransfer" }, usesInheritance: true, ngImport: i0, template: "<bb-manage-pockets-transfers-details\n  *ngIf=\"currentStep === 1\"\n  [accountList]=\"accountList\"\n  [journeyCurrency]=\"journeyCurrency\"\n  [partialNewPayment]=\"partialNewPayment\"\n  (accountChange)=\"accountChange($event)\"\n  (cancel)=\"showAbortDialog()\"\n  (next)=\"goNext($event)\"\n></bb-manage-pockets-transfers-details>\n<bb-manage-pockets-transfers-review\n  *ngIf=\"currentStep === 2\"\n  [awaitingTransferResponse]=\"awaitingTransferResponse\"\n  [journeyCurrency]=\"journeyCurrency\"\n  [partialNewPayment]=\"partialNewPayment\"\n  [pocketInfo]=\"pocketInfo\"\n  (back)=\"goBack()\"\n  (cancel)=\"showAbortDialog()\"\n  (newTransfer)=\"performTransfer($event)\"\n></bb-manage-pockets-transfers-review>\n\n<bb-modal-ui [isOpen]=\"showDialog\" (cancel)=\"closeAbortDialog()\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <div class=\"bb-stack\">\n        <div class=\"bb-stack__item\">\n          <span class=\"modal-title\">\n            {{ partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.transfers.wrapper.addMoneyModalHeader : pocketLocalizations.transfers.wrapper.withdrawMoneyModalHeader }}\n          </span>\n          <ng-container *ngIf=\"partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD; then addMoneyModalHeader; else withdrawMoneyModalHeader\"></ng-container>\n        </div>\n        <div class=\"bb-stack__item--push-right\">\n          <button\n            bbButton\n            (click)=\"closeAbortDialog()\"\n            class=\"bb-stack__item-sm\"\n            color=\"unstyled\"\n            aria-label=\"close dialog\"\n            i18n-aria-label=\"close dialog button@@managePockets.transfers.wrapper.modal.button.close\"\n          >\n            <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n          </button>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <span>\n        {{ partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.transfers.wrapper.addMoneyModalBody : pocketLocalizations.transfers.wrapper.withdrawMoneyModalBody }}\n      </span>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          (click)=\"confirmAbort()\"\n        >\n          {{ partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.transfers.wrapper.addMoneyModalConfirm : pocketLocalizations.transfers.wrapper.withdrawMoneyModalConfirm }}\n        </button>\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          (click)=\"closeAbortDialog()\"\n          i18n=\"Keep it@@managePockets.transfers.wrapper.modal.button.cancel\"\n        >\n          Keep it\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>", components: [{ type: ManagePocketsTransfersDetailsComponent, selector: "bb-manage-pockets-transfers-details", inputs: ["accountList", "journeyCurrency"], outputs: ["accountChange", "next"] }, { type: ManagePocketsTransfersReviewComponent, selector: "bb-manage-pockets-transfers-review", inputs: ["awaitingTransferResponse"], outputs: ["newTransfer"] }, { type: i6$1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i6$1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i6$1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i6$1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6$1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6$1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i6$1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsTransfersWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-transfers-wrapper',
                    templateUrl: './manage-pockets-transfers-wrapper.component.html',
                }]
        }], propDecorators: { accountList: [{
                type: Input
            }], awaitingTransferResponse: [{
                type: Input
            }], partialNewPayment: [{
                type: Input
            }], pocketInfo: [{
                type: Input
            }], newTransfer: [{
                type: Output
            }] } });

const components = [
    ManagePocketsTransfersReviewComponent,
    ManagePocketsTransfersWrapperComponent,
    ManagePocketsTransfersDetailsComponent,
];
const modules = [
    AccountSelectorModule,
    AmountInputModule,
    InputValidationMessageModule,
    FormsModule,
    LoadButtonModule,
    ModalModule,
    ReactiveFormsModule,
];
class ManagePocketsTransfersModule {
}
ManagePocketsTransfersModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsTransfersModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ManagePocketsTransfersModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsTransfersModule, declarations: [ManagePocketsTransfersReviewComponent,
        ManagePocketsTransfersWrapperComponent,
        ManagePocketsTransfersDetailsComponent], imports: [AccountSelectorModule,
        AmountInputModule,
        InputValidationMessageModule,
        FormsModule,
        LoadButtonModule,
        ModalModule,
        ReactiveFormsModule, CommonModule,
        ManagePocketsCommonModule, i1.BackbaseCoreModule], exports: [ManagePocketsTransfersReviewComponent,
        ManagePocketsTransfersWrapperComponent,
        ManagePocketsTransfersDetailsComponent, AccountSelectorModule,
        AmountInputModule,
        InputValidationMessageModule,
        FormsModule,
        LoadButtonModule,
        ModalModule,
        ReactiveFormsModule] });
ManagePocketsTransfersModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsTransfersModule, imports: [[
            ...modules,
            CommonModule,
            ManagePocketsCommonModule,
            BackbaseCoreModule.withConfig({
                classMap: { ManagePocketsTransfersWrapperComponent },
            }),
        ], AccountSelectorModule,
        AmountInputModule,
        InputValidationMessageModule,
        FormsModule,
        LoadButtonModule,
        ModalModule,
        ReactiveFormsModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsTransfersModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components],
                    imports: [
                        ...modules,
                        CommonModule,
                        ManagePocketsCommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { ManagePocketsTransfersWrapperComponent },
                        }),
                    ],
                    exports: [...components, ...modules],
                }]
        }] });

class ManagePocketsCreateViewComponent {
    constructor(managePocketsService, router, route, cd, notificationService, configService) {
        this.managePocketsService = managePocketsService;
        this.router = router;
        this.route = route;
        this.cd = cd;
        this.notificationService = notificationService;
        this.configService = configService;
        this.awaitingCreateResponse = false;
    }
    abort() {
        this.navigateToList();
    }
    saveNewPocket(newPocketItem) {
        this.awaitingCreateResponse = true;
        const onSuccess = () => {
            this.awaitingCreateResponse = false;
            this.cd.markForCheck();
            this.pushNotification($localize `:Success pocket creation toast message@@managePockets.create.toast.success.message:Your "${newPocketItem.name}:pocket name:" pocket is created.`, 'success', $localize `:Success pocket creation toast header@@managePockets.create.toast.success.header:Your Pocket is Ready!`);
            this.navigateToList();
        };
        const onError = () => {
            this.awaitingCreateResponse = false;
            this.cd.markForCheck();
            this.pushNotification($localize `:Error pocket creation toast message@@managePockets.create.toast.error.message:Unable to proceed, please try again.`, 'error', $localize `:Error pocket creation toast header@@managePockets.create.toast.error.header:Failed to Create Pocket`);
        };
        this.managePocketsService.postPocket(newPocketItem).subscribe(onSuccess, onError);
    }
    navigateToList() {
        this.router.navigate(['../list'], { relativeTo: this.route });
    }
    pushNotification(message, modifier, header) {
        this.notificationService.showNotification({
            header,
            message,
            modifier,
            dismissible: true,
            ttl: 5000,
        });
    }
}
ManagePocketsCreateViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsCreateViewComponent, deps: [{ token: ManagePocketsService }, { token: i3$3.Router }, { token: i3$3.ActivatedRoute }, { token: i0.ChangeDetectorRef }, { token: i3$4.NotificationService }, { token: ManagePocketsJourneyConfigService }], target: i0.ɵɵFactoryTarget.Component });
ManagePocketsCreateViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsCreateViewComponent, selector: "bb-manage-pockets-create-view", ngImport: i0, template: "<div class=\"heading-widget bb-heading-widget px-0\" *ngIf=\"configService.displayHeaders\">\n  <bb-header-ui\n    headingType=\"h1\"\n    headingClasses=\"bb-heading-widget__heading\"\n    heading=\"Create Pocket\"\n    i18n-heading=\"Create Pocket heading@@managePockets.createView.heading.title\"\n  ></bb-header-ui>\n</div>\n\n<bb-manage-pockets-create-wrapper\n  (cancel)=\"abort()\"\n  (newPocket)=\"saveNewPocket($event)\"\n  [pocketImageList]=\"configService.pocketImageList\"\n  [journeyCurrency]=\"configService.journeyCurrency\"\n  [awaitingCreateResponse]=\"awaitingCreateResponse\"\n></bb-manage-pockets-create-wrapper>", components: [{ type: i5.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: ManagePocketsCreateWrapperComponent, selector: "bb-manage-pockets-create-wrapper", inputs: ["pocketImageList", "awaitingCreateResponse"], outputs: ["newPocket"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsCreateViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-create-view',
                    templateUrl: './manage-pockets-create-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: ManagePocketsService }, { type: i3$3.Router }, { type: i3$3.ActivatedRoute }, { type: i0.ChangeDetectorRef }, { type: i3$4.NotificationService }, { type: ManagePocketsJourneyConfigService }]; } });

class ManagePocketsListViewComponent {
    constructor(managePocketsService, assetsService, router, route, configService) {
        this.managePocketsService = managePocketsService;
        this.assetsService = assetsService;
        this.router = router;
        this.route = route;
        this.configService = configService;
        /**
         * Api Error status observable. Will return `true` is API fails for any reason
         */
        this.apiErrorStatus$ = this.managePocketsService.pocketListApiError$;
        this.resolveAsset = this.assetsService.createAssetsResolver({
            widgetName: 'bb-manage-pockets-journey-ang',
            getURIFromAssetID: (assetId) => assetId,
        });
    }
    ngOnInit() {
        this.refreshPocketList();
    }
    refreshPocketList() {
        this.pocketList$ = this.managePocketsService.retrievePocketList();
    }
    goToCreatePocket() {
        this.router.navigate(['../create'], { relativeTo: this.route });
    }
    goToPocketTransfer(pocketTransferItem) {
        this.router.navigate(['../transfer'], { state: pocketTransferItem, relativeTo: this.route });
    }
    get imageEmptyStateUrl() {
        return this.resolveAsset('manage-pockets-empty-state-img.webp');
    }
}
ManagePocketsListViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsListViewComponent, deps: [{ token: ManagePocketsService }, { token: i1.AssetsService }, { token: i3$3.Router }, { token: i3$3.ActivatedRoute }, { token: ManagePocketsJourneyConfigService }], target: i0.ɵɵFactoryTarget.Component });
ManagePocketsListViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsListViewComponent, selector: "bb-manage-pockets-list-view", ngImport: i0, template: "<div class=\"heading-widget bb-heading-widget px-0\" *ngIf=\"configService.displayHeaders\">\n  <bb-header-ui\n    headingType=\"h1\"\n    headingClasses=\"bb-heading-widget__heading\"\n    heading=\"Pockets\"\n    i18n-heading=\"Pockets heading@@managePockets.listView.heading.title\"\n  ></bb-header-ui>\n</div>\n\n<bb-manage-pockets-list-wrapper\n  *ngIf=\"pocketList$ | async as pocketList; else loadingState\"\n  [pocketList]=\"pocketList\"\n  [pocketListApiError]=\"apiErrorStatus$ | async\"\n  [emptyStateImageUrl]=\"imageEmptyStateUrl | async\"\n  (createPocket)=\"goToCreatePocket()\"\n  (pocketTransfer)=\"goToPocketTransfer($event)\"\n  (refreshData)=\"refreshPocketList()\"\n></bb-manage-pockets-list-wrapper>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui \n    loaderSize=\"lg\" \n    text=\"Loading your pockets...\"\n    i18n-text=\"Loading your pockets...|Text for the loading indicator@@managePockets.listView.loading.indicator.text\"\n  ></bb-loading-indicator-ui>\n</ng-template>", components: [{ type: i5.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: ManagePocketsListWrapperComponent, selector: "bb-manage-pockets-list-wrapper", inputs: ["pocketList", "pocketListApiError", "emptyStateImageUrl"], outputs: ["refreshData", "createPocket", "pocketTransfer"] }, { type: i7$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i6.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsListViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-list-view',
                    templateUrl: './manage-pockets-list-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: ManagePocketsService }, { type: i1.AssetsService }, { type: i3$3.Router }, { type: i3$3.ActivatedRoute }, { type: ManagePocketsJourneyConfigService }]; } });

var PaymentTypeEnum;
(function (PaymentTypeEnum) {
    PaymentTypeEnum["POCKET_TRANSFER"] = "POCKET_TRANSFER";
})(PaymentTypeEnum || (PaymentTypeEnum = {}));
var PaymentRoleEnum;
(function (PaymentRoleEnum) {
    PaymentRoleEnum["CREDITOR"] = "CREDITOR";
    PaymentRoleEnum["DEBTOR"] = "DEBTOR";
})(PaymentRoleEnum || (PaymentRoleEnum = {}));
var SchemeNameTypeEnum;
(function (SchemeNameTypeEnum) {
    SchemeNameTypeEnum["IBAN"] = "IBAN";
    SchemeNameTypeEnum["BBAN"] = "BBAN";
    SchemeNameTypeEnum["ID"] = "ID";
    SchemeNameTypeEnum["EXTERNAL_ID"] = "EXTERNAL_ID";
    SchemeNameTypeEnum["EMAIL"] = "EMAIL";
    SchemeNameTypeEnum["MOBILE"] = "MOBILE";
})(SchemeNameTypeEnum || (SchemeNameTypeEnum = {}));
var PaymentOrderNamespace;
(function (PaymentOrderNamespace) {
    function buildPaymentOrderPostRequest(paymentInfo) {
        var _a, _b, _c, _d, _e, _f, _g;
        return {
            paymentOrdersPost: {
                paymentType: PaymentTypeEnum.POCKET_TRANSFER,
                batchBooking: false,
                requestedExecutionDate: pocketFormatDate(),
                originatorAccount: {
                    identification: {
                        identification: ((_a = paymentInfo.account) === null || _a === void 0 ? void 0 : _a.id) || '',
                        schemeName: SchemeNameTypeEnum.ID,
                    },
                },
                transferTransactionInformation: {
                    counterparty: {
                        name: ((_c = (_b = paymentInfo.pocketInfo) === null || _b === void 0 ? void 0 : _b.pocket) === null || _c === void 0 ? void 0 : _c.name) || '',
                        role: ((_d = paymentInfo.pocketInfo) === null || _d === void 0 ? void 0 : _d.transferType) === TransferTypeEnum.ADD
                            ? PaymentRoleEnum.CREDITOR
                            : PaymentRoleEnum.DEBTOR,
                    },
                    counterpartyAccount: {
                        identification: {
                            identification: ((_f = (_e = paymentInfo.pocketInfo) === null || _e === void 0 ? void 0 : _e.pocket) === null || _f === void 0 ? void 0 : _f.arrangementId) || '',
                            schemeName: SchemeNameTypeEnum.ID,
                        },
                    },
                    instructedAmount: {
                        amount: ((_g = paymentInfo === null || paymentInfo === void 0 ? void 0 : paymentInfo.amount) === null || _g === void 0 ? void 0 : _g.toString()) || '',
                        currencyCode: (paymentInfo === null || paymentInfo === void 0 ? void 0 : paymentInfo.currencyCode) || '',
                    },
                },
            },
        };
    }
    PaymentOrderNamespace.buildPaymentOrderPostRequest = buildPaymentOrderPostRequest;
})(PaymentOrderNamespace || (PaymentOrderNamespace = {}));

class PaymentOrderService {
    constructor(paymentOrderService) {
        this.paymentOrderService = paymentOrderService;
    }
    transferMoney(paymentInfo) {
        const payload = PaymentOrderNamespace.buildPaymentOrderPostRequest(paymentInfo);
        return this.paymentOrderService.postPaymentOrders(payload);
    }
}
PaymentOrderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrderService, deps: [{ token: i1$5.PaymentOrdersHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
PaymentOrderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1$5.PaymentOrdersHttpService }]; } });

class ManagePocketsTransfersViewComponent {
    constructor(managePocketsService, paymentOrderService, router, route, cd, notificationService, configService) {
        this.managePocketsService = managePocketsService;
        this.paymentOrderService = paymentOrderService;
        this.router = router;
        this.route = route;
        this.cd = cd;
        this.notificationService = notificationService;
        this.configService = configService;
        this.awaitingTransferResponse = false;
        this.pocketLocalizations = POCKET_LOCALIZATIONS;
        this.transferTypesEnum = TransferTypeEnum;
        const nav = this.router.getCurrentNavigation();
        this.pocketInfo = nav === null || nav === void 0 ? void 0 : nav.extras.state;
    }
    ngOnInit() {
        if (!this.pocketInfo) {
            console.error(`"pocketInfo" input is required in "ManagePocketsTransfersViewComponent". Redirecting to Pocket List`);
            this.navigateToList();
        }
        this.refreshAccountList();
    }
    refreshAccountList() {
        this.accountList$ = this.managePocketsService.retrieveAccountList();
    }
    abort() {
        this.navigateToList();
    }
    performTransfer(paymentInfo) {
        this.awaitingTransferResponse = true;
        const notificationLocalizations = this.generateNotificationLocalizations(paymentInfo);
        const onSuccess = () => {
            this.awaitingTransferResponse = false;
            const notificationMessage = notificationLocalizations.success.message;
            const notificationHeader = notificationLocalizations.success.header;
            this.cd.markForCheck();
            this.pushNotification(notificationMessage, 'success', notificationHeader);
            this.navigateToList();
        };
        const onError = () => {
            this.awaitingTransferResponse = false;
            const notificationMessage = notificationLocalizations.error.message;
            const notificationHeader = notificationLocalizations.error.header;
            this.cd.markForCheck();
            this.pushNotification(notificationMessage, 'error', notificationHeader);
        };
        this.paymentOrderService.transferMoney(paymentInfo).subscribe(onSuccess, onError);
    }
    navigateToList() {
        this.router.navigate(['../list'], { relativeTo: this.route });
    }
    pushNotification(message, modifier, header) {
        this.notificationService.showNotification({
            header,
            message,
            modifier,
            dismissible: true,
            ttl: 5000,
        });
    }
    generateNotificationLocalizations(paymentInfo) {
        var _a, _b, _c;
        const addMoneyLocalizations = {
            success: {
                header: $localize `:Success pocket transfer toast header@@managePockets.transfer.toast.success.header:Transfer Successful!`,
                message: $localize `:Success pocket transfer toast message@@managePockets.transfer.toast.success.add.message:You've just transfered ${paymentInfo.currencyCode} ${paymentInfo.amount} to your '${(_a = paymentInfo.pocketInfo) === null || _a === void 0 ? void 0 : _a.pocket.name}' pocket.`,
            },
            error: {
                header: $localize `:Error pocket creation toast header@@managePockets.transfer.toast.error.header.add:Failed to Add Money`,
                message: $localize `:Error pocket creation toast message@@managePockets.transfer.toast.error.message.add:Unable to proceed, please try again.`,
            },
        };
        const withdrawMoneyLocalizations = {
            success: {
                header: $localize `:Success pocket withdraw toast header@@managePockets.transfer.toast.success.header:Withdrawal Successful!`,
                message: $localize `:Success pocket withdraw toast message@@managePockets.transfer.toast.success.withdraw.message:You've just withdrawn ${paymentInfo.currencyCode} ${paymentInfo.amount} from your '${(_b = paymentInfo.pocketInfo) === null || _b === void 0 ? void 0 : _b.pocket.name}' pocket.`,
            },
            error: {
                header: $localize `:Error pocket creation toast header@@managePockets.transfer.toast.error.header.withdraw:Failed to Withdraw Money`,
                message: $localize `:Error pocket creation toast message@@managePockets.transfer.toast.error.message.withdraw:Unable to proceed, please try again.`,
            },
        };
        return ((_c = paymentInfo === null || paymentInfo === void 0 ? void 0 : paymentInfo.pocketInfo) === null || _c === void 0 ? void 0 : _c.transferType) === this.transferTypesEnum.ADD
            ? addMoneyLocalizations
            : withdrawMoneyLocalizations;
    }
}
ManagePocketsTransfersViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsTransfersViewComponent, deps: [{ token: ManagePocketsService }, { token: PaymentOrderService }, { token: i3$3.Router }, { token: i3$3.ActivatedRoute }, { token: i0.ChangeDetectorRef }, { token: i3$4.NotificationService }, { token: ManagePocketsJourneyConfigService }], target: i0.ɵɵFactoryTarget.Component });
ManagePocketsTransfersViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsTransfersViewComponent, selector: "bb-manage-pockets-list-view", ngImport: i0, template: "<div class=\"heading-widget bb-heading-widget px-0\" *ngIf=\"configService.displayHeaders\">\n  <bb-header-ui\n    headingType=\"h1\"\n    headingClasses=\"bb-heading-widget__heading\"\n    [heading]=\"pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.views.transfers.addMoneyHeader : pocketLocalizations.views.transfers.withdrawMoneyHeader\"\n  ></bb-header-ui>\n</div>\n\n<div class=\"bb-card bb-card--lg\">\n  <div class=\"bb-card__body\">\n    <bb-manage-pockets-transfers-wrapper\n      *ngIf=\"accountList$ | async as accountList; else loadingState\"\n      [accountList]=\"accountList\"\n      [awaitingTransferResponse]=\"awaitingTransferResponse\"\n      [journeyCurrency]=\"configService.journeyCurrency\"\n      [pocketInfo]=\"pocketInfo\"\n      (cancel)=\"abort()\"\n      (newTransfer)=\"performTransfer($event)\"\n    ></bb-manage-pockets-transfers-wrapper>\n  </div>\n</div>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui\n    loaderSize=\"lg\"\n    text=\"Loading...\"\n    i18n-text=\"Loading...|Text for the loading indicator@@managePockets.transfersView.loading.indicator.text\"    \n  ></bb-loading-indicator-ui>\n</ng-template>", components: [{ type: i5.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: ManagePocketsTransfersWrapperComponent, selector: "bb-manage-pockets-transfers-wrapper", inputs: ["accountList", "awaitingTransferResponse", "partialNewPayment", "pocketInfo"], outputs: ["newTransfer"] }, { type: i7$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i6.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsTransfersViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-list-view',
                    templateUrl: './manage-pockets-transfers-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: ManagePocketsService }, { type: PaymentOrderService }, { type: i3$3.Router }, { type: i3$3.ActivatedRoute }, { type: i0.ChangeDetectorRef }, { type: i3$4.NotificationService }, { type: ManagePocketsJourneyConfigService }]; } });

const defaultRoute = {
    path: '',
    component: ManagePocketsJourneyComponent,
    children: [
        {
            path: '',
            redirectTo: 'list',
            pathMatch: 'full',
        },
        {
            path: 'list',
            data: { title: 'Manage Pockets List' },
            component: ManagePocketsListViewComponent,
        },
        {
            path: 'create',
            data: { title: 'Create Pocket' },
            component: ManagePocketsCreateViewComponent,
        },
        {
            path: 'transfer',
            data: { title: 'Money Transfer' },
            component: ManagePocketsTransfersViewComponent,
        },
    ],
};
class ManagePocketsJourneyModule {
    static forRoot(data = { route: defaultRoute }) {
        return {
            ngModule: ManagePocketsJourneyModule,
            providers: [provideRoutes([data.route])],
        };
    }
}
ManagePocketsJourneyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsJourneyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ManagePocketsJourneyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsJourneyModule, declarations: [ManagePocketsJourneyComponent,
        ManagePocketsListViewComponent,
        ManagePocketsCreateViewComponent,
        ManagePocketsTransfersViewComponent], imports: [CommonModule, i1.BackbaseCoreModule, RouterModule,
        HeaderModule,
        ManagePocketsListModule,
        ManagePocketsCreateModule,
        ManagePocketsTransfersModule] });
ManagePocketsJourneyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsJourneyModule, imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                classMap: { ManagePocketsJourneyComponent },
            }),
            RouterModule,
            HeaderModule,
            ManagePocketsListModule,
            ManagePocketsCreateModule,
            ManagePocketsTransfersModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsJourneyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        ManagePocketsJourneyComponent,
                        ManagePocketsListViewComponent,
                        ManagePocketsCreateViewComponent,
                        ManagePocketsTransfersViewComponent,
                    ],
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { ManagePocketsJourneyComponent },
                        }),
                        RouterModule,
                        HeaderModule,
                        ManagePocketsListModule,
                        ManagePocketsCreateModule,
                        ManagePocketsTransfersModule,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AccessibilityKeyboardDirective, DynamicIdDirective, ManagePocketsBaseWrapperComponent, ManagePocketsCardComponent, ManagePocketsCommonModule, ManagePocketsConfirmationComponent, ManagePocketsCreateBaseStep, ManagePocketsCreateComponent, ManagePocketsCreateModule, ManagePocketsCreateViewComponent, ManagePocketsCreateWrapperComponent, ManagePocketsDetailsComponent, ManagePocketsEmptyListComponent, ManagePocketsGoalsComponent, ManagePocketsJourneyComponent, ManagePocketsJourneyConfigService, ManagePocketsJourneyConfigurationToken, ManagePocketsJourneyModule, ManagePocketsListComponent, ManagePocketsListModule, ManagePocketsListViewComponent, ManagePocketsListWrapperComponent, ManagePocketsService, RegexReplacePipe };
//# sourceMappingURL=backbase-manage-pockets-journey-ang.js.map
