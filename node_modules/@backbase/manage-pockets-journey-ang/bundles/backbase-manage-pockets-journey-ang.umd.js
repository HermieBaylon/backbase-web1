(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@backbase/foundation-ang/core'), require('@backbase/ui-ang/dropdown-menu'), require('@backbase/ui-ang/amount'), require('@backbase/ui-ang/progressbar'), require('@backbase/ui-ang/icon'), require('@angular/common'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/empty-state'), require('rxjs'), require('rxjs/operators'), require('@backbase/data-ang/pocket-tailor'), require('@backbase/data-ang/arrangements'), require('@backbase/ui-ang/load-button'), require('@backbase/ui-ang/stepper'), require('@angular/forms'), require('@backbase/ui-ang/input-text'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/amount-input'), require('@backbase/ui-ang/input-datepicker'), require('@angular/router'), require('@angular/localize/init'), require('@backbase/ui-ang/header'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/account-selector'), require('@backbase/ui-ang/notification'), require('@backbase/data-ang/payment-order')) :
    typeof define === 'function' && define.amd ? define('@backbase/manage-pockets-journey-ang', ['exports', '@angular/core', '@backbase/foundation-ang/core', '@backbase/ui-ang/dropdown-menu', '@backbase/ui-ang/amount', '@backbase/ui-ang/progressbar', '@backbase/ui-ang/icon', '@angular/common', '@backbase/ui-ang/button', '@backbase/ui-ang/empty-state', 'rxjs', 'rxjs/operators', '@backbase/data-ang/pocket-tailor', '@backbase/data-ang/arrangements', '@backbase/ui-ang/load-button', '@backbase/ui-ang/stepper', '@angular/forms', '@backbase/ui-ang/input-text', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/modal', '@backbase/ui-ang/amount-input', '@backbase/ui-ang/input-datepicker', '@angular/router', '@angular/localize/init', '@backbase/ui-ang/header', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/account-selector', '@backbase/ui-ang/notification', '@backbase/data-ang/payment-order'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["manage-pockets-journey-ang"] = {}), global.ng.core, global.i1, global.i2, global.i3, global.i4, global.i1$1, global.ng.common, global.i7, global.i4$1, global.rxjs, global.rxjs.operators, global.i1$2, global.i2$1, global.i3$1, global.i1$4, global.ng.forms, global.i3$2, global.i4$2, global.i6$1, global.i2$2, global.i4$3, global.ng.router, global.ng.localize.init, global.i5, global.i7$1, global.i2$3, global.i3$4, global.i1$5));
})(this, (function (exports, i0, i1, i2, i3, i4, i1$1, i6, i7, i4$1, rxjs, operators, i1$2, i2$1, i3$1, i1$4, i1$3, i3$2, i4$2, i6$1, i2$2, i4$3, i3$3, init, i5, i7$1, i2$3, i3$4, i1$5) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i4__namespace$3 = /*#__PURE__*/_interopNamespace(i4$1);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$4);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i3__namespace$2 = /*#__PURE__*/_interopNamespace(i3$2);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$2);
    var i6__namespace$1 = /*#__PURE__*/_interopNamespace(i6$1);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i4__namespace$2 = /*#__PURE__*/_interopNamespace(i4$3);
    var i3__namespace$3 = /*#__PURE__*/_interopNamespace(i3$3);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i7__namespace$1 = /*#__PURE__*/_interopNamespace(i7$1);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);
    var i3__namespace$4 = /*#__PURE__*/_interopNamespace(i3$4);
    var i1__namespace$5 = /*#__PURE__*/_interopNamespace(i1$5);

    var ManagePocketsBaseWrapperComponent = /** @class */ (function () {
        function ManagePocketsBaseWrapperComponent() {
            this.cancel = new i0.EventEmitter();
            this.currentStep = 1;
            this.showDialog = false;
        }
        ManagePocketsBaseWrapperComponent.prototype.confirmAbort = function () {
            this.cancel.emit();
            this.showDialog = false;
        };
        ManagePocketsBaseWrapperComponent.prototype.showAbortDialog = function () {
            this.showDialog = true;
        };
        ManagePocketsBaseWrapperComponent.prototype.closeAbortDialog = function () {
            this.showDialog = false;
        };
        ManagePocketsBaseWrapperComponent.prototype.goBack = function () {
            this.goToStep(this.currentStep - 1);
        };
        ManagePocketsBaseWrapperComponent.prototype.goToStep = function (value) {
            this.currentStep = value;
        };
        return ManagePocketsBaseWrapperComponent;
    }());
    ManagePocketsBaseWrapperComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsBaseWrapperComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    ManagePocketsBaseWrapperComponent.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsBaseWrapperComponent, inputs: { journeyCurrency: "journeyCurrency" }, outputs: { cancel: "cancel" }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsBaseWrapperComponent, decorators: [{
                type: i0.Directive
            }], propDecorators: { journeyCurrency: [{
                    type: i0.Input
                }], cancel: [{
                    type: i0.Output
                }] } });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    function pocketFormatDate(date) {
        if (date === void 0) { date = new Date(); }
        date.setMinutes(date.getMinutes() - date.getTimezoneOffset());
        return date.toISOString().slice(0, 10);
    }

    var TransferTypeEnum;
    (function (TransferTypeEnum) {
        TransferTypeEnum["ADD"] = "ADD";
        TransferTypeEnum["WITHDRAW"] = "WITHDRAW";
    })(TransferTypeEnum || (TransferTypeEnum = {}));
    var PocketNamespace;
    (function (PocketNamespace) {
        function buildNewPocketPostRequest(pocketItem) {
            var _c = pocketItem.name, name = _c === void 0 ? '' : _c, _d = pocketItem.icon, icon = _d === void 0 ? '' : _d, _e = pocketItem.goal, goal = _e === void 0 ? {} : _e, others = __rest(pocketItem, ["name", "icon", "goal"]);
            return {
                pocketPostRequest: Object.assign({ name: name, icon: icon, goal: formatGoal(goal) }, others),
            };
        }
        PocketNamespace.buildNewPocketPostRequest = buildNewPocketPostRequest;
        function formatGoal(pocketGoal) {
            var _a, _b;
            var amount = ((_a = pocketGoal === null || pocketGoal === void 0 ? void 0 : pocketGoal.amountCurrency) === null || _a === void 0 ? void 0 : _a.amount) || undefined;
            var currencyCode = ((_b = pocketGoal === null || pocketGoal === void 0 ? void 0 : pocketGoal.amountCurrency) === null || _b === void 0 ? void 0 : _b.currencyCode) || undefined;
            var deadline = (pocketGoal === null || pocketGoal === void 0 ? void 0 : pocketGoal.deadline) ? pocketFormatDate(new Date(pocketGoal.deadline)) : undefined;
            var amountCurrency = amount && currencyCode ? { amount: amount, currencyCode: currencyCode } : undefined;
            return Object.assign(Object.assign({}, (!!deadline ? { deadline: deadline } : {})), (!!amountCurrency ? { amountCurrency: amountCurrency } : {}));
        }
    })(PocketNamespace || (PocketNamespace = {}));

    var ManagePocketsCardComponent = /** @class */ (function () {
        function ManagePocketsCardComponent(assetsService) {
            this.assetsService = assetsService;
            this.pocketTransfer = new i0.EventEmitter();
            this.dropdownMenuOptions = [
                {
                    label: $localize(templateObject_1$3 || (templateObject_1$3 = __makeTemplateObject([":Add Money dropdown option@@managePockets.common.card.dropdown.addMoney.label:Add Money"], [":Add Money dropdown option@@managePockets.common.card.dropdown.addMoney.label:Add Money"]))),
                    value: TransferTypeEnum.ADD,
                },
                {
                    label: $localize(templateObject_2$3 || (templateObject_2$3 = __makeTemplateObject([":Withdraw Money dropdown option@@managePockets.common.card.dropdown.withdrawMoney.label:Withdraw Money"], [":Withdraw Money dropdown option@@managePockets.common.card.dropdown.withdrawMoney.label:Withdraw Money"]))),
                    value: TransferTypeEnum.WITHDRAW,
                },
            ];
            this.dropdownMenuOptionsLabel = this.dropdownMenuOptions.map(function (item) { return item.label; });
            this.resolveAsset = this.assetsService.createAssetsResolver({
                widgetName: 'bb-manage-pockets-journey-ang',
                getURIFromAssetID: function (assetId) { return assetId; },
            });
        }
        ManagePocketsCardComponent.prototype.ngOnInit = function () {
            this.pocketImage = this.resolveAsset(this.pocket.icon + "-img.webp");
        };
        ManagePocketsCardComponent.prototype.onButtonDropdownSelect = function (label) {
            var item = this.dropdownMenuOptions.find(function (option) { return option.label === label; });
            if (item && this.pocket) {
                this.pocketTransfer.emit({
                    pocket: this.pocket,
                    transferType: item.value,
                });
            }
        };
        return ManagePocketsCardComponent;
    }());
    ManagePocketsCardComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsCardComponent, deps: [{ token: i1__namespace.AssetsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ManagePocketsCardComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsCardComponent, selector: "bb-manage-pockets-card", inputs: { pocket: "pocket" }, outputs: { pocketTransfer: "pocketTransfer" }, ngImport: i0__namespace, template: "<div class=\"bb-card bb-card--lg\">\n  <div class=\"bb-card__body\">\n    <div class=\"bb-stack bb-stack--wrap\">\n      <div class=\"bb-stack__item bb-stack__item--spacing-lg bb-manage-pockets-common-pocket-card__pocket-image-container\">\n        <img \n          [src]=\"pocketImage | async\" \n          alt=\"Representation of the selected pocket type\" \n          i18n-alt=\"Pocket image|changes according to the type of pocket@@managePockets.common.card.pocketImage\" \n          class=\"bb-manage-pockets-common-pocket-card__pocket-image\"\n        >\n      </div>\n      <div class=\"bb-stack__break bb-stack__break--sm-down\"></div>\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <div class=\"bb-block bb-block--md\">\n          <div class=\"bb-stack\">\n            <div class=\"bb-stack__item\">\n              <h2 class=\"bb-block bb-block--no-margin\">\n                {{pocket?.name}}\n              </h2>\n            </div>\n            <div class=\"bb-stack__item bb-stack__item--push-right\">\n              <bb-dropdown-menu-ui\n                icon=\"ellipsis-h\"\n                btnColor=\"link-dark\"\n                [btnCircle]=\"true\"\n                container=\"body\"\n                [options]=\"dropdownMenuOptionsLabel\"\n                (select)=\"onButtonDropdownSelect($event)\"\n              ></bb-dropdown-menu-ui>\n            </div>\n          </div>\n        </div>\n        <div class=\"bb-block bb-block--sm bb-subtitle bb-text-support\">\n          <span i18n=\"Available Balance|Current stored balance in pocket@@managePockets.common.card.availableBalance\">\n            Available Balance\n          </span\n          ><span *ngIf=\"!!pocket?.goal?.amountCurrency?.amount\" i18n=\"Pocket Goal|Expected amount to reach to complete pocket@@managePockets.common.card.goalAmount\">\n            / Goal Amount\n          </span>\n        </div>\n        <div class=\"bb-block\" [ngClass]=\"{ 'bb-block--xl': pocket?.goal?.progress != undefined }\">\n          <span class=\"bb-heading-2\">\n            <bb-amount-ui\n              [amount]=\"pocket?.balance?.amount\"\n              [currency]=\"pocket?.balance?.currencyCode\"\n            ></bb-amount-ui>\n          </span>\n          <span class=\"bb-manage-pockets-common-pocket-card__goal-amount bb-heading-3 bb-text-support\" *ngIf=\"!!pocket?.goal?.amountCurrency?.amount\">\n            /\n            <bb-amount-ui\n              [amount]=\"pocket?.goal?.amountCurrency?.amount\"\n              [currency]=\"pocket?.goal?.amountCurrency?.currencyCode\"\n              [decimalPlaces]=\"0\"\n            ></bb-amount-ui>\n          </span>\n        </div>\n        <ng-container *ngIf=\"!!pocket?.goal\">\n          <div class=\"bb-block bb-block--sm\" *ngIf=\"!!pocket?.goal?.progress || pocket?.goal?.progress == 0\">\n            <bb-progressbar-ui\n              [type]=\"pocket?.goal?.progress != '100' ? 'primary' : 'success'\"\n              height=\"8px\"\n              [value]=\"pocket?.goal?.progress\"\n            >\n            </bb-progressbar-ui>\n          </div>\n          <div class=\"bb-block\">\n            <div class=\"bb-stack\">\n              <div class=\"bb-stack__item\" *ngIf=\"!!pocket?.goal?.progress || pocket?.goal?.progress == 0\">\n                <div [ngClass]=\"pocket?.goal?.progress != 100 ? 'bb-text-primary' : 'bb-text-success'\">\n                  <span class=\"bb-manage-pockets-common-pocket-card__goal-percentage\">\n                    <bb-amount-ui\n                      [amount]=\"pocket?.goal?.progress\"\n                      [showPercent]=\"true\"\n                      [trailingZeroes]=\"false\"\n                    ></bb-amount-ui>\n                    <span i18n=\"Completed|Percentage of the goal currently completed@@managePockets.common.card.amountCompleted\">\n                      Completed\n                    </span>\n                  </span>\n                  <bb-icon-ui\n                    *ngIf=\"pocket?.goal?.progress == '100'\"\n                    name=\"check\"\n                    [inverse]=\"true\"\n                    size=\"sm\"\n                  ></bb-icon-ui>\n                </div>\n              </div>\n              <div class=\"bb-stack__item bb-stack__item--push-right bb-text-support\" *ngIf=\"!!pocket?.goal?.deadline\">\n                <bb-icon-ui\n                  name=\"calendar-today\"\n                  [inverse]=\"true\"\n                  size=\"sm\"\n                ></bb-icon-ui>\n                <span class=\"bb-manage-pockets-common-pocket-card__deadline-date\">\n                  {{pocket?.goal?.deadline | date}}\n                </span>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n</div>", components: [{ type: i2__namespace.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i3__namespace.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i4__namespace.ProgressbarComponent, selector: "bb-progressbar-ui", inputs: ["height", "max", "showValue", "striped", "animated", "type", "value"] }, { type: i1__namespace$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i6__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i6__namespace.AsyncPipe, "date": i6__namespace.DatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsCardComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-pockets-card',
                        templateUrl: './manage-pockets-card.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.AssetsService }]; }, propDecorators: { pocket: [{
                    type: i0.Input
                }], pocketTransfer: [{
                    type: i0.Output
                }] } });
    var templateObject_1$3, templateObject_2$3;

    var AccessibilityKeyboardDirective = /** @class */ (function () {
        function AccessibilityKeyboardDirective(element) {
            this.element = element;
            element.nativeElement.tabIndex = 0;
        }
        // eslint-disable-next-line
        AccessibilityKeyboardDirective.prototype.eventListener = function (event) {
            this.element.nativeElement.click(event);
        };
        return AccessibilityKeyboardDirective;
    }());
    AccessibilityKeyboardDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessibilityKeyboardDirective, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    AccessibilityKeyboardDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: AccessibilityKeyboardDirective, selector: "[bbAccessibilityKeyboard]", host: { listeners: { "keydown.enter": "eventListener($event)", "keydown.space": "eventListener($event)" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessibilityKeyboardDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbAccessibilityKeyboard]',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { eventListener: [{
                    type: i0.HostListener,
                    args: ['keydown.enter', ['$event']]
                }, {
                    type: i0.HostListener,
                    args: ['keydown.space', ['$event']]
                }] } });

    /**
     * Utility service for DOM manipulations
     */
    var DomAttributesService = /** @class */ (function () {
        function DomAttributesService() {
            this.basePrefix = 'bb_manage_pockets';
            this.idCounter = 0;
        }
        DomAttributesService.prototype.nextId = function (prefix) {
            return this.basePrefix + "-" + (!!prefix ? prefix : 'default') + "-" + Date.now() + "-" + this.idCounter++;
        };
        return DomAttributesService;
    }());
    DomAttributesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DomAttributesService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    DomAttributesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DomAttributesService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DomAttributesService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    /**
     * Dynamic id generator
     * Intended use is to improve accesibility by relating inputs to other label or error messages
     *
     * <label [for]="labelInput.id"> Label </label>
     * <input bbDynamicId #labelInput />
     */
    var DynamicIdDirective = /** @class */ (function () {
        function DynamicIdDirective(_elRef, _renderer, domAttributesService, cd) {
            this._elRef = _elRef;
            this._renderer = _renderer;
            this.domAttributesService = domAttributesService;
            this.cd = cd;
        }
        DynamicIdDirective.prototype.ngOnInit = function () {
            var _this = this;
            setTimeout(function () {
                _this._renderer.setAttribute(_this._elRef.nativeElement, 'id', _this.domAttributesService.nextId(_this.bbDynamicId));
                _this.cd.markForCheck();
            });
        };
        return DynamicIdDirective;
    }());
    DynamicIdDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DynamicIdDirective, deps: [{ token: i0__namespace.ElementRef }, { token: i0__namespace.Renderer2 }, { token: DomAttributesService }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    DynamicIdDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DynamicIdDirective, selector: "[bbDynamicId]", inputs: { bbDynamicId: "bbDynamicId" }, exportAs: ["bbDynamicId"], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DynamicIdDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbDynamicId]',
                        exportAs: 'bbDynamicId',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.Renderer2 }, { type: DomAttributesService }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { bbDynamicId: [{
                    type: i0.Input
                }] } });

    var RegexReplacePipe = /** @class */ (function () {
        function RegexReplacePipe() {
        }
        RegexReplacePipe.prototype.transform = function (value, regexValue, replaceValue) {
            var regex = new RegExp(regexValue, 'g');
            return value.replace(regex, replaceValue);
        };
        return RegexReplacePipe;
    }());
    RegexReplacePipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RegexReplacePipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    RegexReplacePipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RegexReplacePipe, name: "bbRegexReplace" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RegexReplacePipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'bbRegexReplace',
                    }]
            }] });

    var AccountsNamespace;
    (function (AccountsNamespace) {
        function formatHttpresponse(accountList) {
            var formattedItem = accountList.map(function (account) { return ({
                id: account.id,
                name: account.name || '',
                balance: account.availableBalance,
                number: account.number,
                currency: account.currency,
                favorite: account.favorite,
                bankBranchCode: account.bankBranchCode,
            }); });
            return formattedItem;
        }
        AccountsNamespace.formatHttpresponse = formatHttpresponse;
    })(AccountsNamespace || (AccountsNamespace = {}));

    var ManagePocketsService = /** @class */ (function () {
        function ManagePocketsService(pocketTailorService, productSummaryDataService) {
            var _this = this;
            this.pocketTailorService = pocketTailorService;
            this.productSummaryDataService = productSummaryDataService;
            this.pocketListApiError = new rxjs.BehaviorSubject(false);
            this.pocketListApiError$ = this.pocketListApiError.asObservable();
            this.handleApiError = function () {
                _this.pocketListApiError.next(true);
                return rxjs.of({ pockets: [] });
            };
        }
        ManagePocketsService.prototype.retrievePocketList = function () {
            this.pocketListApiError.next(false);
            return this.pocketTailorService.listPockets().pipe(operators.catchError(this.handleApiError));
        };
        ManagePocketsService.prototype.postPocket = function (newPocketItem) {
            var payload = PocketNamespace.buildNewPocketPostRequest(newPocketItem);
            return this.pocketTailorService.postPocket(payload);
        };
        ManagePocketsService.prototype.retrieveAccountList = function () {
            var RESOURCE_NAME = 'Payments';
            var PRIVILEGE = 'create';
            var FROM_PAGES = 0;
            var PAGE_SIZE = 50;
            var BUSINESS_FUNCTION = 'A2A Transfer';
            var productSummaryParameters = {
                businessFunction: BUSINESS_FUNCTION,
                resourceName: RESOURCE_NAME,
                privilege: PRIVILEGE,
                from: FROM_PAGES,
                size: PAGE_SIZE,
            };
            return this.productSummaryDataService
                .getArrangementsByBusinessFunction(productSummaryParameters)
                .pipe(operators.map(AccountsNamespace.formatHttpresponse));
        };
        return ManagePocketsService;
    }());
    ManagePocketsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsService, deps: [{ token: i1__namespace$2.PocketTailorClientHttpService }, { token: i2__namespace$1.ProductSummaryHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ManagePocketsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$2.PocketTailorClientHttpService }, { type: i2__namespace$1.ProductSummaryHttpService }]; } });

    var modules$3 = [i3.AmountModule, i7.ButtonModule, i2.DropdownMenuModule, i4$1.EmptyStateModule, i1$1.IconModule, i4.ProgressbarModule];
    var components$3 = [AccessibilityKeyboardDirective, DynamicIdDirective, ManagePocketsCardComponent, RegexReplacePipe];
    var ManagePocketsCommonModule = /** @class */ (function () {
        function ManagePocketsCommonModule() {
        }
        return ManagePocketsCommonModule;
    }());
    ManagePocketsCommonModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsCommonModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ManagePocketsCommonModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsCommonModule, declarations: [AccessibilityKeyboardDirective, DynamicIdDirective, ManagePocketsCardComponent, RegexReplacePipe], imports: [i6.CommonModule, i3.AmountModule, i7.ButtonModule, i2.DropdownMenuModule, i4$1.EmptyStateModule, i1$1.IconModule, i4.ProgressbarModule], exports: [AccessibilityKeyboardDirective, DynamicIdDirective, ManagePocketsCardComponent, RegexReplacePipe, i3.AmountModule, i7.ButtonModule, i2.DropdownMenuModule, i4$1.EmptyStateModule, i1$1.IconModule, i4.ProgressbarModule] });
    ManagePocketsCommonModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsCommonModule, providers: [ManagePocketsService, DomAttributesService], imports: [__spreadArray([i6.CommonModule], __read(modules$3)), i3.AmountModule, i7.ButtonModule, i2.DropdownMenuModule, i4$1.EmptyStateModule, i1$1.IconModule, i4.ProgressbarModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsCommonModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray([i6.CommonModule], __read(modules$3)),
                        providers: [ManagePocketsService, DomAttributesService],
                        declarations: __spreadArray([], __read(components$3)),
                        exports: __spreadArray(__spreadArray([], __read(components$3)), __read(modules$3)),
                    }]
            }] });

    var POCKET_LOCALIZATIONS = {
        transfers: {
            details: {
                addMoneyContinueButton: $localize(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject([":Review Transfer@@managePockets.transfers.details.button.continue.add:Review Transfer"], [":Review Transfer@@managePockets.transfers.details.button.continue.add:Review Transfer"]))),
                addMoneyError: $localize(templateObject_2$2 || (templateObject_2$2 = __makeTemplateObject([":Your account balance is insufficient@@managePockets.transfers.details.amount.error.add.max:Your account balance is insufficient"], [":Your account balance is insufficient@@managePockets.transfers.details.amount.error.add.max:Your account balance is insufficient"]))),
                addMoneyHeader: $localize(templateObject_3$2 || (templateObject_3$2 = __makeTemplateObject([":From Account@@managePockets.transfers.details.heading.addMoney:From Account"], [":From Account@@managePockets.transfers.details.heading.addMoney:From Account"]))),
                withdrawMoneyContinueButton: $localize(templateObject_4$2 || (templateObject_4$2 = __makeTemplateObject([":Review Withdrawal@@managePockets.transfers.details.button.continue.withdraw:Review Withdrawal"], [":Review Withdrawal@@managePockets.transfers.details.button.continue.withdraw:Review Withdrawal"]))),
                withdrawMoneyError: $localize(templateObject_5$1 || (templateObject_5$1 = __makeTemplateObject([":Your pocket balance is insufficient@@managePockets.transfers.details.amount.error.withdraw.max:Your pocket balance is insufficient"], [":Your pocket balance is insufficient@@managePockets.transfers.details.amount.error.withdraw.max:Your pocket balance is insufficient"]))),
                withdrawMoneyHeader: $localize(templateObject_6$1 || (templateObject_6$1 = __makeTemplateObject([":To Account@@managePockets.transfers.details.heading.withdrawMoney:To Account"], [":To Account@@managePockets.transfers.details.heading.withdrawMoney:To Account"]))),
            },
            review: {
                addMoneyHeader: $localize(templateObject_7$1 || (templateObject_7$1 = __makeTemplateObject([":Review Your Transfer@@managePockets.transfers.review.header.add:Review Your Transfer"], [":Review Your Transfer@@managePockets.transfers.review.header.add:Review Your Transfer"]))),
                withdrawMoneyHeader: $localize(templateObject_8$1 || (templateObject_8$1 = __makeTemplateObject([":Review Your Withdrawal@@managePockets.transfers.review.header.withdraw:Review Your Withdrawal"], [":Review Your Withdrawal@@managePockets.transfers.review.header.withdraw:Review Your Withdrawal"]))),
            },
            wrapper: {
                addMoneyModalBody: $localize(templateObject_9 || (templateObject_9 = __makeTemplateObject([":All transfer information will be permanently lost.@@managePockets.transfers.wrapper.modal.body.add:All transfer information will be permanently lost."], [":All transfer information will be permanently lost.@@managePockets.transfers.wrapper.modal.body.add:All transfer information will be permanently lost."]))),
                addMoneyModalConfirm: $localize(templateObject_10 || (templateObject_10 = __makeTemplateObject([":Discard Transfer@@managePockets.transfers.wrapper.modal.button.confirm.add:Discard Transfer"], [":Discard Transfer@@managePockets.transfers.wrapper.modal.button.confirm.add:Discard Transfer"]))),
                addMoneyModalHeader: $localize(templateObject_11 || (templateObject_11 = __makeTemplateObject([":Discard Transfer?@@managePockets.transfers.wrapper.modal.header.add:Discard Transfer?"], [":Discard Transfer?@@managePockets.transfers.wrapper.modal.header.add:Discard Transfer?"]))),
                withdrawMoneyModalBody: $localize(templateObject_12 || (templateObject_12 = __makeTemplateObject([":All withdrawal information will be permanently lost.@@managePockets.transfers.wrapper.modal.body.withdraw:All withdrawal information will be permanently lost."], [":All withdrawal information will be permanently lost.@@managePockets.transfers.wrapper.modal.body.withdraw:All withdrawal information will be permanently lost."]))),
                withdrawMoneyModalConfirm: $localize(templateObject_13 || (templateObject_13 = __makeTemplateObject([":Discard Withdrawal@@managePockets.transfers.wrapper.modal.button.confirm.withdraw:Discard Withdrawal"], [":Discard Withdrawal@@managePockets.transfers.wrapper.modal.button.confirm.withdraw:Discard Withdrawal"]))),
                withdrawMoneyModalHeader: $localize(templateObject_14 || (templateObject_14 = __makeTemplateObject([":Discard Withdrawal?@@managePockets.transfers.wrapper.modal.header.withdraw:Discard Withdrawal?"], [":Discard Withdrawal?@@managePockets.transfers.wrapper.modal.header.withdraw:Discard Withdrawal?"]))),
            },
        },
        views: {
            transfers: {
                addMoneyHeader: $localize(templateObject_15 || (templateObject_15 = __makeTemplateObject([":Add Money@@managePockets.transfersView.heading.add:Add Money"], [":Add Money@@managePockets.transfersView.heading.add:Add Money"]))),
                withdrawMoneyHeader: $localize(templateObject_16 || (templateObject_16 = __makeTemplateObject([":Withdraw Money@@managePockets.transfersView.heading.withdraw:Withdraw Money"], [":Withdraw Money@@managePockets.transfersView.heading.withdraw:Withdraw Money"]))),
            },
        },
    };
    var templateObject_1$2, templateObject_2$2, templateObject_3$2, templateObject_4$2, templateObject_5$1, templateObject_6$1, templateObject_7$1, templateObject_8$1, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16;

    // eslint-disable-next-line
    var ManagePocketsBaseStep = /** @class */ (function () {
        function ManagePocketsBaseStep() {
            this.back = new i0.EventEmitter();
            this.cancel = new i0.EventEmitter();
            this.pocketLocalizations = POCKET_LOCALIZATIONS;
            this.transferTypesEnum = TransferTypeEnum;
        }
        ManagePocketsBaseStep.prototype.goBack = function () {
            this.back.emit();
        };
        ManagePocketsBaseStep.prototype.abort = function () {
            this.cancel.emit();
        };
        ManagePocketsBaseStep.prototype.isFieldValid = function (form, fieldName) {
            var controlField = form === null || form === void 0 ? void 0 : form.get(fieldName || '');
            return !!(controlField === null || controlField === void 0 ? void 0 : controlField.valid) || !!(controlField === null || controlField === void 0 ? void 0 : controlField.untouched);
        };
        ManagePocketsBaseStep.prototype.getFieldErrors = function (form, field) {
            var _a;
            return (_a = form === null || form === void 0 ? void 0 : form.get(field || '')) === null || _a === void 0 ? void 0 : _a.errors;
        };
        return ManagePocketsBaseStep;
    }());
    ManagePocketsBaseStep.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsBaseStep, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    ManagePocketsBaseStep.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsBaseStep, inputs: { journeyCurrency: "journeyCurrency", partialNewPayment: "partialNewPayment" }, outputs: { back: "back", cancel: "cancel" }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsBaseStep, decorators: [{
                type: i0.Directive
            }], propDecorators: { back: [{
                    type: i0.Output
                }], cancel: [{
                    type: i0.Output
                }], journeyCurrency: [{
                    type: i0.Input
                }], partialNewPayment: [{
                    type: i0.Input
                }] } });

    // eslint-disable-next-line
    var ManagePocketsCreateBaseStep = /** @class */ (function (_super) {
        __extends(ManagePocketsCreateBaseStep, _super);
        function ManagePocketsCreateBaseStep() {
            var _this = _super.call(this) || this;
            _this.next = new i0.EventEmitter();
            return _this;
        }
        ManagePocketsCreateBaseStep.prototype.goNext = function (newPocket) {
            this.next.emit(newPocket);
        };
        return ManagePocketsCreateBaseStep;
    }(ManagePocketsBaseStep));
    ManagePocketsCreateBaseStep.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsCreateBaseStep, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    ManagePocketsCreateBaseStep.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsCreateBaseStep, inputs: { partialPocket: "partialPocket" }, outputs: { next: "next" }, usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsCreateBaseStep, decorators: [{
                type: i0.Directive
            }], ctorParameters: function () { return []; }, propDecorators: { next: [{
                    type: i0.Output
                }], partialPocket: [{
                    type: i0.Input
                }] } });

    var ManagePocketsConfirmationComponent = /** @class */ (function (_super) {
        __extends(ManagePocketsConfirmationComponent, _super);
        function ManagePocketsConfirmationComponent(assetsService) {
            var _this = _super.call(this) || this;
            _this.assetsService = assetsService;
            _this.newPocket = new i0.EventEmitter();
            _this.resolveAsset = _this.assetsService.createAssetsResolver({
                widgetName: 'bb-manage-pockets-journey-ang',
                getURIFromAssetID: function (assetId) { return assetId; },
            });
            return _this;
        }
        ManagePocketsConfirmationComponent.prototype.ngOnInit = function () {
            var _a;
            this.selectedImageAssetUrl = this.resolveAsset(((_a = this.partialPocket) === null || _a === void 0 ? void 0 : _a.icon) + "-img.webp");
        };
        ManagePocketsConfirmationComponent.prototype.saveNewPocket = function () {
            this.newPocket.emit(this.partialPocket);
        };
        return ManagePocketsConfirmationComponent;
    }(ManagePocketsCreateBaseStep));
    ManagePocketsConfirmationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsConfirmationComponent, deps: [{ token: i1__namespace.AssetsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ManagePocketsConfirmationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsConfirmationComponent, selector: "bb-manage-pockets-confirmation", inputs: { awaitingCreateResponse: "awaitingCreateResponse" }, outputs: { newPocket: "newPocket" }, usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"bb-block bb-block--xl\">\n  <h2 i18n=\"Review And Confirm Your Pocket Details@@managePockets.create.confirmation.header\">\n    Review And Confirm Your Pocket Details\n  </h2>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <div class=\"bb-stack bb-stack--density-xl bb-stack--wrap\">\n    <div class=\"bb-stack__item\">\n      <!-- Pocket Image -->\n      <img \n        [src]=\"selectedImageAssetUrl | async\" \n        class=\"bb-manage-pockets-common-pocket-card__pocket-image bb-block bb-block--sm\" \n        alt=\"Representation of the selected pocket type\"\n        i18n-alt=\"Pocket image|changes according to the type of pocket@@managePockets.create.confirmation.selectedImageAssetUrl\"\n      >\n    </div>\n    <div class=\"bb-stack__break bb-stack__break--xs bb-block bb-block--lg\"></div>\n    <div class=\"bb-stack__item bb-stack__item--align-top\">\n      <!-- Pocket Name  -->\n      <div class=\"bb-block bb-block--md\">\n        <p class=\"bb-block bb-block--no-margin bb-subtitle bb-text-support\" i18n=\"Pocket Name@@managePockets.create.confirmation.name.label\">\n          Pocket Name\n        </p>\n        <h3>{{partialPocket?.name}}</h3>  \n      </div>\n  \n      <!-- Goal Date -->\n      <div class=\"bb-block bb-block--md\" *ngIf=\"partialPocket?.goal?.deadline | date as pocketDate\">\n        <p class=\"bb-block bb-block--no-margin bb-subtitle bb-text-support\" i18n=\"Goal Date@@managePockets.create.confirmation.date.label\">\n          Goal Date\n        </p>\n        <h3>{{pocketDate | date}}</h3>  \n      </div>\n  \n      <!-- Goal Amount -->\n      <div class=\"bb-block bb-block--md\" *ngIf=\"partialPocket?.goal?.amountCurrency?.amount as pocketAmount\">\n        <p class=\"bb-block bb-block--no-margin bb-subtitle bb-text-support\" i18n=\"Goal Amount@@managePockets.create.confirmation.amount.label\">\n          Goal Amount\n        </p>\n        <h3>\n          <bb-amount-ui\n            [currency]=\"journeyCurrency\"\n            [amount]=\"pocketAmount\"\n            [mapCurrency]=\"true\"\n          ></bb-amount-ui>\n        </h3>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n<div class=\"bb-button-bar\">    \n  <bb-load-button-ui\n    i18n=\"Confirm Pocket@@managePockets.create.confirmation.button.continue\"\n    color=\"primary\"\n    class=\"bb-button-bar__button\"\n    [isLoading]=\"awaitingCreateResponse\"\n    (click)=\"!awaitingCreateResponse && saveNewPocket()\"\n  >\n    Confirm Pocket\n  </bb-load-button-ui>\n  <button \n    bbButton\n    i18n=\"Back@@managePockets.create.confirmation.button.back\"\n    class=\"bb-button-bar__button\"\n    color=\"secondary\" \n    (click)=\"goBack()\"\n  >\n    Back\n  </button>\n  <button \n    bbButton \n    color=\"link\"\n    class=\"bb-button-bar__button bb-button-bar__button--across\"\n    i18n=\"Cancel@@managePockets.create.confirmation.button.cancel\"\n    (click)=\"abort()\"\n  >\n    Cancel\n  </button>\n</div>\n", components: [{ type: i3__namespace.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i3__namespace$1.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i6__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i6__namespace.AsyncPipe, "date": i6__namespace.DatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsConfirmationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-pockets-confirmation',
                        templateUrl: './manage-pockets-confirmation.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.AssetsService }]; }, propDecorators: { awaitingCreateResponse: [{
                    type: i0.Input
                }], newPocket: [{
                    type: i0.Output
                }] } });

    var ManagePocketsCreateComponent = /** @class */ (function () {
        function ManagePocketsCreateComponent() {
        }
        return ManagePocketsCreateComponent;
    }());
    ManagePocketsCreateComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsCreateComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ManagePocketsCreateComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsCreateComponent, selector: "bb-manage-pockets-create", ngImport: i0__namespace, template: "<div class=\"bb-card bb-card--lg\">\n  <div class=\"bb-card__body\">\n    <ng-content></ng-content>\n  </div>\n</div>" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsCreateComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-pockets-create',
                        templateUrl: './manage-pockets-create.component.html',
                    }]
            }] });

    var ManagePocketsDetailsComponent = /** @class */ (function (_super) {
        __extends(ManagePocketsDetailsComponent, _super);
        function ManagePocketsDetailsComponent(formBuilder, assetsService) {
            var _this = _super.call(this) || this;
            _this.formBuilder = formBuilder;
            _this.assetsService = assetsService;
            _this.showDialog = false;
            _this.resolveAsset = _this.assetsService.createAssetsResolver({
                widgetName: 'bb-manage-pockets-journey-ang',
                getURIFromAssetID: function (assetId) { return assetId; },
            });
            return _this;
        }
        ManagePocketsDetailsComponent.prototype.ngOnInit = function () {
            var _a, _b, _c, _d;
            var defaultImage = ((_a = this.pocketImageList) === null || _a === void 0 ? void 0 : _a[0]) || 'home';
            this.pocketDetailsForm = this.formBuilder.group({
                name: [((_b = this.partialPocket) === null || _b === void 0 ? void 0 : _b.name) || this.formatName(defaultImage), i1$3.Validators.required],
                icon: [((_c = this.partialPocket) === null || _c === void 0 ? void 0 : _c.icon) || defaultImage, i1$3.Validators.required],
            });
            this.selectedImageAssetUrl = this.resolveAsset((((_d = this.partialPocket) === null || _d === void 0 ? void 0 : _d.icon) || defaultImage) + "-img.webp");
        };
        ManagePocketsDetailsComponent.prototype.formatName = function (pocketName) {
            var titleCasePipe = new i6.TitleCasePipe();
            var regexPipe = new RegexReplacePipe();
            var formatedTittle = pocketName;
            formatedTittle = regexPipe.transform(formatedTittle, '-', ' ');
            formatedTittle = titleCasePipe.transform(formatedTittle);
            return formatedTittle;
        };
        ManagePocketsDetailsComponent.prototype.openDialog = function () {
            this.showDialog = true;
        };
        ManagePocketsDetailsComponent.prototype.closeDialog = function () {
            this.showDialog = false;
        };
        ManagePocketsDetailsComponent.prototype.changeType = function (img) {
            this.pocketDetailsForm.patchValue({ name: this.formatName(img), icon: img });
            this.selectedImageAssetUrl = this.resolveAsset(img + "-img.webp");
            this.closeDialog();
        };
        ManagePocketsDetailsComponent.prototype.getImage = function (img) {
            return this.resolveAsset(img + "-img.webp");
        };
        ManagePocketsDetailsComponent.prototype.isTypeSelected = function (img) {
            return this.pocketDetailsForm.get('icon').value === img;
        };
        ManagePocketsDetailsComponent.prototype.save = function () {
            if (this.pocketDetailsForm.valid) {
                this.goNext(this.formatDetailsValues());
            }
            else {
                this.pocketDetailsForm.markAllAsTouched();
            }
        };
        ManagePocketsDetailsComponent.prototype.formatDetailsValues = function () {
            var _e = this.pocketDetailsForm.value, name = _e.name, icon = _e.icon;
            return { name: name, icon: icon };
        };
        return ManagePocketsDetailsComponent;
    }(ManagePocketsCreateBaseStep));
    ManagePocketsDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsDetailsComponent, deps: [{ token: i1__namespace$3.FormBuilder }, { token: i1__namespace.AssetsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ManagePocketsDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsDetailsComponent, selector: "bb-manage-pockets-details", inputs: { pocketImageList: "pocketImageList" }, usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"bb-block bb-block--xl\">\n  <h2 i18n=\"Choose Your Pocket Image and Name@@managePockets.create.details.header\">\n    Choose Your Pocket Image and Name\n  </h2>\n</div>\n<form [formGroup]=\"pocketDetailsForm\" (submit)=\"save()\">\n  <div class=\"bb-block bb-block--xl\">\n    <div class=\"bb-stack bb-stack--wrap bb-stack--align-top\">\n      <div class=\"bb-stack__item bb-stack__item--spacing-xl bb-manage-pockets-create-details__pocket-image-container\">\n        <img \n          [src]=\"selectedImageAssetUrl | async\" \n          class=\"bb-manage-pockets-create-details__pocket-image bb-block bb-block--sm\" \n          alt=\"Representation of the selected pocket type\"\n          i18n-alt=\"Pocket image|changes according to the type of pocket@@managePockets.create.details.selectedImageAssetUrl\"\n          (click)=\"openDialog()\"\n        >\n        <div>\n          <button\n            #button\n            bbButton\n            buttonSize=\"sm\"\n            [block]=\"true\"\n            color=\"link-text\"\n            (click)=\"openDialog()\"\n            i18n=\"Change image button@@managePockets.create.details.button.changeImage\"\n          >\n            Change image\n          </button>\n        </div>\n      </div>\n      <div class=\"bb-stack__break bb-stack__break--xs-down\"></div>\n      <div class=\"bb-stack__item bb-manage-pockets-create-details__input-container\">\n        <bb-input-text-ui\n          formControlName=\"name\"\n          data-role=\"manage-pocket-creation-name\"\n          label=\"What's this Pocket for?\"\n          i18n-label=\"What's this Pocket for?@@managePockets.create.details.input.label\"\n          maxLength=\"50\"\n          [attr.aria-invalid]=\"!isFieldValid(pocketDetailsForm, 'name')\"\n          [attr.aria-describedby]=\"pocketNameError?.id\"\n        ></bb-input-text-ui>\n        <bb-input-validation-message-ui [showErrors]=\"!isFieldValid(pocketDetailsForm, 'name')\">\n          <span \n            #pocketNameError\n            bbDynamicId\n            data-role=\"user-details-phone-number-validation-msg\"\n            i18n=\"You need to specify a Pocket name@@managePockets.create.details.input.validationError.required\"\n          >\n            You need to specify a Pocket name\n          </span>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"bb-button-bar\">    \n    <button \n      bbButton \n      i18n=\"Continue@@managePockets.create.details.button.continue\"\n      class=\"bb-button-bar__button\" \n      type=\"submit\"\n    >\n      Continue\n    </button>\n    <button \n      bbButton \n      color=\"link\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      i18n=\"Cancel@@managePockets.create.details.button.cancel\"\n      (click)=\"abort()\"\n    >\n      Cancel\n    </button>\n  </div>\n</form>\n\n<bb-modal-ui [isOpen]=\"showDialog\" (cancel)=\"closeDialog()\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <div class=\"bb-stack\">\n        <div class=\"bb-stack__item\">\n          <span class=\"modal-title\" i18n=\"Choose pocket image@@managePockets.create.details.modal.title\">\n            Choose Pocket Image\n          </span>\n        </div>\n        <div class=\"bb-stack__item--push-right\">\n          <button\n            bbButton\n            (click)=\"closeDialog()\"\n            class=\"bb-stack__item-sm\"\n            color=\"unstyled\"\n            aria-label=\"close dialog\"\n            i18n-aria-label=\"close dialog button@@managePockets.create.details.modal.button.close\"\n          >\n            <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n          </button>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div class=\"bb-stack bb-stack--wrap\">\n        <div class=\"bb-stack__box-item bb-manage-pockets-create-details__modal-image-item\" *ngFor=\"let imageName of pocketImageList\" bbAccessibilityKeyboard (click)=\"changeType(imageName)\">\n          <div class=\"bb-block bb-block--sm\">\n            <img\n              class=\"bb-manage-pockets-create-details__pocket-image\"\n              [ngClass]=\"{ 'active': isTypeSelected(imageName)}\"\n              [src]=\"getImage(imageName) | async\" \n              alt=\"\" \n            >\n          </div>\n          <p class=\"bb-text-align-center bb-subtitle bb-text-bold\" [ngClass]=\"isTypeSelected(imageName) ? 'bb-text-primary' : 'bb-text-support'\">\n            {{imageName | bbRegexReplace: '-' : ' ' | titlecase}}\n          </p>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-body-ui>\n</bb-modal-ui>", components: [{ type: i3__namespace$2.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i4__namespace$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i6__namespace$1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i6__namespace$1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1__namespace$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i6__namespace$1.ModalBodyComponent, selector: "bb-modal-body-ui" }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicIdDirective, selector: "[bbDynamicId]", inputs: ["bbDynamicId"], exportAs: ["bbDynamicId"] }, { type: i6__namespace$1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i6__namespace$1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i6__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: AccessibilityKeyboardDirective, selector: "[bbAccessibilityKeyboard]" }, { type: i6__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i6__namespace.AsyncPipe, "titlecase": i6__namespace.TitleCasePipe, "bbRegexReplace": RegexReplacePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-pockets-details',
                        templateUrl: './manage-pockets-details.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }, { type: i1__namespace.AssetsService }]; }, propDecorators: { pocketImageList: [{
                    type: i0.Input
                }] } });

    function nonZero() {
        return function (control) {
            var validAmount = control.value.length === 0 || control.value != 0;
            return validAmount ? null : { isZero: true };
        };
    }

    var ManagePocketsGoalsComponent = /** @class */ (function (_super) {
        __extends(ManagePocketsGoalsComponent, _super);
        function ManagePocketsGoalsComponent(formBuilder) {
            var _this = _super.call(this) || this;
            _this.formBuilder = formBuilder;
            _this.today = new Date();
            _this.minDate = new Date(_this.today.getFullYear(), _this.today.getMonth(), _this.today.getDate(), 0, 0).toISOString();
            return _this;
        }
        ManagePocketsGoalsComponent.prototype.ngOnInit = function () {
            var _a, _b, _c, _d, _e;
            this.pocketGoalsForm = this.formBuilder.group({
                amount: [((_c = (_b = (_a = this.partialPocket) === null || _a === void 0 ? void 0 : _a.goal) === null || _b === void 0 ? void 0 : _b.amountCurrency) === null || _c === void 0 ? void 0 : _c.amount) || '', nonZero()],
                deadline: [((_e = (_d = this.partialPocket) === null || _d === void 0 ? void 0 : _d.goal) === null || _e === void 0 ? void 0 : _e.deadline) || ''],
            });
        };
        ManagePocketsGoalsComponent.prototype.save = function () {
            if (this.pocketGoalsForm.valid) {
                this.goNext(this.formatGoalsValues());
            }
            else {
                this.pocketGoalsForm.markAllAsTouched();
            }
        };
        ManagePocketsGoalsComponent.prototype.formatGoalsValues = function () {
            var _f = this.pocketGoalsForm.value, amount = _f.amount, deadline = _f.deadline;
            return { goal: { amountCurrency: { amount: amount, currencyCode: this.journeyCurrency }, deadline: deadline } };
        };
        return ManagePocketsGoalsComponent;
    }(ManagePocketsCreateBaseStep));
    ManagePocketsGoalsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsGoalsComponent, deps: [{ token: i1__namespace$3.FormBuilder }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ManagePocketsGoalsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsGoalsComponent, selector: "bb-manage-pockets-goals", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"bb-block bb-block--sm\">\n  <h2 i18n=\"Choose Your Goal Amount And Date@@managePockets.create.goals.header\">\n    Choose Your Goal Amount And Date\n  </h2>\n</div>\n<div class=\"bb-block bb-block--xl\">\n  <p class=\"bb-text-support bb-subtitle\" i18n=\"You can choose to skip this step by clicking 'Continue'@@managePockets.create.goals.description\">\n    You can choose to skip this step by clicking 'Continue'.\n  </p>\n</div>\n\n<form [formGroup]=\"pocketGoalsForm\" (submit)=\"save()\">\n  <div class=\"bb-block--lg\">\n\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--xl col-md-6\">\n        <bb-amount-input-ui\n          label=\"Goal Amount\"\n          i18n-label=\"Goal Amount@@managePockets.create.goals.amount.label\"\n          [attr.aria-invalid]=\"!isFieldValid(pocketGoalsForm, 'amount')\"\n          [attr.aria-describedby]=\"goalAmountZeroError?.id\"\n          formControlName=\"amount\"\n          [currency]=\"journeyCurrency\"\n          placeholder=\"0.00\"\n          i18n-placeholder=\"0.00|Price example@@managePockets.create.goals.amount.placeholder\"\n        ></bb-amount-input-ui>\n        <bb-input-validation-message-ui [showErrors]=\"!isFieldValid(pocketGoalsForm, 'amount')\">\n          <span i18n=\"Goal amount can only be bigger than 0 or empty@@managePockets.create.goals.amount.error.zero\" bbDynamicId #goalAmountZeroError>\n            Goal amount can only be bigger than 0 or empty\n          </span>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--sm col-md-6\">\n        <bb-input-datepicker-ui\n          label=\"Goal Date\"\n          i18n-label=\"Goal Date@@managePockets.create.goals.deadline.label\"\n          [attr.aria-invalid]=\"!isFieldValid(pocketGoalsForm, 'deadline')\"\n          datepickerDescribedby=\"{{datePickerDescription?.id}} {{datePickerError?.id}}\"\n          formControlName=\"deadline\"\n          [minDate]=\"minDate\"\n        ></bb-input-datepicker-ui>\n      </div>\n    </div>\n    <div bbDynamicId #datePickerError>\n      <bb-input-validation-message-ui [showErrors]=\"!isFieldValid(pocketGoalsForm, 'deadline')\">\n        <ng-container *ngFor=\"let error of getFieldErrors(pocketGoalsForm, 'deadline') | keyvalue; last as last\">\n          <ng-container *ngIf=\"last\" [ngSwitch]=\"error.key\">\n            <div class=\"bb-block bb-block--md\">\n              <span i18n=\"Enter a valid date format@@managePockets.create.goals.deadline.error.invalidFormat\" *ngSwitchCase=\"'invalidDateFormat'\">\n                Enter a valid date format\n              </span>\n              <span i18n=\"Invalid goal date@@managePockets.create.goals.deadline.error.invalidDate\" *ngSwitchCase=\"'dateLessThanMinDate'\">\n                Invalid goal date\n              </span>\n            </div>\n          </ng-container>\n        </ng-container>\n      </bb-input-validation-message-ui>\n    </div>\n    <p\n      bbDynamicId\n      #datePickerDescription\n      i18n=\"It will help you to track progress towards your goal@@managePockets.create.goals.deadline.description\" \n      class=\"bb-text-support bb-subtitle\"\n    >\n      It will help you to track progress towards your goal\n    </p>\n\n  </div>\n  <div class=\"bb-button-bar\">    \n    <button \n      bbButton \n      i18n=\"Continue@@managePockets.create.goals.button.continue\"\n      class=\"bb-button-bar__button\" \n      type=\"submit\"\n    >\n      Continue\n    </button>\n    <button \n      bbButton\n      i18n=\"Back@@managePockets.create.goals.button.back\"\n      class=\"bb-button-bar__button\"\n      color=\"secondary\" \n      (click)=\"goBack()\"\n    >\n      Back\n    </button>\n    <button \n      bbButton \n      color=\"link\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      i18n=\"Cancel@@managePockets.create.goals.button.cancel\"\n      (click)=\"abort()\"\n    >\n      Cancel\n    </button>\n  </div>\n</form>\n\n", components: [{ type: i2__namespace$2.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: i4__namespace$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4__namespace$2.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicIdDirective, selector: "[bbDynamicId]", inputs: ["bbDynamicId"], exportAs: ["bbDynamicId"] }, { type: i4__namespace$2.MinDateValidatorDirective, selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i6__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i6__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "keyvalue": i6__namespace.KeyValuePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsGoalsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-pockets-goals',
                        templateUrl: './manage-pockets-goals.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }]; } });

    var ManagePocketsCreateWrapperComponent = /** @class */ (function (_super) {
        __extends(ManagePocketsCreateWrapperComponent, _super);
        function ManagePocketsCreateWrapperComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.newPocket = new i0.EventEmitter();
            _this.pocketStore = new rxjs.BehaviorSubject({});
            _this.partialPocket = _this.pocketStore.asObservable();
            return _this;
        }
        ManagePocketsCreateWrapperComponent.prototype.goNext = function (partialPocket) {
            this.setCurrentUserValue(partialPocket);
            this.goToStep(this.currentStep + 1);
        };
        ManagePocketsCreateWrapperComponent.prototype.saveNewPocket = function (newPocketItem) {
            this.newPocket.emit(newPocketItem);
        };
        ManagePocketsCreateWrapperComponent.prototype.setCurrentUserValue = function (value) {
            this.pocketStore.next(Object.assign(Object.assign({}, this.pocketStore.value), value));
        };
        return ManagePocketsCreateWrapperComponent;
    }(ManagePocketsBaseWrapperComponent));
    ManagePocketsCreateWrapperComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsCreateWrapperComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    ManagePocketsCreateWrapperComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsCreateWrapperComponent, selector: "bb-manage-pockets-create-wrapper", inputs: { pocketImageList: "pocketImageList", awaitingCreateResponse: "awaitingCreateResponse" }, outputs: { newPocket: "newPocket" }, usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"bb-block bb-block--lg row bb-stack--center\">\n  <bb-stepper-ui class=\"col-12 col-md-8\">\n    <bb-stepper-step-ui\n      label=\"Make It Yours\"\n      i18n-label=\"Make It Yours@@managePockets.create.wrapper.stepper.step1.label\"\n      [isActive]=\"currentStep >= 1\"\n      [isChecked]=\"currentStep > 1\"\n      [isCurrent]=\"currentStep === 1\"\n    ></bb-stepper-step-ui>\n    <bb-stepper-step-ui\n      label=\"What's Your Goal?\"\n      i18n-label=\"What's Your Goal?@@managePockets.create.wrapper.stepper.step2.label\"\n      [isActive]=\"currentStep >= 2\"\n      [isChecked]=\"currentStep > 2\"\n      [isCurrent]=\"currentStep === 2\"\n    ></bb-stepper-step-ui>\n    <bb-stepper-step-ui\n      label=\"Review Pocket\"\n      i18n-label=\"Review Pocket@@managePockets.create.wrapper.stepper.step3.label\"\n      [isActive]=\"currentStep >= 3\"\n      [isChecked]=\"currentStep > 3\"\n      [isCurrent]=\"currentStep === 3\"\n    ></bb-stepper-step-ui>\n  </bb-stepper-ui>\n</div>\n\n<bb-manage-pockets-create>\n  <bb-manage-pockets-details\n    *ngIf=\"currentStep === 1\"\n    [pocketImageList]=\"pocketImageList\"\n    [partialPocket]=\"partialPocket | async\"\n    (next)=\"goNext($event)\"\n    (back)=\"goBack()\"\n    (cancel)=\"showAbortDialog()\"\n  ></bb-manage-pockets-details>\n\n  <bb-manage-pockets-goals\n    *ngIf=\"currentStep === 2\"\n    [partialPocket]=\"partialPocket | async\"\n    [journeyCurrency]=\"journeyCurrency\"\n    (next)=\"goNext($event)\"\n    (back)=\"goBack()\"\n    (cancel)=\"showAbortDialog()\"\n  ></bb-manage-pockets-goals>\n\n  <bb-manage-pockets-confirmation\n    *ngIf=\"currentStep === 3\"\n    [partialPocket]=\"partialPocket | async\"\n    [journeyCurrency]=\"journeyCurrency\"\n    [awaitingCreateResponse]=\"awaitingCreateResponse\"\n    (newPocket)=\"saveNewPocket($event)\"\n    (back)=\"goBack()\"\n    (cancel)=\"showAbortDialog()\"\n  ></bb-manage-pockets-confirmation>\n</bb-manage-pockets-create>\n\n<bb-modal-ui [isOpen]=\"showDialog\" (cancel)=\"closeAbortDialog()\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <div class=\"bb-stack\">\n        <div class=\"bb-stack__item\">\n          <span class=\"modal-title\" i18n=\"Discard Pocket?@@managePockets.create.wrapper.modal.header\">\n            Discard Pocket?\n          </span>\n        </div>\n        <div class=\"bb-stack__item--push-right\">\n          <button\n            bbButton\n            (click)=\"closeAbortDialog()\"\n            class=\"bb-stack__item-sm\"\n            color=\"unstyled\"\n            aria-label=\"close dialog\"\n            i18n-aria-label=\"close dialog button@@managePockets.create.wrapper.modal.button.close\"\n          >\n            <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n          </button>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <span i18n=\"All this pocket information will be permanently lost.@@managePockets.create.wrapper.modal.body\">\n        All this pocket information will be permanently lost.\n      </span>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          (click)=\"confirmAbort()\"\n          i18n=\"Discard Pocket@@managePockets.create.wrapper.modal.button.confirm\"\n        >\n          Discard Pocket\n        </button>\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          (click)=\"closeAbortDialog()\"\n          i18n=\"Keep it@@managePockets.create.wrapper.modal.button.cancel\"\n        >\n          Keep it\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>", components: [{ type: i1__namespace$4.StepperComponent, selector: "bb-stepper-ui", outputs: ["select"] }, { type: i1__namespace$4.StepperStepComponent, selector: "bb-stepper-step-ui", inputs: ["label", "stateLabel", "data", "ariaLabel", "isCurrent", "isChecked", "isActive"] }, { type: ManagePocketsCreateComponent, selector: "bb-manage-pockets-create" }, { type: ManagePocketsDetailsComponent, selector: "bb-manage-pockets-details", inputs: ["pocketImageList"] }, { type: ManagePocketsGoalsComponent, selector: "bb-manage-pockets-goals" }, { type: ManagePocketsConfirmationComponent, selector: "bb-manage-pockets-confirmation", inputs: ["awaitingCreateResponse"], outputs: ["newPocket"] }, { type: i6__namespace$1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i6__namespace$1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1__namespace$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i6__namespace$1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i6__namespace$1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i6__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6__namespace$1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6__namespace$1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i6__namespace$1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i6__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsCreateWrapperComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-pockets-create-wrapper',
                        templateUrl: './manage-pockets-create-wrapper.component.html',
                    }]
            }], propDecorators: { pocketImageList: [{
                    type: i0.Input
                }], awaitingCreateResponse: [{
                    type: i0.Input
                }], newPocket: [{
                    type: i0.Output
                }] } });

    var components$2 = [
        ManagePocketsCreateComponent,
        ManagePocketsCreateWrapperComponent,
        ManagePocketsDetailsComponent,
        ManagePocketsGoalsComponent,
        ManagePocketsConfirmationComponent,
    ];
    var modules$2 = [
        i2$2.AmountInputModule,
        i1$3.FormsModule,
        i1$1.IconModule,
        i4$3.InputDatepickerModule,
        i3$2.InputTextModule,
        i4$2.InputValidationMessageModule,
        i3$1.LoadButtonModule,
        i6$1.ModalModule,
        i1$3.ReactiveFormsModule,
        i1$4.StepperModule,
    ];
    var ManagePocketsCreateModule = /** @class */ (function () {
        function ManagePocketsCreateModule() {
        }
        return ManagePocketsCreateModule;
    }());
    ManagePocketsCreateModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsCreateModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ManagePocketsCreateModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsCreateModule, declarations: [ManagePocketsCreateComponent,
            ManagePocketsCreateWrapperComponent,
            ManagePocketsDetailsComponent,
            ManagePocketsGoalsComponent,
            ManagePocketsConfirmationComponent], imports: [i6.CommonModule,
            ManagePocketsCommonModule, i2$2.AmountInputModule,
            i1$3.FormsModule,
            i1$1.IconModule,
            i4$3.InputDatepickerModule,
            i3$2.InputTextModule,
            i4$2.InputValidationMessageModule,
            i3$1.LoadButtonModule,
            i6$1.ModalModule,
            i1$3.ReactiveFormsModule,
            i1$4.StepperModule, i1__namespace.BackbaseCoreModule], exports: [ManagePocketsCreateComponent,
            ManagePocketsCreateWrapperComponent,
            ManagePocketsDetailsComponent,
            ManagePocketsGoalsComponent,
            ManagePocketsConfirmationComponent, i2$2.AmountInputModule,
            i1$3.FormsModule,
            i1$1.IconModule,
            i4$3.InputDatepickerModule,
            i3$2.InputTextModule,
            i4$2.InputValidationMessageModule,
            i3$1.LoadButtonModule,
            i6$1.ModalModule,
            i1$3.ReactiveFormsModule,
            i1$4.StepperModule] });
    ManagePocketsCreateModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsCreateModule, imports: [__spreadArray(__spreadArray([
                i6.CommonModule,
                ManagePocketsCommonModule
            ], __read(modules$2)), [
                i1.BackbaseCoreModule.withConfig({
                    classMap: { ManagePocketsCreateWrapperComponent: ManagePocketsCreateWrapperComponent },
                }),
            ]), i2$2.AmountInputModule,
            i1$3.FormsModule,
            i1$1.IconModule,
            i4$3.InputDatepickerModule,
            i3$2.InputTextModule,
            i4$2.InputValidationMessageModule,
            i3$1.LoadButtonModule,
            i6$1.ModalModule,
            i1$3.ReactiveFormsModule,
            i1$4.StepperModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsCreateModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray([], __read(components$2)),
                        imports: __spreadArray(__spreadArray([
                            i6.CommonModule,
                            ManagePocketsCommonModule
                        ], __read(modules$2)), [
                            i1.BackbaseCoreModule.withConfig({
                                classMap: { ManagePocketsCreateWrapperComponent: ManagePocketsCreateWrapperComponent },
                            }),
                        ]),
                        exports: __spreadArray(__spreadArray([], __read(components$2)), __read(modules$2)),
                    }]
            }] });

    var ManagePocketsJourneyConfigurationToken = new i0.InjectionToken('ManagePocketsJourneyConfiguration injection token');
    var configDefaults = {
        displayHeaders: true,
        journeyCurrency: 'EUR',
        pocketImageList: [
            'home',
            'travel',
            'rent',
            'holidays',
            'savings',
            'utilities',
            'new-car',
            'insurance',
            'new-phone',
            'entertainment',
            'gift',
            'business',
            'custom',
        ],
    };
    var getDefaultConfigValues = function (config) { return (Object.assign(Object.assign({}, configDefaults), (config || {}))); };
    var ManagePocketsJourneyConfigService = /** @class */ (function () {
        function ManagePocketsJourneyConfigService(config) {
            this._config = getDefaultConfigValues(config);
        }
        Object.defineProperty(ManagePocketsJourneyConfigService.prototype, "defaults", {
            get: function () {
                return configDefaults;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ManagePocketsJourneyConfigService.prototype, "displayHeaders", {
            /**
             * Defines if the journey display header on each view
             */
            get: function () {
                return this._config.displayHeaders;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ManagePocketsJourneyConfigService.prototype, "pocketImageList", {
            /**
             * Names for pockets images, used to both name the type and look for the asset
             */
            get: function () {
                return this._config.pocketImageList;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ManagePocketsJourneyConfigService.prototype, "journeyCurrency", {
            /**
             * Currency used across the whole journey
             */
            get: function () {
                return this._config.journeyCurrency;
            },
            enumerable: false,
            configurable: true
        });
        return ManagePocketsJourneyConfigService;
    }());
    ManagePocketsJourneyConfigService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsJourneyConfigService, deps: [{ token: ManagePocketsJourneyConfigurationToken, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ManagePocketsJourneyConfigService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsJourneyConfigService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsJourneyConfigService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ManagePocketsJourneyConfigurationToken]
                        }] }];
        } });

    var ManagePocketsJourneyComponent = /** @class */ (function () {
        function ManagePocketsJourneyComponent() {
        }
        return ManagePocketsJourneyComponent;
    }());
    ManagePocketsJourneyComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsJourneyComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ManagePocketsJourneyComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsJourneyComponent, selector: "bb-manage-pockets-journey", providers: [ManagePocketsJourneyConfigService], ngImport: i0__namespace, template: '<router-outlet></router-outlet>', isInline: true, directives: [{ type: i3__namespace$3.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsJourneyComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-pockets-journey',
                        template: '<router-outlet></router-outlet>',
                        providers: [ManagePocketsJourneyConfigService],
                    }]
            }] });

    var ManagePocketsEmptyListComponent = /** @class */ (function () {
        function ManagePocketsEmptyListComponent() {
            this.createPocket = new i0.EventEmitter();
        }
        ManagePocketsEmptyListComponent.prototype.goToCreatePocket = function () {
            this.createPocket.emit();
        };
        return ManagePocketsEmptyListComponent;
    }());
    ManagePocketsEmptyListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsEmptyListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ManagePocketsEmptyListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsEmptyListComponent, selector: "bb-manage-pockets-empty-list", inputs: { emptyStateImageUrl: "emptyStateImageUrl" }, outputs: { createPocket: "createPocket" }, ngImport: i0__namespace, template: "<div class=\"bb-card bb-card--lg\">\n  <div class=\"bb-card__body bb-text-align-center\">\n    <div class=\"bb-block bb-block--lg\">\n      <img \n        class=\"img-fluid\" \n        *ngIf=\"!!emptyStateImageUrl\" \n        [src]=\"emptyStateImageUrl\"\n        alt=\"empty-state-image\"\n      />\n    </div>\n    <h2 \n      class=\"bb-block bb-block--sm\"\n      data-role=\"empty-state-message\"\n      i18n=\"Manage pockets empty state header@@managePockets.list.empty.state.header\"\n    >\n      Save More With Pockets!\n    </h2>\n    <div class=\"bb-block bb-block--lg\">\n      <span\n        class=\"bb-text-support text-small\"\n        data-role=\"empty-state-description\"\n        i18n=\"Manage pockets empty state description@managePockets.list.empty.state.description\"\n      >\n        Set up a dedicated space to help you stay on track with your saving goals\n      </span>\n    </div>\n    <div class=\"bb-block\">\n      <button bbButton color=\"primary\" (click)=\"goToCreatePocket()\">\n        <bb-icon-ui name=\"add\"></bb-icon-ui> \n        <span i18n=\"Create new pocket button@@managePockets.list.empty.state.createPocket.button\">\n          Create Pocket\n        </span>\n      </button>\n    </div>\n  </div>\n</div>", components: [{ type: i1__namespace$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i6__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsEmptyListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-pockets-empty-list',
                        templateUrl: "./manage-pockets-empty-list.component.html",
                    }]
            }], propDecorators: { emptyStateImageUrl: [{
                    type: i0.Input
                }], createPocket: [{
                    type: i0.Output
                }] } });

    var ManagePocketsListComponent = /** @class */ (function () {
        function ManagePocketsListComponent() {
            this.pocketTransfer = new i0.EventEmitter();
        }
        ManagePocketsListComponent.prototype.goToPocketTransfer = function (transferType) {
            this.pocketTransfer.emit(transferType);
        };
        return ManagePocketsListComponent;
    }());
    ManagePocketsListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ManagePocketsListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsListComponent, selector: "bb-manage-pockets-list", inputs: { pocketList: "pocketList" }, outputs: { pocketTransfer: "pocketTransfer" }, ngImport: i0__namespace, template: "<ng-container *ngFor=\"let pocket of pocketList\">\n  <div class=\"bb-block bb-block--xl\">\n    <bb-manage-pockets-card\n      [pocket]=\"pocket\"\n      (pocketTransfer)=\"goToPocketTransfer($event)\"\n    ></bb-manage-pockets-card>\n  </div>\n</ng-container>", components: [{ type: ManagePocketsCardComponent, selector: "bb-manage-pockets-card", inputs: ["pocket"], outputs: ["pocketTransfer"] }], directives: [{ type: i6__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-pockets-list',
                        templateUrl: "./manage-pockets-list.component.html",
                    }]
            }], propDecorators: { pocketList: [{
                    type: i0.Input
                }], pocketTransfer: [{
                    type: i0.Output
                }] } });

    var ManagePocketsListWrapperComponent = /** @class */ (function () {
        function ManagePocketsListWrapperComponent() {
            this.refreshData = new i0.EventEmitter();
            this.createPocket = new i0.EventEmitter();
            this.pocketTransfer = new i0.EventEmitter();
        }
        ManagePocketsListWrapperComponent.prototype.goToPocketTransfer = function (transferType) {
            this.pocketTransfer.emit(transferType);
        };
        ManagePocketsListWrapperComponent.prototype.onRefreshData = function () {
            this.refreshData.emit();
        };
        ManagePocketsListWrapperComponent.prototype.goToCreatePocket = function () {
            this.createPocket.emit();
        };
        return ManagePocketsListWrapperComponent;
    }());
    ManagePocketsListWrapperComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsListWrapperComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ManagePocketsListWrapperComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsListWrapperComponent, selector: "bb-manage-pockets-list-wrapper", inputs: { pocketList: "pocketList", pocketListApiError: "pocketListApiError", emptyStateImageUrl: "emptyStateImageUrl" }, outputs: { refreshData: "refreshData", createPocket: "createPocket", pocketTransfer: "pocketTransfer" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!pocketListApiError; else errorState\">\n  <ng-container *ngIf=\"pocketList?.pockets?.length > 0; else emptyState\">\n    <div class=\"bb-block bb-block--lg bb-card bb-card--sm\">\n      <div class=\"bb-card__body\">\n        <div class=\"bb-stack\">\n          <div class=\"bb-stack__item bb-stack__item--fill bb-stack\">\n            <bb-icon-ui name=\"attach-money\" size=\"lg\"></bb-icon-ui>\n            <h5 \n              class=\"bb-block bb-block--no-margin\"\n              i18n=\"Plan to save something else?|New Pocket title@@managePockets.component.listWrapper.header.title\"\n            >\n              Plan to save for something else?\n            </h5>\n          </div>\n          <div class=\"bb-stack__item\">\n            <button bbButton color=\"primary\" (click)=\"goToCreatePocket()\">\n              <bb-icon-ui name=\"add\" cropped></bb-icon-ui> \n              <span i18n=\"Create new pocket button@@managePockets.component.listWrapper.header.createPocket.button\">\n                Create Pocket\n              </span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <bb-manage-pockets-list\n      [pocketList]=\"pocketList.pockets\"\n      (pocketTransfer)=\"goToPocketTransfer($event)\"\n    ></bb-manage-pockets-list>\n  </ng-container>\n</ng-container>\n\n<ng-template #emptyState>\n  <bb-manage-pockets-empty-list [emptyStateImageUrl]=\"emptyStateImageUrl\" (createPocket)=\"goToCreatePocket()\"></bb-manage-pockets-empty-list>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"card\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        iconModifier=\"error-outline\"\n        iconColor=\"dark\"\n        iconSize='xxl'\n        title=\"Page couldn't load\"\n        i18n-title=\"Error state title@@managePockets.component.listWrapper.errorState.title\"\n        subtitle=\"Try to reload the page or contact the system administrator.\"\n        i18n-subtitle=\"Error state message@@managePockets.component.listWrapper.errorState.message\"\n      ></bb-empty-state-ui>\n      <div class=\"bb-state-container__footer\">\n        <button \n          bbButton \n          color=\"primary\" \n          i18n=\"Reload button text@@managePockets.component.listWrapper.errorState.reloadButton\"\n          (click)=\"onRefreshData()\"\n        >\n          Reload\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>", components: [{ type: i1__namespace$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: ManagePocketsListComponent, selector: "bb-manage-pockets-list", inputs: ["pocketList"], outputs: ["pocketTransfer"] }, { type: ManagePocketsEmptyListComponent, selector: "bb-manage-pockets-empty-list", inputs: ["emptyStateImageUrl"], outputs: ["createPocket"] }, { type: i4__namespace$3.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i6__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsListWrapperComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-pockets-list-wrapper',
                        templateUrl: "manage-pockets-list-wrapper.component.html",
                    }]
            }], propDecorators: { pocketList: [{
                    type: i0.Input
                }], pocketListApiError: [{
                    type: i0.Input
                }], emptyStateImageUrl: [{
                    type: i0.Input
                }], refreshData: [{
                    type: i0.Output
                }], createPocket: [{
                    type: i0.Output
                }], pocketTransfer: [{
                    type: i0.Output
                }] } });

    var components$1 = [ManagePocketsEmptyListComponent, ManagePocketsListComponent, ManagePocketsListWrapperComponent];
    var modules$1 = [i7$1.LoadingIndicatorModule];
    var ManagePocketsListModule = /** @class */ (function () {
        function ManagePocketsListModule() {
        }
        return ManagePocketsListModule;
    }());
    ManagePocketsListModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsListModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ManagePocketsListModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsListModule, declarations: [ManagePocketsEmptyListComponent, ManagePocketsListComponent, ManagePocketsListWrapperComponent], imports: [i6.CommonModule,
            ManagePocketsCommonModule, i7$1.LoadingIndicatorModule, i1__namespace.BackbaseCoreModule], exports: [ManagePocketsEmptyListComponent, ManagePocketsListComponent, ManagePocketsListWrapperComponent, i7$1.LoadingIndicatorModule] });
    ManagePocketsListModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsListModule, imports: [__spreadArray(__spreadArray([
                i6.CommonModule,
                ManagePocketsCommonModule
            ], __read(modules$1)), [
                i1.BackbaseCoreModule.withConfig({
                    classMap: { ManagePocketsListWrapperComponent: ManagePocketsListWrapperComponent },
                }),
            ]), i7$1.LoadingIndicatorModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsListModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray([], __read(components$1)),
                        imports: __spreadArray(__spreadArray([
                            i6.CommonModule,
                            ManagePocketsCommonModule
                        ], __read(modules$1)), [
                            i1.BackbaseCoreModule.withConfig({
                                classMap: { ManagePocketsListWrapperComponent: ManagePocketsListWrapperComponent },
                            }),
                        ]),
                        exports: __spreadArray(__spreadArray([], __read(components$1)), __read(modules$1)),
                    }]
            }] });

    var ManagePocketsTransfersDetailsComponent = /** @class */ (function (_super) {
        __extends(ManagePocketsTransfersDetailsComponent, _super);
        function ManagePocketsTransfersDetailsComponent(formBuilder) {
            var _this = _super.call(this) || this;
            _this.formBuilder = formBuilder;
            _this.accountChange = new i0.EventEmitter();
            _this.next = new i0.EventEmitter();
            return _this;
        }
        ManagePocketsTransfersDetailsComponent.prototype.ngOnInit = function () {
            var _a, _b;
            this.transferDetailsForm = this.formBuilder.group({
                amount: [
                    ((_a = this.partialNewPayment) === null || _a === void 0 ? void 0 : _a.amount) || '',
                    i1$3.Validators.compose([
                        i1$3.Validators.required,
                        i1$3.Validators.min(0.01),
                        this.validatorsSelector((_b = this.partialNewPayment) === null || _b === void 0 ? void 0 : _b.account),
                    ]),
                ],
            });
        };
        ManagePocketsTransfersDetailsComponent.prototype.goNext = function () {
            if (this.transferDetailsForm.valid) {
                var paymentForm = Object.assign(Object.assign({}, this.partialNewPayment), { amount: this.transferDetailsForm.get('amount').value });
                this.next.emit(paymentForm);
            }
            else {
                this.transferDetailsForm.markAllAsTouched();
            }
        };
        ManagePocketsTransfersDetailsComponent.prototype.onAccountSelection = function (account) {
            var control = this.transferDetailsForm.get('amount');
            control.setValidators([i1$3.Validators.required, i1$3.Validators.min(0.01), this.validatorsSelector(account)]);
            control.updateValueAndValidity();
            this.accountChange.emit(account);
        };
        ManagePocketsTransfersDetailsComponent.prototype.validatorsSelector = function (account) {
            var _a, _b, _c, _d;
            var pocketBalance = ((_b = (_a = this.partialNewPayment) === null || _a === void 0 ? void 0 : _a.pocketInfo) === null || _b === void 0 ? void 0 : _b.pocket.balance.amount) || 0;
            return ((_d = (_c = this.partialNewPayment) === null || _c === void 0 ? void 0 : _c.pocketInfo) === null || _d === void 0 ? void 0 : _d.transferType) === this.transferTypesEnum.ADD
                ? i1$3.Validators.max((account === null || account === void 0 ? void 0 : account.balance) || 0)
                : i1$3.Validators.max(Number(pocketBalance));
        };
        return ManagePocketsTransfersDetailsComponent;
    }(ManagePocketsBaseStep));
    ManagePocketsTransfersDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsTransfersDetailsComponent, deps: [{ token: i1__namespace$3.FormBuilder }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ManagePocketsTransfersDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsTransfersDetailsComponent, selector: "bb-manage-pockets-transfers-details", inputs: { accountList: "accountList", journeyCurrency: "journeyCurrency" }, outputs: { accountChange: "accountChange", next: "next" }, usesInheritance: true, ngImport: i0__namespace, template: "<form [formGroup]=\"transferDetailsForm\" (submit)=\"goNext()\">\n  <div class=\"bb-block bb-block--xl\">\n\n    <label>\n      {{ partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.transfers.details.addMoneyHeader : pocketLocalizations.transfers.details.withdrawMoneyHeader }}\n    </label>\n\n    <bb-account-selector-ui\n      [items]=\"accountList\"\n      [selectedItems]=\"partialNewPayment?.account ?? ''\"\n      [closeOnSelect]=\"true\"\n      [highlight]=\"false\"\n      [required]=\"true\"\n      dropdownPosition=\"bottom\"\n      placeholder=\"Select an Account\"\n      i18n-placeholder=\"Select an Account@@managePockets.transfers.details.accountSelector.placeholder\"\n      (change)=\"onAccountSelection($event)\"\n    ></bb-account-selector-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <div class=\"bb-stack row\">\n      <div class=\"bb-stack__item col-6\">\n        <div class=\"bb-block bb-block--sm\">\n          <bb-amount-input-ui\n            formControlName=\"amount\"\n            label=\"Amount\"\n            i18n-label=\"Amount@@managePockets.transfers.details.amount.placeholder\"\n            [attr.aria-invalid]=\"!isFieldValid(transferDetailsForm, 'amount')\"\n            [currency]=\"journeyCurrency\"\n            placeholder=\"0.00\"\n            i18n-placeholder=\"0.00|Price example@@managePockets.transfers.details.amount.placeholder\"\n          ></bb-amount-input-ui>\n        </div>\n        <div class=\"bb-subtitle bb-text-support\" i18n=\"Available balance|Value includes a formatted currendy@@managePockets.transfers.details.availableBalance\" *ngIf=\"partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.WITHDRAW\">\n          <span>Available Balance: </span>\n          <bb-amount-ui\n            [amount]=\"partialNewPayment?.pocketInfo?.pocket?.balance?.amount\"\n            [currency]=\"partialNewPayment?.pocketInfo?.pocket?.balance?.currencyCode\"\n          ></bb-amount-ui>\n        </div>\n        <bb-input-validation-message-ui [showErrors]=\"!isFieldValid(transferDetailsForm, 'amount')\" >\n          <ng-container *ngFor=\"let error of getFieldErrors(transferDetailsForm, 'amount') | keyvalue; last as last\">\n            <ng-container *ngIf=\"last\" [ngSwitch]=\"error.key\">\n              <span *ngSwitchCase=\"'max'\">\n                {{ partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.transfers.details.addMoneyError : pocketLocalizations.transfers.details.withdrawMoneyError }}\n              </span>\n              <span i18n=\"Amount is required@@managePockets.transfers.details.amount.error.required\" *ngSwitchDefault>\n                Amount is required\n              </span>\n            </ng-container>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"bb-button-bar\">\n    <button \n      bbButton \n      class=\"bb-button-bar__button\" \n      type=\"submit\"\n    >\n      {{ partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.transfers.details.addMoneyContinueButton : pocketLocalizations.transfers.details.withdrawMoneyContinueButton }}\n    </button>\n    <button \n      bbButton \n      color=\"link\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      i18n=\"Cancel@@managePockets.transfers.details.button.cancel\"\n      (click)=\"abort()\"\n    >\n      Cancel\n    </button>\n  </div>\n</form>\n", components: [{ type: i2__namespace$3.AccountSelectorComponent, selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: i2__namespace$2.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: i3__namespace.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i4__namespace$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i6__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i6__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i6__namespace.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "keyvalue": i6__namespace.KeyValuePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsTransfersDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-pockets-transfers-details',
                        templateUrl: './manage-pockets-transfers-details.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }]; }, propDecorators: { accountList: [{
                    type: i0.Input
                }], journeyCurrency: [{
                    type: i0.Input
                }], accountChange: [{
                    type: i0.Output
                }], next: [{
                    type: i0.Output
                }] } });

    var ManagePocketsTransfersReviewComponent = /** @class */ (function (_super) {
        __extends(ManagePocketsTransfersReviewComponent, _super);
        function ManagePocketsTransfersReviewComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.newTransfer = new i0.EventEmitter();
            return _this;
        }
        ManagePocketsTransfersReviewComponent.prototype.performTransfer = function () {
            this.newTransfer.emit(this.partialNewPayment);
        };
        return ManagePocketsTransfersReviewComponent;
    }(ManagePocketsBaseStep));
    ManagePocketsTransfersReviewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsTransfersReviewComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    ManagePocketsTransfersReviewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsTransfersReviewComponent, selector: "bb-manage-pockets-transfers-review", inputs: { awaitingTransferResponse: "awaitingTransferResponse" }, outputs: { newTransfer: "newTransfer" }, usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"bb-block bb-block--lg\">\n  <h2>{{ partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.transfers.review.addMoneyHeader : pocketLocalizations.transfers.review.withdrawMoneyHeader }}</h2>\n</div>\n\n<div class=\"bb-item-log bb-block bb-block--lg\">\n  <div class=\"bb-item-log__record bb-item-log__record--has-bullet\">\n    <div class=\"bb-item-log-record__bullet-icon bb-item-log-record__bullet-icon--filled bb-item-log-record__bullet-icon--spacing-md\"></div>\n    <div class=\"bb-block bb-block--md bb-item-log-record__details\">\n      <div class=\"bb-text-bold bb-block bb-block--sm\" i18n=\"From@@managePockets.transfers.review.itemLog.from.label\">\n        From\n      </div>\n      <ng-container *ngIf=\"partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD; then accountSlot; else pocketSlot\"></ng-container>\n    </div>\n  </div>\n  <div class=\"bb-item-log__record bb-item-log__record--has-bullet\">\n    <div class=\"bb-item-log-record__bullet-icon bb-item-log-record__bullet-icon--spacing-md\"></div>\n    <div class=\"bb-item-log-record__details\">\n      <div class=\"bb-text-bold bb-block bb-block--sm\" i18n=\"To@@managePockets.transfers.review.itemLog.to.label\">\n        To\n      </div>\n      <ng-container *ngIf=\"partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD; then pocketSlot; else accountSlot\"></ng-container>\n    </div>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <div class=\"bb-block bb-block--sm\">\n    <span class=\"bb-text-semi-bold\" i18n=\"Amount@@managePockets.transfers.review.amount.header\">\n      Amount\n    </span>\n  </div>\n  <bb-amount-ui\n    class=\"bb-heading-1\"\n    [amount]=\"partialNewPayment?.amount\"\n    [currency]=\"journeyCurrency\"\n  ></bb-amount-ui>\n</div>\n\n<div class=\"bb-button-bar\">\n  <bb-load-button-ui\n    i18n=\"Confirm Transfer@@managePockets.transfers.review.button.confirmTransfer\"\n    color=\"primary\"\n    class=\"bb-button-bar__button\"\n    [isLoading]=\"awaitingTransferResponse\"\n    (click)=\"!awaitingTransferResponse && performTransfer()\"\n  >\n    Confirm Transfer\n  </bb-load-button-ui>\n  <button \n    bbButton \n    color=\"secondary\"\n    class=\"bb-button-bar__button\"\n    i18n=\"Back@@managePockets.transfers.review.button.back\"\n    (click)=\"goBack()\"\n  >\n    Back\n  </button>\n  <button \n    bbButton \n    color=\"link\"\n    class=\"bb-button-bar__button bb-button-bar__button--across\"\n    i18n=\"Cancel@@managePockets.transfers.review.button.cancel\"\n    (click)=\"abort()\"\n  >\n    Cancel\n  </button>\n</div>\n\n<ng-template #pocketSlot>\n  <div class=\"break-word bb-highlight bb-block bb-block--xs\">\n    {{partialNewPayment?.pocketInfo?.pocket?.name}}\n  </div>\n  <div class=\"bb-text-support bb-subtitle break-word contextual-alternates-off\" i18n=\"Pocket@@managePockets.transfers.review.itemLog.to.details\">\n    Pocket\n  </div>\n</ng-template>\n\n<ng-template #accountSlot>\n  <div class=\"break-word bb-highlight bb-block bb-block--xs\">\n    {{partialNewPayment?.account?.name}}\n  </div>\n  <div class=\"bb-text-support bb-subtitle break-word contextual-alternates-off\">\n    {{partialNewPayment?.account?.number}}\n  </div>\n</ng-template>", components: [{ type: i3__namespace.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i3__namespace$1.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i6__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsTransfersReviewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-pockets-transfers-review',
                        templateUrl: './manage-pockets-transfers-review.component.html',
                    }]
            }], propDecorators: { awaitingTransferResponse: [{
                    type: i0.Input
                }], newTransfer: [{
                    type: i0.Output
                }] } });

    var ManagePocketsTransfersWrapperComponent = /** @class */ (function (_super) {
        __extends(ManagePocketsTransfersWrapperComponent, _super);
        function ManagePocketsTransfersWrapperComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.newTransfer = new i0.EventEmitter();
            _this.transferTypesEnum = TransferTypeEnum;
            _this.pocketLocalizations = POCKET_LOCALIZATIONS;
            return _this;
        }
        ManagePocketsTransfersWrapperComponent.prototype.ngOnInit = function () {
            this.partialNewPayment = this.generatePaymentInfo();
        };
        ManagePocketsTransfersWrapperComponent.prototype.accountChange = function (account) {
            this.partialNewPayment = Object.assign(Object.assign({}, this.partialNewPayment), { account: account });
        };
        ManagePocketsTransfersWrapperComponent.prototype.goNext = function (paymentData) {
            this.partialNewPayment = paymentData;
            this.goToStep(this.currentStep + 1);
        };
        ManagePocketsTransfersWrapperComponent.prototype.performTransfer = function (paymentInfo) {
            this.newTransfer.emit(paymentInfo);
        };
        ManagePocketsTransfersWrapperComponent.prototype.generatePaymentInfo = function () {
            var _a;
            return Object.assign(Object.assign({}, this.partialNewPayment), { account: (_a = this.accountList) === null || _a === void 0 ? void 0 : _a[0], currencyCode: this.journeyCurrency, pocketInfo: this.pocketInfo });
        };
        return ManagePocketsTransfersWrapperComponent;
    }(ManagePocketsBaseWrapperComponent));
    ManagePocketsTransfersWrapperComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsTransfersWrapperComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    ManagePocketsTransfersWrapperComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsTransfersWrapperComponent, selector: "bb-manage-pockets-transfers-wrapper", inputs: { accountList: "accountList", awaitingTransferResponse: "awaitingTransferResponse", partialNewPayment: "partialNewPayment", pocketInfo: "pocketInfo" }, outputs: { newTransfer: "newTransfer" }, usesInheritance: true, ngImport: i0__namespace, template: "<bb-manage-pockets-transfers-details\n  *ngIf=\"currentStep === 1\"\n  [accountList]=\"accountList\"\n  [journeyCurrency]=\"journeyCurrency\"\n  [partialNewPayment]=\"partialNewPayment\"\n  (accountChange)=\"accountChange($event)\"\n  (cancel)=\"showAbortDialog()\"\n  (next)=\"goNext($event)\"\n></bb-manage-pockets-transfers-details>\n<bb-manage-pockets-transfers-review\n  *ngIf=\"currentStep === 2\"\n  [awaitingTransferResponse]=\"awaitingTransferResponse\"\n  [journeyCurrency]=\"journeyCurrency\"\n  [partialNewPayment]=\"partialNewPayment\"\n  [pocketInfo]=\"pocketInfo\"\n  (back)=\"goBack()\"\n  (cancel)=\"showAbortDialog()\"\n  (newTransfer)=\"performTransfer($event)\"\n></bb-manage-pockets-transfers-review>\n\n<bb-modal-ui [isOpen]=\"showDialog\" (cancel)=\"closeAbortDialog()\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <div class=\"bb-stack\">\n        <div class=\"bb-stack__item\">\n          <span class=\"modal-title\">\n            {{ partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.transfers.wrapper.addMoneyModalHeader : pocketLocalizations.transfers.wrapper.withdrawMoneyModalHeader }}\n          </span>\n          <ng-container *ngIf=\"partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD; then addMoneyModalHeader; else withdrawMoneyModalHeader\"></ng-container>\n        </div>\n        <div class=\"bb-stack__item--push-right\">\n          <button\n            bbButton\n            (click)=\"closeAbortDialog()\"\n            class=\"bb-stack__item-sm\"\n            color=\"unstyled\"\n            aria-label=\"close dialog\"\n            i18n-aria-label=\"close dialog button@@managePockets.transfers.wrapper.modal.button.close\"\n          >\n            <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n          </button>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <span>\n        {{ partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.transfers.wrapper.addMoneyModalBody : pocketLocalizations.transfers.wrapper.withdrawMoneyModalBody }}\n      </span>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          (click)=\"confirmAbort()\"\n        >\n          {{ partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.transfers.wrapper.addMoneyModalConfirm : pocketLocalizations.transfers.wrapper.withdrawMoneyModalConfirm }}\n        </button>\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          (click)=\"closeAbortDialog()\"\n          i18n=\"Keep it@@managePockets.transfers.wrapper.modal.button.cancel\"\n        >\n          Keep it\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>", components: [{ type: ManagePocketsTransfersDetailsComponent, selector: "bb-manage-pockets-transfers-details", inputs: ["accountList", "journeyCurrency"], outputs: ["accountChange", "next"] }, { type: ManagePocketsTransfersReviewComponent, selector: "bb-manage-pockets-transfers-review", inputs: ["awaitingTransferResponse"], outputs: ["newTransfer"] }, { type: i6__namespace$1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i6__namespace$1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1__namespace$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i6__namespace$1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i6__namespace$1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i6__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6__namespace$1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6__namespace$1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i6__namespace$1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsTransfersWrapperComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-pockets-transfers-wrapper',
                        templateUrl: './manage-pockets-transfers-wrapper.component.html',
                    }]
            }], propDecorators: { accountList: [{
                    type: i0.Input
                }], awaitingTransferResponse: [{
                    type: i0.Input
                }], partialNewPayment: [{
                    type: i0.Input
                }], pocketInfo: [{
                    type: i0.Input
                }], newTransfer: [{
                    type: i0.Output
                }] } });

    var components = [
        ManagePocketsTransfersReviewComponent,
        ManagePocketsTransfersWrapperComponent,
        ManagePocketsTransfersDetailsComponent,
    ];
    var modules = [
        i2$3.AccountSelectorModule,
        i2$2.AmountInputModule,
        i4$2.InputValidationMessageModule,
        i1$3.FormsModule,
        i3$1.LoadButtonModule,
        i6$1.ModalModule,
        i1$3.ReactiveFormsModule,
    ];
    var ManagePocketsTransfersModule = /** @class */ (function () {
        function ManagePocketsTransfersModule() {
        }
        return ManagePocketsTransfersModule;
    }());
    ManagePocketsTransfersModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsTransfersModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ManagePocketsTransfersModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsTransfersModule, declarations: [ManagePocketsTransfersReviewComponent,
            ManagePocketsTransfersWrapperComponent,
            ManagePocketsTransfersDetailsComponent], imports: [i2$3.AccountSelectorModule,
            i2$2.AmountInputModule,
            i4$2.InputValidationMessageModule,
            i1$3.FormsModule,
            i3$1.LoadButtonModule,
            i6$1.ModalModule,
            i1$3.ReactiveFormsModule, i6.CommonModule,
            ManagePocketsCommonModule, i1__namespace.BackbaseCoreModule], exports: [ManagePocketsTransfersReviewComponent,
            ManagePocketsTransfersWrapperComponent,
            ManagePocketsTransfersDetailsComponent, i2$3.AccountSelectorModule,
            i2$2.AmountInputModule,
            i4$2.InputValidationMessageModule,
            i1$3.FormsModule,
            i3$1.LoadButtonModule,
            i6$1.ModalModule,
            i1$3.ReactiveFormsModule] });
    ManagePocketsTransfersModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsTransfersModule, imports: [__spreadArray(__spreadArray([], __read(modules)), [
                i6.CommonModule,
                ManagePocketsCommonModule,
                i1.BackbaseCoreModule.withConfig({
                    classMap: { ManagePocketsTransfersWrapperComponent: ManagePocketsTransfersWrapperComponent },
                }),
            ]), i2$3.AccountSelectorModule,
            i2$2.AmountInputModule,
            i4$2.InputValidationMessageModule,
            i1$3.FormsModule,
            i3$1.LoadButtonModule,
            i6$1.ModalModule,
            i1$3.ReactiveFormsModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsTransfersModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray([], __read(components)),
                        imports: __spreadArray(__spreadArray([], __read(modules)), [
                            i6.CommonModule,
                            ManagePocketsCommonModule,
                            i1.BackbaseCoreModule.withConfig({
                                classMap: { ManagePocketsTransfersWrapperComponent: ManagePocketsTransfersWrapperComponent },
                            }),
                        ]),
                        exports: __spreadArray(__spreadArray([], __read(components)), __read(modules)),
                    }]
            }] });

    var ManagePocketsCreateViewComponent = /** @class */ (function () {
        function ManagePocketsCreateViewComponent(managePocketsService, router, route, cd, notificationService, configService) {
            this.managePocketsService = managePocketsService;
            this.router = router;
            this.route = route;
            this.cd = cd;
            this.notificationService = notificationService;
            this.configService = configService;
            this.awaitingCreateResponse = false;
        }
        ManagePocketsCreateViewComponent.prototype.abort = function () {
            this.navigateToList();
        };
        ManagePocketsCreateViewComponent.prototype.saveNewPocket = function (newPocketItem) {
            var _this = this;
            this.awaitingCreateResponse = true;
            var onSuccess = function () {
                _this.awaitingCreateResponse = false;
                _this.cd.markForCheck();
                _this.pushNotification($localize(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject([":Success pocket creation toast message@@managePockets.create.toast.success.message:Your \"", ":pocket name:\" pocket is created."], [":Success pocket creation toast message@@managePockets.create.toast.success.message:Your \"", ":pocket name:\" pocket is created."])), newPocketItem.name), 'success', $localize(templateObject_2$1 || (templateObject_2$1 = __makeTemplateObject([":Success pocket creation toast header@@managePockets.create.toast.success.header:Your Pocket is Ready!"], [":Success pocket creation toast header@@managePockets.create.toast.success.header:Your Pocket is Ready!"]))));
                _this.navigateToList();
            };
            var onError = function () {
                _this.awaitingCreateResponse = false;
                _this.cd.markForCheck();
                _this.pushNotification($localize(templateObject_3$1 || (templateObject_3$1 = __makeTemplateObject([":Error pocket creation toast message@@managePockets.create.toast.error.message:Unable to proceed, please try again."], [":Error pocket creation toast message@@managePockets.create.toast.error.message:Unable to proceed, please try again."]))), 'error', $localize(templateObject_4$1 || (templateObject_4$1 = __makeTemplateObject([":Error pocket creation toast header@@managePockets.create.toast.error.header:Failed to Create Pocket"], [":Error pocket creation toast header@@managePockets.create.toast.error.header:Failed to Create Pocket"]))));
            };
            this.managePocketsService.postPocket(newPocketItem).subscribe(onSuccess, onError);
        };
        ManagePocketsCreateViewComponent.prototype.navigateToList = function () {
            this.router.navigate(['../list'], { relativeTo: this.route });
        };
        ManagePocketsCreateViewComponent.prototype.pushNotification = function (message, modifier, header) {
            this.notificationService.showNotification({
                header: header,
                message: message,
                modifier: modifier,
                dismissible: true,
                ttl: 5000,
            });
        };
        return ManagePocketsCreateViewComponent;
    }());
    ManagePocketsCreateViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsCreateViewComponent, deps: [{ token: ManagePocketsService }, { token: i3__namespace$3.Router }, { token: i3__namespace$3.ActivatedRoute }, { token: i0__namespace.ChangeDetectorRef }, { token: i3__namespace$4.NotificationService }, { token: ManagePocketsJourneyConfigService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ManagePocketsCreateViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsCreateViewComponent, selector: "bb-manage-pockets-create-view", ngImport: i0__namespace, template: "<div class=\"heading-widget bb-heading-widget px-0\" *ngIf=\"configService.displayHeaders\">\n  <bb-header-ui\n    headingType=\"h1\"\n    headingClasses=\"bb-heading-widget__heading\"\n    heading=\"Create Pocket\"\n    i18n-heading=\"Create Pocket heading@@managePockets.createView.heading.title\"\n  ></bb-header-ui>\n</div>\n\n<bb-manage-pockets-create-wrapper\n  (cancel)=\"abort()\"\n  (newPocket)=\"saveNewPocket($event)\"\n  [pocketImageList]=\"configService.pocketImageList\"\n  [journeyCurrency]=\"configService.journeyCurrency\"\n  [awaitingCreateResponse]=\"awaitingCreateResponse\"\n></bb-manage-pockets-create-wrapper>", components: [{ type: i5__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: ManagePocketsCreateWrapperComponent, selector: "bb-manage-pockets-create-wrapper", inputs: ["pocketImageList", "awaitingCreateResponse"], outputs: ["newPocket"] }], directives: [{ type: i6__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsCreateViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-pockets-create-view',
                        templateUrl: './manage-pockets-create-view.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: ManagePocketsService }, { type: i3__namespace$3.Router }, { type: i3__namespace$3.ActivatedRoute }, { type: i0__namespace.ChangeDetectorRef }, { type: i3__namespace$4.NotificationService }, { type: ManagePocketsJourneyConfigService }]; } });
    var templateObject_1$1, templateObject_2$1, templateObject_3$1, templateObject_4$1;

    var ManagePocketsListViewComponent = /** @class */ (function () {
        function ManagePocketsListViewComponent(managePocketsService, assetsService, router, route, configService) {
            this.managePocketsService = managePocketsService;
            this.assetsService = assetsService;
            this.router = router;
            this.route = route;
            this.configService = configService;
            /**
             * Api Error status observable. Will return `true` is API fails for any reason
             */
            this.apiErrorStatus$ = this.managePocketsService.pocketListApiError$;
            this.resolveAsset = this.assetsService.createAssetsResolver({
                widgetName: 'bb-manage-pockets-journey-ang',
                getURIFromAssetID: function (assetId) { return assetId; },
            });
        }
        ManagePocketsListViewComponent.prototype.ngOnInit = function () {
            this.refreshPocketList();
        };
        ManagePocketsListViewComponent.prototype.refreshPocketList = function () {
            this.pocketList$ = this.managePocketsService.retrievePocketList();
        };
        ManagePocketsListViewComponent.prototype.goToCreatePocket = function () {
            this.router.navigate(['../create'], { relativeTo: this.route });
        };
        ManagePocketsListViewComponent.prototype.goToPocketTransfer = function (pocketTransferItem) {
            this.router.navigate(['../transfer'], { state: pocketTransferItem, relativeTo: this.route });
        };
        Object.defineProperty(ManagePocketsListViewComponent.prototype, "imageEmptyStateUrl", {
            get: function () {
                return this.resolveAsset('manage-pockets-empty-state-img.webp');
            },
            enumerable: false,
            configurable: true
        });
        return ManagePocketsListViewComponent;
    }());
    ManagePocketsListViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsListViewComponent, deps: [{ token: ManagePocketsService }, { token: i1__namespace.AssetsService }, { token: i3__namespace$3.Router }, { token: i3__namespace$3.ActivatedRoute }, { token: ManagePocketsJourneyConfigService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ManagePocketsListViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsListViewComponent, selector: "bb-manage-pockets-list-view", ngImport: i0__namespace, template: "<div class=\"heading-widget bb-heading-widget px-0\" *ngIf=\"configService.displayHeaders\">\n  <bb-header-ui\n    headingType=\"h1\"\n    headingClasses=\"bb-heading-widget__heading\"\n    heading=\"Pockets\"\n    i18n-heading=\"Pockets heading@@managePockets.listView.heading.title\"\n  ></bb-header-ui>\n</div>\n\n<bb-manage-pockets-list-wrapper\n  *ngIf=\"pocketList$ | async as pocketList; else loadingState\"\n  [pocketList]=\"pocketList\"\n  [pocketListApiError]=\"apiErrorStatus$ | async\"\n  [emptyStateImageUrl]=\"imageEmptyStateUrl | async\"\n  (createPocket)=\"goToCreatePocket()\"\n  (pocketTransfer)=\"goToPocketTransfer($event)\"\n  (refreshData)=\"refreshPocketList()\"\n></bb-manage-pockets-list-wrapper>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui \n    loaderSize=\"lg\" \n    text=\"Loading your pockets...\"\n    i18n-text=\"Loading your pockets...|Text for the loading indicator@@managePockets.listView.loading.indicator.text\"\n  ></bb-loading-indicator-ui>\n</ng-template>", components: [{ type: i5__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: ManagePocketsListWrapperComponent, selector: "bb-manage-pockets-list-wrapper", inputs: ["pocketList", "pocketListApiError", "emptyStateImageUrl"], outputs: ["refreshData", "createPocket", "pocketTransfer"] }, { type: i7__namespace$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i6__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i6__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsListViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-pockets-list-view',
                        templateUrl: './manage-pockets-list-view.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: ManagePocketsService }, { type: i1__namespace.AssetsService }, { type: i3__namespace$3.Router }, { type: i3__namespace$3.ActivatedRoute }, { type: ManagePocketsJourneyConfigService }]; } });

    var PaymentTypeEnum;
    (function (PaymentTypeEnum) {
        PaymentTypeEnum["POCKET_TRANSFER"] = "POCKET_TRANSFER";
    })(PaymentTypeEnum || (PaymentTypeEnum = {}));
    var PaymentRoleEnum;
    (function (PaymentRoleEnum) {
        PaymentRoleEnum["CREDITOR"] = "CREDITOR";
        PaymentRoleEnum["DEBTOR"] = "DEBTOR";
    })(PaymentRoleEnum || (PaymentRoleEnum = {}));
    var SchemeNameTypeEnum;
    (function (SchemeNameTypeEnum) {
        SchemeNameTypeEnum["IBAN"] = "IBAN";
        SchemeNameTypeEnum["BBAN"] = "BBAN";
        SchemeNameTypeEnum["ID"] = "ID";
        SchemeNameTypeEnum["EXTERNAL_ID"] = "EXTERNAL_ID";
        SchemeNameTypeEnum["EMAIL"] = "EMAIL";
        SchemeNameTypeEnum["MOBILE"] = "MOBILE";
    })(SchemeNameTypeEnum || (SchemeNameTypeEnum = {}));
    var PaymentOrderNamespace;
    (function (PaymentOrderNamespace) {
        function buildPaymentOrderPostRequest(paymentInfo) {
            var _a, _b, _c, _d, _e, _f, _g;
            return {
                paymentOrdersPost: {
                    paymentType: PaymentTypeEnum.POCKET_TRANSFER,
                    batchBooking: false,
                    requestedExecutionDate: pocketFormatDate(),
                    originatorAccount: {
                        identification: {
                            identification: ((_a = paymentInfo.account) === null || _a === void 0 ? void 0 : _a.id) || '',
                            schemeName: SchemeNameTypeEnum.ID,
                        },
                    },
                    transferTransactionInformation: {
                        counterparty: {
                            name: ((_c = (_b = paymentInfo.pocketInfo) === null || _b === void 0 ? void 0 : _b.pocket) === null || _c === void 0 ? void 0 : _c.name) || '',
                            role: ((_d = paymentInfo.pocketInfo) === null || _d === void 0 ? void 0 : _d.transferType) === TransferTypeEnum.ADD
                                ? PaymentRoleEnum.CREDITOR
                                : PaymentRoleEnum.DEBTOR,
                        },
                        counterpartyAccount: {
                            identification: {
                                identification: ((_f = (_e = paymentInfo.pocketInfo) === null || _e === void 0 ? void 0 : _e.pocket) === null || _f === void 0 ? void 0 : _f.arrangementId) || '',
                                schemeName: SchemeNameTypeEnum.ID,
                            },
                        },
                        instructedAmount: {
                            amount: ((_g = paymentInfo === null || paymentInfo === void 0 ? void 0 : paymentInfo.amount) === null || _g === void 0 ? void 0 : _g.toString()) || '',
                            currencyCode: (paymentInfo === null || paymentInfo === void 0 ? void 0 : paymentInfo.currencyCode) || '',
                        },
                    },
                },
            };
        }
        PaymentOrderNamespace.buildPaymentOrderPostRequest = buildPaymentOrderPostRequest;
    })(PaymentOrderNamespace || (PaymentOrderNamespace = {}));

    var PaymentOrderService = /** @class */ (function () {
        function PaymentOrderService(paymentOrderService) {
            this.paymentOrderService = paymentOrderService;
        }
        PaymentOrderService.prototype.transferMoney = function (paymentInfo) {
            var payload = PaymentOrderNamespace.buildPaymentOrderPostRequest(paymentInfo);
            return this.paymentOrderService.postPaymentOrders(payload);
        };
        return PaymentOrderService;
    }());
    PaymentOrderService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentOrderService, deps: [{ token: i1__namespace$5.PaymentOrdersHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PaymentOrderService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentOrderService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentOrderService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$5.PaymentOrdersHttpService }]; } });

    var ManagePocketsTransfersViewComponent = /** @class */ (function () {
        function ManagePocketsTransfersViewComponent(managePocketsService, paymentOrderService, router, route, cd, notificationService, configService) {
            this.managePocketsService = managePocketsService;
            this.paymentOrderService = paymentOrderService;
            this.router = router;
            this.route = route;
            this.cd = cd;
            this.notificationService = notificationService;
            this.configService = configService;
            this.awaitingTransferResponse = false;
            this.pocketLocalizations = POCKET_LOCALIZATIONS;
            this.transferTypesEnum = TransferTypeEnum;
            var nav = this.router.getCurrentNavigation();
            this.pocketInfo = nav === null || nav === void 0 ? void 0 : nav.extras.state;
        }
        ManagePocketsTransfersViewComponent.prototype.ngOnInit = function () {
            if (!this.pocketInfo) {
                console.error("\"pocketInfo\" input is required in \"ManagePocketsTransfersViewComponent\". Redirecting to Pocket List");
                this.navigateToList();
            }
            this.refreshAccountList();
        };
        ManagePocketsTransfersViewComponent.prototype.refreshAccountList = function () {
            this.accountList$ = this.managePocketsService.retrieveAccountList();
        };
        ManagePocketsTransfersViewComponent.prototype.abort = function () {
            this.navigateToList();
        };
        ManagePocketsTransfersViewComponent.prototype.performTransfer = function (paymentInfo) {
            var _this = this;
            this.awaitingTransferResponse = true;
            var notificationLocalizations = this.generateNotificationLocalizations(paymentInfo);
            var onSuccess = function () {
                _this.awaitingTransferResponse = false;
                var notificationMessage = notificationLocalizations.success.message;
                var notificationHeader = notificationLocalizations.success.header;
                _this.cd.markForCheck();
                _this.pushNotification(notificationMessage, 'success', notificationHeader);
                _this.navigateToList();
            };
            var onError = function () {
                _this.awaitingTransferResponse = false;
                var notificationMessage = notificationLocalizations.error.message;
                var notificationHeader = notificationLocalizations.error.header;
                _this.cd.markForCheck();
                _this.pushNotification(notificationMessage, 'error', notificationHeader);
            };
            this.paymentOrderService.transferMoney(paymentInfo).subscribe(onSuccess, onError);
        };
        ManagePocketsTransfersViewComponent.prototype.navigateToList = function () {
            this.router.navigate(['../list'], { relativeTo: this.route });
        };
        ManagePocketsTransfersViewComponent.prototype.pushNotification = function (message, modifier, header) {
            this.notificationService.showNotification({
                header: header,
                message: message,
                modifier: modifier,
                dismissible: true,
                ttl: 5000,
            });
        };
        ManagePocketsTransfersViewComponent.prototype.generateNotificationLocalizations = function (paymentInfo) {
            var _a, _b, _c;
            var addMoneyLocalizations = {
                success: {
                    header: $localize(templateObject_1 || (templateObject_1 = __makeTemplateObject([":Success pocket transfer toast header@@managePockets.transfer.toast.success.header:Transfer Successful!"], [":Success pocket transfer toast header@@managePockets.transfer.toast.success.header:Transfer Successful!"]))),
                    message: $localize(templateObject_2 || (templateObject_2 = __makeTemplateObject([":Success pocket transfer toast message@@managePockets.transfer.toast.success.add.message:You've just transfered ", " ", " to your '", "' pocket."], [":Success pocket transfer toast message@@managePockets.transfer.toast.success.add.message:You've just transfered ", " ", " to your '", "' pocket."])), paymentInfo.currencyCode, paymentInfo.amount, (_a = paymentInfo.pocketInfo) === null || _a === void 0 ? void 0 : _a.pocket.name),
                },
                error: {
                    header: $localize(templateObject_3 || (templateObject_3 = __makeTemplateObject([":Error pocket creation toast header@@managePockets.transfer.toast.error.header.add:Failed to Add Money"], [":Error pocket creation toast header@@managePockets.transfer.toast.error.header.add:Failed to Add Money"]))),
                    message: $localize(templateObject_4 || (templateObject_4 = __makeTemplateObject([":Error pocket creation toast message@@managePockets.transfer.toast.error.message.add:Unable to proceed, please try again."], [":Error pocket creation toast message@@managePockets.transfer.toast.error.message.add:Unable to proceed, please try again."]))),
                },
            };
            var withdrawMoneyLocalizations = {
                success: {
                    header: $localize(templateObject_5 || (templateObject_5 = __makeTemplateObject([":Success pocket withdraw toast header@@managePockets.transfer.toast.success.header:Withdrawal Successful!"], [":Success pocket withdraw toast header@@managePockets.transfer.toast.success.header:Withdrawal Successful!"]))),
                    message: $localize(templateObject_6 || (templateObject_6 = __makeTemplateObject([":Success pocket withdraw toast message@@managePockets.transfer.toast.success.withdraw.message:You've just withdrawn ", " ", " from your '", "' pocket."], [":Success pocket withdraw toast message@@managePockets.transfer.toast.success.withdraw.message:You've just withdrawn ", " ", " from your '", "' pocket."])), paymentInfo.currencyCode, paymentInfo.amount, (_b = paymentInfo.pocketInfo) === null || _b === void 0 ? void 0 : _b.pocket.name),
                },
                error: {
                    header: $localize(templateObject_7 || (templateObject_7 = __makeTemplateObject([":Error pocket creation toast header@@managePockets.transfer.toast.error.header.withdraw:Failed to Withdraw Money"], [":Error pocket creation toast header@@managePockets.transfer.toast.error.header.withdraw:Failed to Withdraw Money"]))),
                    message: $localize(templateObject_8 || (templateObject_8 = __makeTemplateObject([":Error pocket creation toast message@@managePockets.transfer.toast.error.message.withdraw:Unable to proceed, please try again."], [":Error pocket creation toast message@@managePockets.transfer.toast.error.message.withdraw:Unable to proceed, please try again."]))),
                },
            };
            return ((_c = paymentInfo === null || paymentInfo === void 0 ? void 0 : paymentInfo.pocketInfo) === null || _c === void 0 ? void 0 : _c.transferType) === this.transferTypesEnum.ADD
                ? addMoneyLocalizations
                : withdrawMoneyLocalizations;
        };
        return ManagePocketsTransfersViewComponent;
    }());
    ManagePocketsTransfersViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsTransfersViewComponent, deps: [{ token: ManagePocketsService }, { token: PaymentOrderService }, { token: i3__namespace$3.Router }, { token: i3__namespace$3.ActivatedRoute }, { token: i0__namespace.ChangeDetectorRef }, { token: i3__namespace$4.NotificationService }, { token: ManagePocketsJourneyConfigService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ManagePocketsTransfersViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsTransfersViewComponent, selector: "bb-manage-pockets-list-view", ngImport: i0__namespace, template: "<div class=\"heading-widget bb-heading-widget px-0\" *ngIf=\"configService.displayHeaders\">\n  <bb-header-ui\n    headingType=\"h1\"\n    headingClasses=\"bb-heading-widget__heading\"\n    [heading]=\"pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.views.transfers.addMoneyHeader : pocketLocalizations.views.transfers.withdrawMoneyHeader\"\n  ></bb-header-ui>\n</div>\n\n<div class=\"bb-card bb-card--lg\">\n  <div class=\"bb-card__body\">\n    <bb-manage-pockets-transfers-wrapper\n      *ngIf=\"accountList$ | async as accountList; else loadingState\"\n      [accountList]=\"accountList\"\n      [awaitingTransferResponse]=\"awaitingTransferResponse\"\n      [journeyCurrency]=\"configService.journeyCurrency\"\n      [pocketInfo]=\"pocketInfo\"\n      (cancel)=\"abort()\"\n      (newTransfer)=\"performTransfer($event)\"\n    ></bb-manage-pockets-transfers-wrapper>\n  </div>\n</div>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui\n    loaderSize=\"lg\"\n    text=\"Loading...\"\n    i18n-text=\"Loading...|Text for the loading indicator@@managePockets.transfersView.loading.indicator.text\"    \n  ></bb-loading-indicator-ui>\n</ng-template>", components: [{ type: i5__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: ManagePocketsTransfersWrapperComponent, selector: "bb-manage-pockets-transfers-wrapper", inputs: ["accountList", "awaitingTransferResponse", "partialNewPayment", "pocketInfo"], outputs: ["newTransfer"] }, { type: i7__namespace$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i6__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i6__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsTransfersViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-pockets-list-view',
                        templateUrl: './manage-pockets-transfers-view.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: ManagePocketsService }, { type: PaymentOrderService }, { type: i3__namespace$3.Router }, { type: i3__namespace$3.ActivatedRoute }, { type: i0__namespace.ChangeDetectorRef }, { type: i3__namespace$4.NotificationService }, { type: ManagePocketsJourneyConfigService }]; } });
    var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8;

    var defaultRoute = {
        path: '',
        component: ManagePocketsJourneyComponent,
        children: [
            {
                path: '',
                redirectTo: 'list',
                pathMatch: 'full',
            },
            {
                path: 'list',
                data: { title: 'Manage Pockets List' },
                component: ManagePocketsListViewComponent,
            },
            {
                path: 'create',
                data: { title: 'Create Pocket' },
                component: ManagePocketsCreateViewComponent,
            },
            {
                path: 'transfer',
                data: { title: 'Money Transfer' },
                component: ManagePocketsTransfersViewComponent,
            },
        ],
    };
    var ManagePocketsJourneyModule = /** @class */ (function () {
        function ManagePocketsJourneyModule() {
        }
        ManagePocketsJourneyModule.forRoot = function (data) {
            if (data === void 0) { data = { route: defaultRoute }; }
            return {
                ngModule: ManagePocketsJourneyModule,
                providers: [i3$3.provideRoutes([data.route])],
            };
        };
        return ManagePocketsJourneyModule;
    }());
    ManagePocketsJourneyModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsJourneyModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ManagePocketsJourneyModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsJourneyModule, declarations: [ManagePocketsJourneyComponent,
            ManagePocketsListViewComponent,
            ManagePocketsCreateViewComponent,
            ManagePocketsTransfersViewComponent], imports: [i6.CommonModule, i1__namespace.BackbaseCoreModule, i3$3.RouterModule,
            i5.HeaderModule,
            ManagePocketsListModule,
            ManagePocketsCreateModule,
            ManagePocketsTransfersModule] });
    ManagePocketsJourneyModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsJourneyModule, imports: [[
                i6.CommonModule,
                i1.BackbaseCoreModule.withConfig({
                    classMap: { ManagePocketsJourneyComponent: ManagePocketsJourneyComponent },
                }),
                i3$3.RouterModule,
                i5.HeaderModule,
                ManagePocketsListModule,
                ManagePocketsCreateModule,
                ManagePocketsTransfersModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManagePocketsJourneyModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ManagePocketsJourneyComponent,
                            ManagePocketsListViewComponent,
                            ManagePocketsCreateViewComponent,
                            ManagePocketsTransfersViewComponent,
                        ],
                        imports: [
                            i6.CommonModule,
                            i1.BackbaseCoreModule.withConfig({
                                classMap: { ManagePocketsJourneyComponent: ManagePocketsJourneyComponent },
                            }),
                            i3$3.RouterModule,
                            i5.HeaderModule,
                            ManagePocketsListModule,
                            ManagePocketsCreateModule,
                            ManagePocketsTransfersModule,
                        ],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AccessibilityKeyboardDirective = AccessibilityKeyboardDirective;
    exports.DynamicIdDirective = DynamicIdDirective;
    exports.ManagePocketsBaseWrapperComponent = ManagePocketsBaseWrapperComponent;
    exports.ManagePocketsCardComponent = ManagePocketsCardComponent;
    exports.ManagePocketsCommonModule = ManagePocketsCommonModule;
    exports.ManagePocketsConfirmationComponent = ManagePocketsConfirmationComponent;
    exports.ManagePocketsCreateBaseStep = ManagePocketsCreateBaseStep;
    exports.ManagePocketsCreateComponent = ManagePocketsCreateComponent;
    exports.ManagePocketsCreateModule = ManagePocketsCreateModule;
    exports.ManagePocketsCreateViewComponent = ManagePocketsCreateViewComponent;
    exports.ManagePocketsCreateWrapperComponent = ManagePocketsCreateWrapperComponent;
    exports.ManagePocketsDetailsComponent = ManagePocketsDetailsComponent;
    exports.ManagePocketsEmptyListComponent = ManagePocketsEmptyListComponent;
    exports.ManagePocketsGoalsComponent = ManagePocketsGoalsComponent;
    exports.ManagePocketsJourneyComponent = ManagePocketsJourneyComponent;
    exports.ManagePocketsJourneyConfigService = ManagePocketsJourneyConfigService;
    exports.ManagePocketsJourneyConfigurationToken = ManagePocketsJourneyConfigurationToken;
    exports.ManagePocketsJourneyModule = ManagePocketsJourneyModule;
    exports.ManagePocketsListComponent = ManagePocketsListComponent;
    exports.ManagePocketsListModule = ManagePocketsListModule;
    exports.ManagePocketsListViewComponent = ManagePocketsListViewComponent;
    exports.ManagePocketsListWrapperComponent = ManagePocketsListWrapperComponent;
    exports.ManagePocketsService = ManagePocketsService;
    exports.RegexReplacePipe = RegexReplacePipe;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-manage-pockets-journey-ang.umd.js.map
