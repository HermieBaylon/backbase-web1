import { OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { AssetsService } from '@backbase/foundation-ang/core';
import { Observable } from 'rxjs';
import { PocketResponse, PocketTransferItem } from '../manage-pockets-common/model/pocket-item.model';
import { ManagePocketsService } from '../manage-pockets-common/services/manage-pockets.service';
import { ManagePocketsJourneyConfigService } from '../manage-pockets-journey-config.service';
import * as i0 from "@angular/core";
export declare class ManagePocketsListViewComponent implements OnInit {
    private readonly managePocketsService;
    private readonly assetsService;
    private readonly router;
    private readonly route;
    readonly configService: ManagePocketsJourneyConfigService;
    /**
     * Pocket list response, can contain either succesfull request or API error
     */
    pocketList$?: Observable<PocketResponse>;
    /**
     * Api Error status observable. Will return `true` is API fails for any reason
     */
    apiErrorStatus$?: Observable<boolean> | undefined;
    ngOnInit(): void;
    refreshPocketList(): void;
    goToCreatePocket(): void;
    goToPocketTransfer(pocketTransferItem: PocketTransferItem): void;
    private resolveAsset;
    get imageEmptyStateUrl(): Observable<string>;
    constructor(managePocketsService: ManagePocketsService, assetsService: AssetsService, router: Router, route: ActivatedRoute, configService: ManagePocketsJourneyConfigService);
    static ɵfac: i0.ɵɵFactoryDeclaration<ManagePocketsListViewComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ManagePocketsListViewComponent, "bb-manage-pockets-list-view", never, {}, {}, never, never>;
}
