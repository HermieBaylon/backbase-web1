import { EventEmitter } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { PaymentFormItem } from '../../model/payment.model';
import { TransferTypeEnum } from '../../model/pocket-item.model';
import * as i0 from "@angular/core";
export declare abstract class ManagePocketsBaseStep {
    back: EventEmitter<void>;
    cancel: EventEmitter<void>;
    journeyCurrency?: string;
    partialNewPayment?: PaymentFormItem;
    pocketLocalizations: {
        transfers: {
            details: {
                addMoneyContinueButton: string;
                addMoneyError: string;
                addMoneyHeader: string;
                withdrawMoneyContinueButton: string;
                withdrawMoneyError: string;
                withdrawMoneyHeader: string;
            };
            review: {
                addMoneyHeader: string;
                withdrawMoneyHeader: string;
            };
            wrapper: {
                addMoneyModalBody: string;
                addMoneyModalConfirm: string;
                addMoneyModalHeader: string;
                withdrawMoneyModalBody: string;
                withdrawMoneyModalConfirm: string;
                withdrawMoneyModalHeader: string;
            };
        };
        views: {
            transfers: {
                addMoneyHeader: string;
                withdrawMoneyHeader: string;
            };
        };
    };
    transferTypesEnum: typeof TransferTypeEnum;
    goBack(): void;
    abort(): void;
    isFieldValid(form?: FormGroup, fieldName?: string): boolean;
    getFieldErrors(form?: FormGroup, field?: string): import("@angular/forms").ValidationErrors | null | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<ManagePocketsBaseStep, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ManagePocketsBaseStep, never, never, { "journeyCurrency": "journeyCurrency"; "partialNewPayment": "partialNewPayment"; }, { "back": "back"; "cancel": "cancel"; }, never>;
}
