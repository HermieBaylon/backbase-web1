import { Component } from '@angular/core';
import { POCKET_LOCALIZATIONS } from '../manage-pockets-common/localization/manage-pockets-journey.localizations';
import { TransferTypeEnum } from '../manage-pockets-common/model/pocket-item.model';
import * as i0 from "@angular/core";
import * as i1 from "../manage-pockets-common/services/manage-pockets.service";
import * as i2 from "../manage-pockets-common/services/payment-order.service";
import * as i3 from "@angular/router";
import * as i4 from "@backbase/ui-ang/notification";
import * as i5 from "../manage-pockets-journey-config.service";
import * as i6 from "@backbase/ui-ang/header";
import * as i7 from "../manage-pockets-transfers/components/manage-pockets-transfers-wrapper/manage-pockets-transfers-wrapper.component";
import * as i8 from "@backbase/ui-ang/loading-indicator";
import * as i9 from "@angular/common";
export class ManagePocketsTransfersViewComponent {
    constructor(managePocketsService, paymentOrderService, router, route, cd, notificationService, configService) {
        this.managePocketsService = managePocketsService;
        this.paymentOrderService = paymentOrderService;
        this.router = router;
        this.route = route;
        this.cd = cd;
        this.notificationService = notificationService;
        this.configService = configService;
        this.awaitingTransferResponse = false;
        this.pocketLocalizations = POCKET_LOCALIZATIONS;
        this.transferTypesEnum = TransferTypeEnum;
        const nav = this.router.getCurrentNavigation();
        this.pocketInfo = nav === null || nav === void 0 ? void 0 : nav.extras.state;
    }
    ngOnInit() {
        if (!this.pocketInfo) {
            console.error(`"pocketInfo" input is required in "ManagePocketsTransfersViewComponent". Redirecting to Pocket List`);
            this.navigateToList();
        }
        this.refreshAccountList();
    }
    refreshAccountList() {
        this.accountList$ = this.managePocketsService.retrieveAccountList();
    }
    abort() {
        this.navigateToList();
    }
    performTransfer(paymentInfo) {
        this.awaitingTransferResponse = true;
        const notificationLocalizations = this.generateNotificationLocalizations(paymentInfo);
        const onSuccess = () => {
            this.awaitingTransferResponse = false;
            const notificationMessage = notificationLocalizations.success.message;
            const notificationHeader = notificationLocalizations.success.header;
            this.cd.markForCheck();
            this.pushNotification(notificationMessage, 'success', notificationHeader);
            this.navigateToList();
        };
        const onError = () => {
            this.awaitingTransferResponse = false;
            const notificationMessage = notificationLocalizations.error.message;
            const notificationHeader = notificationLocalizations.error.header;
            this.cd.markForCheck();
            this.pushNotification(notificationMessage, 'error', notificationHeader);
        };
        this.paymentOrderService.transferMoney(paymentInfo).subscribe(onSuccess, onError);
    }
    navigateToList() {
        this.router.navigate(['../list'], { relativeTo: this.route });
    }
    pushNotification(message, modifier, header) {
        this.notificationService.showNotification({
            header,
            message,
            modifier,
            dismissible: true,
            ttl: 5000,
        });
    }
    generateNotificationLocalizations(paymentInfo) {
        var _a, _b, _c;
        const addMoneyLocalizations = {
            success: {
                header: $localize `:Success pocket transfer toast header@@managePockets.transfer.toast.success.header:Transfer Successful!`,
                message: $localize `:Success pocket transfer toast message@@managePockets.transfer.toast.success.add.message:You've just transfered ${paymentInfo.currencyCode} ${paymentInfo.amount} to your '${(_a = paymentInfo.pocketInfo) === null || _a === void 0 ? void 0 : _a.pocket.name}' pocket.`,
            },
            error: {
                header: $localize `:Error pocket creation toast header@@managePockets.transfer.toast.error.header.add:Failed to Add Money`,
                message: $localize `:Error pocket creation toast message@@managePockets.transfer.toast.error.message.add:Unable to proceed, please try again.`,
            },
        };
        const withdrawMoneyLocalizations = {
            success: {
                header: $localize `:Success pocket withdraw toast header@@managePockets.transfer.toast.success.header:Withdrawal Successful!`,
                message: $localize `:Success pocket withdraw toast message@@managePockets.transfer.toast.success.withdraw.message:You've just withdrawn ${paymentInfo.currencyCode} ${paymentInfo.amount} from your '${(_b = paymentInfo.pocketInfo) === null || _b === void 0 ? void 0 : _b.pocket.name}' pocket.`,
            },
            error: {
                header: $localize `:Error pocket creation toast header@@managePockets.transfer.toast.error.header.withdraw:Failed to Withdraw Money`,
                message: $localize `:Error pocket creation toast message@@managePockets.transfer.toast.error.message.withdraw:Unable to proceed, please try again.`,
            },
        };
        return ((_c = paymentInfo === null || paymentInfo === void 0 ? void 0 : paymentInfo.pocketInfo) === null || _c === void 0 ? void 0 : _c.transferType) === this.transferTypesEnum.ADD
            ? addMoneyLocalizations
            : withdrawMoneyLocalizations;
    }
}
ManagePocketsTransfersViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsTransfersViewComponent, deps: [{ token: i1.ManagePocketsService }, { token: i2.PaymentOrderService }, { token: i3.Router }, { token: i3.ActivatedRoute }, { token: i0.ChangeDetectorRef }, { token: i4.NotificationService }, { token: i5.ManagePocketsJourneyConfigService }], target: i0.ɵɵFactoryTarget.Component });
ManagePocketsTransfersViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsTransfersViewComponent, selector: "bb-manage-pockets-list-view", ngImport: i0, template: "<div class=\"heading-widget bb-heading-widget px-0\" *ngIf=\"configService.displayHeaders\">\n  <bb-header-ui\n    headingType=\"h1\"\n    headingClasses=\"bb-heading-widget__heading\"\n    [heading]=\"pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.views.transfers.addMoneyHeader : pocketLocalizations.views.transfers.withdrawMoneyHeader\"\n  ></bb-header-ui>\n</div>\n\n<div class=\"bb-card bb-card--lg\">\n  <div class=\"bb-card__body\">\n    <bb-manage-pockets-transfers-wrapper\n      *ngIf=\"accountList$ | async as accountList; else loadingState\"\n      [accountList]=\"accountList\"\n      [awaitingTransferResponse]=\"awaitingTransferResponse\"\n      [journeyCurrency]=\"configService.journeyCurrency\"\n      [pocketInfo]=\"pocketInfo\"\n      (cancel)=\"abort()\"\n      (newTransfer)=\"performTransfer($event)\"\n    ></bb-manage-pockets-transfers-wrapper>\n  </div>\n</div>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui\n    loaderSize=\"lg\"\n    text=\"Loading...\"\n    i18n-text=\"Loading...|Text for the loading indicator@@managePockets.transfersView.loading.indicator.text\"    \n  ></bb-loading-indicator-ui>\n</ng-template>", components: [{ type: i6.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i7.ManagePocketsTransfersWrapperComponent, selector: "bb-manage-pockets-transfers-wrapper", inputs: ["accountList", "awaitingTransferResponse", "partialNewPayment", "pocketInfo"], outputs: ["newTransfer"] }, { type: i8.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i9.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsTransfersViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-list-view',
                    templateUrl: './manage-pockets-transfers-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.ManagePocketsService }, { type: i2.PaymentOrderService }, { type: i3.Router }, { type: i3.ActivatedRoute }, { type: i0.ChangeDetectorRef }, { type: i4.NotificationService }, { type: i5.ManagePocketsJourneyConfigService }]; } });
//# sourceMappingURL=data:application/json;base64,