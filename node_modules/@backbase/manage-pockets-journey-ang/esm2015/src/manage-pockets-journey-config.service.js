import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import * as i0 from "@angular/core";
export const ManagePocketsJourneyConfigurationToken = new InjectionToken('ManagePocketsJourneyConfiguration injection token');
const configDefaults = {
    displayHeaders: true,
    journeyCurrency: 'EUR',
    pocketImageList: [
        'home',
        'travel',
        'rent',
        'holidays',
        'savings',
        'utilities',
        'new-car',
        'insurance',
        'new-phone',
        'entertainment',
        'gift',
        'business',
        'custom',
    ],
};
export const getDefaultConfigValues = (config) => (Object.assign(Object.assign({}, configDefaults), (config || {})));
export class ManagePocketsJourneyConfigService {
    constructor(config) {
        this._config = getDefaultConfigValues(config);
    }
    get defaults() {
        return configDefaults;
    }
    /**
     * Defines if the journey display header on each view
     */
    get displayHeaders() {
        return this._config.displayHeaders;
    }
    /**
     * Names for pockets images, used to both name the type and look for the asset
     */
    get pocketImageList() {
        return this._config.pocketImageList;
    }
    /**
     * Currency used across the whole journey
     */
    get journeyCurrency() {
        return this._config.journeyCurrency;
    }
}
ManagePocketsJourneyConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsJourneyConfigService, deps: [{ token: ManagePocketsJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ManagePocketsJourneyConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsJourneyConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsJourneyConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ManagePocketsJourneyConfigurationToken]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlLXBvY2tldHMtam91cm5leS1jb25maWcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvbWFuYWdlLXBvY2tldHMtam91cm5leS9zcmMvbWFuYWdlLXBvY2tldHMtam91cm5leS1jb25maWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUU3RSxNQUFNLENBQUMsTUFBTSxzQ0FBc0MsR0FBRyxJQUFJLGNBQWMsQ0FDdEUsbURBQW1ELENBQ3BELENBQUM7QUFRRixNQUFNLGNBQWMsR0FBc0M7SUFDeEQsY0FBYyxFQUFFLElBQUk7SUFDcEIsZUFBZSxFQUFFLEtBQUs7SUFDdEIsZUFBZSxFQUFFO1FBQ2YsTUFBTTtRQUNOLFFBQVE7UUFDUixNQUFNO1FBQ04sVUFBVTtRQUNWLFNBQVM7UUFDVCxXQUFXO1FBQ1gsU0FBUztRQUNULFdBQVc7UUFDWCxXQUFXO1FBQ1gsZUFBZTtRQUNmLE1BQU07UUFDTixVQUFVO1FBQ1YsUUFBUTtLQUNUO0NBQ0YsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLENBQUMsTUFBeUMsRUFBRSxFQUFFLENBQUMsaUNBQ2hGLGNBQWMsR0FDZCxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsRUFDakIsQ0FBQztBQUdILE1BQU0sT0FBTyxpQ0FBaUM7SUFHNUMsWUFBd0UsTUFBeUM7UUFDL0csSUFBSSxDQUFDLE9BQU8sR0FBRyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxjQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUM7SUFDckMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUM7SUFDdEMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUM7SUFDdEMsQ0FBQzs7K0hBOUJVLGlDQUFpQyxrQkFHWixzQ0FBc0M7bUlBSDNELGlDQUFpQzs0RkFBakMsaUNBQWlDO2tCQUQ3QyxVQUFVOzswQkFJSSxRQUFROzswQkFBSSxNQUFNOzJCQUFDLHNDQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBjb25zdCBNYW5hZ2VQb2NrZXRzSm91cm5leUNvbmZpZ3VyYXRpb25Ub2tlbiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxNYW5hZ2VQb2NrZXRzSm91cm5leUNvbmZpZ3VyYXRpb24+KFxuICAnTWFuYWdlUG9ja2V0c0pvdXJuZXlDb25maWd1cmF0aW9uIGluamVjdGlvbiB0b2tlbicsXG4pO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1hbmFnZVBvY2tldHNKb3VybmV5Q29uZmlndXJhdGlvbiB7XG4gIGRpc3BsYXlIZWFkZXJzOiBib29sZWFuO1xuICBqb3VybmV5Q3VycmVuY3k6IHN0cmluZztcbiAgcG9ja2V0SW1hZ2VMaXN0OiBzdHJpbmdbXTtcbn1cblxuY29uc3QgY29uZmlnRGVmYXVsdHM6IE1hbmFnZVBvY2tldHNKb3VybmV5Q29uZmlndXJhdGlvbiA9IHtcbiAgZGlzcGxheUhlYWRlcnM6IHRydWUsXG4gIGpvdXJuZXlDdXJyZW5jeTogJ0VVUicsXG4gIHBvY2tldEltYWdlTGlzdDogW1xuICAgICdob21lJyxcbiAgICAndHJhdmVsJyxcbiAgICAncmVudCcsXG4gICAgJ2hvbGlkYXlzJyxcbiAgICAnc2F2aW5ncycsXG4gICAgJ3V0aWxpdGllcycsXG4gICAgJ25ldy1jYXInLFxuICAgICdpbnN1cmFuY2UnLFxuICAgICduZXctcGhvbmUnLFxuICAgICdlbnRlcnRhaW5tZW50JyxcbiAgICAnZ2lmdCcsXG4gICAgJ2J1c2luZXNzJyxcbiAgICAnY3VzdG9tJyxcbiAgXSxcbn07XG5cbmV4cG9ydCBjb25zdCBnZXREZWZhdWx0Q29uZmlnVmFsdWVzID0gKGNvbmZpZzogTWFuYWdlUG9ja2V0c0pvdXJuZXlDb25maWd1cmF0aW9uKSA9PiAoe1xuICAuLi5jb25maWdEZWZhdWx0cyxcbiAgLi4uKGNvbmZpZyB8fCB7fSksXG59KTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1hbmFnZVBvY2tldHNKb3VybmV5Q29uZmlnU2VydmljZSB7XG4gIHByaXZhdGUgX2NvbmZpZzogTWFuYWdlUG9ja2V0c0pvdXJuZXlDb25maWd1cmF0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoTWFuYWdlUG9ja2V0c0pvdXJuZXlDb25maWd1cmF0aW9uVG9rZW4pIGNvbmZpZzogTWFuYWdlUG9ja2V0c0pvdXJuZXlDb25maWd1cmF0aW9uKSB7XG4gICAgdGhpcy5fY29uZmlnID0gZ2V0RGVmYXVsdENvbmZpZ1ZhbHVlcyhjb25maWcpO1xuICB9XG5cbiAgZ2V0IGRlZmF1bHRzKCk6IE1hbmFnZVBvY2tldHNKb3VybmV5Q29uZmlndXJhdGlvbiB7XG4gICAgcmV0dXJuIGNvbmZpZ0RlZmF1bHRzO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmluZXMgaWYgdGhlIGpvdXJuZXkgZGlzcGxheSBoZWFkZXIgb24gZWFjaCB2aWV3XG4gICAqL1xuICBnZXQgZGlzcGxheUhlYWRlcnMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5kaXNwbGF5SGVhZGVycztcbiAgfVxuXG4gIC8qKlxuICAgKiBOYW1lcyBmb3IgcG9ja2V0cyBpbWFnZXMsIHVzZWQgdG8gYm90aCBuYW1lIHRoZSB0eXBlIGFuZCBsb29rIGZvciB0aGUgYXNzZXRcbiAgICovXG4gIGdldCBwb2NrZXRJbWFnZUxpc3QoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcucG9ja2V0SW1hZ2VMaXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIEN1cnJlbmN5IHVzZWQgYWNyb3NzIHRoZSB3aG9sZSBqb3VybmV5XG4gICAqL1xuICBnZXQgam91cm5leUN1cnJlbmN5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5qb3VybmV5Q3VycmVuY3k7XG4gIH1cbn1cbiJdfQ==