import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "../manage-pockets-list/manage-pockets-list.component";
import * as i3 from "../manage-pockets-empty-list/manage-pockets-empty-list.component";
import * as i4 from "@backbase/ui-ang/empty-state";
import * as i5 from "@angular/common";
import * as i6 from "@backbase/ui-ang/button";
export class ManagePocketsListWrapperComponent {
    constructor() {
        this.refreshData = new EventEmitter();
        this.createPocket = new EventEmitter();
        this.pocketTransfer = new EventEmitter();
    }
    goToPocketTransfer(transferType) {
        this.pocketTransfer.emit(transferType);
    }
    onRefreshData() {
        this.refreshData.emit();
    }
    goToCreatePocket() {
        this.createPocket.emit();
    }
}
ManagePocketsListWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsListWrapperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ManagePocketsListWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsListWrapperComponent, selector: "bb-manage-pockets-list-wrapper", inputs: { pocketList: "pocketList", pocketListApiError: "pocketListApiError", emptyStateImageUrl: "emptyStateImageUrl" }, outputs: { refreshData: "refreshData", createPocket: "createPocket", pocketTransfer: "pocketTransfer" }, ngImport: i0, template: "<ng-container *ngIf=\"!pocketListApiError; else errorState\">\n  <ng-container *ngIf=\"pocketList?.pockets?.length > 0; else emptyState\">\n    <div class=\"bb-block bb-block--lg bb-card bb-card--sm\">\n      <div class=\"bb-card__body\">\n        <div class=\"bb-stack\">\n          <div class=\"bb-stack__item bb-stack__item--fill bb-stack\">\n            <bb-icon-ui name=\"attach-money\" size=\"lg\"></bb-icon-ui>\n            <h5 \n              class=\"bb-block bb-block--no-margin\"\n              i18n=\"Plan to save something else?|New Pocket title@@managePockets.component.listWrapper.header.title\"\n            >\n              Plan to save for something else?\n            </h5>\n          </div>\n          <div class=\"bb-stack__item\">\n            <button bbButton color=\"primary\" (click)=\"goToCreatePocket()\">\n              <bb-icon-ui name=\"add\" cropped></bb-icon-ui> \n              <span i18n=\"Create new pocket button@@managePockets.component.listWrapper.header.createPocket.button\">\n                Create Pocket\n              </span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <bb-manage-pockets-list\n      [pocketList]=\"pocketList.pockets\"\n      (pocketTransfer)=\"goToPocketTransfer($event)\"\n    ></bb-manage-pockets-list>\n  </ng-container>\n</ng-container>\n\n<ng-template #emptyState>\n  <bb-manage-pockets-empty-list [emptyStateImageUrl]=\"emptyStateImageUrl\" (createPocket)=\"goToCreatePocket()\"></bb-manage-pockets-empty-list>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"card\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        iconModifier=\"error-outline\"\n        iconColor=\"dark\"\n        iconSize='xxl'\n        title=\"Page couldn't load\"\n        i18n-title=\"Error state title@@managePockets.component.listWrapper.errorState.title\"\n        subtitle=\"Try to reload the page or contact the system administrator.\"\n        i18n-subtitle=\"Error state message@@managePockets.component.listWrapper.errorState.message\"\n      ></bb-empty-state-ui>\n      <div class=\"bb-state-container__footer\">\n        <button \n          bbButton \n          color=\"primary\" \n          i18n=\"Reload button text@@managePockets.component.listWrapper.errorState.reloadButton\"\n          (click)=\"onRefreshData()\"\n        >\n          Reload\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2.ManagePocketsListComponent, selector: "bb-manage-pockets-list", inputs: ["pocketList"], outputs: ["pocketTransfer"] }, { type: i3.ManagePocketsEmptyListComponent, selector: "bb-manage-pockets-empty-list", inputs: ["emptyStateImageUrl"], outputs: ["createPocket"] }, { type: i4.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsListWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-list-wrapper',
                    templateUrl: `manage-pockets-list-wrapper.component.html`,
                }]
        }], propDecorators: { pocketList: [{
                type: Input
            }], pocketListApiError: [{
                type: Input
            }], emptyStateImageUrl: [{
                type: Input
            }], refreshData: [{
                type: Output
            }], createPocket: [{
                type: Output
            }], pocketTransfer: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlLXBvY2tldHMtbGlzdC13cmFwcGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbWFuYWdlLXBvY2tldHMtam91cm5leS9zcmMvbWFuYWdlLXBvY2tldHMtbGlzdC9jb21wb25lbnRzL21hbmFnZS1wb2NrZXRzLWxpc3Qtd3JhcHBlci9tYW5hZ2UtcG9ja2V0cy1saXN0LXdyYXBwZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9tYW5hZ2UtcG9ja2V0cy1qb3VybmV5L3NyYy9tYW5hZ2UtcG9ja2V0cy1saXN0L2NvbXBvbmVudHMvbWFuYWdlLXBvY2tldHMtbGlzdC13cmFwcGVyL21hbmFnZS1wb2NrZXRzLWxpc3Qtd3JhcHBlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7OztBQU92RSxNQUFNLE9BQU8saUNBQWlDO0lBSjlDO1FBUXFCLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUN2QyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDM0MsbUJBQWMsR0FBRyxJQUFJLFlBQVksRUFBc0IsQ0FBQztLQWFuRTtJQVhDLGtCQUFrQixDQUFDLFlBQWdDO1FBQ2pELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxhQUFhO1FBQ1gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMzQixDQUFDOzsrSEFsQlUsaUNBQWlDO21IQUFqQyxpQ0FBaUMseVNDUDlDLG02RUE0RGM7NEZEckRELGlDQUFpQztrQkFKN0MsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0NBQWdDO29CQUMxQyxXQUFXLEVBQUUsNENBQTRDO2lCQUMxRDs4QkFFVSxVQUFVO3NCQUFsQixLQUFLO2dCQUNHLGtCQUFrQjtzQkFBMUIsS0FBSztnQkFDRyxrQkFBa0I7c0JBQTFCLEtBQUs7Z0JBQ2EsV0FBVztzQkFBN0IsTUFBTTtnQkFDWSxZQUFZO3NCQUE5QixNQUFNO2dCQUNHLGNBQWM7c0JBQXZCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9ja2V0UmVzcG9uc2UsIFBvY2tldFRyYW5zZmVySXRlbSB9IGZyb20gJy4uLy4uLy4uL21hbmFnZS1wb2NrZXRzLWNvbW1vbi9tb2RlbC9wb2NrZXQtaXRlbS5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLW1hbmFnZS1wb2NrZXRzLWxpc3Qtd3JhcHBlcicsXG4gIHRlbXBsYXRlVXJsOiBgbWFuYWdlLXBvY2tldHMtbGlzdC13cmFwcGVyLmNvbXBvbmVudC5odG1sYCxcbn0pXG5leHBvcnQgY2xhc3MgTWFuYWdlUG9ja2V0c0xpc3RXcmFwcGVyQ29tcG9uZW50IHtcbiAgQElucHV0KCkgcG9ja2V0TGlzdD86IFBvY2tldFJlc3BvbnNlO1xuICBASW5wdXQoKSBwb2NrZXRMaXN0QXBpRXJyb3I/OiBib29sZWFuO1xuICBASW5wdXQoKSBlbXB0eVN0YXRlSW1hZ2VVcmw/OiBzdHJpbmc7XG4gIEBPdXRwdXQoKSByZWFkb25seSByZWZyZXNoRGF0YSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgQE91dHB1dCgpIHJlYWRvbmx5IGNyZWF0ZVBvY2tldCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIHBvY2tldFRyYW5zZmVyID0gbmV3IEV2ZW50RW1pdHRlcjxQb2NrZXRUcmFuc2Zlckl0ZW0+KCk7XG5cbiAgZ29Ub1BvY2tldFRyYW5zZmVyKHRyYW5zZmVyVHlwZTogUG9ja2V0VHJhbnNmZXJJdGVtKSB7XG4gICAgdGhpcy5wb2NrZXRUcmFuc2Zlci5lbWl0KHRyYW5zZmVyVHlwZSk7XG4gIH1cblxuICBvblJlZnJlc2hEYXRhKCkge1xuICAgIHRoaXMucmVmcmVzaERhdGEuZW1pdCgpO1xuICB9XG5cbiAgZ29Ub0NyZWF0ZVBvY2tldCgpIHtcbiAgICB0aGlzLmNyZWF0ZVBvY2tldC5lbWl0KCk7XG4gIH1cbn1cbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCIhcG9ja2V0TGlzdEFwaUVycm9yOyBlbHNlIGVycm9yU3RhdGVcIj5cbiAgPG5nLWNvbnRhaW5lciAqbmdJZj1cInBvY2tldExpc3Q/LnBvY2tldHM/Lmxlbmd0aCA+IDA7IGVsc2UgZW1wdHlTdGF0ZVwiPlxuICAgIDxkaXYgY2xhc3M9XCJiYi1ibG9jayBiYi1ibG9jay0tbGcgYmItY2FyZCBiYi1jYXJkLS1zbVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImJiLWNhcmRfX2JvZHlcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJiLXN0YWNrXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJiLXN0YWNrX19pdGVtIGJiLXN0YWNrX19pdGVtLS1maWxsIGJiLXN0YWNrXCI+XG4gICAgICAgICAgICA8YmItaWNvbi11aSBuYW1lPVwiYXR0YWNoLW1vbmV5XCIgc2l6ZT1cImxnXCI+PC9iYi1pY29uLXVpPlxuICAgICAgICAgICAgPGg1IFxuICAgICAgICAgICAgICBjbGFzcz1cImJiLWJsb2NrIGJiLWJsb2NrLS1uby1tYXJnaW5cIlxuICAgICAgICAgICAgICBpMThuPVwiUGxhbiB0byBzYXZlIHNvbWV0aGluZyBlbHNlP3xOZXcgUG9ja2V0IHRpdGxlQEBtYW5hZ2VQb2NrZXRzLmNvbXBvbmVudC5saXN0V3JhcHBlci5oZWFkZXIudGl0bGVcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBQbGFuIHRvIHNhdmUgZm9yIHNvbWV0aGluZyBlbHNlP1xuICAgICAgICAgICAgPC9oNT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmItc3RhY2tfX2l0ZW1cIj5cbiAgICAgICAgICAgIDxidXR0b24gYmJCdXR0b24gY29sb3I9XCJwcmltYXJ5XCIgKGNsaWNrKT1cImdvVG9DcmVhdGVQb2NrZXQoKVwiPlxuICAgICAgICAgICAgICA8YmItaWNvbi11aSBuYW1lPVwiYWRkXCIgY3JvcHBlZD48L2JiLWljb24tdWk+IFxuICAgICAgICAgICAgICA8c3BhbiBpMThuPVwiQ3JlYXRlIG5ldyBwb2NrZXQgYnV0dG9uQEBtYW5hZ2VQb2NrZXRzLmNvbXBvbmVudC5saXN0V3JhcHBlci5oZWFkZXIuY3JlYXRlUG9ja2V0LmJ1dHRvblwiPlxuICAgICAgICAgICAgICAgIENyZWF0ZSBQb2NrZXRcbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGJiLW1hbmFnZS1wb2NrZXRzLWxpc3RcbiAgICAgIFtwb2NrZXRMaXN0XT1cInBvY2tldExpc3QucG9ja2V0c1wiXG4gICAgICAocG9ja2V0VHJhbnNmZXIpPVwiZ29Ub1BvY2tldFRyYW5zZmVyKCRldmVudClcIlxuICAgID48L2JiLW1hbmFnZS1wb2NrZXRzLWxpc3Q+XG4gIDwvbmctY29udGFpbmVyPlxuPC9uZy1jb250YWluZXI+XG5cbjxuZy10ZW1wbGF0ZSAjZW1wdHlTdGF0ZT5cbiAgPGJiLW1hbmFnZS1wb2NrZXRzLWVtcHR5LWxpc3QgW2VtcHR5U3RhdGVJbWFnZVVybF09XCJlbXB0eVN0YXRlSW1hZ2VVcmxcIiAoY3JlYXRlUG9ja2V0KT1cImdvVG9DcmVhdGVQb2NrZXQoKVwiPjwvYmItbWFuYWdlLXBvY2tldHMtZW1wdHktbGlzdD5cbjwvbmctdGVtcGxhdGU+XG5cbjxuZy10ZW1wbGF0ZSAjZXJyb3JTdGF0ZT5cbiAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5IGJiLXN0YXRlLWNvbnRhaW5lclwiPlxuICAgICAgPGJiLWVtcHR5LXN0YXRlLXVpXG4gICAgICAgIGljb25Nb2RpZmllcj1cImVycm9yLW91dGxpbmVcIlxuICAgICAgICBpY29uQ29sb3I9XCJkYXJrXCJcbiAgICAgICAgaWNvblNpemU9J3h4bCdcbiAgICAgICAgdGl0bGU9XCJQYWdlIGNvdWxkbid0IGxvYWRcIlxuICAgICAgICBpMThuLXRpdGxlPVwiRXJyb3Igc3RhdGUgdGl0bGVAQG1hbmFnZVBvY2tldHMuY29tcG9uZW50Lmxpc3RXcmFwcGVyLmVycm9yU3RhdGUudGl0bGVcIlxuICAgICAgICBzdWJ0aXRsZT1cIlRyeSB0byByZWxvYWQgdGhlIHBhZ2Ugb3IgY29udGFjdCB0aGUgc3lzdGVtIGFkbWluaXN0cmF0b3IuXCJcbiAgICAgICAgaTE4bi1zdWJ0aXRsZT1cIkVycm9yIHN0YXRlIG1lc3NhZ2VAQG1hbmFnZVBvY2tldHMuY29tcG9uZW50Lmxpc3RXcmFwcGVyLmVycm9yU3RhdGUubWVzc2FnZVwiXG4gICAgICA+PC9iYi1lbXB0eS1zdGF0ZS11aT5cbiAgICAgIDxkaXYgY2xhc3M9XCJiYi1zdGF0ZS1jb250YWluZXJfX2Zvb3RlclwiPlxuICAgICAgICA8YnV0dG9uIFxuICAgICAgICAgIGJiQnV0dG9uIFxuICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiIFxuICAgICAgICAgIGkxOG49XCJSZWxvYWQgYnV0dG9uIHRleHRAQG1hbmFnZVBvY2tldHMuY29tcG9uZW50Lmxpc3RXcmFwcGVyLmVycm9yU3RhdGUucmVsb2FkQnV0dG9uXCJcbiAgICAgICAgICAoY2xpY2spPVwib25SZWZyZXNoRGF0YSgpXCJcbiAgICAgICAgPlxuICAgICAgICAgIFJlbG9hZFxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvbmctdGVtcGxhdGU+Il19