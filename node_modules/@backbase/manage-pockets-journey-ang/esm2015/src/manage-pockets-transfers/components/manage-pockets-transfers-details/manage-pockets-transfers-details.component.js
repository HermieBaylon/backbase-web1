import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Validators } from '@angular/forms';
import { ManagePocketsBaseStep } from '../../../manage-pockets-common/components/manage-pockets-base-step/manage-pockets-base-step';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/account-selector";
import * as i3 from "@backbase/ui-ang/amount-input";
import * as i4 from "@backbase/ui-ang/amount";
import * as i5 from "@backbase/ui-ang/input-validation-message";
import * as i6 from "@angular/common";
import * as i7 from "@backbase/ui-ang/button";
export class ManagePocketsTransfersDetailsComponent extends ManagePocketsBaseStep {
    constructor(formBuilder) {
        super();
        this.formBuilder = formBuilder;
        this.accountChange = new EventEmitter();
        this.next = new EventEmitter();
    }
    ngOnInit() {
        var _a, _b;
        this.transferDetailsForm = this.formBuilder.group({
            amount: [
                ((_a = this.partialNewPayment) === null || _a === void 0 ? void 0 : _a.amount) || '',
                Validators.compose([
                    Validators.required,
                    Validators.min(0.01),
                    this.validatorsSelector((_b = this.partialNewPayment) === null || _b === void 0 ? void 0 : _b.account),
                ]),
            ],
        });
    }
    goNext() {
        if (this.transferDetailsForm.valid) {
            const paymentForm = Object.assign(Object.assign({}, this.partialNewPayment), { amount: this.transferDetailsForm.get('amount').value });
            this.next.emit(paymentForm);
        }
        else {
            this.transferDetailsForm.markAllAsTouched();
        }
    }
    onAccountSelection(account) {
        const control = this.transferDetailsForm.get('amount');
        control.setValidators([Validators.required, Validators.min(0.01), this.validatorsSelector(account)]);
        control.updateValueAndValidity();
        this.accountChange.emit(account);
    }
    validatorsSelector(account) {
        var _a, _b, _c, _d;
        const pocketBalance = ((_b = (_a = this.partialNewPayment) === null || _a === void 0 ? void 0 : _a.pocketInfo) === null || _b === void 0 ? void 0 : _b.pocket.balance.amount) || 0;
        return ((_d = (_c = this.partialNewPayment) === null || _c === void 0 ? void 0 : _c.pocketInfo) === null || _d === void 0 ? void 0 : _d.transferType) === this.transferTypesEnum.ADD
            ? Validators.max((account === null || account === void 0 ? void 0 : account.balance) || 0)
            : Validators.max(Number(pocketBalance));
    }
}
ManagePocketsTransfersDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsTransfersDetailsComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
ManagePocketsTransfersDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManagePocketsTransfersDetailsComponent, selector: "bb-manage-pockets-transfers-details", inputs: { accountList: "accountList", journeyCurrency: "journeyCurrency" }, outputs: { accountChange: "accountChange", next: "next" }, usesInheritance: true, ngImport: i0, template: "<form [formGroup]=\"transferDetailsForm\" (submit)=\"goNext()\">\n  <div class=\"bb-block bb-block--xl\">\n\n    <label>\n      {{ partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.transfers.details.addMoneyHeader : pocketLocalizations.transfers.details.withdrawMoneyHeader }}\n    </label>\n\n    <bb-account-selector-ui\n      [items]=\"accountList\"\n      [selectedItems]=\"partialNewPayment?.account ?? ''\"\n      [closeOnSelect]=\"true\"\n      [highlight]=\"false\"\n      [required]=\"true\"\n      dropdownPosition=\"bottom\"\n      placeholder=\"Select an Account\"\n      i18n-placeholder=\"Select an Account@@managePockets.transfers.details.accountSelector.placeholder\"\n      (change)=\"onAccountSelection($event)\"\n    ></bb-account-selector-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <div class=\"bb-stack row\">\n      <div class=\"bb-stack__item col-6\">\n        <div class=\"bb-block bb-block--sm\">\n          <bb-amount-input-ui\n            formControlName=\"amount\"\n            label=\"Amount\"\n            i18n-label=\"Amount@@managePockets.transfers.details.amount.placeholder\"\n            [attr.aria-invalid]=\"!isFieldValid(transferDetailsForm, 'amount')\"\n            [currency]=\"journeyCurrency\"\n            placeholder=\"0.00\"\n            i18n-placeholder=\"0.00|Price example@@managePockets.transfers.details.amount.placeholder\"\n          ></bb-amount-input-ui>\n        </div>\n        <div class=\"bb-subtitle bb-text-support\" i18n=\"Available balance|Value includes a formatted currendy@@managePockets.transfers.details.availableBalance\" *ngIf=\"partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.WITHDRAW\">\n          <span>Available Balance: </span>\n          <bb-amount-ui\n            [amount]=\"partialNewPayment?.pocketInfo?.pocket?.balance?.amount\"\n            [currency]=\"partialNewPayment?.pocketInfo?.pocket?.balance?.currencyCode\"\n          ></bb-amount-ui>\n        </div>\n        <bb-input-validation-message-ui [showErrors]=\"!isFieldValid(transferDetailsForm, 'amount')\" >\n          <ng-container *ngFor=\"let error of getFieldErrors(transferDetailsForm, 'amount') | keyvalue; last as last\">\n            <ng-container *ngIf=\"last\" [ngSwitch]=\"error.key\">\n              <span *ngSwitchCase=\"'max'\">\n                {{ partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.transfers.details.addMoneyError : pocketLocalizations.transfers.details.withdrawMoneyError }}\n              </span>\n              <span i18n=\"Amount is required@@managePockets.transfers.details.amount.error.required\" *ngSwitchDefault>\n                Amount is required\n              </span>\n            </ng-container>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"bb-button-bar\">\n    <button \n      bbButton \n      class=\"bb-button-bar__button\" \n      type=\"submit\"\n    >\n      {{ partialNewPayment?.pocketInfo?.transferType === transferTypesEnum.ADD ? pocketLocalizations.transfers.details.addMoneyContinueButton : pocketLocalizations.transfers.details.withdrawMoneyContinueButton }}\n    </button>\n    <button \n      bbButton \n      color=\"link\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n      i18n=\"Cancel@@managePockets.transfers.details.button.cancel\"\n      (click)=\"abort()\"\n    >\n      Cancel\n    </button>\n  </div>\n</form>\n", components: [{ type: i2.AccountSelectorComponent, selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: i3.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: i4.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i5.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i6.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i6.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "keyvalue": i6.KeyValuePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsTransfersDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-pockets-transfers-details',
                    templateUrl: './manage-pockets-transfers-details.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; }, propDecorators: { accountList: [{
                type: Input
            }], journeyCurrency: [{
                type: Input
            }], accountChange: [{
                type: Output
            }], next: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,