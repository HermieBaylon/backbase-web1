import { pocketFormatDate } from '../helpers/formatting.helper';
import { TransferTypeEnum } from './pocket-item.model';
export var PaymentTypeEnum;
(function (PaymentTypeEnum) {
    PaymentTypeEnum["POCKET_TRANSFER"] = "POCKET_TRANSFER";
})(PaymentTypeEnum || (PaymentTypeEnum = {}));
export var PaymentRoleEnum;
(function (PaymentRoleEnum) {
    PaymentRoleEnum["CREDITOR"] = "CREDITOR";
    PaymentRoleEnum["DEBTOR"] = "DEBTOR";
})(PaymentRoleEnum || (PaymentRoleEnum = {}));
export var SchemeNameTypeEnum;
(function (SchemeNameTypeEnum) {
    SchemeNameTypeEnum["IBAN"] = "IBAN";
    SchemeNameTypeEnum["BBAN"] = "BBAN";
    SchemeNameTypeEnum["ID"] = "ID";
    SchemeNameTypeEnum["EXTERNAL_ID"] = "EXTERNAL_ID";
    SchemeNameTypeEnum["EMAIL"] = "EMAIL";
    SchemeNameTypeEnum["MOBILE"] = "MOBILE";
})(SchemeNameTypeEnum || (SchemeNameTypeEnum = {}));
export var PaymentOrderNamespace;
(function (PaymentOrderNamespace) {
    function buildPaymentOrderPostRequest(paymentInfo) {
        var _a, _b, _c, _d, _e, _f, _g;
        return {
            paymentOrdersPost: {
                paymentType: PaymentTypeEnum.POCKET_TRANSFER,
                batchBooking: false,
                requestedExecutionDate: pocketFormatDate(),
                originatorAccount: {
                    identification: {
                        identification: ((_a = paymentInfo.account) === null || _a === void 0 ? void 0 : _a.id) || '',
                        schemeName: SchemeNameTypeEnum.ID,
                    },
                },
                transferTransactionInformation: {
                    counterparty: {
                        name: ((_c = (_b = paymentInfo.pocketInfo) === null || _b === void 0 ? void 0 : _b.pocket) === null || _c === void 0 ? void 0 : _c.name) || '',
                        role: ((_d = paymentInfo.pocketInfo) === null || _d === void 0 ? void 0 : _d.transferType) === TransferTypeEnum.ADD
                            ? PaymentRoleEnum.CREDITOR
                            : PaymentRoleEnum.DEBTOR,
                    },
                    counterpartyAccount: {
                        identification: {
                            identification: ((_f = (_e = paymentInfo.pocketInfo) === null || _e === void 0 ? void 0 : _e.pocket) === null || _f === void 0 ? void 0 : _f.arrangementId) || '',
                            schemeName: SchemeNameTypeEnum.ID,
                        },
                    },
                    instructedAmount: {
                        amount: ((_g = paymentInfo === null || paymentInfo === void 0 ? void 0 : paymentInfo.amount) === null || _g === void 0 ? void 0 : _g.toString()) || '',
                        currencyCode: (paymentInfo === null || paymentInfo === void 0 ? void 0 : paymentInfo.currencyCode) || '',
                    },
                },
            },
        };
    }
    PaymentOrderNamespace.buildPaymentOrderPostRequest = buildPaymentOrderPostRequest;
})(PaymentOrderNamespace || (PaymentOrderNamespace = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbWFuYWdlLXBvY2tldHMtam91cm5leS9zcmMvbWFuYWdlLXBvY2tldHMtY29tbW9uL21vZGVsL3BheW1lbnQubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFaEUsT0FBTyxFQUFzQixnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBUzNFLE1BQU0sQ0FBTixJQUFZLGVBRVg7QUFGRCxXQUFZLGVBQWU7SUFDekIsc0RBQW1DLENBQUE7QUFDckMsQ0FBQyxFQUZXLGVBQWUsS0FBZixlQUFlLFFBRTFCO0FBRUQsTUFBTSxDQUFOLElBQVksZUFHWDtBQUhELFdBQVksZUFBZTtJQUN6Qix3Q0FBcUIsQ0FBQTtJQUNyQixvQ0FBaUIsQ0FBQTtBQUNuQixDQUFDLEVBSFcsZUFBZSxLQUFmLGVBQWUsUUFHMUI7QUFFRCxNQUFNLENBQU4sSUFBWSxrQkFPWDtBQVBELFdBQVksa0JBQWtCO0lBQzVCLG1DQUFhLENBQUE7SUFDYixtQ0FBYSxDQUFBO0lBQ2IsK0JBQVMsQ0FBQTtJQUNULGlEQUEyQixDQUFBO0lBQzNCLHFDQUFlLENBQUE7SUFDZix1Q0FBaUIsQ0FBQTtBQUNuQixDQUFDLEVBUFcsa0JBQWtCLEtBQWxCLGtCQUFrQixRQU83QjtBQUVELE1BQU0sS0FBVyxxQkFBcUIsQ0FtQ3JDO0FBbkNELFdBQWlCLHFCQUFxQjtJQUNwQyxTQUFnQiw0QkFBNEIsQ0FBQyxXQUE0Qjs7UUFDdkUsT0FBTztZQUNMLGlCQUFpQixFQUFFO2dCQUNqQixXQUFXLEVBQUUsZUFBZSxDQUFDLGVBQWU7Z0JBQzVDLFlBQVksRUFBRSxLQUFLO2dCQUNuQixzQkFBc0IsRUFBRSxnQkFBZ0IsRUFBRTtnQkFDMUMsaUJBQWlCLEVBQUU7b0JBQ2pCLGNBQWMsRUFBRTt3QkFDZCxjQUFjLEVBQUUsQ0FBQSxNQUFBLFdBQVcsQ0FBQyxPQUFPLDBDQUFFLEVBQUUsS0FBSSxFQUFFO3dCQUM3QyxVQUFVLEVBQUUsa0JBQWtCLENBQUMsRUFBRTtxQkFDbEM7aUJBQ0Y7Z0JBQ0QsOEJBQThCLEVBQUU7b0JBQzlCLFlBQVksRUFBRTt3QkFDWixJQUFJLEVBQUUsQ0FBQSxNQUFBLE1BQUEsV0FBVyxDQUFDLFVBQVUsMENBQUUsTUFBTSwwQ0FBRSxJQUFJLEtBQUksRUFBRTt3QkFDaEQsSUFBSSxFQUNGLENBQUEsTUFBQSxXQUFXLENBQUMsVUFBVSwwQ0FBRSxZQUFZLE1BQUssZ0JBQWdCLENBQUMsR0FBRzs0QkFDM0QsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxRQUFROzRCQUMxQixDQUFDLENBQUMsZUFBZSxDQUFDLE1BQU07cUJBQzdCO29CQUNELG1CQUFtQixFQUFFO3dCQUNuQixjQUFjLEVBQUU7NEJBQ2QsY0FBYyxFQUFFLENBQUEsTUFBQSxNQUFBLFdBQVcsQ0FBQyxVQUFVLDBDQUFFLE1BQU0sMENBQUUsYUFBYSxLQUFJLEVBQUU7NEJBQ25FLFVBQVUsRUFBRSxrQkFBa0IsQ0FBQyxFQUFFO3lCQUNsQztxQkFDRjtvQkFDRCxnQkFBZ0IsRUFBRTt3QkFDaEIsTUFBTSxFQUFFLENBQUEsTUFBQSxXQUFXLGFBQVgsV0FBVyx1QkFBWCxXQUFXLENBQUUsTUFBTSwwQ0FBRSxRQUFRLEVBQUUsS0FBSSxFQUFFO3dCQUM3QyxZQUFZLEVBQUUsQ0FBQSxXQUFXLGFBQVgsV0FBVyx1QkFBWCxXQUFXLENBQUUsWUFBWSxLQUFJLEVBQUU7cUJBQzlDO2lCQUNGO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQztJQWpDZSxrREFBNEIsK0JBaUMzQyxDQUFBO0FBQ0gsQ0FBQyxFQW5DZ0IscUJBQXFCLEtBQXJCLHFCQUFxQixRQW1DckMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb3N0UGF5bWVudE9yZGVyc1JlcXVlc3RQYXJhbXMgfSBmcm9tICdAYmFja2Jhc2UvZGF0YS1hbmcvcGF5bWVudC1vcmRlcic7XG5pbXBvcnQgeyBwb2NrZXRGb3JtYXREYXRlIH0gZnJvbSAnLi4vaGVscGVycy9mb3JtYXR0aW5nLmhlbHBlcic7XG5pbXBvcnQgeyBBY2NvdW50SXRlbSB9IGZyb20gJy4vYWNjb3VudHMubW9kZWwnO1xuaW1wb3J0IHsgUG9ja2V0VHJhbnNmZXJJdGVtLCBUcmFuc2ZlclR5cGVFbnVtIH0gZnJvbSAnLi9wb2NrZXQtaXRlbS5tb2RlbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5bWVudEZvcm1JdGVtIHtcbiAgYWNjb3VudD86IEFjY291bnRJdGVtO1xuICBhbW91bnQ/OiBudW1iZXI7XG4gIGN1cnJlbmN5Q29kZT86IHN0cmluZztcbiAgcG9ja2V0SW5mbz86IFBvY2tldFRyYW5zZmVySXRlbTtcbn1cblxuZXhwb3J0IGVudW0gUGF5bWVudFR5cGVFbnVtIHtcbiAgUE9DS0VUX1RSQU5TRkVSID0gJ1BPQ0tFVF9UUkFOU0ZFUicsXG59XG5cbmV4cG9ydCBlbnVtIFBheW1lbnRSb2xlRW51bSB7XG4gIENSRURJVE9SID0gJ0NSRURJVE9SJyxcbiAgREVCVE9SID0gJ0RFQlRPUicsXG59XG5cbmV4cG9ydCBlbnVtIFNjaGVtZU5hbWVUeXBlRW51bSB7XG4gIElCQU4gPSAnSUJBTicsXG4gIEJCQU4gPSAnQkJBTicsXG4gIElEID0gJ0lEJyxcbiAgRVhURVJOQUxfSUQgPSAnRVhURVJOQUxfSUQnLFxuICBFTUFJTCA9ICdFTUFJTCcsXG4gIE1PQklMRSA9ICdNT0JJTEUnLFxufVxuXG5leHBvcnQgbmFtZXNwYWNlIFBheW1lbnRPcmRlck5hbWVzcGFjZSB7XG4gIGV4cG9ydCBmdW5jdGlvbiBidWlsZFBheW1lbnRPcmRlclBvc3RSZXF1ZXN0KHBheW1lbnRJbmZvOiBQYXltZW50Rm9ybUl0ZW0pOiBQb3N0UGF5bWVudE9yZGVyc1JlcXVlc3RQYXJhbXMge1xuICAgIHJldHVybiB7XG4gICAgICBwYXltZW50T3JkZXJzUG9zdDoge1xuICAgICAgICBwYXltZW50VHlwZTogUGF5bWVudFR5cGVFbnVtLlBPQ0tFVF9UUkFOU0ZFUixcbiAgICAgICAgYmF0Y2hCb29raW5nOiBmYWxzZSxcbiAgICAgICAgcmVxdWVzdGVkRXhlY3V0aW9uRGF0ZTogcG9ja2V0Rm9ybWF0RGF0ZSgpLFxuICAgICAgICBvcmlnaW5hdG9yQWNjb3VudDoge1xuICAgICAgICAgIGlkZW50aWZpY2F0aW9uOiB7XG4gICAgICAgICAgICBpZGVudGlmaWNhdGlvbjogcGF5bWVudEluZm8uYWNjb3VudD8uaWQgfHwgJycsXG4gICAgICAgICAgICBzY2hlbWVOYW1lOiBTY2hlbWVOYW1lVHlwZUVudW0uSUQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNmZXJUcmFuc2FjdGlvbkluZm9ybWF0aW9uOiB7XG4gICAgICAgICAgY291bnRlcnBhcnR5OiB7XG4gICAgICAgICAgICBuYW1lOiBwYXltZW50SW5mby5wb2NrZXRJbmZvPy5wb2NrZXQ/Lm5hbWUgfHwgJycsXG4gICAgICAgICAgICByb2xlOlxuICAgICAgICAgICAgICBwYXltZW50SW5mby5wb2NrZXRJbmZvPy50cmFuc2ZlclR5cGUgPT09IFRyYW5zZmVyVHlwZUVudW0uQUREXG4gICAgICAgICAgICAgICAgPyBQYXltZW50Um9sZUVudW0uQ1JFRElUT1JcbiAgICAgICAgICAgICAgICA6IFBheW1lbnRSb2xlRW51bS5ERUJUT1IsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb3VudGVycGFydHlBY2NvdW50OiB7XG4gICAgICAgICAgICBpZGVudGlmaWNhdGlvbjoge1xuICAgICAgICAgICAgICBpZGVudGlmaWNhdGlvbjogcGF5bWVudEluZm8ucG9ja2V0SW5mbz8ucG9ja2V0Py5hcnJhbmdlbWVudElkIHx8ICcnLFxuICAgICAgICAgICAgICBzY2hlbWVOYW1lOiBTY2hlbWVOYW1lVHlwZUVudW0uSUQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgaW5zdHJ1Y3RlZEFtb3VudDoge1xuICAgICAgICAgICAgYW1vdW50OiBwYXltZW50SW5mbz8uYW1vdW50Py50b1N0cmluZygpIHx8ICcnLFxuICAgICAgICAgICAgY3VycmVuY3lDb2RlOiBwYXltZW50SW5mbz8uY3VycmVuY3lDb2RlIHx8ICcnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG4gIH1cbn1cbiJdfQ==