import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../services/dom-attributes.service";
/**
 * Dynamic id generator
 * Intended use is to improve accesibility by relating inputs to other label or error messages
 *
 * <label [for]="labelInput.id"> Label </label>
 * <input bbDynamicId #labelInput />
 */
export class DynamicIdDirective {
    constructor(_elRef, _renderer, domAttributesService, cd) {
        this._elRef = _elRef;
        this._renderer = _renderer;
        this.domAttributesService = domAttributesService;
        this.cd = cd;
    }
    ngOnInit() {
        setTimeout(() => {
            this._renderer.setAttribute(this._elRef.nativeElement, 'id', this.domAttributesService.nextId(this.bbDynamicId));
            this.cd.markForCheck();
        });
    }
}
DynamicIdDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DynamicIdDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.DomAttributesService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
DynamicIdDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DynamicIdDirective, selector: "[bbDynamicId]", inputs: { bbDynamicId: "bbDynamicId" }, exportAs: ["bbDynamicId"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DynamicIdDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbDynamicId]',
                    exportAs: 'bbDynamicId',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.DomAttributesService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { bbDynamicId: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1pZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL21hbmFnZS1wb2NrZXRzLWpvdXJuZXkvc3JjL21hbmFnZS1wb2NrZXRzLWNvbW1vbi9kaXJlY3RpdmVzL2R5bmFtaWMtaWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBcUIsU0FBUyxFQUFjLEtBQUssRUFBcUIsTUFBTSxlQUFlLENBQUM7OztBQUduRzs7Ozs7O0dBTUc7QUFNSCxNQUFNLE9BQU8sa0JBQWtCO0lBQzdCLFlBQ21CLE1BQWtCLEVBQ2xCLFNBQW9CLEVBQ3BCLG9CQUEwQyxFQUMxQyxFQUFxQjtRQUhyQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ2xCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDcEIseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUMxQyxPQUFFLEdBQUYsRUFBRSxDQUFtQjtJQUNyQyxDQUFDO0lBSUosUUFBUTtRQUNOLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNqSCxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0hBZlUsa0JBQWtCO29HQUFsQixrQkFBa0I7NEZBQWxCLGtCQUFrQjtrQkFKOUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsUUFBUSxFQUFFLGFBQWE7aUJBQ3hCOzRMQVNVLFdBQVc7c0JBQW5CLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgT25Jbml0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbUF0dHJpYnV0ZXNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZG9tLWF0dHJpYnV0ZXMuc2VydmljZSc7XG5cbi8qKlxuICogRHluYW1pYyBpZCBnZW5lcmF0b3JcbiAqIEludGVuZGVkIHVzZSBpcyB0byBpbXByb3ZlIGFjY2VzaWJpbGl0eSBieSByZWxhdGluZyBpbnB1dHMgdG8gb3RoZXIgbGFiZWwgb3IgZXJyb3IgbWVzc2FnZXNcbiAqXG4gKiA8bGFiZWwgW2Zvcl09XCJsYWJlbElucHV0LmlkXCI+IExhYmVsIDwvbGFiZWw+XG4gKiA8aW5wdXQgYmJEeW5hbWljSWQgI2xhYmVsSW5wdXQgLz5cbiAqL1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYmJEeW5hbWljSWRdJyxcbiAgZXhwb3J0QXM6ICdiYkR5bmFtaWNJZCcsXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNJZERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2VsUmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3JlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBkb21BdHRyaWJ1dGVzU2VydmljZTogRG9tQXR0cmlidXRlc1NlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICkge31cblxuICBASW5wdXQoKSBiYkR5bmFtaWNJZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuX2VsUmVmLm5hdGl2ZUVsZW1lbnQsICdpZCcsIHRoaXMuZG9tQXR0cmlidXRlc1NlcnZpY2UubmV4dElkKHRoaXMuYmJEeW5hbWljSWQpKTtcbiAgICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKCk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==