import { Injectable } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { AccountsNamespace } from '../model/accounts.model';
import { PocketNamespace } from '../model/pocket-item.model';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/pocket-tailor";
import * as i2 from "@backbase/data-ang/arrangements";
export class ManagePocketsService {
    constructor(pocketTailorService, productSummaryDataService) {
        this.pocketTailorService = pocketTailorService;
        this.productSummaryDataService = productSummaryDataService;
        this.pocketListApiError = new BehaviorSubject(false);
        this.pocketListApiError$ = this.pocketListApiError.asObservable();
        this.handleApiError = () => {
            this.pocketListApiError.next(true);
            return of({ pockets: [] });
        };
    }
    retrievePocketList() {
        this.pocketListApiError.next(false);
        return this.pocketTailorService.listPockets().pipe(catchError(this.handleApiError));
    }
    postPocket(newPocketItem) {
        const payload = PocketNamespace.buildNewPocketPostRequest(newPocketItem);
        return this.pocketTailorService.postPocket(payload);
    }
    retrieveAccountList() {
        const RESOURCE_NAME = 'Payments';
        const PRIVILEGE = 'create';
        const FROM_PAGES = 0;
        const PAGE_SIZE = 50;
        const BUSINESS_FUNCTION = 'A2A Transfer';
        const productSummaryParameters = {
            businessFunction: BUSINESS_FUNCTION,
            resourceName: RESOURCE_NAME,
            privilege: PRIVILEGE,
            from: FROM_PAGES,
            size: PAGE_SIZE,
        };
        return this.productSummaryDataService
            .getArrangementsByBusinessFunction(productSummaryParameters)
            .pipe(map(AccountsNamespace.formatHttpresponse));
    }
}
ManagePocketsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsService, deps: [{ token: i1.PocketTailorClientHttpService }, { token: i2.ProductSummaryHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
ManagePocketsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManagePocketsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.PocketTailorClientHttpService }, { type: i2.ProductSummaryHttpService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlLXBvY2tldHMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbWFuYWdlLXBvY2tldHMtam91cm5leS9zcmMvbWFuYWdlLXBvY2tldHMtY29tbW9uL3NlcnZpY2VzL21hbmFnZS1wb2NrZXRzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU0zQyxPQUFPLEVBQUUsZUFBZSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2RCxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBZSxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3pFLE9BQU8sRUFBaUIsZUFBZSxFQUFrQixNQUFNLDRCQUE0QixDQUFDOzs7O0FBRzVGLE1BQU0sT0FBTyxvQkFBb0I7SUFxQy9CLFlBQ21CLG1CQUFrRCxFQUNsRCx5QkFBb0Q7UUFEcEQsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUErQjtRQUNsRCw4QkFBeUIsR0FBekIseUJBQXlCLENBQTJCO1FBdEN0RCx1QkFBa0IsR0FBRyxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqRSx3QkFBbUIsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7UUE4QnJELG1CQUFjLEdBQUcsR0FBRyxFQUFFO1lBQzVCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkMsT0FBTyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM3QixDQUFDLENBQUM7SUFLQyxDQUFDO0lBcENKLGtCQUFrQjtRQUNoQixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVELFVBQVUsQ0FBQyxhQUFxQztRQUM5QyxNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMseUJBQXlCLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDekUsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxtQkFBbUI7UUFDakIsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDO1FBQ2pDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMzQixNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDckIsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLE1BQU0saUJBQWlCLEdBQUcsY0FBYyxDQUFDO1FBQ3pDLE1BQU0sd0JBQXdCLEdBQW1EO1lBQy9FLGdCQUFnQixFQUFFLGlCQUFpQjtZQUNuQyxZQUFZLEVBQUUsYUFBYTtZQUMzQixTQUFTLEVBQUUsU0FBUztZQUNwQixJQUFJLEVBQUUsVUFBVTtZQUNoQixJQUFJLEVBQUUsU0FBUztTQUNoQixDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUMseUJBQXlCO2FBQ2xDLGlDQUFpQyxDQUFDLHdCQUF3QixDQUFDO2FBQzNELElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7O2tIQTlCVSxvQkFBb0I7c0hBQXBCLG9CQUFvQjs0RkFBcEIsb0JBQW9CO2tCQURoQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgR2V0QXJyYW5nZW1lbnRzQnlCdXNpbmVzc0Z1bmN0aW9uUmVxdWVzdFBhcmFtcyxcbiAgUHJvZHVjdFN1bW1hcnlIdHRwU2VydmljZSxcbn0gZnJvbSAnQGJhY2tiYXNlL2RhdGEtYW5nL2FycmFuZ2VtZW50cyc7XG5pbXBvcnQgeyBQb2NrZXQsIFBvY2tldFRhaWxvckNsaWVudEh0dHBTZXJ2aWNlIH0gZnJvbSAnQGJhY2tiYXNlL2RhdGEtYW5nL3BvY2tldC10YWlsb3InO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQWNjb3VudEl0ZW0sIEFjY291bnRzTmFtZXNwYWNlIH0gZnJvbSAnLi4vbW9kZWwvYWNjb3VudHMubW9kZWwnO1xuaW1wb3J0IHsgTmV3UG9ja2V0SXRlbSwgUG9ja2V0TmFtZXNwYWNlLCBQb2NrZXRSZXNwb25zZSB9IGZyb20gJy4uL21vZGVsL3BvY2tldC1pdGVtLm1vZGVsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1hbmFnZVBvY2tldHNTZXJ2aWNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBwb2NrZXRMaXN0QXBpRXJyb3IgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGZhbHNlKTtcbiAgcG9ja2V0TGlzdEFwaUVycm9yJCA9IHRoaXMucG9ja2V0TGlzdEFwaUVycm9yLmFzT2JzZXJ2YWJsZSgpO1xuXG4gIHJldHJpZXZlUG9ja2V0TGlzdCgpOiBPYnNlcnZhYmxlPFBvY2tldFJlc3BvbnNlPiB7XG4gICAgdGhpcy5wb2NrZXRMaXN0QXBpRXJyb3IubmV4dChmYWxzZSk7XG4gICAgcmV0dXJuIHRoaXMucG9ja2V0VGFpbG9yU2VydmljZS5saXN0UG9ja2V0cygpLnBpcGUoY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUFwaUVycm9yKSk7XG4gIH1cblxuICBwb3N0UG9ja2V0KG5ld1BvY2tldEl0ZW06IFBhcnRpYWw8TmV3UG9ja2V0SXRlbT4pOiBPYnNlcnZhYmxlPFBvY2tldD4ge1xuICAgIGNvbnN0IHBheWxvYWQgPSBQb2NrZXROYW1lc3BhY2UuYnVpbGROZXdQb2NrZXRQb3N0UmVxdWVzdChuZXdQb2NrZXRJdGVtKTtcbiAgICByZXR1cm4gdGhpcy5wb2NrZXRUYWlsb3JTZXJ2aWNlLnBvc3RQb2NrZXQocGF5bG9hZCk7XG4gIH1cblxuICByZXRyaWV2ZUFjY291bnRMaXN0KCk6IE9ic2VydmFibGU8QWNjb3VudEl0ZW1bXT4ge1xuICAgIGNvbnN0IFJFU09VUkNFX05BTUUgPSAnUGF5bWVudHMnO1xuICAgIGNvbnN0IFBSSVZJTEVHRSA9ICdjcmVhdGUnO1xuICAgIGNvbnN0IEZST01fUEFHRVMgPSAwO1xuICAgIGNvbnN0IFBBR0VfU0laRSA9IDUwO1xuICAgIGNvbnN0IEJVU0lORVNTX0ZVTkNUSU9OID0gJ0EyQSBUcmFuc2Zlcic7XG4gICAgY29uc3QgcHJvZHVjdFN1bW1hcnlQYXJhbWV0ZXJzOiBHZXRBcnJhbmdlbWVudHNCeUJ1c2luZXNzRnVuY3Rpb25SZXF1ZXN0UGFyYW1zID0ge1xuICAgICAgYnVzaW5lc3NGdW5jdGlvbjogQlVTSU5FU1NfRlVOQ1RJT04sXG4gICAgICByZXNvdXJjZU5hbWU6IFJFU09VUkNFX05BTUUsXG4gICAgICBwcml2aWxlZ2U6IFBSSVZJTEVHRSxcbiAgICAgIGZyb206IEZST01fUEFHRVMsXG4gICAgICBzaXplOiBQQUdFX1NJWkUsXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5wcm9kdWN0U3VtbWFyeURhdGFTZXJ2aWNlXG4gICAgICAuZ2V0QXJyYW5nZW1lbnRzQnlCdXNpbmVzc0Z1bmN0aW9uKHByb2R1Y3RTdW1tYXJ5UGFyYW1ldGVycylcbiAgICAgIC5waXBlKG1hcChBY2NvdW50c05hbWVzcGFjZS5mb3JtYXRIdHRwcmVzcG9uc2UpKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlQXBpRXJyb3IgPSAoKSA9PiB7XG4gICAgdGhpcy5wb2NrZXRMaXN0QXBpRXJyb3IubmV4dCh0cnVlKTtcbiAgICByZXR1cm4gb2YoeyBwb2NrZXRzOiBbXSB9KTtcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBvY2tldFRhaWxvclNlcnZpY2U6IFBvY2tldFRhaWxvckNsaWVudEh0dHBTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvZHVjdFN1bW1hcnlEYXRhU2VydmljZTogUHJvZHVjdFN1bW1hcnlIdHRwU2VydmljZSxcbiAgKSB7fVxufVxuIl19