import * as i0 from '@angular/core';
import { Component, InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';
import * as i2 from '@angular/router';
import { provideRoutes, RouterModule } from '@angular/router';
import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i2$2 from '@backbase/foundation-ang/core';
import { BackbaseCoreModule } from '@backbase/foundation-ang/core';
import { EntitlementsModule } from '@backbase/foundation-ang/entitlements';
import * as i3 from '@backbase/payment-request-widget-ang';
import { PaymentRequestWidgetModule } from '@backbase/payment-request-widget-ang';
import * as i3$2 from '@backbase/consent-request-widget-ang';
import { ConsentRequestWidgetModule } from '@backbase/consent-request-widget-ang';
import * as i3$4 from '@backbase/consent-list-widget-ang';
import { ConsentListWidgetModule } from '@backbase/consent-list-widget-ang';
import * as i3$3 from '@backbase/consent-details-widget-ang';
import { ConsentDetailsWidgetModule } from '@backbase/consent-details-widget-ang';
import * as i4$1 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import { Subject, combineLatest } from 'rxjs';
import { map, pluck } from 'rxjs/operators';
import * as i2$1 from '@backbase/ui-ang/icon';
import * as i3$1 from '@backbase/ui-ang/loading-indicator';
import '@angular/localize/init';

class ConsentJourneyComponent {
    constructor(route) {
        this.route = route;
        const { routeConfig } = this.route.snapshot;
        this.tabs = (routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.children) ? this.initializeTabs(routeConfig) : [];
    }
    initializeTabs({ children = [] }) {
        return children
            .filter(routeItem => routeItem.path && routeItem.data)
            .map((routeItem, index) => {
            var _a;
            return ({
                title: ((_a = routeItem.data) === null || _a === void 0 ? void 0 : _a.title()) || `Tab${index + 1}`,
                route: routeItem.path || `${index + 1}`,
            });
        });
    }
}
ConsentJourneyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentJourneyComponent, deps: [{ token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
ConsentJourneyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentJourneyComponent, selector: "bb-consent-journey", ngImport: i0, template: `
    <div class="bb-tab">
      <div class="bb-tab-container__tabs nav nav-tabs">
        <a
          *ngFor="let tab of tabs"
          class="nav-link nav-item"
          role="tab"
          [routerLink]="[tab.route]"
          routerLinkActive="active">
          <span class="bb-stack__item bb-stack__item--spacing-xs">{{ tab?.title }}</span>
        </a>
      </div>
      <div class="bb-tab-container__content tab-content" role="tabpanel">
        <router-outlet></router-outlet>
      </div>
    </div>
  `, isInline: true, directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i2.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "routerLinkActive"], exportAs: ["routerLinkActive"] }, { type: i2.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentJourneyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-journey',
                    template: `
    <div class="bb-tab">
      <div class="bb-tab-container__tabs nav nav-tabs">
        <a
          *ngFor="let tab of tabs"
          class="nav-link nav-item"
          role="tab"
          [routerLink]="[tab.route]"
          routerLinkActive="active">
          <span class="bb-stack__item bb-stack__item--spacing-xs">{{ tab?.title }}</span>
        </a>
      </div>
      <div class="bb-tab-container__content tab-content" role="tabpanel">
        <router-outlet></router-outlet>
      </div>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i2.ActivatedRoute }]; } });

const ConsentJourneyConfigurationToken = new InjectionToken('ConsentJourneyConfigurationToken injection token');
const consentDefaultConfig = {
    multiAccountSelection: false,
};
class ConsentJourneyConfigurationService {
    constructor(config) {
        this.config = config;
        this.config = this.config || {};
        this._config = Object.assign(Object.assign({}, consentDefaultConfig), config);
    }
    get multiAccountSelection() {
        return this._config.multiAccountSelection;
    }
}
ConsentJourneyConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentJourneyConfigurationService, deps: [{ token: ConsentJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ConsentJourneyConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentJourneyConfigurationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentJourneyConfigurationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ConsentJourneyConfigurationToken]
                }] }]; } });

class PaymentRequestComponent {
    constructor(config, router, activeRoute) {
        this.config = config;
        this.router = router;
        this.activeRoute = activeRoute;
        this.destroy$ = new Subject();
    }
    requestPayment() {
        this.router.navigate([], {
            queryParams: {
                paymentRequestId: '1231313',
            },
            skipLocationChange: false,
            relativeTo: this.activeRoute,
        });
    }
    handleAllowRequest(event) {
        this.router.navigate(['../payment-redirect', { allowPaymentRequestRedirectUrl: event }], {
            relativeTo: this.activeRoute,
        });
    }
    handleRejectRequest(event) {
        this.router.navigate(['../payment-redirect', { rejectPaymentRequestRedirectUrl: event }], {
            relativeTo: this.activeRoute,
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
}
PaymentRequestComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestComponent, deps: [{ token: ConsentJourneyConfigurationService }, { token: i2.Router }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
PaymentRequestComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentRequestComponent, selector: "bb-payment-request-view", ngImport: i0, template: `
    <div class="container--fixed-width-small mx-auto">
      <div class="bb-card">
        <div class="bb-card__body">
          <div class="mb-5 d-flex justify-content-center">
            <button
              bbButton
              (click)="requestPayment()"
              i18n="Simulate Payment Request@@consent-journey.label.simulate-payment-request">
              Pay with Backbase
            </button>
          </div>
          <bb-payment-request-widget
            (allowPaymentRequestRedirectUrl)="handleAllowRequest($event)"
            (rejectPaymentRequestRedirectUrl)="handleRejectRequest($event)"></bb-payment-request-widget>
        </div>
      </div>
    </div>
  `, isInline: true, components: [{ type: i3.PaymentRequestWidgetComponent, selector: "bb-payment-request-widget", outputs: ["allowPaymentRequestRedirectUrl", "rejectPaymentRequestRedirectUrl"] }], directives: [{ type: i4$1.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-request-view',
                    template: `
    <div class="container--fixed-width-small mx-auto">
      <div class="bb-card">
        <div class="bb-card__body">
          <div class="mb-5 d-flex justify-content-center">
            <button
              bbButton
              (click)="requestPayment()"
              i18n="Simulate Payment Request@@consent-journey.label.simulate-payment-request">
              Pay with Backbase
            </button>
          </div>
          <bb-payment-request-widget
            (allowPaymentRequestRedirectUrl)="handleAllowRequest($event)"
            (rejectPaymentRequestRedirectUrl)="handleRejectRequest($event)"></bb-payment-request-widget>
        </div>
      </div>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: ConsentJourneyConfigurationService }, { type: i2.Router }, { type: i2.ActivatedRoute }]; } });

var Status$1;
(function (Status) {
    Status[Status["ALLOW"] = 0] = "ALLOW";
    Status[Status["REJECT"] = 1] = "REJECT";
    Status[Status["ERROR"] = 2] = "ERROR";
})(Status$1 || (Status$1 = {}));
class PaymentConsentRedirectComponent {
    constructor(route) {
        this.route = route;
        this.PAYMENT_REDIRECT_TIMEOUT = 5000;
        this.Status = Status$1;
        this.allowPaymentRequestRedirectUrl = this.getRouteParam(this.route, 'allowPaymentRequestRedirectUrl').pipe(map(allowPaymentRequestRedirectUrl => allowPaymentRequestRedirectUrl || ''));
        this.rejectPaymentRequestRedirectUrl = this.getRouteParam(this.route, 'rejectPaymentRequestRedirectUrl').pipe(map(rejectPaymentRequestRedirectUrl => rejectPaymentRequestRedirectUrl || ''));
        this.redirectStatus = combineLatest(this.allowPaymentRequestRedirectUrl, this.rejectPaymentRequestRedirectUrl).pipe(map(([allowUrl, rejectUrl]) => ({
            url: allowUrl ? allowUrl : rejectUrl ? rejectUrl : '',
            status: allowUrl ? Status$1.ALLOW : rejectUrl ? Status$1.REJECT : Status$1.ERROR,
        })));
    }
    getRouteParam(route, param) {
        const paramValue = route.paramMap.pipe(pluck('params', param));
        if (!route.parent) {
            return paramValue;
        }
        // ensure that level that has actual value keeps it from being cleared
        return combineLatest(paramValue, this.getRouteParam(route.parent, param)).pipe(map(params => params[0] || params[1]));
    }
    redirect() {
        this.redirectStatus.subscribe((redirectStatus) => {
            if (redirectStatus.status !== Status$1.ERROR) {
                window.location.href = redirectStatus.url;
            }
        });
    }
    ngOnInit() {
        setTimeout(() => {
            this.redirect();
        }, this.PAYMENT_REDIRECT_TIMEOUT);
    }
}
PaymentConsentRedirectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentConsentRedirectComponent, deps: [{ token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
PaymentConsentRedirectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentConsentRedirectComponent, selector: "bb-payment-consent-redirect", ngImport: i0, template: "<div class=\"container--fixed-width-small mx-auto\">\n  <div class=\"bb-card\">\n    <div class=\"bb-card__body\">\n      <div\n        *ngIf=\"redirectStatus | async as redirectStatus; else errorTemplate\"\n        class=\"mb-5 d-flex justify-content-center flex-column text-center\">\n        <ng-container *ngIf=\"redirectStatus.status !== Status.ERROR; else errorTemplate\">\n          <bb-icon-ui name=\"success\" color=\"success\" size=\"xl\" class=\"d-inline mb-3\"></bb-icon-ui>\n          <h4\n            i18n=\"Payment status@@consent-journey.label.payment-status-allowed\"\n            *ngIf=\"redirectStatus.status === Status.ALLOW\"\n            data-role=\"payment-status-allowed\">\n            Payment accepted!\n          </h4>\n          <h4\n            i18n=\"Payment status@@consent-journey.label.payment-status-rejected\"\n            *ngIf=\"redirectStatus.status === Status.REJECT\"\n            data-role=\"payment-status-rejected\">\n            Payment rejected!\n          </h4>\n          <div class=\"mb-4\" i18n=\"Redirecting@@consent-journey.label.redirecting-to-tpp-website\">\n            Redirecting back to third party website...\n          </div>\n          <div class=\"mb-3\">\n            <bb-loading-indicator-ui></bb-loading-indicator-ui>\n          </div>\n        </ng-container>\n      </div>\n\n      <ng-template #errorTemplate>\n        <div class=\"mb-5 d-flex justify-content-center flex-column text-center\">\n          <div i18n=\"No Redirect Url@@consent-journey.label.no-redirect-url\">No Redirect Url</div>\n        </div>\n      </ng-template>\n    </div>\n  </div>\n</div>\n", components: [{ type: i2$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentConsentRedirectComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-consent-redirect',
                    templateUrl: './payment-consent-redirect.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i2.ActivatedRoute }]; } });

var Status;
(function (Status) {
    Status[Status["ALLOW"] = 0] = "ALLOW";
    Status[Status["REJECT"] = 1] = "REJECT";
    Status[Status["ERROR"] = 2] = "ERROR";
})(Status || (Status = {}));
class TppConsentRedirectComponent {
    constructor(route) {
        this.route = route;
        this.CONSENT_REDIRECT_TIMEOUT = 5000;
        this.Status = Status;
        this.allowConsentRequestRedirectUrl = this.getRouteParam(this.route, 'allowConsentRequestRedirectUrl').pipe(map(allowConsentRequestRedirectUrl => allowConsentRequestRedirectUrl || ''));
        this.rejectConsentRequestRedirectUrl = this.getRouteParam(this.route, 'rejectConsentRequestRedirectUrl').pipe(map(rejectConsentRequestRedirectUrl => rejectConsentRequestRedirectUrl || ''));
        this.redirectStatus = combineLatest(this.allowConsentRequestRedirectUrl, this.rejectConsentRequestRedirectUrl).pipe(map(([allowUrl, rejectUrl]) => ({
            url: allowUrl ? allowUrl : rejectUrl ? rejectUrl : '',
            status: allowUrl ? Status.ALLOW : rejectUrl ? Status.REJECT : Status.ERROR,
        })));
    }
    getRouteParam(route, param) {
        const paramValue = route.paramMap.pipe(pluck('params', param));
        if (!route.parent) {
            return paramValue;
        }
        // ensure that level that has actual value keeps it from being cleared
        return combineLatest(paramValue, this.getRouteParam(route.parent, param)).pipe(map(params => params[0] || params[1]));
    }
    redirect() {
        this.redirectStatus.subscribe((redirectStatus) => {
            if (redirectStatus.status !== Status.ERROR) {
                window.location.href = redirectStatus.url;
            }
        });
    }
    ngOnInit() {
        setTimeout(() => {
            this.redirect();
        }, this.CONSENT_REDIRECT_TIMEOUT);
    }
}
TppConsentRedirectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TppConsentRedirectComponent, deps: [{ token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
TppConsentRedirectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TppConsentRedirectComponent, selector: "bb-tpp-consent-redirect", ngImport: i0, template: "<div class=\"container--fixed-width-small mx-auto\">\n  <div class=\"bb-card\">\n    <div class=\"bb-card__body\">\n      <div\n        *ngIf=\"redirectStatus | async as redirectStatus; else errorTemplate\"\n        class=\"mb-5 d-flex justify-content-center flex-column text-center\">\n        <ng-container *ngIf=\"redirectStatus.status !== Status.ERROR; else errorTemplate\">\n          <bb-icon-ui name=\"success\" color=\"success\" size=\"xl\" class=\"d-inline mb-3\"></bb-icon-ui>\n          <h4\n            i18n=\"Consent status@@consent-journey.label.consent-status-allowed\"\n            *ngIf=\"redirectStatus.status === Status.ALLOW\"\n            data-role=\"consent-status-allowed\">\n            Consent granted!\n          </h4>\n          <h4\n            i18n=\"Consent status@@consent-journey.label.consent-status-rejected\"\n            *ngIf=\"redirectStatus.status === Status.REJECT\">\n            Consent rejected!\n          </h4>\n          <div class=\"mb-4\" i18n=\"Redirecting@@consent-journey.label.redirecting-to-tpp-website\">\n            Redirecting back to third party website...\n          </div>\n          <div class=\"mb-3\">\n            <bb-loading-indicator-ui></bb-loading-indicator-ui>\n          </div>\n        </ng-container>\n      </div>\n\n      <ng-template #errorTemplate>\n        <div class=\"mb-5 d-flex justify-content-center flex-column text-center\">\n          <div i18n=\"No Redirect Url@@consent-journey.label.no-redirect-url\">No Redirect Url</div>\n        </div>\n      </ng-template>\n    </div>\n  </div>\n</div>\n", components: [{ type: i2$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TppConsentRedirectComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-tpp-consent-redirect',
                    templateUrl: './tpp-consent-redirect.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i2.ActivatedRoute }]; } });

class ConsentRequestComponent {
    constructor(config, router, activeRoute) {
        this.config = config;
        this.router = router;
        this.activeRoute = activeRoute;
        this.destroy$ = new Subject();
    }
    requestContext() {
        this.router.navigate([], {
            queryParams: {
                consentRequestId: '1231313',
            },
            skipLocationChange: false,
            relativeTo: this.activeRoute,
        });
    }
    handleAllowRequest(event) {
        this.router.navigate(['../consent-redirect', { allowConsentRequestRedirectUrl: event }], {
            relativeTo: this.activeRoute,
        });
    }
    handleRejectRequest(event) {
        this.router.navigate(['../consent-redirect', { rejectConsentRequestRedirectUrl: event }], {
            relativeTo: this.activeRoute,
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
}
ConsentRequestComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestComponent, deps: [{ token: ConsentJourneyConfigurationService }, { token: i2.Router }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
ConsentRequestComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestComponent, selector: "bb-consent-request-view", ngImport: i0, template: `
    <div class="container--fixed-width-small mx-auto">
      <div class="bb-card">
        <div class="bb-card__body">
          <div class="mb-5 d-flex justify-content-center">
            <button
              bbButton
              (click)="requestContext()"
              i18n="Simulate Consent Request@@consent-journey.label.simulate-consent-request">
              Simulate Consent Request
            </button>
          </div>
          <bb-consent-request-widget
            [multiAccountSelection]="config.multiAccountSelection"
            (allowConsentRequestRedirectUrl)="handleAllowRequest($event)"
            (rejectConsentRequestRedirectUrl)="handleRejectRequest($event)"></bb-consent-request-widget>
        </div>
      </div>
    </div>
  `, isInline: true, components: [{ type: i3$2.ConsentRequestWidgetComponent, selector: "bb-consent-request-widget", inputs: ["multiAccountSelection"], outputs: ["allowConsentRequestRedirectUrl", "rejectConsentRequestRedirectUrl"] }], directives: [{ type: i4$1.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-request-view',
                    template: `
    <div class="container--fixed-width-small mx-auto">
      <div class="bb-card">
        <div class="bb-card__body">
          <div class="mb-5 d-flex justify-content-center">
            <button
              bbButton
              (click)="requestContext()"
              i18n="Simulate Consent Request@@consent-journey.label.simulate-consent-request">
              Simulate Consent Request
            </button>
          </div>
          <bb-consent-request-widget
            [multiAccountSelection]="config.multiAccountSelection"
            (allowConsentRequestRedirectUrl)="handleAllowRequest($event)"
            (rejectConsentRequestRedirectUrl)="handleRejectRequest($event)"></bb-consent-request-widget>
        </div>
      </div>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: ConsentJourneyConfigurationService }, { type: i2.Router }, { type: i2.ActivatedRoute }]; } });

class ConsentsComponent {
}
ConsentsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConsentsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentsComponent, selector: "bb-consents-view", ngImport: i0, template: `<router-outlet></router-outlet>`, isInline: true, directives: [{ type: i2.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consents-view',
                    template: `<router-outlet></router-outlet>`,
                }]
        }] });

class ConsentDetailComponent {
    constructor(config, router, activeRoute) {
        this.config = config;
        this.router = router;
        this.activeRoute = activeRoute;
        this.destroy$ = new Subject();
    }
    handleBack() {
        this.router.navigate(['../list'], {
            relativeTo: this.activeRoute,
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
}
ConsentDetailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailComponent, deps: [{ token: ConsentJourneyConfigurationService }, { token: i2.Router }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
ConsentDetailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailComponent, selector: "bb-consent-detail-view", ngImport: i0, template: ` <div class="bb-card">
    <div class="bb-card__body">
      <div class="justify-content-start" data-role="consent-heading">
        <button
          data-role="consent-heading-button__navigation"
          (click)="handleBack()"
          class="btn btn-link bb-block bb-block--xl">
          <i aria-hidden="true" class="bb-icon bb-icon-chevron-left"></i>
          <span i18n="Consent back button title@@consent-journey.detail.button.title">Back to list</span>
        </button>
      </div>
      <bb-consent-details-widget></bb-consent-details-widget>
    </div>
  </div>`, isInline: true, components: [{ type: i3$3.ConsentDetailsWidgetComponent, selector: "bb-consent-details-widget" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-detail-view',
                    template: ` <div class="bb-card">
    <div class="bb-card__body">
      <div class="justify-content-start" data-role="consent-heading">
        <button
          data-role="consent-heading-button__navigation"
          (click)="handleBack()"
          class="btn btn-link bb-block bb-block--xl">
          <i aria-hidden="true" class="bb-icon bb-icon-chevron-left"></i>
          <span i18n="Consent back button title@@consent-journey.detail.button.title">Back to list</span>
        </button>
      </div>
      <bb-consent-details-widget></bb-consent-details-widget>
    </div>
  </div>`,
                }]
        }], ctorParameters: function () { return [{ type: ConsentJourneyConfigurationService }, { type: i2.Router }, { type: i2.ActivatedRoute }]; } });

class ConsentListComponent {
    constructor(config, router, activeRoute) {
        this.config = config;
        this.router = router;
        this.activeRoute = activeRoute;
        this.destroy$ = new Subject();
        this.consentId = '';
    }
    handleDetail(event) {
        this.consentId = event;
        this.router.navigate(['../details', { consentId: event }], {
            relativeTo: this.activeRoute,
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
}
ConsentListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListComponent, deps: [{ token: ConsentJourneyConfigurationService }, { token: i2.Router }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
ConsentListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentListComponent, selector: "bb-consent-list-view", ngImport: i0, template: ` <div class="bb-card">
    <div class="bb-card__body">
      <bb-consent-list-widget (consentId)="handleDetail($event)"></bb-consent-list-widget>
    </div>
  </div>`, isInline: true, components: [{ type: i3$4.ConsentListWidgetComponent, selector: "bb-consent-list-widget", outputs: ["consentId"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-list-view',
                    template: ` <div class="bb-card">
    <div class="bb-card__body">
      <bb-consent-list-widget (consentId)="handleDetail($event)"></bb-consent-list-widget>
    </div>
  </div>`,
                }]
        }], ctorParameters: function () { return [{ type: ConsentJourneyConfigurationService }, { type: i2.Router }, { type: i2.ActivatedRoute }]; } });

const tabs = {
    paymentRequest: () => $localize `:Payment request tab title@@consent-journey.tab.paymentRequest.title:Payment Request`,
    consentRequest: () => $localize `:Consent request tab title@@consent-journey.tab.consentRequest.title:Consent Request`,
    consents: () => $localize `:Consents tab title@@consent-journey.tab.consents.title:Consents`,
};
const consentRoutes = {
    path: '',
    component: ConsentJourneyComponent,
    children: [
        {
            path: '',
            redirectTo: 'payment-request',
            pathMatch: 'full',
        },
        {
            path: 'payment-request',
            component: PaymentRequestComponent,
            data: { title: tabs.paymentRequest },
        },
        {
            path: 'payment-redirect',
            component: PaymentConsentRedirectComponent,
        },
        {
            path: 'consent-redirect',
            component: TppConsentRedirectComponent,
        },
        {
            path: 'consent-request',
            component: ConsentRequestComponent,
            data: { title: tabs.consentRequest },
        },
        {
            component: ConsentsComponent,
            data: { title: tabs.consents },
            path: 'consents',
            children: [
                {
                    path: '',
                    redirectTo: 'list',
                    pathMatch: 'full',
                },
                {
                    path: 'list',
                    component: ConsentListComponent,
                },
                {
                    path: 'details',
                    component: ConsentDetailComponent,
                },
            ],
        },
    ],
};

const viewComponents = [
    ConsentJourneyComponent,
    PaymentRequestComponent,
    PaymentConsentRedirectComponent,
    TppConsentRedirectComponent,
    ConsentRequestComponent,
    ConsentsComponent,
    ConsentDetailComponent,
    ConsentListComponent,
];
const uiModules = [
    EntitlementsModule,
    PaymentRequestWidgetModule,
    ConsentRequestWidgetModule,
    ConsentListWidgetModule,
    ConsentDetailsWidgetModule,
];
class ConsentJourneyModule {
    static forRoot(data = { route: consentRoutes }) {
        return {
            ngModule: ConsentJourneyModule,
            providers: [provideRoutes([data.route])],
        };
    }
}
ConsentJourneyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentJourneyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ConsentJourneyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentJourneyModule, declarations: [ConsentJourneyComponent,
        PaymentRequestComponent,
        PaymentConsentRedirectComponent,
        TppConsentRedirectComponent,
        ConsentRequestComponent,
        ConsentsComponent,
        ConsentDetailComponent,
        ConsentListComponent], imports: [CommonModule, i2.RouterModule, i2$2.BackbaseCoreModule, EntitlementsModule,
        PaymentRequestWidgetModule,
        ConsentRequestWidgetModule,
        ConsentListWidgetModule,
        ConsentDetailsWidgetModule, ButtonModule], exports: [ConsentJourneyComponent,
        PaymentRequestComponent,
        PaymentConsentRedirectComponent,
        TppConsentRedirectComponent,
        ConsentRequestComponent,
        ConsentsComponent,
        ConsentDetailComponent,
        ConsentListComponent, EntitlementsModule,
        PaymentRequestWidgetModule,
        ConsentRequestWidgetModule,
        ConsentListWidgetModule,
        ConsentDetailsWidgetModule] });
ConsentJourneyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentJourneyModule, providers: [ConsentJourneyConfigurationService], imports: [[
            CommonModule,
            RouterModule.forChild([consentRoutes]),
            BackbaseCoreModule.withConfig({
                classMap: { ConsentJourneyComponent: ConsentJourneyComponent },
            }),
            ...uiModules,
            ButtonModule,
        ], EntitlementsModule,
        PaymentRequestWidgetModule,
        ConsentRequestWidgetModule,
        ConsentListWidgetModule,
        ConsentDetailsWidgetModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentJourneyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: viewComponents,
                    imports: [
                        CommonModule,
                        RouterModule.forChild([consentRoutes]),
                        BackbaseCoreModule.withConfig({
                            classMap: { ConsentJourneyComponent: ConsentJourneyComponent },
                        }),
                        ...uiModules,
                        ButtonModule,
                    ],
                    providers: [ConsentJourneyConfigurationService],
                    exports: [...viewComponents, ...uiModules],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ConsentDetailComponent, ConsentJourneyComponent, ConsentJourneyConfigurationService, ConsentJourneyConfigurationToken, ConsentJourneyModule, ConsentListComponent, ConsentRequestComponent, ConsentsComponent, PaymentConsentRedirectComponent, PaymentRequestComponent, TppConsentRedirectComponent };
//# sourceMappingURL=backbase-consent-journey-ang.js.map
