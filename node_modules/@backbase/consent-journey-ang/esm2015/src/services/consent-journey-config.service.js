import { Injectable, Optional, Inject, InjectionToken } from '@angular/core';
import * as i0 from "@angular/core";
export const ConsentJourneyConfigurationToken = new InjectionToken('ConsentJourneyConfigurationToken injection token');
export const consentDefaultConfig = {
    multiAccountSelection: false,
};
export class ConsentJourneyConfigurationService {
    constructor(config) {
        this.config = config;
        this.config = this.config || {};
        this._config = Object.assign(Object.assign({}, consentDefaultConfig), config);
    }
    get multiAccountSelection() {
        return this._config.multiAccountSelection;
    }
}
ConsentJourneyConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentJourneyConfigurationService, deps: [{ token: ConsentJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ConsentJourneyConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentJourneyConfigurationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentJourneyConfigurationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ConsentJourneyConfigurationToken]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC1qb3VybmV5LWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb25zZW50LWpvdXJuZXkvc3JjL3NlcnZpY2VzL2NvbnNlbnQtam91cm5leS1jb25maWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUc3RSxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRyxJQUFJLGNBQWMsQ0FDaEUsa0RBQWtELENBQ25ELENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBZ0M7SUFDL0QscUJBQXFCLEVBQUUsS0FBSztDQUM3QixDQUFDO0FBR0YsTUFBTSxPQUFPLGtDQUFrQztJQUc3QyxZQUdtQixNQUFtQztRQUFuQyxXQUFNLEdBQU4sTUFBTSxDQUE2QjtRQUVwRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxPQUFPLG1DQUFRLG9CQUFvQixHQUFLLE1BQU0sQ0FBRSxDQUFDO0lBQ3hELENBQUM7SUFFRCxJQUFJLHFCQUFxQjtRQUN2QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUM7SUFDNUMsQ0FBQzs7Z0lBZFUsa0NBQWtDLGtCQUtuQyxnQ0FBZ0M7b0lBTC9CLGtDQUFrQzs0RkFBbEMsa0NBQWtDO2tCQUQ5QyxVQUFVOzswQkFLTixRQUFROzswQkFDUixNQUFNOzJCQUFDLGdDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25zZW50Sm91cm5leUNvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi9tb2RlbHMvY29uc2VudC1jb25maWd1cmF0aW9uJztcblxuZXhwb3J0IGNvbnN0IENvbnNlbnRKb3VybmV5Q29uZmlndXJhdGlvblRva2VuID0gbmV3IEluamVjdGlvblRva2VuPENvbnNlbnRKb3VybmV5Q29uZmlndXJhdGlvbj4oXG4gICdDb25zZW50Sm91cm5leUNvbmZpZ3VyYXRpb25Ub2tlbiBpbmplY3Rpb24gdG9rZW4nLFxuKTtcblxuZXhwb3J0IGNvbnN0IGNvbnNlbnREZWZhdWx0Q29uZmlnOiBDb25zZW50Sm91cm5leUNvbmZpZ3VyYXRpb24gPSB7XG4gIG11bHRpQWNjb3VudFNlbGVjdGlvbjogZmFsc2UsXG59O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29uc2VudEpvdXJuZXlDb25maWd1cmF0aW9uU2VydmljZSB7XG4gIHByaXZhdGUgX2NvbmZpZzogQ29uc2VudEpvdXJuZXlDb25maWd1cmF0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChDb25zZW50Sm91cm5leUNvbmZpZ3VyYXRpb25Ub2tlbilcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbmZpZzogQ29uc2VudEpvdXJuZXlDb25maWd1cmF0aW9uLFxuICApIHtcbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMuY29uZmlnIHx8IHt9O1xuICAgIHRoaXMuX2NvbmZpZyA9IHsgLi4uY29uc2VudERlZmF1bHRDb25maWcsIC4uLmNvbmZpZyB9O1xuICB9XG5cbiAgZ2V0IG11bHRpQWNjb3VudFNlbGVjdGlvbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLm11bHRpQWNjb3VudFNlbGVjdGlvbjtcbiAgfVxufVxuIl19