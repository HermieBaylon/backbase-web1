import { Component } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../../services/consent-journey-config.service";
import * as i2 from "@angular/router";
import * as i3 from "@backbase/consent-request-widget-ang";
import * as i4 from "@backbase/ui-ang/button";
export class ConsentRequestComponent {
    constructor(config, router, activeRoute) {
        this.config = config;
        this.router = router;
        this.activeRoute = activeRoute;
        this.destroy$ = new Subject();
    }
    requestContext() {
        this.router.navigate([], {
            queryParams: {
                consentRequestId: '1231313',
            },
            skipLocationChange: false,
            relativeTo: this.activeRoute,
        });
    }
    handleAllowRequest(event) {
        this.router.navigate(['../consent-redirect', { allowConsentRequestRedirectUrl: event }], {
            relativeTo: this.activeRoute,
        });
    }
    handleRejectRequest(event) {
        this.router.navigate(['../consent-redirect', { rejectConsentRequestRedirectUrl: event }], {
            relativeTo: this.activeRoute,
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
}
ConsentRequestComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestComponent, deps: [{ token: i1.ConsentJourneyConfigurationService }, { token: i2.Router }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
ConsentRequestComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestComponent, selector: "bb-consent-request-view", ngImport: i0, template: `
    <div class="container--fixed-width-small mx-auto">
      <div class="bb-card">
        <div class="bb-card__body">
          <div class="mb-5 d-flex justify-content-center">
            <button
              bbButton
              (click)="requestContext()"
              i18n="Simulate Consent Request@@consent-journey.label.simulate-consent-request">
              Simulate Consent Request
            </button>
          </div>
          <bb-consent-request-widget
            [multiAccountSelection]="config.multiAccountSelection"
            (allowConsentRequestRedirectUrl)="handleAllowRequest($event)"
            (rejectConsentRequestRedirectUrl)="handleRejectRequest($event)"></bb-consent-request-widget>
        </div>
      </div>
    </div>
  `, isInline: true, components: [{ type: i3.ConsentRequestWidgetComponent, selector: "bb-consent-request-widget", inputs: ["multiAccountSelection"], outputs: ["allowConsentRequestRedirectUrl", "rejectConsentRequestRedirectUrl"] }], directives: [{ type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-request-view',
                    template: `
    <div class="container--fixed-width-small mx-auto">
      <div class="bb-card">
        <div class="bb-card__body">
          <div class="mb-5 d-flex justify-content-center">
            <button
              bbButton
              (click)="requestContext()"
              i18n="Simulate Consent Request@@consent-journey.label.simulate-consent-request">
              Simulate Consent Request
            </button>
          </div>
          <bb-consent-request-widget
            [multiAccountSelection]="config.multiAccountSelection"
            (allowConsentRequestRedirectUrl)="handleAllowRequest($event)"
            (rejectConsentRequestRedirectUrl)="handleRejectRequest($event)"></bb-consent-request-widget>
        </div>
      </div>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i1.ConsentJourneyConfigurationService }, { type: i2.Router }, { type: i2.ActivatedRoute }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC1yZXF1ZXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY29uc2VudC1qb3VybmV5L3NyYy92aWV3cy9jb25zZW50LXJlcXVlc3QvY29uc2VudC1yZXF1ZXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7OztBQTJCL0IsTUFBTSxPQUFPLHVCQUF1QjtJQUdsQyxZQUNXLE1BQTBDLEVBQzNDLE1BQWMsRUFDZCxXQUEyQjtRQUYxQixXQUFNLEdBQU4sTUFBTSxDQUFvQztRQUMzQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsZ0JBQVcsR0FBWCxXQUFXLENBQWdCO1FBTHBCLGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0lBTTdDLENBQUM7SUFFSixjQUFjO1FBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFO1lBQ3ZCLFdBQVcsRUFBRTtnQkFDWCxnQkFBZ0IsRUFBRSxTQUFTO2FBQzVCO1lBQ0Qsa0JBQWtCLEVBQUUsS0FBSztZQUN6QixVQUFVLEVBQUUsSUFBSSxDQUFDLFdBQVc7U0FDN0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGtCQUFrQixDQUFDLEtBQWE7UUFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLDhCQUE4QixFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7WUFDdkYsVUFBVSxFQUFFLElBQUksQ0FBQyxXQUFXO1NBQzdCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxLQUFhO1FBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMscUJBQXFCLEVBQUUsRUFBRSwrQkFBK0IsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO1lBQ3hGLFVBQVUsRUFBRSxJQUFJLENBQUMsV0FBVztTQUM3QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7cUhBakNVLHVCQUF1Qjt5R0FBdkIsdUJBQXVCLCtEQXJCeEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQlQ7NEZBRVUsdUJBQXVCO2tCQXZCbkMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUseUJBQXlCO29CQUNuQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQlQ7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBDb25zZW50Sm91cm5leUNvbmZpZ3VyYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY29uc2VudC1qb3VybmV5LWNvbmZpZy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItY29uc2VudC1yZXF1ZXN0LXZpZXcnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXItLWZpeGVkLXdpZHRoLXNtYWxsIG14LWF1dG9cIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJiYi1jYXJkXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJiYi1jYXJkX19ib2R5XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm1iLTUgZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgYmJCdXR0b25cbiAgICAgICAgICAgICAgKGNsaWNrKT1cInJlcXVlc3RDb250ZXh0KClcIlxuICAgICAgICAgICAgICBpMThuPVwiU2ltdWxhdGUgQ29uc2VudCBSZXF1ZXN0QEBjb25zZW50LWpvdXJuZXkubGFiZWwuc2ltdWxhdGUtY29uc2VudC1yZXF1ZXN0XCI+XG4gICAgICAgICAgICAgIFNpbXVsYXRlIENvbnNlbnQgUmVxdWVzdFxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGJiLWNvbnNlbnQtcmVxdWVzdC13aWRnZXRcbiAgICAgICAgICAgIFttdWx0aUFjY291bnRTZWxlY3Rpb25dPVwiY29uZmlnLm11bHRpQWNjb3VudFNlbGVjdGlvblwiXG4gICAgICAgICAgICAoYWxsb3dDb25zZW50UmVxdWVzdFJlZGlyZWN0VXJsKT1cImhhbmRsZUFsbG93UmVxdWVzdCgkZXZlbnQpXCJcbiAgICAgICAgICAgIChyZWplY3RDb25zZW50UmVxdWVzdFJlZGlyZWN0VXJsKT1cImhhbmRsZVJlamVjdFJlcXVlc3QoJGV2ZW50KVwiPjwvYmItY29uc2VudC1yZXF1ZXN0LXdpZGdldD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgYCxcbn0pXG5leHBvcnQgY2xhc3MgQ29uc2VudFJlcXVlc3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBwcml2YXRlIHJlYWRvbmx5IGRlc3Ryb3kkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICByZWFkb25seSBjb25maWc6IENvbnNlbnRKb3VybmV5Q29uZmlndXJhdGlvblNlcnZpY2UsXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIGFjdGl2ZVJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcbiAgKSB7fVxuXG4gIHJlcXVlc3RDb250ZXh0KCkge1xuICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtdLCB7XG4gICAgICBxdWVyeVBhcmFtczoge1xuICAgICAgICBjb25zZW50UmVxdWVzdElkOiAnMTIzMTMxMycsXG4gICAgICB9LFxuICAgICAgc2tpcExvY2F0aW9uQ2hhbmdlOiBmYWxzZSxcbiAgICAgIHJlbGF0aXZlVG86IHRoaXMuYWN0aXZlUm91dGUsXG4gICAgfSk7XG4gIH1cblxuICBoYW5kbGVBbGxvd1JlcXVlc3QoZXZlbnQ6IHN0cmluZykge1xuICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnLi4vY29uc2VudC1yZWRpcmVjdCcsIHsgYWxsb3dDb25zZW50UmVxdWVzdFJlZGlyZWN0VXJsOiBldmVudCB9XSwge1xuICAgICAgcmVsYXRpdmVUbzogdGhpcy5hY3RpdmVSb3V0ZSxcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZVJlamVjdFJlcXVlc3QoZXZlbnQ6IHN0cmluZykge1xuICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnLi4vY29uc2VudC1yZWRpcmVjdCcsIHsgcmVqZWN0Q29uc2VudFJlcXVlc3RSZWRpcmVjdFVybDogZXZlbnQgfV0sIHtcbiAgICAgIHJlbGF0aXZlVG86IHRoaXMuYWN0aXZlUm91dGUsXG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcbiAgfVxufVxuIl19