import { Component } from '@angular/core';
import { combineLatest } from 'rxjs';
import { map, pluck } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/ui-ang/loading-indicator";
import * as i4 from "@angular/common";
export var Status;
(function (Status) {
    Status[Status["ALLOW"] = 0] = "ALLOW";
    Status[Status["REJECT"] = 1] = "REJECT";
    Status[Status["ERROR"] = 2] = "ERROR";
})(Status || (Status = {}));
export class TppConsentRedirectComponent {
    constructor(route) {
        this.route = route;
        this.CONSENT_REDIRECT_TIMEOUT = 5000;
        this.Status = Status;
        this.allowConsentRequestRedirectUrl = this.getRouteParam(this.route, 'allowConsentRequestRedirectUrl').pipe(map(allowConsentRequestRedirectUrl => allowConsentRequestRedirectUrl || ''));
        this.rejectConsentRequestRedirectUrl = this.getRouteParam(this.route, 'rejectConsentRequestRedirectUrl').pipe(map(rejectConsentRequestRedirectUrl => rejectConsentRequestRedirectUrl || ''));
        this.redirectStatus = combineLatest(this.allowConsentRequestRedirectUrl, this.rejectConsentRequestRedirectUrl).pipe(map(([allowUrl, rejectUrl]) => ({
            url: allowUrl ? allowUrl : rejectUrl ? rejectUrl : '',
            status: allowUrl ? Status.ALLOW : rejectUrl ? Status.REJECT : Status.ERROR,
        })));
    }
    getRouteParam(route, param) {
        const paramValue = route.paramMap.pipe(pluck('params', param));
        if (!route.parent) {
            return paramValue;
        }
        // ensure that level that has actual value keeps it from being cleared
        return combineLatest(paramValue, this.getRouteParam(route.parent, param)).pipe(map(params => params[0] || params[1]));
    }
    redirect() {
        this.redirectStatus.subscribe((redirectStatus) => {
            if (redirectStatus.status !== Status.ERROR) {
                window.location.href = redirectStatus.url;
            }
        });
    }
    ngOnInit() {
        setTimeout(() => {
            this.redirect();
        }, this.CONSENT_REDIRECT_TIMEOUT);
    }
}
TppConsentRedirectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TppConsentRedirectComponent, deps: [{ token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
TppConsentRedirectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TppConsentRedirectComponent, selector: "bb-tpp-consent-redirect", ngImport: i0, template: "<div class=\"container--fixed-width-small mx-auto\">\n  <div class=\"bb-card\">\n    <div class=\"bb-card__body\">\n      <div\n        *ngIf=\"redirectStatus | async as redirectStatus; else errorTemplate\"\n        class=\"mb-5 d-flex justify-content-center flex-column text-center\">\n        <ng-container *ngIf=\"redirectStatus.status !== Status.ERROR; else errorTemplate\">\n          <bb-icon-ui name=\"success\" color=\"success\" size=\"xl\" class=\"d-inline mb-3\"></bb-icon-ui>\n          <h4\n            i18n=\"Consent status@@consent-journey.label.consent-status-allowed\"\n            *ngIf=\"redirectStatus.status === Status.ALLOW\"\n            data-role=\"consent-status-allowed\">\n            Consent granted!\n          </h4>\n          <h4\n            i18n=\"Consent status@@consent-journey.label.consent-status-rejected\"\n            *ngIf=\"redirectStatus.status === Status.REJECT\">\n            Consent rejected!\n          </h4>\n          <div class=\"mb-4\" i18n=\"Redirecting@@consent-journey.label.redirecting-to-tpp-website\">\n            Redirecting back to third party website...\n          </div>\n          <div class=\"mb-3\">\n            <bb-loading-indicator-ui></bb-loading-indicator-ui>\n          </div>\n        </ng-container>\n      </div>\n\n      <ng-template #errorTemplate>\n        <div class=\"mb-5 d-flex justify-content-center flex-column text-center\">\n          <div i18n=\"No Redirect Url@@consent-journey.label.no-redirect-url\">No Redirect Url</div>\n        </div>\n      </ng-template>\n    </div>\n  </div>\n</div>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TppConsentRedirectComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-tpp-consent-redirect',
                    templateUrl: './tpp-consent-redirect.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }]; } });
//# sourceMappingURL=data:application/json;base64,