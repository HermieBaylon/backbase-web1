import { Component } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../../services/consent-journey-config.service";
import * as i2 from "@angular/router";
import * as i3 from "@backbase/payment-request-widget-ang";
import * as i4 from "@backbase/ui-ang/button";
export class PaymentRequestComponent {
    constructor(config, router, activeRoute) {
        this.config = config;
        this.router = router;
        this.activeRoute = activeRoute;
        this.destroy$ = new Subject();
    }
    requestPayment() {
        this.router.navigate([], {
            queryParams: {
                paymentRequestId: '1231313',
            },
            skipLocationChange: false,
            relativeTo: this.activeRoute,
        });
    }
    handleAllowRequest(event) {
        this.router.navigate(['../payment-redirect', { allowPaymentRequestRedirectUrl: event }], {
            relativeTo: this.activeRoute,
        });
    }
    handleRejectRequest(event) {
        this.router.navigate(['../payment-redirect', { rejectPaymentRequestRedirectUrl: event }], {
            relativeTo: this.activeRoute,
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
}
PaymentRequestComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestComponent, deps: [{ token: i1.ConsentJourneyConfigurationService }, { token: i2.Router }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
PaymentRequestComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentRequestComponent, selector: "bb-payment-request-view", ngImport: i0, template: `
    <div class="container--fixed-width-small mx-auto">
      <div class="bb-card">
        <div class="bb-card__body">
          <div class="mb-5 d-flex justify-content-center">
            <button
              bbButton
              (click)="requestPayment()"
              i18n="Simulate Payment Request@@consent-journey.label.simulate-payment-request">
              Pay with Backbase
            </button>
          </div>
          <bb-payment-request-widget
            (allowPaymentRequestRedirectUrl)="handleAllowRequest($event)"
            (rejectPaymentRequestRedirectUrl)="handleRejectRequest($event)"></bb-payment-request-widget>
        </div>
      </div>
    </div>
  `, isInline: true, components: [{ type: i3.PaymentRequestWidgetComponent, selector: "bb-payment-request-widget", outputs: ["allowPaymentRequestRedirectUrl", "rejectPaymentRequestRedirectUrl"] }], directives: [{ type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-request-view',
                    template: `
    <div class="container--fixed-width-small mx-auto">
      <div class="bb-card">
        <div class="bb-card__body">
          <div class="mb-5 d-flex justify-content-center">
            <button
              bbButton
              (click)="requestPayment()"
              i18n="Simulate Payment Request@@consent-journey.label.simulate-payment-request">
              Pay with Backbase
            </button>
          </div>
          <bb-payment-request-widget
            (allowPaymentRequestRedirectUrl)="handleAllowRequest($event)"
            (rejectPaymentRequestRedirectUrl)="handleRejectRequest($event)"></bb-payment-request-widget>
        </div>
      </div>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i1.ConsentJourneyConfigurationService }, { type: i2.Router }, { type: i2.ActivatedRoute }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC1yZXF1ZXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY29uc2VudC1qb3VybmV5L3NyYy92aWV3cy9wYXltZW50LXJlcXVlc3QvcGF5bWVudC1yZXF1ZXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7OztBQTBCL0IsTUFBTSxPQUFPLHVCQUF1QjtJQUdsQyxZQUNXLE1BQTBDLEVBQzNDLE1BQWMsRUFDZCxXQUEyQjtRQUYxQixXQUFNLEdBQU4sTUFBTSxDQUFvQztRQUMzQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsZ0JBQVcsR0FBWCxXQUFXLENBQWdCO1FBTHBCLGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0lBTTdDLENBQUM7SUFFSixjQUFjO1FBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFO1lBQ3ZCLFdBQVcsRUFBRTtnQkFDWCxnQkFBZ0IsRUFBRSxTQUFTO2FBQzVCO1lBQ0Qsa0JBQWtCLEVBQUUsS0FBSztZQUN6QixVQUFVLEVBQUUsSUFBSSxDQUFDLFdBQVc7U0FDN0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGtCQUFrQixDQUFDLEtBQWE7UUFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLDhCQUE4QixFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7WUFDdkYsVUFBVSxFQUFFLElBQUksQ0FBQyxXQUFXO1NBQzdCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxLQUFhO1FBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMscUJBQXFCLEVBQUUsRUFBRSwrQkFBK0IsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO1lBQ3hGLFVBQVUsRUFBRSxJQUFJLENBQUMsV0FBVztTQUM3QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7cUhBakNVLHVCQUF1Qjt5R0FBdkIsdUJBQXVCLCtEQXBCeEI7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtCVDs0RkFFVSx1QkFBdUI7a0JBdEJuQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx5QkFBeUI7b0JBQ25DLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBa0JUO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlLCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQ29uc2VudEpvdXJuZXlDb25maWd1cmF0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NvbnNlbnQtam91cm5leS1jb25maWcuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLXBheW1lbnQtcmVxdWVzdC12aWV3JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyLS1maXhlZC13aWR0aC1zbWFsbCBteC1hdXRvXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiYmItY2FyZFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYmItY2FyZF9fYm9keVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJtYi01IGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyXCI+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIGJiQnV0dG9uXG4gICAgICAgICAgICAgIChjbGljayk9XCJyZXF1ZXN0UGF5bWVudCgpXCJcbiAgICAgICAgICAgICAgaTE4bj1cIlNpbXVsYXRlIFBheW1lbnQgUmVxdWVzdEBAY29uc2VudC1qb3VybmV5LmxhYmVsLnNpbXVsYXRlLXBheW1lbnQtcmVxdWVzdFwiPlxuICAgICAgICAgICAgICBQYXkgd2l0aCBCYWNrYmFzZVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGJiLXBheW1lbnQtcmVxdWVzdC13aWRnZXRcbiAgICAgICAgICAgIChhbGxvd1BheW1lbnRSZXF1ZXN0UmVkaXJlY3RVcmwpPVwiaGFuZGxlQWxsb3dSZXF1ZXN0KCRldmVudClcIlxuICAgICAgICAgICAgKHJlamVjdFBheW1lbnRSZXF1ZXN0UmVkaXJlY3RVcmwpPVwiaGFuZGxlUmVqZWN0UmVxdWVzdCgkZXZlbnQpXCI+PC9iYi1wYXltZW50LXJlcXVlc3Qtd2lkZ2V0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICBgLFxufSlcbmV4cG9ydCBjbGFzcyBQYXltZW50UmVxdWVzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgZGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHJlYWRvbmx5IGNvbmZpZzogQ29uc2VudEpvdXJuZXlDb25maWd1cmF0aW9uU2VydmljZSxcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgYWN0aXZlUm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICApIHt9XG5cbiAgcmVxdWVzdFBheW1lbnQoKSB7XG4gICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW10sIHtcbiAgICAgIHF1ZXJ5UGFyYW1zOiB7XG4gICAgICAgIHBheW1lbnRSZXF1ZXN0SWQ6ICcxMjMxMzEzJyxcbiAgICAgIH0sXG4gICAgICBza2lwTG9jYXRpb25DaGFuZ2U6IGZhbHNlLFxuICAgICAgcmVsYXRpdmVUbzogdGhpcy5hY3RpdmVSb3V0ZSxcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZUFsbG93UmVxdWVzdChldmVudDogc3RyaW5nKSB7XG4gICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWycuLi9wYXltZW50LXJlZGlyZWN0JywgeyBhbGxvd1BheW1lbnRSZXF1ZXN0UmVkaXJlY3RVcmw6IGV2ZW50IH1dLCB7XG4gICAgICByZWxhdGl2ZVRvOiB0aGlzLmFjdGl2ZVJvdXRlLFxuICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlUmVqZWN0UmVxdWVzdChldmVudDogc3RyaW5nKSB7XG4gICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWycuLi9wYXltZW50LXJlZGlyZWN0JywgeyByZWplY3RQYXltZW50UmVxdWVzdFJlZGlyZWN0VXJsOiBldmVudCB9XSwge1xuICAgICAgcmVsYXRpdmVUbzogdGhpcy5hY3RpdmVSb3V0ZSxcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZGVzdHJveSQubmV4dCgpO1xuICB9XG59XG4iXX0=