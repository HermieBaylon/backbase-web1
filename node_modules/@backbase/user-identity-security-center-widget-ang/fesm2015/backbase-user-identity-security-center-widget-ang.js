import * as i0 from '@angular/core';
import { EventEmitter, Component, ViewChild, Output, Directive, NgModule, Input } from '@angular/core';
import * as i1 from '@angular/forms';
import { Validators, ReactiveFormsModule } from '@angular/forms';
import * as i1$1 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import { Subject, of } from 'rxjs';
import { distinctUntilChanged, takeUntil, tap, catchError, publish, first } from 'rxjs/operators';
import * as i2 from '@backbase/user-common';
import { ManageProfilePreferencesService, UserDataService, UserCommonModule } from '@backbase/user-common';
import * as i3 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i4 from '@backbase/ui-ang/input-password';
import { InputPasswordModule } from '@backbase/ui-ang/input-password';
import * as i5 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i6 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import * as i7 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i8 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import { AlertModule } from '@backbase/ui-ang/alert';
import { ErrorCommonStateModule } from '@backbase/ui-ang/common-error-state';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i1$2 from '@backbase/ui-ang/notification';

class ChangePasswordFormComponent {
    constructor(formBuilder, userDataService) {
        this.formBuilder = formBuilder;
        this.userDataService = userDataService;
        this.close = new EventEmitter();
        this.passwordChange = new EventEmitter();
        this.error = new EventEmitter();
        this.hostRef = this;
        this.isSubmitted = false;
        this.componentDestroyed = new Subject();
        this.isSubmitting = false;
        this.isPasswordUnique = () => {
            if (this.passwordForm) {
                const match = this.form.controls.inputNewPassword.value === this.form.controls.currentPassword.value;
                // eslint-disable-next-line no-null/no-null
                return match && this.form.controls.inputNewPassword.value ? { usedPassword: true } : null;
            }
            return false;
        };
        this.passwordMatchesValidator = () => {
            if (this.passwordForm) {
                const match = this.form.controls.inputNewPassword.value === this.form.controls.confirmNewPassword.value;
                // eslint-disable-next-line no-null/no-null
                return match ? null : { mismatched: true };
            }
            return false;
        };
    }
    ngOnDestroy() {
        this.componentDestroyed.next();
        this.componentDestroyed.complete();
    }
    ngOnInit() {
        this.passwordForm = this.formBuilder.group({
            currentPassword: ['', Validators.required],
            inputNewPassword: ['', [Validators.required, this.isPasswordUnique]],
            confirmNewPassword: ['', [Validators.required, this.passwordMatchesValidator]],
        });
        this.form.controls.currentPassword.valueChanges
            .pipe(distinctUntilChanged(), takeUntil(this.componentDestroyed))
            .subscribe(() => {
            this.form.controls.inputNewPassword.updateValueAndValidity();
        });
        this.form.controls.inputNewPassword.valueChanges
            .pipe(distinctUntilChanged(), takeUntil(this.componentDestroyed))
            .subscribe(() => {
            this.form.controls.confirmNewPassword.updateValueAndValidity();
        });
    }
    showErrors(control) {
        return control.invalid && this.isSubmitted;
    }
    closePasswordModal() {
        this.form.reset();
        this.close.emit();
    }
    onSubmit() {
        this.isSubmitted = true;
        if (!this.form.valid) {
            return;
        }
        const currentPassword = this.form.controls.currentPassword.value;
        const newPassword = this.form.controls.confirmNewPassword.value;
        this.isSubmitting = true;
        this.userDataService.changeUserPassword(currentPassword, newPassword).pipe(tap(() => this.passwordChange.emit()), catchError((error) => {
            this.handleError(error);
            return of(undefined);
        }), tap(() => {
            this.isSubmitting = false;
            this.closePasswordModal();
            this.form.enable({ emitEvent: false });
        }), publish()).connect();
    }
    handleError(error) {
        this.error.emit(error);
    }
    get form() {
        if (!this.passwordForm) {
            throw new Error('Form is undefined.');
        }
        return this.passwordForm;
    }
}
ChangePasswordFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ChangePasswordFormComponent, deps: [{ token: i1.FormBuilder }, { token: i2.UserDataService }], target: i0.ɵɵFactoryTarget.Component });
ChangePasswordFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ChangePasswordFormComponent, selector: "bb-user-identity-security-center-widget-change-password-form", outputs: { close: "close", passwordChange: "passwordChange", error: "error" }, viewQueries: [{ propertyName: "notificationSuccessTemplate", first: true, predicate: ["notificationSuccess"], descendants: true, static: true }, { propertyName: "notificationFailureTemplate", first: true, predicate: ["notificationFailure"], descendants: true, static: true }, { propertyName: "notificationFailureTemplateLogin", first: true, predicate: ["notificationFailureLogin"], descendants: true }], ngImport: i0, template: "<ng-container bbUserIdentitySecurityCenterChangePasswordForm [bbHostRef]=\"hostRef\">\n</ng-container>  \n  \n<ng-template bbUserIdentitySecurityCenterChangePasswordForm let-hostRef>\n  <div *ngIf=\"hostRef.form\">\n    <div class=\"bb-block bb-block--lg\">\n      <bb-header-ui\n        headingType=\"h3\"\n        heading=\"Change Password\"\n        i18n-heading=\"Header for changing a users password@@bb-user-identity-security-center-widget.bb-header-ui\">\n      </bb-header-ui>\n    </div>\n    <div class=\"bb-block bb-block--lg\"\n      i18n=\"Label for current password description@@bb-user-identity-security-center-widget.current-password-description\">\n      To change your password, we must verify your current one first.\n    </div>\n\n    <form [formGroup]=\"hostRef.form\" (submit)=\"hostRef.onSubmit()\">\n      <div data-role=\"identity-security-center-change-password-form\">\n        <div class=\"bb-block bb-block--xl\">\n          <bb-input-password-ui\n            class=\"bb-form-field bb-form-field--md\"\n            label=\"Current password\"\n            i18n-label=\"Current password input label|Label text for current password input@@bb-user-identity-security-center-widget.current-password-input-label\"\n            formControlName=\"currentPassword\"\n            [autofocus]=\"true\" \n            maxLength=\"255\"\n            data-role=\"identity-security-center-current-password-input\">\n          </bb-input-password-ui>\n          <bb-input-validation-message-ui\n            [showErrors]=\"hostRef.showErrors(hostRef.form.controls.currentPassword)\">\n            <span *ngIf=\"hostRef.form.controls.currentPassword.errors?.required\"\n              data-role=\"identity-security-center-current-password-error\"\n              i18n=\"Error message for blank current password field|Error message requiring password for current password field@@bb-user-identity-security-center-widget.current-password-blank-error-message\">\n              You must enter your current password\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n\n        <ng-container bbUserIdentitySecurityCenterWidgetPasswordPolicyCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n        <div class=\"form-group\">\n          <bb-input-password-ui\n            class=\"bb-form-field bb-form-field--md\"\n            label=\"New password\"\n            formControlName=\"inputNewPassword\"\n            maxLength=\"255\"\n            data-role=\"identity-security-center-new-password-input\"\n            i18n-label=\"New password input label|Label text for new password input@@bb-user-identity-security-center-widget.new-password-input-label\">\n          </bb-input-password-ui>\n          <bb-input-validation-message-ui\n            [showErrors]=\"hostRef.showErrors(hostRef.form.controls.inputNewPassword)\">\n            <span *ngIf=\"hostRef.form.controls.inputNewPassword.errors?.required\"\n              data-role=\"identity-security-center-new-password-error\"\n              i18n=\"Error message for blank new password field|Error message requiring password for new password field@@bb-user-identity-security-center-widget.new-password-blank-error-message\">\n              You must enter a new password\n            </span>\n            <span *ngIf=\"hostRef.form.controls.inputNewPassword.errors?.usedPassword\"\n              data-role=\"identity-security-center-old-password-error\"\n              i18n=\"Error message for current password matching new password field|Error message requiring unique password for new password field@@bb-user-identity-security-center-widget.new-password-unique-error-message\">\n              New password must be different to current password \n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n\n        <div class=\"bb-block bb-block--lg\">\n          <bb-input-password-ui\n            class=\"bb-form-field bb-form-field--md\"\n            label=\"Confirm new password\"\n            formControlName=\"confirmNewPassword\"\n            maxLength=\"255\"\n            data-role=\"identity-security-center-confirm-password-input\"\n            i18n-label=\"Confirm password input label|Label text for confirm password input@@bb-user-identity-security-center-widget.confirm-password-input-label\">\n          </bb-input-password-ui>\n          <bb-input-validation-message-ui\n            [showErrors]=\"hostRef.showErrors(hostRef.form.controls.confirmNewPassword)\">\n            <span *ngIf=\"hostRef.form.controls.confirmNewPassword.errors?.mismatched\"\n              data-role=\"identity-security-center-confirm-password-mismatch-error\"\n              i18n=\"Error message for mismatch passwords|Error message for mismatch passwords for confirm new password field@@bb-user-identity-security-center-widget.confirm-password-mismatch-error-message\">\n              Passwords don't match\n            </span>\n            <span *ngIf=\"hostRef.form.controls.confirmNewPassword.errors?.required\"\n              data-role=\"identity-security-center-confirm-password-blank-error\"\n              i18n=\"Error message for blank password|Error message for blank password for confirm new password field@@bb-user-identity-security-center-widget.confirm-password-blank-error-message\">\n              You must re-type your new password\n            </span>\n          </bb-input-validation-message-ui> \n        </div>\n      </div>\n      <div class=\"bb-button-bar--reverse\">\n        <bb-load-button-ui\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          button-size=\"md\" \n          data-role=\"password-form-change-password-button\"\n          type=\"submit\"\n          i18n=\"Change password button|Text for change password button@@bb-user-identity-security-center-widget.change-password-button-text\"\n          [isLoading]=\"hostRef.isSubmitting\">\n          Change Password\n        </bb-load-button-ui>\n        <button bbButton\n          class=\"bb-button-bar__button\"\n          color=\"secondary\"\n          button-size=\"md\" \n          data-role=\"identity-security-center-cancel-button\"\n          (click)=\"hostRef.closePasswordModal()\" \n          (mousedown)=\"hostRef.closePasswordModal()\" \n          type=\"button\"\n          i18n=\"Cancel password button|Text for cancel password button@@bb-user-identity-security-center-widget.cancel-password-button-text\">\n          Cancel\n        </button>\n      </div>\n    </form> \n  </div>\n</ng-template>\n\n\n<ng-template bbUserIdentitySecurityCenterWidgetPasswordPolicyCustomizable let-hostRef>\n  <div class=\"bb-block bb-block--lg\">\n    <div\n      class=\"bb-block bb-block--lg\"\n      i18n=\"Text for password form description@@bb-user-identity-security-center-widget.password-form-text\">\n      Your new password must contain:\n    </div>\n    <ul>\n      <li\n        i18n=\"Text for minimum length password policy bullet point@bb-user-identity-security-center-widget.password-form-policy-length\">\n        A minimum of 6 characters\n      </li>\n      <li\n        i18n=\"Text for uppercase password policy bullet point@bb-user-identity-security-center-widget.password-form-policy-uppercase\">\n        At least one UPPERCASE letter\n      </li>\n      <li\n        i18n=\"Text for lowercase password policy bullet point@bb-user-identity-security-center-widget.password-form-policy-lowecase\">\n        At least one lowercase letter\n      </li>\n    </ul>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i3.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i4.InputPasswordComponent; }), selector: "bb-input-password-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete", "showVisibilityControl", "showPassword", "visibilityControlLabel", "ariaLabel"], outputs: ["toggleVisibility"] }, { type: i0.forwardRef(function () { return i5.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i6.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i0.forwardRef(function () { return UserIdentitySecurityCenterPasswordFormCustomizableDirective; }), selector: "[bbUserIdentitySecurityCenterChangePasswordForm]" }, { type: i0.forwardRef(function () { return i7.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i1.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective; }), selector: "[bbUserIdentitySecurityCenterWidgetPasswordPolicyCustomizable]" }, { type: i0.forwardRef(function () { return i8.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ChangePasswordFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-identity-security-center-widget-change-password-form',
                    templateUrl: './change-password-form.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.UserDataService }]; }, propDecorators: { notificationSuccessTemplate: [{
                type: ViewChild,
                args: ['notificationSuccess', { static: true }]
            }], notificationFailureTemplate: [{
                type: ViewChild,
                args: ['notificationFailure', { static: true }]
            }], notificationFailureTemplateLogin: [{
                type: ViewChild,
                args: ['notificationFailureLogin']
            }], close: [{
                type: Output
            }], passwordChange: [{
                type: Output
            }], error: [{
                type: Output
            }] } });
class UserIdentitySecurityCenterPasswordFormCustomizableDirective extends BbTemplate {
}
UserIdentitySecurityCenterPasswordFormCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserIdentitySecurityCenterPasswordFormCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
UserIdentitySecurityCenterPasswordFormCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: UserIdentitySecurityCenterPasswordFormCustomizableDirective, selector: "[bbUserIdentitySecurityCenterChangePasswordForm]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserIdentitySecurityCenterPasswordFormCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbUserIdentitySecurityCenterChangePasswordForm]',
                }]
        }] });
class UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective extends BbTemplate {
}
UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective, selector: "[bbUserIdentitySecurityCenterWidgetPasswordPolicyCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbUserIdentitySecurityCenterWidgetPasswordPolicyCustomizable]',
                }]
        }] });

const passwordForm = [
    ChangePasswordFormComponent,
    UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective,
    UserIdentitySecurityCenterPasswordFormCustomizableDirective,
];
const uiModules$1 = [
    AlertModule,
    ButtonModule,
    ErrorCommonStateModule,
    HeaderModule,
    LoadingIndicatorModule,
    ModalModule,
    InputPasswordModule,
    InputValidationMessageModule,
    ReactiveFormsModule,
    LoadButtonModule,
];
class ChangePasswordFormModule {
}
ChangePasswordFormModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ChangePasswordFormModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ChangePasswordFormModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ChangePasswordFormModule, declarations: [ChangePasswordFormComponent,
        UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective,
        UserIdentitySecurityCenterPasswordFormCustomizableDirective], imports: [CommonModule, i1$1.BackbaseCoreModule, AlertModule,
        ButtonModule,
        ErrorCommonStateModule,
        HeaderModule,
        LoadingIndicatorModule,
        ModalModule,
        InputPasswordModule,
        InputValidationMessageModule,
        ReactiveFormsModule,
        LoadButtonModule], exports: [AlertModule,
        ButtonModule,
        ErrorCommonStateModule,
        HeaderModule,
        LoadingIndicatorModule,
        ModalModule,
        InputPasswordModule,
        InputValidationMessageModule,
        ReactiveFormsModule,
        LoadButtonModule, ChangePasswordFormComponent,
        UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective,
        UserIdentitySecurityCenterPasswordFormCustomizableDirective] });
ChangePasswordFormModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ChangePasswordFormModule, imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                classMap: { ChangePasswordFormComponent: ChangePasswordFormComponent },
            }),
            ...uiModules$1,
        ], AlertModule,
        ButtonModule,
        ErrorCommonStateModule,
        HeaderModule,
        LoadingIndicatorModule,
        ModalModule,
        InputPasswordModule,
        InputValidationMessageModule,
        ReactiveFormsModule,
        LoadButtonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ChangePasswordFormModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { ChangePasswordFormComponent: ChangePasswordFormComponent },
                        }),
                        ...uiModules$1,
                    ],
                    declarations: [...passwordForm],
                    exports: [...uiModules$1, ...passwordForm],
                }]
        }] });

var UserIdentitySecurityCenterActionType;
(function (UserIdentitySecurityCenterActionType) {
    UserIdentitySecurityCenterActionType["PasswordChanged"] = "[UserIdentitySecurityCenterWidget] User password changed";
    UserIdentitySecurityCenterActionType["PasswordChangeFailed"] = "[UserIdentitySecurityCenterWidget] User password change failed";
})(UserIdentitySecurityCenterActionType || (UserIdentitySecurityCenterActionType = {}));

class UserIdentitySecurityCenterWidgetComponent {
    constructor(notificationService, manageProfilePreferencesService) {
        this.notificationService = notificationService;
        this.manageProfilePreferencesService = manageProfilePreferencesService;
        this.hostRef = this;
        this.openPassword = false;
        this.widgetStatus = new EventEmitter();
    }
    ngOnInit() {
        if (this.notificationDismissTime) {
            this.notificationDelay = this.notificationDismissTime * 1000;
        }
        else {
            this.manageProfilePreferencesService
                .getNotificationDismissTimePreference()
                .pipe(first())
                .subscribe((time) => (this.notificationDelay = time * 1000));
        }
    }
    toggleChangePassword() {
        this.openPassword = !this.openPassword;
    }
    emitPasswordChanged() {
        this.showNotification(this.notificationSuccessTemplate, 'success');
        this.widgetStatus.emit({
            type: UserIdentitySecurityCenterActionType.PasswordChanged,
        });
    }
    emitError(error) {
        if (error.status === 400) {
            this.showNotification(this.notificationFailureTemplateLogin, 'error');
        }
        else {
            this.showNotification(this.notificationFailureTemplate, 'error');
        }
        this.widgetStatus.emit({
            type: UserIdentitySecurityCenterActionType.PasswordChangeFailed,
        });
    }
    showNotification(template, type) {
        this.notificationService.showNotification({
            message: template,
            modifier: type,
            ttl: this.notificationDelay,
        });
    }
}
UserIdentitySecurityCenterWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserIdentitySecurityCenterWidgetComponent, deps: [{ token: i1$2.NotificationService }, { token: i2.ManageProfilePreferencesService }], target: i0.ɵɵFactoryTarget.Component });
UserIdentitySecurityCenterWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: UserIdentitySecurityCenterWidgetComponent, selector: "bb-user-identity-security-center-widget", inputs: { notificationDismissTime: "notificationDismissTime" }, outputs: { widgetStatus: "widgetStatus" }, providers: [ManageProfilePreferencesService, UserDataService], viewQueries: [{ propertyName: "notificationSuccessTemplate", first: true, predicate: ["notificationSuccess"], descendants: true, static: true }, { propertyName: "notificationFailureTemplate", first: true, predicate: ["notificationFailure"], descendants: true, static: true }, { propertyName: "notificationFailureTemplateLogin", first: true, predicate: ["notificationFailureLogin"], descendants: true }], ngImport: i0, template: "<ng-container bbUserIdentitySecurityCenterWidgetCustomizable\n  [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbUserIdentitySecurityCenterWidgetCustomizable\n  let-hostRef>\n  <div class=\"card\">\n    <div class=\"card-header\">\n      <bb-header-ui\n        headingType=\"h2\"\n        heading=\"Security Settings\"\n        i18n-heading=\"Header for changing a users password@@bb-user-identity-security-center-widget.bb-header-ui\">\n      </bb-header-ui>\n    </div>\n    <ng-container *ngIf=\"!hostRef.openPassword; else passwordForm\">\n      <div class=\"card-section\">\n        <div class=\"bb-stack\">\n          <strong class=\"bb-stack__item bb-stack__item--fill\"\n            i18n=\"Password list item label text@@bb-user-identity-security-center-widget.home-password-label\">\n            Password\n          </strong>\n          <div class=\"bb-stack__item\">\n            <button bbButton\n              color=\"link\"\n              buttonSize=\"md\"\n              type=\"submit\"\n              data-role=\"identity-security-center-password-change-button\"\n              aria-label=\"Change My Password\"\n              i18n-aria-label=\"Password change button aria label@@bb-user-identity-security-center-widget.change-button-aria-label\"\n              i18n=\"Password change button text@@bb-user-identity-security-center-widget.change-button-text\"\n              (click)=\"hostRef.toggleChangePassword()\">\n              Change\n            </button>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n\n  <ng-template #passwordForm>\n    <div class=\"card-section card-section--highlight\">\n      <bb-user-identity-security-center-widget-change-password-form\n        (close)=\"hostRef.toggleChangePassword()\"\n        (passwordChange)=\"hostRef.emitPasswordChanged()\"\n        (error)=\"hostRef.emitError($event)\">\n      </bb-user-identity-security-center-widget-change-password-form>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationSuccess>\n  <span \n    data-role=\"user-change-password-success-notification\"\n    i18n=\"Password Reset Success Notification|Notification text for when password reset request is successful@@bb-user-identity-security-center-widget.notification.success\">\n    Password update successful.\n  </span>\n</ng-template>\n\n<ng-template #notificationFailure>\n  <span \n    data-role=\"user-change-password-failure-notification\"\n    i18n=\"Password Reset Failure Notification|Notification text for when password reset request is unsuccessful@@bb-user-identity-security-center-widget.notification.failure\">\n    Could not update password.\n  </span>\n</ng-template>\n\n<ng-template #notificationFailureLogin>\n  <span \n    data-role=\"user-change-password-login-failure-notification\"\n    i18n=\"Password Reset Failure Notification|Notification text for when password reset request is unsuccessful@@bb-user-identity-security-center-widget.notification.failure\">\n    Could not update password. Incorrect login credentials or password policy not met.  \n  </span>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i3.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return ChangePasswordFormComponent; }), selector: "bb-user-identity-security-center-widget-change-password-form", outputs: ["close", "passwordChange", "error"] }], directives: [{ type: i0.forwardRef(function () { return UserIdentitySecurityCenterCustomizableDirective; }), selector: "[bbUserIdentitySecurityCenterWidgetCustomizable]" }, { type: i0.forwardRef(function () { return i7.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i8.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserIdentitySecurityCenterWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-identity-security-center-widget',
                    templateUrl: './user-identity-security-center-widget.component.html',
                    providers: [ManageProfilePreferencesService, UserDataService],
                }]
        }], ctorParameters: function () { return [{ type: i1$2.NotificationService }, { type: i2.ManageProfilePreferencesService }]; }, propDecorators: { notificationSuccessTemplate: [{
                type: ViewChild,
                args: ['notificationSuccess', { static: true }]
            }], notificationFailureTemplate: [{
                type: ViewChild,
                args: ['notificationFailure', { static: true }]
            }], notificationFailureTemplateLogin: [{
                type: ViewChild,
                args: ['notificationFailureLogin']
            }], widgetStatus: [{
                type: Output
            }], notificationDismissTime: [{
                type: Input
            }] } });
class UserIdentitySecurityCenterCustomizableDirective extends BbTemplate {
}
UserIdentitySecurityCenterCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserIdentitySecurityCenterCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
UserIdentitySecurityCenterCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: UserIdentitySecurityCenterCustomizableDirective, selector: "[bbUserIdentitySecurityCenterWidgetCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserIdentitySecurityCenterCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbUserIdentitySecurityCenterWidgetCustomizable]',
                }]
        }] });

const uiModules = [
    AlertModule,
    ButtonModule,
    ErrorCommonStateModule,
    HeaderModule,
    LoadingIndicatorModule,
    ModalModule,
    InputPasswordModule,
    InputValidationMessageModule,
    ReactiveFormsModule,
];
const widgetModules = [ChangePasswordFormModule];
class UserIdentitySecurityCenterWidgetModule {
}
UserIdentitySecurityCenterWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserIdentitySecurityCenterWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
UserIdentitySecurityCenterWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserIdentitySecurityCenterWidgetModule, declarations: [UserIdentitySecurityCenterWidgetComponent, UserIdentitySecurityCenterCustomizableDirective], imports: [CommonModule, i1$1.BackbaseCoreModule, UserCommonModule, AlertModule,
        ButtonModule,
        ErrorCommonStateModule,
        HeaderModule,
        LoadingIndicatorModule,
        ModalModule,
        InputPasswordModule,
        InputValidationMessageModule,
        ReactiveFormsModule, ChangePasswordFormModule], exports: [UserIdentitySecurityCenterWidgetComponent,
        UserIdentitySecurityCenterCustomizableDirective, AlertModule,
        ButtonModule,
        ErrorCommonStateModule,
        HeaderModule,
        LoadingIndicatorModule,
        ModalModule,
        InputPasswordModule,
        InputValidationMessageModule,
        ReactiveFormsModule, ChangePasswordFormModule] });
UserIdentitySecurityCenterWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserIdentitySecurityCenterWidgetModule, imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                classMap: { UserIdentitySecurityCenterWidgetComponent },
            }),
            UserCommonModule,
            ...uiModules,
            ...widgetModules,
        ], AlertModule,
        ButtonModule,
        ErrorCommonStateModule,
        HeaderModule,
        LoadingIndicatorModule,
        ModalModule,
        InputPasswordModule,
        InputValidationMessageModule,
        ReactiveFormsModule, ChangePasswordFormModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserIdentitySecurityCenterWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { UserIdentitySecurityCenterWidgetComponent },
                        }),
                        UserCommonModule,
                        ...uiModules,
                        ...widgetModules,
                    ],
                    declarations: [UserIdentitySecurityCenterWidgetComponent, UserIdentitySecurityCenterCustomizableDirective],
                    exports: [
                        UserIdentitySecurityCenterWidgetComponent,
                        UserIdentitySecurityCenterCustomizableDirective,
                        ...uiModules,
                        ...widgetModules,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ChangePasswordFormComponent, ChangePasswordFormModule, UserIdentitySecurityCenterActionType, UserIdentitySecurityCenterWidgetComponent, UserIdentitySecurityCenterWidgetModule, UserIdentitySecurityCenterCustomizableDirective as ӨUserIdentitySecurityCenterCustomizableDirective, UserIdentitySecurityCenterPasswordFormCustomizableDirective as ӨUserIdentitySecurityCenterPasswordFormCustomizableDirective, UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective as ӨUserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective };
//# sourceMappingURL=backbase-user-identity-security-center-widget-ang.js.map
