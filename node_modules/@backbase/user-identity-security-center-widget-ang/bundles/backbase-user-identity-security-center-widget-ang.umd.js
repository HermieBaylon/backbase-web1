(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@backbase/foundation-ang/core'), require('rxjs'), require('rxjs/operators'), require('@backbase/user-common'), require('@backbase/ui-ang/header'), require('@backbase/ui-ang/input-password'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/load-button'), require('@angular/common'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/alert'), require('@backbase/ui-ang/common-error-state'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/notification')) :
    typeof define === 'function' && define.amd ? define('@backbase/user-identity-security-center-widget-ang', ['exports', '@angular/core', '@angular/forms', '@backbase/foundation-ang/core', 'rxjs', 'rxjs/operators', '@backbase/user-common', '@backbase/ui-ang/header', '@backbase/ui-ang/input-password', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/load-button', '@angular/common', '@backbase/ui-ang/button', '@backbase/ui-ang/alert', '@backbase/ui-ang/common-error-state', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/modal', '@backbase/ui-ang/notification'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["user-identity-security-center-widget-ang"] = {}), global.ng.core, global.ng.forms, global.i1$1, global.rxjs, global.rxjs.operators, global.i2, global.i3, global.i4, global.i5, global.i6, global.ng.common, global.i8, global.alert, global.commonErrorState, global.loadingIndicator, global.modal, global.i1$2));
})(this, (function (exports, i0, i1, i1$1, rxjs, operators, i2, i3, i4, i5, i6, i7, i8, alert, commonErrorState, loadingIndicator, modal, i1$2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var ChangePasswordFormComponent = /** @class */ (function () {
        function ChangePasswordFormComponent(formBuilder, userDataService) {
            var _this = this;
            this.formBuilder = formBuilder;
            this.userDataService = userDataService;
            this.close = new i0.EventEmitter();
            this.passwordChange = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.hostRef = this;
            this.isSubmitted = false;
            this.componentDestroyed = new rxjs.Subject();
            this.isSubmitting = false;
            this.isPasswordUnique = function () {
                if (_this.passwordForm) {
                    var match = _this.form.controls.inputNewPassword.value === _this.form.controls.currentPassword.value;
                    // eslint-disable-next-line no-null/no-null
                    return match && _this.form.controls.inputNewPassword.value ? { usedPassword: true } : null;
                }
                return false;
            };
            this.passwordMatchesValidator = function () {
                if (_this.passwordForm) {
                    var match = _this.form.controls.inputNewPassword.value === _this.form.controls.confirmNewPassword.value;
                    // eslint-disable-next-line no-null/no-null
                    return match ? null : { mismatched: true };
                }
                return false;
            };
        }
        ChangePasswordFormComponent.prototype.ngOnDestroy = function () {
            this.componentDestroyed.next();
            this.componentDestroyed.complete();
        };
        ChangePasswordFormComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.passwordForm = this.formBuilder.group({
                currentPassword: ['', i1.Validators.required],
                inputNewPassword: ['', [i1.Validators.required, this.isPasswordUnique]],
                confirmNewPassword: ['', [i1.Validators.required, this.passwordMatchesValidator]],
            });
            this.form.controls.currentPassword.valueChanges
                .pipe(operators.distinctUntilChanged(), operators.takeUntil(this.componentDestroyed))
                .subscribe(function () {
                _this.form.controls.inputNewPassword.updateValueAndValidity();
            });
            this.form.controls.inputNewPassword.valueChanges
                .pipe(operators.distinctUntilChanged(), operators.takeUntil(this.componentDestroyed))
                .subscribe(function () {
                _this.form.controls.confirmNewPassword.updateValueAndValidity();
            });
        };
        ChangePasswordFormComponent.prototype.showErrors = function (control) {
            return control.invalid && this.isSubmitted;
        };
        ChangePasswordFormComponent.prototype.closePasswordModal = function () {
            this.form.reset();
            this.close.emit();
        };
        ChangePasswordFormComponent.prototype.onSubmit = function () {
            var _this = this;
            this.isSubmitted = true;
            if (!this.form.valid) {
                return;
            }
            var currentPassword = this.form.controls.currentPassword.value;
            var newPassword = this.form.controls.confirmNewPassword.value;
            this.isSubmitting = true;
            this.userDataService.changeUserPassword(currentPassword, newPassword).pipe(operators.tap(function () { return _this.passwordChange.emit(); }), operators.catchError(function (error) {
                _this.handleError(error);
                return rxjs.of(undefined);
            }), operators.tap(function () {
                _this.isSubmitting = false;
                _this.closePasswordModal();
                _this.form.enable({ emitEvent: false });
            }), operators.publish()).connect();
        };
        ChangePasswordFormComponent.prototype.handleError = function (error) {
            this.error.emit(error);
        };
        Object.defineProperty(ChangePasswordFormComponent.prototype, "form", {
            get: function () {
                if (!this.passwordForm) {
                    throw new Error('Form is undefined.');
                }
                return this.passwordForm;
            },
            enumerable: false,
            configurable: true
        });
        return ChangePasswordFormComponent;
    }());
    ChangePasswordFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ChangePasswordFormComponent, deps: [{ token: i1__namespace.FormBuilder }, { token: i2__namespace.UserDataService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ChangePasswordFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ChangePasswordFormComponent, selector: "bb-user-identity-security-center-widget-change-password-form", outputs: { close: "close", passwordChange: "passwordChange", error: "error" }, viewQueries: [{ propertyName: "notificationSuccessTemplate", first: true, predicate: ["notificationSuccess"], descendants: true, static: true }, { propertyName: "notificationFailureTemplate", first: true, predicate: ["notificationFailure"], descendants: true, static: true }, { propertyName: "notificationFailureTemplateLogin", first: true, predicate: ["notificationFailureLogin"], descendants: true }], ngImport: i0__namespace, template: "<ng-container bbUserIdentitySecurityCenterChangePasswordForm [bbHostRef]=\"hostRef\">\n</ng-container>  \n  \n<ng-template bbUserIdentitySecurityCenterChangePasswordForm let-hostRef>\n  <div *ngIf=\"hostRef.form\">\n    <div class=\"bb-block bb-block--lg\">\n      <bb-header-ui\n        headingType=\"h3\"\n        heading=\"Change Password\"\n        i18n-heading=\"Header for changing a users password@@bb-user-identity-security-center-widget.bb-header-ui\">\n      </bb-header-ui>\n    </div>\n    <div class=\"bb-block bb-block--lg\"\n      i18n=\"Label for current password description@@bb-user-identity-security-center-widget.current-password-description\">\n      To change your password, we must verify your current one first.\n    </div>\n\n    <form [formGroup]=\"hostRef.form\" (submit)=\"hostRef.onSubmit()\">\n      <div data-role=\"identity-security-center-change-password-form\">\n        <div class=\"bb-block bb-block--xl\">\n          <bb-input-password-ui\n            class=\"bb-form-field bb-form-field--md\"\n            label=\"Current password\"\n            i18n-label=\"Current password input label|Label text for current password input@@bb-user-identity-security-center-widget.current-password-input-label\"\n            formControlName=\"currentPassword\"\n            [autofocus]=\"true\" \n            maxLength=\"255\"\n            data-role=\"identity-security-center-current-password-input\">\n          </bb-input-password-ui>\n          <bb-input-validation-message-ui\n            [showErrors]=\"hostRef.showErrors(hostRef.form.controls.currentPassword)\">\n            <span *ngIf=\"hostRef.form.controls.currentPassword.errors?.required\"\n              data-role=\"identity-security-center-current-password-error\"\n              i18n=\"Error message for blank current password field|Error message requiring password for current password field@@bb-user-identity-security-center-widget.current-password-blank-error-message\">\n              You must enter your current password\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n\n        <ng-container bbUserIdentitySecurityCenterWidgetPasswordPolicyCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n        <div class=\"form-group\">\n          <bb-input-password-ui\n            class=\"bb-form-field bb-form-field--md\"\n            label=\"New password\"\n            formControlName=\"inputNewPassword\"\n            maxLength=\"255\"\n            data-role=\"identity-security-center-new-password-input\"\n            i18n-label=\"New password input label|Label text for new password input@@bb-user-identity-security-center-widget.new-password-input-label\">\n          </bb-input-password-ui>\n          <bb-input-validation-message-ui\n            [showErrors]=\"hostRef.showErrors(hostRef.form.controls.inputNewPassword)\">\n            <span *ngIf=\"hostRef.form.controls.inputNewPassword.errors?.required\"\n              data-role=\"identity-security-center-new-password-error\"\n              i18n=\"Error message for blank new password field|Error message requiring password for new password field@@bb-user-identity-security-center-widget.new-password-blank-error-message\">\n              You must enter a new password\n            </span>\n            <span *ngIf=\"hostRef.form.controls.inputNewPassword.errors?.usedPassword\"\n              data-role=\"identity-security-center-old-password-error\"\n              i18n=\"Error message for current password matching new password field|Error message requiring unique password for new password field@@bb-user-identity-security-center-widget.new-password-unique-error-message\">\n              New password must be different to current password \n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n\n        <div class=\"bb-block bb-block--lg\">\n          <bb-input-password-ui\n            class=\"bb-form-field bb-form-field--md\"\n            label=\"Confirm new password\"\n            formControlName=\"confirmNewPassword\"\n            maxLength=\"255\"\n            data-role=\"identity-security-center-confirm-password-input\"\n            i18n-label=\"Confirm password input label|Label text for confirm password input@@bb-user-identity-security-center-widget.confirm-password-input-label\">\n          </bb-input-password-ui>\n          <bb-input-validation-message-ui\n            [showErrors]=\"hostRef.showErrors(hostRef.form.controls.confirmNewPassword)\">\n            <span *ngIf=\"hostRef.form.controls.confirmNewPassword.errors?.mismatched\"\n              data-role=\"identity-security-center-confirm-password-mismatch-error\"\n              i18n=\"Error message for mismatch passwords|Error message for mismatch passwords for confirm new password field@@bb-user-identity-security-center-widget.confirm-password-mismatch-error-message\">\n              Passwords don't match\n            </span>\n            <span *ngIf=\"hostRef.form.controls.confirmNewPassword.errors?.required\"\n              data-role=\"identity-security-center-confirm-password-blank-error\"\n              i18n=\"Error message for blank password|Error message for blank password for confirm new password field@@bb-user-identity-security-center-widget.confirm-password-blank-error-message\">\n              You must re-type your new password\n            </span>\n          </bb-input-validation-message-ui> \n        </div>\n      </div>\n      <div class=\"bb-button-bar--reverse\">\n        <bb-load-button-ui\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          button-size=\"md\" \n          data-role=\"password-form-change-password-button\"\n          type=\"submit\"\n          i18n=\"Change password button|Text for change password button@@bb-user-identity-security-center-widget.change-password-button-text\"\n          [isLoading]=\"hostRef.isSubmitting\">\n          Change Password\n        </bb-load-button-ui>\n        <button bbButton\n          class=\"bb-button-bar__button\"\n          color=\"secondary\"\n          button-size=\"md\" \n          data-role=\"identity-security-center-cancel-button\"\n          (click)=\"hostRef.closePasswordModal()\" \n          (mousedown)=\"hostRef.closePasswordModal()\" \n          type=\"button\"\n          i18n=\"Cancel password button|Text for cancel password button@@bb-user-identity-security-center-widget.cancel-password-button-text\">\n          Cancel\n        </button>\n      </div>\n    </form> \n  </div>\n</ng-template>\n\n\n<ng-template bbUserIdentitySecurityCenterWidgetPasswordPolicyCustomizable let-hostRef>\n  <div class=\"bb-block bb-block--lg\">\n    <div\n      class=\"bb-block bb-block--lg\"\n      i18n=\"Text for password form description@@bb-user-identity-security-center-widget.password-form-text\">\n      Your new password must contain:\n    </div>\n    <ul>\n      <li\n        i18n=\"Text for minimum length password policy bullet point@bb-user-identity-security-center-widget.password-form-policy-length\">\n        A minimum of 6 characters\n      </li>\n      <li\n        i18n=\"Text for uppercase password policy bullet point@bb-user-identity-security-center-widget.password-form-policy-uppercase\">\n        At least one UPPERCASE letter\n      </li>\n      <li\n        i18n=\"Text for lowercase password policy bullet point@bb-user-identity-security-center-widget.password-form-policy-lowecase\">\n        At least one lowercase letter\n      </li>\n    </ul>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i3__namespace.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.InputPasswordComponent; }), selector: "bb-input-password-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete", "showVisibilityControl", "showPassword", "visibilityControlLabel", "ariaLabel"], outputs: ["toggleVisibility"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i0__namespace.forwardRef(function () { return UserIdentitySecurityCenterPasswordFormCustomizableDirective; }), selector: "[bbUserIdentitySecurityCenterChangePasswordForm]" }, { type: i0__namespace.forwardRef(function () { return i7__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0__namespace.forwardRef(function () { return UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective; }), selector: "[bbUserIdentitySecurityCenterWidgetPasswordPolicyCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i8__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ChangePasswordFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-user-identity-security-center-widget-change-password-form',
                        templateUrl: './change-password-form.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.FormBuilder }, { type: i2__namespace.UserDataService }]; }, propDecorators: { notificationSuccessTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationSuccess', { static: true }]
                }], notificationFailureTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationFailure', { static: true }]
                }], notificationFailureTemplateLogin: [{
                    type: i0.ViewChild,
                    args: ['notificationFailureLogin']
                }], close: [{
                    type: i0.Output
                }], passwordChange: [{
                    type: i0.Output
                }], error: [{
                    type: i0.Output
                }] } });
    var UserIdentitySecurityCenterPasswordFormCustomizableDirective = /** @class */ (function (_super) {
        __extends(UserIdentitySecurityCenterPasswordFormCustomizableDirective, _super);
        function UserIdentitySecurityCenterPasswordFormCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return UserIdentitySecurityCenterPasswordFormCustomizableDirective;
    }(i1$1.BbTemplate));
    UserIdentitySecurityCenterPasswordFormCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserIdentitySecurityCenterPasswordFormCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    UserIdentitySecurityCenterPasswordFormCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: UserIdentitySecurityCenterPasswordFormCustomizableDirective, selector: "[bbUserIdentitySecurityCenterChangePasswordForm]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserIdentitySecurityCenterPasswordFormCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbUserIdentitySecurityCenterChangePasswordForm]',
                    }]
            }] });
    var UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective = /** @class */ (function (_super) {
        __extends(UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective, _super);
        function UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective;
    }(i1$1.BbTemplate));
    UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective, selector: "[bbUserIdentitySecurityCenterWidgetPasswordPolicyCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbUserIdentitySecurityCenterWidgetPasswordPolicyCustomizable]',
                    }]
            }] });

    var passwordForm = [
        ChangePasswordFormComponent,
        UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective,
        UserIdentitySecurityCenterPasswordFormCustomizableDirective,
    ];
    var uiModules$1 = [
        alert.AlertModule,
        i8.ButtonModule,
        commonErrorState.ErrorCommonStateModule,
        i3.HeaderModule,
        loadingIndicator.LoadingIndicatorModule,
        modal.ModalModule,
        i4.InputPasswordModule,
        i5.InputValidationMessageModule,
        i1.ReactiveFormsModule,
        i6.LoadButtonModule,
    ];
    var ChangePasswordFormModule = /** @class */ (function () {
        function ChangePasswordFormModule() {
        }
        return ChangePasswordFormModule;
    }());
    ChangePasswordFormModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ChangePasswordFormModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ChangePasswordFormModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ChangePasswordFormModule, declarations: [ChangePasswordFormComponent,
            UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective,
            UserIdentitySecurityCenterPasswordFormCustomizableDirective], imports: [i7.CommonModule, i1__namespace$1.BackbaseCoreModule, alert.AlertModule,
            i8.ButtonModule,
            commonErrorState.ErrorCommonStateModule,
            i3.HeaderModule,
            loadingIndicator.LoadingIndicatorModule,
            modal.ModalModule,
            i4.InputPasswordModule,
            i5.InputValidationMessageModule,
            i1.ReactiveFormsModule,
            i6.LoadButtonModule], exports: [alert.AlertModule,
            i8.ButtonModule,
            commonErrorState.ErrorCommonStateModule,
            i3.HeaderModule,
            loadingIndicator.LoadingIndicatorModule,
            modal.ModalModule,
            i4.InputPasswordModule,
            i5.InputValidationMessageModule,
            i1.ReactiveFormsModule,
            i6.LoadButtonModule, ChangePasswordFormComponent,
            UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective,
            UserIdentitySecurityCenterPasswordFormCustomizableDirective] });
    ChangePasswordFormModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ChangePasswordFormModule, imports: [__spreadArray([
                i7.CommonModule,
                i1$1.BackbaseCoreModule.withConfig({
                    classMap: { ChangePasswordFormComponent: ChangePasswordFormComponent },
                })
            ], __read(uiModules$1)), alert.AlertModule,
            i8.ButtonModule,
            commonErrorState.ErrorCommonStateModule,
            i3.HeaderModule,
            loadingIndicator.LoadingIndicatorModule,
            modal.ModalModule,
            i4.InputPasswordModule,
            i5.InputValidationMessageModule,
            i1.ReactiveFormsModule,
            i6.LoadButtonModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ChangePasswordFormModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray([
                            i7.CommonModule,
                            i1$1.BackbaseCoreModule.withConfig({
                                classMap: { ChangePasswordFormComponent: ChangePasswordFormComponent },
                            })
                        ], __read(uiModules$1)),
                        declarations: __spreadArray([], __read(passwordForm)),
                        exports: __spreadArray(__spreadArray([], __read(uiModules$1)), __read(passwordForm)),
                    }]
            }] });

    exports.UserIdentitySecurityCenterActionType = void 0;
    (function (UserIdentitySecurityCenterActionType) {
        UserIdentitySecurityCenterActionType["PasswordChanged"] = "[UserIdentitySecurityCenterWidget] User password changed";
        UserIdentitySecurityCenterActionType["PasswordChangeFailed"] = "[UserIdentitySecurityCenterWidget] User password change failed";
    })(exports.UserIdentitySecurityCenterActionType || (exports.UserIdentitySecurityCenterActionType = {}));

    var UserIdentitySecurityCenterWidgetComponent = /** @class */ (function () {
        function UserIdentitySecurityCenterWidgetComponent(notificationService, manageProfilePreferencesService) {
            this.notificationService = notificationService;
            this.manageProfilePreferencesService = manageProfilePreferencesService;
            this.hostRef = this;
            this.openPassword = false;
            this.widgetStatus = new i0.EventEmitter();
        }
        UserIdentitySecurityCenterWidgetComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.notificationDismissTime) {
                this.notificationDelay = this.notificationDismissTime * 1000;
            }
            else {
                this.manageProfilePreferencesService
                    .getNotificationDismissTimePreference()
                    .pipe(operators.first())
                    .subscribe(function (time) { return (_this.notificationDelay = time * 1000); });
            }
        };
        UserIdentitySecurityCenterWidgetComponent.prototype.toggleChangePassword = function () {
            this.openPassword = !this.openPassword;
        };
        UserIdentitySecurityCenterWidgetComponent.prototype.emitPasswordChanged = function () {
            this.showNotification(this.notificationSuccessTemplate, 'success');
            this.widgetStatus.emit({
                type: exports.UserIdentitySecurityCenterActionType.PasswordChanged,
            });
        };
        UserIdentitySecurityCenterWidgetComponent.prototype.emitError = function (error) {
            if (error.status === 400) {
                this.showNotification(this.notificationFailureTemplateLogin, 'error');
            }
            else {
                this.showNotification(this.notificationFailureTemplate, 'error');
            }
            this.widgetStatus.emit({
                type: exports.UserIdentitySecurityCenterActionType.PasswordChangeFailed,
            });
        };
        UserIdentitySecurityCenterWidgetComponent.prototype.showNotification = function (template, type) {
            this.notificationService.showNotification({
                message: template,
                modifier: type,
                ttl: this.notificationDelay,
            });
        };
        return UserIdentitySecurityCenterWidgetComponent;
    }());
    UserIdentitySecurityCenterWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserIdentitySecurityCenterWidgetComponent, deps: [{ token: i1__namespace$2.NotificationService }, { token: i2__namespace.ManageProfilePreferencesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UserIdentitySecurityCenterWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: UserIdentitySecurityCenterWidgetComponent, selector: "bb-user-identity-security-center-widget", inputs: { notificationDismissTime: "notificationDismissTime" }, outputs: { widgetStatus: "widgetStatus" }, providers: [i2.ManageProfilePreferencesService, i2.UserDataService], viewQueries: [{ propertyName: "notificationSuccessTemplate", first: true, predicate: ["notificationSuccess"], descendants: true, static: true }, { propertyName: "notificationFailureTemplate", first: true, predicate: ["notificationFailure"], descendants: true, static: true }, { propertyName: "notificationFailureTemplateLogin", first: true, predicate: ["notificationFailureLogin"], descendants: true }], ngImport: i0__namespace, template: "<ng-container bbUserIdentitySecurityCenterWidgetCustomizable\n  [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbUserIdentitySecurityCenterWidgetCustomizable\n  let-hostRef>\n  <div class=\"card\">\n    <div class=\"card-header\">\n      <bb-header-ui\n        headingType=\"h2\"\n        heading=\"Security Settings\"\n        i18n-heading=\"Header for changing a users password@@bb-user-identity-security-center-widget.bb-header-ui\">\n      </bb-header-ui>\n    </div>\n    <ng-container *ngIf=\"!hostRef.openPassword; else passwordForm\">\n      <div class=\"card-section\">\n        <div class=\"bb-stack\">\n          <strong class=\"bb-stack__item bb-stack__item--fill\"\n            i18n=\"Password list item label text@@bb-user-identity-security-center-widget.home-password-label\">\n            Password\n          </strong>\n          <div class=\"bb-stack__item\">\n            <button bbButton\n              color=\"link\"\n              buttonSize=\"md\"\n              type=\"submit\"\n              data-role=\"identity-security-center-password-change-button\"\n              aria-label=\"Change My Password\"\n              i18n-aria-label=\"Password change button aria label@@bb-user-identity-security-center-widget.change-button-aria-label\"\n              i18n=\"Password change button text@@bb-user-identity-security-center-widget.change-button-text\"\n              (click)=\"hostRef.toggleChangePassword()\">\n              Change\n            </button>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n\n  <ng-template #passwordForm>\n    <div class=\"card-section card-section--highlight\">\n      <bb-user-identity-security-center-widget-change-password-form\n        (close)=\"hostRef.toggleChangePassword()\"\n        (passwordChange)=\"hostRef.emitPasswordChanged()\"\n        (error)=\"hostRef.emitError($event)\">\n      </bb-user-identity-security-center-widget-change-password-form>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationSuccess>\n  <span \n    data-role=\"user-change-password-success-notification\"\n    i18n=\"Password Reset Success Notification|Notification text for when password reset request is successful@@bb-user-identity-security-center-widget.notification.success\">\n    Password update successful.\n  </span>\n</ng-template>\n\n<ng-template #notificationFailure>\n  <span \n    data-role=\"user-change-password-failure-notification\"\n    i18n=\"Password Reset Failure Notification|Notification text for when password reset request is unsuccessful@@bb-user-identity-security-center-widget.notification.failure\">\n    Could not update password.\n  </span>\n</ng-template>\n\n<ng-template #notificationFailureLogin>\n  <span \n    data-role=\"user-change-password-login-failure-notification\"\n    i18n=\"Password Reset Failure Notification|Notification text for when password reset request is unsuccessful@@bb-user-identity-security-center-widget.notification.failure\">\n    Could not update password. Incorrect login credentials or password policy not met.  \n  </span>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i3__namespace.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0__namespace.forwardRef(function () { return ChangePasswordFormComponent; }), selector: "bb-user-identity-security-center-widget-change-password-form", outputs: ["close", "passwordChange", "error"] }], directives: [{ type: i0__namespace.forwardRef(function () { return UserIdentitySecurityCenterCustomizableDirective; }), selector: "[bbUserIdentitySecurityCenterWidgetCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i7__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserIdentitySecurityCenterWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-user-identity-security-center-widget',
                        templateUrl: './user-identity-security-center-widget.component.html',
                        providers: [i2.ManageProfilePreferencesService, i2.UserDataService],
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.NotificationService }, { type: i2__namespace.ManageProfilePreferencesService }]; }, propDecorators: { notificationSuccessTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationSuccess', { static: true }]
                }], notificationFailureTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationFailure', { static: true }]
                }], notificationFailureTemplateLogin: [{
                    type: i0.ViewChild,
                    args: ['notificationFailureLogin']
                }], widgetStatus: [{
                    type: i0.Output
                }], notificationDismissTime: [{
                    type: i0.Input
                }] } });
    var UserIdentitySecurityCenterCustomizableDirective = /** @class */ (function (_super) {
        __extends(UserIdentitySecurityCenterCustomizableDirective, _super);
        function UserIdentitySecurityCenterCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return UserIdentitySecurityCenterCustomizableDirective;
    }(i1$1.BbTemplate));
    UserIdentitySecurityCenterCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserIdentitySecurityCenterCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    UserIdentitySecurityCenterCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: UserIdentitySecurityCenterCustomizableDirective, selector: "[bbUserIdentitySecurityCenterWidgetCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserIdentitySecurityCenterCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbUserIdentitySecurityCenterWidgetCustomizable]',
                    }]
            }] });

    var uiModules = [
        alert.AlertModule,
        i8.ButtonModule,
        commonErrorState.ErrorCommonStateModule,
        i3.HeaderModule,
        loadingIndicator.LoadingIndicatorModule,
        modal.ModalModule,
        i4.InputPasswordModule,
        i5.InputValidationMessageModule,
        i1.ReactiveFormsModule,
    ];
    var widgetModules = [ChangePasswordFormModule];
    var UserIdentitySecurityCenterWidgetModule = /** @class */ (function () {
        function UserIdentitySecurityCenterWidgetModule() {
        }
        return UserIdentitySecurityCenterWidgetModule;
    }());
    UserIdentitySecurityCenterWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserIdentitySecurityCenterWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UserIdentitySecurityCenterWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserIdentitySecurityCenterWidgetModule, declarations: [UserIdentitySecurityCenterWidgetComponent, UserIdentitySecurityCenterCustomizableDirective], imports: [i7.CommonModule, i1__namespace$1.BackbaseCoreModule, i2.UserCommonModule, alert.AlertModule,
            i8.ButtonModule,
            commonErrorState.ErrorCommonStateModule,
            i3.HeaderModule,
            loadingIndicator.LoadingIndicatorModule,
            modal.ModalModule,
            i4.InputPasswordModule,
            i5.InputValidationMessageModule,
            i1.ReactiveFormsModule, ChangePasswordFormModule], exports: [UserIdentitySecurityCenterWidgetComponent,
            UserIdentitySecurityCenterCustomizableDirective, alert.AlertModule,
            i8.ButtonModule,
            commonErrorState.ErrorCommonStateModule,
            i3.HeaderModule,
            loadingIndicator.LoadingIndicatorModule,
            modal.ModalModule,
            i4.InputPasswordModule,
            i5.InputValidationMessageModule,
            i1.ReactiveFormsModule, ChangePasswordFormModule] });
    UserIdentitySecurityCenterWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserIdentitySecurityCenterWidgetModule, imports: [__spreadArray(__spreadArray([
                i7.CommonModule,
                i1$1.BackbaseCoreModule.withConfig({
                    classMap: { UserIdentitySecurityCenterWidgetComponent: UserIdentitySecurityCenterWidgetComponent },
                }),
                i2.UserCommonModule
            ], __read(uiModules)), __read(widgetModules)), alert.AlertModule,
            i8.ButtonModule,
            commonErrorState.ErrorCommonStateModule,
            i3.HeaderModule,
            loadingIndicator.LoadingIndicatorModule,
            modal.ModalModule,
            i4.InputPasswordModule,
            i5.InputValidationMessageModule,
            i1.ReactiveFormsModule, ChangePasswordFormModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserIdentitySecurityCenterWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray(__spreadArray([
                            i7.CommonModule,
                            i1$1.BackbaseCoreModule.withConfig({
                                classMap: { UserIdentitySecurityCenterWidgetComponent: UserIdentitySecurityCenterWidgetComponent },
                            }),
                            i2.UserCommonModule
                        ], __read(uiModules)), __read(widgetModules)),
                        declarations: [UserIdentitySecurityCenterWidgetComponent, UserIdentitySecurityCenterCustomizableDirective],
                        exports: __spreadArray(__spreadArray([
                            UserIdentitySecurityCenterWidgetComponent,
                            UserIdentitySecurityCenterCustomizableDirective
                        ], __read(uiModules)), __read(widgetModules)),
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ChangePasswordFormComponent = ChangePasswordFormComponent;
    exports.ChangePasswordFormModule = ChangePasswordFormModule;
    exports.UserIdentitySecurityCenterWidgetComponent = UserIdentitySecurityCenterWidgetComponent;
    exports.UserIdentitySecurityCenterWidgetModule = UserIdentitySecurityCenterWidgetModule;
    exports["ӨUserIdentitySecurityCenterCustomizableDirective"] = UserIdentitySecurityCenterCustomizableDirective;
    exports["ӨUserIdentitySecurityCenterPasswordFormCustomizableDirective"] = UserIdentitySecurityCenterPasswordFormCustomizableDirective;
    exports["ӨUserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective"] = UserIdentitySecurityCenterPasswordFormPasswordPolicyCustomizableDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-user-identity-security-center-widget-ang.umd.js.map
