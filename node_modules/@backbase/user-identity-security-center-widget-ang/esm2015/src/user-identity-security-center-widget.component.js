import { Component, Directive, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { ManageProfilePreferencesService, UserDataService } from '@backbase/user-common';
import { first } from 'rxjs/operators';
import { UserIdentitySecurityCenterActionType, } from './types/user-identity-security-center-widget.type';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/notification";
import * as i2 from "@backbase/user-common";
import * as i3 from "@backbase/ui-ang/header";
import * as i4 from "./change-password-form/change-password-form.component";
import * as i5 from "@angular/common";
import * as i6 from "@backbase/ui-ang/button";
export class UserIdentitySecurityCenterWidgetComponent {
    constructor(notificationService, manageProfilePreferencesService) {
        this.notificationService = notificationService;
        this.manageProfilePreferencesService = manageProfilePreferencesService;
        this.hostRef = this;
        this.openPassword = false;
        this.widgetStatus = new EventEmitter();
    }
    ngOnInit() {
        if (this.notificationDismissTime) {
            this.notificationDelay = this.notificationDismissTime * 1000;
        }
        else {
            this.manageProfilePreferencesService
                .getNotificationDismissTimePreference()
                .pipe(first())
                .subscribe((time) => (this.notificationDelay = time * 1000));
        }
    }
    toggleChangePassword() {
        this.openPassword = !this.openPassword;
    }
    emitPasswordChanged() {
        this.showNotification(this.notificationSuccessTemplate, 'success');
        this.widgetStatus.emit({
            type: UserIdentitySecurityCenterActionType.PasswordChanged,
        });
    }
    emitError(error) {
        if (error.status === 400) {
            this.showNotification(this.notificationFailureTemplateLogin, 'error');
        }
        else {
            this.showNotification(this.notificationFailureTemplate, 'error');
        }
        this.widgetStatus.emit({
            type: UserIdentitySecurityCenterActionType.PasswordChangeFailed,
        });
    }
    showNotification(template, type) {
        this.notificationService.showNotification({
            message: template,
            modifier: type,
            ttl: this.notificationDelay,
        });
    }
}
UserIdentitySecurityCenterWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserIdentitySecurityCenterWidgetComponent, deps: [{ token: i1.NotificationService }, { token: i2.ManageProfilePreferencesService }], target: i0.ɵɵFactoryTarget.Component });
UserIdentitySecurityCenterWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: UserIdentitySecurityCenterWidgetComponent, selector: "bb-user-identity-security-center-widget", inputs: { notificationDismissTime: "notificationDismissTime" }, outputs: { widgetStatus: "widgetStatus" }, providers: [ManageProfilePreferencesService, UserDataService], viewQueries: [{ propertyName: "notificationSuccessTemplate", first: true, predicate: ["notificationSuccess"], descendants: true, static: true }, { propertyName: "notificationFailureTemplate", first: true, predicate: ["notificationFailure"], descendants: true, static: true }, { propertyName: "notificationFailureTemplateLogin", first: true, predicate: ["notificationFailureLogin"], descendants: true }], ngImport: i0, template: "<ng-container bbUserIdentitySecurityCenterWidgetCustomizable\n  [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbUserIdentitySecurityCenterWidgetCustomizable\n  let-hostRef>\n  <div class=\"card\">\n    <div class=\"card-header\">\n      <bb-header-ui\n        headingType=\"h2\"\n        heading=\"Security Settings\"\n        i18n-heading=\"Header for changing a users password@@bb-user-identity-security-center-widget.bb-header-ui\">\n      </bb-header-ui>\n    </div>\n    <ng-container *ngIf=\"!hostRef.openPassword; else passwordForm\">\n      <div class=\"card-section\">\n        <div class=\"bb-stack\">\n          <strong class=\"bb-stack__item bb-stack__item--fill\"\n            i18n=\"Password list item label text@@bb-user-identity-security-center-widget.home-password-label\">\n            Password\n          </strong>\n          <div class=\"bb-stack__item\">\n            <button bbButton\n              color=\"link\"\n              buttonSize=\"md\"\n              type=\"submit\"\n              data-role=\"identity-security-center-password-change-button\"\n              aria-label=\"Change My Password\"\n              i18n-aria-label=\"Password change button aria label@@bb-user-identity-security-center-widget.change-button-aria-label\"\n              i18n=\"Password change button text@@bb-user-identity-security-center-widget.change-button-text\"\n              (click)=\"hostRef.toggleChangePassword()\">\n              Change\n            </button>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n\n  <ng-template #passwordForm>\n    <div class=\"card-section card-section--highlight\">\n      <bb-user-identity-security-center-widget-change-password-form\n        (close)=\"hostRef.toggleChangePassword()\"\n        (passwordChange)=\"hostRef.emitPasswordChanged()\"\n        (error)=\"hostRef.emitError($event)\">\n      </bb-user-identity-security-center-widget-change-password-form>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationSuccess>\n  <span \n    data-role=\"user-change-password-success-notification\"\n    i18n=\"Password Reset Success Notification|Notification text for when password reset request is successful@@bb-user-identity-security-center-widget.notification.success\">\n    Password update successful.\n  </span>\n</ng-template>\n\n<ng-template #notificationFailure>\n  <span \n    data-role=\"user-change-password-failure-notification\"\n    i18n=\"Password Reset Failure Notification|Notification text for when password reset request is unsuccessful@@bb-user-identity-security-center-widget.notification.failure\">\n    Could not update password.\n  </span>\n</ng-template>\n\n<ng-template #notificationFailureLogin>\n  <span \n    data-role=\"user-change-password-login-failure-notification\"\n    i18n=\"Password Reset Failure Notification|Notification text for when password reset request is unsuccessful@@bb-user-identity-security-center-widget.notification.failure\">\n    Could not update password. Incorrect login credentials or password policy not met.  \n  </span>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i3.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i4.ChangePasswordFormComponent; }), selector: "bb-user-identity-security-center-widget-change-password-form", outputs: ["close", "passwordChange", "error"] }], directives: [{ type: i0.forwardRef(function () { return UserIdentitySecurityCenterCustomizableDirective; }), selector: "[bbUserIdentitySecurityCenterWidgetCustomizable]" }, { type: i0.forwardRef(function () { return i5.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i6.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserIdentitySecurityCenterWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-identity-security-center-widget',
                    templateUrl: './user-identity-security-center-widget.component.html',
                    providers: [ManageProfilePreferencesService, UserDataService],
                }]
        }], ctorParameters: function () { return [{ type: i1.NotificationService }, { type: i2.ManageProfilePreferencesService }]; }, propDecorators: { notificationSuccessTemplate: [{
                type: ViewChild,
                args: ['notificationSuccess', { static: true }]
            }], notificationFailureTemplate: [{
                type: ViewChild,
                args: ['notificationFailure', { static: true }]
            }], notificationFailureTemplateLogin: [{
                type: ViewChild,
                args: ['notificationFailureLogin']
            }], widgetStatus: [{
                type: Output
            }], notificationDismissTime: [{
                type: Input
            }] } });
export class UserIdentitySecurityCenterCustomizableDirective extends BbTemplate {
}
UserIdentitySecurityCenterCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserIdentitySecurityCenterCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
UserIdentitySecurityCenterCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: UserIdentitySecurityCenterCustomizableDirective, selector: "[bbUserIdentitySecurityCenterWidgetCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserIdentitySecurityCenterCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbUserIdentitySecurityCenterWidgetCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,