import { createMocks } from '@backbase/foundation-ang/data-http';
export const ServiceAgreementsServiceGetServiceAgreementsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/employee/users/{userId}/service-agreements",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "serviceAgreements": [{
                            "name": "SA Name 1",
                            "id": "8b4fc047-c98a-4e58-975a-6d3f2bde4ebe",
                            "master": true,
                            "description": "SA 1 Description"
                        }, {
                            "name": "SA Name 2",
                            "id": "8b4fc047-c98a-4e58-975a-6d3f222de4ebe",
                            "master": true
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
export const ServiceAgreementsServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/employee/users/{userId}/service-agreements",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "serviceAgreements": [{
                            "name": "SA Name 1",
                            "id": "8b4fc047-c98a-4e58-975a-6d3f2bde4ebe",
                            "master": true,
                            "description": "SA 1 Description"
                        }, {
                            "name": "SA Name 2",
                            "id": "8b4fc047-c98a-4e58-975a-6d3f222de4ebe",
                            "master": true
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZUFncmVlbWVudHMuc2VydmljZS5tb2Nrcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwaS9zZXJ2aWNlQWdyZWVtZW50cy5zZXJ2aWNlLm1vY2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQU1qRSxNQUFNLENBQUMsTUFBTSx5REFBeUQsR0FBYSxXQUFXLENBQUMsQ0FBQztRQUN4RixVQUFVLEVBQUUsMkRBQTJEO1FBQ3ZFLE1BQU0sRUFBRSxLQUFLO1FBQ2IsU0FBUyxFQUFFO1lBQ0g7Z0JBQ0ksTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsSUFBSSxFQUFFO29CQUN4QixtQkFBbUIsRUFBRyxDQUFFOzRCQUN0QixNQUFNLEVBQUcsV0FBVzs0QkFDcEIsSUFBSSxFQUFHLHNDQUFzQzs0QkFDN0MsUUFBUSxFQUFHLElBQUk7NEJBQ2YsYUFBYSxFQUFHLGtCQUFrQjt5QkFDbkMsRUFBRTs0QkFDRCxNQUFNLEVBQUcsV0FBVzs0QkFDcEIsSUFBSSxFQUFHLHVDQUF1Qzs0QkFDOUMsUUFBUSxFQUFHLElBQUk7eUJBQ2hCLENBQUU7aUJBQ0o7YUFDZ0I7WUFDRDtnQkFDSSxNQUFNLEVBQUUsR0FBRztnQkFDWCxJQUFJLEVBQUU7b0JBQ3hCLFNBQVMsRUFBRyxhQUFhO29CQUN6QixRQUFRLEVBQUcsQ0FBRTs0QkFDWCxTQUFTLEVBQUcsa0RBQWtEOzRCQUM5RCxLQUFLLEVBQUcscUJBQXFCOzRCQUM3QixTQUFTLEVBQUc7Z0NBQ1YsS0FBSyxFQUFHLElBQUk7Z0NBQ1osS0FBSyxFQUFHLEdBQUc7NkJBQ1o7eUJBQ0YsQ0FBRTtpQkFDSjthQUNnQjtZQUNEO2dCQUNJLE1BQU0sRUFBRSxHQUFHO2dCQUNYLElBQUksRUFBRTtvQkFDeEIsU0FBUyxFQUFHLHNDQUFzQztvQkFDbEQsUUFBUSxFQUFHLENBQUU7NEJBQ1gsU0FBUyxFQUFHLHNFQUFzRTs0QkFDbEYsS0FBSyxFQUFHLGtCQUFrQjs0QkFDMUIsU0FBUyxFQUFHO2dDQUNWLE9BQU8sRUFBRyxXQUFXOzZCQUN0Qjt5QkFDRixDQUFFO2lCQUNKO2FBQ2dCO1NBQ1o7S0FDSixDQUFDLENBQUMsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLHFDQUFxQyxHQUFhLFdBQVcsQ0FDdEU7SUFDQTtRQUNJLFVBQVUsRUFBRSwyREFBMkQ7UUFDdkUsTUFBTSxFQUFFLEtBQUs7UUFDYixTQUFTLEVBQUU7WUFFUDtnQkFDSSxNQUFNLEVBQUUsR0FBRztnQkFDWCxJQUFJLEVBQUU7b0JBQ3BCLG1CQUFtQixFQUFHLENBQUU7NEJBQ3RCLE1BQU0sRUFBRyxXQUFXOzRCQUNwQixJQUFJLEVBQUcsc0NBQXNDOzRCQUM3QyxRQUFRLEVBQUcsSUFBSTs0QkFDZixhQUFhLEVBQUcsa0JBQWtCO3lCQUNuQyxFQUFFOzRCQUNELE1BQU0sRUFBRyxXQUFXOzRCQUNwQixJQUFJLEVBQUcsdUNBQXVDOzRCQUM5QyxRQUFRLEVBQUcsSUFBSTt5QkFDaEIsQ0FBRTtpQkFDSjthQUNZO1lBRUQ7Z0JBQ0ksTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsSUFBSSxFQUFFO29CQUNwQixTQUFTLEVBQUcsYUFBYTtvQkFDekIsUUFBUSxFQUFHLENBQUU7NEJBQ1gsU0FBUyxFQUFHLGtEQUFrRDs0QkFDOUQsS0FBSyxFQUFHLHFCQUFxQjs0QkFDN0IsU0FBUyxFQUFHO2dDQUNWLEtBQUssRUFBRyxJQUFJO2dDQUNaLEtBQUssRUFBRyxHQUFHOzZCQUNaO3lCQUNGLENBQUU7aUJBQ0o7YUFDWTtZQUVEO2dCQUNJLE1BQU0sRUFBRSxHQUFHO2dCQUNYLElBQUksRUFBRTtvQkFDcEIsU0FBUyxFQUFHLHNDQUFzQztvQkFDbEQsUUFBUSxFQUFHLENBQUU7NEJBQ1gsU0FBUyxFQUFHLHNFQUFzRTs0QkFDbEYsS0FBSyxFQUFHLGtCQUFrQjs0QkFDMUIsU0FBUyxFQUFHO2dDQUNWLE9BQU8sRUFBRyxXQUFXOzZCQUN0Qjt5QkFDRixDQUFFO2lCQUNKO2FBQ1k7U0FDUjtLQUNKO0NBQ0EsQ0FDQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlTW9ja3MgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvZGF0YS1odHRwJztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuKiBNb2NrcyBwcm92aWRlciBmb3IgL2NsaWVudC1hcGkvdjEvZW1wbG95ZWUvdXNlcnMve3VzZXJJZH0vc2VydmljZS1hZ3JlZW1lbnRzIFVSTCBwYXR0ZXJuXG4qL1xuZXhwb3J0IGNvbnN0IFNlcnZpY2VBZ3JlZW1lbnRzU2VydmljZUdldFNlcnZpY2VBZ3JlZW1lbnRzTW9ja3NQcm92aWRlcjogUHJvdmlkZXIgPSBjcmVhdGVNb2Nrcyhbe1xuICAgICAgICB1cmxQYXR0ZXJuOiBcIi9jbGllbnQtYXBpL3YxL2VtcGxveWVlL3VzZXJzL3t1c2VySWR9L3NlcnZpY2UtYWdyZWVtZW50c1wiLFxuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgIHJlc3BvbnNlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgXCJzZXJ2aWNlQWdyZWVtZW50c1wiIDogWyB7XG4gICAgXCJuYW1lXCIgOiBcIlNBIE5hbWUgMVwiLFxuICAgIFwiaWRcIiA6IFwiOGI0ZmMwNDctYzk4YS00ZTU4LTk3NWEtNmQzZjJiZGU0ZWJlXCIsXG4gICAgXCJtYXN0ZXJcIiA6IHRydWUsXG4gICAgXCJkZXNjcmlwdGlvblwiIDogXCJTQSAxIERlc2NyaXB0aW9uXCJcbiAgfSwge1xuICAgIFwibmFtZVwiIDogXCJTQSBOYW1lIDJcIixcbiAgICBcImlkXCIgOiBcIjhiNGZjMDQ3LWM5OGEtNGU1OC05NzVhLTZkM2YyMjJkZTRlYmVcIixcbiAgICBcIm1hc3RlclwiIDogdHJ1ZVxuICB9IF1cbn1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgXCJtZXNzYWdlXCIgOiBcIkJhZCBSZXF1ZXN0XCIsXG4gIFwiZXJyb3JzXCIgOiBbIHtcbiAgICBcIm1lc3NhZ2VcIiA6IFwiVmFsdWUgRXhjZWVkZWQuIE11c3QgYmUgYmV0d2VlbiB7bWlufSBhbmQge21heH0uXCIsXG4gICAgXCJrZXlcIiA6IFwiY29tbW9uLmFwaS5zaG9lc2l6ZVwiLFxuICAgIFwiY29udGV4dFwiIDoge1xuICAgICAgXCJtYXhcIiA6IFwiNTBcIixcbiAgICAgIFwibWluXCIgOiBcIjFcIlxuICAgIH1cbiAgfSBdXG59XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7XG4gIFwibWVzc2FnZVwiIDogXCJBY2Nlc3MgdG8gcmVxdWVzdGVkIHJlc291cmNlIGRlbmllZC5cIixcbiAgXCJlcnJvcnNcIiA6IFsge1xuICAgIFwibWVzc2FnZVwiIDogXCJSZXNvdXJjZSBhY2Nlc3MgZGVuaWVkIGR1ZSB0byBhbiBpbnN1ZmZpY2llbnQgdXNlciBxdW90YSBvZiB7cXVvdGF9LlwiLFxuICAgIFwia2V5XCIgOiBcImNvbW1vbi5hcGkucXVvdGFcIixcbiAgICBcImNvbnRleHRcIiA6IHtcbiAgICAgIFwicXVvdGFcIiA6IFwic29tZVF1b3RhXCJcbiAgICB9XG4gIH0gXVxufVxuICAgICAgICAgICAgICAgIH0sXG4gICAgXVxufV0pO1xuXG5leHBvcnQgY29uc3QgU2VydmljZUFncmVlbWVudHNTZXJ2aWNlTW9ja3NQcm92aWRlcjogUHJvdmlkZXIgPSBjcmVhdGVNb2NrcyhcbiAgICBbXG4gICAge1xuICAgICAgICB1cmxQYXR0ZXJuOiBcIi9jbGllbnQtYXBpL3YxL2VtcGxveWVlL3VzZXJzL3t1c2VySWR9L3NlcnZpY2UtYWdyZWVtZW50c1wiLFxuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgIHJlc3BvbnNlczogW1xuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgICAgICAgICAgYm9keToge1xuICBcInNlcnZpY2VBZ3JlZW1lbnRzXCIgOiBbIHtcbiAgICBcIm5hbWVcIiA6IFwiU0EgTmFtZSAxXCIsXG4gICAgXCJpZFwiIDogXCI4YjRmYzA0Ny1jOThhLTRlNTgtOTc1YS02ZDNmMmJkZTRlYmVcIixcbiAgICBcIm1hc3RlclwiIDogdHJ1ZSxcbiAgICBcImRlc2NyaXB0aW9uXCIgOiBcIlNBIDEgRGVzY3JpcHRpb25cIlxuICB9LCB7XG4gICAgXCJuYW1lXCIgOiBcIlNBIE5hbWUgMlwiLFxuICAgIFwiaWRcIiA6IFwiOGI0ZmMwNDctYzk4YS00ZTU4LTk3NWEtNmQzZjIyMmRlNGViZVwiLFxuICAgIFwibWFzdGVyXCIgOiB0cnVlXG4gIH0gXVxufVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgXCJtZXNzYWdlXCIgOiBcIkJhZCBSZXF1ZXN0XCIsXG4gIFwiZXJyb3JzXCIgOiBbIHtcbiAgICBcIm1lc3NhZ2VcIiA6IFwiVmFsdWUgRXhjZWVkZWQuIE11c3QgYmUgYmV0d2VlbiB7bWlufSBhbmQge21heH0uXCIsXG4gICAgXCJrZXlcIiA6IFwiY29tbW9uLmFwaS5zaG9lc2l6ZVwiLFxuICAgIFwiY29udGV4dFwiIDoge1xuICAgICAgXCJtYXhcIiA6IFwiNTBcIixcbiAgICAgIFwibWluXCIgOiBcIjFcIlxuICAgIH1cbiAgfSBdXG59XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgICAgICAgICAgYm9keToge1xuICBcIm1lc3NhZ2VcIiA6IFwiQWNjZXNzIHRvIHJlcXVlc3RlZCByZXNvdXJjZSBkZW5pZWQuXCIsXG4gIFwiZXJyb3JzXCIgOiBbIHtcbiAgICBcIm1lc3NhZ2VcIiA6IFwiUmVzb3VyY2UgYWNjZXNzIGRlbmllZCBkdWUgdG8gYW4gaW5zdWZmaWNpZW50IHVzZXIgcXVvdGEgb2Yge3F1b3RhfS5cIixcbiAgICBcImtleVwiIDogXCJjb21tb24uYXBpLnF1b3RhXCIsXG4gICAgXCJjb250ZXh0XCIgOiB7XG4gICAgICBcInF1b3RhXCIgOiBcInNvbWVRdW90YVwiXG4gICAgfVxuICB9IF1cbn1cbiAgICAgICAgICAgIH0sXG4gICAgXVxufSxcbl1cbik7XG5cblxuIl19