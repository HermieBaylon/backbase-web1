import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ActivatePost } from '../model/models';
import { CardItem } from '../model/models';
import { ChangeLimitsPostItem } from '../model/models';
import { LockStatusPost } from '../model/models';
import { RequestReplacementPost } from '../model/models';
import { StatusEnriched } from '../model/models';
import { EmployeeConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface ActivateRequestParams {
    ["userId"]: string;
    ["cardId"]: string;
    ["body"]?: ActivatePost;
}
export interface ChangeLimitsRequestParams {
    ["userId"]: string;
    ["cardId"]: string;
    ["body"]?: Array<ChangeLimitsPostItem>;
}
export interface GetCardByIdRequestParams {
    ["userId"]: string;
    ["cardId"]: string;
}
export interface GetCardsRequestParams {
    ["userId"]: string;
    ["cardIds"]?: Array<string>;
    ["status"]?: Array<string>;
    ["statusEnriched"]?: StatusEnriched;
    ["types"]?: Array<string>;
    ["from"]?: number;
    ["size"]?: number;
}
export interface RequestReplacementRequestParams {
    ["userId"]: string;
    ["cardId"]: string;
    ["body"]?: RequestReplacementPost;
}
export interface UpdateLockStatusRequestParams {
    ["userId"]: string;
    ["cardId"]: string;
    ["body"]: LockStatusPost;
}
export declare class CardsService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: EmployeeConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: EmployeeConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    activate(requestParameters: ActivateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CardItem>;
    activate(requestParameters: ActivateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CardItem>>;
    activate(requestParameters: ActivateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CardItem>>;
    activateUrl(requestParameters: ActivateRequestParams): string;
    changeLimits(requestParameters: ChangeLimitsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CardItem>;
    changeLimits(requestParameters: ChangeLimitsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CardItem>>;
    changeLimits(requestParameters: ChangeLimitsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CardItem>>;
    changeLimitsUrl(requestParameters: ChangeLimitsRequestParams): string;
    getCardById(requestParameters: GetCardByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CardItem>;
    getCardById(requestParameters: GetCardByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CardItem>>;
    getCardById(requestParameters: GetCardByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CardItem>>;
    getCardByIdUrl(requestParameters: GetCardByIdRequestParams): string;
    getCards(requestParameters: GetCardsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<CardItem>>;
    getCards(requestParameters: GetCardsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<CardItem>>>;
    getCards(requestParameters: GetCardsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<CardItem>>>;
    getCardsUrl(requestParameters: GetCardsRequestParams): string;
    requestReplacement(requestParameters: RequestReplacementRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CardItem>;
    requestReplacement(requestParameters: RequestReplacementRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CardItem>>;
    requestReplacement(requestParameters: RequestReplacementRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CardItem>>;
    requestReplacementUrl(requestParameters: RequestReplacementRequestParams): string;
    updateLockStatus(requestParameters: UpdateLockStatusRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CardItem>;
    updateLockStatus(requestParameters: UpdateLockStatusRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CardItem>>;
    updateLockStatus(requestParameters: UpdateLockStatusRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CardItem>>;
    updateLockStatusUrl(requestParameters: UpdateLockStatusRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<CardsService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CardsService>;
}
