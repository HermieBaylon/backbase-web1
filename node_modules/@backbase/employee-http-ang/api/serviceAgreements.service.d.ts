import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ServiceAgreementsGetResponseBody } from '../model/models';
import { EmployeeConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetServiceAgreementsRequestParams {
    ["userId"]: string;
    ["query"]?: string;
    ["from"]?: number;
    ["size"]?: number;
}
export declare class ServiceAgreementsService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: EmployeeConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: EmployeeConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getServiceAgreements(requestParameters: GetServiceAgreementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ServiceAgreementsGetResponseBody>;
    getServiceAgreements(requestParameters: GetServiceAgreementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ServiceAgreementsGetResponseBody>>;
    getServiceAgreements(requestParameters: GetServiceAgreementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ServiceAgreementsGetResponseBody>>;
    getServiceAgreementsUrl(requestParameters: GetServiceAgreementsRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<ServiceAgreementsService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ServiceAgreementsService>;
}
