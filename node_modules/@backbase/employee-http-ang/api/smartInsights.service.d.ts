import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { SmartInsights } from '../model/models';
import { EmployeeConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetSmartInsightByIdRequestParams {
    ["userId"]: string;
}
export declare class SmartInsightsService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: EmployeeConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: EmployeeConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getSmartInsightById(requestParameters: GetSmartInsightByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<SmartInsights>;
    getSmartInsightById(requestParameters: GetSmartInsightByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<SmartInsights>>;
    getSmartInsightById(requestParameters: GetSmartInsightByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<SmartInsights>>;
    getSmartInsightByIdUrl(requestParameters: GetSmartInsightByIdRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<SmartInsightsService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<SmartInsightsService>;
}
