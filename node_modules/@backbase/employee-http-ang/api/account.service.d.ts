import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AccountsGetResponseBody } from '../model/models';
import { DetailedAccount } from '../model/models';
import { EmployeeConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetAccountRequestParams {
    ["userId"]: string;
    ["serviceAgreementId"]: string;
    ["accountId"]: string;
}
export interface GetAccountsRequestParams {
    ["userId"]: string;
    ["serviceAgreementId"]: string;
    ["from"]?: number;
    ["size"]?: number;
}
export declare class AccountService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: EmployeeConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: EmployeeConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getAccount(requestParameters: GetAccountRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<DetailedAccount>;
    getAccount(requestParameters: GetAccountRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<DetailedAccount>>;
    getAccount(requestParameters: GetAccountRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<DetailedAccount>>;
    getAccountUrl(requestParameters: GetAccountRequestParams): string;
    getAccounts(requestParameters: GetAccountsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<AccountsGetResponseBody>;
    getAccounts(requestParameters: GetAccountsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<AccountsGetResponseBody>>;
    getAccounts(requestParameters: GetAccountsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<AccountsGetResponseBody>>;
    getAccountsUrl(requestParameters: GetAccountsRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<AccountService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AccountService>;
}
