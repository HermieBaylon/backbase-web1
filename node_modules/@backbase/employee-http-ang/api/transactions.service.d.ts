import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Direction } from '../model/models';
import { OrderByTransactions } from '../model/models';
import { Transaction } from '../model/models';
import { EmployeeConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetTransactionRequestParams {
    ["userId"]: string;
    ["serviceAgreementId"]: string;
    ["transactionId"]: string;
}
export interface GetTransactionsRequestParams {
    ["userId"]: string;
    ["serviceAgreementId"]: string;
    ["query"]?: string;
    ["arrangementIds"]?: Array<string>;
    ["from"]?: number;
    ["size"]?: number;
    ["orderBy"]?: OrderByTransactions;
    ["direction"]?: Direction;
}
export declare class TransactionsService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: EmployeeConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: EmployeeConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getTransaction(requestParameters: GetTransactionRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Transaction>;
    getTransaction(requestParameters: GetTransactionRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Transaction>>;
    getTransaction(requestParameters: GetTransactionRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Transaction>>;
    getTransactionUrl(requestParameters: GetTransactionRequestParams): string;
    getTransactions(requestParameters: GetTransactionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<Transaction>>;
    getTransactions(requestParameters: GetTransactionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<Transaction>>>;
    getTransactions(requestParameters: GetTransactionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<Transaction>>>;
    getTransactionsUrl(requestParameters: GetTransactionsRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionsService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TransactionsService>;
}
