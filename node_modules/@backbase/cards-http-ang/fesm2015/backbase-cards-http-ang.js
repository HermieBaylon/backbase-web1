import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

var DeliveryTransitStep;
(function (DeliveryTransitStep) {
    DeliveryTransitStep.StatusEnum = {
        SUCCESS: 'SUCCESS',
        FAILED: 'FAILED',
        PENDING: 'PENDING'
    };
})(DeliveryTransitStep || (DeliveryTransitStep = {}));

const LockStatus = {
    LOCKED: 'LOCKED',
    UNLOCKED: 'UNLOCKED'
};

const CARDS_BASE_PATH = new InjectionToken('CARDS_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class CardsConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module CardsConfiguration');

class CardsApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('CardsApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: CardsApiModule,
            providers: [{ provide: CardsConfiguration, useFactory: configurationFactory }]
        };
    }
}
CardsApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsApiModule, deps: [{ token: CardsApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: CardsConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
CardsApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsApiModule });
CardsApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: CardsApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: CardsConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class CardsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new CardsConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    activate(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling activate.');
        }
        const _activatePost = requestParameters["activatePost"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/activation`, _activatePost, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    activateUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling activate.');
        }
        const _activatePost = requestParameters["activatePost"];
        return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/activation`;
    }
    changeLimits(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling changeLimits.');
        }
        const _changeLimitsPostItem = requestParameters["changeLimitsPostItem"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/limits`, _changeLimitsPostItem, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    changeLimitsUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling changeLimits.');
        }
        const _changeLimitsPostItem = requestParameters["changeLimitsPostItem"];
        return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/limits`;
    }
    getCardById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCardById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getCardByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCardById.');
        }
        return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}`;
    }
    getCards(requestParameters, observe = 'body', reportProgress = false, options) {
        const _ids = requestParameters["ids"];
        const _status = requestParameters["status"];
        const _types = requestParameters["types"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        if (_status) {
            _status.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'status');
            });
        }
        if (_types) {
            _types.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'types');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/cards`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getCardsUrl(requestParameters) {
        const _ids = requestParameters["ids"];
        const _status = requestParameters["status"];
        const _types = requestParameters["types"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        if (_status) {
            _status.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'status');
            });
        }
        if (_types) {
            _types.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'types');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/cards${queryString ? `?${queryString}` : ''}`;
    }
    requestPin(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling requestPin.');
        }
        const _requestPinPost = requestParameters["requestPinPost"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/pin/request`, _requestPinPost, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    requestPinUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling requestPin.');
        }
        const _requestPinPost = requestParameters["requestPinPost"];
        return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/pin/request`;
    }
    requestReplacement(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling requestReplacement.');
        }
        const _requestReplacementPost = requestParameters["requestReplacementPost"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/replacement`, _requestReplacementPost, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    requestReplacementUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling requestReplacement.');
        }
        const _requestReplacementPost = requestParameters["requestReplacementPost"];
        return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/replacement`;
    }
    resetPin(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling resetPin.');
        }
        const _resetPinPost = requestParameters["resetPinPost"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/pin/reset`, _resetPinPost, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    resetPinUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling resetPin.');
        }
        const _resetPinPost = requestParameters["resetPinPost"];
        return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/pin/reset`;
    }
    updateLockStatus(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateLockStatus.');
        }
        const _lockStatusPost = requestParameters["lockStatusPost"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/lock-status`, _lockStatusPost, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateLockStatusUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateLockStatus.');
        }
        const _lockStatusPost = requestParameters["lockStatusPost"];
        return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/lock-status`;
    }
}
CardsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsHttpService, deps: [{ token: i1.HttpClient }, { token: CARDS_BASE_PATH, optional: true }, { token: CardsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
CardsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CARDS_BASE_PATH]
                }] }, { type: CardsConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const CardsHttpServiceActivateMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/cards/{id}/activation",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": "sara-card-3",
                    "brand": "mastercard",
                    "type": "Credit",
                    "subType": "ATM",
                    "name": "Gold Card",
                    "status": "Inactive",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "NotUnderReplacement"
                    },
                    "holder": {
                        "name": "Sara Williams"
                    },
                    "expiryDate": {
                        "year": "2022",
                        "month": "12"
                    },
                    "currency": "USD",
                    "maskedNumber": "5237",
                    "delivery": {
                        "transitSteps": [{
                                "name": "Ordered",
                                "status": "SUCCESS",
                                "stepDateTime": "2020-05-04T12:52:20.906+00:00"
                            }, {
                                "name": "Processed",
                                "status": "PENDING"
                            }, {
                                "name": "In Transit",
                                "status": "PENDING"
                            }, {
                                "name": "Delivered",
                                "status": "PENDING"
                            }]
                    },
                    "limits": [{
                            "id": "sara-limit-1",
                            "channel": "ATM",
                            "frequency": "DAILY",
                            "amount": 3000,
                            "maxAmount": 10000,
                            "minAmount": 0
                        }, {
                            "id": "sara-limit-2",
                            "channel": "ONLINE",
                            "frequency": "DAILY",
                            "amount": 2000,
                            "maxAmount": 10000,
                            "minAmount": 0
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value"
                }
            },
            {
                status: 200,
                body: {
                    "id": "kim-card-2",
                    "brand": "mastercard",
                    "type": "Debit",
                    "subType": "ATM",
                    "name": "Copper",
                    "status": "Active",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "NotUnderReplacement"
                    },
                    "holder": {
                        "name": "Kim Sook"
                    },
                    "expiryDate": {
                        "year": "2027",
                        "month": "03"
                    },
                    "currency": "EUR",
                    "maskedNumber": "9292"
                }
            },
            {
                status: 200,
                body: {
                    "delivery": {
                        "additions": {
                            "key": "additions"
                        },
                        "transitSteps": [{
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }, {
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }]
                    },
                    "additions": {
                        "key": "additions"
                    },
                    "holder": {
                        "additions": {
                            "key": "additions"
                        },
                        "name": "name"
                    },
                    "type": "type",
                    "expiryDate": {
                        "month": "month",
                        "additions": {
                            "key": "additions"
                        },
                        "year": "year"
                    },
                    "maskedNumber": "maskedNumber",
                    "name": "name",
                    "subType": "subType",
                    "currency": "currency",
                    "id": "id",
                    "brand": "brand",
                    "replacement": {
                        "reason": "reason",
                        "replacingId": "replacingId",
                        "additions": {
                            "key": "additions"
                        },
                        "replacedById": "replacedById",
                        "status": "status"
                    },
                    "limits": [{
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }, {
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }],
                    "status": "status"
                }
            },
        ]
    }]);
const CardsHttpServiceChangeLimitsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/cards/{id}/limits",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value"
                }
            },
            {
                status: 200,
                body: {
                    "id": "john-card-1",
                    "brand": "visa",
                    "type": "Credit",
                    "subType": "ATM",
                    "name": "Gold",
                    "status": "Active",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "NotUnderReplacement"
                    },
                    "holder": {
                        "name": "John Doe"
                    },
                    "expiryDate": {
                        "year": "2030",
                        "month": "06"
                    },
                    "currency": "EUR",
                    "maskedNumber": "5827",
                    "delivery": {
                        "transitSteps": [{
                                "name": "Ordered",
                                "status": "SUCCESS",
                                "stepDateTime": "2019-06-19T12:52:20.906Z"
                            }, {
                                "name": "Processed",
                                "status": "SUCCESS"
                            }, {
                                "name": "In Transit",
                                "status": "SUCCESS"
                            }, {
                                "name": "Delivered",
                                "status": "SUCCESS"
                            }]
                    },
                    "limits": [{
                            "id": "john-limit-1",
                            "channel": "ATM",
                            "frequency": "WEEKLY",
                            "amount": 1000,
                            "maxAmount": 9000,
                            "minAmount": 0
                        }, {
                            "id": "john-limit-2",
                            "channel": "ONLINE",
                            "frequency": "DAILY",
                            "amount": 20000,
                            "maxAmount": 9000,
                            "minAmount": 0
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value"
                }
            },
            {
                status: 200,
                body: {
                    "delivery": {
                        "additions": {
                            "key": "additions"
                        },
                        "transitSteps": [{
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }, {
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }]
                    },
                    "additions": {
                        "key": "additions"
                    },
                    "holder": {
                        "additions": {
                            "key": "additions"
                        },
                        "name": "name"
                    },
                    "type": "type",
                    "expiryDate": {
                        "month": "month",
                        "additions": {
                            "key": "additions"
                        },
                        "year": "year"
                    },
                    "maskedNumber": "maskedNumber",
                    "name": "name",
                    "subType": "subType",
                    "currency": "currency",
                    "id": "id",
                    "brand": "brand",
                    "replacement": {
                        "reason": "reason",
                        "replacingId": "replacingId",
                        "additions": {
                            "key": "additions"
                        },
                        "replacedById": "replacedById",
                        "status": "status"
                    },
                    "limits": [{
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }, {
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }],
                    "status": "status"
                }
            },
        ]
    }]);
const CardsHttpServiceGetCardByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/cards/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "sara-card-1",
                    "brand": "mastercard",
                    "type": "Credit",
                    "subType": "ATM",
                    "name": "Gold Card",
                    "status": "Active",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "NotUnderReplacement"
                    },
                    "holder": {
                        "name": "Sara Williams"
                    },
                    "expiryDate": {
                        "year": "2022",
                        "month": "12"
                    },
                    "currency": "USD",
                    "maskedNumber": "5235",
                    "limits": [{
                            "id": "sara-limit-1",
                            "channel": "ATM",
                            "frequency": "DAILY",
                            "amount": 3000,
                            "maxAmount": 10000,
                            "minAmount": 0
                        }, {
                            "id": "sara-limit-2",
                            "channel": "ONLINE",
                            "frequency": "DAILY",
                            "amount": 2000,
                            "maxAmount": 10000,
                            "minAmount": 0
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "id": "elon-card-1",
                    "brand": "mastercard",
                    "type": "Credit",
                    "subType": "ATM",
                    "name": "World Elite",
                    "status": "Active",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "NotUnderReplacement"
                    },
                    "holder": {
                        "name": "Elon"
                    },
                    "expiryDate": {
                        "year": "2050",
                        "month": "12"
                    },
                    "currency": "EUR",
                    "maskedNumber": "5235",
                    "delivery": {
                        "transitSteps": [{
                                "name": "Ordered",
                                "status": "SUCCESS",
                                "stepDateTime": "2019-06-19T12:52:20.906Z"
                            }, {
                                "name": "Processed",
                                "status": "PENDING"
                            }, {
                                "name": "In Transit",
                                "status": "PENDING"
                            }, {
                                "name": "Delivered",
                                "status": "PENDING",
                                "stepDateTime": "2019-06-20T14:21:25.001Z"
                            }]
                    },
                    "limits": [{
                            "id": "elon-limit-1",
                            "channel": "ATM",
                            "frequency": "DAILY",
                            "amount": 500000,
                            "maxAmount": 100000,
                            "minAmount": 0
                        }, {
                            "id": "elon-limit-2",
                            "channel": "ONLINE",
                            "frequency": "DAILY",
                            "amount": 1000000,
                            "maxAmount": 800000,
                            "minAmount": 10000
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "id": "john-card-1",
                    "brand": "visa",
                    "type": "Credit",
                    "subType": "ATM",
                    "name": "Gold",
                    "status": "Active",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "NotUnderReplacement"
                    },
                    "holder": {
                        "name": "John Doe"
                    },
                    "expiryDate": {
                        "year": "2030",
                        "month": "06"
                    },
                    "currency": "EUR",
                    "maskedNumber": "5827",
                    "delivery": {
                        "transitSteps": [{
                                "name": "Ordered",
                                "status": "SUCCESS",
                                "stepDateTime": "2019-06-19T12:52:20.906Z"
                            }, {
                                "name": "Processed",
                                "status": "SUCCESS"
                            }, {
                                "name": "In Transit",
                                "status": "SUCCESS"
                            }, {
                                "name": "Delivered",
                                "status": "SUCCESS"
                            }]
                    },
                    "limits": [{
                            "id": "john-limit-1",
                            "channel": "ATM",
                            "frequency": "DAILY",
                            "amount": 5000,
                            "maxAmount": 1000,
                            "minAmount": 0
                        }, {
                            "id": "john-limit-2",
                            "channel": "ONLINE",
                            "frequency": "DAILY",
                            "amount": 20000,
                            "maxAmount": 9000,
                            "minAmount": 0
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "id": "kim-card-1",
                    "brand": "mastercard",
                    "type": "Debit",
                    "subType": "ATM",
                    "name": "Copper",
                    "status": "Inactive",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "NotUnderReplacement"
                    },
                    "holder": {
                        "name": "Kim Sook"
                    },
                    "expiryDate": {
                        "year": "2027",
                        "month": "03"
                    },
                    "currency": "EUR",
                    "maskedNumber": "9292"
                }
            },
            {
                status: 200,
                body: {
                    "delivery": {
                        "additions": {
                            "key": "additions"
                        },
                        "transitSteps": [{
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }, {
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }]
                    },
                    "additions": {
                        "key": "additions"
                    },
                    "holder": {
                        "additions": {
                            "key": "additions"
                        },
                        "name": "name"
                    },
                    "type": "type",
                    "expiryDate": {
                        "month": "month",
                        "additions": {
                            "key": "additions"
                        },
                        "year": "year"
                    },
                    "maskedNumber": "maskedNumber",
                    "name": "name",
                    "subType": "subType",
                    "currency": "currency",
                    "id": "id",
                    "brand": "brand",
                    "replacement": {
                        "reason": "reason",
                        "replacingId": "replacingId",
                        "additions": {
                            "key": "additions"
                        },
                        "replacedById": "replacedById",
                        "status": "status"
                    },
                    "limits": [{
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }, {
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }],
                    "status": "status"
                }
            },
        ]
    }]);
const CardsHttpServiceGetCardsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/cards",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "sara-card-1",
                        "brand": "mastercard",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Gold Card",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Sara Williams"
                        },
                        "expiryDate": {
                            "year": "2022",
                            "month": "12"
                        },
                        "currency": "USD",
                        "maskedNumber": "5235"
                    }, {
                        "id": "sara-card-2",
                        "brand": "visa",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Green Card",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Sara Williams"
                        },
                        "expiryDate": {
                            "year": "2022",
                            "month": "01"
                        },
                        "currency": "USD",
                        "maskedNumber": "5236"
                    }, {
                        "id": "sara-card-3",
                        "brand": "mastercard",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Gold Card",
                        "status": "Inactive",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Sara Williams"
                        },
                        "expiryDate": {
                            "year": "2022",
                            "month": "12"
                        },
                        "currency": "USD",
                        "maskedNumber": "5237",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2020-05-04T12:52:20.906+00:00"
                                }, {
                                    "name": "Processed",
                                    "status": "PENDING"
                                }, {
                                    "name": "In Transit",
                                    "status": "PENDING"
                                }, {
                                    "name": "Delivered",
                                    "status": "PENDING"
                                }]
                        }
                    }, {
                        "id": "sara-card-4",
                        "brand": "mastercard",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Black Card",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Sara Williams"
                        },
                        "expiryDate": {
                            "year": "2022",
                            "month": "12"
                        },
                        "currency": "USD",
                        "maskedNumber": "6235"
                    }, {
                        "id": "sara-card-5",
                        "brand": "visa",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Blue Card",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Sara Williams"
                        },
                        "expiryDate": {
                            "year": "2022",
                            "month": "12"
                        },
                        "currency": "USD",
                        "maskedNumber": "6236"
                    }]
            },
            {
                status: 200,
                body: [{
                        "id": "elon-card-1",
                        "brand": "mastercard",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "World Elite",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Elon"
                        },
                        "expiryDate": {
                            "year": "2050",
                            "month": "12"
                        },
                        "currency": "EUR",
                        "maskedNumber": "5235",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-19T12:52:20.906Z"
                                }, {
                                    "name": "Processed",
                                    "status": "PENDING"
                                }, {
                                    "name": "In Transit",
                                    "status": "PENDING"
                                }, {
                                    "name": "Delivered",
                                    "status": "PENDING",
                                    "stepDateTime": "2019-06-20T14:21:25.001Z"
                                }]
                        }
                    }, {
                        "id": "elon-card-2",
                        "brand": "visa",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Infinite Privilege",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Elon"
                        },
                        "expiryDate": {
                            "year": "2045",
                            "month": "01"
                        },
                        "currency": "EUR",
                        "maskedNumber": "6782"
                    }, {
                        "id": "elon-card-3",
                        "brand": "american_express",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Reserve",
                        "status": "Cancelled",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "UnderReplacement",
                            "reason": "Lost",
                            "replacedById": "4"
                        },
                        "holder": {
                            "name": "Elon"
                        },
                        "expiryDate": {
                            "year": "2048",
                            "month": "06"
                        },
                        "currency": "EUR",
                        "maskedNumber": "1262"
                    }, {
                        "id": "elon-card-4",
                        "brand": "american_express",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Reserve",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Elon"
                        },
                        "expiryDate": {
                            "year": "2048",
                            "month": "07"
                        },
                        "currency": "EUR",
                        "maskedNumber": "1289"
                    }, {
                        "id": "elon-card-5",
                        "brand": "mastercard",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Platinum",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Elon"
                        },
                        "expiryDate": {
                            "year": "2050",
                            "month": "11"
                        },
                        "currency": "EUR",
                        "maskedNumber": "4627",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-19T12:52:20.906Z"
                                }, {
                                    "name": "Processed",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-20T14:32:20.906Z"
                                }, {
                                    "name": "In Transit",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-20T15:12:20.906Z"
                                }, {
                                    "name": "Delivered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-21T11:28:25.001Z"
                                }]
                        }
                    }, {
                        "id": "elon-card-6",
                        "brand": "american_express",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Reserve",
                        "status": "Active",
                        "lockStatus": "LOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Elon"
                        },
                        "expiryDate": {
                            "year": "2047",
                            "month": "03"
                        },
                        "currency": "EUR",
                        "maskedNumber": "8291"
                    }]
            },
            {
                status: 200,
                body: [{
                        "id": "john-card-1",
                        "brand": "visa",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Gold",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "John Doe"
                        },
                        "expiryDate": {
                            "year": "2030",
                            "month": "06"
                        },
                        "currency": "EUR",
                        "maskedNumber": "5827",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-19T12:52:20.906Z"
                                }, {
                                    "name": "Processed",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "In Transit",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "Delivered",
                                    "status": "SUCCESS"
                                }]
                        },
                        "limits": [{
                                "id": "john-limit-1",
                                "channel": "ATM",
                                "frequency": "DAILY",
                                "amount": 3000,
                                "maxAmount": 9000,
                                "minAmount": 0
                            }, {
                                "id": "john-limit-2",
                                "channel": "ONLINE",
                                "frequency": "DAILY",
                                "amount": 20000,
                                "maxAmount": 9000,
                                "minAmount": 0
                            }]
                    }, {
                        "id": "john-card-2",
                        "brand": "mastercard",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Gold",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "John Doe"
                        },
                        "expiryDate": {
                            "year": "2031",
                            "month": "02"
                        },
                        "currency": "EUR",
                        "maskedNumber": "8299"
                    }]
            },
            {
                status: 200,
                body: [{
                        "id": "kim-card-1",
                        "brand": "mastercard",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Copper",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Kim Sook"
                        },
                        "expiryDate": {
                            "year": "2027",
                            "month": "03"
                        },
                        "currency": "EUR",
                        "maskedNumber": "9292"
                    }, {
                        "id": "kim-card-2",
                        "brand": "visa",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Iron",
                        "status": "Inactive",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Kim Sook"
                        },
                        "expiryDate": {
                            "year": "2010",
                            "month": "04"
                        },
                        "currency": "EUR",
                        "maskedNumber": "9494"
                    }, {
                        "id": "kim-card-3",
                        "brand": "visa",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Iron",
                        "status": "Expired",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Kim Sook"
                        },
                        "expiryDate": {
                            "year": "2010",
                            "month": "04"
                        },
                        "currency": "EUR",
                        "maskedNumber": "9494"
                    }]
            },
            {
                status: 200,
                body: []
            },
        ]
    }]);
const CardsHttpServiceRequestPinMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/cards/{id}/pin/request",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value"
                }
            },
            {
                status: 200,
                body: {
                    "delivery": {
                        "additions": {
                            "key": "additions"
                        },
                        "transitSteps": [{
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }, {
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }]
                    },
                    "additions": {
                        "key": "additions"
                    },
                    "holder": {
                        "additions": {
                            "key": "additions"
                        },
                        "name": "name"
                    },
                    "type": "type",
                    "expiryDate": {
                        "month": "month",
                        "additions": {
                            "key": "additions"
                        },
                        "year": "year"
                    },
                    "maskedNumber": "maskedNumber",
                    "name": "name",
                    "subType": "subType",
                    "currency": "currency",
                    "id": "id",
                    "brand": "brand",
                    "replacement": {
                        "reason": "reason",
                        "replacingId": "replacingId",
                        "additions": {
                            "key": "additions"
                        },
                        "replacedById": "replacedById",
                        "status": "status"
                    },
                    "limits": [{
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }, {
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }],
                    "status": "status"
                }
            },
        ]
    }]);
const CardsHttpServiceRequestReplacementMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/cards/{id}/replacement",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                }
            },
            {
                status: 200,
                body: {
                    "id": "elon-card-1",
                    "brand": "mastercard",
                    "type": "Credit",
                    "subType": "ATM",
                    "name": "World Elite",
                    "status": "Active",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "ReplacementRequested",
                        "reason": "Damaged"
                    },
                    "holder": {
                        "name": "Elon"
                    },
                    "expiryDate": {
                        "year": "2050",
                        "month": "12"
                    },
                    "currency": "EUR",
                    "maskedNumber": "5235",
                    "delivery": {
                        "transitSteps": [{
                                "name": "Ordered",
                                "status": "SUCCESS",
                                "stepDateTime": "2019-06-19T12:52:20.906Z"
                            }, {
                                "name": "Processed",
                                "status": "PENDING"
                            }]
                    }
                }
            },
            {
                status: 200,
                body: {
                    "id": "john-card-1",
                    "brand": "visa",
                    "type": "Credit",
                    "subType": "ATM",
                    "name": "Gold",
                    "status": "Inactive",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "ReplacementRequested",
                        "reason": "Stolen"
                    },
                    "holder": {
                        "name": "John Doe"
                    },
                    "expiryDate": {
                        "year": "2030",
                        "month": "06"
                    },
                    "currency": "EUR",
                    "maskedNumber": "5827",
                    "delivery": {
                        "transitSteps": [{
                                "name": "Ordered",
                                "status": "SUCCESS",
                                "stepDateTime": "2019-06-19T12:52:20.906Z"
                            }, {
                                "name": "Processed",
                                "status": "SUCCESS"
                            }, {
                                "name": "In Transit",
                                "status": "SUCCESS"
                            }, {
                                "name": "Delivered",
                                "status": "SUCCESS"
                            }]
                    }
                }
            },
            {
                status: 200,
                body: {
                    "id": "kim-card-1",
                    "brand": "mastercard",
                    "type": "Debit",
                    "subType": "ATM",
                    "name": "Copper",
                    "status": "Inactive",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "ReplacementRequested",
                        "reason": "Lost"
                    },
                    "holder": {
                        "name": "Kim Sook"
                    },
                    "expiryDate": {
                        "year": "2027",
                        "month": "03"
                    },
                    "currency": "EUR",
                    "maskedNumber": "9292"
                }
            },
            {
                status: 200,
                body: {
                    "delivery": {
                        "additions": {
                            "key": "additions"
                        },
                        "transitSteps": [{
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }, {
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }]
                    },
                    "additions": {
                        "key": "additions"
                    },
                    "holder": {
                        "additions": {
                            "key": "additions"
                        },
                        "name": "name"
                    },
                    "type": "type",
                    "expiryDate": {
                        "month": "month",
                        "additions": {
                            "key": "additions"
                        },
                        "year": "year"
                    },
                    "maskedNumber": "maskedNumber",
                    "name": "name",
                    "subType": "subType",
                    "currency": "currency",
                    "id": "id",
                    "brand": "brand",
                    "replacement": {
                        "reason": "reason",
                        "replacingId": "replacingId",
                        "additions": {
                            "key": "additions"
                        },
                        "replacedById": "replacedById",
                        "status": "status"
                    },
                    "limits": [{
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }, {
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }],
                    "status": "status"
                }
            },
        ]
    }]);
const CardsHttpServiceResetPinMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/cards/{id}/pin/reset",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value"
                }
            },
            {
                status: 200,
                body: {
                    "delivery": {
                        "additions": {
                            "key": "additions"
                        },
                        "transitSteps": [{
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }, {
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }]
                    },
                    "additions": {
                        "key": "additions"
                    },
                    "holder": {
                        "additions": {
                            "key": "additions"
                        },
                        "name": "name"
                    },
                    "type": "type",
                    "expiryDate": {
                        "month": "month",
                        "additions": {
                            "key": "additions"
                        },
                        "year": "year"
                    },
                    "maskedNumber": "maskedNumber",
                    "name": "name",
                    "subType": "subType",
                    "currency": "currency",
                    "id": "id",
                    "brand": "brand",
                    "replacement": {
                        "reason": "reason",
                        "replacingId": "replacingId",
                        "additions": {
                            "key": "additions"
                        },
                        "replacedById": "replacedById",
                        "status": "status"
                    },
                    "limits": [{
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }, {
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }],
                    "status": "status"
                }
            },
        ]
    }]);
const CardsHttpServiceUpdateLockStatusMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/cards/{id}/lock-status",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                }
            },
            {
                status: 200,
                body: {
                    "id": "elon-card-6",
                    "brand": "american_express",
                    "type": "Credit",
                    "subType": "ATM",
                    "name": "Reserve",
                    "status": "Active",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "NotUnderReplacement"
                    },
                    "holder": {
                        "name": "Elon"
                    },
                    "expiryDate": {
                        "year": "2047",
                        "month": "03"
                    },
                    "currency": "EUR",
                    "maskedNumber": "8291"
                }
            },
            {
                status: 200,
                body: {
                    "id": "john-card-1",
                    "brand": "visa",
                    "type": "Credit",
                    "subType": "ATM",
                    "name": "Gold",
                    "status": "Active",
                    "lockStatus": "LOCKED",
                    "replacement": {
                        "status": "NotUnderReplacement"
                    },
                    "holder": {
                        "name": "John Doe"
                    },
                    "expiryDate": {
                        "year": "2030",
                        "month": "06"
                    },
                    "currency": "EUR",
                    "maskedNumber": "5827",
                    "delivery": {
                        "transitSteps": [{
                                "name": "Ordered",
                                "status": "SUCCESS",
                                "stepDateTime": "2019-06-19T12:52:20.906Z"
                            }, {
                                "name": "Processed",
                                "status": "SUCCESS"
                            }, {
                                "name": "In Transit",
                                "status": "SUCCESS"
                            }, {
                                "name": "Delivered",
                                "status": "SUCCESS"
                            }]
                    },
                    "limits": [{
                            "id": "john-limit-1",
                            "channel": "ATM",
                            "frequency": "DAILY",
                            "amount": 5000,
                            "maxAmount": 1000,
                            "minAmount": 0
                        }, {
                            "id": "john-limit-2",
                            "channel": "ONLINE",
                            "frequency": "DAILY",
                            "amount": 20000,
                            "maxAmount": 9000,
                            "minAmount": 0
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value"
                }
            },
            {
                status: 200,
                body: {
                    "delivery": {
                        "additions": {
                            "key": "additions"
                        },
                        "transitSteps": [{
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }, {
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }]
                    },
                    "additions": {
                        "key": "additions"
                    },
                    "holder": {
                        "additions": {
                            "key": "additions"
                        },
                        "name": "name"
                    },
                    "type": "type",
                    "expiryDate": {
                        "month": "month",
                        "additions": {
                            "key": "additions"
                        },
                        "year": "year"
                    },
                    "maskedNumber": "maskedNumber",
                    "name": "name",
                    "subType": "subType",
                    "currency": "currency",
                    "id": "id",
                    "brand": "brand",
                    "replacement": {
                        "reason": "reason",
                        "replacingId": "replacingId",
                        "additions": {
                            "key": "additions"
                        },
                        "replacedById": "replacedById",
                        "status": "status"
                    },
                    "limits": [{
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }, {
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }],
                    "status": "status"
                }
            },
        ]
    }]);
const CardsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/cards/{id}/activation",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": "sara-card-3",
                    "brand": "mastercard",
                    "type": "Credit",
                    "subType": "ATM",
                    "name": "Gold Card",
                    "status": "Inactive",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "NotUnderReplacement"
                    },
                    "holder": {
                        "name": "Sara Williams"
                    },
                    "expiryDate": {
                        "year": "2022",
                        "month": "12"
                    },
                    "currency": "USD",
                    "maskedNumber": "5237",
                    "delivery": {
                        "transitSteps": [{
                                "name": "Ordered",
                                "status": "SUCCESS",
                                "stepDateTime": "2020-05-04T12:52:20.906+00:00"
                            }, {
                                "name": "Processed",
                                "status": "PENDING"
                            }, {
                                "name": "In Transit",
                                "status": "PENDING"
                            }, {
                                "name": "Delivered",
                                "status": "PENDING"
                            }]
                    },
                    "limits": [{
                            "id": "sara-limit-1",
                            "channel": "ATM",
                            "frequency": "DAILY",
                            "amount": 3000,
                            "maxAmount": 10000,
                            "minAmount": 0
                        }, {
                            "id": "sara-limit-2",
                            "channel": "ONLINE",
                            "frequency": "DAILY",
                            "amount": 2000,
                            "maxAmount": 10000,
                            "minAmount": 0
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value"
                }
            },
            {
                status: 200,
                body: {
                    "id": "kim-card-2",
                    "brand": "mastercard",
                    "type": "Debit",
                    "subType": "ATM",
                    "name": "Copper",
                    "status": "Active",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "NotUnderReplacement"
                    },
                    "holder": {
                        "name": "Kim Sook"
                    },
                    "expiryDate": {
                        "year": "2027",
                        "month": "03"
                    },
                    "currency": "EUR",
                    "maskedNumber": "9292"
                }
            },
            {
                status: 200,
                body: {
                    "delivery": {
                        "additions": {
                            "key": "additions"
                        },
                        "transitSteps": [{
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }, {
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }]
                    },
                    "additions": {
                        "key": "additions"
                    },
                    "holder": {
                        "additions": {
                            "key": "additions"
                        },
                        "name": "name"
                    },
                    "type": "type",
                    "expiryDate": {
                        "month": "month",
                        "additions": {
                            "key": "additions"
                        },
                        "year": "year"
                    },
                    "maskedNumber": "maskedNumber",
                    "name": "name",
                    "subType": "subType",
                    "currency": "currency",
                    "id": "id",
                    "brand": "brand",
                    "replacement": {
                        "reason": "reason",
                        "replacingId": "replacingId",
                        "additions": {
                            "key": "additions"
                        },
                        "replacedById": "replacedById",
                        "status": "status"
                    },
                    "limits": [{
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }, {
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }],
                    "status": "status"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/cards/{id}/limits",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value"
                }
            },
            {
                status: 200,
                body: {
                    "id": "john-card-1",
                    "brand": "visa",
                    "type": "Credit",
                    "subType": "ATM",
                    "name": "Gold",
                    "status": "Active",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "NotUnderReplacement"
                    },
                    "holder": {
                        "name": "John Doe"
                    },
                    "expiryDate": {
                        "year": "2030",
                        "month": "06"
                    },
                    "currency": "EUR",
                    "maskedNumber": "5827",
                    "delivery": {
                        "transitSteps": [{
                                "name": "Ordered",
                                "status": "SUCCESS",
                                "stepDateTime": "2019-06-19T12:52:20.906Z"
                            }, {
                                "name": "Processed",
                                "status": "SUCCESS"
                            }, {
                                "name": "In Transit",
                                "status": "SUCCESS"
                            }, {
                                "name": "Delivered",
                                "status": "SUCCESS"
                            }]
                    },
                    "limits": [{
                            "id": "john-limit-1",
                            "channel": "ATM",
                            "frequency": "WEEKLY",
                            "amount": 1000,
                            "maxAmount": 9000,
                            "minAmount": 0
                        }, {
                            "id": "john-limit-2",
                            "channel": "ONLINE",
                            "frequency": "DAILY",
                            "amount": 20000,
                            "maxAmount": 9000,
                            "minAmount": 0
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value"
                }
            },
            {
                status: 200,
                body: {
                    "delivery": {
                        "additions": {
                            "key": "additions"
                        },
                        "transitSteps": [{
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }, {
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }]
                    },
                    "additions": {
                        "key": "additions"
                    },
                    "holder": {
                        "additions": {
                            "key": "additions"
                        },
                        "name": "name"
                    },
                    "type": "type",
                    "expiryDate": {
                        "month": "month",
                        "additions": {
                            "key": "additions"
                        },
                        "year": "year"
                    },
                    "maskedNumber": "maskedNumber",
                    "name": "name",
                    "subType": "subType",
                    "currency": "currency",
                    "id": "id",
                    "brand": "brand",
                    "replacement": {
                        "reason": "reason",
                        "replacingId": "replacingId",
                        "additions": {
                            "key": "additions"
                        },
                        "replacedById": "replacedById",
                        "status": "status"
                    },
                    "limits": [{
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }, {
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }],
                    "status": "status"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/cards/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "sara-card-1",
                    "brand": "mastercard",
                    "type": "Credit",
                    "subType": "ATM",
                    "name": "Gold Card",
                    "status": "Active",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "NotUnderReplacement"
                    },
                    "holder": {
                        "name": "Sara Williams"
                    },
                    "expiryDate": {
                        "year": "2022",
                        "month": "12"
                    },
                    "currency": "USD",
                    "maskedNumber": "5235",
                    "limits": [{
                            "id": "sara-limit-1",
                            "channel": "ATM",
                            "frequency": "DAILY",
                            "amount": 3000,
                            "maxAmount": 10000,
                            "minAmount": 0
                        }, {
                            "id": "sara-limit-2",
                            "channel": "ONLINE",
                            "frequency": "DAILY",
                            "amount": 2000,
                            "maxAmount": 10000,
                            "minAmount": 0
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "id": "elon-card-1",
                    "brand": "mastercard",
                    "type": "Credit",
                    "subType": "ATM",
                    "name": "World Elite",
                    "status": "Active",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "NotUnderReplacement"
                    },
                    "holder": {
                        "name": "Elon"
                    },
                    "expiryDate": {
                        "year": "2050",
                        "month": "12"
                    },
                    "currency": "EUR",
                    "maskedNumber": "5235",
                    "delivery": {
                        "transitSteps": [{
                                "name": "Ordered",
                                "status": "SUCCESS",
                                "stepDateTime": "2019-06-19T12:52:20.906Z"
                            }, {
                                "name": "Processed",
                                "status": "PENDING"
                            }, {
                                "name": "In Transit",
                                "status": "PENDING"
                            }, {
                                "name": "Delivered",
                                "status": "PENDING",
                                "stepDateTime": "2019-06-20T14:21:25.001Z"
                            }]
                    },
                    "limits": [{
                            "id": "elon-limit-1",
                            "channel": "ATM",
                            "frequency": "DAILY",
                            "amount": 500000,
                            "maxAmount": 100000,
                            "minAmount": 0
                        }, {
                            "id": "elon-limit-2",
                            "channel": "ONLINE",
                            "frequency": "DAILY",
                            "amount": 1000000,
                            "maxAmount": 800000,
                            "minAmount": 10000
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "id": "john-card-1",
                    "brand": "visa",
                    "type": "Credit",
                    "subType": "ATM",
                    "name": "Gold",
                    "status": "Active",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "NotUnderReplacement"
                    },
                    "holder": {
                        "name": "John Doe"
                    },
                    "expiryDate": {
                        "year": "2030",
                        "month": "06"
                    },
                    "currency": "EUR",
                    "maskedNumber": "5827",
                    "delivery": {
                        "transitSteps": [{
                                "name": "Ordered",
                                "status": "SUCCESS",
                                "stepDateTime": "2019-06-19T12:52:20.906Z"
                            }, {
                                "name": "Processed",
                                "status": "SUCCESS"
                            }, {
                                "name": "In Transit",
                                "status": "SUCCESS"
                            }, {
                                "name": "Delivered",
                                "status": "SUCCESS"
                            }]
                    },
                    "limits": [{
                            "id": "john-limit-1",
                            "channel": "ATM",
                            "frequency": "DAILY",
                            "amount": 5000,
                            "maxAmount": 1000,
                            "minAmount": 0
                        }, {
                            "id": "john-limit-2",
                            "channel": "ONLINE",
                            "frequency": "DAILY",
                            "amount": 20000,
                            "maxAmount": 9000,
                            "minAmount": 0
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "id": "kim-card-1",
                    "brand": "mastercard",
                    "type": "Debit",
                    "subType": "ATM",
                    "name": "Copper",
                    "status": "Inactive",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "NotUnderReplacement"
                    },
                    "holder": {
                        "name": "Kim Sook"
                    },
                    "expiryDate": {
                        "year": "2027",
                        "month": "03"
                    },
                    "currency": "EUR",
                    "maskedNumber": "9292"
                }
            },
            {
                status: 200,
                body: {
                    "delivery": {
                        "additions": {
                            "key": "additions"
                        },
                        "transitSteps": [{
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }, {
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }]
                    },
                    "additions": {
                        "key": "additions"
                    },
                    "holder": {
                        "additions": {
                            "key": "additions"
                        },
                        "name": "name"
                    },
                    "type": "type",
                    "expiryDate": {
                        "month": "month",
                        "additions": {
                            "key": "additions"
                        },
                        "year": "year"
                    },
                    "maskedNumber": "maskedNumber",
                    "name": "name",
                    "subType": "subType",
                    "currency": "currency",
                    "id": "id",
                    "brand": "brand",
                    "replacement": {
                        "reason": "reason",
                        "replacingId": "replacingId",
                        "additions": {
                            "key": "additions"
                        },
                        "replacedById": "replacedById",
                        "status": "status"
                    },
                    "limits": [{
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }, {
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }],
                    "status": "status"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/cards",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "sara-card-1",
                        "brand": "mastercard",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Gold Card",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Sara Williams"
                        },
                        "expiryDate": {
                            "year": "2022",
                            "month": "12"
                        },
                        "currency": "USD",
                        "maskedNumber": "5235"
                    }, {
                        "id": "sara-card-2",
                        "brand": "visa",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Green Card",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Sara Williams"
                        },
                        "expiryDate": {
                            "year": "2022",
                            "month": "01"
                        },
                        "currency": "USD",
                        "maskedNumber": "5236"
                    }, {
                        "id": "sara-card-3",
                        "brand": "mastercard",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Gold Card",
                        "status": "Inactive",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Sara Williams"
                        },
                        "expiryDate": {
                            "year": "2022",
                            "month": "12"
                        },
                        "currency": "USD",
                        "maskedNumber": "5237",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2020-05-04T12:52:20.906+00:00"
                                }, {
                                    "name": "Processed",
                                    "status": "PENDING"
                                }, {
                                    "name": "In Transit",
                                    "status": "PENDING"
                                }, {
                                    "name": "Delivered",
                                    "status": "PENDING"
                                }]
                        }
                    }, {
                        "id": "sara-card-4",
                        "brand": "mastercard",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Black Card",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Sara Williams"
                        },
                        "expiryDate": {
                            "year": "2022",
                            "month": "12"
                        },
                        "currency": "USD",
                        "maskedNumber": "6235"
                    }, {
                        "id": "sara-card-5",
                        "brand": "visa",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Blue Card",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Sara Williams"
                        },
                        "expiryDate": {
                            "year": "2022",
                            "month": "12"
                        },
                        "currency": "USD",
                        "maskedNumber": "6236"
                    }]
            },
            {
                status: 200,
                body: [{
                        "id": "elon-card-1",
                        "brand": "mastercard",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "World Elite",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Elon"
                        },
                        "expiryDate": {
                            "year": "2050",
                            "month": "12"
                        },
                        "currency": "EUR",
                        "maskedNumber": "5235",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-19T12:52:20.906Z"
                                }, {
                                    "name": "Processed",
                                    "status": "PENDING"
                                }, {
                                    "name": "In Transit",
                                    "status": "PENDING"
                                }, {
                                    "name": "Delivered",
                                    "status": "PENDING",
                                    "stepDateTime": "2019-06-20T14:21:25.001Z"
                                }]
                        }
                    }, {
                        "id": "elon-card-2",
                        "brand": "visa",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Infinite Privilege",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Elon"
                        },
                        "expiryDate": {
                            "year": "2045",
                            "month": "01"
                        },
                        "currency": "EUR",
                        "maskedNumber": "6782"
                    }, {
                        "id": "elon-card-3",
                        "brand": "american_express",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Reserve",
                        "status": "Cancelled",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "UnderReplacement",
                            "reason": "Lost",
                            "replacedById": "4"
                        },
                        "holder": {
                            "name": "Elon"
                        },
                        "expiryDate": {
                            "year": "2048",
                            "month": "06"
                        },
                        "currency": "EUR",
                        "maskedNumber": "1262"
                    }, {
                        "id": "elon-card-4",
                        "brand": "american_express",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Reserve",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Elon"
                        },
                        "expiryDate": {
                            "year": "2048",
                            "month": "07"
                        },
                        "currency": "EUR",
                        "maskedNumber": "1289"
                    }, {
                        "id": "elon-card-5",
                        "brand": "mastercard",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Platinum",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Elon"
                        },
                        "expiryDate": {
                            "year": "2050",
                            "month": "11"
                        },
                        "currency": "EUR",
                        "maskedNumber": "4627",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-19T12:52:20.906Z"
                                }, {
                                    "name": "Processed",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-20T14:32:20.906Z"
                                }, {
                                    "name": "In Transit",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-20T15:12:20.906Z"
                                }, {
                                    "name": "Delivered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-21T11:28:25.001Z"
                                }]
                        }
                    }, {
                        "id": "elon-card-6",
                        "brand": "american_express",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Reserve",
                        "status": "Active",
                        "lockStatus": "LOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Elon"
                        },
                        "expiryDate": {
                            "year": "2047",
                            "month": "03"
                        },
                        "currency": "EUR",
                        "maskedNumber": "8291"
                    }]
            },
            {
                status: 200,
                body: [{
                        "id": "john-card-1",
                        "brand": "visa",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Gold",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "John Doe"
                        },
                        "expiryDate": {
                            "year": "2030",
                            "month": "06"
                        },
                        "currency": "EUR",
                        "maskedNumber": "5827",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-19T12:52:20.906Z"
                                }, {
                                    "name": "Processed",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "In Transit",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "Delivered",
                                    "status": "SUCCESS"
                                }]
                        },
                        "limits": [{
                                "id": "john-limit-1",
                                "channel": "ATM",
                                "frequency": "DAILY",
                                "amount": 3000,
                                "maxAmount": 9000,
                                "minAmount": 0
                            }, {
                                "id": "john-limit-2",
                                "channel": "ONLINE",
                                "frequency": "DAILY",
                                "amount": 20000,
                                "maxAmount": 9000,
                                "minAmount": 0
                            }]
                    }, {
                        "id": "john-card-2",
                        "brand": "mastercard",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Gold",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "John Doe"
                        },
                        "expiryDate": {
                            "year": "2031",
                            "month": "02"
                        },
                        "currency": "EUR",
                        "maskedNumber": "8299"
                    }]
            },
            {
                status: 200,
                body: [{
                        "id": "kim-card-1",
                        "brand": "mastercard",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Copper",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Kim Sook"
                        },
                        "expiryDate": {
                            "year": "2027",
                            "month": "03"
                        },
                        "currency": "EUR",
                        "maskedNumber": "9292"
                    }, {
                        "id": "kim-card-2",
                        "brand": "visa",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Iron",
                        "status": "Inactive",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Kim Sook"
                        },
                        "expiryDate": {
                            "year": "2010",
                            "month": "04"
                        },
                        "currency": "EUR",
                        "maskedNumber": "9494"
                    }, {
                        "id": "kim-card-3",
                        "brand": "visa",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Iron",
                        "status": "Expired",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Kim Sook"
                        },
                        "expiryDate": {
                            "year": "2010",
                            "month": "04"
                        },
                        "currency": "EUR",
                        "maskedNumber": "9494"
                    }]
            },
            {
                status: 200,
                body: []
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/cards/{id}/pin/request",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value"
                }
            },
            {
                status: 200,
                body: {
                    "delivery": {
                        "additions": {
                            "key": "additions"
                        },
                        "transitSteps": [{
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }, {
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }]
                    },
                    "additions": {
                        "key": "additions"
                    },
                    "holder": {
                        "additions": {
                            "key": "additions"
                        },
                        "name": "name"
                    },
                    "type": "type",
                    "expiryDate": {
                        "month": "month",
                        "additions": {
                            "key": "additions"
                        },
                        "year": "year"
                    },
                    "maskedNumber": "maskedNumber",
                    "name": "name",
                    "subType": "subType",
                    "currency": "currency",
                    "id": "id",
                    "brand": "brand",
                    "replacement": {
                        "reason": "reason",
                        "replacingId": "replacingId",
                        "additions": {
                            "key": "additions"
                        },
                        "replacedById": "replacedById",
                        "status": "status"
                    },
                    "limits": [{
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }, {
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }],
                    "status": "status"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/cards/{id}/replacement",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                }
            },
            {
                status: 200,
                body: {
                    "id": "elon-card-1",
                    "brand": "mastercard",
                    "type": "Credit",
                    "subType": "ATM",
                    "name": "World Elite",
                    "status": "Active",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "ReplacementRequested",
                        "reason": "Damaged"
                    },
                    "holder": {
                        "name": "Elon"
                    },
                    "expiryDate": {
                        "year": "2050",
                        "month": "12"
                    },
                    "currency": "EUR",
                    "maskedNumber": "5235",
                    "delivery": {
                        "transitSteps": [{
                                "name": "Ordered",
                                "status": "SUCCESS",
                                "stepDateTime": "2019-06-19T12:52:20.906Z"
                            }, {
                                "name": "Processed",
                                "status": "PENDING"
                            }]
                    }
                }
            },
            {
                status: 200,
                body: {
                    "id": "john-card-1",
                    "brand": "visa",
                    "type": "Credit",
                    "subType": "ATM",
                    "name": "Gold",
                    "status": "Inactive",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "ReplacementRequested",
                        "reason": "Stolen"
                    },
                    "holder": {
                        "name": "John Doe"
                    },
                    "expiryDate": {
                        "year": "2030",
                        "month": "06"
                    },
                    "currency": "EUR",
                    "maskedNumber": "5827",
                    "delivery": {
                        "transitSteps": [{
                                "name": "Ordered",
                                "status": "SUCCESS",
                                "stepDateTime": "2019-06-19T12:52:20.906Z"
                            }, {
                                "name": "Processed",
                                "status": "SUCCESS"
                            }, {
                                "name": "In Transit",
                                "status": "SUCCESS"
                            }, {
                                "name": "Delivered",
                                "status": "SUCCESS"
                            }]
                    }
                }
            },
            {
                status: 200,
                body: {
                    "id": "kim-card-1",
                    "brand": "mastercard",
                    "type": "Debit",
                    "subType": "ATM",
                    "name": "Copper",
                    "status": "Inactive",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "ReplacementRequested",
                        "reason": "Lost"
                    },
                    "holder": {
                        "name": "Kim Sook"
                    },
                    "expiryDate": {
                        "year": "2027",
                        "month": "03"
                    },
                    "currency": "EUR",
                    "maskedNumber": "9292"
                }
            },
            {
                status: 200,
                body: {
                    "delivery": {
                        "additions": {
                            "key": "additions"
                        },
                        "transitSteps": [{
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }, {
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }]
                    },
                    "additions": {
                        "key": "additions"
                    },
                    "holder": {
                        "additions": {
                            "key": "additions"
                        },
                        "name": "name"
                    },
                    "type": "type",
                    "expiryDate": {
                        "month": "month",
                        "additions": {
                            "key": "additions"
                        },
                        "year": "year"
                    },
                    "maskedNumber": "maskedNumber",
                    "name": "name",
                    "subType": "subType",
                    "currency": "currency",
                    "id": "id",
                    "brand": "brand",
                    "replacement": {
                        "reason": "reason",
                        "replacingId": "replacingId",
                        "additions": {
                            "key": "additions"
                        },
                        "replacedById": "replacedById",
                        "status": "status"
                    },
                    "limits": [{
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }, {
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }],
                    "status": "status"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/cards/{id}/pin/reset",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value"
                }
            },
            {
                status: 200,
                body: {
                    "delivery": {
                        "additions": {
                            "key": "additions"
                        },
                        "transitSteps": [{
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }, {
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }]
                    },
                    "additions": {
                        "key": "additions"
                    },
                    "holder": {
                        "additions": {
                            "key": "additions"
                        },
                        "name": "name"
                    },
                    "type": "type",
                    "expiryDate": {
                        "month": "month",
                        "additions": {
                            "key": "additions"
                        },
                        "year": "year"
                    },
                    "maskedNumber": "maskedNumber",
                    "name": "name",
                    "subType": "subType",
                    "currency": "currency",
                    "id": "id",
                    "brand": "brand",
                    "replacement": {
                        "reason": "reason",
                        "replacingId": "replacingId",
                        "additions": {
                            "key": "additions"
                        },
                        "replacedById": "replacedById",
                        "status": "status"
                    },
                    "limits": [{
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }, {
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }],
                    "status": "status"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/cards/{id}/lock-status",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                }
            },
            {
                status: 200,
                body: {
                    "id": "elon-card-6",
                    "brand": "american_express",
                    "type": "Credit",
                    "subType": "ATM",
                    "name": "Reserve",
                    "status": "Active",
                    "lockStatus": "UNLOCKED",
                    "replacement": {
                        "status": "NotUnderReplacement"
                    },
                    "holder": {
                        "name": "Elon"
                    },
                    "expiryDate": {
                        "year": "2047",
                        "month": "03"
                    },
                    "currency": "EUR",
                    "maskedNumber": "8291"
                }
            },
            {
                status: 200,
                body: {
                    "id": "john-card-1",
                    "brand": "visa",
                    "type": "Credit",
                    "subType": "ATM",
                    "name": "Gold",
                    "status": "Active",
                    "lockStatus": "LOCKED",
                    "replacement": {
                        "status": "NotUnderReplacement"
                    },
                    "holder": {
                        "name": "John Doe"
                    },
                    "expiryDate": {
                        "year": "2030",
                        "month": "06"
                    },
                    "currency": "EUR",
                    "maskedNumber": "5827",
                    "delivery": {
                        "transitSteps": [{
                                "name": "Ordered",
                                "status": "SUCCESS",
                                "stepDateTime": "2019-06-19T12:52:20.906Z"
                            }, {
                                "name": "Processed",
                                "status": "SUCCESS"
                            }, {
                                "name": "In Transit",
                                "status": "SUCCESS"
                            }, {
                                "name": "Delivered",
                                "status": "SUCCESS"
                            }]
                    },
                    "limits": [{
                            "id": "john-limit-1",
                            "channel": "ATM",
                            "frequency": "DAILY",
                            "amount": 5000,
                            "maxAmount": 1000,
                            "minAmount": 0
                        }, {
                            "id": "john-limit-2",
                            "channel": "ONLINE",
                            "frequency": "DAILY",
                            "amount": 20000,
                            "maxAmount": 9000,
                            "minAmount": 0
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value"
                }
            },
            {
                status: 200,
                body: {
                    "delivery": {
                        "additions": {
                            "key": "additions"
                        },
                        "transitSteps": [{
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }, {
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                "status": "SUCCESS"
                            }]
                    },
                    "additions": {
                        "key": "additions"
                    },
                    "holder": {
                        "additions": {
                            "key": "additions"
                        },
                        "name": "name"
                    },
                    "type": "type",
                    "expiryDate": {
                        "month": "month",
                        "additions": {
                            "key": "additions"
                        },
                        "year": "year"
                    },
                    "maskedNumber": "maskedNumber",
                    "name": "name",
                    "subType": "subType",
                    "currency": "currency",
                    "id": "id",
                    "brand": "brand",
                    "replacement": {
                        "reason": "reason",
                        "replacingId": "replacingId",
                        "additions": {
                            "key": "additions"
                        },
                        "replacedById": "replacedById",
                        "status": "status"
                    },
                    "limits": [{
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }, {
                            "minAmount": 1.4658129805029452,
                            "amount": 0.8008281904610115,
                            "additions": {
                                "key": "additions"
                            },
                            "channel": "channel",
                            "id": "id",
                            "maxAmount": 6.027456183070403,
                            "frequency": "frequency"
                        }],
                    "status": "status"
                }
            },
        ]
    },
]);

class TravelNoticesHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new CardsConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    createTravelNotice(requestParameters, observe = 'body', reportProgress = false, options) {
        const _travelNotice = requestParameters["travelNotice"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/travel-notices`, _travelNotice, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    createTravelNoticeUrl(requestParameters) {
        const _travelNotice = requestParameters["travelNotice"];
        return `${this.configuration.basePath}/client-api/v2/travel-notices`;
    }
    deleteTravelNoticeById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteTravelNoticeById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/travel-notices/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteTravelNoticeByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteTravelNoticeById.');
        }
        return `${this.configuration.basePath}/client-api/v2/travel-notices/${encodeURIComponent(String(_id))}`;
    }
    getTravelNoticeById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTravelNoticeById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/travel-notices/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getTravelNoticeByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTravelNoticeById.');
        }
        return `${this.configuration.basePath}/client-api/v2/travel-notices/${encodeURIComponent(String(_id))}`;
    }
    getTravelNotices(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/travel-notices`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getTravelNoticesUrl() {
        return `${this.configuration.basePath}/client-api/v2/travel-notices`;
    }
    updateTravelNotice(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateTravelNotice.');
        }
        const _travelNotice = requestParameters["travelNotice"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/travel-notices/${encodeURIComponent(String(_id))}`, _travelNotice, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateTravelNoticeUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateTravelNotice.');
        }
        const _travelNotice = requestParameters["travelNotice"];
        return `${this.configuration.basePath}/client-api/v2/travel-notices/${encodeURIComponent(String(_id))}`;
    }
}
TravelNoticesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticesHttpService, deps: [{ token: i1.HttpClient }, { token: CARDS_BASE_PATH, optional: true }, { token: CardsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
TravelNoticesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticesHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticesHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CARDS_BASE_PATH]
                }] }, { type: CardsConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const TravelNoticesHttpServiceCreateTravelNoticeMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/travel-notices",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": "sara-travel-notice-1",
                    "cardIds": ["sara-card-1"],
                    "departureDate": "2020-05-06",
                    "arrivalDate": "2020-05-10",
                    "destinations": [{
                            "country": "USA",
                            "region": "US-TX"
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/requestBody/content/application~1json/example"
                }
            },
            {
                status: 200,
                body: {
                    "id": "john-travel-notice-1",
                    "cardIds": ["john-card-1", "john-card-2"],
                    "departureDate": "2020-01-09",
                    "arrivalDate": "2020-01-18",
                    "destinations": [{
                            "country": "NL"
                        }],
                    "contact": {
                        "phoneNumber": "+1 646 432 3000"
                    }
                }
            },
            {
                status: 200,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "destinations": [{
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "region": "region"
                        }, {
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "region": "region"
                        }],
                    "contact": {
                        "phoneNumber": "phoneNumber",
                        "additions": {
                            "key": "additions"
                        }
                    },
                    "id": "id",
                    "departureDate": "departureDate",
                    "cardIds": ["cardIds", "cardIds"],
                    "arrivalDate": "arrivalDate"
                }
            },
        ]
    }]);
const TravelNoticesHttpServiceDeleteTravelNoticeByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/travel-notices/{id}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
        ]
    }]);
const TravelNoticesHttpServiceGetTravelNoticeByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/travel-notices/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/sara/value"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/requestBody/content/application~1json/example"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/john/value"
                }
            },
            {
                status: 200,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "destinations": [{
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "region": "region"
                        }, {
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "region": "region"
                        }],
                    "contact": {
                        "phoneNumber": "phoneNumber",
                        "additions": {
                            "key": "additions"
                        }
                    },
                    "id": "id",
                    "departureDate": "departureDate",
                    "cardIds": ["cardIds", "cardIds"],
                    "arrivalDate": "arrivalDate"
                }
            },
        ]
    }]);
const TravelNoticesHttpServiceGetTravelNoticesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/travel-notices",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "sara-travel-notice-1",
                        "cardIds": ["sara-card-1", "sara-card-4"],
                        "departureDate": "2020-01-09",
                        "arrivalDate": "2020-01-18",
                        "destinations": [{
                                "country": "MEX"
                            }, {
                                "country": "USA",
                                "region": "US-TX"
                            }]
                    }, {
                        "id": "sara-travel-notice-2",
                        "cardIds": ["sara-card-1", "sara-card-2", "sara-card-4", "sara-card-5"],
                        "departureDate": "2019-12-10",
                        "arrivalDate": "2019-12-23",
                        "destinations": [{
                                "country": "JPN"
                            }, {
                                "country": "USA",
                                "region": "US-CA"
                            }],
                        "contact": {
                            "phoneNumber": "+1 646 432 3000"
                        }
                    }]
            },
            {
                status: 200,
                body: [{
                        "id": "elon-travel-notice-1",
                        "cardIds": ["elon-card-1"],
                        "departureDate": "2020-05-06",
                        "arrivalDate": "2020-05-10",
                        "destinations": [{
                                "country": "USA",
                                "region": "US-TX"
                            }, {
                                "country": "MEX"
                            }]
                    }, {
                        "id": "elon-travel-notice-2",
                        "cardIds": ["elon-card-1", "elon-card-2", "elon-card-3", "elon-card-4"],
                        "departureDate": "2019-12-10",
                        "arrivalDate": "2019-12-23",
                        "destinations": [{
                                "country": "JPN"
                            }, {
                                "country": "USA",
                                "region": "US-CA"
                            }],
                        "contact": {
                            "phoneNumber": "+1 646 432 3000"
                        }
                    }, {
                        "id": "elon-travel-notice-3",
                        "cardIds": ["elon-card-4"],
                        "departureDate": "2019-07-23",
                        "arrivalDate": "2020-08-11",
                        "destinations": [{
                                "country": "KHM"
                            }, {
                                "country": "KOR"
                            }, {
                                "country": "IND"
                            }],
                        "contact": {
                            "phoneNumber": "+1 646 432 3000"
                        }
                    }]
            },
            {
                status: 200,
                body: [{
                        "id": "john-travel-notice-1",
                        "cardIds": ["john-card-1", "john-card-2"],
                        "departureDate": "2020-01-09",
                        "arrivalDate": "2020-01-18",
                        "destinations": [{
                                "country": "NL"
                            }],
                        "contact": {
                            "phoneNumber": "+1 646 432 3000"
                        }
                    }]
            },
            {
                status: 200,
                body: []
            },
            {
                status: 200,
                body: []
            },
        ]
    }]);
const TravelNoticesHttpServiceUpdateTravelNoticeMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/travel-notices/{id}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/sara/value"
                }
            },
            {
                status: 200,
                body: {
                    "id": "elon-travel-notice-1",
                    "cardIds": ["elon-card-1", "elon-card-6"],
                    "departureDate": "2020-05-06",
                    "arrivalDate": "2020-05-10",
                    "destinations": [{
                            "country": "USA",
                            "region": "US-TX"
                        }, {
                            "country": "MEX"
                        }],
                    "contact": {
                        "phoneNumber": "Other_Number"
                    }
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/john/value"
                }
            },
            {
                status: 200,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "destinations": [{
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "region": "region"
                        }, {
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "region": "region"
                        }],
                    "contact": {
                        "phoneNumber": "phoneNumber",
                        "additions": {
                            "key": "additions"
                        }
                    },
                    "id": "id",
                    "departureDate": "departureDate",
                    "cardIds": ["cardIds", "cardIds"],
                    "arrivalDate": "arrivalDate"
                }
            },
        ]
    }]);
const TravelNoticesHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/travel-notices",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": "sara-travel-notice-1",
                    "cardIds": ["sara-card-1"],
                    "departureDate": "2020-05-06",
                    "arrivalDate": "2020-05-10",
                    "destinations": [{
                            "country": "USA",
                            "region": "US-TX"
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/requestBody/content/application~1json/example"
                }
            },
            {
                status: 200,
                body: {
                    "id": "john-travel-notice-1",
                    "cardIds": ["john-card-1", "john-card-2"],
                    "departureDate": "2020-01-09",
                    "arrivalDate": "2020-01-18",
                    "destinations": [{
                            "country": "NL"
                        }],
                    "contact": {
                        "phoneNumber": "+1 646 432 3000"
                    }
                }
            },
            {
                status: 200,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "destinations": [{
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "region": "region"
                        }, {
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "region": "region"
                        }],
                    "contact": {
                        "phoneNumber": "phoneNumber",
                        "additions": {
                            "key": "additions"
                        }
                    },
                    "id": "id",
                    "departureDate": "departureDate",
                    "cardIds": ["cardIds", "cardIds"],
                    "arrivalDate": "arrivalDate"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/travel-notices/{id}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/travel-notices/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/sara/value"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/requestBody/content/application~1json/example"
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/john/value"
                }
            },
            {
                status: 200,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "destinations": [{
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "region": "region"
                        }, {
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "region": "region"
                        }],
                    "contact": {
                        "phoneNumber": "phoneNumber",
                        "additions": {
                            "key": "additions"
                        }
                    },
                    "id": "id",
                    "departureDate": "departureDate",
                    "cardIds": ["cardIds", "cardIds"],
                    "arrivalDate": "arrivalDate"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/travel-notices",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "sara-travel-notice-1",
                        "cardIds": ["sara-card-1", "sara-card-4"],
                        "departureDate": "2020-01-09",
                        "arrivalDate": "2020-01-18",
                        "destinations": [{
                                "country": "MEX"
                            }, {
                                "country": "USA",
                                "region": "US-TX"
                            }]
                    }, {
                        "id": "sara-travel-notice-2",
                        "cardIds": ["sara-card-1", "sara-card-2", "sara-card-4", "sara-card-5"],
                        "departureDate": "2019-12-10",
                        "arrivalDate": "2019-12-23",
                        "destinations": [{
                                "country": "JPN"
                            }, {
                                "country": "USA",
                                "region": "US-CA"
                            }],
                        "contact": {
                            "phoneNumber": "+1 646 432 3000"
                        }
                    }]
            },
            {
                status: 200,
                body: [{
                        "id": "elon-travel-notice-1",
                        "cardIds": ["elon-card-1"],
                        "departureDate": "2020-05-06",
                        "arrivalDate": "2020-05-10",
                        "destinations": [{
                                "country": "USA",
                                "region": "US-TX"
                            }, {
                                "country": "MEX"
                            }]
                    }, {
                        "id": "elon-travel-notice-2",
                        "cardIds": ["elon-card-1", "elon-card-2", "elon-card-3", "elon-card-4"],
                        "departureDate": "2019-12-10",
                        "arrivalDate": "2019-12-23",
                        "destinations": [{
                                "country": "JPN"
                            }, {
                                "country": "USA",
                                "region": "US-CA"
                            }],
                        "contact": {
                            "phoneNumber": "+1 646 432 3000"
                        }
                    }, {
                        "id": "elon-travel-notice-3",
                        "cardIds": ["elon-card-4"],
                        "departureDate": "2019-07-23",
                        "arrivalDate": "2020-08-11",
                        "destinations": [{
                                "country": "KHM"
                            }, {
                                "country": "KOR"
                            }, {
                                "country": "IND"
                            }],
                        "contact": {
                            "phoneNumber": "+1 646 432 3000"
                        }
                    }]
            },
            {
                status: 200,
                body: [{
                        "id": "john-travel-notice-1",
                        "cardIds": ["john-card-1", "john-card-2"],
                        "departureDate": "2020-01-09",
                        "arrivalDate": "2020-01-18",
                        "destinations": [{
                                "country": "NL"
                            }],
                        "contact": {
                            "phoneNumber": "+1 646 432 3000"
                        }
                    }]
            },
            {
                status: 200,
                body: []
            },
            {
                status: 200,
                body: []
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/travel-notices/{id}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/sara/value"
                }
            },
            {
                status: 200,
                body: {
                    "id": "elon-travel-notice-1",
                    "cardIds": ["elon-card-1", "elon-card-6"],
                    "departureDate": "2020-05-06",
                    "arrivalDate": "2020-05-10",
                    "destinations": [{
                            "country": "USA",
                            "region": "US-TX"
                        }, {
                            "country": "MEX"
                        }],
                    "contact": {
                        "phoneNumber": "Other_Number"
                    }
                }
            },
            {
                status: 200,
                body: {
                    "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/john/value"
                }
            },
            {
                status: 200,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "destinations": [{
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "region": "region"
                        }, {
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "region": "region"
                        }],
                    "contact": {
                        "phoneNumber": "phoneNumber",
                        "additions": {
                            "key": "additions"
                        }
                    },
                    "id": "id",
                    "departureDate": "departureDate",
                    "cardIds": ["cardIds", "cardIds"],
                    "arrivalDate": "arrivalDate"
                }
            },
        ]
    },
]);

export { CARDS_BASE_PATH, COLLECTION_FORMATS, CONFIG_TOKEN, CardsApiModule, CardsConfiguration, CardsHttpService, CardsHttpServiceActivateMocksProvider, CardsHttpServiceChangeLimitsMocksProvider, CardsHttpServiceGetCardByIdMocksProvider, CardsHttpServiceGetCardsMocksProvider, CardsHttpServiceMocksProvider, CardsHttpServiceRequestPinMocksProvider, CardsHttpServiceRequestReplacementMocksProvider, CardsHttpServiceResetPinMocksProvider, CardsHttpServiceUpdateLockStatusMocksProvider, DeliveryTransitStep, LockStatus, TravelNoticesHttpService, TravelNoticesHttpServiceCreateTravelNoticeMocksProvider, TravelNoticesHttpServiceDeleteTravelNoticeByIdMocksProvider, TravelNoticesHttpServiceGetTravelNoticeByIdMocksProvider, TravelNoticesHttpServiceGetTravelNoticesMocksProvider, TravelNoticesHttpServiceMocksProvider, TravelNoticesHttpServiceUpdateTravelNoticeMocksProvider };
//# sourceMappingURL=backbase-cards-http-ang.js.map
