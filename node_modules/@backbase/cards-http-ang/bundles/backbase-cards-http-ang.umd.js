(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/cards-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["cards-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    exports.DeliveryTransitStep = void 0;
    (function (DeliveryTransitStep) {
        DeliveryTransitStep.StatusEnum = {
            SUCCESS: 'SUCCESS',
            FAILED: 'FAILED',
            PENDING: 'PENDING'
        };
    })(exports.DeliveryTransitStep || (exports.DeliveryTransitStep = {}));

    var LockStatus = {
        LOCKED: 'LOCKED',
        UNLOCKED: 'UNLOCKED'
    };

    var CARDS_BASE_PATH = new i0.InjectionToken('CARDS_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var CardsConfiguration = /** @class */ (function () {
        function CardsConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        CardsConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        CardsConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        CardsConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        CardsConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return CardsConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module CardsConfiguration');

    var CardsApiModule = /** @class */ (function () {
        function CardsApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('CardsApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        CardsApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: CardsApiModule,
                providers: [{ provide: CardsConfiguration, useFactory: configurationFactory }]
            };
        };
        return CardsApiModule;
    }());
    CardsApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsApiModule, deps: [{ token: CardsApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: CardsConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CardsApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsApiModule });
    CardsApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: CardsApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: CardsConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var CardsHttpService = /** @class */ (function () {
        function CardsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new CardsConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        CardsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        CardsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        CardsHttpService.prototype.activate = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling activate.');
            }
            var _activatePost = requestParameters["activatePost"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/cards/" + encodeURIComponent(String(_id)) + "/activation", _activatePost, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CardsHttpService.prototype.activateUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling activate.');
            }
            var _activatePost = requestParameters["activatePost"];
            return this.configuration.basePath + "/client-api/v2/cards/" + encodeURIComponent(String(_id)) + "/activation";
        };
        CardsHttpService.prototype.changeLimits = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling changeLimits.');
            }
            var _changeLimitsPostItem = requestParameters["changeLimitsPostItem"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/cards/" + encodeURIComponent(String(_id)) + "/limits", _changeLimitsPostItem, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CardsHttpService.prototype.changeLimitsUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling changeLimits.');
            }
            var _changeLimitsPostItem = requestParameters["changeLimitsPostItem"];
            return this.configuration.basePath + "/client-api/v2/cards/" + encodeURIComponent(String(_id)) + "/limits";
        };
        CardsHttpService.prototype.getCardById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCardById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/cards/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CardsHttpService.prototype.getCardByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCardById.');
            }
            return this.configuration.basePath + "/client-api/v2/cards/" + encodeURIComponent(String(_id));
        };
        CardsHttpService.prototype.getCards = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _ids = requestParameters["ids"];
            var _status = requestParameters["status"];
            var _types = requestParameters["types"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_ids) {
                _ids.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'ids');
                });
            }
            if (_status) {
                _status.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'status');
                });
            }
            if (_types) {
                _types.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'types');
                });
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/cards", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CardsHttpService.prototype.getCardsUrl = function (requestParameters) {
            var _this = this;
            var _ids = requestParameters["ids"];
            var _status = requestParameters["status"];
            var _types = requestParameters["types"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_ids) {
                _ids.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'ids');
                });
            }
            if (_status) {
                _status.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'status');
                });
            }
            if (_types) {
                _types.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'types');
                });
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/cards" + (queryString ? "?" + queryString : '');
        };
        CardsHttpService.prototype.requestPin = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling requestPin.');
            }
            var _requestPinPost = requestParameters["requestPinPost"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/cards/" + encodeURIComponent(String(_id)) + "/pin/request", _requestPinPost, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CardsHttpService.prototype.requestPinUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling requestPin.');
            }
            var _requestPinPost = requestParameters["requestPinPost"];
            return this.configuration.basePath + "/client-api/v2/cards/" + encodeURIComponent(String(_id)) + "/pin/request";
        };
        CardsHttpService.prototype.requestReplacement = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling requestReplacement.');
            }
            var _requestReplacementPost = requestParameters["requestReplacementPost"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/cards/" + encodeURIComponent(String(_id)) + "/replacement", _requestReplacementPost, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CardsHttpService.prototype.requestReplacementUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling requestReplacement.');
            }
            var _requestReplacementPost = requestParameters["requestReplacementPost"];
            return this.configuration.basePath + "/client-api/v2/cards/" + encodeURIComponent(String(_id)) + "/replacement";
        };
        CardsHttpService.prototype.resetPin = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling resetPin.');
            }
            var _resetPinPost = requestParameters["resetPinPost"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/cards/" + encodeURIComponent(String(_id)) + "/pin/reset", _resetPinPost, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CardsHttpService.prototype.resetPinUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling resetPin.');
            }
            var _resetPinPost = requestParameters["resetPinPost"];
            return this.configuration.basePath + "/client-api/v2/cards/" + encodeURIComponent(String(_id)) + "/pin/reset";
        };
        CardsHttpService.prototype.updateLockStatus = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateLockStatus.');
            }
            var _lockStatusPost = requestParameters["lockStatusPost"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/cards/" + encodeURIComponent(String(_id)) + "/lock-status", _lockStatusPost, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CardsHttpService.prototype.updateLockStatusUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateLockStatus.');
            }
            var _lockStatusPost = requestParameters["lockStatusPost"];
            return this.configuration.basePath + "/client-api/v2/cards/" + encodeURIComponent(String(_id)) + "/lock-status";
        };
        return CardsHttpService;
    }());
    CardsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: CARDS_BASE_PATH, optional: true }, { token: CardsConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CardsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [CARDS_BASE_PATH]
                        }] }, { type: CardsConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var CardsHttpServiceActivateMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/cards/{id}/activation",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "sara-card-3",
                        "brand": "mastercard",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Gold Card",
                        "status": "Inactive",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Sara Williams"
                        },
                        "expiryDate": {
                            "year": "2022",
                            "month": "12"
                        },
                        "currency": "USD",
                        "maskedNumber": "5237",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2020-05-04T12:52:20.906+00:00"
                                }, {
                                    "name": "Processed",
                                    "status": "PENDING"
                                }, {
                                    "name": "In Transit",
                                    "status": "PENDING"
                                }, {
                                    "name": "Delivered",
                                    "status": "PENDING"
                                }]
                        },
                        "limits": [{
                                "id": "sara-limit-1",
                                "channel": "ATM",
                                "frequency": "DAILY",
                                "amount": 3000,
                                "maxAmount": 10000,
                                "minAmount": 0
                            }, {
                                "id": "sara-limit-2",
                                "channel": "ONLINE",
                                "frequency": "DAILY",
                                "amount": 2000,
                                "maxAmount": 10000,
                                "minAmount": 0
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "kim-card-2",
                        "brand": "mastercard",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Copper",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Kim Sook"
                        },
                        "expiryDate": {
                            "year": "2027",
                            "month": "03"
                        },
                        "currency": "EUR",
                        "maskedNumber": "9292"
                    }
                },
                {
                    status: 200,
                    body: {
                        "delivery": {
                            "additions": {
                                "key": "additions"
                            },
                            "transitSteps": [{
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }, {
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }]
                        },
                        "additions": {
                            "key": "additions"
                        },
                        "holder": {
                            "additions": {
                                "key": "additions"
                            },
                            "name": "name"
                        },
                        "type": "type",
                        "expiryDate": {
                            "month": "month",
                            "additions": {
                                "key": "additions"
                            },
                            "year": "year"
                        },
                        "maskedNumber": "maskedNumber",
                        "name": "name",
                        "subType": "subType",
                        "currency": "currency",
                        "id": "id",
                        "brand": "brand",
                        "replacement": {
                            "reason": "reason",
                            "replacingId": "replacingId",
                            "additions": {
                                "key": "additions"
                            },
                            "replacedById": "replacedById",
                            "status": "status"
                        },
                        "limits": [{
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }, {
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }],
                        "status": "status"
                    }
                },
            ]
        }]);
    var CardsHttpServiceChangeLimitsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/cards/{id}/limits",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "john-card-1",
                        "brand": "visa",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Gold",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "John Doe"
                        },
                        "expiryDate": {
                            "year": "2030",
                            "month": "06"
                        },
                        "currency": "EUR",
                        "maskedNumber": "5827",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-19T12:52:20.906Z"
                                }, {
                                    "name": "Processed",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "In Transit",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "Delivered",
                                    "status": "SUCCESS"
                                }]
                        },
                        "limits": [{
                                "id": "john-limit-1",
                                "channel": "ATM",
                                "frequency": "WEEKLY",
                                "amount": 1000,
                                "maxAmount": 9000,
                                "minAmount": 0
                            }, {
                                "id": "john-limit-2",
                                "channel": "ONLINE",
                                "frequency": "DAILY",
                                "amount": 20000,
                                "maxAmount": 9000,
                                "minAmount": 0
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "delivery": {
                            "additions": {
                                "key": "additions"
                            },
                            "transitSteps": [{
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }, {
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }]
                        },
                        "additions": {
                            "key": "additions"
                        },
                        "holder": {
                            "additions": {
                                "key": "additions"
                            },
                            "name": "name"
                        },
                        "type": "type",
                        "expiryDate": {
                            "month": "month",
                            "additions": {
                                "key": "additions"
                            },
                            "year": "year"
                        },
                        "maskedNumber": "maskedNumber",
                        "name": "name",
                        "subType": "subType",
                        "currency": "currency",
                        "id": "id",
                        "brand": "brand",
                        "replacement": {
                            "reason": "reason",
                            "replacingId": "replacingId",
                            "additions": {
                                "key": "additions"
                            },
                            "replacedById": "replacedById",
                            "status": "status"
                        },
                        "limits": [{
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }, {
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }],
                        "status": "status"
                    }
                },
            ]
        }]);
    var CardsHttpServiceGetCardByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/cards/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "sara-card-1",
                        "brand": "mastercard",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Gold Card",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Sara Williams"
                        },
                        "expiryDate": {
                            "year": "2022",
                            "month": "12"
                        },
                        "currency": "USD",
                        "maskedNumber": "5235",
                        "limits": [{
                                "id": "sara-limit-1",
                                "channel": "ATM",
                                "frequency": "DAILY",
                                "amount": 3000,
                                "maxAmount": 10000,
                                "minAmount": 0
                            }, {
                                "id": "sara-limit-2",
                                "channel": "ONLINE",
                                "frequency": "DAILY",
                                "amount": 2000,
                                "maxAmount": 10000,
                                "minAmount": 0
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "elon-card-1",
                        "brand": "mastercard",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "World Elite",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Elon"
                        },
                        "expiryDate": {
                            "year": "2050",
                            "month": "12"
                        },
                        "currency": "EUR",
                        "maskedNumber": "5235",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-19T12:52:20.906Z"
                                }, {
                                    "name": "Processed",
                                    "status": "PENDING"
                                }, {
                                    "name": "In Transit",
                                    "status": "PENDING"
                                }, {
                                    "name": "Delivered",
                                    "status": "PENDING",
                                    "stepDateTime": "2019-06-20T14:21:25.001Z"
                                }]
                        },
                        "limits": [{
                                "id": "elon-limit-1",
                                "channel": "ATM",
                                "frequency": "DAILY",
                                "amount": 500000,
                                "maxAmount": 100000,
                                "minAmount": 0
                            }, {
                                "id": "elon-limit-2",
                                "channel": "ONLINE",
                                "frequency": "DAILY",
                                "amount": 1000000,
                                "maxAmount": 800000,
                                "minAmount": 10000
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "john-card-1",
                        "brand": "visa",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Gold",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "John Doe"
                        },
                        "expiryDate": {
                            "year": "2030",
                            "month": "06"
                        },
                        "currency": "EUR",
                        "maskedNumber": "5827",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-19T12:52:20.906Z"
                                }, {
                                    "name": "Processed",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "In Transit",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "Delivered",
                                    "status": "SUCCESS"
                                }]
                        },
                        "limits": [{
                                "id": "john-limit-1",
                                "channel": "ATM",
                                "frequency": "DAILY",
                                "amount": 5000,
                                "maxAmount": 1000,
                                "minAmount": 0
                            }, {
                                "id": "john-limit-2",
                                "channel": "ONLINE",
                                "frequency": "DAILY",
                                "amount": 20000,
                                "maxAmount": 9000,
                                "minAmount": 0
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "kim-card-1",
                        "brand": "mastercard",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Copper",
                        "status": "Inactive",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Kim Sook"
                        },
                        "expiryDate": {
                            "year": "2027",
                            "month": "03"
                        },
                        "currency": "EUR",
                        "maskedNumber": "9292"
                    }
                },
                {
                    status: 200,
                    body: {
                        "delivery": {
                            "additions": {
                                "key": "additions"
                            },
                            "transitSteps": [{
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }, {
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }]
                        },
                        "additions": {
                            "key": "additions"
                        },
                        "holder": {
                            "additions": {
                                "key": "additions"
                            },
                            "name": "name"
                        },
                        "type": "type",
                        "expiryDate": {
                            "month": "month",
                            "additions": {
                                "key": "additions"
                            },
                            "year": "year"
                        },
                        "maskedNumber": "maskedNumber",
                        "name": "name",
                        "subType": "subType",
                        "currency": "currency",
                        "id": "id",
                        "brand": "brand",
                        "replacement": {
                            "reason": "reason",
                            "replacingId": "replacingId",
                            "additions": {
                                "key": "additions"
                            },
                            "replacedById": "replacedById",
                            "status": "status"
                        },
                        "limits": [{
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }, {
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }],
                        "status": "status"
                    }
                },
            ]
        }]);
    var CardsHttpServiceGetCardsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/cards",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "sara-card-1",
                            "brand": "mastercard",
                            "type": "Credit",
                            "subType": "ATM",
                            "name": "Gold Card",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Sara Williams"
                            },
                            "expiryDate": {
                                "year": "2022",
                                "month": "12"
                            },
                            "currency": "USD",
                            "maskedNumber": "5235"
                        }, {
                            "id": "sara-card-2",
                            "brand": "visa",
                            "type": "Credit",
                            "subType": "ATM",
                            "name": "Green Card",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Sara Williams"
                            },
                            "expiryDate": {
                                "year": "2022",
                                "month": "01"
                            },
                            "currency": "USD",
                            "maskedNumber": "5236"
                        }, {
                            "id": "sara-card-3",
                            "brand": "mastercard",
                            "type": "Credit",
                            "subType": "ATM",
                            "name": "Gold Card",
                            "status": "Inactive",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Sara Williams"
                            },
                            "expiryDate": {
                                "year": "2022",
                                "month": "12"
                            },
                            "currency": "USD",
                            "maskedNumber": "5237",
                            "delivery": {
                                "transitSteps": [{
                                        "name": "Ordered",
                                        "status": "SUCCESS",
                                        "stepDateTime": "2020-05-04T12:52:20.906+00:00"
                                    }, {
                                        "name": "Processed",
                                        "status": "PENDING"
                                    }, {
                                        "name": "In Transit",
                                        "status": "PENDING"
                                    }, {
                                        "name": "Delivered",
                                        "status": "PENDING"
                                    }]
                            }
                        }, {
                            "id": "sara-card-4",
                            "brand": "mastercard",
                            "type": "Debit",
                            "subType": "ATM",
                            "name": "Black Card",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Sara Williams"
                            },
                            "expiryDate": {
                                "year": "2022",
                                "month": "12"
                            },
                            "currency": "USD",
                            "maskedNumber": "6235"
                        }, {
                            "id": "sara-card-5",
                            "brand": "visa",
                            "type": "Debit",
                            "subType": "ATM",
                            "name": "Blue Card",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Sara Williams"
                            },
                            "expiryDate": {
                                "year": "2022",
                                "month": "12"
                            },
                            "currency": "USD",
                            "maskedNumber": "6236"
                        }]
                },
                {
                    status: 200,
                    body: [{
                            "id": "elon-card-1",
                            "brand": "mastercard",
                            "type": "Credit",
                            "subType": "ATM",
                            "name": "World Elite",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Elon"
                            },
                            "expiryDate": {
                                "year": "2050",
                                "month": "12"
                            },
                            "currency": "EUR",
                            "maskedNumber": "5235",
                            "delivery": {
                                "transitSteps": [{
                                        "name": "Ordered",
                                        "status": "SUCCESS",
                                        "stepDateTime": "2019-06-19T12:52:20.906Z"
                                    }, {
                                        "name": "Processed",
                                        "status": "PENDING"
                                    }, {
                                        "name": "In Transit",
                                        "status": "PENDING"
                                    }, {
                                        "name": "Delivered",
                                        "status": "PENDING",
                                        "stepDateTime": "2019-06-20T14:21:25.001Z"
                                    }]
                            }
                        }, {
                            "id": "elon-card-2",
                            "brand": "visa",
                            "type": "Credit",
                            "subType": "ATM",
                            "name": "Infinite Privilege",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Elon"
                            },
                            "expiryDate": {
                                "year": "2045",
                                "month": "01"
                            },
                            "currency": "EUR",
                            "maskedNumber": "6782"
                        }, {
                            "id": "elon-card-3",
                            "brand": "american_express",
                            "type": "Debit",
                            "subType": "ATM",
                            "name": "Reserve",
                            "status": "Cancelled",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "UnderReplacement",
                                "reason": "Lost",
                                "replacedById": "4"
                            },
                            "holder": {
                                "name": "Elon"
                            },
                            "expiryDate": {
                                "year": "2048",
                                "month": "06"
                            },
                            "currency": "EUR",
                            "maskedNumber": "1262"
                        }, {
                            "id": "elon-card-4",
                            "brand": "american_express",
                            "type": "Debit",
                            "subType": "ATM",
                            "name": "Reserve",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Elon"
                            },
                            "expiryDate": {
                                "year": "2048",
                                "month": "07"
                            },
                            "currency": "EUR",
                            "maskedNumber": "1289"
                        }, {
                            "id": "elon-card-5",
                            "brand": "mastercard",
                            "type": "Debit",
                            "subType": "ATM",
                            "name": "Platinum",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Elon"
                            },
                            "expiryDate": {
                                "year": "2050",
                                "month": "11"
                            },
                            "currency": "EUR",
                            "maskedNumber": "4627",
                            "delivery": {
                                "transitSteps": [{
                                        "name": "Ordered",
                                        "status": "SUCCESS",
                                        "stepDateTime": "2019-06-19T12:52:20.906Z"
                                    }, {
                                        "name": "Processed",
                                        "status": "SUCCESS",
                                        "stepDateTime": "2019-06-20T14:32:20.906Z"
                                    }, {
                                        "name": "In Transit",
                                        "status": "SUCCESS",
                                        "stepDateTime": "2019-06-20T15:12:20.906Z"
                                    }, {
                                        "name": "Delivered",
                                        "status": "SUCCESS",
                                        "stepDateTime": "2019-06-21T11:28:25.001Z"
                                    }]
                            }
                        }, {
                            "id": "elon-card-6",
                            "brand": "american_express",
                            "type": "Credit",
                            "subType": "ATM",
                            "name": "Reserve",
                            "status": "Active",
                            "lockStatus": "LOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Elon"
                            },
                            "expiryDate": {
                                "year": "2047",
                                "month": "03"
                            },
                            "currency": "EUR",
                            "maskedNumber": "8291"
                        }]
                },
                {
                    status: 200,
                    body: [{
                            "id": "john-card-1",
                            "brand": "visa",
                            "type": "Credit",
                            "subType": "ATM",
                            "name": "Gold",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "John Doe"
                            },
                            "expiryDate": {
                                "year": "2030",
                                "month": "06"
                            },
                            "currency": "EUR",
                            "maskedNumber": "5827",
                            "delivery": {
                                "transitSteps": [{
                                        "name": "Ordered",
                                        "status": "SUCCESS",
                                        "stepDateTime": "2019-06-19T12:52:20.906Z"
                                    }, {
                                        "name": "Processed",
                                        "status": "SUCCESS"
                                    }, {
                                        "name": "In Transit",
                                        "status": "SUCCESS"
                                    }, {
                                        "name": "Delivered",
                                        "status": "SUCCESS"
                                    }]
                            },
                            "limits": [{
                                    "id": "john-limit-1",
                                    "channel": "ATM",
                                    "frequency": "DAILY",
                                    "amount": 3000,
                                    "maxAmount": 9000,
                                    "minAmount": 0
                                }, {
                                    "id": "john-limit-2",
                                    "channel": "ONLINE",
                                    "frequency": "DAILY",
                                    "amount": 20000,
                                    "maxAmount": 9000,
                                    "minAmount": 0
                                }]
                        }, {
                            "id": "john-card-2",
                            "brand": "mastercard",
                            "type": "Debit",
                            "subType": "ATM",
                            "name": "Gold",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "John Doe"
                            },
                            "expiryDate": {
                                "year": "2031",
                                "month": "02"
                            },
                            "currency": "EUR",
                            "maskedNumber": "8299"
                        }]
                },
                {
                    status: 200,
                    body: [{
                            "id": "kim-card-1",
                            "brand": "mastercard",
                            "type": "Debit",
                            "subType": "ATM",
                            "name": "Copper",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Kim Sook"
                            },
                            "expiryDate": {
                                "year": "2027",
                                "month": "03"
                            },
                            "currency": "EUR",
                            "maskedNumber": "9292"
                        }, {
                            "id": "kim-card-2",
                            "brand": "visa",
                            "type": "Debit",
                            "subType": "ATM",
                            "name": "Iron",
                            "status": "Inactive",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Kim Sook"
                            },
                            "expiryDate": {
                                "year": "2010",
                                "month": "04"
                            },
                            "currency": "EUR",
                            "maskedNumber": "9494"
                        }, {
                            "id": "kim-card-3",
                            "brand": "visa",
                            "type": "Debit",
                            "subType": "ATM",
                            "name": "Iron",
                            "status": "Expired",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Kim Sook"
                            },
                            "expiryDate": {
                                "year": "2010",
                                "month": "04"
                            },
                            "currency": "EUR",
                            "maskedNumber": "9494"
                        }]
                },
                {
                    status: 200,
                    body: []
                },
            ]
        }]);
    var CardsHttpServiceRequestPinMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/cards/{id}/pin/request",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "delivery": {
                            "additions": {
                                "key": "additions"
                            },
                            "transitSteps": [{
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }, {
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }]
                        },
                        "additions": {
                            "key": "additions"
                        },
                        "holder": {
                            "additions": {
                                "key": "additions"
                            },
                            "name": "name"
                        },
                        "type": "type",
                        "expiryDate": {
                            "month": "month",
                            "additions": {
                                "key": "additions"
                            },
                            "year": "year"
                        },
                        "maskedNumber": "maskedNumber",
                        "name": "name",
                        "subType": "subType",
                        "currency": "currency",
                        "id": "id",
                        "brand": "brand",
                        "replacement": {
                            "reason": "reason",
                            "replacingId": "replacingId",
                            "additions": {
                                "key": "additions"
                            },
                            "replacedById": "replacedById",
                            "status": "status"
                        },
                        "limits": [{
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }, {
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }],
                        "status": "status"
                    }
                },
            ]
        }]);
    var CardsHttpServiceRequestReplacementMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/cards/{id}/replacement",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "elon-card-1",
                        "brand": "mastercard",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "World Elite",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "ReplacementRequested",
                            "reason": "Damaged"
                        },
                        "holder": {
                            "name": "Elon"
                        },
                        "expiryDate": {
                            "year": "2050",
                            "month": "12"
                        },
                        "currency": "EUR",
                        "maskedNumber": "5235",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-19T12:52:20.906Z"
                                }, {
                                    "name": "Processed",
                                    "status": "PENDING"
                                }]
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "john-card-1",
                        "brand": "visa",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Gold",
                        "status": "Inactive",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "ReplacementRequested",
                            "reason": "Stolen"
                        },
                        "holder": {
                            "name": "John Doe"
                        },
                        "expiryDate": {
                            "year": "2030",
                            "month": "06"
                        },
                        "currency": "EUR",
                        "maskedNumber": "5827",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-19T12:52:20.906Z"
                                }, {
                                    "name": "Processed",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "In Transit",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "Delivered",
                                    "status": "SUCCESS"
                                }]
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "kim-card-1",
                        "brand": "mastercard",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Copper",
                        "status": "Inactive",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "ReplacementRequested",
                            "reason": "Lost"
                        },
                        "holder": {
                            "name": "Kim Sook"
                        },
                        "expiryDate": {
                            "year": "2027",
                            "month": "03"
                        },
                        "currency": "EUR",
                        "maskedNumber": "9292"
                    }
                },
                {
                    status: 200,
                    body: {
                        "delivery": {
                            "additions": {
                                "key": "additions"
                            },
                            "transitSteps": [{
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }, {
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }]
                        },
                        "additions": {
                            "key": "additions"
                        },
                        "holder": {
                            "additions": {
                                "key": "additions"
                            },
                            "name": "name"
                        },
                        "type": "type",
                        "expiryDate": {
                            "month": "month",
                            "additions": {
                                "key": "additions"
                            },
                            "year": "year"
                        },
                        "maskedNumber": "maskedNumber",
                        "name": "name",
                        "subType": "subType",
                        "currency": "currency",
                        "id": "id",
                        "brand": "brand",
                        "replacement": {
                            "reason": "reason",
                            "replacingId": "replacingId",
                            "additions": {
                                "key": "additions"
                            },
                            "replacedById": "replacedById",
                            "status": "status"
                        },
                        "limits": [{
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }, {
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }],
                        "status": "status"
                    }
                },
            ]
        }]);
    var CardsHttpServiceResetPinMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/cards/{id}/pin/reset",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "delivery": {
                            "additions": {
                                "key": "additions"
                            },
                            "transitSteps": [{
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }, {
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }]
                        },
                        "additions": {
                            "key": "additions"
                        },
                        "holder": {
                            "additions": {
                                "key": "additions"
                            },
                            "name": "name"
                        },
                        "type": "type",
                        "expiryDate": {
                            "month": "month",
                            "additions": {
                                "key": "additions"
                            },
                            "year": "year"
                        },
                        "maskedNumber": "maskedNumber",
                        "name": "name",
                        "subType": "subType",
                        "currency": "currency",
                        "id": "id",
                        "brand": "brand",
                        "replacement": {
                            "reason": "reason",
                            "replacingId": "replacingId",
                            "additions": {
                                "key": "additions"
                            },
                            "replacedById": "replacedById",
                            "status": "status"
                        },
                        "limits": [{
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }, {
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }],
                        "status": "status"
                    }
                },
            ]
        }]);
    var CardsHttpServiceUpdateLockStatusMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/cards/{id}/lock-status",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "elon-card-6",
                        "brand": "american_express",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Reserve",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Elon"
                        },
                        "expiryDate": {
                            "year": "2047",
                            "month": "03"
                        },
                        "currency": "EUR",
                        "maskedNumber": "8291"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "john-card-1",
                        "brand": "visa",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Gold",
                        "status": "Active",
                        "lockStatus": "LOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "John Doe"
                        },
                        "expiryDate": {
                            "year": "2030",
                            "month": "06"
                        },
                        "currency": "EUR",
                        "maskedNumber": "5827",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-19T12:52:20.906Z"
                                }, {
                                    "name": "Processed",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "In Transit",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "Delivered",
                                    "status": "SUCCESS"
                                }]
                        },
                        "limits": [{
                                "id": "john-limit-1",
                                "channel": "ATM",
                                "frequency": "DAILY",
                                "amount": 5000,
                                "maxAmount": 1000,
                                "minAmount": 0
                            }, {
                                "id": "john-limit-2",
                                "channel": "ONLINE",
                                "frequency": "DAILY",
                                "amount": 20000,
                                "maxAmount": 9000,
                                "minAmount": 0
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "delivery": {
                            "additions": {
                                "key": "additions"
                            },
                            "transitSteps": [{
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }, {
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }]
                        },
                        "additions": {
                            "key": "additions"
                        },
                        "holder": {
                            "additions": {
                                "key": "additions"
                            },
                            "name": "name"
                        },
                        "type": "type",
                        "expiryDate": {
                            "month": "month",
                            "additions": {
                                "key": "additions"
                            },
                            "year": "year"
                        },
                        "maskedNumber": "maskedNumber",
                        "name": "name",
                        "subType": "subType",
                        "currency": "currency",
                        "id": "id",
                        "brand": "brand",
                        "replacement": {
                            "reason": "reason",
                            "replacingId": "replacingId",
                            "additions": {
                                "key": "additions"
                            },
                            "replacedById": "replacedById",
                            "status": "status"
                        },
                        "limits": [{
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }, {
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }],
                        "status": "status"
                    }
                },
            ]
        }]);
    var CardsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/cards/{id}/activation",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "sara-card-3",
                        "brand": "mastercard",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Gold Card",
                        "status": "Inactive",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Sara Williams"
                        },
                        "expiryDate": {
                            "year": "2022",
                            "month": "12"
                        },
                        "currency": "USD",
                        "maskedNumber": "5237",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2020-05-04T12:52:20.906+00:00"
                                }, {
                                    "name": "Processed",
                                    "status": "PENDING"
                                }, {
                                    "name": "In Transit",
                                    "status": "PENDING"
                                }, {
                                    "name": "Delivered",
                                    "status": "PENDING"
                                }]
                        },
                        "limits": [{
                                "id": "sara-limit-1",
                                "channel": "ATM",
                                "frequency": "DAILY",
                                "amount": 3000,
                                "maxAmount": 10000,
                                "minAmount": 0
                            }, {
                                "id": "sara-limit-2",
                                "channel": "ONLINE",
                                "frequency": "DAILY",
                                "amount": 2000,
                                "maxAmount": 10000,
                                "minAmount": 0
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "kim-card-2",
                        "brand": "mastercard",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Copper",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Kim Sook"
                        },
                        "expiryDate": {
                            "year": "2027",
                            "month": "03"
                        },
                        "currency": "EUR",
                        "maskedNumber": "9292"
                    }
                },
                {
                    status: 200,
                    body: {
                        "delivery": {
                            "additions": {
                                "key": "additions"
                            },
                            "transitSteps": [{
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }, {
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }]
                        },
                        "additions": {
                            "key": "additions"
                        },
                        "holder": {
                            "additions": {
                                "key": "additions"
                            },
                            "name": "name"
                        },
                        "type": "type",
                        "expiryDate": {
                            "month": "month",
                            "additions": {
                                "key": "additions"
                            },
                            "year": "year"
                        },
                        "maskedNumber": "maskedNumber",
                        "name": "name",
                        "subType": "subType",
                        "currency": "currency",
                        "id": "id",
                        "brand": "brand",
                        "replacement": {
                            "reason": "reason",
                            "replacingId": "replacingId",
                            "additions": {
                                "key": "additions"
                            },
                            "replacedById": "replacedById",
                            "status": "status"
                        },
                        "limits": [{
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }, {
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }],
                        "status": "status"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/cards/{id}/limits",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "john-card-1",
                        "brand": "visa",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Gold",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "John Doe"
                        },
                        "expiryDate": {
                            "year": "2030",
                            "month": "06"
                        },
                        "currency": "EUR",
                        "maskedNumber": "5827",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-19T12:52:20.906Z"
                                }, {
                                    "name": "Processed",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "In Transit",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "Delivered",
                                    "status": "SUCCESS"
                                }]
                        },
                        "limits": [{
                                "id": "john-limit-1",
                                "channel": "ATM",
                                "frequency": "WEEKLY",
                                "amount": 1000,
                                "maxAmount": 9000,
                                "minAmount": 0
                            }, {
                                "id": "john-limit-2",
                                "channel": "ONLINE",
                                "frequency": "DAILY",
                                "amount": 20000,
                                "maxAmount": 9000,
                                "minAmount": 0
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "delivery": {
                            "additions": {
                                "key": "additions"
                            },
                            "transitSteps": [{
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }, {
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }]
                        },
                        "additions": {
                            "key": "additions"
                        },
                        "holder": {
                            "additions": {
                                "key": "additions"
                            },
                            "name": "name"
                        },
                        "type": "type",
                        "expiryDate": {
                            "month": "month",
                            "additions": {
                                "key": "additions"
                            },
                            "year": "year"
                        },
                        "maskedNumber": "maskedNumber",
                        "name": "name",
                        "subType": "subType",
                        "currency": "currency",
                        "id": "id",
                        "brand": "brand",
                        "replacement": {
                            "reason": "reason",
                            "replacingId": "replacingId",
                            "additions": {
                                "key": "additions"
                            },
                            "replacedById": "replacedById",
                            "status": "status"
                        },
                        "limits": [{
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }, {
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }],
                        "status": "status"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/cards/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "sara-card-1",
                        "brand": "mastercard",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Gold Card",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Sara Williams"
                        },
                        "expiryDate": {
                            "year": "2022",
                            "month": "12"
                        },
                        "currency": "USD",
                        "maskedNumber": "5235",
                        "limits": [{
                                "id": "sara-limit-1",
                                "channel": "ATM",
                                "frequency": "DAILY",
                                "amount": 3000,
                                "maxAmount": 10000,
                                "minAmount": 0
                            }, {
                                "id": "sara-limit-2",
                                "channel": "ONLINE",
                                "frequency": "DAILY",
                                "amount": 2000,
                                "maxAmount": 10000,
                                "minAmount": 0
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "elon-card-1",
                        "brand": "mastercard",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "World Elite",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Elon"
                        },
                        "expiryDate": {
                            "year": "2050",
                            "month": "12"
                        },
                        "currency": "EUR",
                        "maskedNumber": "5235",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-19T12:52:20.906Z"
                                }, {
                                    "name": "Processed",
                                    "status": "PENDING"
                                }, {
                                    "name": "In Transit",
                                    "status": "PENDING"
                                }, {
                                    "name": "Delivered",
                                    "status": "PENDING",
                                    "stepDateTime": "2019-06-20T14:21:25.001Z"
                                }]
                        },
                        "limits": [{
                                "id": "elon-limit-1",
                                "channel": "ATM",
                                "frequency": "DAILY",
                                "amount": 500000,
                                "maxAmount": 100000,
                                "minAmount": 0
                            }, {
                                "id": "elon-limit-2",
                                "channel": "ONLINE",
                                "frequency": "DAILY",
                                "amount": 1000000,
                                "maxAmount": 800000,
                                "minAmount": 10000
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "john-card-1",
                        "brand": "visa",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Gold",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "John Doe"
                        },
                        "expiryDate": {
                            "year": "2030",
                            "month": "06"
                        },
                        "currency": "EUR",
                        "maskedNumber": "5827",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-19T12:52:20.906Z"
                                }, {
                                    "name": "Processed",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "In Transit",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "Delivered",
                                    "status": "SUCCESS"
                                }]
                        },
                        "limits": [{
                                "id": "john-limit-1",
                                "channel": "ATM",
                                "frequency": "DAILY",
                                "amount": 5000,
                                "maxAmount": 1000,
                                "minAmount": 0
                            }, {
                                "id": "john-limit-2",
                                "channel": "ONLINE",
                                "frequency": "DAILY",
                                "amount": 20000,
                                "maxAmount": 9000,
                                "minAmount": 0
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "kim-card-1",
                        "brand": "mastercard",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Copper",
                        "status": "Inactive",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Kim Sook"
                        },
                        "expiryDate": {
                            "year": "2027",
                            "month": "03"
                        },
                        "currency": "EUR",
                        "maskedNumber": "9292"
                    }
                },
                {
                    status: 200,
                    body: {
                        "delivery": {
                            "additions": {
                                "key": "additions"
                            },
                            "transitSteps": [{
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }, {
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }]
                        },
                        "additions": {
                            "key": "additions"
                        },
                        "holder": {
                            "additions": {
                                "key": "additions"
                            },
                            "name": "name"
                        },
                        "type": "type",
                        "expiryDate": {
                            "month": "month",
                            "additions": {
                                "key": "additions"
                            },
                            "year": "year"
                        },
                        "maskedNumber": "maskedNumber",
                        "name": "name",
                        "subType": "subType",
                        "currency": "currency",
                        "id": "id",
                        "brand": "brand",
                        "replacement": {
                            "reason": "reason",
                            "replacingId": "replacingId",
                            "additions": {
                                "key": "additions"
                            },
                            "replacedById": "replacedById",
                            "status": "status"
                        },
                        "limits": [{
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }, {
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }],
                        "status": "status"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/cards",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "sara-card-1",
                            "brand": "mastercard",
                            "type": "Credit",
                            "subType": "ATM",
                            "name": "Gold Card",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Sara Williams"
                            },
                            "expiryDate": {
                                "year": "2022",
                                "month": "12"
                            },
                            "currency": "USD",
                            "maskedNumber": "5235"
                        }, {
                            "id": "sara-card-2",
                            "brand": "visa",
                            "type": "Credit",
                            "subType": "ATM",
                            "name": "Green Card",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Sara Williams"
                            },
                            "expiryDate": {
                                "year": "2022",
                                "month": "01"
                            },
                            "currency": "USD",
                            "maskedNumber": "5236"
                        }, {
                            "id": "sara-card-3",
                            "brand": "mastercard",
                            "type": "Credit",
                            "subType": "ATM",
                            "name": "Gold Card",
                            "status": "Inactive",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Sara Williams"
                            },
                            "expiryDate": {
                                "year": "2022",
                                "month": "12"
                            },
                            "currency": "USD",
                            "maskedNumber": "5237",
                            "delivery": {
                                "transitSteps": [{
                                        "name": "Ordered",
                                        "status": "SUCCESS",
                                        "stepDateTime": "2020-05-04T12:52:20.906+00:00"
                                    }, {
                                        "name": "Processed",
                                        "status": "PENDING"
                                    }, {
                                        "name": "In Transit",
                                        "status": "PENDING"
                                    }, {
                                        "name": "Delivered",
                                        "status": "PENDING"
                                    }]
                            }
                        }, {
                            "id": "sara-card-4",
                            "brand": "mastercard",
                            "type": "Debit",
                            "subType": "ATM",
                            "name": "Black Card",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Sara Williams"
                            },
                            "expiryDate": {
                                "year": "2022",
                                "month": "12"
                            },
                            "currency": "USD",
                            "maskedNumber": "6235"
                        }, {
                            "id": "sara-card-5",
                            "brand": "visa",
                            "type": "Debit",
                            "subType": "ATM",
                            "name": "Blue Card",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Sara Williams"
                            },
                            "expiryDate": {
                                "year": "2022",
                                "month": "12"
                            },
                            "currency": "USD",
                            "maskedNumber": "6236"
                        }]
                },
                {
                    status: 200,
                    body: [{
                            "id": "elon-card-1",
                            "brand": "mastercard",
                            "type": "Credit",
                            "subType": "ATM",
                            "name": "World Elite",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Elon"
                            },
                            "expiryDate": {
                                "year": "2050",
                                "month": "12"
                            },
                            "currency": "EUR",
                            "maskedNumber": "5235",
                            "delivery": {
                                "transitSteps": [{
                                        "name": "Ordered",
                                        "status": "SUCCESS",
                                        "stepDateTime": "2019-06-19T12:52:20.906Z"
                                    }, {
                                        "name": "Processed",
                                        "status": "PENDING"
                                    }, {
                                        "name": "In Transit",
                                        "status": "PENDING"
                                    }, {
                                        "name": "Delivered",
                                        "status": "PENDING",
                                        "stepDateTime": "2019-06-20T14:21:25.001Z"
                                    }]
                            }
                        }, {
                            "id": "elon-card-2",
                            "brand": "visa",
                            "type": "Credit",
                            "subType": "ATM",
                            "name": "Infinite Privilege",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Elon"
                            },
                            "expiryDate": {
                                "year": "2045",
                                "month": "01"
                            },
                            "currency": "EUR",
                            "maskedNumber": "6782"
                        }, {
                            "id": "elon-card-3",
                            "brand": "american_express",
                            "type": "Debit",
                            "subType": "ATM",
                            "name": "Reserve",
                            "status": "Cancelled",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "UnderReplacement",
                                "reason": "Lost",
                                "replacedById": "4"
                            },
                            "holder": {
                                "name": "Elon"
                            },
                            "expiryDate": {
                                "year": "2048",
                                "month": "06"
                            },
                            "currency": "EUR",
                            "maskedNumber": "1262"
                        }, {
                            "id": "elon-card-4",
                            "brand": "american_express",
                            "type": "Debit",
                            "subType": "ATM",
                            "name": "Reserve",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Elon"
                            },
                            "expiryDate": {
                                "year": "2048",
                                "month": "07"
                            },
                            "currency": "EUR",
                            "maskedNumber": "1289"
                        }, {
                            "id": "elon-card-5",
                            "brand": "mastercard",
                            "type": "Debit",
                            "subType": "ATM",
                            "name": "Platinum",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Elon"
                            },
                            "expiryDate": {
                                "year": "2050",
                                "month": "11"
                            },
                            "currency": "EUR",
                            "maskedNumber": "4627",
                            "delivery": {
                                "transitSteps": [{
                                        "name": "Ordered",
                                        "status": "SUCCESS",
                                        "stepDateTime": "2019-06-19T12:52:20.906Z"
                                    }, {
                                        "name": "Processed",
                                        "status": "SUCCESS",
                                        "stepDateTime": "2019-06-20T14:32:20.906Z"
                                    }, {
                                        "name": "In Transit",
                                        "status": "SUCCESS",
                                        "stepDateTime": "2019-06-20T15:12:20.906Z"
                                    }, {
                                        "name": "Delivered",
                                        "status": "SUCCESS",
                                        "stepDateTime": "2019-06-21T11:28:25.001Z"
                                    }]
                            }
                        }, {
                            "id": "elon-card-6",
                            "brand": "american_express",
                            "type": "Credit",
                            "subType": "ATM",
                            "name": "Reserve",
                            "status": "Active",
                            "lockStatus": "LOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Elon"
                            },
                            "expiryDate": {
                                "year": "2047",
                                "month": "03"
                            },
                            "currency": "EUR",
                            "maskedNumber": "8291"
                        }]
                },
                {
                    status: 200,
                    body: [{
                            "id": "john-card-1",
                            "brand": "visa",
                            "type": "Credit",
                            "subType": "ATM",
                            "name": "Gold",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "John Doe"
                            },
                            "expiryDate": {
                                "year": "2030",
                                "month": "06"
                            },
                            "currency": "EUR",
                            "maskedNumber": "5827",
                            "delivery": {
                                "transitSteps": [{
                                        "name": "Ordered",
                                        "status": "SUCCESS",
                                        "stepDateTime": "2019-06-19T12:52:20.906Z"
                                    }, {
                                        "name": "Processed",
                                        "status": "SUCCESS"
                                    }, {
                                        "name": "In Transit",
                                        "status": "SUCCESS"
                                    }, {
                                        "name": "Delivered",
                                        "status": "SUCCESS"
                                    }]
                            },
                            "limits": [{
                                    "id": "john-limit-1",
                                    "channel": "ATM",
                                    "frequency": "DAILY",
                                    "amount": 3000,
                                    "maxAmount": 9000,
                                    "minAmount": 0
                                }, {
                                    "id": "john-limit-2",
                                    "channel": "ONLINE",
                                    "frequency": "DAILY",
                                    "amount": 20000,
                                    "maxAmount": 9000,
                                    "minAmount": 0
                                }]
                        }, {
                            "id": "john-card-2",
                            "brand": "mastercard",
                            "type": "Debit",
                            "subType": "ATM",
                            "name": "Gold",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "John Doe"
                            },
                            "expiryDate": {
                                "year": "2031",
                                "month": "02"
                            },
                            "currency": "EUR",
                            "maskedNumber": "8299"
                        }]
                },
                {
                    status: 200,
                    body: [{
                            "id": "kim-card-1",
                            "brand": "mastercard",
                            "type": "Debit",
                            "subType": "ATM",
                            "name": "Copper",
                            "status": "Active",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Kim Sook"
                            },
                            "expiryDate": {
                                "year": "2027",
                                "month": "03"
                            },
                            "currency": "EUR",
                            "maskedNumber": "9292"
                        }, {
                            "id": "kim-card-2",
                            "brand": "visa",
                            "type": "Debit",
                            "subType": "ATM",
                            "name": "Iron",
                            "status": "Inactive",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Kim Sook"
                            },
                            "expiryDate": {
                                "year": "2010",
                                "month": "04"
                            },
                            "currency": "EUR",
                            "maskedNumber": "9494"
                        }, {
                            "id": "kim-card-3",
                            "brand": "visa",
                            "type": "Debit",
                            "subType": "ATM",
                            "name": "Iron",
                            "status": "Expired",
                            "lockStatus": "UNLOCKED",
                            "replacement": {
                                "status": "NotUnderReplacement"
                            },
                            "holder": {
                                "name": "Kim Sook"
                            },
                            "expiryDate": {
                                "year": "2010",
                                "month": "04"
                            },
                            "currency": "EUR",
                            "maskedNumber": "9494"
                        }]
                },
                {
                    status: 200,
                    body: []
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/cards/{id}/pin/request",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "delivery": {
                            "additions": {
                                "key": "additions"
                            },
                            "transitSteps": [{
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }, {
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }]
                        },
                        "additions": {
                            "key": "additions"
                        },
                        "holder": {
                            "additions": {
                                "key": "additions"
                            },
                            "name": "name"
                        },
                        "type": "type",
                        "expiryDate": {
                            "month": "month",
                            "additions": {
                                "key": "additions"
                            },
                            "year": "year"
                        },
                        "maskedNumber": "maskedNumber",
                        "name": "name",
                        "subType": "subType",
                        "currency": "currency",
                        "id": "id",
                        "brand": "brand",
                        "replacement": {
                            "reason": "reason",
                            "replacingId": "replacingId",
                            "additions": {
                                "key": "additions"
                            },
                            "replacedById": "replacedById",
                            "status": "status"
                        },
                        "limits": [{
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }, {
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }],
                        "status": "status"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/cards/{id}/replacement",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "elon-card-1",
                        "brand": "mastercard",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "World Elite",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "ReplacementRequested",
                            "reason": "Damaged"
                        },
                        "holder": {
                            "name": "Elon"
                        },
                        "expiryDate": {
                            "year": "2050",
                            "month": "12"
                        },
                        "currency": "EUR",
                        "maskedNumber": "5235",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-19T12:52:20.906Z"
                                }, {
                                    "name": "Processed",
                                    "status": "PENDING"
                                }]
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "john-card-1",
                        "brand": "visa",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Gold",
                        "status": "Inactive",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "ReplacementRequested",
                            "reason": "Stolen"
                        },
                        "holder": {
                            "name": "John Doe"
                        },
                        "expiryDate": {
                            "year": "2030",
                            "month": "06"
                        },
                        "currency": "EUR",
                        "maskedNumber": "5827",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-19T12:52:20.906Z"
                                }, {
                                    "name": "Processed",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "In Transit",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "Delivered",
                                    "status": "SUCCESS"
                                }]
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "kim-card-1",
                        "brand": "mastercard",
                        "type": "Debit",
                        "subType": "ATM",
                        "name": "Copper",
                        "status": "Inactive",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "ReplacementRequested",
                            "reason": "Lost"
                        },
                        "holder": {
                            "name": "Kim Sook"
                        },
                        "expiryDate": {
                            "year": "2027",
                            "month": "03"
                        },
                        "currency": "EUR",
                        "maskedNumber": "9292"
                    }
                },
                {
                    status: 200,
                    body: {
                        "delivery": {
                            "additions": {
                                "key": "additions"
                            },
                            "transitSteps": [{
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }, {
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }]
                        },
                        "additions": {
                            "key": "additions"
                        },
                        "holder": {
                            "additions": {
                                "key": "additions"
                            },
                            "name": "name"
                        },
                        "type": "type",
                        "expiryDate": {
                            "month": "month",
                            "additions": {
                                "key": "additions"
                            },
                            "year": "year"
                        },
                        "maskedNumber": "maskedNumber",
                        "name": "name",
                        "subType": "subType",
                        "currency": "currency",
                        "id": "id",
                        "brand": "brand",
                        "replacement": {
                            "reason": "reason",
                            "replacingId": "replacingId",
                            "additions": {
                                "key": "additions"
                            },
                            "replacedById": "replacedById",
                            "status": "status"
                        },
                        "limits": [{
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }, {
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }],
                        "status": "status"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/cards/{id}/pin/reset",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "delivery": {
                            "additions": {
                                "key": "additions"
                            },
                            "transitSteps": [{
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }, {
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }]
                        },
                        "additions": {
                            "key": "additions"
                        },
                        "holder": {
                            "additions": {
                                "key": "additions"
                            },
                            "name": "name"
                        },
                        "type": "type",
                        "expiryDate": {
                            "month": "month",
                            "additions": {
                                "key": "additions"
                            },
                            "year": "year"
                        },
                        "maskedNumber": "maskedNumber",
                        "name": "name",
                        "subType": "subType",
                        "currency": "currency",
                        "id": "id",
                        "brand": "brand",
                        "replacement": {
                            "reason": "reason",
                            "replacingId": "replacingId",
                            "additions": {
                                "key": "additions"
                            },
                            "replacedById": "replacedById",
                            "status": "status"
                        },
                        "limits": [{
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }, {
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }],
                        "status": "status"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/cards/{id}/lock-status",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "elon-card-6",
                        "brand": "american_express",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Reserve",
                        "status": "Active",
                        "lockStatus": "UNLOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "Elon"
                        },
                        "expiryDate": {
                            "year": "2047",
                            "month": "03"
                        },
                        "currency": "EUR",
                        "maskedNumber": "8291"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "john-card-1",
                        "brand": "visa",
                        "type": "Credit",
                        "subType": "ATM",
                        "name": "Gold",
                        "status": "Active",
                        "lockStatus": "LOCKED",
                        "replacement": {
                            "status": "NotUnderReplacement"
                        },
                        "holder": {
                            "name": "John Doe"
                        },
                        "expiryDate": {
                            "year": "2030",
                            "month": "06"
                        },
                        "currency": "EUR",
                        "maskedNumber": "5827",
                        "delivery": {
                            "transitSteps": [{
                                    "name": "Ordered",
                                    "status": "SUCCESS",
                                    "stepDateTime": "2019-06-19T12:52:20.906Z"
                                }, {
                                    "name": "Processed",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "In Transit",
                                    "status": "SUCCESS"
                                }, {
                                    "name": "Delivered",
                                    "status": "SUCCESS"
                                }]
                        },
                        "limits": [{
                                "id": "john-limit-1",
                                "channel": "ATM",
                                "frequency": "DAILY",
                                "amount": 5000,
                                "maxAmount": 1000,
                                "minAmount": 0
                            }, {
                                "id": "john-limit-2",
                                "channel": "ONLINE",
                                "frequency": "DAILY",
                                "amount": 20000,
                                "maxAmount": 9000,
                                "minAmount": 0
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "delivery": {
                            "additions": {
                                "key": "additions"
                            },
                            "transitSteps": [{
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }, {
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "stepDateTime": "2000-01-23T04:56:07.000+00:00",
                                    "status": "SUCCESS"
                                }]
                        },
                        "additions": {
                            "key": "additions"
                        },
                        "holder": {
                            "additions": {
                                "key": "additions"
                            },
                            "name": "name"
                        },
                        "type": "type",
                        "expiryDate": {
                            "month": "month",
                            "additions": {
                                "key": "additions"
                            },
                            "year": "year"
                        },
                        "maskedNumber": "maskedNumber",
                        "name": "name",
                        "subType": "subType",
                        "currency": "currency",
                        "id": "id",
                        "brand": "brand",
                        "replacement": {
                            "reason": "reason",
                            "replacingId": "replacingId",
                            "additions": {
                                "key": "additions"
                            },
                            "replacedById": "replacedById",
                            "status": "status"
                        },
                        "limits": [{
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }, {
                                "minAmount": 1.4658129805029452,
                                "amount": 0.8008281904610115,
                                "additions": {
                                    "key": "additions"
                                },
                                "channel": "channel",
                                "id": "id",
                                "maxAmount": 6.027456183070403,
                                "frequency": "frequency"
                            }],
                        "status": "status"
                    }
                },
            ]
        },
    ]);

    var TravelNoticesHttpService = /** @class */ (function () {
        function TravelNoticesHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new CardsConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        TravelNoticesHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        TravelNoticesHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        TravelNoticesHttpService.prototype.createTravelNotice = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _travelNotice = requestParameters["travelNotice"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/travel-notices", _travelNotice, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TravelNoticesHttpService.prototype.createTravelNoticeUrl = function (requestParameters) {
            var _travelNotice = requestParameters["travelNotice"];
            return this.configuration.basePath + "/client-api/v2/travel-notices";
        };
        TravelNoticesHttpService.prototype.deleteTravelNoticeById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteTravelNoticeById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/travel-notices/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TravelNoticesHttpService.prototype.deleteTravelNoticeByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteTravelNoticeById.');
            }
            return this.configuration.basePath + "/client-api/v2/travel-notices/" + encodeURIComponent(String(_id));
        };
        TravelNoticesHttpService.prototype.getTravelNoticeById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getTravelNoticeById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/travel-notices/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TravelNoticesHttpService.prototype.getTravelNoticeByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getTravelNoticeById.');
            }
            return this.configuration.basePath + "/client-api/v2/travel-notices/" + encodeURIComponent(String(_id));
        };
        TravelNoticesHttpService.prototype.getTravelNotices = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/travel-notices", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TravelNoticesHttpService.prototype.getTravelNoticesUrl = function () {
            return this.configuration.basePath + "/client-api/v2/travel-notices";
        };
        TravelNoticesHttpService.prototype.updateTravelNotice = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateTravelNotice.');
            }
            var _travelNotice = requestParameters["travelNotice"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/travel-notices/" + encodeURIComponent(String(_id)), _travelNotice, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        TravelNoticesHttpService.prototype.updateTravelNoticeUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateTravelNotice.');
            }
            var _travelNotice = requestParameters["travelNotice"];
            return this.configuration.basePath + "/client-api/v2/travel-notices/" + encodeURIComponent(String(_id));
        };
        return TravelNoticesHttpService;
    }());
    TravelNoticesHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticesHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: CARDS_BASE_PATH, optional: true }, { token: CardsConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    TravelNoticesHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticesHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticesHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [CARDS_BASE_PATH]
                        }] }, { type: CardsConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var TravelNoticesHttpServiceCreateTravelNoticeMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/travel-notices",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "sara-travel-notice-1",
                        "cardIds": ["sara-card-1"],
                        "departureDate": "2020-05-06",
                        "arrivalDate": "2020-05-10",
                        "destinations": [{
                                "country": "USA",
                                "region": "US-TX"
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/requestBody/content/application~1json/example"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "john-travel-notice-1",
                        "cardIds": ["john-card-1", "john-card-2"],
                        "departureDate": "2020-01-09",
                        "arrivalDate": "2020-01-18",
                        "destinations": [{
                                "country": "NL"
                            }],
                        "contact": {
                            "phoneNumber": "+1 646 432 3000"
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "destinations": [{
                                "country": "country",
                                "additions": {
                                    "key": "additions"
                                },
                                "region": "region"
                            }, {
                                "country": "country",
                                "additions": {
                                    "key": "additions"
                                },
                                "region": "region"
                            }],
                        "contact": {
                            "phoneNumber": "phoneNumber",
                            "additions": {
                                "key": "additions"
                            }
                        },
                        "id": "id",
                        "departureDate": "departureDate",
                        "cardIds": ["cardIds", "cardIds"],
                        "arrivalDate": "arrivalDate"
                    }
                },
            ]
        }]);
    var TravelNoticesHttpServiceDeleteTravelNoticeByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/travel-notices/{id}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
            ]
        }]);
    var TravelNoticesHttpServiceGetTravelNoticeByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/travel-notices/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/sara/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/requestBody/content/application~1json/example"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/john/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "destinations": [{
                                "country": "country",
                                "additions": {
                                    "key": "additions"
                                },
                                "region": "region"
                            }, {
                                "country": "country",
                                "additions": {
                                    "key": "additions"
                                },
                                "region": "region"
                            }],
                        "contact": {
                            "phoneNumber": "phoneNumber",
                            "additions": {
                                "key": "additions"
                            }
                        },
                        "id": "id",
                        "departureDate": "departureDate",
                        "cardIds": ["cardIds", "cardIds"],
                        "arrivalDate": "arrivalDate"
                    }
                },
            ]
        }]);
    var TravelNoticesHttpServiceGetTravelNoticesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/travel-notices",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "sara-travel-notice-1",
                            "cardIds": ["sara-card-1", "sara-card-4"],
                            "departureDate": "2020-01-09",
                            "arrivalDate": "2020-01-18",
                            "destinations": [{
                                    "country": "MEX"
                                }, {
                                    "country": "USA",
                                    "region": "US-TX"
                                }]
                        }, {
                            "id": "sara-travel-notice-2",
                            "cardIds": ["sara-card-1", "sara-card-2", "sara-card-4", "sara-card-5"],
                            "departureDate": "2019-12-10",
                            "arrivalDate": "2019-12-23",
                            "destinations": [{
                                    "country": "JPN"
                                }, {
                                    "country": "USA",
                                    "region": "US-CA"
                                }],
                            "contact": {
                                "phoneNumber": "+1 646 432 3000"
                            }
                        }]
                },
                {
                    status: 200,
                    body: [{
                            "id": "elon-travel-notice-1",
                            "cardIds": ["elon-card-1"],
                            "departureDate": "2020-05-06",
                            "arrivalDate": "2020-05-10",
                            "destinations": [{
                                    "country": "USA",
                                    "region": "US-TX"
                                }, {
                                    "country": "MEX"
                                }]
                        }, {
                            "id": "elon-travel-notice-2",
                            "cardIds": ["elon-card-1", "elon-card-2", "elon-card-3", "elon-card-4"],
                            "departureDate": "2019-12-10",
                            "arrivalDate": "2019-12-23",
                            "destinations": [{
                                    "country": "JPN"
                                }, {
                                    "country": "USA",
                                    "region": "US-CA"
                                }],
                            "contact": {
                                "phoneNumber": "+1 646 432 3000"
                            }
                        }, {
                            "id": "elon-travel-notice-3",
                            "cardIds": ["elon-card-4"],
                            "departureDate": "2019-07-23",
                            "arrivalDate": "2020-08-11",
                            "destinations": [{
                                    "country": "KHM"
                                }, {
                                    "country": "KOR"
                                }, {
                                    "country": "IND"
                                }],
                            "contact": {
                                "phoneNumber": "+1 646 432 3000"
                            }
                        }]
                },
                {
                    status: 200,
                    body: [{
                            "id": "john-travel-notice-1",
                            "cardIds": ["john-card-1", "john-card-2"],
                            "departureDate": "2020-01-09",
                            "arrivalDate": "2020-01-18",
                            "destinations": [{
                                    "country": "NL"
                                }],
                            "contact": {
                                "phoneNumber": "+1 646 432 3000"
                            }
                        }]
                },
                {
                    status: 200,
                    body: []
                },
                {
                    status: 200,
                    body: []
                },
            ]
        }]);
    var TravelNoticesHttpServiceUpdateTravelNoticeMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/travel-notices/{id}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/sara/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "elon-travel-notice-1",
                        "cardIds": ["elon-card-1", "elon-card-6"],
                        "departureDate": "2020-05-06",
                        "arrivalDate": "2020-05-10",
                        "destinations": [{
                                "country": "USA",
                                "region": "US-TX"
                            }, {
                                "country": "MEX"
                            }],
                        "contact": {
                            "phoneNumber": "Other_Number"
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/john/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "destinations": [{
                                "country": "country",
                                "additions": {
                                    "key": "additions"
                                },
                                "region": "region"
                            }, {
                                "country": "country",
                                "additions": {
                                    "key": "additions"
                                },
                                "region": "region"
                            }],
                        "contact": {
                            "phoneNumber": "phoneNumber",
                            "additions": {
                                "key": "additions"
                            }
                        },
                        "id": "id",
                        "departureDate": "departureDate",
                        "cardIds": ["cardIds", "cardIds"],
                        "arrivalDate": "arrivalDate"
                    }
                },
            ]
        }]);
    var TravelNoticesHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/travel-notices",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "sara-travel-notice-1",
                        "cardIds": ["sara-card-1"],
                        "departureDate": "2020-05-06",
                        "arrivalDate": "2020-05-10",
                        "destinations": [{
                                "country": "USA",
                                "region": "US-TX"
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/requestBody/content/application~1json/example"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "john-travel-notice-1",
                        "cardIds": ["john-card-1", "john-card-2"],
                        "departureDate": "2020-01-09",
                        "arrivalDate": "2020-01-18",
                        "destinations": [{
                                "country": "NL"
                            }],
                        "contact": {
                            "phoneNumber": "+1 646 432 3000"
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "destinations": [{
                                "country": "country",
                                "additions": {
                                    "key": "additions"
                                },
                                "region": "region"
                            }, {
                                "country": "country",
                                "additions": {
                                    "key": "additions"
                                },
                                "region": "region"
                            }],
                        "contact": {
                            "phoneNumber": "phoneNumber",
                            "additions": {
                                "key": "additions"
                            }
                        },
                        "id": "id",
                        "departureDate": "departureDate",
                        "cardIds": ["cardIds", "cardIds"],
                        "arrivalDate": "arrivalDate"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/travel-notices/{id}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/travel-notices/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/sara/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/requestBody/content/application~1json/example"
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/john/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "destinations": [{
                                "country": "country",
                                "additions": {
                                    "key": "additions"
                                },
                                "region": "region"
                            }, {
                                "country": "country",
                                "additions": {
                                    "key": "additions"
                                },
                                "region": "region"
                            }],
                        "contact": {
                            "phoneNumber": "phoneNumber",
                            "additions": {
                                "key": "additions"
                            }
                        },
                        "id": "id",
                        "departureDate": "departureDate",
                        "cardIds": ["cardIds", "cardIds"],
                        "arrivalDate": "arrivalDate"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/travel-notices",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "sara-travel-notice-1",
                            "cardIds": ["sara-card-1", "sara-card-4"],
                            "departureDate": "2020-01-09",
                            "arrivalDate": "2020-01-18",
                            "destinations": [{
                                    "country": "MEX"
                                }, {
                                    "country": "USA",
                                    "region": "US-TX"
                                }]
                        }, {
                            "id": "sara-travel-notice-2",
                            "cardIds": ["sara-card-1", "sara-card-2", "sara-card-4", "sara-card-5"],
                            "departureDate": "2019-12-10",
                            "arrivalDate": "2019-12-23",
                            "destinations": [{
                                    "country": "JPN"
                                }, {
                                    "country": "USA",
                                    "region": "US-CA"
                                }],
                            "contact": {
                                "phoneNumber": "+1 646 432 3000"
                            }
                        }]
                },
                {
                    status: 200,
                    body: [{
                            "id": "elon-travel-notice-1",
                            "cardIds": ["elon-card-1"],
                            "departureDate": "2020-05-06",
                            "arrivalDate": "2020-05-10",
                            "destinations": [{
                                    "country": "USA",
                                    "region": "US-TX"
                                }, {
                                    "country": "MEX"
                                }]
                        }, {
                            "id": "elon-travel-notice-2",
                            "cardIds": ["elon-card-1", "elon-card-2", "elon-card-3", "elon-card-4"],
                            "departureDate": "2019-12-10",
                            "arrivalDate": "2019-12-23",
                            "destinations": [{
                                    "country": "JPN"
                                }, {
                                    "country": "USA",
                                    "region": "US-CA"
                                }],
                            "contact": {
                                "phoneNumber": "+1 646 432 3000"
                            }
                        }, {
                            "id": "elon-travel-notice-3",
                            "cardIds": ["elon-card-4"],
                            "departureDate": "2019-07-23",
                            "arrivalDate": "2020-08-11",
                            "destinations": [{
                                    "country": "KHM"
                                }, {
                                    "country": "KOR"
                                }, {
                                    "country": "IND"
                                }],
                            "contact": {
                                "phoneNumber": "+1 646 432 3000"
                            }
                        }]
                },
                {
                    status: 200,
                    body: [{
                            "id": "john-travel-notice-1",
                            "cardIds": ["john-card-1", "john-card-2"],
                            "departureDate": "2020-01-09",
                            "arrivalDate": "2020-01-18",
                            "destinations": [{
                                    "country": "NL"
                                }],
                            "contact": {
                                "phoneNumber": "+1 646 432 3000"
                            }
                        }]
                },
                {
                    status: 200,
                    body: []
                },
                {
                    status: 200,
                    body: []
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/travel-notices/{id}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/sara/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "id": "elon-travel-notice-1",
                        "cardIds": ["elon-card-1", "elon-card-6"],
                        "departureDate": "2020-05-06",
                        "arrivalDate": "2020-05-10",
                        "destinations": [{
                                "country": "USA",
                                "region": "US-TX"
                            }, {
                                "country": "MEX"
                            }],
                        "contact": {
                            "phoneNumber": "Other_Number"
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "$ref": "#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/john/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "destinations": [{
                                "country": "country",
                                "additions": {
                                    "key": "additions"
                                },
                                "region": "region"
                            }, {
                                "country": "country",
                                "additions": {
                                    "key": "additions"
                                },
                                "region": "region"
                            }],
                        "contact": {
                            "phoneNumber": "phoneNumber",
                            "additions": {
                                "key": "additions"
                            }
                        },
                        "id": "id",
                        "departureDate": "departureDate",
                        "cardIds": ["cardIds", "cardIds"],
                        "arrivalDate": "arrivalDate"
                    }
                },
            ]
        },
    ]);

    exports.CARDS_BASE_PATH = CARDS_BASE_PATH;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.CardsApiModule = CardsApiModule;
    exports.CardsConfiguration = CardsConfiguration;
    exports.CardsHttpService = CardsHttpService;
    exports.CardsHttpServiceActivateMocksProvider = CardsHttpServiceActivateMocksProvider;
    exports.CardsHttpServiceChangeLimitsMocksProvider = CardsHttpServiceChangeLimitsMocksProvider;
    exports.CardsHttpServiceGetCardByIdMocksProvider = CardsHttpServiceGetCardByIdMocksProvider;
    exports.CardsHttpServiceGetCardsMocksProvider = CardsHttpServiceGetCardsMocksProvider;
    exports.CardsHttpServiceMocksProvider = CardsHttpServiceMocksProvider;
    exports.CardsHttpServiceRequestPinMocksProvider = CardsHttpServiceRequestPinMocksProvider;
    exports.CardsHttpServiceRequestReplacementMocksProvider = CardsHttpServiceRequestReplacementMocksProvider;
    exports.CardsHttpServiceResetPinMocksProvider = CardsHttpServiceResetPinMocksProvider;
    exports.CardsHttpServiceUpdateLockStatusMocksProvider = CardsHttpServiceUpdateLockStatusMocksProvider;
    exports.LockStatus = LockStatus;
    exports.TravelNoticesHttpService = TravelNoticesHttpService;
    exports.TravelNoticesHttpServiceCreateTravelNoticeMocksProvider = TravelNoticesHttpServiceCreateTravelNoticeMocksProvider;
    exports.TravelNoticesHttpServiceDeleteTravelNoticeByIdMocksProvider = TravelNoticesHttpServiceDeleteTravelNoticeByIdMocksProvider;
    exports.TravelNoticesHttpServiceGetTravelNoticeByIdMocksProvider = TravelNoticesHttpServiceGetTravelNoticeByIdMocksProvider;
    exports.TravelNoticesHttpServiceGetTravelNoticesMocksProvider = TravelNoticesHttpServiceGetTravelNoticesMocksProvider;
    exports.TravelNoticesHttpServiceMocksProvider = TravelNoticesHttpServiceMocksProvider;
    exports.TravelNoticesHttpServiceUpdateTravelNoticeMocksProvider = TravelNoticesHttpServiceUpdateTravelNoticeMocksProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-cards-http-ang.umd.js.map
