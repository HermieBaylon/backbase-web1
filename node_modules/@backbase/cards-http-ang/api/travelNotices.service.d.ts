import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { TravelNotice } from '../model/models';
import { CardsConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface CreateTravelNoticeRequestParams {
    ["travelNotice"]?: TravelNotice;
}
export interface DeleteTravelNoticeByIdRequestParams {
    ["id"]: string;
}
export interface GetTravelNoticeByIdRequestParams {
    ["id"]: string;
}
export interface UpdateTravelNoticeRequestParams {
    ["id"]: string;
    ["travelNotice"]?: TravelNotice;
}
export declare class TravelNoticesHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: CardsConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: CardsConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    createTravelNotice(requestParameters: CreateTravelNoticeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<TravelNotice>;
    createTravelNotice(requestParameters: CreateTravelNoticeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<TravelNotice>>;
    createTravelNotice(requestParameters: CreateTravelNoticeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<TravelNotice>>;
    createTravelNoticeUrl(requestParameters: CreateTravelNoticeRequestParams): string;
    deleteTravelNoticeById(requestParameters: DeleteTravelNoticeByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteTravelNoticeById(requestParameters: DeleteTravelNoticeByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteTravelNoticeById(requestParameters: DeleteTravelNoticeByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteTravelNoticeByIdUrl(requestParameters: DeleteTravelNoticeByIdRequestParams): string;
    getTravelNoticeById(requestParameters: GetTravelNoticeByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<TravelNotice>;
    getTravelNoticeById(requestParameters: GetTravelNoticeByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<TravelNotice>>;
    getTravelNoticeById(requestParameters: GetTravelNoticeByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<TravelNotice>>;
    getTravelNoticeByIdUrl(requestParameters: GetTravelNoticeByIdRequestParams): string;
    getTravelNotices(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<TravelNotice>>;
    getTravelNotices(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<TravelNotice>>>;
    getTravelNotices(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<TravelNotice>>>;
    getTravelNoticesUrl(): string;
    updateTravelNotice(requestParameters: UpdateTravelNoticeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<TravelNotice>;
    updateTravelNotice(requestParameters: UpdateTravelNoticeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<TravelNotice>>;
    updateTravelNotice(requestParameters: UpdateTravelNoticeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<TravelNotice>>;
    updateTravelNoticeUrl(requestParameters: UpdateTravelNoticeRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<TravelNoticesHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TravelNoticesHttpService>;
}
