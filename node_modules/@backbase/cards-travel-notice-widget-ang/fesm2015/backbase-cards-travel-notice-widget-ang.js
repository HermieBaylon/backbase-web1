import * as i2$2 from '@backbase/cards-common-ang';
import { PaymentCardStatus, PaymentCardLockStatus, getCountryName, DestinationsServiceConfigToken, CardsCommonModule, DefaultDestionsService } from '@backbase/cards-common-ang';
export { DestinationsServiceConfigToken } from '@backbase/cards-common-ang';
import * as i2$1 from '@angular/common';
import { DatePipe, CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Injectable, Component, Input, EventEmitter, Output, Directive, forwardRef, TemplateRef, Inject, ViewChild, NgModule } from '@angular/core';
import * as i1$2 from '@angular/forms';
import { FormControl, NG_VALUE_ACCESSOR, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';
import * as i1$3 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i10 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import * as i2 from '@backbase/ui-ang/badge';
import { BadgeModule } from '@backbase/ui-ang/badge';
import * as i7 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import { CheckboxGroupModule } from '@backbase/ui-ang/checkbox-group';
import { CollapsibleModule } from '@backbase/ui-ang/collapsible';
import { DropdownMultiSelectModule } from '@backbase/ui-ang/dropdown-multi-select';
import * as i1 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i2$4 from '@backbase/ui-ang/input-checkbox';
import { InputCheckboxModule } from '@backbase/ui-ang/input-checkbox';
import * as i8$1 from '@backbase/ui-ang/input-datepicker';
import { InputDatepickerModule } from '@backbase/ui-ang/input-datepicker';
import * as i9 from '@backbase/ui-ang/input-phone';
import { InputPhoneModule } from '@backbase/ui-ang/input-phone';
import { InputTextModule } from '@backbase/ui-ang/input-text';
import * as i7$1 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i5$1 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i5 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i3$1 from '@backbase/ui-ang/notification';
import { NotificationModule } from '@backbase/ui-ang/notification';
import * as i2$3 from '@backbase/ui-ang/payment-card';
import { PaymentCardModule } from '@backbase/ui-ang/payment-card';
import * as i3 from '@backbase/ui-ang/stepper';
import { StepperModule } from '@backbase/ui-ang/stepper';
import * as i8 from '@ng-bootstrap/ng-bootstrap';
import { NgbCollapseModule } from '@ng-bootstrap/ng-bootstrap';
import * as i1$1 from '@ng-select/ng-select';
import { NgSelectModule } from '@ng-select/ng-select';
import { of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import * as i6 from '@backbase/ui-ang/empty-state';

class TravelNoticeDatesHelperService {
    isPastDate(date) {
        const time = new Date(date);
        return this.trucanteDate(time) < this.trucanteDate(new Date());
    }
    isPastDateOrToday(date) {
        return this.isPastDate(date) || this.areDateEqual(new Date(), new Date(date));
    }
    isUpcomingDate(date) {
        const time = new Date(date);
        return this.trucanteDate(time) > this.trucanteDate(new Date());
    }
    isUpcomingDateOrToday(date) {
        return this.isUpcomingDate(date) || this.areDateEqual(new Date(), new Date(date));
    }
    isDateInBetween(date1, date2) {
        return this.isPastDateOrToday(date1) && this.isUpcomingDateOrToday(date2);
    }
    areDateEqual(date1, date2) {
        return this.trucanteDate(date1) === this.trucanteDate(date2);
    }
    trucanteDate(date) {
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);
        date.setMilliseconds(0);
        return date.getTime();
    }
}
TravelNoticeDatesHelperService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeDatesHelperService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
TravelNoticeDatesHelperService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeDatesHelperService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeDatesHelperService, decorators: [{
            type: Injectable
        }] });

class CardsTravelNoticeStatusBadgeComponent {
    constructor(helper) {
        this.helper = helper;
    }
}
CardsTravelNoticeStatusBadgeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeStatusBadgeComponent, deps: [{ token: TravelNoticeDatesHelperService }], target: i0.ɵɵFactoryTarget.Component });
CardsTravelNoticeStatusBadgeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeStatusBadgeComponent, selector: "bb-cards-travel-notice-status-badge", inputs: { travelNoticeItem: "travelNoticeItem" }, ngImport: i0, template: "<div class=\"bb-stack bb-block bb-block--md\" >\n  <ng-container *ngIf=\"helper.isDateInBetween(travelNoticeItem!.departureDate,travelNoticeItem!.arrivalDate)\">\n    <bb-badge-ui\n      text=\"Active\"\n      i18n-text=\"Active label|Text for the active label@@cards.travelNotice.active\"\n      color=\"success\"\n    ></bb-badge-ui>\n  </ng-container>\n\n  <ng-container *ngIf=\"helper.isUpcomingDate(travelNoticeItem!.departureDate) && helper.isUpcomingDate(travelNoticeItem!.arrivalDate)\">\n    <bb-badge-ui\n      text=\"Scheduled\"\n      i18n-text=\"Scheduled label|Text for the scheduled label@@cards.travelNotice.scheduled\"\n      color=\"info\"\n    ></bb-badge-ui>\n  </ng-container>\n\n  <ng-container *ngIf=\"helper.isPastDate(travelNoticeItem!.departureDate) && helper.isPastDate(travelNoticeItem!.arrivalDate)\">\n    <bb-badge-ui\n      text=\"Expired\"\n      i18n-text=\"Expired label|Text for the expired label@@cards.travelNotice.expired\"\n      color=\"danger\"\n    ></bb-badge-ui>\n  </ng-container>\n</div>", components: [{ type: i2.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeStatusBadgeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-cards-travel-notice-status-badge',
                    templateUrl: './cards-travel-notice-status-badge.component.html',
                }]
        }], ctorParameters: function () { return [{ type: TravelNoticeDatesHelperService }]; }, propDecorators: { travelNoticeItem: [{
                type: Input
            }] } });

class CardsTravelNoticePaymentCardComponent {
    getDisplayState() {
        if (this.paymentCard && this.paymentCard.status === PaymentCardStatus.Inactive) {
            return 'INACTIVE';
        }
        if (this.paymentCard && this.paymentCard.status === PaymentCardStatus.Canceled) {
            return 'CANCELLED';
        }
        if (this.paymentCard && this.paymentCard.status === PaymentCardStatus.Expired) {
            return 'EXPIRED';
        }
        if (this.paymentCard && this.paymentCard.lockStatus === PaymentCardLockStatus.Locked) {
            return 'LOCKED';
        }
        return undefined;
    }
}
CardsTravelNoticePaymentCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticePaymentCardComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CardsTravelNoticePaymentCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticePaymentCardComponent, selector: "bb-cards-travel-notice-payment-card", inputs: { paymentCard: "paymentCard" }, ngImport: i0, template: "<bb-payment-card-state-wrapper-ui [state]=\"getDisplayState()\">\n  <bb-payment-card-ui [paymentCard]=\"paymentCard\"></bb-payment-card-ui>\n</bb-payment-card-state-wrapper-ui>", components: [{ type: i2$2.PaymentCardStateWrapperComponent, selector: "bb-payment-card-state-wrapper,bb-payment-card-state-wrapper-ui", inputs: ["state"] }, { type: i2$3.PaymentCardComponent, selector: "bb-payment-card-ui", inputs: ["paymentCard", "paymentCardNumberFormat"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticePaymentCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-cards-travel-notice-payment-card',
                    templateUrl: 'cards-travel-notice-payment-card.component.html',
                }]
        }], propDecorators: { paymentCard: [{
                type: Input
            }] } });

class CardsTravelNoticeListItemComponent {
    constructor(helper) {
        this.helper = helper;
        this.hostRef = this;
        /**
         * EventEmitter for triggering delete event.
         */
        this.delete = new EventEmitter();
        this.dialogOpen = false;
        this.areCardsOpen = false;
        this.onCancel = () => {
            this.dialogOpen = false;
        };
        this.onConfirm = () => {
            this.delete.emit(this.travelNoticeItem);
            this.dialogOpen = false;
        };
    }
    getCountryName(travelNoticeCountry) {
        return getCountryName(this.destinationList, travelNoticeCountry);
    }
    onDelete() {
        this.dialogOpen = true;
    }
    toggleCardsVisibility() {
        this.areCardsOpen = !this.areCardsOpen;
    }
}
CardsTravelNoticeListItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeListItemComponent, deps: [{ token: TravelNoticeDatesHelperService }], target: i0.ɵɵFactoryTarget.Component });
CardsTravelNoticeListItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeListItemComponent, selector: "bb-cards-travel-notice-list-item", inputs: { travelNoticeItem: "travelNoticeItem", destinationList: "destinationList" }, outputs: { delete: "delete" }, ngImport: i0, template: "<div \n  class=\"bb-travel-notice-list-item\"\n  [ngClass]=\"{'bb-travel-notice-list-item--expired': hostRef.helper.isPastDate(travelNoticeItem!.arrivalDate)}\"\n>\n   <!-- status -->\n  <bb-cards-travel-notice-status-badge \n    [travelNoticeItem]=\"hostRef.travelNoticeItem\"\n  ></bb-cards-travel-notice-status-badge>\n\n  <div class=\"bb-stack bb-block bb-block--md bb-stack--align-top\">\n    <h3 class=\"bb-stack__item bb-travel-notice-header\">\n      <div>\n        <ng-container *ngFor=\"let item of hostRef.travelNoticeItem?.destinations; first as isFirst; last as isLast\">\n          <ng-container *ngIf=\"!isLast && !isFirst\">, </ng-container>\n          <ng-container *ngIf=\"!isFirst && isLast\">&nbsp;</ng-container>\n          <ng-container\n            i18n=\"And@@cards.travel.notice.list.countries.and\" \n            *ngIf=\"!isFirst && isLast\"\n          >and</ng-container>\n          <ng-container *ngIf=\"!isFirst && isLast\">&nbsp;</ng-container>\n          <ng-container>{{getCountryName(item)}}</ng-container>\n        </ng-container>\n      </div>\n    </h3>\n    \n    <div class=\"bb-stack__item bb-stack__item--push-right\">\n      <button bbButton color=\"unstyled\" (click)=\"onDelete()\">\n        <bb-icon-ui name=\"delete\" aria-label=\"Delete travel notice\" i18n-aria-label=\"Delete travel notice button@@cards.travel.notice.list.button.delete\"></bb-icon-ui>\n      </button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-3\">\n      <div class=\"bb-block bb-block--md\">\n        <div>\n          <bb-icon-ui name=\"flight-takeoff\" size=\"sm\"></bb-icon-ui>\n          <span class=\"bb-text-support bb-travel-notice-list__label\"\n            i18n='Travel notice list Departure date header@@cards.travel.notice.list.departure.date.header'\n          > Departure date: </span>\n        </div>\n        <div class=\"bb-travel-notice-list-item__departure-date\">{{ travelNoticeItem?.departureDate | date }}</div>\n      </div>\n     \n    </div>\n    <div class=\"col-md-3\">\n      <div class=\"bb-block bb-block--md\">\n        <div>\n          <bb-icon-ui name=\"flight-land\" size=\"sm\"></bb-icon-ui>\n          <span \n            class=\"bb-text-support bb-travel-notice-list__label\"\n            i18n='Travel notice Return date header@@cards.travel.notice.list.return.date.header'\n          > Return date: </span>\n        </div>\n        <div class=\"bb-travel-notice-list-item__return-date\">{{ travelNoticeItem?.arrivalDate | date }}</div>\n      </div>\n    </div>\n  </div>\n  <div [ngbCollapse]=\"!hostRef.areCardsOpen\" class=\"bb-block bb-block--sm\">\n    <div  class=\"bb-block bb-block--md\" *ngIf=\"hostRef.travelNoticeItem?.contact?.phoneNumber\">\n      <div>\n        <bb-icon-ui name=\"local-phone\" size=\"sm\"></bb-icon-ui>\n        <span class=\"bb-text-support bb-travel-notice-list__label\"\n          i18n='Travel notice list Contact number header@@cards.travel.notice.list.contactNumber.header'\n        > Contact number: </span>\n      </div>\n      <div>\n        <div>{{hostRef.travelNoticeItem?.contact?.phoneNumber}}</div>\n      </div>\n    </div>\n    <div>\n      <div class=\"bb-block bb-block--md\" data-role=\"selectCards header\">\n        <div\n        class=\"bb-text-bold\"\n        i18n='Travel notice list Selected Cards header@@cards.travel.notice.list.selectCards.header'\n        >Selected cards</div>\n      </div>\n      <div class=\"bb-stack bb-stack--wrap\">\n        <div class=\"bb-stack__item bb-block bb-block--md\" *ngFor=\"let paymentCard of hostRef.travelNoticeItem?.cards\">\n          <bb-cards-travel-notice-payment-card [paymentCard]=\"paymentCard\"></bb-cards-travel-notice-payment-card>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div>\n    <button bbButton data-role=\"see-details-button\" buttonSize=\"sm\" color=\"link-text\" (click)=\"hostRef.toggleCardsVisibility()\">\n      <span \n        class=\"bb-travel-notice-list__label\"\n        i18n='Travel notice list show less button@@cards.travel.notice.list.seeLess.button' \n        *ngIf=\"areCardsOpen\"\n      >\n        Show less\n      </span>\n      <span \n        class=\"bb-travel-notice-list__label\"\n        i18n='Travel notice list show more button@@cards.travel.notice.list.seeMore.button' \n        *ngIf=\"!areCardsOpen\"\n      >\n        Show more\n      </span>\n      <bb-icon-ui [name]=\"areCardsOpen?'toggle-up':'toggle-down'\" size=\"md\"></bb-icon-ui>\n    </button>\n  </div>\n</div>\n<!-- delete confirmation model  -->\n<bb-modal-ui [isOpen]=\"hostRef.dialogOpen\" (cancel)=\"hostRef.onCancel()\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <h2 i18n=\"Delete Travel Notice@@cards.delete.travel.notice.deleteTravelNotice.modal.header\">Delete travel notice?</h2>\n      <div>\n        <button bbButton color=\"unstyled\" (click)=\"hostRef.onCancel()\">\n          <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <span i18n=\"Delete confirmation text@@cards.delete.travel.notice.deleteTravelNotice.modal.body\">\n        This travel notice information will be permanently deleted.\n      </span>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui #footerRef>\n    <ng-template bbCustomModalFooter>\n      <button bbButton (click)=\"hostRef.onCancel()\" color=\"link\">\n        <span i18n=\"Cancel button text@@messages.createMessage.composeMessageModal.cancel.button\">\n          Keep it\n        </span>\n      </button>\n      <button bbButton (click)=\"hostRef.onConfirm()\" color=\"danger\">\n        <span i18n=\"Delete button text@@messages.createMessage.composeMessageModal.delete.button\">\n          Delete travel notice\n        </span>\n      </button>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n<!-- end of model -->", components: [{ type: CardsTravelNoticeStatusBadgeComponent, selector: "bb-cards-travel-notice-status-badge", inputs: ["travelNoticeItem"] }, { type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: CardsTravelNoticePaymentCardComponent, selector: "bb-cards-travel-notice-payment-card", inputs: ["paymentCard"] }, { type: i5.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i5.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i5.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i5.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i8.NgbCollapse, selector: "[ngbCollapse]", inputs: ["ngbCollapse", "animation"], outputs: ["ngbCollapseChange", "shown", "hidden"], exportAs: ["ngbCollapse"] }, { type: i5.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i5.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i5.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }], pipes: { "date": i2$1.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeListItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-cards-travel-notice-list-item',
                    templateUrl: './cards-travel-notice-list-item.component.html',
                }]
        }], ctorParameters: function () { return [{ type: TravelNoticeDatesHelperService }]; }, propDecorators: { travelNoticeItem: [{
                type: Input
            }], destinationList: [{
                type: Input
            }], delete: [{
                type: Output
            }] } });

class CardsTravelNoticeListComponent {
    constructor() {
        this.hostRef = this;
        /**
         * EventEmitter for triggering post event.
         */
        this.create = new EventEmitter();
        /**
         * EventEmitter for triggering delete event.
         */
        this.deleteListItem = new EventEmitter();
    }
    onShowCreateForm() {
        this.create.emit({ goToPage: 'create' });
    }
    onDeleteListItem(travelNoticeItem) {
        this.deleteListItem.emit(travelNoticeItem);
    }
}
CardsTravelNoticeListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CardsTravelNoticeListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeListComponent, selector: "bb-cards-travel-notice-list", inputs: { travelNoticeList: "travelNoticeList", destinationList: "destinationList" }, outputs: { create: "create", deleteListItem: "deleteListItem" }, ngImport: i0, template: "<ng-container bbTravelNoticeListCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTravelNoticeListCustomizable let-hostRef>\n  <div>\n    <div class=\"bb-text-align-right bb-block bb-block--xl bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--push-right\">\n        <button bbButton data-role=\"add-button\" (click)=\"hostRef.onShowCreateForm()\">\n          <bb-icon-ui name=\"add\"></bb-icon-ui>\n          <span i18n=\"Create new travel notice button@@cards.travel.notice.createNew.button\"> Create New</span>\n        </button>\n      </div>\n    </div>\n    <div class=\"card card-lg\">\n      <div class=\"card-body\">\n        <ng-container bbTravelNoticeListItemCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template bbTravelNoticeListItemCustomizable let-hostRef>\n  <div class=\"bb-travel-notice-list bb-list\">\n    <div class=\"bb-list__item\" *ngFor=\"let travelNoticeItem of hostRef.travelNoticeList\">\n      <bb-cards-travel-notice-list-item\n        [travelNoticeItem]=\"travelNoticeItem\"\n        [destinationList]=\"hostRef.destinationList\" \n        (delete)=\"hostRef.onDeleteListItem($event)\"\n      ></bb-cards-travel-notice-list-item>\n    </div>\n  </div>\n</ng-template>", components: [{ type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return CardsTravelNoticeListItemComponent; }), selector: "bb-cards-travel-notice-list-item", inputs: ["travelNoticeItem", "destinationList"], outputs: ["delete"] }], directives: [{ type: i0.forwardRef(function () { return TravelNoticeListCustomizableDirective; }), selector: "[bbTravelNoticeListCustomizable]" }, { type: i0.forwardRef(function () { return i7.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return TravelNoticeListItemCustomizableDirective; }), selector: "[bbTravelNoticeListItemCustomizable]" }, { type: i0.forwardRef(function () { return i2$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-cards-travel-notice-list',
                    templateUrl: './cards-travel-notice-list.component.html',
                }]
        }], propDecorators: { travelNoticeList: [{
                type: Input
            }], destinationList: [{
                type: Input
            }], create: [{
                type: Output
            }], deleteListItem: [{
                type: Output
            }] } });
class TravelNoticeListCustomizableDirective extends BbTemplate {
}
TravelNoticeListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TravelNoticeListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeListCustomizableDirective, selector: "[bbTravelNoticeListCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTravelNoticeListCustomizable]',
                }]
        }] });
class TravelNoticeListItemCustomizableDirective extends BbTemplate {
}
TravelNoticeListItemCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeListItemCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TravelNoticeListItemCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeListItemCustomizableDirective, selector: "[bbTravelNoticeListItemCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeListItemCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTravelNoticeListItemCustomizable]',
                }]
        }] });

class CardsTravelNoticeCountrySelectorComponent {
    constructor() {
        this.destionationListControl = new FormControl([]);
        this.updateCountryList = (destinations) => {
            this.onChange(destinations.map((item) => ({
                country: item.parent ? item.parent : item.value,
                region: item.parent && item.value,
            })));
        };
        this.onChange = () => { };
        this.onTouched = () => { };
    }
    // eslint-disable-next-line
    set destinationList(value) {
        this.destinationsDisplay = [
            ...value.map((item) => ({
                name: item.name,
                value: item.code,
            })),
            ...value
                .filter((item) => item.regions !== undefined)
                .reduce((acc, { regions = [], code: countryCode }) => [
                ...acc,
                ...regions.map((region) => ({
                    name: `${region.name} (${countryCode})`,
                    value: region.code,
                    parent: countryCode,
                })),
            ], []),
        ].sort((left, right) => {
            if (left.name === right.name) {
                return 0;
            }
            return left.name > right.name ? 1 : -1;
        });
        this.fullDestinationList = value;
    }
    get destinationList() {
        return this.fullDestinationList || [];
    }
    get destinationListDisplay() {
        return this.destinationsDisplay || [];
    }
    writeValue(countries) {
        this.destionationListControl.setValue(countries.map(({ country, region }) => (region ? `${country}:${region}` : country)));
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    ngOnInit() {
        this.countryListSubscription = this.destionationListControl.valueChanges.subscribe(this.updateCountryList);
    }
    ngOnDestroy() {
        if (this.countryListSubscription) {
            this.countryListSubscription.unsubscribe();
        }
    }
}
CardsTravelNoticeCountrySelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeCountrySelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CardsTravelNoticeCountrySelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeCountrySelectorComponent, selector: "bb-cards-travel-notice-country-selector", inputs: { destinationList: "destinationList" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            // eslint-disable-next-line @angular-eslint/no-forward-ref
            useExisting: forwardRef(() => CardsTravelNoticeCountrySelectorComponent),
            multi: true,
        },
    ], ngImport: i0, template: "<ng-select \n  [items]=\"destinationListDisplay\"\n  class=\"bb-country-selector\"\n  [hideSelected]=\"true\"\n  [multiple]=\"true\"\n  bindLabel=\"name\"\n  [formControl]=\"destionationListControl\"\n  aria-label=\"Search or select countries\"\n  i18n-aria-label=\"Search or select countries aria-label@@cards.create.travel.notice.country.dropdown.tagSelector.aria-label\"\n  placeholder=\"Search or select countries\"\n  i18n-placeholder=\"Search or select countries@@cards.create.travel.notice.country.dropdown.tagSelector.placeholder\"\n></ng-select>", components: [{ type: i1$1.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }], directives: [{ type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeCountrySelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-cards-travel-notice-country-selector',
                    templateUrl: 'cards-travel-notice-country-selector.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            // eslint-disable-next-line @angular-eslint/no-forward-ref
                            useExisting: forwardRef(() => CardsTravelNoticeCountrySelectorComponent),
                            multi: true,
                        },
                    ],
                }]
        }], propDecorators: { destinationList: [{
                type: Input
            }] } });

class CardsTravelNoticeCheckboxCardsComponent {
    constructor(fb) {
        this.fb = fb;
        this.indeterminate = false;
        this.onChange = () => { };
        this.onTouched = () => { };
        this.isIndeterminate = () => {
            if (this.checkBoxCardsForm) {
                const cardsIdsControl = this.checkBoxCardsForm.controls['cardIds'].controls;
                const elements = Object.keys(cardsIdsControl);
                const actives = elements.reduce((previous, item) => (cardsIdsControl[item].value ? previous + 1 : previous), 0);
                return actives !== 0 && actives < elements.length;
            }
            return false;
        };
        this.parentChange = (value) => {
            if (this.checkBoxCardsForm) {
                const cardsIdsControl = this.checkBoxCardsForm.controls['cardIds'];
                const newValue = this.createCardsObjectWithDefaultValue(Object.keys(cardsIdsControl.controls), (item) => item, value);
                cardsIdsControl.setValue(newValue);
            }
        };
        this.childChange = (cardIds) => {
            this.indeterminate = this.isIndeterminate();
            const result = Object.keys(cardIds || {}).filter((item) => cardIds[item] === true);
            this.onChange(result.map((item) => this.paymentCards && this.paymentCards.find((card) => card.id === item)));
        };
    }
    createCardsObjectWithDefaultValue(group = [], keyFinder, defaultValue) {
        return group.reduce((acc, cur) => (Object.assign(Object.assign({}, acc), { [keyFinder(cur)]: defaultValue })), {});
    }
    hasCardsSelected(control) {
        const cards = Object.keys(control.controls).find((item) => control.controls[item].value === true);
        // eslint-disable-next-line no-null/no-null
        return cards ? null : { empty: true };
    }
    createForm() {
        const cardsFormGroup = this.createCardsObjectWithDefaultValue(this.paymentCards, (card) => card.id, [
            false,
        ]);
        this.checkBoxCardsForm = this.fb.group({
            parent: [false],
            cardIds: this.fb.group(cardsFormGroup),
        });
        this.checkBoxCardsForm.controls['cardIds'].setValidators(this.hasCardsSelected);
    }
    writeValue(cards) {
        if (this.checkBoxCardsForm && cards && !!this.paymentCards) {
            const cardIds = this.checkBoxCardsForm.controls['cardIds'];
            cards.forEach((item) => cardIds.controls[item.id].setValue(true));
            if (cards.length === this.paymentCards.length) {
                this.checkBoxCardsForm.patchValue({ parent: true });
            }
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    ngOnInit() {
        this.createForm();
        if (this.checkBoxCardsForm) {
            const parentGroup = this.checkBoxCardsForm.controls['parent'];
            const childrenGroup = this.checkBoxCardsForm.controls['cardIds'];
            this.parentSubscription = parentGroup.valueChanges.subscribe(this.parentChange);
            this.childrenSubscription = childrenGroup.valueChanges.subscribe(this.childChange);
        }
    }
    ngOnDestroy() {
        if (this.parentSubscription) {
            this.parentSubscription.unsubscribe();
        }
        if (this.childrenSubscription) {
            this.childrenSubscription.unsubscribe();
        }
    }
}
CardsTravelNoticeCheckboxCardsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeCheckboxCardsComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
CardsTravelNoticeCheckboxCardsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeCheckboxCardsComponent, selector: "bb-cards-travel-notice-checkbox-cards", inputs: { paymentCards: "paymentCards" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            // eslint-disable-next-line @angular-eslint/no-forward-ref
            useExisting: forwardRef(() => CardsTravelNoticeCheckboxCardsComponent),
            multi: true,
        },
    ], ngImport: i0, template: "<form [formGroup]=\"checkBoxCardsForm!\">\n  <ul class=\"list-unstyled\">\n    <li>\n      <div class=\"bb-block bb-block--xl\">\n        <bb-input-checkbox-ui \n          formControlName=\"parent\" \n          label=\"Select all cards\"\n          i18n-label=\"Select all cards@@cards.create.travel.notice.checkbox.label\"\n          i18n=\"Select all cards@@cards.create.travel.notice.checkbox.child\"\n          [indeterminate]=\"indeterminate\"\n        >\n          label=\"Select all cards\"\n        </bb-input-checkbox-ui>\n      </div>\n      <!--card -->\n      <div class=\"row bb-create-travel-notice-card-group\" formGroupName=\"cardIds\">\n        <ng-container *ngFor=\"let paymentCard of paymentCards\">\n          <div class=\"col-lg-6\">\n            <div class=\"bb-block bb-block--xl\">\n              <div class=\"bb-stack\">\n                <div class=\"bb-stack__item\">\n                  <bb-input-checkbox-ui [formControlName]=\"paymentCard.id\">\n                    <div class=\"bb-create-travel-notice-card-group__payment-card\">\n                      <bb-cards-travel-notice-payment-card [paymentCard]=\"paymentCard\"></bb-cards-travel-notice-payment-card>\n                    </div>\n                  </bb-input-checkbox-ui>\n                </div>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n      <!-- end card -->\n    </li>\n  </ul>\n</form>", components: [{ type: i2$4.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: CardsTravelNoticePaymentCardComponent, selector: "bb-cards-travel-notice-payment-card", inputs: ["paymentCard"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeCheckboxCardsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-cards-travel-notice-checkbox-cards',
                    templateUrl: 'cards-travel-notice-checkbox-cards.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            // eslint-disable-next-line @angular-eslint/no-forward-ref
                            useExisting: forwardRef(() => CardsTravelNoticeCheckboxCardsComponent),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; }, propDecorators: { paymentCards: [{
                type: Input
            }] } });

class CardsTravelNoticeConfirmStepComponent {
    getCountryName(travelNoticeCountry) {
        return getCountryName(this.destinationList, travelNoticeCountry);
    }
}
CardsTravelNoticeConfirmStepComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeConfirmStepComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CardsTravelNoticeConfirmStepComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeConfirmStepComponent, selector: "bb-cards-travel-notice-confirm-step", inputs: { travelNoticeItem: "travelNoticeItem", selectedCards: "selectedCards", destinationList: "destinationList" }, ngImport: i0, template: "<div class=\"bb-create-travel-notice-review\">\n  <h3 class=\"bb-block bb-block--lg\"\n    i18n=\"Travel notice create details header@@cards.travel.notice.create.details.confirm.header\">Travel\n    details\n  </h3>\n  <div class=\"bb-block bb-block--lg\">\n    <div>\n      <span class=\"bb-inline-stack\">\n        <bb-icon-ui class=\"bb-inline-stack__item\" name=\"location-on\" size=\"sm\"></bb-icon-ui>\n      <span \n        class=\"bb-text-support bb-inline-stack__item bb-travel-notice-list__label\"\n        i18n=\"Travel notice destinations@@cards.create.travel.notice.confirm.destinations.input\"\n      >Destination(s):</span>\n      </span>\n    </div>\n    <div data-role=\"countries-label\">\n      <span *ngFor=\"let item of  travelNoticeItem?.destinations; first as isFirst; last as isLast\">\n        <span *ngIf=\"!isLast && !isFirst\">, </span>\n        <span *ngIf=\"!isFirst && isLast\">&nbsp;</span>\n        <span i18n=\"And@@cards.travel.notice.list.countries.and\" *ngIf=\"!isFirst && isLast\">and</span>\n        <span *ngIf=\"!isFirst && isLast\">&nbsp;</span>\n        <span>{{getCountryName(item)}}</span>\n      </span>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-3\">\n      <div class=\"bb-block bb-block--lg\">\n        <div>\n          <span class=\"bb-inline-stack\">\n            <bb-icon-ui class=\"bb-inline-stack__item\" name=\"flight-takeoff\" size=\"sm\" [cropped]=\"true\"></bb-icon-ui>\n          <span \n            class=\"bb-text-support bb-inline-stack__item bb-travel-notice-list__label\"\n            i18n='Create travel notice confirm Departure date header@@cards.create.travel.notice.confirm.departure.date.header'\n          >Departure date: </span>\n          </span>\n        </div>\n        <div data-role=\"departure-date-label\">{{ travelNoticeItem?.departureDate | date }}</div>\n      </div>\n    </div>\n    <div class=\"col-md-3\">\n      <div [ngClass]=\"{'bb-block bb-block--lg': travelNoticeItem?.contact?.phoneNumber, 'bb-block bb-block--xl': !(travelNoticeItem?.contact?.phoneNumber)}\">\n        <div>\n          <span class=\"bb-inline-stack\">\n            <bb-icon-ui class=\"bb-inline-stack__item\" name=\"flight-land\" size=\"sm\"></bb-icon-ui>\n          <span \n            class=\"bb-text-support bb-inline-stack__item bb-travel-notice-list__label\"\n            i18n='Create travel notice Return date header@@cards.create.travel.notice.confirm.return.date.header'\n          >Return date:</span>\n          </span>\n        </div>\n        <div data-role=\"arrival-date-label\">{{ travelNoticeItem?.arrivalDate | date }}</div>\n      </div>\n    </div>\n  </div>\n  <div class=\"bb-block bb-block--xl\" *ngIf=\"travelNoticeItem?.contact?.phoneNumber\">\n    <div>\n      <span class=\"bb-inline-stack\">\n        <bb-icon-ui class=\"bb-inline-stack__item\" name=\"local-phone\" size=\"sm\"></bb-icon-ui>\n      <span \n        class=\"bb-text-support bb-inline-stack__item bb-travel-notice-list__label\"\n        i18n='Create travel notice list Contact number header@@cards.create.travel.notice.confirm.contactNumber.header'\n      >Contact number:\n      </span>\n      </span>\n    </div>\n    <div>\n      <div data-role=\"contact-number-label\">{{ travelNoticeItem?.contact?.phoneNumber}}</div>\n    </div>\n  </div>\n  <div>\n    <h3 \n      i18n=\"Create travel notice confirm Selected Cards header@@cards.create.travel.notice.confirm.selectCards.header\"\n      class=\"bb-block bb-block--lg\"\n    >\n      Selected cards\n    </h3>\n    <div class=\"bb-stack bb-stack--wrap\">\n      <div class=\"bb-stack__item\" *ngFor=\"let paymentCard of selectedCards\">\n        <div class=\"bb-block bb-block--md\">\n          <bb-cards-travel-notice-payment-card [paymentCard]=\"paymentCard\"></bb-cards-travel-notice-payment-card>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: CardsTravelNoticePaymentCardComponent, selector: "bb-cards-travel-notice-payment-card", inputs: ["paymentCard"] }], directives: [{ type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "date": i2$1.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeConfirmStepComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-cards-travel-notice-confirm-step',
                    templateUrl: './cards-travel-notice-confirm-step.component.html',
                }]
        }], propDecorators: { travelNoticeItem: [{
                type: Input
            }], selectedCards: [{
                type: Input
            }], destinationList: [{
                type: Input
            }] } });

class CardsTravelNoticeCreateComponent {
    constructor(fb, datePipe) {
        this.fb = fb;
        this.datePipe = datePipe;
        this.hostRef = this;
        /**
         * Cancel form for create travel notice event emitter.
         */
        this.abortCreation = new EventEmitter();
        /**
         * Submit for create travel notice form event emitter.
         */
        this.save = new EventEmitter();
        this.currentStep = 1;
        this.dialogOpen = false;
        this.displayAlert = false;
        this.travelNoticeItem = {};
        this.closeConfirmationDialog = () => {
            this.dialogOpen = false;
        };
        this.confirmCancel = () => {
            this.closeConfirmationDialog();
            this.abortCreation.emit({ goToPage: 'list' });
        };
        this.updateTravelNoticeValue = (createTravelNoticeForm) => {
            const { details, cardIds: cards } = createTravelNoticeForm;
            if (cards) {
                this.travelNoticeItem = Object.assign(Object.assign({}, this.travelNoticeItem), { cards });
            }
            if (details) {
                this.travelNoticeItem = Object.assign(Object.assign({}, this.travelNoticeItem), { destinations: details.destinations, contact: {
                        phoneNumber: details.contactNumber + '',
                    } });
            }
            if (this.departureDate.valid) {
                this.travelNoticeItem = Object.assign(Object.assign({}, this.travelNoticeItem), { departureDate: this.datePipe.transform(details.departureDate, 'yyyy-MM-dd') });
            }
            if (this.arrivalDate.valid) {
                this.travelNoticeItem = Object.assign(Object.assign({}, this.travelNoticeItem), { arrivalDate: this.datePipe.transform(details.arrivalDate, 'yyyy-MM-dd') });
            }
            this.displayAlert = false;
        };
        this.currentDateValidator = (control) => {
            const returnDate = new Date(control.value);
            const currentDate = this.truncateDate();
            // eslint-disable-next-line , no-null/no-null
            return returnDate.getTime() < currentDate.getTime() ? { invalidCurrentDate: true } : null;
        };
    }
    next(nextForm) {
        if (this.currentForm) {
            this.currentForm.markAllAsTouched();
            this.currentForm.updateValueAndValidity();
            if (this.currentStep === 2) {
                this.displayAlert = this.currentForm.invalid;
            }
            if (this.currentForm.valid) {
                this.currentStep += 1;
                this.currentForm = nextForm;
            }
        }
    }
    back(prevForm) {
        this.currentStep -= 1;
        this.currentForm = prevForm;
    }
    onCancel() {
        this.dialogOpen = true;
    }
    onSubmitTravelNotice() {
        this.save.emit(this.travelNoticeItem);
    }
    isFieldValid(fieldName) {
        const control = this.detailsGroup.get(fieldName);
        return !!control && (control.valid || control.untouched);
    }
    onAlertDismiss() {
        this.displayAlert = false;
    }
    ngOnInit() {
        if (!this.paymentCards)
            return;
        this.createTravelNoticeForm = this.fb.group({
            details: this.fb.group({
                destinations: [
                    [],
                    (control) => 
                    // eslint-disable-next-line , no-null/no-null
                    control.value && control.value.length > 0 ? null : { required: 'item required' },
                ],
                departureDate: [''],
                arrivalDate: [''],
                contactNumber: ['', Validators.pattern('^[0-9()-+ ]*$')],
            }),
            cardIds: [this.paymentCards ? this.paymentCards : []],
        });
        this.createTravelNoticeForm.markAsPristine();
        this.travelNoticeSubscription = this.createTravelNoticeForm.valueChanges.subscribe(this.updateTravelNoticeValue);
        this.currentForm = this.detailsGroup;
        this.cardIdsGroup.setValidators(this.hasCardsSelected);
        this.addDateValidators();
    }
    /**
     *
     * temporary solution once datepicker is ready to validate ranges is release this method will be removed
     */
    addDateValidators() {
        if (!!this.createTravelNoticeForm && this.departureDate && this.arrivalDate) {
            this.departureDate.setValidators([Validators.required, this.dateValidator('arrivalDate', 'departureDate')]);
            this.arrivalDate.setValidators([
                Validators.required,
                this.currentDateValidator,
                this.dateValidator('arrivalDate', 'departureDate'),
            ]);
            this.departureDateSubscription = this.departureDate.valueChanges.subscribe(() => {
                this.arrivalDate.updateValueAndValidity({ emitEvent: false });
            });
            this.arrivalDateSubcription = this.arrivalDate.valueChanges.subscribe(() => {
                this.departureDate.updateValueAndValidity({ emitEvent: false });
            });
        }
    }
    ngOnDestroy() {
        if (this.travelNoticeSubscription) {
            this.travelNoticeSubscription.unsubscribe();
        }
        if (this.arrivalDateSubcription) {
            this.arrivalDateSubcription.unsubscribe();
        }
        if (this.departureDateSubscription) {
            this.departureDateSubscription.unsubscribe();
        }
    }
    /**
     *
     * temporary solution once datepicker is ready to validate ranges is release this method will be removed
     */
    dateValidator(fieldName1, fieldName2) {
        return () => {
            const formControl1 = this.detailsGroup.get(fieldName1);
            const formControl2 = this.detailsGroup.get(fieldName2);
            const date1 = new Date(formControl1.value).getTime();
            const date2 = new Date(formControl2.value).getTime();
            // eslint-disable-next-line , no-null/no-null
            return date1 < date2 ? { invalidDate: true } : null;
        };
    }
    truncateDate(date = new Date()) {
        const newDate = new Date(date);
        newDate.setHours(0, 0, 0, 0);
        return newDate;
    }
    hasCardsSelected(control) {
        const cards = control.value;
        // eslint-disable-next-line no-null/no-null
        return cards.length === 0 ? { empty: true } : null;
    }
    get detailsGroup() {
        return this.createTravelNoticeForm.get('details');
    }
    get cardIdsGroup() {
        return this.createTravelNoticeForm.get('cardIds');
    }
    get destinations() {
        return this.detailsGroup.get('destinations');
    }
    get arrivalDate() {
        return this.detailsGroup.get('arrivalDate');
    }
    get departureDate() {
        return this.detailsGroup.get('departureDate');
    }
    get contactNumber() {
        return this.detailsGroup.get('contactNumber');
    }
}
CardsTravelNoticeCreateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeCreateComponent, deps: [{ token: i1$2.FormBuilder }, { token: i2$1.DatePipe }], target: i0.ɵɵFactoryTarget.Component });
CardsTravelNoticeCreateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeCreateComponent, selector: "bb-cards-travel-notice-create", inputs: { paymentCards: "paymentCards", destinationList: "destinationList" }, outputs: { abortCreation: "abortCreation", save: "save" }, providers: [DatePipe], ngImport: i0, template: "<ng-container bbTravelNoticeCreateCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTravelNoticeCreateCustomizable let-hostRef>\n  <h1 class=\"bb-block bb-block--lg\" i18n=\"Create travel notice header@@cards.create.travel.notice.header\">\n    Create travel notice\n  </h1>\n  <div class=\"card card-lg bb-create-travel-notice\">\n    <div class=\"card-body\">\n      <ng-container bbTravelNoticeStepperCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n      <form [formGroup]=\"hostRef.createTravelNoticeForm\" (ngSubmit)=\"hostRef.onSubmitTravelNotice()\">\n        <ng-container bbTravelNoticeDetailsStepCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n        <ng-container bbTravelNoticeSelectCardsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n        <ng-container bbTravelNoticeConfirmStepCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n      </form>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template bbTravelNoticeStepperCustomizable let-hostRef>\n  <div class=\"bb-block bb-block--lg\">\n    <div class=\"row bb-stack--center\">\n      <bb-stepper-ui class= \"col-12 col-md-10 col-lg-8\">\n        <bb-stepper-step-ui \n          label=\"Travel details\"\n          i18n-label=\"Travel details@@cards.create.travel.notice.stepper.header.step1\"\n          [isChecked]=\"hostRef.currentStep > 1\"\n          [isActive]=\"hostRef.currentStep >= 1\"\n          ariaLabel=\"Step 1 out of 3\"\n          i18n-ariaLabel=\"Step 1 out of 3@@cards.create.travel.notice.stepper.aria.label.step1\"\n        >\n        </bb-stepper-step-ui>\n        <bb-stepper-step-ui \n          class=\"bb-stack__item\" \n          label=\"Card selection\"\n          i18n-label=\"Card selection@@cards.create.travel.notice.stepper.header.step2\"\n          [isChecked]=\"hostRef.currentStep > 2\"\n          [isActive]=\"hostRef.currentStep >= 2\" \n          ariaLabel=\"Step 2 out of 3\"\n          i18n-ariaLabel=\"Step 2 out of 3@@cards.create.travel.notice.stepper.aria.label.step2\"\n        >\n        </bb-stepper-step-ui>\n        <bb-stepper-step-ui \n          class=\"bb-stack__item\" \n          label=\"Confirmation\" \n          i18n-label=\"Confirmation@@cards.create.travel.notice.stepper.header.step3\"\n          [isActive]=\"hostRef.currentStep >= 3\" \n          ariaLabel=\"Step 3 out of 3\"\n          i18n-ariaLabel=\"Step 3 out of 3@@cards.create.travel.notice.stepper.aria.label.step3\"\n        >\n        </bb-stepper-step-ui>\n      </bb-stepper-ui>\n    </div>\n  </div>\n  <!-- cancel travel notice modal -->\n  <bb-modal-ui [isOpen]=\"hostRef.dialogOpen\" (cancel)=\"hostRef.closeConfirmationDialog()\">\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <h2 i18n=\"Cancel Travel Notice@@cards.create.travel.notice.cancelTravelNotice.modal.header\">\n          Discard travel notice?\n        </h2>\n        <div>\n          <button bbButton color=\"unstyled\" (click)=\"hostRef.closeConfirmationDialog()\">\n            <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n          </button>\n        </div>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span i18n=\"Delete confirmation text@@cards.create.travel.notice.cancelTravelNotice.modal.body\">\n          All entered information for this travel notice will be permanently lost.\n        </span>\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui #footerRef>\n      <ng-template bbCustomModalFooter>\n        <button bbButton (click)=\"hostRef.closeConfirmationDialog()\" color=\"link\">\n          <span i18n=\"Submit button text@@messages.createMessage.composeMessageModal.keepCreating.button\">\n            Keep it\n          </span>\n        </button>\n        <button bbButton (click)=\"hostRef.confirmCancel()\" color=\"danger\">\n          <span i18n=\"Discard button text@@messages.createMessage.composeMessageModal.discardButton\">\n            Discard travel notice\n          </span>\n        </button>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n  <!-- end of modal -->\n</ng-template>\n\n<ng-template bbTravelNoticeDetailsStepCustomizable let-hostRef>\n  <form [formGroup]=\"hostRef.detailsGroup\">\n    <div [hidden]=\"hostRef.currentStep !== 1\">\n      <h2 \n        class=\"bb-block bb-block--xl\"\n        i18n=\"Create travel notice details form header@@cards.create.travel.notice.details.form.header\"\n      >\n        Tell us about your travel details\n      </h2>\n      <div class=\"bb-block bb-block--xl\">\n        <!-- Destinations input -->\n        <div class=\"bb-block bb-block--lg\">\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <div class=\"bb-create-travel-notice__country-selector\">\n                <label i18n=\"Travel notice destinations input@@cards.create.travel.notice.details.form.destinations.input\">\n                  Destination(s)\n                </label>\n                <bb-cards-travel-notice-country-selector\n                  [destinationList]=\"hostRef.destinationList\"\n                  formControlName=\"destinations\"\n                ></bb-cards-travel-notice-country-selector>\n              </div>\n            </div>\n          </div>\n          <bb-input-validation-message-ui [showErrors]=\"!hostRef.isFieldValid('destinations')\">\n            <span \n              i18n=\"Travel notice no destinations validation@@cards.create.travel.notice.required.destinations.error.msg\"\n              *ngIf=\"hostRef.destinations.hasError('required')\"\n            >\n              Please select one or more destinations\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n        <!-- end of input -->\n        <div class=\"row\">\n          <!-- Departure date input -->\n          <div class=\"col-md-6 bb-block bb-block--lg\">\n            <bb-input-datepicker-ui \n              placeholder=\"MM/DD/YYYY\"\n              i18n-placeholder=\"Departure date input placeholder@@cards.create.travel.notice.form.departure.input.placeholder\" \n              label=\"Departure date\"\n              i18n-label=\"Departure date@@cards.create.travel.notice.form.departure.label\" \n              name=\"departureDate\"\n              formControlName=\"departureDate\"\n              [overrideDateFormat]=\"'longDate'\"\n            >\n            </bb-input-datepicker-ui>\n            <bb-input-validation-message-ui [showErrors]=\"!hostRef.isFieldValid('departureDate')\">\n\n              <ng-container *ngFor=\"let error of hostRef.departureDate.errors | keyvalue; last as last\">\n                <ng-container *ngIf=\"last\" [ngSwitch]=\"error.key\">\n                  <span\n                    *ngSwitchCase=\"'required'\"\n                    i18n=\"Missing departure date|Missing leaving date|Missing initial Date@@cards.create.travel.notice.required.departureDate.error.msg\"\n                  >\n                    Please choose a departure date\n                  </span>\n                  <span \n                    *ngSwitchCase=\"'invalidDate'\"\n                    i18n=\"Invalid departure date|Arrival date is before departure@@cards.create.travel.notice.invalid.returnDateConflict.error.msg\"\n                  >\n                    The return date cannot be before the departure date\n                  </span>\n                  <span \n                    *ngSwitchCase=\"'invalidDateFormat'\"\n                    i18n=\"Invalid departure date|Invalid date format@@cards.create.travel.notice.invalid.arrivalDate.hasInvalidFormat.error.msg\"\n                  >\n                    Please enter a valid format. For example, 10/08/2020\n                  </span>\n                </ng-container>\n              </ng-container>\n\n            </bb-input-validation-message-ui>\n          </div>\n          <!-- end of input -->\n          <!-- Return date input -->\n          <div class=\"col-md-6 bb-block bb-block--lg\">\n            <bb-input-datepicker-ui \n              placeholder=\"MM/DD/YYYY\"\n              i18n-placeholder=\"Arrival date input placeholder@@cards.create.travel.notice.form.arrival.input.placeholder\" \n              label=\"Return date\"\n              i18n-label=\"Return date@@cards.create.travel.notice.form.arrival.label\" \n              name=\"arrivalDate\"\n              formControlName=\"arrivalDate\"\n              [overrideDateFormat]=\"'longDate'\"\n            >\n            </bb-input-datepicker-ui>\n            <bb-input-validation-message-ui [showErrors]=\"!hostRef.isFieldValid('arrivalDate')\">\n\n              <ng-container *ngFor=\"let error of hostRef.arrivalDate.errors | keyvalue; last as last\">\n                <ng-container *ngIf=\"last\" [ngSwitch]=\"error.key\">\n                  <span \n                    *ngSwitchCase=\"'required'\"\n                    i18n=\"Missing arrival date|Missing coming date|Missing last Date@@cards.create.travel.notice.required.departureDate.error.msg\"\n                  >\n                    Please choose a return date\n                  </span>\n                  <span \n                    *ngSwitchCase=\"'invalidDate'\"\n                    i18n=\"Invalid arrival date|Arrival date is before departure@@cards.create.travel.notice.invalid.returnDateConflict.error.msg\"\n                  >\n                    The return date cannot be before the departure date\n                  </span>\n                  <span \n                    *ngSwitchCase=\"'invalidCurrentDate'\"\n                    i18n=\"Invalid departure date|Arrival date is before current date@@cards.create.travel.notice.invalid.arrivalDate.hasCurrentDate.error.msg\"\n                  >\n                    Please do not choose a past return date\n                  </span>\n                  <span \n                    *ngSwitchCase=\"'invalidDateFormat'\"\n                    i18n=\"Invalid arrival date|Invalid date format@@cards.create.travel.notice.invalid.arrivalDate.hasInvalidFormat.error.msg\"\n                  >\n                    Please enter a valid format. For example, 10/08/2020\n                  </span>\n                </ng-container>\n              </ng-container>\n            </bb-input-validation-message-ui>\n          </div>\n          <!-- end of input -->\n        </div>\n        <!-- Contact number input -->\n        <div class=\"bb-block\">\n          <label>\n            <strong i18n=\"Contact Number@@cards.create.travel.notice.details.form.contactNumber.input\">\n              Contact number\n            </strong>\n          </label>\n          <span class=\"bb-text-support\" i18n=\"Optional@@cards.create.travel.notice.details.form.contactNumber.optional\">\n            (Optional)\n          </span>\n          <div class=\"bb-block\" [ngClass]=\"{'bb-block--sm': hostRef.isFieldValid('contactNumber')}\">\n            <div class=\"row\">\n              <div class=\"col-md-6\">\n                <div class=\"bb-create-travel-notice__contact-number\">\n                  <bb-input-phone-ui \n                    formControlName=\"contactNumber\"\n                    placeholder=\"e.g. +(1) 541 754 3010\"\n                    i18n-placeholder=\"Example placeholder, e.g. +(1) 541 754 3010@@cards.create.travel.notice.details.form.contactNumber.placeholder\"\n                  >\n                  </bb-input-phone-ui>\n                  <bb-input-validation-message-ui [showErrors]=\"!hostRef.isFieldValid('contactNumber')\">\n                    <div class=\"bb-block bb-block--sm\">\n                      <span i18n=\"Invalid contact number@@cards.create.travel.notice.details.form.contactNumber.error.pattern\">\n                        Invalid contact number\n                      </span>\n                    </div>\n                  </bb-input-validation-message-ui>\n                </div>\n              </div>\n            </div>\n          </div>\n          <span\n            class=\"bb-create-travel-notice__disclaimer\"\n            i18n=\"Contact phone number description@@cards.create.travel.notice.details.form.contactNumber.description\"\n          >\n            We will reach you on this number in case of any suspicious activity.\n          </span>\n        </div>\n      </div>\n      <!-- end of input -->\n      <div class=\"bb-button-bar\">\n        <button \n          class=\"bb-button-bar__button\" \n          bbButton\n          i18n=\"Continue Button text@@cards.create.travel.notice.details.form.continue.button\"\n          (click)=\"hostRef.next(hostRef.cardIdsGroup)\"\n        >\n          Continue\n        </button>\n        <button \n          class=\"bb-button-bar__button bb-button-bar__button--across\" \n          bbButton \n          color=\"link\"\n          i18n=\"Cancel button text@@cards.create.travel.notice.details.form.cancel.button\"\n          (click)=\"hostRef.onCancel()\"\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  </form>\n</ng-template>\n\n<ng-template bbTravelNoticeSelectCardsCustomizable let-hostRef>\n  <div [hidden]=\"hostRef.currentStep !== 2\">\n    <h2 \n      class=\"bb-block bb-block--xl\"\n      i18n=\"Create travel notice select cards header@@cards.create.travel.notice.selectCards.header\"\n    >\n      Select the cards you are travelling with\n    </h2>\n    <bb-alert-ui *ngIf=\"hostRef.displayAlert\"\n      title=\"You need to select at least one card in order to create a travel notice\"\n      i18n-title=\"You need to select at least one card in order to create a travel notice|Pick one@@cards.create.travel.notice.selectCards.alert\"\n      [dismissible]=\"true\"\n      (close)=\"hostRef.onAlertDismiss()\"\n    ></bb-alert-ui>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-cards-travel-notice-checkbox-cards [paymentCards]=\"hostRef.paymentCards\" [formControl]=\"hostRef.cardIdsGroup\"></bb-cards-travel-notice-checkbox-cards>\n    </div>\n    <div class=\"bb-button-bar\">\n      <button\n        class=\"bb-button-bar__button\" \n        bbButton\n        i18n=\"Continue Button text@@cards.create.travel.notice.selectCards.step.continue.button\"\n        (click)=\"hostRef.next()\"\n      >\n        Continue\n      </button>\n      <button  \n        class=\"bb-button-bar__button\" \n        bbButton color=\"secondary\"\n        i18n=\"Back button text@@cards.create.travel.notice.selectCards.step.back.button\"\n        (click)=\"hostRef.back(hostRef.detailsGroup)\"\n      >\n        Back\n      </button>\n      <div \n        class=\"bb-button-bar__button bb-text-support bb-create-travel-notice__cards-count bb-create-travel-notice__cards-count--xs-top\"\n        *ngIf=\"hostRef.cardIdsGroup.value.length !== 0\"\n      >\n        {{hostRef.cardIdsGroup.value.length}} of {{hostRef.paymentCards.length}} selected\n      </div>\n      <div class=\"bb-button-bar__button bb-button-bar__button--across\">\n        <button \n          bbButton\n          color=\"link\"\n          i18n=\"Cancel button text@@cards.create.travel.notice.selectCards.step.cancel.button\"\n          (click)=\"hostRef.onCancel()\"\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template bbTravelNoticeConfirmStepCustomizable let-hostRef>\n  <div *ngIf=\"hostRef.currentStep === 3\">\n    <h2   \n      class=\"bb-block bb-block--xl\"\n      i18n=\"Create travel notice confirmation step header@@cards.create.travel.notice.confirm.step.header\"\n    >\n      Review your travel notice\n    </h2>\n    <div class=\"bb-block bb-block--xl\">\n      <bb-cards-travel-notice-confirm-step\n        [travelNoticeItem]=\"hostRef.travelNoticeItem\"\n        [selectedCards]=\"hostRef.cardIdsGroup?.value\"\n        [destinationList]=\"hostRef.destinationList\"\n      ></bb-cards-travel-notice-confirm-step>\n    </div>\n    <div class=\"bb-button-bar\">\n      <button  \n        class=\"bb-button-bar__button\" \n        bbButton \n        type=\"submit\"\n        i18n=\"Confirm button text@@cards.create.travel.notice.confirmation.step.confirm.button\"\n      >\n        Confirm\n      </button>\n      <button \n        class=\"bb-button-bar__button\" \n        bbButton \n        color=\"secondary\"\n        i18n=\"Back button text@@cards.create.travel.notice.confirmation.step.back.button\"\n        (click)=\"hostRef.back(hostRef.cardIdsGroup)\"\n      >\n        Back\n      </button>\n      <button\n        class=\"bb-button-bar__button bb-button-bar__button--across\" \n        bbButton \n        color=\"link\"\n        i18n=\"Cancel button text@@cards.create.travel.notice.confirmation.step.cancel.button\"\n        (click)=\"hostRef.onCancel()\"\n      >\n        Cancel\n      </button>\n    </div>\n  </div>\n</ng-template>", components: [{ type: i0.forwardRef(function () { return i3.StepperComponent; }), selector: "bb-stepper-ui", outputs: ["select"] }, { type: i0.forwardRef(function () { return i3.StepperStepComponent; }), selector: "bb-stepper-step-ui", inputs: ["label", "stateLabel", "data", "ariaLabel", "isCurrent", "isChecked", "isActive"] }, { type: i0.forwardRef(function () { return i5.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i5.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i5.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i5.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0.forwardRef(function () { return CardsTravelNoticeCountrySelectorComponent; }), selector: "bb-cards-travel-notice-country-selector", inputs: ["destinationList"] }, { type: i0.forwardRef(function () { return i7$1.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i8$1.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i0.forwardRef(function () { return i9.InputPhoneComponent; }), selector: "bb-input-phone-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "ariaLabel", "autocomplete", "countryList", "dropdownPosition", "clearable", "searchable", "defaultCountryIsoCode", "enableCountryCode"] }, { type: i0.forwardRef(function () { return i10.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return CardsTravelNoticeCheckboxCardsComponent; }), selector: "bb-cards-travel-notice-checkbox-cards", inputs: ["paymentCards"] }, { type: i0.forwardRef(function () { return CardsTravelNoticeConfirmStepComponent; }), selector: "bb-cards-travel-notice-confirm-step", inputs: ["travelNoticeItem", "selectedCards", "destinationList"] }], directives: [{ type: i0.forwardRef(function () { return TravelNoticeCreateCustomizableDirective; }), selector: "[bbTravelNoticeCreateCustomizable]" }, { type: i0.forwardRef(function () { return TravelNoticeStepperCustomizableDirective; }), selector: "[bbTravelNoticeStepperCustomizable]" }, { type: i0.forwardRef(function () { return i1$2.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i1$2.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i1$2.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return TravelNoticeDetailsStepCustomizableDirective; }), selector: "[bbTravelNoticeDetailsStepCustomizable]" }, { type: i0.forwardRef(function () { return TravelNoticeSelectCardsCustomizableDirective; }), selector: "[bbTravelNoticeSelectCardsCustomizable]" }, { type: i0.forwardRef(function () { return TravelNoticeConfirmStepCustomizableDirective; }), selector: "[bbTravelNoticeConfirmStepCustomizable]" }, { type: i0.forwardRef(function () { return i5.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0.forwardRef(function () { return i7.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i5.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i5.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0.forwardRef(function () { return i1$2.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1$2.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i2$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i2$1.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i2$1.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i2$1.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i1$2.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], pipes: { "keyvalue": i0.forwardRef(function () { return i2$1.KeyValuePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeCreateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-cards-travel-notice-create',
                    templateUrl: './cards-travel-notice-create.component.html',
                    providers: [DatePipe],
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }, { type: i2$1.DatePipe }]; }, propDecorators: { paymentCards: [{
                type: Input
            }], destinationList: [{
                type: Input
            }], abortCreation: [{
                type: Output
            }], save: [{
                type: Output
            }] } });
class TravelNoticeCreateCustomizableDirective extends BbTemplate {
}
TravelNoticeCreateCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeCreateCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TravelNoticeCreateCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeCreateCustomizableDirective, selector: "[bbTravelNoticeCreateCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeCreateCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTravelNoticeCreateCustomizable]',
                }]
        }] });
class TravelNoticeDetailsStepCustomizableDirective extends BbTemplate {
}
TravelNoticeDetailsStepCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeDetailsStepCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TravelNoticeDetailsStepCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeDetailsStepCustomizableDirective, selector: "[bbTravelNoticeDetailsStepCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeDetailsStepCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTravelNoticeDetailsStepCustomizable]',
                }]
        }] });
class TravelNoticeSelectCardsCustomizableDirective extends BbTemplate {
}
TravelNoticeSelectCardsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeSelectCardsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TravelNoticeSelectCardsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeSelectCardsCustomizableDirective, selector: "[bbTravelNoticeSelectCardsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeSelectCardsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTravelNoticeSelectCardsCustomizable]',
                }]
        }] });
class TravelNoticeConfirmStepCustomizableDirective extends BbTemplate {
}
TravelNoticeConfirmStepCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeConfirmStepCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TravelNoticeConfirmStepCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeConfirmStepCustomizableDirective, selector: "[bbTravelNoticeConfirmStepCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeConfirmStepCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTravelNoticeConfirmStepCustomizable]',
                }]
        }] });
class TravelNoticeStepperCustomizableDirective extends BbTemplate {
}
TravelNoticeStepperCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeStepperCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TravelNoticeStepperCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeStepperCustomizableDirective, selector: "[bbTravelNoticeStepperCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeStepperCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTravelNoticeStepperCustomizable]',
                }]
        }] });

class CardsTravelNoticeContainerComponent {
    constructor() {
        this.hostRef = this;
        /**
         * Empty state image url.
         */
        this.imageUrl = '';
        /**
         * EventEmitter for triggering post event.
         */
        this.createTravelNotice = new EventEmitter();
        /**
         * EventEmitter for triggering delete event.
         */
        this.remove = new EventEmitter();
        this.page = 'list';
    }
    get hasItems() {
        return this.travelNoticeList && this.travelNoticeList.length > 0;
    }
    saveTravelNotice(travelNoticeItem) {
        this.createTravelNotice.emit(travelNoticeItem);
        this.page = 'list';
    }
    setPage(operation) {
        this.page = operation.goToPage;
    }
    onRemove(travelNoticeItem) {
        this.remove.emit(travelNoticeItem);
    }
}
CardsTravelNoticeContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CardsTravelNoticeContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeContainerComponent, selector: "bb-cards-travel-notice-container", inputs: { imageUrl: "imageUrl", travelNoticeList: "travelNoticeList", destinationList: "destinationList", paymentCards: "paymentCards" }, outputs: { createTravelNotice: "createTravelNotice", remove: "remove" }, ngImport: i0, template: "<ng-container *ngIf=\"page === 'list'\">\n  <ng-container *ngIf=\"hasItems; else emptyState\">\n    <bb-cards-travel-notice-list\n      [travelNoticeList]=\"travelNoticeList\"\n      (create)=\"setPage($event)\"\n      (deleteListItem)=\"onRemove($event)\"\n      [destinationList]=\"destinationList\"\n    >\n    </bb-cards-travel-notice-list>\n  </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"page === 'create'\">\n  <bb-cards-travel-notice-create\n    [paymentCards]=\"paymentCards\"\n    [destinationList]=\"destinationList\"\n    (abortCreation)=\"setPage($event)\"\n    (save)=\"saveTravelNotice($event)\"\n  ></bb-cards-travel-notice-create>\n</ng-container>\n\n<ng-template bbTravelNoticeEmptyStateContainerCustomizable let-hostRef>\n  <div class=\"bb-travel-notice-empty-state card\">\n    <div class=\"card-body bb-text-align-center\">\n      <div class=\"bb-block bb-block--xl\">\n        <img class=\"img-fluid\" *ngIf=\"hostRef.imageUrl !== ''\" [src]=\"hostRef.imageUrl\" alt=\"empty state background\"/>\n      </div>\n      <h2 class=\"bb-block bb-block--md\" i18n=\"travel notice empty state header@@cards.travel.notice.empty.state.header\">\n        Setup your travel notice\n      </h2>\n      <div class=\"row\">\n        <div class=\"col-md-8 offset-md-2\">\n          <div class=\"bb-block bb-block--lg\">\n            <p \n              class=\"bb-travel-notice-empty-state__message\"\n              i18n=\"travel notice empty state description@@cards.travel.notice.empty.state.description\"\n            >\n              A travel notice alerts us that you\u2019re planning to use your cards abroad and it helps avoid interpreting any\n              unusual activity as potential fraud.\n            </p>\n          </div>\n        </div>\n      </div>\n     \n      <div>\n        <button bbButton color=\"primary\" (click)=\"hostRef.setPage({goToPage: 'create'})\">\n          <bb-icon-ui name=\"add\"></bb-icon-ui> \n          <span i18n=\"Create new travel notice button@@cards.travel.notice.createNew.button\">Create new</span>\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #emptyState>\n  <ng-container bbTravelNoticeEmptyStateContainerCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</ng-template>", components: [{ type: i0.forwardRef(function () { return CardsTravelNoticeListComponent; }), selector: "bb-cards-travel-notice-list", inputs: ["travelNoticeList", "destinationList"], outputs: ["create", "deleteListItem"] }, { type: i0.forwardRef(function () { return CardsTravelNoticeCreateComponent; }), selector: "bb-cards-travel-notice-create", inputs: ["paymentCards", "destinationList"], outputs: ["abortCreation", "save"] }, { type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return TravelNoticeEmptyStateContainerCustomizableDirective; }), selector: "[bbTravelNoticeEmptyStateContainerCustomizable]" }, { type: i0.forwardRef(function () { return i7.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-cards-travel-notice-container',
                    templateUrl: './cards-travel-notice-container.component.html',
                }]
        }], propDecorators: { imageUrl: [{
                type: Input
            }], travelNoticeList: [{
                type: Input
            }], destinationList: [{
                type: Input
            }], paymentCards: [{
                type: Input
            }], createTravelNotice: [{
                type: Output
            }], remove: [{
                type: Output
            }] } });
class TravelNoticeEmptyStateContainerCustomizableDirective extends BbTemplate {
}
TravelNoticeEmptyStateContainerCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeEmptyStateContainerCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TravelNoticeEmptyStateContainerCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeEmptyStateContainerCustomizableDirective, selector: "[bbTravelNoticeEmptyStateContainerCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeEmptyStateContainerCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTravelNoticeEmptyStateContainerCustomizable]',
                }]
        }] });

const notificationTtl = 5000;
class CardsTravelNoticeWidgetComponent {
    constructor(assetsService, cardsService, notificationService, destinationsService, cd) {
        this.assetsService = assetsService;
        this.cardsService = cardsService;
        this.notificationService = notificationService;
        this.destinationsService = destinationsService;
        this.cd = cd;
        this.isLoading = true;
        this.config = {
            widgetName: 'bb-cards-travel-notice-widget-ang',
            getURIFromAssetID: (assetId) => `${assetId}-img.svg`,
        };
        this.resolveAsset = this.assetsService.createAssetsResolver(this.config);
    }
    get imageEmptyStateUrl() {
        return this.resolveAsset('travel-notice-empty-state');
    }
    ngOnInit() {
        this.loadTravelNotice();
        this.destinationList =
            this.destinationsService &&
                this.destinationsService.getDestinations().pipe(catchError((error) => {
                    this.error = error;
                    return of([]);
                }));
    }
    submitTravelNotice(travelNoticeItem) {
        this.isLoading = true;
        const submitTravelNoticeSuccess = () => {
            if (this.travelNoticeList) {
                this.loadTravelNotice();
                this.pushNotification(this.notificationOnCreate, 'success');
            }
        };
        this.cardsService.postTravelNotice(travelNoticeItem).subscribe(submitTravelNoticeSuccess);
    }
    onRemoveItem(travelNoticeItem) {
        this.isLoading = true;
        const deleteTravelNoticeSuccess = () => {
            if (this.travelNoticeList) {
                this.loadTravelNotice();
                this.pushNotification(this.notificationOnDelete, 'success');
            }
        };
        this.cardsService.deleteTravelNotice(travelNoticeItem).subscribe(deleteTravelNoticeSuccess);
    }
    loadTravelNotice() {
        this.cardsService
            .getTravelNotice()
            .pipe(catchError((error) => {
            this.error = error;
            return of({});
        }))
            .subscribe((item) => {
            this.travelNoticeList = item.travelNoticeList;
            this.paymentCards = item.paymentCards;
            this.isLoading = false;
            this.cd.detectChanges();
        });
    }
    pushNotification(header = '', modifier) {
        this.notificationService.showNotification({
            header,
            message: '',
            modifier,
            dismissible: true,
            ttl: notificationTtl,
        });
    }
}
CardsTravelNoticeWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeWidgetComponent, deps: [{ token: i1$3.AssetsService }, { token: i2$2.CardsService }, { token: i3$1.NotificationService }, { token: DestinationsServiceConfigToken }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
CardsTravelNoticeWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeWidgetComponent, selector: "bb-cards-travel-notice-widget", viewQueries: [{ propertyName: "notificationOnCreate", first: true, predicate: ["notificationOnCreate"], descendants: true, read: TemplateRef, static: true }, { propertyName: "notificationOnDelete", first: true, predicate: ["notificationOnDelete"], descendants: true, read: TemplateRef, static: true }], ngImport: i0, template: "<ng-container *ngIf=\"!error; else errorState\">\n  <ng-container *ngIf=\"!isLoading; else loadingState\">\n    <bb-cards-travel-notice-container\n      [imageUrl]=\"(imageEmptyStateUrl | async) || undefined\"\n      [travelNoticeList]=\"travelNoticeList\"\n      [destinationList]=\"(destinationList | async) || undefined\"\n      [paymentCards]=\"paymentCards\"\n      (createTravelNotice)=\"submitTravelNotice($event)\"\n      (remove)=\"onRemoveItem($event)\"\n    ></bb-cards-travel-notice-container>\n  </ng-container>\n</ng-container>\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #errorState>\n  <bb-empty-state-ui\n    title=\"\"\n    [subtitle]=\"error?.message\"\n    iconModifier=\"error\"\n    iconSize=\"xxl\"\n    iconClasses=\"text-muted\"\n  ></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #notificationOnCreate>\n  <span \n    i18n=\"Message for a notification displayed when a travel notice is created@@cards.create.travel.notice.success.notification\"\n  >\n    Travel notice successfully created!\n  </span>\n</ng-template>\n\n<ng-template #notificationOnDelete>\n  <span \n    i18n=\"Message for a notification displayed when a travel notice is deleted@@cards.delete.travel.notice.success.notification\"\n  >\n    Travel notice successfully deleted!  \n  </span>\n</ng-template>", components: [{ type: CardsTravelNoticeContainerComponent, selector: "bb-cards-travel-notice-container", inputs: ["imageUrl", "travelNoticeList", "destinationList", "paymentCards"], outputs: ["createTravelNotice", "remove"] }, { type: i5$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i6.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i2$1.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-cards-travel-notice-widget',
                    templateUrl: 'cards-travel-notice-widget.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$3.AssetsService }, { type: i2$2.CardsService }, { type: i3$1.NotificationService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DestinationsServiceConfigToken]
                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { notificationOnCreate: [{
                type: ViewChild,
                args: ['notificationOnCreate', { read: TemplateRef, static: true }]
            }], notificationOnDelete: [{
                type: ViewChild,
                args: ['notificationOnDelete', { read: TemplateRef, static: true }]
            }] } });

const components = [
    CardsTravelNoticeWidgetComponent,
    CardsTravelNoticeContainerComponent,
    CardsTravelNoticeListComponent,
    CardsTravelNoticeListItemComponent,
    CardsTravelNoticeCreateComponent,
    CardsTravelNoticeCheckboxCardsComponent,
    CardsTravelNoticeConfirmStepComponent,
    CardsTravelNoticeCountrySelectorComponent,
    CardsTravelNoticeStatusBadgeComponent,
    CardsTravelNoticePaymentCardComponent,
];
const customizables = [
    TravelNoticeEmptyStateContainerCustomizableDirective,
    TravelNoticeListCustomizableDirective,
    TravelNoticeListItemCustomizableDirective,
    TravelNoticeCreateCustomizableDirective,
    TravelNoticeDetailsStepCustomizableDirective,
    TravelNoticeSelectCardsCustomizableDirective,
    TravelNoticeConfirmStepCustomizableDirective,
    TravelNoticeStepperCustomizableDirective,
];
const modules = [
    ButtonModule,
    BadgeModule,
    IconModule,
    CollapsibleModule,
    LoadingIndicatorModule,
    PaymentCardModule,
    StepperModule,
    InputDatepickerModule,
    CheckboxGroupModule,
    InputCheckboxModule,
    InputValidationMessageModule,
    ModalModule,
    InputTextModule,
    InputPhoneModule,
    DropdownMultiSelectModule,
    AlertModule,
    NotificationModule,
    NgbCollapseModule,
    CardsCommonModule,
];
class CardsTravelNoticeModule {
}
CardsTravelNoticeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CardsTravelNoticeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeModule, declarations: [CardsTravelNoticeWidgetComponent,
        CardsTravelNoticeContainerComponent,
        CardsTravelNoticeListComponent,
        CardsTravelNoticeListItemComponent,
        CardsTravelNoticeCreateComponent,
        CardsTravelNoticeCheckboxCardsComponent,
        CardsTravelNoticeConfirmStepComponent,
        CardsTravelNoticeCountrySelectorComponent,
        CardsTravelNoticeStatusBadgeComponent,
        CardsTravelNoticePaymentCardComponent, TravelNoticeEmptyStateContainerCustomizableDirective,
        TravelNoticeListCustomizableDirective,
        TravelNoticeListItemCustomizableDirective,
        TravelNoticeCreateCustomizableDirective,
        TravelNoticeDetailsStepCustomizableDirective,
        TravelNoticeSelectCardsCustomizableDirective,
        TravelNoticeConfirmStepCustomizableDirective,
        TravelNoticeStepperCustomizableDirective], imports: [CommonModule, i1$3.BackbaseCoreModule, ButtonModule,
        BadgeModule,
        IconModule,
        CollapsibleModule,
        LoadingIndicatorModule,
        PaymentCardModule,
        StepperModule,
        InputDatepickerModule,
        CheckboxGroupModule,
        InputCheckboxModule,
        InputValidationMessageModule,
        ModalModule,
        InputTextModule,
        InputPhoneModule,
        DropdownMultiSelectModule,
        AlertModule,
        NotificationModule,
        NgbCollapseModule,
        CardsCommonModule, ReactiveFormsModule,
        FormsModule,
        NgSelectModule], exports: [ButtonModule,
        BadgeModule,
        IconModule,
        CollapsibleModule,
        LoadingIndicatorModule,
        PaymentCardModule,
        StepperModule,
        InputDatepickerModule,
        CheckboxGroupModule,
        InputCheckboxModule,
        InputValidationMessageModule,
        ModalModule,
        InputTextModule,
        InputPhoneModule,
        DropdownMultiSelectModule,
        AlertModule,
        NotificationModule,
        NgbCollapseModule,
        CardsCommonModule, CardsTravelNoticeWidgetComponent,
        CardsTravelNoticeContainerComponent,
        CardsTravelNoticeListComponent,
        CardsTravelNoticeListItemComponent,
        CardsTravelNoticeCreateComponent,
        CardsTravelNoticeCheckboxCardsComponent,
        CardsTravelNoticeConfirmStepComponent,
        CardsTravelNoticeCountrySelectorComponent,
        CardsTravelNoticeStatusBadgeComponent,
        CardsTravelNoticePaymentCardComponent, TravelNoticeEmptyStateContainerCustomizableDirective,
        TravelNoticeListCustomizableDirective,
        TravelNoticeListItemCustomizableDirective,
        TravelNoticeCreateCustomizableDirective,
        TravelNoticeDetailsStepCustomizableDirective,
        TravelNoticeSelectCardsCustomizableDirective,
        TravelNoticeConfirmStepCustomizableDirective,
        TravelNoticeStepperCustomizableDirective] });
CardsTravelNoticeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeModule, providers: [
        { provide: DestinationsServiceConfigToken, useClass: DefaultDestionsService },
        TravelNoticeDatesHelperService,
    ], imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                classMap: { CardsTravelNoticeWidgetComponent },
            }),
            ...modules,
            ReactiveFormsModule,
            FormsModule,
            NgSelectModule,
        ], ButtonModule,
        BadgeModule,
        IconModule,
        CollapsibleModule,
        LoadingIndicatorModule,
        PaymentCardModule,
        StepperModule,
        InputDatepickerModule,
        CheckboxGroupModule,
        InputCheckboxModule,
        InputValidationMessageModule,
        ModalModule,
        InputTextModule,
        InputPhoneModule,
        DropdownMultiSelectModule,
        AlertModule,
        NotificationModule,
        NgbCollapseModule,
        CardsCommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components, ...customizables],
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { CardsTravelNoticeWidgetComponent },
                        }),
                        ...modules,
                        ReactiveFormsModule,
                        FormsModule,
                        NgSelectModule,
                    ],
                    providers: [
                        { provide: DestinationsServiceConfigToken, useClass: DefaultDestionsService },
                        TravelNoticeDatesHelperService,
                    ],
                    exports: [...modules, ...components, ...customizables],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { CardsTravelNoticeCheckboxCardsComponent, CardsTravelNoticeConfirmStepComponent, CardsTravelNoticeContainerComponent, CardsTravelNoticeCountrySelectorComponent, CardsTravelNoticeCreateComponent, CardsTravelNoticeListComponent, CardsTravelNoticeListItemComponent, CardsTravelNoticeModule, CardsTravelNoticePaymentCardComponent, CardsTravelNoticeStatusBadgeComponent, CardsTravelNoticeWidgetComponent, TravelNoticeConfirmStepCustomizableDirective, TravelNoticeCreateCustomizableDirective, TravelNoticeDetailsStepCustomizableDirective, TravelNoticeEmptyStateContainerCustomizableDirective, TravelNoticeListCustomizableDirective, TravelNoticeListItemCustomizableDirective, TravelNoticeSelectCardsCustomizableDirective, TravelNoticeStepperCustomizableDirective };
//# sourceMappingURL=backbase-cards-travel-notice-widget-ang.js.map
