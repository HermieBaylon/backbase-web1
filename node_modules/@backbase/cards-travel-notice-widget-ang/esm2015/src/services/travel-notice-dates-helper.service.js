import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class TravelNoticeDatesHelperService {
    isPastDate(date) {
        const time = new Date(date);
        return this.trucanteDate(time) < this.trucanteDate(new Date());
    }
    isPastDateOrToday(date) {
        return this.isPastDate(date) || this.areDateEqual(new Date(), new Date(date));
    }
    isUpcomingDate(date) {
        const time = new Date(date);
        return this.trucanteDate(time) > this.trucanteDate(new Date());
    }
    isUpcomingDateOrToday(date) {
        return this.isUpcomingDate(date) || this.areDateEqual(new Date(), new Date(date));
    }
    isDateInBetween(date1, date2) {
        return this.isPastDateOrToday(date1) && this.isUpcomingDateOrToday(date2);
    }
    areDateEqual(date1, date2) {
        return this.trucanteDate(date1) === this.trucanteDate(date2);
    }
    trucanteDate(date) {
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);
        date.setMilliseconds(0);
        return date.getTime();
    }
}
TravelNoticeDatesHelperService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeDatesHelperService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
TravelNoticeDatesHelperService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeDatesHelperService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeDatesHelperService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhdmVsLW5vdGljZS1kYXRlcy1oZWxwZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY2FyZHMtdHJhdmVsLW5vdGljZS13aWRnZXQtYW5nL3NyYy9zZXJ2aWNlcy90cmF2ZWwtbm90aWNlLWRhdGVzLWhlbHBlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRzNDLE1BQU0sT0FBTyw4QkFBOEI7SUFDekMsVUFBVSxDQUFDLElBQW1CO1FBQzVCLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTVCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsaUJBQWlCLENBQUMsSUFBbUI7UUFDbkMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLEVBQUUsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFRCxjQUFjLENBQUMsSUFBbUI7UUFDaEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFNUIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRCxxQkFBcUIsQ0FBQyxJQUFtQjtRQUN2QyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDcEYsQ0FBQztJQUVELGVBQWUsQ0FBQyxLQUFvQixFQUFFLEtBQW9CO1FBQ3hELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRU8sWUFBWSxDQUFDLEtBQVcsRUFBRSxLQUFXO1FBQzNDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFTyxZQUFZLENBQUMsSUFBVTtRQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXhCLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3hCLENBQUM7OzRIQXBDVSw4QkFBOEI7Z0lBQTlCLDhCQUE4Qjs0RkFBOUIsOEJBQThCO2tCQUQxQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVHJhdmVsTm90aWNlRGF0ZXNIZWxwZXJTZXJ2aWNlIHtcbiAgaXNQYXN0RGF0ZShkYXRlOiBzdHJpbmcgfCBEYXRlKSB7XG4gICAgY29uc3QgdGltZSA9IG5ldyBEYXRlKGRhdGUpO1xuXG4gICAgcmV0dXJuIHRoaXMudHJ1Y2FudGVEYXRlKHRpbWUpIDwgdGhpcy50cnVjYW50ZURhdGUobmV3IERhdGUoKSk7XG4gIH1cblxuICBpc1Bhc3REYXRlT3JUb2RheShkYXRlOiBzdHJpbmcgfCBEYXRlKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNQYXN0RGF0ZShkYXRlKSB8fCB0aGlzLmFyZURhdGVFcXVhbChuZXcgRGF0ZSgpLCBuZXcgRGF0ZShkYXRlKSk7XG4gIH1cblxuICBpc1VwY29taW5nRGF0ZShkYXRlOiBzdHJpbmcgfCBEYXRlKSB7XG4gICAgY29uc3QgdGltZSA9IG5ldyBEYXRlKGRhdGUpO1xuXG4gICAgcmV0dXJuIHRoaXMudHJ1Y2FudGVEYXRlKHRpbWUpID4gdGhpcy50cnVjYW50ZURhdGUobmV3IERhdGUoKSk7XG4gIH1cblxuICBpc1VwY29taW5nRGF0ZU9yVG9kYXkoZGF0ZTogc3RyaW5nIHwgRGF0ZSkge1xuICAgIHJldHVybiB0aGlzLmlzVXBjb21pbmdEYXRlKGRhdGUpIHx8IHRoaXMuYXJlRGF0ZUVxdWFsKG5ldyBEYXRlKCksIG5ldyBEYXRlKGRhdGUpKTtcbiAgfVxuXG4gIGlzRGF0ZUluQmV0d2VlbihkYXRlMTogc3RyaW5nIHwgRGF0ZSwgZGF0ZTI6IHN0cmluZyB8IERhdGUpIHtcbiAgICByZXR1cm4gdGhpcy5pc1Bhc3REYXRlT3JUb2RheShkYXRlMSkgJiYgdGhpcy5pc1VwY29taW5nRGF0ZU9yVG9kYXkoZGF0ZTIpO1xuICB9XG5cbiAgcHJpdmF0ZSBhcmVEYXRlRXF1YWwoZGF0ZTE6IERhdGUsIGRhdGUyOiBEYXRlKSB7XG4gICAgcmV0dXJuIHRoaXMudHJ1Y2FudGVEYXRlKGRhdGUxKSA9PT0gdGhpcy50cnVjYW50ZURhdGUoZGF0ZTIpO1xuICB9XG5cbiAgcHJpdmF0ZSB0cnVjYW50ZURhdGUoZGF0ZTogRGF0ZSkge1xuICAgIGRhdGUuc2V0SG91cnMoMCk7XG4gICAgZGF0ZS5zZXRNaW51dGVzKDApO1xuICAgIGRhdGUuc2V0U2Vjb25kcygwKTtcbiAgICBkYXRlLnNldE1pbGxpc2Vjb25kcygwKTtcblxuICAgIHJldHVybiBkYXRlLmdldFRpbWUoKTtcbiAgfVxufVxuIl19