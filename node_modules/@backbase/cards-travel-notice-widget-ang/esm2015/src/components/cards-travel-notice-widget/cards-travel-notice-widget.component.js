import { Component, Inject, TemplateRef, ViewChild } from '@angular/core';
import { DestinationsServiceConfigToken, } from '@backbase/cards-common-ang';
import { of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
import * as i2 from "@backbase/cards-common-ang";
import * as i3 from "@backbase/ui-ang/notification";
import * as i4 from "../cards-travel-notice-container/cards-travel-notice-container.component";
import * as i5 from "@backbase/ui-ang/loading-indicator";
import * as i6 from "@backbase/ui-ang/empty-state";
import * as i7 from "@angular/common";
const notificationTtl = 5000;
export class CardsTravelNoticeWidgetComponent {
    constructor(assetsService, cardsService, notificationService, destinationsService, cd) {
        this.assetsService = assetsService;
        this.cardsService = cardsService;
        this.notificationService = notificationService;
        this.destinationsService = destinationsService;
        this.cd = cd;
        this.isLoading = true;
        this.config = {
            widgetName: 'bb-cards-travel-notice-widget-ang',
            getURIFromAssetID: (assetId) => `${assetId}-img.svg`,
        };
        this.resolveAsset = this.assetsService.createAssetsResolver(this.config);
    }
    get imageEmptyStateUrl() {
        return this.resolveAsset('travel-notice-empty-state');
    }
    ngOnInit() {
        this.loadTravelNotice();
        this.destinationList =
            this.destinationsService &&
                this.destinationsService.getDestinations().pipe(catchError((error) => {
                    this.error = error;
                    return of([]);
                }));
    }
    submitTravelNotice(travelNoticeItem) {
        this.isLoading = true;
        const submitTravelNoticeSuccess = () => {
            if (this.travelNoticeList) {
                this.loadTravelNotice();
                this.pushNotification(this.notificationOnCreate, 'success');
            }
        };
        this.cardsService.postTravelNotice(travelNoticeItem).subscribe(submitTravelNoticeSuccess);
    }
    onRemoveItem(travelNoticeItem) {
        this.isLoading = true;
        const deleteTravelNoticeSuccess = () => {
            if (this.travelNoticeList) {
                this.loadTravelNotice();
                this.pushNotification(this.notificationOnDelete, 'success');
            }
        };
        this.cardsService.deleteTravelNotice(travelNoticeItem).subscribe(deleteTravelNoticeSuccess);
    }
    loadTravelNotice() {
        this.cardsService
            .getTravelNotice()
            .pipe(catchError((error) => {
            this.error = error;
            return of({});
        }))
            .subscribe((item) => {
            this.travelNoticeList = item.travelNoticeList;
            this.paymentCards = item.paymentCards;
            this.isLoading = false;
            this.cd.detectChanges();
        });
    }
    pushNotification(header = '', modifier) {
        this.notificationService.showNotification({
            header,
            message: '',
            modifier,
            dismissible: true,
            ttl: notificationTtl,
        });
    }
}
CardsTravelNoticeWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeWidgetComponent, deps: [{ token: i1.AssetsService }, { token: i2.CardsService }, { token: i3.NotificationService }, { token: DestinationsServiceConfigToken }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
CardsTravelNoticeWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeWidgetComponent, selector: "bb-cards-travel-notice-widget", viewQueries: [{ propertyName: "notificationOnCreate", first: true, predicate: ["notificationOnCreate"], descendants: true, read: TemplateRef, static: true }, { propertyName: "notificationOnDelete", first: true, predicate: ["notificationOnDelete"], descendants: true, read: TemplateRef, static: true }], ngImport: i0, template: "<ng-container *ngIf=\"!error; else errorState\">\n  <ng-container *ngIf=\"!isLoading; else loadingState\">\n    <bb-cards-travel-notice-container\n      [imageUrl]=\"(imageEmptyStateUrl | async) || undefined\"\n      [travelNoticeList]=\"travelNoticeList\"\n      [destinationList]=\"(destinationList | async) || undefined\"\n      [paymentCards]=\"paymentCards\"\n      (createTravelNotice)=\"submitTravelNotice($event)\"\n      (remove)=\"onRemoveItem($event)\"\n    ></bb-cards-travel-notice-container>\n  </ng-container>\n</ng-container>\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #errorState>\n  <bb-empty-state-ui\n    title=\"\"\n    [subtitle]=\"error?.message\"\n    iconModifier=\"error\"\n    iconSize=\"xxl\"\n    iconClasses=\"text-muted\"\n  ></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #notificationOnCreate>\n  <span \n    i18n=\"Message for a notification displayed when a travel notice is created@@cards.create.travel.notice.success.notification\"\n  >\n    Travel notice successfully created!\n  </span>\n</ng-template>\n\n<ng-template #notificationOnDelete>\n  <span \n    i18n=\"Message for a notification displayed when a travel notice is deleted@@cards.delete.travel.notice.success.notification\"\n  >\n    Travel notice successfully deleted!  \n  </span>\n</ng-template>", components: [{ type: i4.CardsTravelNoticeContainerComponent, selector: "bb-cards-travel-notice-container", inputs: ["imageUrl", "travelNoticeList", "destinationList", "paymentCards"], outputs: ["createTravelNotice", "remove"] }, { type: i5.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i6.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i7.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-cards-travel-notice-widget',
                    templateUrl: 'cards-travel-notice-widget.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.AssetsService }, { type: i2.CardsService }, { type: i3.NotificationService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DestinationsServiceConfigToken]
                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { notificationOnCreate: [{
                type: ViewChild,
                args: ['notificationOnCreate', { read: TemplateRef, static: true }]
            }], notificationOnDelete: [{
                type: ViewChild,
                args: ['notificationOnDelete', { read: TemplateRef, static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,