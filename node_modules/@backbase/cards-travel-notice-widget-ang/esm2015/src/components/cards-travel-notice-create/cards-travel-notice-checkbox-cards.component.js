import { Component, forwardRef, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/input-checkbox";
import * as i3 from "../cards-travel-notice-payment-card/cards-travel-notice-payment-card.component";
import * as i4 from "@angular/common";
export class CardsTravelNoticeCheckboxCardsComponent {
    constructor(fb) {
        this.fb = fb;
        this.indeterminate = false;
        this.onChange = () => { };
        this.onTouched = () => { };
        this.isIndeterminate = () => {
            if (this.checkBoxCardsForm) {
                const cardsIdsControl = this.checkBoxCardsForm.controls['cardIds'].controls;
                const elements = Object.keys(cardsIdsControl);
                const actives = elements.reduce((previous, item) => (cardsIdsControl[item].value ? previous + 1 : previous), 0);
                return actives !== 0 && actives < elements.length;
            }
            return false;
        };
        this.parentChange = (value) => {
            if (this.checkBoxCardsForm) {
                const cardsIdsControl = this.checkBoxCardsForm.controls['cardIds'];
                const newValue = this.createCardsObjectWithDefaultValue(Object.keys(cardsIdsControl.controls), (item) => item, value);
                cardsIdsControl.setValue(newValue);
            }
        };
        this.childChange = (cardIds) => {
            this.indeterminate = this.isIndeterminate();
            const result = Object.keys(cardIds || {}).filter((item) => cardIds[item] === true);
            this.onChange(result.map((item) => this.paymentCards && this.paymentCards.find((card) => card.id === item)));
        };
    }
    createCardsObjectWithDefaultValue(group = [], keyFinder, defaultValue) {
        return group.reduce((acc, cur) => (Object.assign(Object.assign({}, acc), { [keyFinder(cur)]: defaultValue })), {});
    }
    hasCardsSelected(control) {
        const cards = Object.keys(control.controls).find((item) => control.controls[item].value === true);
        // eslint-disable-next-line no-null/no-null
        return cards ? null : { empty: true };
    }
    createForm() {
        const cardsFormGroup = this.createCardsObjectWithDefaultValue(this.paymentCards, (card) => card.id, [
            false,
        ]);
        this.checkBoxCardsForm = this.fb.group({
            parent: [false],
            cardIds: this.fb.group(cardsFormGroup),
        });
        this.checkBoxCardsForm.controls['cardIds'].setValidators(this.hasCardsSelected);
    }
    writeValue(cards) {
        if (this.checkBoxCardsForm && cards && !!this.paymentCards) {
            const cardIds = this.checkBoxCardsForm.controls['cardIds'];
            cards.forEach((item) => cardIds.controls[item.id].setValue(true));
            if (cards.length === this.paymentCards.length) {
                this.checkBoxCardsForm.patchValue({ parent: true });
            }
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    ngOnInit() {
        this.createForm();
        if (this.checkBoxCardsForm) {
            const parentGroup = this.checkBoxCardsForm.controls['parent'];
            const childrenGroup = this.checkBoxCardsForm.controls['cardIds'];
            this.parentSubscription = parentGroup.valueChanges.subscribe(this.parentChange);
            this.childrenSubscription = childrenGroup.valueChanges.subscribe(this.childChange);
        }
    }
    ngOnDestroy() {
        if (this.parentSubscription) {
            this.parentSubscription.unsubscribe();
        }
        if (this.childrenSubscription) {
            this.childrenSubscription.unsubscribe();
        }
    }
}
CardsTravelNoticeCheckboxCardsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeCheckboxCardsComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
CardsTravelNoticeCheckboxCardsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeCheckboxCardsComponent, selector: "bb-cards-travel-notice-checkbox-cards", inputs: { paymentCards: "paymentCards" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            // eslint-disable-next-line @angular-eslint/no-forward-ref
            useExisting: forwardRef(() => CardsTravelNoticeCheckboxCardsComponent),
            multi: true,
        },
    ], ngImport: i0, template: "<form [formGroup]=\"checkBoxCardsForm!\">\n  <ul class=\"list-unstyled\">\n    <li>\n      <div class=\"bb-block bb-block--xl\">\n        <bb-input-checkbox-ui \n          formControlName=\"parent\" \n          label=\"Select all cards\"\n          i18n-label=\"Select all cards@@cards.create.travel.notice.checkbox.label\"\n          i18n=\"Select all cards@@cards.create.travel.notice.checkbox.child\"\n          [indeterminate]=\"indeterminate\"\n        >\n          label=\"Select all cards\"\n        </bb-input-checkbox-ui>\n      </div>\n      <!--card -->\n      <div class=\"row bb-create-travel-notice-card-group\" formGroupName=\"cardIds\">\n        <ng-container *ngFor=\"let paymentCard of paymentCards\">\n          <div class=\"col-lg-6\">\n            <div class=\"bb-block bb-block--xl\">\n              <div class=\"bb-stack\">\n                <div class=\"bb-stack__item\">\n                  <bb-input-checkbox-ui [formControlName]=\"paymentCard.id\">\n                    <div class=\"bb-create-travel-notice-card-group__payment-card\">\n                      <bb-cards-travel-notice-payment-card [paymentCard]=\"paymentCard\"></bb-cards-travel-notice-payment-card>\n                    </div>\n                  </bb-input-checkbox-ui>\n                </div>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n      <!-- end card -->\n    </li>\n  </ul>\n</form>", components: [{ type: i2.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i3.CardsTravelNoticePaymentCardComponent, selector: "bb-cards-travel-notice-payment-card", inputs: ["paymentCard"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeCheckboxCardsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-cards-travel-notice-checkbox-cards',
                    templateUrl: 'cards-travel-notice-checkbox-cards.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            // eslint-disable-next-line @angular-eslint/no-forward-ref
                            useExisting: forwardRef(() => CardsTravelNoticeCheckboxCardsComponent),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; }, propDecorators: { paymentCards: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,