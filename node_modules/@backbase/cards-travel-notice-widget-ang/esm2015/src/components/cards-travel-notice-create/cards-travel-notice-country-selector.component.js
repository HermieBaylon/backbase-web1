import { Component, forwardRef, Input } from '@angular/core';
import { FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@ng-select/ng-select";
import * as i2 from "@angular/forms";
export class CardsTravelNoticeCountrySelectorComponent {
    constructor() {
        this.destionationListControl = new FormControl([]);
        this.updateCountryList = (destinations) => {
            this.onChange(destinations.map((item) => ({
                country: item.parent ? item.parent : item.value,
                region: item.parent && item.value,
            })));
        };
        this.onChange = () => { };
        this.onTouched = () => { };
    }
    // eslint-disable-next-line
    set destinationList(value) {
        this.destinationsDisplay = [
            ...value.map((item) => ({
                name: item.name,
                value: item.code,
            })),
            ...value
                .filter((item) => item.regions !== undefined)
                .reduce((acc, { regions = [], code: countryCode }) => [
                ...acc,
                ...regions.map((region) => ({
                    name: `${region.name} (${countryCode})`,
                    value: region.code,
                    parent: countryCode,
                })),
            ], []),
        ].sort((left, right) => {
            if (left.name === right.name) {
                return 0;
            }
            return left.name > right.name ? 1 : -1;
        });
        this.fullDestinationList = value;
    }
    get destinationList() {
        return this.fullDestinationList || [];
    }
    get destinationListDisplay() {
        return this.destinationsDisplay || [];
    }
    writeValue(countries) {
        this.destionationListControl.setValue(countries.map(({ country, region }) => (region ? `${country}:${region}` : country)));
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    ngOnInit() {
        this.countryListSubscription = this.destionationListControl.valueChanges.subscribe(this.updateCountryList);
    }
    ngOnDestroy() {
        if (this.countryListSubscription) {
            this.countryListSubscription.unsubscribe();
        }
    }
}
CardsTravelNoticeCountrySelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeCountrySelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CardsTravelNoticeCountrySelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeCountrySelectorComponent, selector: "bb-cards-travel-notice-country-selector", inputs: { destinationList: "destinationList" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            // eslint-disable-next-line @angular-eslint/no-forward-ref
            useExisting: forwardRef(() => CardsTravelNoticeCountrySelectorComponent),
            multi: true,
        },
    ], ngImport: i0, template: "<ng-select \n  [items]=\"destinationListDisplay\"\n  class=\"bb-country-selector\"\n  [hideSelected]=\"true\"\n  [multiple]=\"true\"\n  bindLabel=\"name\"\n  [formControl]=\"destionationListControl\"\n  aria-label=\"Search or select countries\"\n  i18n-aria-label=\"Search or select countries aria-label@@cards.create.travel.notice.country.dropdown.tagSelector.aria-label\"\n  placeholder=\"Search or select countries\"\n  i18n-placeholder=\"Search or select countries@@cards.create.travel.notice.country.dropdown.tagSelector.placeholder\"\n></ng-select>", components: [{ type: i1.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }], directives: [{ type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeCountrySelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-cards-travel-notice-country-selector',
                    templateUrl: 'cards-travel-notice-country-selector.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            // eslint-disable-next-line @angular-eslint/no-forward-ref
                            useExisting: forwardRef(() => CardsTravelNoticeCountrySelectorComponent),
                            multi: true,
                        },
                    ],
                }]
        }], propDecorators: { destinationList: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZHMtdHJhdmVsLW5vdGljZS1jb3VudHJ5LXNlbGVjdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY2FyZHMtdHJhdmVsLW5vdGljZS13aWRnZXQtYW5nL3NyYy9jb21wb25lbnRzL2NhcmRzLXRyYXZlbC1ub3RpY2UtY3JlYXRlL2NhcmRzLXRyYXZlbC1ub3RpY2UtY291bnRyeS1zZWxlY3Rvci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NhcmRzLXRyYXZlbC1ub3RpY2Utd2lkZ2V0LWFuZy9zcmMvY29tcG9uZW50cy9jYXJkcy10cmF2ZWwtbm90aWNlLWNyZWF0ZS9jYXJkcy10cmF2ZWwtbm90aWNlLWNvdW50cnktc2VsZWN0b3IuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUNoRixPQUFPLEVBQXdCLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBa0J0RixNQUFNLE9BQU8seUNBQXlDO0lBWnREO1FBZ0JFLDRCQUF1QixHQUFHLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBeUM3QixzQkFBaUIsR0FBRyxDQUFDLFlBQWtDLEVBQUUsRUFBRTtZQUMxRSxJQUFJLENBQUMsUUFBUSxDQUNYLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQzFCLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSztnQkFDL0MsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEtBQUs7YUFDbEMsQ0FBQyxDQUFD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O1lBQzFCLDBEQUEwRDtZQUMxRCxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLHlDQUF5QyxDQUFDO1lBQ3hFLEtBQUssRUFBRSxJQUFJO1NBQ1o7S0FDRiwwQkNqQkgsNGlCQVdhOzRGRFFBLHlDQUF5QztrQkFackQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUseUNBQXlDO29CQUNuRCxXQUFXLEVBQUUscURBQXFEO29CQUNsRSxTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsMERBQTBEOzRCQUMxRCxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSwwQ0FBMEMsQ0FBQzs0QkFDeEUsS0FBSyxFQUFFLElBQUk7eUJBQ1o7cUJBQ0Y7aUJBQ0Y7OEJBUUssZUFBZTtzQkFEbEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgRm9ybUNvbnRyb2wsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRGVzdGluYXRpb24sIFRyYXZlbE5vdGljZUNvdW50cnkgfSBmcm9tICdAYmFja2Jhc2UvY2FyZHMtY29tbW9uLWFuZyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvY29uc2lzdGVudC10eXBlLWRlZmluaXRpb25zXG50eXBlIERlc3RpbmF0aW9uRGlzcGxheSA9IHsgbmFtZTogc3RyaW5nOyB2YWx1ZTogc3RyaW5nOyBwYXJlbnQ/OiBzdHJpbmcgfTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItY2FyZHMtdHJhdmVsLW5vdGljZS1jb3VudHJ5LXNlbGVjdG9yJyxcbiAgdGVtcGxhdGVVcmw6ICdjYXJkcy10cmF2ZWwtbm90aWNlLWNvdW50cnktc2VsZWN0b3IuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvbm8tZm9yd2FyZC1yZWZcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IENhcmRzVHJhdmVsTm90aWNlQ291bnRyeVNlbGVjdG9yQ29tcG9uZW50KSxcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIENhcmRzVHJhdmVsTm90aWNlQ291bnRyeVNlbGVjdG9yQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBkZXN0aW5hdGlvbnNEaXNwbGF5OiBEZXN0aW5hdGlvbkRpc3BsYXlbXSB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBmdWxsRGVzdGluYXRpb25MaXN0OiBEZXN0aW5hdGlvbltdIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIGNvdW50cnlMaXN0U3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24gfCB1bmRlZmluZWQ7XG4gIGRlc3Rpb25hdGlvbkxpc3RDb250cm9sID0gbmV3IEZvcm1Db250cm9sKFtdKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIEBJbnB1dCgpXG4gIHNldCBkZXN0aW5hdGlvbkxpc3QodmFsdWU6IERlc3RpbmF0aW9uW10pIHtcbiAgICB0aGlzLmRlc3RpbmF0aW9uc0Rpc3BsYXkgPSBbXG4gICAgICAuLi52YWx1ZS5tYXAoKGl0ZW0pID0+ICh7XG4gICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcbiAgICAgICAgdmFsdWU6IGl0ZW0uY29kZSxcbiAgICAgIH0pKSxcbiAgICAgIC4uLnZhbHVlXG4gICAgICAgIC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0ucmVnaW9ucyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAucmVkdWNlKFxuICAgICAgICAgIChhY2MsIHsgcmVnaW9ucyA9IFtdLCBjb2RlOiBjb3VudHJ5Q29kZSB9KSA9PiBbXG4gICAgICAgICAgICAuLi5hY2MsXG4gICAgICAgICAgICAuLi5yZWdpb25zLm1hcCgocmVnaW9uKSA9PiAoe1xuICAgICAgICAgICAgICBuYW1lOiBgJHtyZWdpb24ubmFtZX0gKCR7Y291bnRyeUNvZGV9KWAsXG4gICAgICAgICAgICAgIHZhbHVlOiByZWdpb24uY29kZSxcbiAgICAgICAgICAgICAgcGFyZW50OiBjb3VudHJ5Q29kZSxcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIFtdIGFzIERlc3RpbmF0aW9uRGlzcGxheVtdLFxuICAgICAgICApLFxuICAgIF0uc29ydCgobGVmdCwgcmlnaHQpID0+IHtcbiAgICAgIGlmIChsZWZ0Lm5hbWUgPT09IHJpZ2h0Lm5hbWUpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsZWZ0Lm5hbWUgPiByaWdodC5uYW1lID8gMSA6IC0xO1xuICAgIH0pO1xuXG4gICAgdGhpcy5mdWxsRGVzdGluYXRpb25MaXN0ID0gdmFsdWU7XG4gIH1cblxuICBnZXQgZGVzdGluYXRpb25MaXN0KCkge1xuICAgIHJldHVybiB0aGlzLmZ1bGxEZXN0aW5hdGlvbkxpc3QgfHwgW107XG4gIH1cblxuICBnZXQgZGVzdGluYXRpb25MaXN0RGlzcGxheSgpOiBEZXN0aW5hdGlvbkRpc3BsYXlbXSB7XG4gICAgcmV0dXJuIHRoaXMuZGVzdGluYXRpb25zRGlzcGxheSB8fCBbXTtcbiAgfVxuXG4gIHByaXZhdGUgcmVhZG9ubHkgdXBkYXRlQ291bnRyeUxpc3QgPSAoZGVzdGluYXRpb25zOiBEZXN0aW5hdGlvbkRpc3BsYXlbXSkgPT4ge1xuICAgIHRoaXMub25DaGFuZ2UoXG4gICAgICBkZXN0aW5hdGlvbnMubWFwKChpdGVtKSA9PiAoe1xuICAgICAgICBjb3VudHJ5OiBpdGVtLnBhcmVudCA/IGl0ZW0ucGFyZW50IDogaXRlbS52YWx1ZSxcbiAgICAgICAgcmVnaW9uOiBpdGVtLnBhcmVudCAmJiBpdGVtLnZhbHVlLFxuICAgICAgfSkpLFxuICAgICk7XG4gIH07XG5cbiAgb25DaGFuZ2U6IChuZXdWYWx1ZTogT2JqZWN0IHwgc3RyaW5nIHwgdW5kZWZpbmVkKSA9PiB2b2lkID0gKCkgPT4ge307XG5cbiAgb25Ub3VjaGVkOiAoKSA9PiB2b2lkID0gKCkgPT4ge307XG5cbiAgd3JpdGVWYWx1ZShjb3VudHJpZXM6IFRyYXZlbE5vdGljZUNvdW50cnlbXSk6IHZvaWQge1xuICAgIHRoaXMuZGVzdGlvbmF0aW9uTGlzdENvbnRyb2wuc2V0VmFsdWUoXG4gICAgICBjb3VudHJpZXMubWFwKCh7IGNvdW50cnksIHJlZ2lvbiB9KSA9PiAocmVnaW9uID8gYCR7Y291bnRyeX06JHtyZWdpb259YCA6IGNvdW50cnkpKSxcbiAgICApO1xuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNvdW50cnlMaXN0U3Vic2NyaXB0aW9uID0gdGhpcy5kZXN0aW9uYXRpb25MaXN0Q29udHJvbC52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKHRoaXMudXBkYXRlQ291bnRyeUxpc3QpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuY291bnRyeUxpc3RTdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuY291bnRyeUxpc3RTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbn1cbiIsIjxuZy1zZWxlY3QgXG4gIFtpdGVtc109XCJkZXN0aW5hdGlvbkxpc3REaXNwbGF5XCJcbiAgY2xhc3M9XCJiYi1jb3VudHJ5LXNlbGVjdG9yXCJcbiAgW2hpZGVTZWxlY3RlZF09XCJ0cnVlXCJcbiAgW211bHRpcGxlXT1cInRydWVcIlxuICBiaW5kTGFiZWw9XCJuYW1lXCJcbiAgW2Zvcm1Db250cm9sXT1cImRlc3Rpb25hdGlvbkxpc3RDb250cm9sXCJcbiAgYXJpYS1sYWJlbD1cIlNlYXJjaCBvciBzZWxlY3QgY291bnRyaWVzXCJcbiAgaTE4bi1hcmlhLWxhYmVsPVwiU2VhcmNoIG9yIHNlbGVjdCBjb3VudHJpZXMgYXJpYS1sYWJlbEBAY2FyZHMuY3JlYXRlLnRyYXZlbC5ub3RpY2UuY291bnRyeS5kcm9wZG93bi50YWdTZWxlY3Rvci5hcmlhLWxhYmVsXCJcbiAgcGxhY2Vob2xkZXI9XCJTZWFyY2ggb3Igc2VsZWN0IGNvdW50cmllc1wiXG4gIGkxOG4tcGxhY2Vob2xkZXI9XCJTZWFyY2ggb3Igc2VsZWN0IGNvdW50cmllc0BAY2FyZHMuY3JlYXRlLnRyYXZlbC5ub3RpY2UuY291bnRyeS5kcm9wZG93bi50YWdTZWxlY3Rvci5wbGFjZWhvbGRlclwiXG4+PC9uZy1zZWxlY3Q+Il19