import { DatePipe } from '@angular/common';
import { Component, Directive, EventEmitter, Input, Output } from '@angular/core';
import { Validators } from '@angular/forms';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/common";
import * as i3 from "@backbase/ui-ang/stepper";
import * as i4 from "@backbase/ui-ang/modal";
import * as i5 from "@backbase/ui-ang/icon";
import * as i6 from "./cards-travel-notice-country-selector.component";
import * as i7 from "@backbase/ui-ang/input-validation-message";
import * as i8 from "@backbase/ui-ang/input-datepicker";
import * as i9 from "@backbase/ui-ang/input-phone";
import * as i10 from "@backbase/ui-ang/alert";
import * as i11 from "./cards-travel-notice-checkbox-cards.component";
import * as i12 from "./cards-travel-notice-confirm-step.component";
import * as i13 from "@backbase/ui-ang/button";
export class CardsTravelNoticeCreateComponent {
    constructor(fb, datePipe) {
        this.fb = fb;
        this.datePipe = datePipe;
        this.hostRef = this;
        /**
         * Cancel form for create travel notice event emitter.
         */
        this.abortCreation = new EventEmitter();
        /**
         * Submit for create travel notice form event emitter.
         */
        this.save = new EventEmitter();
        this.currentStep = 1;
        this.dialogOpen = false;
        this.displayAlert = false;
        this.travelNoticeItem = {};
        this.closeConfirmationDialog = () => {
            this.dialogOpen = false;
        };
        this.confirmCancel = () => {
            this.closeConfirmationDialog();
            this.abortCreation.emit({ goToPage: 'list' });
        };
        this.updateTravelNoticeValue = (createTravelNoticeForm) => {
            const { details, cardIds: cards } = createTravelNoticeForm;
            if (cards) {
                this.travelNoticeItem = Object.assign(Object.assign({}, this.travelNoticeItem), { cards });
            }
            if (details) {
                this.travelNoticeItem = Object.assign(Object.assign({}, this.travelNoticeItem), { destinations: details.destinations, contact: {
                        phoneNumber: details.contactNumber + '',
                    } });
            }
            if (this.departureDate.valid) {
                this.travelNoticeItem = Object.assign(Object.assign({}, this.travelNoticeItem), { departureDate: this.datePipe.transform(details.departureDate, 'yyyy-MM-dd') });
            }
            if (this.arrivalDate.valid) {
                this.travelNoticeItem = Object.assign(Object.assign({}, this.travelNoticeItem), { arrivalDate: this.datePipe.transform(details.arrivalDate, 'yyyy-MM-dd') });
            }
            this.displayAlert = false;
        };
        this.currentDateValidator = (control) => {
            const returnDate = new Date(control.value);
            const currentDate = this.truncateDate();
            // eslint-disable-next-line , no-null/no-null
            return returnDate.getTime() < currentDate.getTime() ? { invalidCurrentDate: true } : null;
        };
    }
    next(nextForm) {
        if (this.currentForm) {
            this.currentForm.markAllAsTouched();
            this.currentForm.updateValueAndValidity();
            if (this.currentStep === 2) {
                this.displayAlert = this.currentForm.invalid;
            }
            if (this.currentForm.valid) {
                this.currentStep += 1;
                this.currentForm = nextForm;
            }
        }
    }
    back(prevForm) {
        this.currentStep -= 1;
        this.currentForm = prevForm;
    }
    onCancel() {
        this.dialogOpen = true;
    }
    onSubmitTravelNotice() {
        this.save.emit(this.travelNoticeItem);
    }
    isFieldValid(fieldName) {
        const control = this.detailsGroup.get(fieldName);
        return !!control && (control.valid || control.untouched);
    }
    onAlertDismiss() {
        this.displayAlert = false;
    }
    ngOnInit() {
        if (!this.paymentCards)
            return;
        this.createTravelNoticeForm = this.fb.group({
            details: this.fb.group({
                destinations: [
                    [],
                    (control) => 
                    // eslint-disable-next-line , no-null/no-null
                    control.value && control.value.length > 0 ? null : { required: 'item required' },
                ],
                departureDate: [''],
                arrivalDate: [''],
                contactNumber: ['', Validators.pattern('^[0-9()-+ ]*$')],
            }),
            cardIds: [this.paymentCards ? this.paymentCards : []],
        });
        this.createTravelNoticeForm.markAsPristine();
        this.travelNoticeSubscription = this.createTravelNoticeForm.valueChanges.subscribe(this.updateTravelNoticeValue);
        this.currentForm = this.detailsGroup;
        this.cardIdsGroup.setValidators(this.hasCardsSelected);
        this.addDateValidators();
    }
    /**
     *
     * temporary solution once datepicker is ready to validate ranges is release this method will be removed
     */
    addDateValidators() {
        if (!!this.createTravelNoticeForm && this.departureDate && this.arrivalDate) {
            this.departureDate.setValidators([Validators.required, this.dateValidator('arrivalDate', 'departureDate')]);
            this.arrivalDate.setValidators([
                Validators.required,
                this.currentDateValidator,
                this.dateValidator('arrivalDate', 'departureDate'),
            ]);
            this.departureDateSubscription = this.departureDate.valueChanges.subscribe(() => {
                this.arrivalDate.updateValueAndValidity({ emitEvent: false });
            });
            this.arrivalDateSubcription = this.arrivalDate.valueChanges.subscribe(() => {
                this.departureDate.updateValueAndValidity({ emitEvent: false });
            });
        }
    }
    ngOnDestroy() {
        if (this.travelNoticeSubscription) {
            this.travelNoticeSubscription.unsubscribe();
        }
        if (this.arrivalDateSubcription) {
            this.arrivalDateSubcription.unsubscribe();
        }
        if (this.departureDateSubscription) {
            this.departureDateSubscription.unsubscribe();
        }
    }
    /**
     *
     * temporary solution once datepicker is ready to validate ranges is release this method will be removed
     */
    dateValidator(fieldName1, fieldName2) {
        return () => {
            const formControl1 = this.detailsGroup.get(fieldName1);
            const formControl2 = this.detailsGroup.get(fieldName2);
            const date1 = new Date(formControl1.value).getTime();
            const date2 = new Date(formControl2.value).getTime();
            // eslint-disable-next-line , no-null/no-null
            return date1 < date2 ? { invalidDate: true } : null;
        };
    }
    truncateDate(date = new Date()) {
        const newDate = new Date(date);
        newDate.setHours(0, 0, 0, 0);
        return newDate;
    }
    hasCardsSelected(control) {
        const cards = control.value;
        // eslint-disable-next-line no-null/no-null
        return cards.length === 0 ? { empty: true } : null;
    }
    get detailsGroup() {
        return this.createTravelNoticeForm.get('details');
    }
    get cardIdsGroup() {
        return this.createTravelNoticeForm.get('cardIds');
    }
    get destinations() {
        return this.detailsGroup.get('destinations');
    }
    get arrivalDate() {
        return this.detailsGroup.get('arrivalDate');
    }
    get departureDate() {
        return this.detailsGroup.get('departureDate');
    }
    get contactNumber() {
        return this.detailsGroup.get('contactNumber');
    }
}
CardsTravelNoticeCreateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeCreateComponent, deps: [{ token: i1.FormBuilder }, { token: i2.DatePipe }], target: i0.ɵɵFactoryTarget.Component });
CardsTravelNoticeCreateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeCreateComponent, selector: "bb-cards-travel-notice-create", inputs: { paymentCards: "paymentCards", destinationList: "destinationList" }, outputs: { abortCreation: "abortCreation", save: "save" }, providers: [DatePipe], ngImport: i0, template: "<ng-container bbTravelNoticeCreateCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTravelNoticeCreateCustomizable let-hostRef>\n  <h1 class=\"bb-block bb-block--lg\" i18n=\"Create travel notice header@@cards.create.travel.notice.header\">\n    Create travel notice\n  </h1>\n  <div class=\"card card-lg bb-create-travel-notice\">\n    <div class=\"card-body\">\n      <ng-container bbTravelNoticeStepperCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n      <form [formGroup]=\"hostRef.createTravelNoticeForm\" (ngSubmit)=\"hostRef.onSubmitTravelNotice()\">\n        <ng-container bbTravelNoticeDetailsStepCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n        <ng-container bbTravelNoticeSelectCardsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n        <ng-container bbTravelNoticeConfirmStepCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n      </form>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template bbTravelNoticeStepperCustomizable let-hostRef>\n  <div class=\"bb-block bb-block--lg\">\n    <div class=\"row bb-stack--center\">\n      <bb-stepper-ui class= \"col-12 col-md-10 col-lg-8\">\n        <bb-stepper-step-ui \n          label=\"Travel details\"\n          i18n-label=\"Travel details@@cards.create.travel.notice.stepper.header.step1\"\n          [isChecked]=\"hostRef.currentStep > 1\"\n          [isActive]=\"hostRef.currentStep >= 1\"\n          ariaLabel=\"Step 1 out of 3\"\n          i18n-ariaLabel=\"Step 1 out of 3@@cards.create.travel.notice.stepper.aria.label.step1\"\n        >\n        </bb-stepper-step-ui>\n        <bb-stepper-step-ui \n          class=\"bb-stack__item\" \n          label=\"Card selection\"\n          i18n-label=\"Card selection@@cards.create.travel.notice.stepper.header.step2\"\n          [isChecked]=\"hostRef.currentStep > 2\"\n          [isActive]=\"hostRef.currentStep >= 2\" \n          ariaLabel=\"Step 2 out of 3\"\n          i18n-ariaLabel=\"Step 2 out of 3@@cards.create.travel.notice.stepper.aria.label.step2\"\n        >\n        </bb-stepper-step-ui>\n        <bb-stepper-step-ui \n          class=\"bb-stack__item\" \n          label=\"Confirmation\" \n          i18n-label=\"Confirmation@@cards.create.travel.notice.stepper.header.step3\"\n          [isActive]=\"hostRef.currentStep >= 3\" \n          ariaLabel=\"Step 3 out of 3\"\n          i18n-ariaLabel=\"Step 3 out of 3@@cards.create.travel.notice.stepper.aria.label.step3\"\n        >\n        </bb-stepper-step-ui>\n      </bb-stepper-ui>\n    </div>\n  </div>\n  <!-- cancel travel notice modal -->\n  <bb-modal-ui [isOpen]=\"hostRef.dialogOpen\" (cancel)=\"hostRef.closeConfirmationDialog()\">\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <h2 i18n=\"Cancel Travel Notice@@cards.create.travel.notice.cancelTravelNotice.modal.header\">\n          Discard travel notice?\n        </h2>\n        <div>\n          <button bbButton color=\"unstyled\" (click)=\"hostRef.closeConfirmationDialog()\">\n            <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n          </button>\n        </div>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span i18n=\"Delete confirmation text@@cards.create.travel.notice.cancelTravelNotice.modal.body\">\n          All entered information for this travel notice will be permanently lost.\n        </span>\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui #footerRef>\n      <ng-template bbCustomModalFooter>\n        <button bbButton (click)=\"hostRef.closeConfirmationDialog()\" color=\"link\">\n          <span i18n=\"Submit button text@@messages.createMessage.composeMessageModal.keepCreating.button\">\n            Keep it\n          </span>\n        </button>\n        <button bbButton (click)=\"hostRef.confirmCancel()\" color=\"danger\">\n          <span i18n=\"Discard button text@@messages.createMessage.composeMessageModal.discardButton\">\n            Discard travel notice\n          </span>\n        </button>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n  <!-- end of modal -->\n</ng-template>\n\n<ng-template bbTravelNoticeDetailsStepCustomizable let-hostRef>\n  <form [formGroup]=\"hostRef.detailsGroup\">\n    <div [hidden]=\"hostRef.currentStep !== 1\">\n      <h2 \n        class=\"bb-block bb-block--xl\"\n        i18n=\"Create travel notice details form header@@cards.create.travel.notice.details.form.header\"\n      >\n        Tell us about your travel details\n      </h2>\n      <div class=\"bb-block bb-block--xl\">\n        <!-- Destinations input -->\n        <div class=\"bb-block bb-block--lg\">\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <div class=\"bb-create-travel-notice__country-selector\">\n                <label i18n=\"Travel notice destinations input@@cards.create.travel.notice.details.form.destinations.input\">\n                  Destination(s)\n                </label>\n                <bb-cards-travel-notice-country-selector\n                  [destinationList]=\"hostRef.destinationList\"\n                  formControlName=\"destinations\"\n                ></bb-cards-travel-notice-country-selector>\n              </div>\n            </div>\n          </div>\n          <bb-input-validation-message-ui [showErrors]=\"!hostRef.isFieldValid('destinations')\">\n            <span \n              i18n=\"Travel notice no destinations validation@@cards.create.travel.notice.required.destinations.error.msg\"\n              *ngIf=\"hostRef.destinations.hasError('required')\"\n            >\n              Please select one or more destinations\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n        <!-- end of input -->\n        <div class=\"row\">\n          <!-- Departure date input -->\n          <div class=\"col-md-6 bb-block bb-block--lg\">\n            <bb-input-datepicker-ui \n              placeholder=\"MM/DD/YYYY\"\n              i18n-placeholder=\"Departure date input placeholder@@cards.create.travel.notice.form.departure.input.placeholder\" \n              label=\"Departure date\"\n              i18n-label=\"Departure date@@cards.create.travel.notice.form.departure.label\" \n              name=\"departureDate\"\n              formControlName=\"departureDate\"\n              [overrideDateFormat]=\"'longDate'\"\n            >\n            </bb-input-datepicker-ui>\n            <bb-input-validation-message-ui [showErrors]=\"!hostRef.isFieldValid('departureDate')\">\n\n              <ng-container *ngFor=\"let error of hostRef.departureDate.errors | keyvalue; last as last\">\n                <ng-container *ngIf=\"last\" [ngSwitch]=\"error.key\">\n                  <span\n                    *ngSwitchCase=\"'required'\"\n                    i18n=\"Missing departure date|Missing leaving date|Missing initial Date@@cards.create.travel.notice.required.departureDate.error.msg\"\n                  >\n                    Please choose a departure date\n                  </span>\n                  <span \n                    *ngSwitchCase=\"'invalidDate'\"\n                    i18n=\"Invalid departure date|Arrival date is before departure@@cards.create.travel.notice.invalid.returnDateConflict.error.msg\"\n                  >\n                    The return date cannot be before the departure date\n                  </span>\n                  <span \n                    *ngSwitchCase=\"'invalidDateFormat'\"\n                    i18n=\"Invalid departure date|Invalid date format@@cards.create.travel.notice.invalid.arrivalDate.hasInvalidFormat.error.msg\"\n                  >\n                    Please enter a valid format. For example, 10/08/2020\n                  </span>\n                </ng-container>\n              </ng-container>\n\n            </bb-input-validation-message-ui>\n          </div>\n          <!-- end of input -->\n          <!-- Return date input -->\n          <div class=\"col-md-6 bb-block bb-block--lg\">\n            <bb-input-datepicker-ui \n              placeholder=\"MM/DD/YYYY\"\n              i18n-placeholder=\"Arrival date input placeholder@@cards.create.travel.notice.form.arrival.input.placeholder\" \n              label=\"Return date\"\n              i18n-label=\"Return date@@cards.create.travel.notice.form.arrival.label\" \n              name=\"arrivalDate\"\n              formControlName=\"arrivalDate\"\n              [overrideDateFormat]=\"'longDate'\"\n            >\n            </bb-input-datepicker-ui>\n            <bb-input-validation-message-ui [showErrors]=\"!hostRef.isFieldValid('arrivalDate')\">\n\n              <ng-container *ngFor=\"let error of hostRef.arrivalDate.errors | keyvalue; last as last\">\n                <ng-container *ngIf=\"last\" [ngSwitch]=\"error.key\">\n                  <span \n                    *ngSwitchCase=\"'required'\"\n                    i18n=\"Missing arrival date|Missing coming date|Missing last Date@@cards.create.travel.notice.required.departureDate.error.msg\"\n                  >\n                    Please choose a return date\n                  </span>\n                  <span \n                    *ngSwitchCase=\"'invalidDate'\"\n                    i18n=\"Invalid arrival date|Arrival date is before departure@@cards.create.travel.notice.invalid.returnDateConflict.error.msg\"\n                  >\n                    The return date cannot be before the departure date\n                  </span>\n                  <span \n                    *ngSwitchCase=\"'invalidCurrentDate'\"\n                    i18n=\"Invalid departure date|Arrival date is before current date@@cards.create.travel.notice.invalid.arrivalDate.hasCurrentDate.error.msg\"\n                  >\n                    Please do not choose a past return date\n                  </span>\n                  <span \n                    *ngSwitchCase=\"'invalidDateFormat'\"\n                    i18n=\"Invalid arrival date|Invalid date format@@cards.create.travel.notice.invalid.arrivalDate.hasInvalidFormat.error.msg\"\n                  >\n                    Please enter a valid format. For example, 10/08/2020\n                  </span>\n                </ng-container>\n              </ng-container>\n            </bb-input-validation-message-ui>\n          </div>\n          <!-- end of input -->\n        </div>\n        <!-- Contact number input -->\n        <div class=\"bb-block\">\n          <label>\n            <strong i18n=\"Contact Number@@cards.create.travel.notice.details.form.contactNumber.input\">\n              Contact number\n            </strong>\n          </label>\n          <span class=\"bb-text-support\" i18n=\"Optional@@cards.create.travel.notice.details.form.contactNumber.optional\">\n            (Optional)\n          </span>\n          <div class=\"bb-block\" [ngClass]=\"{'bb-block--sm': hostRef.isFieldValid('contactNumber')}\">\n            <div class=\"row\">\n              <div class=\"col-md-6\">\n                <div class=\"bb-create-travel-notice__contact-number\">\n                  <bb-input-phone-ui \n                    formControlName=\"contactNumber\"\n                    placeholder=\"e.g. +(1) 541 754 3010\"\n                    i18n-placeholder=\"Example placeholder, e.g. +(1) 541 754 3010@@cards.create.travel.notice.details.form.contactNumber.placeholder\"\n                  >\n                  </bb-input-phone-ui>\n                  <bb-input-validation-message-ui [showErrors]=\"!hostRef.isFieldValid('contactNumber')\">\n                    <div class=\"bb-block bb-block--sm\">\n                      <span i18n=\"Invalid contact number@@cards.create.travel.notice.details.form.contactNumber.error.pattern\">\n                        Invalid contact number\n                      </span>\n                    </div>\n                  </bb-input-validation-message-ui>\n                </div>\n              </div>\n            </div>\n          </div>\n          <span\n            class=\"bb-create-travel-notice__disclaimer\"\n            i18n=\"Contact phone number description@@cards.create.travel.notice.details.form.contactNumber.description\"\n          >\n            We will reach you on this number in case of any suspicious activity.\n          </span>\n        </div>\n      </div>\n      <!-- end of input -->\n      <div class=\"bb-button-bar\">\n        <button \n          class=\"bb-button-bar__button\" \n          bbButton\n          i18n=\"Continue Button text@@cards.create.travel.notice.details.form.continue.button\"\n          (click)=\"hostRef.next(hostRef.cardIdsGroup)\"\n        >\n          Continue\n        </button>\n        <button \n          class=\"bb-button-bar__button bb-button-bar__button--across\" \n          bbButton \n          color=\"link\"\n          i18n=\"Cancel button text@@cards.create.travel.notice.details.form.cancel.button\"\n          (click)=\"hostRef.onCancel()\"\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  </form>\n</ng-template>\n\n<ng-template bbTravelNoticeSelectCardsCustomizable let-hostRef>\n  <div [hidden]=\"hostRef.currentStep !== 2\">\n    <h2 \n      class=\"bb-block bb-block--xl\"\n      i18n=\"Create travel notice select cards header@@cards.create.travel.notice.selectCards.header\"\n    >\n      Select the cards you are travelling with\n    </h2>\n    <bb-alert-ui *ngIf=\"hostRef.displayAlert\"\n      title=\"You need to select at least one card in order to create a travel notice\"\n      i18n-title=\"You need to select at least one card in order to create a travel notice|Pick one@@cards.create.travel.notice.selectCards.alert\"\n      [dismissible]=\"true\"\n      (close)=\"hostRef.onAlertDismiss()\"\n    ></bb-alert-ui>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-cards-travel-notice-checkbox-cards [paymentCards]=\"hostRef.paymentCards\" [formControl]=\"hostRef.cardIdsGroup\"></bb-cards-travel-notice-checkbox-cards>\n    </div>\n    <div class=\"bb-button-bar\">\n      <button\n        class=\"bb-button-bar__button\" \n        bbButton\n        i18n=\"Continue Button text@@cards.create.travel.notice.selectCards.step.continue.button\"\n        (click)=\"hostRef.next()\"\n      >\n        Continue\n      </button>\n      <button  \n        class=\"bb-button-bar__button\" \n        bbButton color=\"secondary\"\n        i18n=\"Back button text@@cards.create.travel.notice.selectCards.step.back.button\"\n        (click)=\"hostRef.back(hostRef.detailsGroup)\"\n      >\n        Back\n      </button>\n      <div \n        class=\"bb-button-bar__button bb-text-support bb-create-travel-notice__cards-count bb-create-travel-notice__cards-count--xs-top\"\n        *ngIf=\"hostRef.cardIdsGroup.value.length !== 0\"\n      >\n        {{hostRef.cardIdsGroup.value.length}} of {{hostRef.paymentCards.length}} selected\n      </div>\n      <div class=\"bb-button-bar__button bb-button-bar__button--across\">\n        <button \n          bbButton\n          color=\"link\"\n          i18n=\"Cancel button text@@cards.create.travel.notice.selectCards.step.cancel.button\"\n          (click)=\"hostRef.onCancel()\"\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template bbTravelNoticeConfirmStepCustomizable let-hostRef>\n  <div *ngIf=\"hostRef.currentStep === 3\">\n    <h2   \n      class=\"bb-block bb-block--xl\"\n      i18n=\"Create travel notice confirmation step header@@cards.create.travel.notice.confirm.step.header\"\n    >\n      Review your travel notice\n    </h2>\n    <div class=\"bb-block bb-block--xl\">\n      <bb-cards-travel-notice-confirm-step\n        [travelNoticeItem]=\"hostRef.travelNoticeItem\"\n        [selectedCards]=\"hostRef.cardIdsGroup?.value\"\n        [destinationList]=\"hostRef.destinationList\"\n      ></bb-cards-travel-notice-confirm-step>\n    </div>\n    <div class=\"bb-button-bar\">\n      <button  \n        class=\"bb-button-bar__button\" \n        bbButton \n        type=\"submit\"\n        i18n=\"Confirm button text@@cards.create.travel.notice.confirmation.step.confirm.button\"\n      >\n        Confirm\n      </button>\n      <button \n        class=\"bb-button-bar__button\" \n        bbButton \n        color=\"secondary\"\n        i18n=\"Back button text@@cards.create.travel.notice.confirmation.step.back.button\"\n        (click)=\"hostRef.back(hostRef.cardIdsGroup)\"\n      >\n        Back\n      </button>\n      <button\n        class=\"bb-button-bar__button bb-button-bar__button--across\" \n        bbButton \n        color=\"link\"\n        i18n=\"Cancel button text@@cards.create.travel.notice.confirmation.step.cancel.button\"\n        (click)=\"hostRef.onCancel()\"\n      >\n        Cancel\n      </button>\n    </div>\n  </div>\n</ng-template>", components: [{ type: i0.forwardRef(function () { return i3.StepperComponent; }), selector: "bb-stepper-ui", outputs: ["select"] }, { type: i0.forwardRef(function () { return i3.StepperStepComponent; }), selector: "bb-stepper-step-ui", inputs: ["label", "stateLabel", "data", "ariaLabel", "isCurrent", "isChecked", "isActive"] }, { type: i0.forwardRef(function () { return i4.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i4.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i5.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i4.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i4.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0.forwardRef(function () { return i6.CardsTravelNoticeCountrySelectorComponent; }), selector: "bb-cards-travel-notice-country-selector", inputs: ["destinationList"] }, { type: i0.forwardRef(function () { return i7.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i8.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i0.forwardRef(function () { return i9.InputPhoneComponent; }), selector: "bb-input-phone-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "ariaLabel", "autocomplete", "countryList", "dropdownPosition", "clearable", "searchable", "defaultCountryIsoCode", "enableCountryCode"] }, { type: i0.forwardRef(function () { return i10.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i11.CardsTravelNoticeCheckboxCardsComponent; }), selector: "bb-cards-travel-notice-checkbox-cards", inputs: ["paymentCards"] }, { type: i0.forwardRef(function () { return i12.CardsTravelNoticeConfirmStepComponent; }), selector: "bb-cards-travel-notice-confirm-step", inputs: ["travelNoticeItem", "selectedCards", "destinationList"] }], directives: [{ type: i0.forwardRef(function () { return TravelNoticeCreateCustomizableDirective; }), selector: "[bbTravelNoticeCreateCustomizable]" }, { type: i0.forwardRef(function () { return TravelNoticeStepperCustomizableDirective; }), selector: "[bbTravelNoticeStepperCustomizable]" }, { type: i0.forwardRef(function () { return i1.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return TravelNoticeDetailsStepCustomizableDirective; }), selector: "[bbTravelNoticeDetailsStepCustomizable]" }, { type: i0.forwardRef(function () { return TravelNoticeSelectCardsCustomizableDirective; }), selector: "[bbTravelNoticeSelectCardsCustomizable]" }, { type: i0.forwardRef(function () { return TravelNoticeConfirmStepCustomizableDirective; }), selector: "[bbTravelNoticeConfirmStepCustomizable]" }, { type: i0.forwardRef(function () { return i4.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0.forwardRef(function () { return i13.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i4.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i4.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0.forwardRef(function () { return i1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i2.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i2.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i2.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i2.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i1.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], pipes: { "keyvalue": i0.forwardRef(function () { return i2.KeyValuePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsTravelNoticeCreateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-cards-travel-notice-create',
                    templateUrl: './cards-travel-notice-create.component.html',
                    providers: [DatePipe],
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.DatePipe }]; }, propDecorators: { paymentCards: [{
                type: Input
            }], destinationList: [{
                type: Input
            }], abortCreation: [{
                type: Output
            }], save: [{
                type: Output
            }] } });
export class TravelNoticeCreateCustomizableDirective extends BbTemplate {
}
TravelNoticeCreateCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeCreateCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TravelNoticeCreateCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeCreateCustomizableDirective, selector: "[bbTravelNoticeCreateCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeCreateCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTravelNoticeCreateCustomizable]',
                }]
        }] });
export class TravelNoticeDetailsStepCustomizableDirective extends BbTemplate {
}
TravelNoticeDetailsStepCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeDetailsStepCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TravelNoticeDetailsStepCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeDetailsStepCustomizableDirective, selector: "[bbTravelNoticeDetailsStepCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeDetailsStepCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTravelNoticeDetailsStepCustomizable]',
                }]
        }] });
export class TravelNoticeSelectCardsCustomizableDirective extends BbTemplate {
}
TravelNoticeSelectCardsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeSelectCardsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TravelNoticeSelectCardsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeSelectCardsCustomizableDirective, selector: "[bbTravelNoticeSelectCardsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeSelectCardsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTravelNoticeSelectCardsCustomizable]',
                }]
        }] });
export class TravelNoticeConfirmStepCustomizableDirective extends BbTemplate {
}
TravelNoticeConfirmStepCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeConfirmStepCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TravelNoticeConfirmStepCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeConfirmStepCustomizableDirective, selector: "[bbTravelNoticeConfirmStepCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeConfirmStepCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTravelNoticeConfirmStepCustomizable]',
                }]
        }] });
export class TravelNoticeStepperCustomizableDirective extends BbTemplate {
}
TravelNoticeStepperCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeStepperCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TravelNoticeStepperCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeStepperCustomizableDirective, selector: "[bbTravelNoticeStepperCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TravelNoticeStepperCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTravelNoticeStepperCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,