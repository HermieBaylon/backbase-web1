(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@backbase/cards-common-ang'), require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@backbase/foundation-ang/core'), require('@backbase/ui-ang/alert'), require('@backbase/ui-ang/badge'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/checkbox-group'), require('@backbase/ui-ang/collapsible'), require('@backbase/ui-ang/dropdown-multi-select'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/input-checkbox'), require('@backbase/ui-ang/input-datepicker'), require('@backbase/ui-ang/input-phone'), require('@backbase/ui-ang/input-text'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/notification'), require('@backbase/ui-ang/payment-card'), require('@backbase/ui-ang/stepper'), require('@ng-bootstrap/ng-bootstrap'), require('@ng-select/ng-select'), require('rxjs'), require('rxjs/operators'), require('@backbase/ui-ang/empty-state')) :
    typeof define === 'function' && define.amd ? define('@backbase/cards-travel-notice-widget-ang', ['exports', '@backbase/cards-common-ang', '@angular/common', '@angular/core', '@angular/forms', '@backbase/foundation-ang/core', '@backbase/ui-ang/alert', '@backbase/ui-ang/badge', '@backbase/ui-ang/button', '@backbase/ui-ang/checkbox-group', '@backbase/ui-ang/collapsible', '@backbase/ui-ang/dropdown-multi-select', '@backbase/ui-ang/icon', '@backbase/ui-ang/input-checkbox', '@backbase/ui-ang/input-datepicker', '@backbase/ui-ang/input-phone', '@backbase/ui-ang/input-text', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/modal', '@backbase/ui-ang/notification', '@backbase/ui-ang/payment-card', '@backbase/ui-ang/stepper', '@ng-bootstrap/ng-bootstrap', '@ng-select/ng-select', 'rxjs', 'rxjs/operators', '@backbase/ui-ang/empty-state'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["cards-travel-notice-widget-ang"] = {}), global.i2, global.ng.common, global.ng.core, global.ng.forms, global.i1$1, global.i10, global.i2$1, global.i7, global.checkboxGroup, global.collapsible, global.dropdownMultiSelect, global.i1, global.i2$4, global.i8$1, global.i9, global.inputText, global.i7$1, global.i5$1, global.i5, global.i3$1, global.i2$3, global.i3, global.i8, global.i1$3, global.rxjs, global.rxjs.operators, global.i6));
})(this, (function (exports, i2, i2$2, i0, i1$2, i1$1, i10, i2$1, i7, checkboxGroup, collapsible, dropdownMultiSelect, i1, i2$4, i8$1, i9, inputText, i7$1, i5$1, i5, i3$1, i2$3, i3, i8, i1$3, rxjs, operators, i6) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$2);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$1);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2$1);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace$4 = /*#__PURE__*/_interopNamespace(i2$4);
    var i8__namespace$1 = /*#__PURE__*/_interopNamespace(i8$1);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
    var i7__namespace$1 = /*#__PURE__*/_interopNamespace(i7$1);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$3);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var TravelNoticeDatesHelperService = /** @class */ (function () {
        function TravelNoticeDatesHelperService() {
        }
        TravelNoticeDatesHelperService.prototype.isPastDate = function (date) {
            var time = new Date(date);
            return this.trucanteDate(time) < this.trucanteDate(new Date());
        };
        TravelNoticeDatesHelperService.prototype.isPastDateOrToday = function (date) {
            return this.isPastDate(date) || this.areDateEqual(new Date(), new Date(date));
        };
        TravelNoticeDatesHelperService.prototype.isUpcomingDate = function (date) {
            var time = new Date(date);
            return this.trucanteDate(time) > this.trucanteDate(new Date());
        };
        TravelNoticeDatesHelperService.prototype.isUpcomingDateOrToday = function (date) {
            return this.isUpcomingDate(date) || this.areDateEqual(new Date(), new Date(date));
        };
        TravelNoticeDatesHelperService.prototype.isDateInBetween = function (date1, date2) {
            return this.isPastDateOrToday(date1) && this.isUpcomingDateOrToday(date2);
        };
        TravelNoticeDatesHelperService.prototype.areDateEqual = function (date1, date2) {
            return this.trucanteDate(date1) === this.trucanteDate(date2);
        };
        TravelNoticeDatesHelperService.prototype.trucanteDate = function (date) {
            date.setHours(0);
            date.setMinutes(0);
            date.setSeconds(0);
            date.setMilliseconds(0);
            return date.getTime();
        };
        return TravelNoticeDatesHelperService;
    }());
    TravelNoticeDatesHelperService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeDatesHelperService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    TravelNoticeDatesHelperService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeDatesHelperService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeDatesHelperService, decorators: [{
                type: i0.Injectable
            }] });

    var CardsTravelNoticeStatusBadgeComponent = /** @class */ (function () {
        function CardsTravelNoticeStatusBadgeComponent(helper) {
            this.helper = helper;
        }
        return CardsTravelNoticeStatusBadgeComponent;
    }());
    CardsTravelNoticeStatusBadgeComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeStatusBadgeComponent, deps: [{ token: TravelNoticeDatesHelperService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CardsTravelNoticeStatusBadgeComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeStatusBadgeComponent, selector: "bb-cards-travel-notice-status-badge", inputs: { travelNoticeItem: "travelNoticeItem" }, ngImport: i0__namespace, template: "<div class=\"bb-stack bb-block bb-block--md\" >\n  <ng-container *ngIf=\"helper.isDateInBetween(travelNoticeItem!.departureDate,travelNoticeItem!.arrivalDate)\">\n    <bb-badge-ui\n      text=\"Active\"\n      i18n-text=\"Active label|Text for the active label@@cards.travelNotice.active\"\n      color=\"success\"\n    ></bb-badge-ui>\n  </ng-container>\n\n  <ng-container *ngIf=\"helper.isUpcomingDate(travelNoticeItem!.departureDate) && helper.isUpcomingDate(travelNoticeItem!.arrivalDate)\">\n    <bb-badge-ui\n      text=\"Scheduled\"\n      i18n-text=\"Scheduled label|Text for the scheduled label@@cards.travelNotice.scheduled\"\n      color=\"info\"\n    ></bb-badge-ui>\n  </ng-container>\n\n  <ng-container *ngIf=\"helper.isPastDate(travelNoticeItem!.departureDate) && helper.isPastDate(travelNoticeItem!.arrivalDate)\">\n    <bb-badge-ui\n      text=\"Expired\"\n      i18n-text=\"Expired label|Text for the expired label@@cards.travelNotice.expired\"\n      color=\"danger\"\n    ></bb-badge-ui>\n  </ng-container>\n</div>", components: [{ type: i2__namespace.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }], directives: [{ type: i2__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeStatusBadgeComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-cards-travel-notice-status-badge',
                        templateUrl: './cards-travel-notice-status-badge.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: TravelNoticeDatesHelperService }]; }, propDecorators: { travelNoticeItem: [{
                    type: i0.Input
                }] } });

    var CardsTravelNoticePaymentCardComponent = /** @class */ (function () {
        function CardsTravelNoticePaymentCardComponent() {
        }
        CardsTravelNoticePaymentCardComponent.prototype.getDisplayState = function () {
            if (this.paymentCard && this.paymentCard.status === i2.PaymentCardStatus.Inactive) {
                return 'INACTIVE';
            }
            if (this.paymentCard && this.paymentCard.status === i2.PaymentCardStatus.Canceled) {
                return 'CANCELLED';
            }
            if (this.paymentCard && this.paymentCard.status === i2.PaymentCardStatus.Expired) {
                return 'EXPIRED';
            }
            if (this.paymentCard && this.paymentCard.lockStatus === i2.PaymentCardLockStatus.Locked) {
                return 'LOCKED';
            }
            return undefined;
        };
        return CardsTravelNoticePaymentCardComponent;
    }());
    CardsTravelNoticePaymentCardComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticePaymentCardComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    CardsTravelNoticePaymentCardComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticePaymentCardComponent, selector: "bb-cards-travel-notice-payment-card", inputs: { paymentCard: "paymentCard" }, ngImport: i0__namespace, template: "<bb-payment-card-state-wrapper-ui [state]=\"getDisplayState()\">\n  <bb-payment-card-ui [paymentCard]=\"paymentCard\"></bb-payment-card-ui>\n</bb-payment-card-state-wrapper-ui>", components: [{ type: i2__namespace$2.PaymentCardStateWrapperComponent, selector: "bb-payment-card-state-wrapper,bb-payment-card-state-wrapper-ui", inputs: ["state"] }, { type: i2__namespace$3.PaymentCardComponent, selector: "bb-payment-card-ui", inputs: ["paymentCard", "paymentCardNumberFormat"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticePaymentCardComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-cards-travel-notice-payment-card',
                        templateUrl: 'cards-travel-notice-payment-card.component.html',
                    }]
            }], propDecorators: { paymentCard: [{
                    type: i0.Input
                }] } });

    var CardsTravelNoticeListItemComponent = /** @class */ (function () {
        function CardsTravelNoticeListItemComponent(helper) {
            var _this = this;
            this.helper = helper;
            this.hostRef = this;
            /**
             * EventEmitter for triggering delete event.
             */
            this.delete = new i0.EventEmitter();
            this.dialogOpen = false;
            this.areCardsOpen = false;
            this.onCancel = function () {
                _this.dialogOpen = false;
            };
            this.onConfirm = function () {
                _this.delete.emit(_this.travelNoticeItem);
                _this.dialogOpen = false;
            };
        }
        CardsTravelNoticeListItemComponent.prototype.getCountryName = function (travelNoticeCountry) {
            return i2.getCountryName(this.destinationList, travelNoticeCountry);
        };
        CardsTravelNoticeListItemComponent.prototype.onDelete = function () {
            this.dialogOpen = true;
        };
        CardsTravelNoticeListItemComponent.prototype.toggleCardsVisibility = function () {
            this.areCardsOpen = !this.areCardsOpen;
        };
        return CardsTravelNoticeListItemComponent;
    }());
    CardsTravelNoticeListItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeListItemComponent, deps: [{ token: TravelNoticeDatesHelperService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CardsTravelNoticeListItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeListItemComponent, selector: "bb-cards-travel-notice-list-item", inputs: { travelNoticeItem: "travelNoticeItem", destinationList: "destinationList" }, outputs: { delete: "delete" }, ngImport: i0__namespace, template: "<div \n  class=\"bb-travel-notice-list-item\"\n  [ngClass]=\"{'bb-travel-notice-list-item--expired': hostRef.helper.isPastDate(travelNoticeItem!.arrivalDate)}\"\n>\n   <!-- status -->\n  <bb-cards-travel-notice-status-badge \n    [travelNoticeItem]=\"hostRef.travelNoticeItem\"\n  ></bb-cards-travel-notice-status-badge>\n\n  <div class=\"bb-stack bb-block bb-block--md bb-stack--align-top\">\n    <h3 class=\"bb-stack__item bb-travel-notice-header\">\n      <div>\n        <ng-container *ngFor=\"let item of hostRef.travelNoticeItem?.destinations; first as isFirst; last as isLast\">\n          <ng-container *ngIf=\"!isLast && !isFirst\">, </ng-container>\n          <ng-container *ngIf=\"!isFirst && isLast\">&nbsp;</ng-container>\n          <ng-container\n            i18n=\"And@@cards.travel.notice.list.countries.and\" \n            *ngIf=\"!isFirst && isLast\"\n          >and</ng-container>\n          <ng-container *ngIf=\"!isFirst && isLast\">&nbsp;</ng-container>\n          <ng-container>{{getCountryName(item)}}</ng-container>\n        </ng-container>\n      </div>\n    </h3>\n    \n    <div class=\"bb-stack__item bb-stack__item--push-right\">\n      <button bbButton color=\"unstyled\" (click)=\"onDelete()\">\n        <bb-icon-ui name=\"delete\" aria-label=\"Delete travel notice\" i18n-aria-label=\"Delete travel notice button@@cards.travel.notice.list.button.delete\"></bb-icon-ui>\n      </button>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-3\">\n      <div class=\"bb-block bb-block--md\">\n        <div>\n          <bb-icon-ui name=\"flight-takeoff\" size=\"sm\"></bb-icon-ui>\n          <span class=\"bb-text-support bb-travel-notice-list__label\"\n            i18n='Travel notice list Departure date header@@cards.travel.notice.list.departure.date.header'\n          > Departure date: </span>\n        </div>\n        <div class=\"bb-travel-notice-list-item__departure-date\">{{ travelNoticeItem?.departureDate | date }}</div>\n      </div>\n     \n    </div>\n    <div class=\"col-md-3\">\n      <div class=\"bb-block bb-block--md\">\n        <div>\n          <bb-icon-ui name=\"flight-land\" size=\"sm\"></bb-icon-ui>\n          <span \n            class=\"bb-text-support bb-travel-notice-list__label\"\n            i18n='Travel notice Return date header@@cards.travel.notice.list.return.date.header'\n          > Return date: </span>\n        </div>\n        <div class=\"bb-travel-notice-list-item__return-date\">{{ travelNoticeItem?.arrivalDate | date }}</div>\n      </div>\n    </div>\n  </div>\n  <div [ngbCollapse]=\"!hostRef.areCardsOpen\" class=\"bb-block bb-block--sm\">\n    <div  class=\"bb-block bb-block--md\" *ngIf=\"hostRef.travelNoticeItem?.contact?.phoneNumber\">\n      <div>\n        <bb-icon-ui name=\"local-phone\" size=\"sm\"></bb-icon-ui>\n        <span class=\"bb-text-support bb-travel-notice-list__label\"\n          i18n='Travel notice list Contact number header@@cards.travel.notice.list.contactNumber.header'\n        > Contact number: </span>\n      </div>\n      <div>\n        <div>{{hostRef.travelNoticeItem?.contact?.phoneNumber}}</div>\n      </div>\n    </div>\n    <div>\n      <div class=\"bb-block bb-block--md\" data-role=\"selectCards header\">\n        <div\n        class=\"bb-text-bold\"\n        i18n='Travel notice list Selected Cards header@@cards.travel.notice.list.selectCards.header'\n        >Selected cards</div>\n      </div>\n      <div class=\"bb-stack bb-stack--wrap\">\n        <div class=\"bb-stack__item bb-block bb-block--md\" *ngFor=\"let paymentCard of hostRef.travelNoticeItem?.cards\">\n          <bb-cards-travel-notice-payment-card [paymentCard]=\"paymentCard\"></bb-cards-travel-notice-payment-card>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div>\n    <button bbButton data-role=\"see-details-button\" buttonSize=\"sm\" color=\"link-text\" (click)=\"hostRef.toggleCardsVisibility()\">\n      <span \n        class=\"bb-travel-notice-list__label\"\n        i18n='Travel notice list show less button@@cards.travel.notice.list.seeLess.button' \n        *ngIf=\"areCardsOpen\"\n      >\n        Show less\n      </span>\n      <span \n        class=\"bb-travel-notice-list__label\"\n        i18n='Travel notice list show more button@@cards.travel.notice.list.seeMore.button' \n        *ngIf=\"!areCardsOpen\"\n      >\n        Show more\n      </span>\n      <bb-icon-ui [name]=\"areCardsOpen?'toggle-up':'toggle-down'\" size=\"md\"></bb-icon-ui>\n    </button>\n  </div>\n</div>\n<!-- delete confirmation model  -->\n<bb-modal-ui [isOpen]=\"hostRef.dialogOpen\" (cancel)=\"hostRef.onCancel()\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <h2 i18n=\"Delete Travel Notice@@cards.delete.travel.notice.deleteTravelNotice.modal.header\">Delete travel notice?</h2>\n      <div>\n        <button bbButton color=\"unstyled\" (click)=\"hostRef.onCancel()\">\n          <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <span i18n=\"Delete confirmation text@@cards.delete.travel.notice.deleteTravelNotice.modal.body\">\n        This travel notice information will be permanently deleted.\n      </span>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui #footerRef>\n    <ng-template bbCustomModalFooter>\n      <button bbButton (click)=\"hostRef.onCancel()\" color=\"link\">\n        <span i18n=\"Cancel button text@@messages.createMessage.composeMessageModal.cancel.button\">\n          Keep it\n        </span>\n      </button>\n      <button bbButton (click)=\"hostRef.onConfirm()\" color=\"danger\">\n        <span i18n=\"Delete button text@@messages.createMessage.composeMessageModal.delete.button\">\n          Delete travel notice\n        </span>\n      </button>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n<!-- end of model -->", components: [{ type: CardsTravelNoticeStatusBadgeComponent, selector: "bb-cards-travel-notice-status-badge", inputs: ["travelNoticeItem"] }, { type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: CardsTravelNoticePaymentCardComponent, selector: "bb-cards-travel-notice-payment-card", inputs: ["paymentCard"] }, { type: i5__namespace.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i5__namespace.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i5__namespace.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i5__namespace.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i2__namespace$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2__namespace$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i8__namespace.NgbCollapse, selector: "[ngbCollapse]", inputs: ["ngbCollapse", "animation"], outputs: ["ngbCollapseChange", "shown", "hidden"], exportAs: ["ngbCollapse"] }, { type: i5__namespace.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i5__namespace.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i5__namespace.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }], pipes: { "date": i2__namespace$1.DatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeListItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-cards-travel-notice-list-item',
                        templateUrl: './cards-travel-notice-list-item.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: TravelNoticeDatesHelperService }]; }, propDecorators: { travelNoticeItem: [{
                    type: i0.Input
                }], destinationList: [{
                    type: i0.Input
                }], delete: [{
                    type: i0.Output
                }] } });

    var CardsTravelNoticeListComponent = /** @class */ (function () {
        function CardsTravelNoticeListComponent() {
            this.hostRef = this;
            /**
             * EventEmitter for triggering post event.
             */
            this.create = new i0.EventEmitter();
            /**
             * EventEmitter for triggering delete event.
             */
            this.deleteListItem = new i0.EventEmitter();
        }
        CardsTravelNoticeListComponent.prototype.onShowCreateForm = function () {
            this.create.emit({ goToPage: 'create' });
        };
        CardsTravelNoticeListComponent.prototype.onDeleteListItem = function (travelNoticeItem) {
            this.deleteListItem.emit(travelNoticeItem);
        };
        return CardsTravelNoticeListComponent;
    }());
    CardsTravelNoticeListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    CardsTravelNoticeListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeListComponent, selector: "bb-cards-travel-notice-list", inputs: { travelNoticeList: "travelNoticeList", destinationList: "destinationList" }, outputs: { create: "create", deleteListItem: "deleteListItem" }, ngImport: i0__namespace, template: "<ng-container bbTravelNoticeListCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTravelNoticeListCustomizable let-hostRef>\n  <div>\n    <div class=\"bb-text-align-right bb-block bb-block--xl bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--push-right\">\n        <button bbButton data-role=\"add-button\" (click)=\"hostRef.onShowCreateForm()\">\n          <bb-icon-ui name=\"add\"></bb-icon-ui>\n          <span i18n=\"Create new travel notice button@@cards.travel.notice.createNew.button\"> Create New</span>\n        </button>\n      </div>\n    </div>\n    <div class=\"card card-lg\">\n      <div class=\"card-body\">\n        <ng-container bbTravelNoticeListItemCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template bbTravelNoticeListItemCustomizable let-hostRef>\n  <div class=\"bb-travel-notice-list bb-list\">\n    <div class=\"bb-list__item\" *ngFor=\"let travelNoticeItem of hostRef.travelNoticeList\">\n      <bb-cards-travel-notice-list-item\n        [travelNoticeItem]=\"travelNoticeItem\"\n        [destinationList]=\"hostRef.destinationList\" \n        (delete)=\"hostRef.onDeleteListItem($event)\"\n      ></bb-cards-travel-notice-list-item>\n    </div>\n  </div>\n</ng-template>", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return CardsTravelNoticeListItemComponent; }), selector: "bb-cards-travel-notice-list-item", inputs: ["travelNoticeItem", "destinationList"], outputs: ["delete"] }], directives: [{ type: i0__namespace.forwardRef(function () { return TravelNoticeListCustomizableDirective; }), selector: "[bbTravelNoticeListCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i7__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return TravelNoticeListItemCustomizableDirective; }), selector: "[bbTravelNoticeListItemCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-cards-travel-notice-list',
                        templateUrl: './cards-travel-notice-list.component.html',
                    }]
            }], propDecorators: { travelNoticeList: [{
                    type: i0.Input
                }], destinationList: [{
                    type: i0.Input
                }], create: [{
                    type: i0.Output
                }], deleteListItem: [{
                    type: i0.Output
                }] } });
    var TravelNoticeListCustomizableDirective = /** @class */ (function (_super) {
        __extends(TravelNoticeListCustomizableDirective, _super);
        function TravelNoticeListCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TravelNoticeListCustomizableDirective;
    }(i1$1.BbTemplate));
    TravelNoticeListCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeListCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TravelNoticeListCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeListCustomizableDirective, selector: "[bbTravelNoticeListCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeListCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTravelNoticeListCustomizable]',
                    }]
            }] });
    var TravelNoticeListItemCustomizableDirective = /** @class */ (function (_super) {
        __extends(TravelNoticeListItemCustomizableDirective, _super);
        function TravelNoticeListItemCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TravelNoticeListItemCustomizableDirective;
    }(i1$1.BbTemplate));
    TravelNoticeListItemCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeListItemCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TravelNoticeListItemCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeListItemCustomizableDirective, selector: "[bbTravelNoticeListItemCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeListItemCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTravelNoticeListItemCustomizable]',
                    }]
            }] });

    var CardsTravelNoticeCountrySelectorComponent = /** @class */ (function () {
        function CardsTravelNoticeCountrySelectorComponent() {
            var _this = this;
            this.destionationListControl = new i1$2.FormControl([]);
            this.updateCountryList = function (destinations) {
                _this.onChange(destinations.map(function (item) { return ({
                    country: item.parent ? item.parent : item.value,
                    region: item.parent && item.value,
                }); }));
            };
            this.onChange = function () { };
            this.onTouched = function () { };
        }
        Object.defineProperty(CardsTravelNoticeCountrySelectorComponent.prototype, "destinationList", {
            get: function () {
                return this.fullDestinationList || [];
            },
            // eslint-disable-next-line
            set: function (value) {
                this.destinationsDisplay = __spreadArray(__spreadArray([], __read(value.map(function (item) { return ({
                    name: item.name,
                    value: item.code,
                }); }))), __read(value
                    .filter(function (item) { return item.regions !== undefined; })
                    .reduce(function (acc, _a) {
                    var _b = _a.regions, regions = _b === void 0 ? [] : _b, countryCode = _a.code;
                    return __spreadArray(__spreadArray([], __read(acc)), __read(regions.map(function (region) { return ({
                        name: region.name + " (" + countryCode + ")",
                        value: region.code,
                        parent: countryCode,
                    }); })));
                }, []))).sort(function (left, right) {
                    if (left.name === right.name) {
                        return 0;
                    }
                    return left.name > right.name ? 1 : -1;
                });
                this.fullDestinationList = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CardsTravelNoticeCountrySelectorComponent.prototype, "destinationListDisplay", {
            get: function () {
                return this.destinationsDisplay || [];
            },
            enumerable: false,
            configurable: true
        });
        CardsTravelNoticeCountrySelectorComponent.prototype.writeValue = function (countries) {
            this.destionationListControl.setValue(countries.map(function (_a) {
                var country = _a.country, region = _a.region;
                return (region ? country + ":" + region : country);
            }));
        };
        CardsTravelNoticeCountrySelectorComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        CardsTravelNoticeCountrySelectorComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        CardsTravelNoticeCountrySelectorComponent.prototype.ngOnInit = function () {
            this.countryListSubscription = this.destionationListControl.valueChanges.subscribe(this.updateCountryList);
        };
        CardsTravelNoticeCountrySelectorComponent.prototype.ngOnDestroy = function () {
            if (this.countryListSubscription) {
                this.countryListSubscription.unsubscribe();
            }
        };
        return CardsTravelNoticeCountrySelectorComponent;
    }());
    CardsTravelNoticeCountrySelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeCountrySelectorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    CardsTravelNoticeCountrySelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeCountrySelectorComponent, selector: "bb-cards-travel-notice-country-selector", inputs: { destinationList: "destinationList" }, providers: [
            {
                provide: i1$2.NG_VALUE_ACCESSOR,
                // eslint-disable-next-line @angular-eslint/no-forward-ref
                useExisting: i0.forwardRef(function () { return CardsTravelNoticeCountrySelectorComponent; }),
                multi: true,
            },
        ], ngImport: i0__namespace, template: "<ng-select \n  [items]=\"destinationListDisplay\"\n  class=\"bb-country-selector\"\n  [hideSelected]=\"true\"\n  [multiple]=\"true\"\n  bindLabel=\"name\"\n  [formControl]=\"destionationListControl\"\n  aria-label=\"Search or select countries\"\n  i18n-aria-label=\"Search or select countries aria-label@@cards.create.travel.notice.country.dropdown.tagSelector.aria-label\"\n  placeholder=\"Search or select countries\"\n  i18n-placeholder=\"Search or select countries@@cards.create.travel.notice.country.dropdown.tagSelector.placeholder\"\n></ng-select>", components: [{ type: i1__namespace$1.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }], directives: [{ type: i1__namespace$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeCountrySelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-cards-travel-notice-country-selector',
                        templateUrl: 'cards-travel-notice-country-selector.component.html',
                        providers: [
                            {
                                provide: i1$2.NG_VALUE_ACCESSOR,
                                // eslint-disable-next-line @angular-eslint/no-forward-ref
                                useExisting: i0.forwardRef(function () { return CardsTravelNoticeCountrySelectorComponent; }),
                                multi: true,
                            },
                        ],
                    }]
            }], propDecorators: { destinationList: [{
                    type: i0.Input
                }] } });

    var CardsTravelNoticeCheckboxCardsComponent = /** @class */ (function () {
        function CardsTravelNoticeCheckboxCardsComponent(fb) {
            var _this = this;
            this.fb = fb;
            this.indeterminate = false;
            this.onChange = function () { };
            this.onTouched = function () { };
            this.isIndeterminate = function () {
                if (_this.checkBoxCardsForm) {
                    var cardsIdsControl_1 = _this.checkBoxCardsForm.controls['cardIds'].controls;
                    var elements = Object.keys(cardsIdsControl_1);
                    var actives = elements.reduce(function (previous, item) { return (cardsIdsControl_1[item].value ? previous + 1 : previous); }, 0);
                    return actives !== 0 && actives < elements.length;
                }
                return false;
            };
            this.parentChange = function (value) {
                if (_this.checkBoxCardsForm) {
                    var cardsIdsControl = _this.checkBoxCardsForm.controls['cardIds'];
                    var newValue = _this.createCardsObjectWithDefaultValue(Object.keys(cardsIdsControl.controls), function (item) { return item; }, value);
                    cardsIdsControl.setValue(newValue);
                }
            };
            this.childChange = function (cardIds) {
                _this.indeterminate = _this.isIndeterminate();
                var result = Object.keys(cardIds || {}).filter(function (item) { return cardIds[item] === true; });
                _this.onChange(result.map(function (item) { return _this.paymentCards && _this.paymentCards.find(function (card) { return card.id === item; }); }));
            };
        }
        CardsTravelNoticeCheckboxCardsComponent.prototype.createCardsObjectWithDefaultValue = function (group, keyFinder, defaultValue) {
            if (group === void 0) { group = []; }
            return group.reduce(function (acc, cur) {
                var _a;
                return (Object.assign(Object.assign({}, acc), (_a = {}, _a[keyFinder(cur)] = defaultValue, _a)));
            }, {});
        };
        CardsTravelNoticeCheckboxCardsComponent.prototype.hasCardsSelected = function (control) {
            var cards = Object.keys(control.controls).find(function (item) { return control.controls[item].value === true; });
            // eslint-disable-next-line no-null/no-null
            return cards ? null : { empty: true };
        };
        CardsTravelNoticeCheckboxCardsComponent.prototype.createForm = function () {
            var cardsFormGroup = this.createCardsObjectWithDefaultValue(this.paymentCards, function (card) { return card.id; }, [
                false,
            ]);
            this.checkBoxCardsForm = this.fb.group({
                parent: [false],
                cardIds: this.fb.group(cardsFormGroup),
            });
            this.checkBoxCardsForm.controls['cardIds'].setValidators(this.hasCardsSelected);
        };
        CardsTravelNoticeCheckboxCardsComponent.prototype.writeValue = function (cards) {
            if (this.checkBoxCardsForm && cards && !!this.paymentCards) {
                var cardIds_1 = this.checkBoxCardsForm.controls['cardIds'];
                cards.forEach(function (item) { return cardIds_1.controls[item.id].setValue(true); });
                if (cards.length === this.paymentCards.length) {
                    this.checkBoxCardsForm.patchValue({ parent: true });
                }
            }
        };
        CardsTravelNoticeCheckboxCardsComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        CardsTravelNoticeCheckboxCardsComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        CardsTravelNoticeCheckboxCardsComponent.prototype.ngOnInit = function () {
            this.createForm();
            if (this.checkBoxCardsForm) {
                var parentGroup = this.checkBoxCardsForm.controls['parent'];
                var childrenGroup = this.checkBoxCardsForm.controls['cardIds'];
                this.parentSubscription = parentGroup.valueChanges.subscribe(this.parentChange);
                this.childrenSubscription = childrenGroup.valueChanges.subscribe(this.childChange);
            }
        };
        CardsTravelNoticeCheckboxCardsComponent.prototype.ngOnDestroy = function () {
            if (this.parentSubscription) {
                this.parentSubscription.unsubscribe();
            }
            if (this.childrenSubscription) {
                this.childrenSubscription.unsubscribe();
            }
        };
        return CardsTravelNoticeCheckboxCardsComponent;
    }());
    CardsTravelNoticeCheckboxCardsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeCheckboxCardsComponent, deps: [{ token: i1__namespace$2.FormBuilder }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CardsTravelNoticeCheckboxCardsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeCheckboxCardsComponent, selector: "bb-cards-travel-notice-checkbox-cards", inputs: { paymentCards: "paymentCards" }, providers: [
            {
                provide: i1$2.NG_VALUE_ACCESSOR,
                // eslint-disable-next-line @angular-eslint/no-forward-ref
                useExisting: i0.forwardRef(function () { return CardsTravelNoticeCheckboxCardsComponent; }),
                multi: true,
            },
        ], ngImport: i0__namespace, template: "<form [formGroup]=\"checkBoxCardsForm!\">\n  <ul class=\"list-unstyled\">\n    <li>\n      <div class=\"bb-block bb-block--xl\">\n        <bb-input-checkbox-ui \n          formControlName=\"parent\" \n          label=\"Select all cards\"\n          i18n-label=\"Select all cards@@cards.create.travel.notice.checkbox.label\"\n          i18n=\"Select all cards@@cards.create.travel.notice.checkbox.child\"\n          [indeterminate]=\"indeterminate\"\n        >\n          label=\"Select all cards\"\n        </bb-input-checkbox-ui>\n      </div>\n      <!--card -->\n      <div class=\"row bb-create-travel-notice-card-group\" formGroupName=\"cardIds\">\n        <ng-container *ngFor=\"let paymentCard of paymentCards\">\n          <div class=\"col-lg-6\">\n            <div class=\"bb-block bb-block--xl\">\n              <div class=\"bb-stack\">\n                <div class=\"bb-stack__item\">\n                  <bb-input-checkbox-ui [formControlName]=\"paymentCard.id\">\n                    <div class=\"bb-create-travel-notice-card-group__payment-card\">\n                      <bb-cards-travel-notice-payment-card [paymentCard]=\"paymentCard\"></bb-cards-travel-notice-payment-card>\n                    </div>\n                  </bb-input-checkbox-ui>\n                </div>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n      <!-- end card -->\n    </li>\n  </ul>\n</form>", components: [{ type: i2__namespace$4.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: CardsTravelNoticePaymentCardComponent, selector: "bb-cards-travel-notice-payment-card", inputs: ["paymentCard"] }], directives: [{ type: i1__namespace$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i2__namespace$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeCheckboxCardsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-cards-travel-notice-checkbox-cards',
                        templateUrl: 'cards-travel-notice-checkbox-cards.component.html',
                        providers: [
                            {
                                provide: i1$2.NG_VALUE_ACCESSOR,
                                // eslint-disable-next-line @angular-eslint/no-forward-ref
                                useExisting: i0.forwardRef(function () { return CardsTravelNoticeCheckboxCardsComponent; }),
                                multi: true,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.FormBuilder }]; }, propDecorators: { paymentCards: [{
                    type: i0.Input
                }] } });

    var CardsTravelNoticeConfirmStepComponent = /** @class */ (function () {
        function CardsTravelNoticeConfirmStepComponent() {
        }
        CardsTravelNoticeConfirmStepComponent.prototype.getCountryName = function (travelNoticeCountry) {
            return i2.getCountryName(this.destinationList, travelNoticeCountry);
        };
        return CardsTravelNoticeConfirmStepComponent;
    }());
    CardsTravelNoticeConfirmStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeConfirmStepComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    CardsTravelNoticeConfirmStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeConfirmStepComponent, selector: "bb-cards-travel-notice-confirm-step", inputs: { travelNoticeItem: "travelNoticeItem", selectedCards: "selectedCards", destinationList: "destinationList" }, ngImport: i0__namespace, template: "<div class=\"bb-create-travel-notice-review\">\n  <h3 class=\"bb-block bb-block--lg\"\n    i18n=\"Travel notice create details header@@cards.travel.notice.create.details.confirm.header\">Travel\n    details\n  </h3>\n  <div class=\"bb-block bb-block--lg\">\n    <div>\n      <span class=\"bb-inline-stack\">\n        <bb-icon-ui class=\"bb-inline-stack__item\" name=\"location-on\" size=\"sm\"></bb-icon-ui>\n      <span \n        class=\"bb-text-support bb-inline-stack__item bb-travel-notice-list__label\"\n        i18n=\"Travel notice destinations@@cards.create.travel.notice.confirm.destinations.input\"\n      >Destination(s):</span>\n      </span>\n    </div>\n    <div data-role=\"countries-label\">\n      <span *ngFor=\"let item of  travelNoticeItem?.destinations; first as isFirst; last as isLast\">\n        <span *ngIf=\"!isLast && !isFirst\">, </span>\n        <span *ngIf=\"!isFirst && isLast\">&nbsp;</span>\n        <span i18n=\"And@@cards.travel.notice.list.countries.and\" *ngIf=\"!isFirst && isLast\">and</span>\n        <span *ngIf=\"!isFirst && isLast\">&nbsp;</span>\n        <span>{{getCountryName(item)}}</span>\n      </span>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-3\">\n      <div class=\"bb-block bb-block--lg\">\n        <div>\n          <span class=\"bb-inline-stack\">\n            <bb-icon-ui class=\"bb-inline-stack__item\" name=\"flight-takeoff\" size=\"sm\" [cropped]=\"true\"></bb-icon-ui>\n          <span \n            class=\"bb-text-support bb-inline-stack__item bb-travel-notice-list__label\"\n            i18n='Create travel notice confirm Departure date header@@cards.create.travel.notice.confirm.departure.date.header'\n          >Departure date: </span>\n          </span>\n        </div>\n        <div data-role=\"departure-date-label\">{{ travelNoticeItem?.departureDate | date }}</div>\n      </div>\n    </div>\n    <div class=\"col-md-3\">\n      <div [ngClass]=\"{'bb-block bb-block--lg': travelNoticeItem?.contact?.phoneNumber, 'bb-block bb-block--xl': !(travelNoticeItem?.contact?.phoneNumber)}\">\n        <div>\n          <span class=\"bb-inline-stack\">\n            <bb-icon-ui class=\"bb-inline-stack__item\" name=\"flight-land\" size=\"sm\"></bb-icon-ui>\n          <span \n            class=\"bb-text-support bb-inline-stack__item bb-travel-notice-list__label\"\n            i18n='Create travel notice Return date header@@cards.create.travel.notice.confirm.return.date.header'\n          >Return date:</span>\n          </span>\n        </div>\n        <div data-role=\"arrival-date-label\">{{ travelNoticeItem?.arrivalDate | date }}</div>\n      </div>\n    </div>\n  </div>\n  <div class=\"bb-block bb-block--xl\" *ngIf=\"travelNoticeItem?.contact?.phoneNumber\">\n    <div>\n      <span class=\"bb-inline-stack\">\n        <bb-icon-ui class=\"bb-inline-stack__item\" name=\"local-phone\" size=\"sm\"></bb-icon-ui>\n      <span \n        class=\"bb-text-support bb-inline-stack__item bb-travel-notice-list__label\"\n        i18n='Create travel notice list Contact number header@@cards.create.travel.notice.confirm.contactNumber.header'\n      >Contact number:\n      </span>\n      </span>\n    </div>\n    <div>\n      <div data-role=\"contact-number-label\">{{ travelNoticeItem?.contact?.phoneNumber}}</div>\n    </div>\n  </div>\n  <div>\n    <h3 \n      i18n=\"Create travel notice confirm Selected Cards header@@cards.create.travel.notice.confirm.selectCards.header\"\n      class=\"bb-block bb-block--lg\"\n    >\n      Selected cards\n    </h3>\n    <div class=\"bb-stack bb-stack--wrap\">\n      <div class=\"bb-stack__item\" *ngFor=\"let paymentCard of selectedCards\">\n        <div class=\"bb-block bb-block--md\">\n          <bb-cards-travel-notice-payment-card [paymentCard]=\"paymentCard\"></bb-cards-travel-notice-payment-card>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: CardsTravelNoticePaymentCardComponent, selector: "bb-cards-travel-notice-payment-card", inputs: ["paymentCard"] }], directives: [{ type: i2__namespace$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "date": i2__namespace$1.DatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeConfirmStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-cards-travel-notice-confirm-step',
                        templateUrl: './cards-travel-notice-confirm-step.component.html',
                    }]
            }], propDecorators: { travelNoticeItem: [{
                    type: i0.Input
                }], selectedCards: [{
                    type: i0.Input
                }], destinationList: [{
                    type: i0.Input
                }] } });

    var CardsTravelNoticeCreateComponent = /** @class */ (function () {
        function CardsTravelNoticeCreateComponent(fb, datePipe) {
            var _this = this;
            this.fb = fb;
            this.datePipe = datePipe;
            this.hostRef = this;
            /**
             * Cancel form for create travel notice event emitter.
             */
            this.abortCreation = new i0.EventEmitter();
            /**
             * Submit for create travel notice form event emitter.
             */
            this.save = new i0.EventEmitter();
            this.currentStep = 1;
            this.dialogOpen = false;
            this.displayAlert = false;
            this.travelNoticeItem = {};
            this.closeConfirmationDialog = function () {
                _this.dialogOpen = false;
            };
            this.confirmCancel = function () {
                _this.closeConfirmationDialog();
                _this.abortCreation.emit({ goToPage: 'list' });
            };
            this.updateTravelNoticeValue = function (createTravelNoticeForm) {
                var details = createTravelNoticeForm.details, cards = createTravelNoticeForm.cardIds;
                if (cards) {
                    _this.travelNoticeItem = Object.assign(Object.assign({}, _this.travelNoticeItem), { cards: cards });
                }
                if (details) {
                    _this.travelNoticeItem = Object.assign(Object.assign({}, _this.travelNoticeItem), { destinations: details.destinations, contact: {
                            phoneNumber: details.contactNumber + '',
                        } });
                }
                if (_this.departureDate.valid) {
                    _this.travelNoticeItem = Object.assign(Object.assign({}, _this.travelNoticeItem), { departureDate: _this.datePipe.transform(details.departureDate, 'yyyy-MM-dd') });
                }
                if (_this.arrivalDate.valid) {
                    _this.travelNoticeItem = Object.assign(Object.assign({}, _this.travelNoticeItem), { arrivalDate: _this.datePipe.transform(details.arrivalDate, 'yyyy-MM-dd') });
                }
                _this.displayAlert = false;
            };
            this.currentDateValidator = function (control) {
                var returnDate = new Date(control.value);
                var currentDate = _this.truncateDate();
                // eslint-disable-next-line , no-null/no-null
                return returnDate.getTime() < currentDate.getTime() ? { invalidCurrentDate: true } : null;
            };
        }
        CardsTravelNoticeCreateComponent.prototype.next = function (nextForm) {
            if (this.currentForm) {
                this.currentForm.markAllAsTouched();
                this.currentForm.updateValueAndValidity();
                if (this.currentStep === 2) {
                    this.displayAlert = this.currentForm.invalid;
                }
                if (this.currentForm.valid) {
                    this.currentStep += 1;
                    this.currentForm = nextForm;
                }
            }
        };
        CardsTravelNoticeCreateComponent.prototype.back = function (prevForm) {
            this.currentStep -= 1;
            this.currentForm = prevForm;
        };
        CardsTravelNoticeCreateComponent.prototype.onCancel = function () {
            this.dialogOpen = true;
        };
        CardsTravelNoticeCreateComponent.prototype.onSubmitTravelNotice = function () {
            this.save.emit(this.travelNoticeItem);
        };
        CardsTravelNoticeCreateComponent.prototype.isFieldValid = function (fieldName) {
            var control = this.detailsGroup.get(fieldName);
            return !!control && (control.valid || control.untouched);
        };
        CardsTravelNoticeCreateComponent.prototype.onAlertDismiss = function () {
            this.displayAlert = false;
        };
        CardsTravelNoticeCreateComponent.prototype.ngOnInit = function () {
            if (!this.paymentCards)
                return;
            this.createTravelNoticeForm = this.fb.group({
                details: this.fb.group({
                    destinations: [
                        [],
                        function (control) {
                            // eslint-disable-next-line , no-null/no-null
                            return control.value && control.value.length > 0 ? null : { required: 'item required' };
                        },
                    ],
                    departureDate: [''],
                    arrivalDate: [''],
                    contactNumber: ['', i1$2.Validators.pattern('^[0-9()-+ ]*$')],
                }),
                cardIds: [this.paymentCards ? this.paymentCards : []],
            });
            this.createTravelNoticeForm.markAsPristine();
            this.travelNoticeSubscription = this.createTravelNoticeForm.valueChanges.subscribe(this.updateTravelNoticeValue);
            this.currentForm = this.detailsGroup;
            this.cardIdsGroup.setValidators(this.hasCardsSelected);
            this.addDateValidators();
        };
        /**
         *
         * temporary solution once datepicker is ready to validate ranges is release this method will be removed
         */
        CardsTravelNoticeCreateComponent.prototype.addDateValidators = function () {
            var _this = this;
            if (!!this.createTravelNoticeForm && this.departureDate && this.arrivalDate) {
                this.departureDate.setValidators([i1$2.Validators.required, this.dateValidator('arrivalDate', 'departureDate')]);
                this.arrivalDate.setValidators([
                    i1$2.Validators.required,
                    this.currentDateValidator,
                    this.dateValidator('arrivalDate', 'departureDate'),
                ]);
                this.departureDateSubscription = this.departureDate.valueChanges.subscribe(function () {
                    _this.arrivalDate.updateValueAndValidity({ emitEvent: false });
                });
                this.arrivalDateSubcription = this.arrivalDate.valueChanges.subscribe(function () {
                    _this.departureDate.updateValueAndValidity({ emitEvent: false });
                });
            }
        };
        CardsTravelNoticeCreateComponent.prototype.ngOnDestroy = function () {
            if (this.travelNoticeSubscription) {
                this.travelNoticeSubscription.unsubscribe();
            }
            if (this.arrivalDateSubcription) {
                this.arrivalDateSubcription.unsubscribe();
            }
            if (this.departureDateSubscription) {
                this.departureDateSubscription.unsubscribe();
            }
        };
        /**
         *
         * temporary solution once datepicker is ready to validate ranges is release this method will be removed
         */
        CardsTravelNoticeCreateComponent.prototype.dateValidator = function (fieldName1, fieldName2) {
            var _this = this;
            return function () {
                var formControl1 = _this.detailsGroup.get(fieldName1);
                var formControl2 = _this.detailsGroup.get(fieldName2);
                var date1 = new Date(formControl1.value).getTime();
                var date2 = new Date(formControl2.value).getTime();
                // eslint-disable-next-line , no-null/no-null
                return date1 < date2 ? { invalidDate: true } : null;
            };
        };
        CardsTravelNoticeCreateComponent.prototype.truncateDate = function (date) {
            if (date === void 0) { date = new Date(); }
            var newDate = new Date(date);
            newDate.setHours(0, 0, 0, 0);
            return newDate;
        };
        CardsTravelNoticeCreateComponent.prototype.hasCardsSelected = function (control) {
            var cards = control.value;
            // eslint-disable-next-line no-null/no-null
            return cards.length === 0 ? { empty: true } : null;
        };
        Object.defineProperty(CardsTravelNoticeCreateComponent.prototype, "detailsGroup", {
            get: function () {
                return this.createTravelNoticeForm.get('details');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CardsTravelNoticeCreateComponent.prototype, "cardIdsGroup", {
            get: function () {
                return this.createTravelNoticeForm.get('cardIds');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CardsTravelNoticeCreateComponent.prototype, "destinations", {
            get: function () {
                return this.detailsGroup.get('destinations');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CardsTravelNoticeCreateComponent.prototype, "arrivalDate", {
            get: function () {
                return this.detailsGroup.get('arrivalDate');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CardsTravelNoticeCreateComponent.prototype, "departureDate", {
            get: function () {
                return this.detailsGroup.get('departureDate');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CardsTravelNoticeCreateComponent.prototype, "contactNumber", {
            get: function () {
                return this.detailsGroup.get('contactNumber');
            },
            enumerable: false,
            configurable: true
        });
        return CardsTravelNoticeCreateComponent;
    }());
    CardsTravelNoticeCreateComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeCreateComponent, deps: [{ token: i1__namespace$2.FormBuilder }, { token: i2__namespace$1.DatePipe }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CardsTravelNoticeCreateComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeCreateComponent, selector: "bb-cards-travel-notice-create", inputs: { paymentCards: "paymentCards", destinationList: "destinationList" }, outputs: { abortCreation: "abortCreation", save: "save" }, providers: [i2$2.DatePipe], ngImport: i0__namespace, template: "<ng-container bbTravelNoticeCreateCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTravelNoticeCreateCustomizable let-hostRef>\n  <h1 class=\"bb-block bb-block--lg\" i18n=\"Create travel notice header@@cards.create.travel.notice.header\">\n    Create travel notice\n  </h1>\n  <div class=\"card card-lg bb-create-travel-notice\">\n    <div class=\"card-body\">\n      <ng-container bbTravelNoticeStepperCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n      <form [formGroup]=\"hostRef.createTravelNoticeForm\" (ngSubmit)=\"hostRef.onSubmitTravelNotice()\">\n        <ng-container bbTravelNoticeDetailsStepCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n        <ng-container bbTravelNoticeSelectCardsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n        <ng-container bbTravelNoticeConfirmStepCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n      </form>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template bbTravelNoticeStepperCustomizable let-hostRef>\n  <div class=\"bb-block bb-block--lg\">\n    <div class=\"row bb-stack--center\">\n      <bb-stepper-ui class= \"col-12 col-md-10 col-lg-8\">\n        <bb-stepper-step-ui \n          label=\"Travel details\"\n          i18n-label=\"Travel details@@cards.create.travel.notice.stepper.header.step1\"\n          [isChecked]=\"hostRef.currentStep > 1\"\n          [isActive]=\"hostRef.currentStep >= 1\"\n          ariaLabel=\"Step 1 out of 3\"\n          i18n-ariaLabel=\"Step 1 out of 3@@cards.create.travel.notice.stepper.aria.label.step1\"\n        >\n        </bb-stepper-step-ui>\n        <bb-stepper-step-ui \n          class=\"bb-stack__item\" \n          label=\"Card selection\"\n          i18n-label=\"Card selection@@cards.create.travel.notice.stepper.header.step2\"\n          [isChecked]=\"hostRef.currentStep > 2\"\n          [isActive]=\"hostRef.currentStep >= 2\" \n          ariaLabel=\"Step 2 out of 3\"\n          i18n-ariaLabel=\"Step 2 out of 3@@cards.create.travel.notice.stepper.aria.label.step2\"\n        >\n        </bb-stepper-step-ui>\n        <bb-stepper-step-ui \n          class=\"bb-stack__item\" \n          label=\"Confirmation\" \n          i18n-label=\"Confirmation@@cards.create.travel.notice.stepper.header.step3\"\n          [isActive]=\"hostRef.currentStep >= 3\" \n          ariaLabel=\"Step 3 out of 3\"\n          i18n-ariaLabel=\"Step 3 out of 3@@cards.create.travel.notice.stepper.aria.label.step3\"\n        >\n        </bb-stepper-step-ui>\n      </bb-stepper-ui>\n    </div>\n  </div>\n  <!-- cancel travel notice modal -->\n  <bb-modal-ui [isOpen]=\"hostRef.dialogOpen\" (cancel)=\"hostRef.closeConfirmationDialog()\">\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <h2 i18n=\"Cancel Travel Notice@@cards.create.travel.notice.cancelTravelNotice.modal.header\">\n          Discard travel notice?\n        </h2>\n        <div>\n          <button bbButton color=\"unstyled\" (click)=\"hostRef.closeConfirmationDialog()\">\n            <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n          </button>\n        </div>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span i18n=\"Delete confirmation text@@cards.create.travel.notice.cancelTravelNotice.modal.body\">\n          All entered information for this travel notice will be permanently lost.\n        </span>\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui #footerRef>\n      <ng-template bbCustomModalFooter>\n        <button bbButton (click)=\"hostRef.closeConfirmationDialog()\" color=\"link\">\n          <span i18n=\"Submit button text@@messages.createMessage.composeMessageModal.keepCreating.button\">\n            Keep it\n          </span>\n        </button>\n        <button bbButton (click)=\"hostRef.confirmCancel()\" color=\"danger\">\n          <span i18n=\"Discard button text@@messages.createMessage.composeMessageModal.discardButton\">\n            Discard travel notice\n          </span>\n        </button>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n  <!-- end of modal -->\n</ng-template>\n\n<ng-template bbTravelNoticeDetailsStepCustomizable let-hostRef>\n  <form [formGroup]=\"hostRef.detailsGroup\">\n    <div [hidden]=\"hostRef.currentStep !== 1\">\n      <h2 \n        class=\"bb-block bb-block--xl\"\n        i18n=\"Create travel notice details form header@@cards.create.travel.notice.details.form.header\"\n      >\n        Tell us about your travel details\n      </h2>\n      <div class=\"bb-block bb-block--xl\">\n        <!-- Destinations input -->\n        <div class=\"bb-block bb-block--lg\">\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <div class=\"bb-create-travel-notice__country-selector\">\n                <label i18n=\"Travel notice destinations input@@cards.create.travel.notice.details.form.destinations.input\">\n                  Destination(s)\n                </label>\n                <bb-cards-travel-notice-country-selector\n                  [destinationList]=\"hostRef.destinationList\"\n                  formControlName=\"destinations\"\n                ></bb-cards-travel-notice-country-selector>\n              </div>\n            </div>\n          </div>\n          <bb-input-validation-message-ui [showErrors]=\"!hostRef.isFieldValid('destinations')\">\n            <span \n              i18n=\"Travel notice no destinations validation@@cards.create.travel.notice.required.destinations.error.msg\"\n              *ngIf=\"hostRef.destinations.hasError('required')\"\n            >\n              Please select one or more destinations\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n        <!-- end of input -->\n        <div class=\"row\">\n          <!-- Departure date input -->\n          <div class=\"col-md-6 bb-block bb-block--lg\">\n            <bb-input-datepicker-ui \n              placeholder=\"MM/DD/YYYY\"\n              i18n-placeholder=\"Departure date input placeholder@@cards.create.travel.notice.form.departure.input.placeholder\" \n              label=\"Departure date\"\n              i18n-label=\"Departure date@@cards.create.travel.notice.form.departure.label\" \n              name=\"departureDate\"\n              formControlName=\"departureDate\"\n              [overrideDateFormat]=\"'longDate'\"\n            >\n            </bb-input-datepicker-ui>\n            <bb-input-validation-message-ui [showErrors]=\"!hostRef.isFieldValid('departureDate')\">\n\n              <ng-container *ngFor=\"let error of hostRef.departureDate.errors | keyvalue; last as last\">\n                <ng-container *ngIf=\"last\" [ngSwitch]=\"error.key\">\n                  <span\n                    *ngSwitchCase=\"'required'\"\n                    i18n=\"Missing departure date|Missing leaving date|Missing initial Date@@cards.create.travel.notice.required.departureDate.error.msg\"\n                  >\n                    Please choose a departure date\n                  </span>\n                  <span \n                    *ngSwitchCase=\"'invalidDate'\"\n                    i18n=\"Invalid departure date|Arrival date is before departure@@cards.create.travel.notice.invalid.returnDateConflict.error.msg\"\n                  >\n                    The return date cannot be before the departure date\n                  </span>\n                  <span \n                    *ngSwitchCase=\"'invalidDateFormat'\"\n                    i18n=\"Invalid departure date|Invalid date format@@cards.create.travel.notice.invalid.arrivalDate.hasInvalidFormat.error.msg\"\n                  >\n                    Please enter a valid format. For example, 10/08/2020\n                  </span>\n                </ng-container>\n              </ng-container>\n\n            </bb-input-validation-message-ui>\n          </div>\n          <!-- end of input -->\n          <!-- Return date input -->\n          <div class=\"col-md-6 bb-block bb-block--lg\">\n            <bb-input-datepicker-ui \n              placeholder=\"MM/DD/YYYY\"\n              i18n-placeholder=\"Arrival date input placeholder@@cards.create.travel.notice.form.arrival.input.placeholder\" \n              label=\"Return date\"\n              i18n-label=\"Return date@@cards.create.travel.notice.form.arrival.label\" \n              name=\"arrivalDate\"\n              formControlName=\"arrivalDate\"\n              [overrideDateFormat]=\"'longDate'\"\n            >\n            </bb-input-datepicker-ui>\n            <bb-input-validation-message-ui [showErrors]=\"!hostRef.isFieldValid('arrivalDate')\">\n\n              <ng-container *ngFor=\"let error of hostRef.arrivalDate.errors | keyvalue; last as last\">\n                <ng-container *ngIf=\"last\" [ngSwitch]=\"error.key\">\n                  <span \n                    *ngSwitchCase=\"'required'\"\n                    i18n=\"Missing arrival date|Missing coming date|Missing last Date@@cards.create.travel.notice.required.departureDate.error.msg\"\n                  >\n                    Please choose a return date\n                  </span>\n                  <span \n                    *ngSwitchCase=\"'invalidDate'\"\n                    i18n=\"Invalid arrival date|Arrival date is before departure@@cards.create.travel.notice.invalid.returnDateConflict.error.msg\"\n                  >\n                    The return date cannot be before the departure date\n                  </span>\n                  <span \n                    *ngSwitchCase=\"'invalidCurrentDate'\"\n                    i18n=\"Invalid departure date|Arrival date is before current date@@cards.create.travel.notice.invalid.arrivalDate.hasCurrentDate.error.msg\"\n                  >\n                    Please do not choose a past return date\n                  </span>\n                  <span \n                    *ngSwitchCase=\"'invalidDateFormat'\"\n                    i18n=\"Invalid arrival date|Invalid date format@@cards.create.travel.notice.invalid.arrivalDate.hasInvalidFormat.error.msg\"\n                  >\n                    Please enter a valid format. For example, 10/08/2020\n                  </span>\n                </ng-container>\n              </ng-container>\n            </bb-input-validation-message-ui>\n          </div>\n          <!-- end of input -->\n        </div>\n        <!-- Contact number input -->\n        <div class=\"bb-block\">\n          <label>\n            <strong i18n=\"Contact Number@@cards.create.travel.notice.details.form.contactNumber.input\">\n              Contact number\n            </strong>\n          </label>\n          <span class=\"bb-text-support\" i18n=\"Optional@@cards.create.travel.notice.details.form.contactNumber.optional\">\n            (Optional)\n          </span>\n          <div class=\"bb-block\" [ngClass]=\"{'bb-block--sm': hostRef.isFieldValid('contactNumber')}\">\n            <div class=\"row\">\n              <div class=\"col-md-6\">\n                <div class=\"bb-create-travel-notice__contact-number\">\n                  <bb-input-phone-ui \n                    formControlName=\"contactNumber\"\n                    placeholder=\"e.g. +(1) 541 754 3010\"\n                    i18n-placeholder=\"Example placeholder, e.g. +(1) 541 754 3010@@cards.create.travel.notice.details.form.contactNumber.placeholder\"\n                  >\n                  </bb-input-phone-ui>\n                  <bb-input-validation-message-ui [showErrors]=\"!hostRef.isFieldValid('contactNumber')\">\n                    <div class=\"bb-block bb-block--sm\">\n                      <span i18n=\"Invalid contact number@@cards.create.travel.notice.details.form.contactNumber.error.pattern\">\n                        Invalid contact number\n                      </span>\n                    </div>\n                  </bb-input-validation-message-ui>\n                </div>\n              </div>\n            </div>\n          </div>\n          <span\n            class=\"bb-create-travel-notice__disclaimer\"\n            i18n=\"Contact phone number description@@cards.create.travel.notice.details.form.contactNumber.description\"\n          >\n            We will reach you on this number in case of any suspicious activity.\n          </span>\n        </div>\n      </div>\n      <!-- end of input -->\n      <div class=\"bb-button-bar\">\n        <button \n          class=\"bb-button-bar__button\" \n          bbButton\n          i18n=\"Continue Button text@@cards.create.travel.notice.details.form.continue.button\"\n          (click)=\"hostRef.next(hostRef.cardIdsGroup)\"\n        >\n          Continue\n        </button>\n        <button \n          class=\"bb-button-bar__button bb-button-bar__button--across\" \n          bbButton \n          color=\"link\"\n          i18n=\"Cancel button text@@cards.create.travel.notice.details.form.cancel.button\"\n          (click)=\"hostRef.onCancel()\"\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  </form>\n</ng-template>\n\n<ng-template bbTravelNoticeSelectCardsCustomizable let-hostRef>\n  <div [hidden]=\"hostRef.currentStep !== 2\">\n    <h2 \n      class=\"bb-block bb-block--xl\"\n      i18n=\"Create travel notice select cards header@@cards.create.travel.notice.selectCards.header\"\n    >\n      Select the cards you are travelling with\n    </h2>\n    <bb-alert-ui *ngIf=\"hostRef.displayAlert\"\n      title=\"You need to select at least one card in order to create a travel notice\"\n      i18n-title=\"You need to select at least one card in order to create a travel notice|Pick one@@cards.create.travel.notice.selectCards.alert\"\n      [dismissible]=\"true\"\n      (close)=\"hostRef.onAlertDismiss()\"\n    ></bb-alert-ui>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-cards-travel-notice-checkbox-cards [paymentCards]=\"hostRef.paymentCards\" [formControl]=\"hostRef.cardIdsGroup\"></bb-cards-travel-notice-checkbox-cards>\n    </div>\n    <div class=\"bb-button-bar\">\n      <button\n        class=\"bb-button-bar__button\" \n        bbButton\n        i18n=\"Continue Button text@@cards.create.travel.notice.selectCards.step.continue.button\"\n        (click)=\"hostRef.next()\"\n      >\n        Continue\n      </button>\n      <button  \n        class=\"bb-button-bar__button\" \n        bbButton color=\"secondary\"\n        i18n=\"Back button text@@cards.create.travel.notice.selectCards.step.back.button\"\n        (click)=\"hostRef.back(hostRef.detailsGroup)\"\n      >\n        Back\n      </button>\n      <div \n        class=\"bb-button-bar__button bb-text-support bb-create-travel-notice__cards-count bb-create-travel-notice__cards-count--xs-top\"\n        *ngIf=\"hostRef.cardIdsGroup.value.length !== 0\"\n      >\n        {{hostRef.cardIdsGroup.value.length}} of {{hostRef.paymentCards.length}} selected\n      </div>\n      <div class=\"bb-button-bar__button bb-button-bar__button--across\">\n        <button \n          bbButton\n          color=\"link\"\n          i18n=\"Cancel button text@@cards.create.travel.notice.selectCards.step.cancel.button\"\n          (click)=\"hostRef.onCancel()\"\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template bbTravelNoticeConfirmStepCustomizable let-hostRef>\n  <div *ngIf=\"hostRef.currentStep === 3\">\n    <h2   \n      class=\"bb-block bb-block--xl\"\n      i18n=\"Create travel notice confirmation step header@@cards.create.travel.notice.confirm.step.header\"\n    >\n      Review your travel notice\n    </h2>\n    <div class=\"bb-block bb-block--xl\">\n      <bb-cards-travel-notice-confirm-step\n        [travelNoticeItem]=\"hostRef.travelNoticeItem\"\n        [selectedCards]=\"hostRef.cardIdsGroup?.value\"\n        [destinationList]=\"hostRef.destinationList\"\n      ></bb-cards-travel-notice-confirm-step>\n    </div>\n    <div class=\"bb-button-bar\">\n      <button  \n        class=\"bb-button-bar__button\" \n        bbButton \n        type=\"submit\"\n        i18n=\"Confirm button text@@cards.create.travel.notice.confirmation.step.confirm.button\"\n      >\n        Confirm\n      </button>\n      <button \n        class=\"bb-button-bar__button\" \n        bbButton \n        color=\"secondary\"\n        i18n=\"Back button text@@cards.create.travel.notice.confirmation.step.back.button\"\n        (click)=\"hostRef.back(hostRef.cardIdsGroup)\"\n      >\n        Back\n      </button>\n      <button\n        class=\"bb-button-bar__button bb-button-bar__button--across\" \n        bbButton \n        color=\"link\"\n        i18n=\"Cancel button text@@cards.create.travel.notice.confirmation.step.cancel.button\"\n        (click)=\"hostRef.onCancel()\"\n      >\n        Cancel\n      </button>\n    </div>\n  </div>\n</ng-template>", components: [{ type: i0__namespace.forwardRef(function () { return i3__namespace.StepperComponent; }), selector: "bb-stepper-ui", outputs: ["select"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace.StepperStepComponent; }), selector: "bb-stepper-step-ui", inputs: ["label", "stateLabel", "data", "ariaLabel", "isCurrent", "isChecked", "isActive"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0__namespace.forwardRef(function () { return i5__namespace.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0__namespace.forwardRef(function () { return CardsTravelNoticeCountrySelectorComponent; }), selector: "bb-cards-travel-notice-country-selector", inputs: ["destinationList"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace$1.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.InputPhoneComponent; }), selector: "bb-input-phone-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "ariaLabel", "autocomplete", "countryList", "dropdownPosition", "clearable", "searchable", "defaultCountryIsoCode", "enableCountryCode"] }, { type: i0__namespace.forwardRef(function () { return i10__namespace.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return CardsTravelNoticeCheckboxCardsComponent; }), selector: "bb-cards-travel-notice-checkbox-cards", inputs: ["paymentCards"] }, { type: i0__namespace.forwardRef(function () { return CardsTravelNoticeConfirmStepComponent; }), selector: "bb-cards-travel-notice-confirm-step", inputs: ["travelNoticeItem", "selectedCards", "destinationList"] }], directives: [{ type: i0__namespace.forwardRef(function () { return TravelNoticeCreateCustomizableDirective; }), selector: "[bbTravelNoticeCreateCustomizable]" }, { type: i0__namespace.forwardRef(function () { return TravelNoticeStepperCustomizableDirective; }), selector: "[bbTravelNoticeStepperCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return TravelNoticeDetailsStepCustomizableDirective; }), selector: "[bbTravelNoticeDetailsStepCustomizable]" }, { type: i0__namespace.forwardRef(function () { return TravelNoticeSelectCardsCustomizableDirective; }), selector: "[bbTravelNoticeSelectCardsCustomizable]" }, { type: i0__namespace.forwardRef(function () { return TravelNoticeConfirmStepCustomizableDirective; }), selector: "[bbTravelNoticeConfirmStepCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i5__namespace.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0__namespace.forwardRef(function () { return i7__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0__namespace.forwardRef(function () { return i5__namespace.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], pipes: { "keyvalue": i0__namespace.forwardRef(function () { return i2__namespace$1.KeyValuePipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeCreateComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-cards-travel-notice-create',
                        templateUrl: './cards-travel-notice-create.component.html',
                        providers: [i2$2.DatePipe],
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.FormBuilder }, { type: i2__namespace$1.DatePipe }]; }, propDecorators: { paymentCards: [{
                    type: i0.Input
                }], destinationList: [{
                    type: i0.Input
                }], abortCreation: [{
                    type: i0.Output
                }], save: [{
                    type: i0.Output
                }] } });
    var TravelNoticeCreateCustomizableDirective = /** @class */ (function (_super) {
        __extends(TravelNoticeCreateCustomizableDirective, _super);
        function TravelNoticeCreateCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TravelNoticeCreateCustomizableDirective;
    }(i1$1.BbTemplate));
    TravelNoticeCreateCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeCreateCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TravelNoticeCreateCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeCreateCustomizableDirective, selector: "[bbTravelNoticeCreateCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeCreateCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTravelNoticeCreateCustomizable]',
                    }]
            }] });
    var TravelNoticeDetailsStepCustomizableDirective = /** @class */ (function (_super) {
        __extends(TravelNoticeDetailsStepCustomizableDirective, _super);
        function TravelNoticeDetailsStepCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TravelNoticeDetailsStepCustomizableDirective;
    }(i1$1.BbTemplate));
    TravelNoticeDetailsStepCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeDetailsStepCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TravelNoticeDetailsStepCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeDetailsStepCustomizableDirective, selector: "[bbTravelNoticeDetailsStepCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeDetailsStepCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTravelNoticeDetailsStepCustomizable]',
                    }]
            }] });
    var TravelNoticeSelectCardsCustomizableDirective = /** @class */ (function (_super) {
        __extends(TravelNoticeSelectCardsCustomizableDirective, _super);
        function TravelNoticeSelectCardsCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TravelNoticeSelectCardsCustomizableDirective;
    }(i1$1.BbTemplate));
    TravelNoticeSelectCardsCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeSelectCardsCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TravelNoticeSelectCardsCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeSelectCardsCustomizableDirective, selector: "[bbTravelNoticeSelectCardsCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeSelectCardsCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTravelNoticeSelectCardsCustomizable]',
                    }]
            }] });
    var TravelNoticeConfirmStepCustomizableDirective = /** @class */ (function (_super) {
        __extends(TravelNoticeConfirmStepCustomizableDirective, _super);
        function TravelNoticeConfirmStepCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TravelNoticeConfirmStepCustomizableDirective;
    }(i1$1.BbTemplate));
    TravelNoticeConfirmStepCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeConfirmStepCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TravelNoticeConfirmStepCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeConfirmStepCustomizableDirective, selector: "[bbTravelNoticeConfirmStepCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeConfirmStepCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTravelNoticeConfirmStepCustomizable]',
                    }]
            }] });
    var TravelNoticeStepperCustomizableDirective = /** @class */ (function (_super) {
        __extends(TravelNoticeStepperCustomizableDirective, _super);
        function TravelNoticeStepperCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TravelNoticeStepperCustomizableDirective;
    }(i1$1.BbTemplate));
    TravelNoticeStepperCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeStepperCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TravelNoticeStepperCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeStepperCustomizableDirective, selector: "[bbTravelNoticeStepperCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeStepperCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTravelNoticeStepperCustomizable]',
                    }]
            }] });

    var CardsTravelNoticeContainerComponent = /** @class */ (function () {
        function CardsTravelNoticeContainerComponent() {
            this.hostRef = this;
            /**
             * Empty state image url.
             */
            this.imageUrl = '';
            /**
             * EventEmitter for triggering post event.
             */
            this.createTravelNotice = new i0.EventEmitter();
            /**
             * EventEmitter for triggering delete event.
             */
            this.remove = new i0.EventEmitter();
            this.page = 'list';
        }
        Object.defineProperty(CardsTravelNoticeContainerComponent.prototype, "hasItems", {
            get: function () {
                return this.travelNoticeList && this.travelNoticeList.length > 0;
            },
            enumerable: false,
            configurable: true
        });
        CardsTravelNoticeContainerComponent.prototype.saveTravelNotice = function (travelNoticeItem) {
            this.createTravelNotice.emit(travelNoticeItem);
            this.page = 'list';
        };
        CardsTravelNoticeContainerComponent.prototype.setPage = function (operation) {
            this.page = operation.goToPage;
        };
        CardsTravelNoticeContainerComponent.prototype.onRemove = function (travelNoticeItem) {
            this.remove.emit(travelNoticeItem);
        };
        return CardsTravelNoticeContainerComponent;
    }());
    CardsTravelNoticeContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeContainerComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    CardsTravelNoticeContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeContainerComponent, selector: "bb-cards-travel-notice-container", inputs: { imageUrl: "imageUrl", travelNoticeList: "travelNoticeList", destinationList: "destinationList", paymentCards: "paymentCards" }, outputs: { createTravelNotice: "createTravelNotice", remove: "remove" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"page === 'list'\">\n  <ng-container *ngIf=\"hasItems; else emptyState\">\n    <bb-cards-travel-notice-list\n      [travelNoticeList]=\"travelNoticeList\"\n      (create)=\"setPage($event)\"\n      (deleteListItem)=\"onRemove($event)\"\n      [destinationList]=\"destinationList\"\n    >\n    </bb-cards-travel-notice-list>\n  </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"page === 'create'\">\n  <bb-cards-travel-notice-create\n    [paymentCards]=\"paymentCards\"\n    [destinationList]=\"destinationList\"\n    (abortCreation)=\"setPage($event)\"\n    (save)=\"saveTravelNotice($event)\"\n  ></bb-cards-travel-notice-create>\n</ng-container>\n\n<ng-template bbTravelNoticeEmptyStateContainerCustomizable let-hostRef>\n  <div class=\"bb-travel-notice-empty-state card\">\n    <div class=\"card-body bb-text-align-center\">\n      <div class=\"bb-block bb-block--xl\">\n        <img class=\"img-fluid\" *ngIf=\"hostRef.imageUrl !== ''\" [src]=\"hostRef.imageUrl\" alt=\"empty state background\"/>\n      </div>\n      <h2 class=\"bb-block bb-block--md\" i18n=\"travel notice empty state header@@cards.travel.notice.empty.state.header\">\n        Setup your travel notice\n      </h2>\n      <div class=\"row\">\n        <div class=\"col-md-8 offset-md-2\">\n          <div class=\"bb-block bb-block--lg\">\n            <p \n              class=\"bb-travel-notice-empty-state__message\"\n              i18n=\"travel notice empty state description@@cards.travel.notice.empty.state.description\"\n            >\n              A travel notice alerts us that you\u2019re planning to use your cards abroad and it helps avoid interpreting any\n              unusual activity as potential fraud.\n            </p>\n          </div>\n        </div>\n      </div>\n     \n      <div>\n        <button bbButton color=\"primary\" (click)=\"hostRef.setPage({goToPage: 'create'})\">\n          <bb-icon-ui name=\"add\"></bb-icon-ui> \n          <span i18n=\"Create new travel notice button@@cards.travel.notice.createNew.button\">Create new</span>\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #emptyState>\n  <ng-container bbTravelNoticeEmptyStateContainerCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</ng-template>", components: [{ type: i0__namespace.forwardRef(function () { return CardsTravelNoticeListComponent; }), selector: "bb-cards-travel-notice-list", inputs: ["travelNoticeList", "destinationList"], outputs: ["create", "deleteListItem"] }, { type: i0__namespace.forwardRef(function () { return CardsTravelNoticeCreateComponent; }), selector: "bb-cards-travel-notice-create", inputs: ["paymentCards", "destinationList"], outputs: ["abortCreation", "save"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return TravelNoticeEmptyStateContainerCustomizableDirective; }), selector: "[bbTravelNoticeEmptyStateContainerCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i7__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-cards-travel-notice-container',
                        templateUrl: './cards-travel-notice-container.component.html',
                    }]
            }], propDecorators: { imageUrl: [{
                    type: i0.Input
                }], travelNoticeList: [{
                    type: i0.Input
                }], destinationList: [{
                    type: i0.Input
                }], paymentCards: [{
                    type: i0.Input
                }], createTravelNotice: [{
                    type: i0.Output
                }], remove: [{
                    type: i0.Output
                }] } });
    var TravelNoticeEmptyStateContainerCustomizableDirective = /** @class */ (function (_super) {
        __extends(TravelNoticeEmptyStateContainerCustomizableDirective, _super);
        function TravelNoticeEmptyStateContainerCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TravelNoticeEmptyStateContainerCustomizableDirective;
    }(i1$1.BbTemplate));
    TravelNoticeEmptyStateContainerCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeEmptyStateContainerCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TravelNoticeEmptyStateContainerCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: TravelNoticeEmptyStateContainerCustomizableDirective, selector: "[bbTravelNoticeEmptyStateContainerCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TravelNoticeEmptyStateContainerCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTravelNoticeEmptyStateContainerCustomizable]',
                    }]
            }] });

    var notificationTtl = 5000;
    var CardsTravelNoticeWidgetComponent = /** @class */ (function () {
        function CardsTravelNoticeWidgetComponent(assetsService, cardsService, notificationService, destinationsService, cd) {
            this.assetsService = assetsService;
            this.cardsService = cardsService;
            this.notificationService = notificationService;
            this.destinationsService = destinationsService;
            this.cd = cd;
            this.isLoading = true;
            this.config = {
                widgetName: 'bb-cards-travel-notice-widget-ang',
                getURIFromAssetID: function (assetId) { return assetId + "-img.svg"; },
            };
            this.resolveAsset = this.assetsService.createAssetsResolver(this.config);
        }
        Object.defineProperty(CardsTravelNoticeWidgetComponent.prototype, "imageEmptyStateUrl", {
            get: function () {
                return this.resolveAsset('travel-notice-empty-state');
            },
            enumerable: false,
            configurable: true
        });
        CardsTravelNoticeWidgetComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.loadTravelNotice();
            this.destinationList =
                this.destinationsService &&
                    this.destinationsService.getDestinations().pipe(operators.catchError(function (error) {
                        _this.error = error;
                        return rxjs.of([]);
                    }));
        };
        CardsTravelNoticeWidgetComponent.prototype.submitTravelNotice = function (travelNoticeItem) {
            var _this = this;
            this.isLoading = true;
            var submitTravelNoticeSuccess = function () {
                if (_this.travelNoticeList) {
                    _this.loadTravelNotice();
                    _this.pushNotification(_this.notificationOnCreate, 'success');
                }
            };
            this.cardsService.postTravelNotice(travelNoticeItem).subscribe(submitTravelNoticeSuccess);
        };
        CardsTravelNoticeWidgetComponent.prototype.onRemoveItem = function (travelNoticeItem) {
            var _this = this;
            this.isLoading = true;
            var deleteTravelNoticeSuccess = function () {
                if (_this.travelNoticeList) {
                    _this.loadTravelNotice();
                    _this.pushNotification(_this.notificationOnDelete, 'success');
                }
            };
            this.cardsService.deleteTravelNotice(travelNoticeItem).subscribe(deleteTravelNoticeSuccess);
        };
        CardsTravelNoticeWidgetComponent.prototype.loadTravelNotice = function () {
            var _this = this;
            this.cardsService
                .getTravelNotice()
                .pipe(operators.catchError(function (error) {
                _this.error = error;
                return rxjs.of({});
            }))
                .subscribe(function (item) {
                _this.travelNoticeList = item.travelNoticeList;
                _this.paymentCards = item.paymentCards;
                _this.isLoading = false;
                _this.cd.detectChanges();
            });
        };
        CardsTravelNoticeWidgetComponent.prototype.pushNotification = function (header, modifier) {
            if (header === void 0) { header = ''; }
            this.notificationService.showNotification({
                header: header,
                message: '',
                modifier: modifier,
                dismissible: true,
                ttl: notificationTtl,
            });
        };
        return CardsTravelNoticeWidgetComponent;
    }());
    CardsTravelNoticeWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeWidgetComponent, deps: [{ token: i1__namespace$3.AssetsService }, { token: i2__namespace$2.CardsService }, { token: i3__namespace$1.NotificationService }, { token: i2.DestinationsServiceConfigToken }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CardsTravelNoticeWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardsTravelNoticeWidgetComponent, selector: "bb-cards-travel-notice-widget", viewQueries: [{ propertyName: "notificationOnCreate", first: true, predicate: ["notificationOnCreate"], descendants: true, read: i0.TemplateRef, static: true }, { propertyName: "notificationOnDelete", first: true, predicate: ["notificationOnDelete"], descendants: true, read: i0.TemplateRef, static: true }], ngImport: i0__namespace, template: "<ng-container *ngIf=\"!error; else errorState\">\n  <ng-container *ngIf=\"!isLoading; else loadingState\">\n    <bb-cards-travel-notice-container\n      [imageUrl]=\"(imageEmptyStateUrl | async) || undefined\"\n      [travelNoticeList]=\"travelNoticeList\"\n      [destinationList]=\"(destinationList | async) || undefined\"\n      [paymentCards]=\"paymentCards\"\n      (createTravelNotice)=\"submitTravelNotice($event)\"\n      (remove)=\"onRemoveItem($event)\"\n    ></bb-cards-travel-notice-container>\n  </ng-container>\n</ng-container>\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #errorState>\n  <bb-empty-state-ui\n    title=\"\"\n    [subtitle]=\"error?.message\"\n    iconModifier=\"error\"\n    iconSize=\"xxl\"\n    iconClasses=\"text-muted\"\n  ></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #notificationOnCreate>\n  <span \n    i18n=\"Message for a notification displayed when a travel notice is created@@cards.create.travel.notice.success.notification\"\n  >\n    Travel notice successfully created!\n  </span>\n</ng-template>\n\n<ng-template #notificationOnDelete>\n  <span \n    i18n=\"Message for a notification displayed when a travel notice is deleted@@cards.delete.travel.notice.success.notification\"\n  >\n    Travel notice successfully deleted!  \n  </span>\n</ng-template>", components: [{ type: CardsTravelNoticeContainerComponent, selector: "bb-cards-travel-notice-container", inputs: ["imageUrl", "travelNoticeList", "destinationList", "paymentCards"], outputs: ["createTravelNotice", "remove"] }, { type: i5__namespace$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i6__namespace.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i2__namespace$1.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-cards-travel-notice-widget',
                        templateUrl: 'cards-travel-notice-widget.component.html',
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$3.AssetsService }, { type: i2__namespace$2.CardsService }, { type: i3__namespace$1.NotificationService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i2.DestinationsServiceConfigToken]
                        }] }, { type: i0__namespace.ChangeDetectorRef }];
        }, propDecorators: { notificationOnCreate: [{
                    type: i0.ViewChild,
                    args: ['notificationOnCreate', { read: i0.TemplateRef, static: true }]
                }], notificationOnDelete: [{
                    type: i0.ViewChild,
                    args: ['notificationOnDelete', { read: i0.TemplateRef, static: true }]
                }] } });

    var components = [
        CardsTravelNoticeWidgetComponent,
        CardsTravelNoticeContainerComponent,
        CardsTravelNoticeListComponent,
        CardsTravelNoticeListItemComponent,
        CardsTravelNoticeCreateComponent,
        CardsTravelNoticeCheckboxCardsComponent,
        CardsTravelNoticeConfirmStepComponent,
        CardsTravelNoticeCountrySelectorComponent,
        CardsTravelNoticeStatusBadgeComponent,
        CardsTravelNoticePaymentCardComponent,
    ];
    var customizables = [
        TravelNoticeEmptyStateContainerCustomizableDirective,
        TravelNoticeListCustomizableDirective,
        TravelNoticeListItemCustomizableDirective,
        TravelNoticeCreateCustomizableDirective,
        TravelNoticeDetailsStepCustomizableDirective,
        TravelNoticeSelectCardsCustomizableDirective,
        TravelNoticeConfirmStepCustomizableDirective,
        TravelNoticeStepperCustomizableDirective,
    ];
    var modules = [
        i7.ButtonModule,
        i2$1.BadgeModule,
        i1.IconModule,
        collapsible.CollapsibleModule,
        i5$1.LoadingIndicatorModule,
        i2$3.PaymentCardModule,
        i3.StepperModule,
        i8$1.InputDatepickerModule,
        checkboxGroup.CheckboxGroupModule,
        i2$4.InputCheckboxModule,
        i7$1.InputValidationMessageModule,
        i5.ModalModule,
        inputText.InputTextModule,
        i9.InputPhoneModule,
        dropdownMultiSelect.DropdownMultiSelectModule,
        i10.AlertModule,
        i3$1.NotificationModule,
        i8.NgbCollapseModule,
        i2.CardsCommonModule,
    ];
    var CardsTravelNoticeModule = /** @class */ (function () {
        function CardsTravelNoticeModule() {
        }
        return CardsTravelNoticeModule;
    }());
    CardsTravelNoticeModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CardsTravelNoticeModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeModule, declarations: [CardsTravelNoticeWidgetComponent,
            CardsTravelNoticeContainerComponent,
            CardsTravelNoticeListComponent,
            CardsTravelNoticeListItemComponent,
            CardsTravelNoticeCreateComponent,
            CardsTravelNoticeCheckboxCardsComponent,
            CardsTravelNoticeConfirmStepComponent,
            CardsTravelNoticeCountrySelectorComponent,
            CardsTravelNoticeStatusBadgeComponent,
            CardsTravelNoticePaymentCardComponent, TravelNoticeEmptyStateContainerCustomizableDirective,
            TravelNoticeListCustomizableDirective,
            TravelNoticeListItemCustomizableDirective,
            TravelNoticeCreateCustomizableDirective,
            TravelNoticeDetailsStepCustomizableDirective,
            TravelNoticeSelectCardsCustomizableDirective,
            TravelNoticeConfirmStepCustomizableDirective,
            TravelNoticeStepperCustomizableDirective], imports: [i2$2.CommonModule, i1__namespace$3.BackbaseCoreModule, i7.ButtonModule,
            i2$1.BadgeModule,
            i1.IconModule,
            collapsible.CollapsibleModule,
            i5$1.LoadingIndicatorModule,
            i2$3.PaymentCardModule,
            i3.StepperModule,
            i8$1.InputDatepickerModule,
            checkboxGroup.CheckboxGroupModule,
            i2$4.InputCheckboxModule,
            i7$1.InputValidationMessageModule,
            i5.ModalModule,
            inputText.InputTextModule,
            i9.InputPhoneModule,
            dropdownMultiSelect.DropdownMultiSelectModule,
            i10.AlertModule,
            i3$1.NotificationModule,
            i8.NgbCollapseModule,
            i2.CardsCommonModule, i1$2.ReactiveFormsModule,
            i1$2.FormsModule,
            i1$3.NgSelectModule], exports: [i7.ButtonModule,
            i2$1.BadgeModule,
            i1.IconModule,
            collapsible.CollapsibleModule,
            i5$1.LoadingIndicatorModule,
            i2$3.PaymentCardModule,
            i3.StepperModule,
            i8$1.InputDatepickerModule,
            checkboxGroup.CheckboxGroupModule,
            i2$4.InputCheckboxModule,
            i7$1.InputValidationMessageModule,
            i5.ModalModule,
            inputText.InputTextModule,
            i9.InputPhoneModule,
            dropdownMultiSelect.DropdownMultiSelectModule,
            i10.AlertModule,
            i3$1.NotificationModule,
            i8.NgbCollapseModule,
            i2.CardsCommonModule, CardsTravelNoticeWidgetComponent,
            CardsTravelNoticeContainerComponent,
            CardsTravelNoticeListComponent,
            CardsTravelNoticeListItemComponent,
            CardsTravelNoticeCreateComponent,
            CardsTravelNoticeCheckboxCardsComponent,
            CardsTravelNoticeConfirmStepComponent,
            CardsTravelNoticeCountrySelectorComponent,
            CardsTravelNoticeStatusBadgeComponent,
            CardsTravelNoticePaymentCardComponent, TravelNoticeEmptyStateContainerCustomizableDirective,
            TravelNoticeListCustomizableDirective,
            TravelNoticeListItemCustomizableDirective,
            TravelNoticeCreateCustomizableDirective,
            TravelNoticeDetailsStepCustomizableDirective,
            TravelNoticeSelectCardsCustomizableDirective,
            TravelNoticeConfirmStepCustomizableDirective,
            TravelNoticeStepperCustomizableDirective] });
    CardsTravelNoticeModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeModule, providers: [
            { provide: i2.DestinationsServiceConfigToken, useClass: i2.DefaultDestionsService },
            TravelNoticeDatesHelperService,
        ], imports: [__spreadArray(__spreadArray([
                i2$2.CommonModule,
                i1$1.BackbaseCoreModule.withConfig({
                    classMap: { CardsTravelNoticeWidgetComponent: CardsTravelNoticeWidgetComponent },
                })
            ], __read(modules)), [
                i1$2.ReactiveFormsModule,
                i1$2.FormsModule,
                i1$3.NgSelectModule,
            ]), i7.ButtonModule,
            i2$1.BadgeModule,
            i1.IconModule,
            collapsible.CollapsibleModule,
            i5$1.LoadingIndicatorModule,
            i2$3.PaymentCardModule,
            i3.StepperModule,
            i8$1.InputDatepickerModule,
            checkboxGroup.CheckboxGroupModule,
            i2$4.InputCheckboxModule,
            i7$1.InputValidationMessageModule,
            i5.ModalModule,
            inputText.InputTextModule,
            i9.InputPhoneModule,
            dropdownMultiSelect.DropdownMultiSelectModule,
            i10.AlertModule,
            i3$1.NotificationModule,
            i8.NgbCollapseModule,
            i2.CardsCommonModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsTravelNoticeModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray(__spreadArray([], __read(components)), __read(customizables)),
                        imports: __spreadArray(__spreadArray([
                            i2$2.CommonModule,
                            i1$1.BackbaseCoreModule.withConfig({
                                classMap: { CardsTravelNoticeWidgetComponent: CardsTravelNoticeWidgetComponent },
                            })
                        ], __read(modules)), [
                            i1$2.ReactiveFormsModule,
                            i1$2.FormsModule,
                            i1$3.NgSelectModule,
                        ]),
                        providers: [
                            { provide: i2.DestinationsServiceConfigToken, useClass: i2.DefaultDestionsService },
                            TravelNoticeDatesHelperService,
                        ],
                        exports: __spreadArray(__spreadArray(__spreadArray([], __read(modules)), __read(components)), __read(customizables)),
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    Object.defineProperty(exports, 'DestinationsServiceConfigToken', {
        enumerable: true,
        get: function () { return i2.DestinationsServiceConfigToken; }
    });
    exports.CardsTravelNoticeCheckboxCardsComponent = CardsTravelNoticeCheckboxCardsComponent;
    exports.CardsTravelNoticeConfirmStepComponent = CardsTravelNoticeConfirmStepComponent;
    exports.CardsTravelNoticeContainerComponent = CardsTravelNoticeContainerComponent;
    exports.CardsTravelNoticeCountrySelectorComponent = CardsTravelNoticeCountrySelectorComponent;
    exports.CardsTravelNoticeCreateComponent = CardsTravelNoticeCreateComponent;
    exports.CardsTravelNoticeListComponent = CardsTravelNoticeListComponent;
    exports.CardsTravelNoticeListItemComponent = CardsTravelNoticeListItemComponent;
    exports.CardsTravelNoticeModule = CardsTravelNoticeModule;
    exports.CardsTravelNoticePaymentCardComponent = CardsTravelNoticePaymentCardComponent;
    exports.CardsTravelNoticeStatusBadgeComponent = CardsTravelNoticeStatusBadgeComponent;
    exports.CardsTravelNoticeWidgetComponent = CardsTravelNoticeWidgetComponent;
    exports.TravelNoticeConfirmStepCustomizableDirective = TravelNoticeConfirmStepCustomizableDirective;
    exports.TravelNoticeCreateCustomizableDirective = TravelNoticeCreateCustomizableDirective;
    exports.TravelNoticeDetailsStepCustomizableDirective = TravelNoticeDetailsStepCustomizableDirective;
    exports.TravelNoticeEmptyStateContainerCustomizableDirective = TravelNoticeEmptyStateContainerCustomizableDirective;
    exports.TravelNoticeListCustomizableDirective = TravelNoticeListCustomizableDirective;
    exports.TravelNoticeListItemCustomizableDirective = TravelNoticeListItemCustomizableDirective;
    exports.TravelNoticeSelectCardsCustomizableDirective = TravelNoticeSelectCardsCustomizableDirective;
    exports.TravelNoticeStepperCustomizableDirective = TravelNoticeStepperCustomizableDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-cards-travel-notice-widget-ang.umd.js.map
