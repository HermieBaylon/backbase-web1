import { ChangeDetectorRef, OnInit, TemplateRef } from '@angular/core';
import { CardsBackendDestinations, CardsBackendError, CardsService, Destination, PaymentCard, TravelNotice, TravelNoticeList } from '@backbase/cards-common-ang';
import { AssetsService } from '@backbase/foundation-ang/core';
import { NotificationService } from '@backbase/ui-ang/notification';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class CardsTravelNoticeWidgetComponent implements OnInit {
    private readonly assetsService;
    private readonly cardsService;
    private readonly notificationService;
    private readonly destinationsService;
    protected readonly cd: ChangeDetectorRef;
    notificationOnCreate: TemplateRef<any> | undefined;
    notificationOnDelete: TemplateRef<any> | undefined;
    travelNoticeList: TravelNoticeList | undefined;
    paymentCards: PaymentCard[] | undefined;
    isLoading: boolean;
    /**
     * Error message in case something unexpected occurs.
     */
    error: CardsBackendError | undefined;
    destinationList: Observable<Destination[]> | undefined;
    private readonly config;
    private readonly resolveAsset;
    get imageEmptyStateUrl(): Observable<string>;
    ngOnInit(): void;
    submitTravelNotice(travelNoticeItem: TravelNotice): void;
    onRemoveItem(travelNoticeItem: TravelNotice): void;
    private loadTravelNotice;
    private pushNotification;
    constructor(assetsService: AssetsService, cardsService: CardsService, notificationService: NotificationService, destinationsService: CardsBackendDestinations | undefined, cd: ChangeDetectorRef);
    static ɵfac: i0.ɵɵFactoryDeclaration<CardsTravelNoticeWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CardsTravelNoticeWidgetComponent, "bb-cards-travel-notice-widget", never, {}, {}, never, never>;
}
