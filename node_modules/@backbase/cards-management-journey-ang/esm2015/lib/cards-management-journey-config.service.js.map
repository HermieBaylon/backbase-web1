{"version":3,"file":"cards-management-journey-config.service.js","sourceRoot":"","sources":["../../../../../libs/cards-management-journey/src/lib/cards-management-journey-config.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;;AAE7E,MAAM,CAAC,MAAM,wCAAwC,GACnD,IAAI,cAAc,CAChB,qDAAqD,CACtD,CAAC;AASJ,MAAM,cAAc,GAAwC;IAC1D,eAAe,EAAE,IAAI;IACrB,uBAAuB,EAAE,cAAc;IACvC,kBAAkB,EAAE,IAAI;IACxB,gBAAgB,EAAE,KAAK;CACxB,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAG,CACpC,MAA2C,EAC3C,EAAE,CAAC,iCACA,cAAc,GACd,CAAC,MAAM,IAAI,EAAE,CAAC,EACjB,CAAC;AAGH,MAAM,OAAO,mCAAmC;IAG9C,YAGE,MAA2C;QAE3C,IAAI,CAAC,OAAO,GAAG,sBAAsB,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,cAAc,CAAC;IACxB,CAAC;IAED;;OAEG;IACH,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,IAAI,uBAAuB;QACzB,OAAO,IAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC;IAC9C,CAAC;IAED;;OAEG;IACH,IAAI,kBAAkB;QACpB,OAAO,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC;IACzC,CAAC;IAED;;OAEG;IACH,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC;IACvC,CAAC;;oJAzCU,mCAAmC,kBAKpC,wCAAwC;wJALvC,mCAAmC;4FAAnC,mCAAmC;kBAD/C,UAAU;;0BAKN,QAAQ;;0BACR,MAAM;2BAAC,wCAAwC","sourcesContent":["import { Injectable, Optional, Inject, InjectionToken } from '@angular/core';\n\nexport const CardsManagementJourneyConfigurationToken =\n  new InjectionToken<CardsManagementJourneyConfiguration>(\n    'CardsManagementJourneyConfiguration injection token'\n  );\n\nexport interface CardsManagementJourneyConfiguration {\n  notificationTtl: number;\n  groupByPaymentCardTypes: string;\n  enableTravelNotice: boolean;\n  deElevatedHeader: boolean;\n}\n\nconst configDefaults: CardsManagementJourneyConfiguration = {\n  notificationTtl: 5000,\n  groupByPaymentCardTypes: 'Credit,Debit',\n  enableTravelNotice: true,\n  deElevatedHeader: false,\n};\n\nexport const getDefaultConfigValues = (\n  config: CardsManagementJourneyConfiguration\n) => ({\n  ...configDefaults,\n  ...(config || {}),\n});\n\n@Injectable()\nexport class CardsManagementJourneyConfigService {\n  private _config: CardsManagementJourneyConfiguration;\n\n  constructor(\n    @Optional()\n    @Inject(CardsManagementJourneyConfigurationToken)\n    config: CardsManagementJourneyConfiguration\n  ) {\n    this._config = getDefaultConfigValues(config);\n  }\n\n  get defaults(): CardsManagementJourneyConfiguration {\n    return configDefaults;\n  }\n\n  /**\n   * Notification timeout timer value configuration\n   */\n  get notificationTtl(): number {\n    return this._config.notificationTtl;\n  }\n\n  /**\n   * Types of cards configuration value\n   */\n  get groupByPaymentCardTypes(): string {\n    return this._config.groupByPaymentCardTypes;\n  }\n\n  /**\n   * Dev config to enable Travel notice\n   */\n  get enableTravelNotice(): boolean {\n    return this._config.enableTravelNotice;\n  }\n\n  /**\n   * Dev config to enable de-elevated header\n   */\n  get deElevatedHeader(): boolean {\n    return this._config.deElevatedHeader;\n  }\n}\n"]}