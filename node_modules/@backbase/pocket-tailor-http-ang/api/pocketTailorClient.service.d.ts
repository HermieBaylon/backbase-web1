import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ClosePocketRequest } from '../model/models';
import { Pocket } from '../model/models';
import { PocketListResponse } from '../model/models';
import { PocketPostRequest } from '../model/models';
import { PocketTailorConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface ClosePocketRequestParams {
    ["closePocketRequest"]: ClosePocketRequest;
}
export interface PostPocketRequestParams {
    ["pocketPostRequest"]: PocketPostRequest;
}
export interface ViewPocketRequestParams {
    ["pocketId"]: string;
}
export declare class PocketTailorClientHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PocketTailorConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PocketTailorConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    closePocket(requestParameters: ClosePocketRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    closePocket(requestParameters: ClosePocketRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    closePocket(requestParameters: ClosePocketRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    closePocketUrl(requestParameters: ClosePocketRequestParams): string;
    listPockets(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PocketListResponse>;
    listPockets(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PocketListResponse>>;
    listPockets(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PocketListResponse>>;
    listPocketsUrl(): string;
    postPocket(requestParameters: PostPocketRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Pocket>;
    postPocket(requestParameters: PostPocketRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Pocket>>;
    postPocket(requestParameters: PostPocketRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Pocket>>;
    postPocketUrl(requestParameters: PostPocketRequestParams): string;
    viewPocket(requestParameters: ViewPocketRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Pocket>;
    viewPocket(requestParameters: ViewPocketRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Pocket>>;
    viewPocket(requestParameters: ViewPocketRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Pocket>>;
    viewPocketUrl(requestParameters: ViewPocketRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<PocketTailorClientHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PocketTailorClientHttpService>;
}
