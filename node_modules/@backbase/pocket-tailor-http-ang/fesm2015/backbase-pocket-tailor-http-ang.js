import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const POCKET_TAILOR_BASE_PATH = new InjectionToken('POCKET_TAILOR_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class PocketTailorConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module PocketTailorConfiguration');

class PocketTailorApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('PocketTailorApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: PocketTailorApiModule,
            providers: [{ provide: PocketTailorConfiguration, useFactory: configurationFactory }]
        };
    }
}
PocketTailorApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PocketTailorApiModule, deps: [{ token: PocketTailorApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: PocketTailorConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
PocketTailorApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PocketTailorApiModule });
PocketTailorApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PocketTailorApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PocketTailorApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: PocketTailorApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: PocketTailorConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class PocketTailorClientHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PocketTailorConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    closePocket(requestParameters, observe = 'body', reportProgress = false, options) {
        const _closePocketRequest = requestParameters["closePocketRequest"];
        if (_closePocketRequest === null || _closePocketRequest === undefined) {
            throw new Error('Required parameter closePocketRequest was null or undefined when calling closePocket.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/pockets/closed`, _closePocketRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    closePocketUrl(requestParameters) {
        const _closePocketRequest = requestParameters["closePocketRequest"];
        if (_closePocketRequest === null || _closePocketRequest === undefined) {
            throw new Error('Required parameter closePocketRequest was null or undefined when calling closePocket.');
        }
        return `${this.configuration.basePath}/client-api/v2/pockets/closed`;
    }
    listPockets(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/pockets`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    listPocketsUrl() {
        return `${this.configuration.basePath}/client-api/v2/pockets`;
    }
    postPocket(requestParameters, observe = 'body', reportProgress = false, options) {
        const _pocketPostRequest = requestParameters["pocketPostRequest"];
        if (_pocketPostRequest === null || _pocketPostRequest === undefined) {
            throw new Error('Required parameter pocketPostRequest was null or undefined when calling postPocket.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/pockets`, _pocketPostRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postPocketUrl(requestParameters) {
        const _pocketPostRequest = requestParameters["pocketPostRequest"];
        if (_pocketPostRequest === null || _pocketPostRequest === undefined) {
            throw new Error('Required parameter pocketPostRequest was null or undefined when calling postPocket.');
        }
        return `${this.configuration.basePath}/client-api/v2/pockets`;
    }
    viewPocket(requestParameters, observe = 'body', reportProgress = false, options) {
        const _pocketId = requestParameters["pocketId"];
        if (_pocketId === null || _pocketId === undefined) {
            throw new Error('Required parameter pocketId was null or undefined when calling viewPocket.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/pockets/${encodeURIComponent(String(_pocketId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    viewPocketUrl(requestParameters) {
        const _pocketId = requestParameters["pocketId"];
        if (_pocketId === null || _pocketId === undefined) {
            throw new Error('Required parameter pocketId was null or undefined when calling viewPocket.');
        }
        return `${this.configuration.basePath}/client-api/v2/pockets/${encodeURIComponent(String(_pocketId))}`;
    }
}
PocketTailorClientHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PocketTailorClientHttpService, deps: [{ token: i1.HttpClient }, { token: POCKET_TAILOR_BASE_PATH, optional: true }, { token: PocketTailorConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PocketTailorClientHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PocketTailorClientHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PocketTailorClientHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [POCKET_TAILOR_BASE_PATH]
                }] }, { type: PocketTailorConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const PocketTailorClientHttpServiceClosePocketMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/pockets/closed",
        method: "POST",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PocketTailorClientHttpServiceListPocketsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/pockets",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "pockets": [{
                            "id": "546abc12",
                            "arrangementId": "11da7d70-ed15-11ea-adc1-0242ac120002",
                            "name": "Travel Europe",
                            "icon": "travel",
                            "goal": {
                                "amountCurrency": {
                                    "amount": "2000.00",
                                    "currencyCode": "EUR"
                                },
                                "deadline": "2021-02-28",
                                "progress": 35.5
                            },
                            "balance": {
                                "amount": "-20.00",
                                "currencyCode": "EUR"
                            }
                        }, {
                            "id": "gy2345dff",
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-012331c94699",
                            "name": "Christmas gifts",
                            "icon": "gift",
                            "balance": {
                                "amount": "789.13",
                                "currencyCode": "EUR"
                            }
                        }, {
                            "id": "cd1235dff",
                            "arrangementId": "2331c9469-09a8-4b4d-a91c946999f-01233",
                            "name": "Adventure holidays",
                            "icon": "holidays",
                            "goal": {
                                "deadline": "2021-09-18"
                            },
                            "balance": {
                                "amount": "89.13",
                                "currencyCode": "EUR"
                            }
                        }, {
                            "id": "987abc12",
                            "arrangementId": "c7dgh-a7d70-ed15-11ea-fec1-0242120002",
                            "name": "Home Renovation",
                            "icon": "home",
                            "goal": {
                                "amountCurrency": {
                                    "amount": "50000.00",
                                    "currencyCode": "EUR"
                                },
                                "progress": 0.5
                            },
                            "balance": {
                                "amount": "250.00",
                                "currencyCode": "EUR"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PocketTailorClientHttpServicePostPocketMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/pockets",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "546abc12",
                    "arrangementId": "11da7d70-ed15-11ea-adc1-0242ac120002",
                    "name": "Travel Europe",
                    "icon": "travel",
                    "goal": {
                        "amountCurrency": {
                            "amount": "2000.00",
                            "currencyCode": "EUR"
                        },
                        "deadline": "2021-02-28",
                        "progress": 35.5
                    },
                    "balance": {
                        "amount": "-20.00",
                        "currencyCode": "EUR"
                    }
                }
            },
            {
                status: 201,
                body: {
                    "arrangementId": "arrangementId",
                    "goal": {
                        "progress": 0.8008281904610115,
                        "deadline": "2000-01-23",
                        "amountCurrency": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        }
                    },
                    "balance": {
                        "amount": "amount",
                        "additions": {
                            "key": "additions"
                        },
                        "currencyCode": "currencyCode"
                    },
                    "name": "name",
                    "icon": "icon",
                    "id": "id"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PocketTailorClientHttpServiceViewPocketMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/pockets/{pocketId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "546abc12",
                    "arrangementId": "11da7d70-ed15-11ea-adc1-0242ac120002",
                    "name": "Travel Europe",
                    "icon": "travel",
                    "goal": {
                        "amountCurrency": {
                            "amount": "2000.00",
                            "currencyCode": "EUR"
                        },
                        "deadline": "2021-02-28",
                        "progress": 35.5
                    },
                    "balance": {
                        "amount": "-20.00",
                        "currencyCode": "EUR"
                    }
                }
            },
            {
                status: 200,
                body: {
                    "arrangementId": "arrangementId",
                    "goal": {
                        "progress": 0.8008281904610115,
                        "deadline": "2000-01-23",
                        "amountCurrency": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        }
                    },
                    "balance": {
                        "amount": "amount",
                        "additions": {
                            "key": "additions"
                        },
                        "currencyCode": "currencyCode"
                    },
                    "name": "name",
                    "icon": "icon",
                    "id": "id"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PocketTailorClientHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/pockets/closed",
        method: "POST",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/pockets",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "pockets": [{
                            "id": "546abc12",
                            "arrangementId": "11da7d70-ed15-11ea-adc1-0242ac120002",
                            "name": "Travel Europe",
                            "icon": "travel",
                            "goal": {
                                "amountCurrency": {
                                    "amount": "2000.00",
                                    "currencyCode": "EUR"
                                },
                                "deadline": "2021-02-28",
                                "progress": 35.5
                            },
                            "balance": {
                                "amount": "-20.00",
                                "currencyCode": "EUR"
                            }
                        }, {
                            "id": "gy2345dff",
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-012331c94699",
                            "name": "Christmas gifts",
                            "icon": "gift",
                            "balance": {
                                "amount": "789.13",
                                "currencyCode": "EUR"
                            }
                        }, {
                            "id": "cd1235dff",
                            "arrangementId": "2331c9469-09a8-4b4d-a91c946999f-01233",
                            "name": "Adventure holidays",
                            "icon": "holidays",
                            "goal": {
                                "deadline": "2021-09-18"
                            },
                            "balance": {
                                "amount": "89.13",
                                "currencyCode": "EUR"
                            }
                        }, {
                            "id": "987abc12",
                            "arrangementId": "c7dgh-a7d70-ed15-11ea-fec1-0242120002",
                            "name": "Home Renovation",
                            "icon": "home",
                            "goal": {
                                "amountCurrency": {
                                    "amount": "50000.00",
                                    "currencyCode": "EUR"
                                },
                                "progress": 0.5
                            },
                            "balance": {
                                "amount": "250.00",
                                "currencyCode": "EUR"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/pockets",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "546abc12",
                    "arrangementId": "11da7d70-ed15-11ea-adc1-0242ac120002",
                    "name": "Travel Europe",
                    "icon": "travel",
                    "goal": {
                        "amountCurrency": {
                            "amount": "2000.00",
                            "currencyCode": "EUR"
                        },
                        "deadline": "2021-02-28",
                        "progress": 35.5
                    },
                    "balance": {
                        "amount": "-20.00",
                        "currencyCode": "EUR"
                    }
                }
            },
            {
                status: 201,
                body: {
                    "arrangementId": "arrangementId",
                    "goal": {
                        "progress": 0.8008281904610115,
                        "deadline": "2000-01-23",
                        "amountCurrency": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        }
                    },
                    "balance": {
                        "amount": "amount",
                        "additions": {
                            "key": "additions"
                        },
                        "currencyCode": "currencyCode"
                    },
                    "name": "name",
                    "icon": "icon",
                    "id": "id"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/pockets/{pocketId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "546abc12",
                    "arrangementId": "11da7d70-ed15-11ea-adc1-0242ac120002",
                    "name": "Travel Europe",
                    "icon": "travel",
                    "goal": {
                        "amountCurrency": {
                            "amount": "2000.00",
                            "currencyCode": "EUR"
                        },
                        "deadline": "2021-02-28",
                        "progress": 35.5
                    },
                    "balance": {
                        "amount": "-20.00",
                        "currencyCode": "EUR"
                    }
                }
            },
            {
                status: 200,
                body: {
                    "arrangementId": "arrangementId",
                    "goal": {
                        "progress": 0.8008281904610115,
                        "deadline": "2000-01-23",
                        "amountCurrency": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        }
                    },
                    "balance": {
                        "amount": "amount",
                        "additions": {
                            "key": "additions"
                        },
                        "currencyCode": "currencyCode"
                    },
                    "name": "name",
                    "icon": "icon",
                    "id": "id"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

export { COLLECTION_FORMATS, CONFIG_TOKEN, POCKET_TAILOR_BASE_PATH, PocketTailorApiModule, PocketTailorClientHttpService, PocketTailorClientHttpServiceClosePocketMocksProvider, PocketTailorClientHttpServiceListPocketsMocksProvider, PocketTailorClientHttpServiceMocksProvider, PocketTailorClientHttpServicePostPocketMocksProvider, PocketTailorClientHttpServiceViewPocketMocksProvider, PocketTailorConfiguration };
//# sourceMappingURL=backbase-pocket-tailor-http-ang.js.map
