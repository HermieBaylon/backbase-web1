{"version":3,"file":"backbase-comments-http-ang.js","sources":["../../encoder.ts","../../variables.ts","../../configuration.ts","../../api/comments.service.ts","../../api/api.ts","../../model/errorItem.ts","../../model/internalServerError.ts","../../model/postAddDto.ts","../../model/postDto.ts","../../model/postUpdateDto.ts","../../model/threadAddDtoAssociations.ts","../../model/threadDto.ts","../../model/threadIdDto.ts","../../api.module.ts","../../backbase-comments-http-ang.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class Configuration {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n\n        // init default bearerAuth credential\n        if (!this.credentials['bearerAuth']) {\n            this.credentials['bearerAuth'] = () => {\n                return typeof this.accessToken === 'function'\n                    ? this.accessToken()\n                    : this.accessToken;\n            };\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n","/**\n * Comments client\n * Add and list comment threads, view, edit, add, and delete posts to threads.\n *\n * The version of the OpenAPI document: 2.1.3\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { BadRequestError } from '../model/models';\nimport { ForbiddenError } from '../model/models';\nimport { InternalServerError } from '../model/models';\nimport { NotFoundError } from '../model/models';\nimport { PostAddDto } from '../model/models';\nimport { PostDto } from '../model/models';\nimport { PostUpdateDto } from '../model/models';\nimport { ThreadAddDto } from '../model/models';\nimport { ThreadDto } from '../model/models';\nimport { ThreadIdDto } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\nimport {\n    CommentsServiceInterface\n} from './comments.serviceInterface';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentsService implements CommentsServiceInterface {\n\n    protected basePath = 'http://localhost:5600/client-api/comments/v2';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Add a new post.\n     * @param threadId The thread\\&#39;s unique ID\n     * @param postAddDto \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addPost(threadId: string, postAddDto: PostAddDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PostDto>;\n    public addPost(threadId: string, postAddDto: PostAddDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PostDto>>;\n    public addPost(threadId: string, postAddDto: PostAddDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PostDto>>;\n    public addPost(threadId: string, postAddDto: PostAddDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (threadId === null || threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling addPost.');\n        }\n        if (postAddDto === null || postAddDto === undefined) {\n            throw new Error('Required parameter postAddDto was null or undefined when calling addPost.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PostDto>(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(threadId))}/posts`,\n            postAddDto,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add a new thread.\n     * @param threadAddDto \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addThread(threadAddDto: ThreadAddDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ThreadIdDto>;\n    public addThread(threadAddDto: ThreadAddDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ThreadIdDto>>;\n    public addThread(threadAddDto: ThreadAddDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ThreadIdDto>>;\n    public addThread(threadAddDto: ThreadAddDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (threadAddDto === null || threadAddDto === undefined) {\n            throw new Error('Required parameter threadAddDto was null or undefined when calling addThread.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<ThreadIdDto>(`${this.configuration.basePath}/client-api/comments/v2/threads`,\n            threadAddDto,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Deletes a specific post for a thread.\n     * @param threadId The thread\\&#39;s unique ID\n     * @param postId The post\\&#39;s unique ID\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePost(threadId: string, postId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public deletePost(threadId: string, postId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public deletePost(threadId: string, postId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public deletePost(threadId: string, postId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (threadId === null || threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling deletePost.');\n        }\n        if (postId === null || postId === undefined) {\n            throw new Error('Required parameter postId was null or undefined when calling deletePost.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(threadId))}/posts/${encodeURIComponent(String(postId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get thread\\&#39;s posts by &#x60;threadId&#x60;.\n     * @param threadId The thread\\&#39;s unique ID\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPostList(threadId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<PostDto>>;\n    public getPostList(threadId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<PostDto>>>;\n    public getPostList(threadId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<PostDto>>>;\n    public getPostList(threadId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (threadId === null || threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling getPostList.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<PostDto>>(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(threadId))}/posts`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all threads belong to the given entity. Sorted by the creation date in descending order.\n     * @param entityFilter Multiple key-value entities filter.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getThreadList(entityFilter: { [key: string]: string; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<ThreadDto>>;\n    public getThreadList(entityFilter: { [key: string]: string; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<ThreadDto>>>;\n    public getThreadList(entityFilter: { [key: string]: string; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<ThreadDto>>>;\n    public getThreadList(entityFilter: { [key: string]: string; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (entityFilter === null || entityFilter === undefined) {\n            throw new Error('Required parameter entityFilter was null or undefined when calling getThreadList.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (entityFilter !== undefined && entityFilter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>entityFilter, 'entityFilter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<ThreadDto>>(`${this.configuration.basePath}/client-api/comments/v2/threads`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Updates a specific post for a thread.\n     * @param threadId The thread\\&#39;s unique ID\n     * @param postId The post\\&#39;s unique ID\n     * @param postUpdateDto \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updatePost(threadId: string, postId: string, postUpdateDto: PostUpdateDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PostDto>;\n    public updatePost(threadId: string, postId: string, postUpdateDto: PostUpdateDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PostDto>>;\n    public updatePost(threadId: string, postId: string, postUpdateDto: PostUpdateDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PostDto>>;\n    public updatePost(threadId: string, postId: string, postUpdateDto: PostUpdateDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (threadId === null || threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling updatePost.');\n        }\n        if (postId === null || postId === undefined) {\n            throw new Error('Required parameter postId was null or undefined when calling updatePost.');\n        }\n        if (postUpdateDto === null || postUpdateDto === undefined) {\n            throw new Error('Required parameter postUpdateDto was null or undefined when calling updatePost.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<PostDto>(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(threadId))}/posts/${encodeURIComponent(String(postId))}`,\n            postUpdateDto,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './comments.service';\nimport { CommentsService } from './comments.service';\nexport * from './comments.serviceInterface'\nexport const APIS = [CommentsService];\n","/**\n * Comments client\n * Add and list comment threads, view, edit, add, and delete posts to threads.\n *\n * The version of the OpenAPI document: 2.1.3\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ErrorItem { \n    /**\n     * Any further information.\n     */\n    message?: string;\n    /**\n     * {capability-name}.api.{api-key-name}. For generated validation errors this is the path in the document the error resolves to. e.g. object name + \\'.\\' + field\n     */\n    key?: string;\n    /**\n     * Context can be anything used to construct localised messages.\n     */\n    context?: { [key: string]: string; };\n}\n","/**\n * Comments client\n * Add and list comment threads, view, edit, add, and delete posts to threads.\n *\n * The version of the OpenAPI document: 2.1.3\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * Represents HTTP 500 Internal Server Error\n */\nexport interface InternalServerError { \n    /**\n     * Further Information\n     */\n    message?: string;\n}\n","/**\n * Comments client\n * Add and list comment threads, view, edit, add, and delete posts to threads.\n *\n * The version of the OpenAPI document: 2.1.3\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface PostAddDto { \n    /**\n     * The optional parent post id\n     */\n    parentId?: string;\n    /**\n     * The content of the post.\n     */\n    content: string;\n    /**\n     * Additional properties\n     */\n    additions?: { [key: string]: string; };\n}\n","/**\n * Comments client\n * Add and list comment threads, view, edit, add, and delete posts to threads.\n *\n * The version of the OpenAPI document: 2.1.3\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface PostDto { \n    /**\n     * The post id\n     */\n    id: string;\n    /**\n     * The user ID of the creator of the post.\n     */\n    creatorId?: string;\n    /**\n     * The fullname of the creator of the post.\n     */\n    createdBy: string;\n    /**\n     * The content of the post.\n     */\n    content: string | null;\n    /**\n     * The creation date of the post\n     */\n    createdAt: string;\n    /**\n     * The modification date of the post\n     */\n    lastModifiedAt?: string;\n    /**\n     * The optional parent post id\n     */\n    parentId?: string;\n    /**\n     * Additional properties\n     */\n    additions?: { [key: string]: string; };\n}\n","/**\n * Comments client\n * Add and list comment threads, view, edit, add, and delete posts to threads.\n *\n * The version of the OpenAPI document: 2.1.3\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface PostUpdateDto { \n    /**\n     * The content of the post.\n     */\n    content: string;\n    /**\n     * Additional properties\n     */\n    additions?: { [key: string]: string; };\n}\n","/**\n * Comments client\n * Add and list comment threads, view, edit, add, and delete posts to threads.\n *\n * The version of the OpenAPI document: 2.1.3\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ThreadAddDtoAssociations { \n    /**\n     * The type of entity\n     */\n    entityType: string;\n    /**\n     * The id of the entityType\n     */\n    entityId: string;\n}\n","/**\n * Comments client\n * Add and list comment threads, view, edit, add, and delete posts to threads.\n *\n * The version of the OpenAPI document: 2.1.3\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ThreadDto { \n    /**\n     * The thread id\n     */\n    id: string;\n    /**\n     * The name of thread\n     */\n    name: string;\n    /**\n     * The thread status\n     */\n    status: ThreadDto.StatusEnum;\n    /**\n     * The creation date of the thread\n     */\n    createdAt: string;\n    /**\n     * The archivation date of the thread\n     */\n    archivedAt?: string;\n    /**\n     * Additional properties\n     */\n    additions?: { [key: string]: string; };\n}\nexport namespace ThreadDto {\n    export type StatusEnum = 'open' | 'closed' | 'archived';\n    export const StatusEnum = {\n        Open: 'open' as StatusEnum,\n        Closed: 'closed' as StatusEnum,\n        Archived: 'archived' as StatusEnum\n    };\n}\n\n","/**\n * Comments client\n * Add and list comment threads, view, edit, add, and delete posts to threads.\n *\n * The version of the OpenAPI document: 2.1.3\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ThreadIdDto { \n    /**\n     * The id of the newly created thread\n     */\n    id?: string;\n}\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { CommentsService } from './api/comments.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}