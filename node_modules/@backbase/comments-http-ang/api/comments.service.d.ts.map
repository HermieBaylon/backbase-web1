{"version":3,"file":"comments.service.d.ts","sources":["comments.service.d.ts"],"names":[],"mappingssourcesContent":["/**\n * Comments client\n * Add and list comment threads, view, edit, add, and delete posts to threads.\n *\n * The version of the OpenAPI document: 2.1.3\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { PostAddDto } from '../model/models';\nimport { PostDto } from '../model/models';\nimport { PostUpdateDto } from '../model/models';\nimport { ThreadAddDto } from '../model/models';\nimport { ThreadDto } from '../model/models';\nimport { ThreadIdDto } from '../model/models';\nimport { Configuration } from '../configuration';\nimport { CommentsServiceInterface } from './comments.serviceInterface';\nexport declare class CommentsService implements CommentsServiceInterface {\n    protected httpClient: HttpClient;\n    protected basePath: string;\n    defaultHeaders: HttpHeaders;\n    configuration: Configuration;\n    encoder: HttpParameterCodec;\n    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);\n    private addToHttpParams;\n    private addToHttpParamsRecursive;\n    /**\n     * Add a new post.\n     * @param threadId The thread\\&#39;s unique ID\n     * @param postAddDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    addPost(threadId: string, postAddDto: PostAddDto, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<PostDto>;\n    addPost(threadId: string, postAddDto: PostAddDto, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<PostDto>>;\n    addPost(threadId: string, postAddDto: PostAddDto, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<PostDto>>;\n    /**\n     * Add a new thread.\n     * @param threadAddDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    addThread(threadAddDto: ThreadAddDto, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<ThreadIdDto>;\n    addThread(threadAddDto: ThreadAddDto, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<ThreadIdDto>>;\n    addThread(threadAddDto: ThreadAddDto, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<ThreadIdDto>>;\n    /**\n     * Deletes a specific post for a thread.\n     * @param threadId The thread\\&#39;s unique ID\n     * @param postId The post\\&#39;s unique ID\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    deletePost(threadId: string, postId: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<any>;\n    deletePost(threadId: string, postId: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<any>>;\n    deletePost(threadId: string, postId: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Get thread\\&#39;s posts by &#x60;threadId&#x60;.\n     * @param threadId The thread\\&#39;s unique ID\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getPostList(threadId: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<Array<PostDto>>;\n    getPostList(threadId: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<Array<PostDto>>>;\n    getPostList(threadId: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<Array<PostDto>>>;\n    /**\n     * Get all threads belong to the given entity. Sorted by the creation date in descending order.\n     * @param entityFilter Multiple key-value entities filter.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getThreadList(entityFilter: {\n        [key: string]: string;\n    }, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<Array<ThreadDto>>;\n    getThreadList(entityFilter: {\n        [key: string]: string;\n    }, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<Array<ThreadDto>>>;\n    getThreadList(entityFilter: {\n        [key: string]: string;\n    }, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<Array<ThreadDto>>>;\n    /**\n     * Updates a specific post for a thread.\n     * @param threadId The thread\\&#39;s unique ID\n     * @param postId The post\\&#39;s unique ID\n     * @param postUpdateDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updatePost(threadId: string, postId: string, postUpdateDto: PostUpdateDto, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<PostDto>;\n    updatePost(threadId: string, postId: string, postUpdateDto: PostUpdateDto, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<PostDto>>;\n    updatePost(threadId: string, postId: string, postUpdateDto: PostUpdateDto, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<PostDto>>;\n}\n"]}