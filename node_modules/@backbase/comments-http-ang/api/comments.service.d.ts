/**
 * Comments client
 * Add and list comment threads, view, edit, add, and delete posts to threads.
 *
 * The version of the OpenAPI document: 2.1.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PostAddDto } from '../model/models';
import { PostDto } from '../model/models';
import { PostUpdateDto } from '../model/models';
import { ThreadAddDto } from '../model/models';
import { ThreadDto } from '../model/models';
import { ThreadIdDto } from '../model/models';
import { Configuration } from '../configuration';
import { CommentsServiceInterface } from './comments.serviceInterface';
import * as ɵngcc0 from '@angular/core';
export declare class CommentsService implements CommentsServiceInterface {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Add a new post.
     * @param threadId The thread\&#39;s unique ID
     * @param postAddDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addPost(threadId: string, postAddDto: PostAddDto, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PostDto>;
    addPost(threadId: string, postAddDto: PostAddDto, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PostDto>>;
    addPost(threadId: string, postAddDto: PostAddDto, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PostDto>>;
    /**
     * Add a new thread.
     * @param threadAddDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addThread(threadAddDto: ThreadAddDto, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ThreadIdDto>;
    addThread(threadAddDto: ThreadAddDto, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ThreadIdDto>>;
    addThread(threadAddDto: ThreadAddDto, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ThreadIdDto>>;
    /**
     * Deletes a specific post for a thread.
     * @param threadId The thread\&#39;s unique ID
     * @param postId The post\&#39;s unique ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deletePost(threadId: string, postId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deletePost(threadId: string, postId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deletePost(threadId: string, postId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    /**
     * Get thread\&#39;s posts by &#x60;threadId&#x60;.
     * @param threadId The thread\&#39;s unique ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPostList(threadId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<PostDto>>;
    getPostList(threadId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<PostDto>>>;
    getPostList(threadId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<PostDto>>>;
    /**
     * Get all threads belong to the given entity. Sorted by the creation date in descending order.
     * @param entityFilter Multiple key-value entities filter.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getThreadList(entityFilter: {
        [key: string]: string;
    }, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ThreadDto>>;
    getThreadList(entityFilter: {
        [key: string]: string;
    }, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ThreadDto>>>;
    getThreadList(entityFilter: {
        [key: string]: string;
    }, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ThreadDto>>>;
    /**
     * Updates a specific post for a thread.
     * @param threadId The thread\&#39;s unique ID
     * @param postId The post\&#39;s unique ID
     * @param postUpdateDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updatePost(threadId: string, postId: string, postUpdateDto: PostUpdateDto, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PostDto>;
    updatePost(threadId: string, postId: string, postUpdateDto: PostUpdateDto, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PostDto>>;
    updatePost(threadId: string, postId: string, postUpdateDto: PostUpdateDto, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PostDto>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<CommentsService, [null, { optional: true; }, { optional: true; }]>;
}

//# sourceMappingURL=comments.service.d.ts.map