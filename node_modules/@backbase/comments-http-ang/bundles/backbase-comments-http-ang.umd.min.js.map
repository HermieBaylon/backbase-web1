{"version":3,"sources":["../../encoder.ts","../../variables.ts","../../configuration.ts","../../api/comments.service.ts","../../api/api.ts","../../model/threadDto.ts","../../api.module.ts"],"names":["CustomHttpParameterCodec","prototype","encodeKey","k","encodeURIComponent","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","BASE_PATH","InjectionToken","Configuration","configurationParameters","_this","this","apiKeys","username","password","accessToken","basePath","withCredentials","encoder","credentials","selectHeaderContentType","contentTypes","length","type","find","x","isJsonMime","undefined","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","lookupCredential","key","value","CommentsService","httpClient","configuration","defaultHeaders","HttpHeaders","addToHttpParams","httpParams","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","Error","append","toISOString","substr","Object","keys","addPost","threadId","postAddDto","observe","reportProgress","options","credential","headers","set","httpHeaderAcceptSelected","httpHeaderAccept","httpContentTypeSelected","responseType","startsWith","post","String","addThread","threadAddDto","deletePost","postId","delete","getPostList","get","getThreadList","entityFilter","queryParameters","HttpParams","params","updatePost","postUpdateDto","put","Injectable","args","providedIn","HttpClient","Optional","Inject","decorators","APIS","ThreadDto","StatusEnum","Open","Closed","Archived","ApiModule","parentModule","http","forRoot","configurationFactory","ngModule","providers","provide","useFactory","NgModule","imports","declarations","exports","SkipSelf","csv","tsv","ssv","pipes"],"mappings":"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","sourcesContent":["import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class Configuration {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n\n        // init default bearerAuth credential\n        if (!this.credentials['bearerAuth']) {\n            this.credentials['bearerAuth'] = () => {\n                return typeof this.accessToken === 'function'\n                    ? this.accessToken()\n                    : this.accessToken;\n            };\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n","/**\n * Comments client\n * Add and list comment threads, view, edit, add, and delete posts to threads.\n *\n * The version of the OpenAPI document: 2.1.3\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { BadRequestError } from '../model/models';\nimport { ForbiddenError } from '../model/models';\nimport { InternalServerError } from '../model/models';\nimport { NotFoundError } from '../model/models';\nimport { PostAddDto } from '../model/models';\nimport { PostDto } from '../model/models';\nimport { PostUpdateDto } from '../model/models';\nimport { ThreadAddDto } from '../model/models';\nimport { ThreadDto } from '../model/models';\nimport { ThreadIdDto } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\nimport {\n    CommentsServiceInterface\n} from './comments.serviceInterface';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentsService implements CommentsServiceInterface {\n\n    protected basePath = 'http://localhost:5600/client-api/comments/v2';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Add a new post.\n     * @param threadId The thread\\&#39;s unique ID\n     * @param postAddDto \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addPost(threadId: string, postAddDto: PostAddDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PostDto>;\n    public addPost(threadId: string, postAddDto: PostAddDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PostDto>>;\n    public addPost(threadId: string, postAddDto: PostAddDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PostDto>>;\n    public addPost(threadId: string, postAddDto: PostAddDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (threadId === null || threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling addPost.');\n        }\n        if (postAddDto === null || postAddDto === undefined) {\n            throw new Error('Required parameter postAddDto was null or undefined when calling addPost.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PostDto>(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(threadId))}/posts`,\n            postAddDto,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add a new thread.\n     * @param threadAddDto \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addThread(threadAddDto: ThreadAddDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ThreadIdDto>;\n    public addThread(threadAddDto: ThreadAddDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ThreadIdDto>>;\n    public addThread(threadAddDto: ThreadAddDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ThreadIdDto>>;\n    public addThread(threadAddDto: ThreadAddDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (threadAddDto === null || threadAddDto === undefined) {\n            throw new Error('Required parameter threadAddDto was null or undefined when calling addThread.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<ThreadIdDto>(`${this.configuration.basePath}/client-api/comments/v2/threads`,\n            threadAddDto,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Deletes a specific post for a thread.\n     * @param threadId The thread\\&#39;s unique ID\n     * @param postId The post\\&#39;s unique ID\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePost(threadId: string, postId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<any>;\n    public deletePost(threadId: string, postId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<any>>;\n    public deletePost(threadId: string, postId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<any>>;\n    public deletePost(threadId: string, postId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (threadId === null || threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling deletePost.');\n        }\n        if (postId === null || postId === undefined) {\n            throw new Error('Required parameter postId was null or undefined when calling deletePost.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(threadId))}/posts/${encodeURIComponent(String(postId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get thread\\&#39;s posts by &#x60;threadId&#x60;.\n     * @param threadId The thread\\&#39;s unique ID\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPostList(threadId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<PostDto>>;\n    public getPostList(threadId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<PostDto>>>;\n    public getPostList(threadId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<PostDto>>>;\n    public getPostList(threadId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (threadId === null || threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling getPostList.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<PostDto>>(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(threadId))}/posts`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all threads belong to the given entity. Sorted by the creation date in descending order.\n     * @param entityFilter Multiple key-value entities filter.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getThreadList(entityFilter: { [key: string]: string; }, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<ThreadDto>>;\n    public getThreadList(entityFilter: { [key: string]: string; }, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<ThreadDto>>>;\n    public getThreadList(entityFilter: { [key: string]: string; }, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<ThreadDto>>>;\n    public getThreadList(entityFilter: { [key: string]: string; }, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (entityFilter === null || entityFilter === undefined) {\n            throw new Error('Required parameter entityFilter was null or undefined when calling getThreadList.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (entityFilter !== undefined && entityFilter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>entityFilter, 'entityFilter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<ThreadDto>>(`${this.configuration.basePath}/client-api/comments/v2/threads`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Updates a specific post for a thread.\n     * @param threadId The thread\\&#39;s unique ID\n     * @param postId The post\\&#39;s unique ID\n     * @param postUpdateDto \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updatePost(threadId: string, postId: string, postUpdateDto: PostUpdateDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PostDto>;\n    public updatePost(threadId: string, postId: string, postUpdateDto: PostUpdateDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PostDto>>;\n    public updatePost(threadId: string, postId: string, postUpdateDto: PostUpdateDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PostDto>>;\n    public updatePost(threadId: string, postId: string, postUpdateDto: PostUpdateDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (threadId === null || threadId === undefined) {\n            throw new Error('Required parameter threadId was null or undefined when calling updatePost.');\n        }\n        if (postId === null || postId === undefined) {\n            throw new Error('Required parameter postId was null or undefined when calling updatePost.');\n        }\n        if (postUpdateDto === null || postUpdateDto === undefined) {\n            throw new Error('Required parameter postUpdateDto was null or undefined when calling updatePost.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (bearerAuth) required\n        credential = this.configuration.lookupCredential('bearerAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<PostDto>(`${this.configuration.basePath}/client-api/comments/v2/threads/${encodeURIComponent(String(threadId))}/posts/${encodeURIComponent(String(postId))}`,\n            postUpdateDto,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './comments.service';\nimport { CommentsService } from './comments.service';\nexport * from './comments.serviceInterface'\nexport const APIS = [CommentsService];\n","/**\n * Comments client\n * Add and list comment threads, view, edit, add, and delete posts to threads.\n *\n * The version of the OpenAPI document: 2.1.3\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ThreadDto { \n    /**\n     * The thread id\n     */\n    id: string;\n    /**\n     * The name of thread\n     */\n    name: string;\n    /**\n     * The thread status\n     */\n    status: ThreadDto.StatusEnum;\n    /**\n     * The creation date of the thread\n     */\n    createdAt: string;\n    /**\n     * The archivation date of the thread\n     */\n    archivedAt?: string;\n    /**\n     * Additional properties\n     */\n    additions?: { [key: string]: string; };\n}\nexport namespace ThreadDto {\n    export type StatusEnum = 'open' | 'closed' | 'archived';\n    export const StatusEnum = {\n        Open: 'open' as StatusEnum,\n        Closed: 'closed' as StatusEnum,\n        Archived: 'archived' as StatusEnum\n    };\n}\n\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { CommentsService } from './api/comments.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n"]}