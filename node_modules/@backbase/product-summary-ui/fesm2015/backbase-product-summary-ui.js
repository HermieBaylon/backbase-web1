import * as i0 from '@angular/core';
import { Component, Input, Directive, NgModule, EventEmitter, Output, ViewChild, ChangeDetectionStrategy, ViewEncapsulation, ContentChild } from '@angular/core';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1$2 from '@backbase/ui-ang/date-pipe';
import { BbDatePipeModule } from '@backbase/ui-ang/date-pipe';
import * as i4 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i3$1 from '@backbase/ui-ang/payment-card';
import { PaymentCardModule } from '@backbase/ui-ang/payment-card';
import * as i6 from '@backbase/product-summary-common-ang';
import { ProductKindNames, toKebabCase, getProductKindIconName, ProductNumberPipeModule, ResponsiveContainerComponent, FormatPipeModule, ValidationModule, AccountAliasDisplayingLevel, UserPreferencesValidationSettings, findByName, isFunction, ProductKindUri, AccountNavigationType, DefaultAllowedNavigationTypes, DomAttributesService, getAccountAlias, hasExternalInfo, DatePipeModule, PaginationType } from '@backbase/product-summary-common-ang';
import * as i2 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i1 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i2$1 from '@backbase/ui-ang/input-inline-edit';
import { InputInlineEditModule } from '@backbase/ui-ang/input-inline-edit';
import * as i5$1 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i1$1 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i5 from '@backbase/ui-ang/tooltip-directive';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';
import { MaskableAttribute } from '@backbase/data-ang/arrangements';
import * as i7 from '@backbase/ui-ang/account-number-pipe';
import BigNumber from 'bignumber.js';
import * as i7$1 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i10 from '@backbase/ui-ang/product-item-basic-account';
import { ProductItemBasicAccountModule } from '@backbase/ui-ang/product-item-basic-account';
import * as i3$2 from '@backbase/ui-ang/input-text';
import { InputTextModule } from '@backbase/ui-ang/input-text';
import * as i4$1 from '@backbase/ui-ang/search-box';
import { SearchBoxModule } from '@backbase/ui-ang/search-box';
import * as i6$1 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i5$2 from '@backbase/ui-ang/input-checkbox';
import { InputCheckboxModule } from '@backbase/ui-ang/input-checkbox';
import * as i1$3 from '@ng-select/ng-select';
import { NgSelectModule } from '@ng-select/ng-select';
import * as i1$4 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import * as i1$5 from '@swimlane/ngx-charts';
import { AreaChartModule as AreaChartModule$1, LineChartModule as LineChartModule$1 } from '@swimlane/ngx-charts';
import * as i4$2 from '@backbase/ui-ang/dropdown-menu';
import { DropdownMenuModule } from '@backbase/ui-ang/dropdown-menu';
import { PaymentCardNumberModule } from '@backbase/ui-ang/payment-card-number-pipe';
import * as i7$2 from '@backbase/ui-ang/keyboard-click-directive';
import { KeyboardClickModule } from '@backbase/ui-ang/keyboard-click-directive';
import * as i2$2 from '@backbase/ui-ang/ellipsis';
import { EllipsisModule } from '@backbase/ui-ang/ellipsis';
import { Subject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import * as i7$4 from '@ng-bootstrap/ng-bootstrap';
import { NgbModule } from '@ng-bootstrap/ng-bootstrap';
import * as i3$3 from '@backbase/ui-ang/product-item-current-account';
import { ProductItemCurrentAccountModule } from '@backbase/ui-ang/product-item-current-account';
import * as i4$3 from '@backbase/ui-ang/product-item-savings-account';
import { ProductItemSavingsAccountModule } from '@backbase/ui-ang/product-item-savings-account';
import * as i5$3 from '@backbase/ui-ang/product-item-term-deposit';
import { ProductItemTermDepositModule } from '@backbase/ui-ang/product-item-term-deposit';
import * as i6$2 from '@backbase/ui-ang/product-item-loan';
import { ProductItemLoanModule } from '@backbase/ui-ang/product-item-loan';
import * as i7$3 from '@backbase/ui-ang/product-item-credit-card';
import { ProductItemCreditCardModule } from '@backbase/ui-ang/product-item-credit-card';
import * as i8 from '@backbase/ui-ang/product-item-debit-card';
import { ProductItemDebitCardModule } from '@backbase/ui-ang/product-item-debit-card';
import * as i9 from '@backbase/ui-ang/product-item-investment-account';
import { ProductItemInvestmentAccountModule } from '@backbase/ui-ang/product-item-investment-account';
import * as i4$4 from '@backbase/ui-ang/badge';
import { BadgeModule } from '@backbase/ui-ang/badge';
import * as i1$6 from '@backbase/ui-ang/pagination';
import { PaginationModule } from '@backbase/ui-ang/pagination';
import * as i2$3 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import '@angular/localize/init';

/**
 * A component for displaying an account logo.
 * In case the logo is not reachable a related icon is displayed basing on `productKindName`.
 *
 * @usageNotes
 *
 * ### Include this widget in your `AppModule`:
 *
 * ```typescript
 * @NgModule({
 *   imports: [
 *     ProductSummaryAccountLogoModule,
 *   ],
 *   ...
 * })
 * export class AppModule {}
 * ```
 *
 * ### Display details
 *
 * ```html
 * <bb-product-summary-account-logo
 *   [logoSrc]="externalBank.logo"
 *   [productKindName]="item.productKindName"
 *   [defaultProductKindName]="'Current Account'"
 * ></bb-product-summary-account-logo>
 * ```
 *
 * @ngModule ProductSummaryAccountLogoModule
 */
class ProductSummaryAccountLogoComponent {
    constructor() {
        this.hostRef = this;
        /**
         * Source for bank logo.
         * Can be either a URL or base64 image.
         *
         * @default ''
         */
        this.logoSrc = '';
        /**
         * Product kind name to display a related icon.
         *
         * @default ''
         */
        this.productKindName = '';
        /**
         * Default product kind name to display icons
         */
        this.defaultProductKindName = ProductKindNames.CURRENT_ACCOUNT;
        /**
         * Sets icon size
         *
         * @default 'md'
         */
        this.iconSize = 'md';
        /**
         * Sets icon size
         *
         * @default 'md'
         */
        this.logoSize = 'md';
        /**
         * Indicates whether during loading of the image any errors appeared
         *
         * @default false
         */
        this.isImgError = false;
    }
    /**
     * Returns a related icon color for the given 'productKindName'
     */
    getProductKindIconColor() {
        const color = this.getProductKindIconName().slice(0, -1);
        return color === 'account' ? toKebabCase(this.defaultProductKindName) : color;
    }
    /**
     * Returns a related icon name for the given 'productKindName'
     */
    getProductKindIconName() {
        return getProductKindIconName(this.productKindName);
    }
    /**
     * Event handler for the `error` event of `img`
     * sets `isImgError` to `true`
     */
    onImgError() {
        this.isImgError = true;
    }
}
ProductSummaryAccountLogoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountLogoComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductSummaryAccountLogoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountLogoComponent, selector: "bb-product-summary-account-logo", inputs: { logoSrc: "logoSrc", productKindName: "productKindName", defaultProductKindName: "defaultProductKindName", iconColor: "iconColor", iconSize: "iconSize", logoSize: "logoSize" }, ngImport: i0, template: "<ng-container\n  bbProductSummaryAccountLogoCustomizable\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n\n<ng-template\n  bbProductSummaryAccountLogoCustomizable\n  let-hostRef\n>\n  <ng-container *ngIf=\"hostRef.logoSrc && !hostRef.isImgError; else productKindIcon\">\n    <div class=\"bb-stack bb-icon bb-icon--{{hostRef.logoSize}} bb-icon__background\">\n      <img [src]=\"hostRef.logoSrc\"\n           data-role=\"product-summary-account-logo-img\"\n           aria-hidden=\"true\"\n           alt=\"\"\n           class=\"bb-product-summary-account-logo__img bb-icon__background--square\"\n           (error)=\"hostRef.onImgError()\"/>\n    </div>\n  </ng-container>\n  <ng-template #productKindIcon>\n    <bb-icon-ui data-role=\"product-summary-account-logo-icon\"\n                backgroundType=\"square\"\n                [size]=\"hostRef.iconSize\"\n                [color]=\"hostRef.iconColor || hostRef.getProductKindIconColor()\"\n                [name]=\"hostRef.getProductKindIconName()\">\n    </bb-icon-ui>\n  </ng-template>\n</ng-template>\n\n", components: [{ type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0.forwardRef(function () { return ProductSummaryAccountLogoCustomizableDirective; }), selector: "[bbProductSummaryAccountLogoCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountLogoComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-summary-account-logo',
                    templateUrl: 'bb-product-summary-account-logo.component.html',
                }]
        }], propDecorators: { logoSrc: [{
                type: Input
            }], productKindName: [{
                type: Input
            }], defaultProductKindName: [{
                type: Input
            }], iconColor: [{
                type: Input
            }], iconSize: [{
                type: Input
            }], logoSize: [{
                type: Input
            }] } });
/**
 * This is an extension slot to be used for customizing the logo
 *
 * @usageNotes
 *
 * ### Customize details
 *
 * ```html
 * <ng-template
 *   bbProductSummaryAccountLogoCustomizable
 *   let-hostRef>
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryAccountDetailsWidgetModule
 */
class ProductSummaryAccountLogoCustomizableDirective extends BbTemplate {
}
ProductSummaryAccountLogoCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountLogoCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryAccountLogoCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountLogoCustomizableDirective, selector: "[bbProductSummaryAccountLogoCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountLogoCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryAccountLogoCustomizable]',
                }]
        }] });

const uiModules$h = [IconModule];
const components$e = [ProductSummaryAccountLogoComponent];
const directives$7 = [ProductSummaryAccountLogoCustomizableDirective];
/**
 * Exports a UI components for displaying account logo
 *
 * The following components are included in this module:
 *  - `ProductSummaryAccountLogoComponent`
 *
 * @see ProductSummaryAccountLogoComponent
 *
 * @usageNotes
 *
 * ### Include the exported widgets in your `AppModule`:
 *
 * ```typescript
 * @NgModule({
 *   imports: [
 *     ProductSummaryAccountLogoModule,
 *   ],
 *   ...
 * })
 * export class AppModule {}
 * ```
 */
class ProductSummaryAccountLogoModule {
}
ProductSummaryAccountLogoModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountLogoModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductSummaryAccountLogoModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountLogoModule, declarations: [ProductSummaryAccountLogoComponent, ProductSummaryAccountLogoCustomizableDirective], imports: [CommonModule, IconModule], exports: [ProductSummaryAccountLogoComponent, ProductSummaryAccountLogoCustomizableDirective, IconModule] });
ProductSummaryAccountLogoModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountLogoModule, imports: [[CommonModule, ...uiModules$h], IconModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountLogoModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules$h],
                    declarations: [...components$e, ...directives$7],
                    exports: [...components$e, ...directives$7, ...uiModules$h],
                }]
        }] });

/**
 * Displays a formatted product number ('iban', 'bban' or 'cardNumber')
 *
 * @usageNotes
 *
 * ```html
 * <bb-product-number
 *    value='12345678'
 *    type='iban'
 * ></bb-product-number>
 * ```
 *
 * @ngModule ProductNumberModule
 */
class ProductNumberComponent {
    /**
     * Constructor
     *
     * @param featuresService
     */
    constructor(featuresService) {
        this.featuresService = featuresService;
        this.hostRef = this;
        /**
         * A product that contains product number, a format will be picked automatically
         * Used when `number` unset
         */
        this.product = {};
        /**
         * Defines whether the attribute is unmaskable
         */
        this.unmaskable = false;
        /**
         * Defines whether the attribute is masked
         */
        this.masked = false;
        /**
         * Emits a `MaskableAttribute` to be masked
         */
        this.mask = new EventEmitter();
        /**
         * Emits a `MaskableAttribute` to be unmasked
         */
        this.unmask = new EventEmitter();
    }
    /**
     * Event handler for the `mask` button
     * Emits the `masked` output with a `MaskedAttribute`
     *
     * @param type
     */
    onMask(type) {
        this.mask.emit(this.mapToMaskableAttribute(type));
    }
    /**
     * Event handler for the `unmask` button
     * Emits the `unmasked` output with a `MaskedAttribute`
     *
     * @param type
     */
    onUnmask(type) {
        this.unmask.emit(this.mapToMaskableAttribute(type));
    }
    mapToMaskableAttribute(type) {
        switch (type) {
            case 'bban':
                return MaskableAttribute.BBAN;
            case 'iban':
                return MaskableAttribute.IBAN;
            default:
                return MaskableAttribute.Number;
        }
    }
}
ProductNumberComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberComponent, deps: [{ token: i1$1.FeaturesService }], target: i0.ɵɵFactoryTarget.Component });
ProductNumberComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductNumberComponent, selector: "bb-product-number", inputs: { number: "number", product: "product", format: "format", type: "type", unmaskable: "unmaskable", masked: "masked" }, outputs: { mask: "mask", unmask: "unmask" }, ngImport: i0, template: "<ng-container\n  bbProductNumberCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    productNumber: hostRef.number || (hostRef.product | bbProductNumberValue),\n    productType: hostRef.type || (hostRef.product | bbProductNumberType),\n    productFormat: hostRef.format\n  }\"\n></ng-container>\n\n<ng-template\n  bbProductNumberCustomizable\n  let-hostRef\n  let-productNumber=\"context.productNumber\"\n  let-productType=\"context.productType\"\n  let-productFormat=\"context.productFormat\"\n>\n  <span class=\"contextual-alternates-off\" data-role=\"product-number\">\n    {{ productNumber | bbAccountNumber:(productType || productFormat) }}\n  </span>\n  <ng-container *ngIf=\"hostRef.unmaskable\">\n    <button bbButton\n            *ngIf=\"hostRef.masked; else maskButton\"\n            triggers=\"hover focus\"\n            [bbTooltip]=\"unmaskButtonTooltip\"\n            aria-label=\"Unmask\"\n            i18n-aria-label=\"Unmask button@@product-summary-product-number.button-unmask-label\"\n            (click)=\"hostRef.onUnmask(productType)\"\n            buttonSize=\"sm\"\n            circle=\"true\"\n            color=\"link\"\n            type=\"button\"\n            data-role=\"product-number-unmask-button\">\n      <bb-icon-ui name=\"visibility\"></bb-icon-ui>\n    </button>\n    <ng-template #maskButton>\n      <button bbButton\n              triggers=\"hover focus\"\n              [bbTooltip]=\"maskButtonTooltip\"\n              aria-label=\"Mask\"\n              i18n-aria-label=\"Mask button@@product-summary-product-number.button-mask-label\"\n              (click)=\"hostRef.onMask(productType)\"\n              buttonSize=\"sm\"\n              circle=\"true\"\n              color=\"link\"\n              type=\"button\"\n              data-role=\"product-number-mask-button\">\n        <bb-icon-ui name=\"visibility-off\"></bb-icon-ui>\n      </button>\n    </ng-template>\n\n    <ng-template #unmaskButtonTooltip>\n      <ng-container [ngSwitch]=\"productType\">\n        <ng-container *ngSwitchCase=\"'iban'\"\n                      i18n=\"Unmask IBAN|Button to unmask IBAN@@product-summary-product-number.button-unmask-iban.tooltip\">\n          Unmask IBAN\n        </ng-container>\n        <ng-container *ngSwitchCase=\"'bban'\"\n                      i18n=\"Unmask BBAN|Button to unmask BBAN@@product-summary-product-number.button-unmask-bban.tooltip\">\n          Unmask BBAN\n        </ng-container>\n        <ng-container *ngSwitchCase=\"'cardNumber'\"\n                      i18n=\"Unmask number|Button to unmask card number@@product-summary-product-number.button-unmask-number.tooltip\">\n          Unmask number\n        </ng-container>\n        <ng-container *ngSwitchDefault\n                      i18n=\"Unmask|Button to unmask@@product-summary-product-number.button-unmask.tooltip\">\n          Unmask\n        </ng-container>\n      </ng-container>\n    </ng-template>\n\n    <ng-template #maskButtonTooltip>\n      <ng-container [ngSwitch]=\"productType\">\n        <ng-container *ngSwitchCase=\"'iban'\"\n                      i18n=\"Mask IBAN|Button to unmask IBAN@@product-summary-product-number.button-mask-iban.tooltip\">\n          Mask IBAN\n        </ng-container>\n        <ng-container *ngSwitchCase=\"'bban'\"\n                      i18n=\"Mask BBAN|Button to unmask BBAN@@product-summary-product-number.button-mask-bban.tooltip\">\n          Mask BBAN\n        </ng-container>\n        <ng-container *ngSwitchCase=\"'cardNumber'\"\n                      i18n=\"Mask  number|Button to unmask card number@@product-summary-product-number.button-mask-number.tooltip\">\n          Mask number\n        </ng-container>\n        <ng-container *ngSwitchDefault\n                      i18n=\"Mask|Button to unmask@@product-summary-product-number.button-mask.tooltip\">\n          Mask\n        </ng-container>\n      </ng-container>\n    </ng-template>\n  </ng-container>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0.forwardRef(function () { return ProductNumberCustomizableDirective; }), selector: "[bbProductNumberCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i4.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i5.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i3.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i3.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i3.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }], pipes: { "bbProductNumberValue": i0.forwardRef(function () { return i6.ProductNumberValuePipe; }), "bbProductNumberType": i0.forwardRef(function () { return i6.ProductNumberTypePipe; }), "bbAccountNumber": i0.forwardRef(function () { return i7.AccountNumberPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-number',
                    templateUrl: 'product-number.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$1.FeaturesService }]; }, propDecorators: { number: [{
                type: Input
            }], product: [{
                type: Input
            }], format: [{
                type: Input
            }], type: [{
                type: Input
            }], unmaskable: [{
                type: Input
            }], masked: [{
                type: Input
            }], mask: [{
                type: Output
            }], unmask: [{
                type: Output
            }] } });
/**
 * This is an extension slot to be used for customizing the entire component
 *
 * @usageNotes
 *
 * ### Customize details
 *
 * ```html
 * <ng-template
 *   bbProductNumberCustomizable
 *   let-hostRef>
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductNumberCustomizableDirective
 */
class ProductNumberCustomizableDirective extends BbTemplate {
}
ProductNumberCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductNumberCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductNumberCustomizableDirective, selector: "[bbProductNumberCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductNumberCustomizable]',
                }]
        }] });

const sharedPipes = [ProductNumberPipeModule];
const components$d = [ProductNumberComponent];
const directives$6 = [ProductNumberCustomizableDirective];
const uiModules$g = [ButtonModule, IconModule, TooltipModule];
class ProductNumberModule {
}
ProductNumberModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductNumberModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberModule, declarations: [ProductNumberComponent, ProductNumberCustomizableDirective], imports: [CommonModule, ProductNumberPipeModule, ButtonModule, IconModule, TooltipModule], exports: [ProductNumberPipeModule, ProductNumberComponent, ProductNumberCustomizableDirective] });
ProductNumberModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberModule, imports: [[CommonModule, ...sharedPipes, ...uiModules$g], ProductNumberPipeModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...sharedPipes, ...uiModules$g],
                    declarations: [...components$d, ...directives$6],
                    exports: [...sharedPipes, ...components$d, ...directives$6],
                }]
        }] });

class CreditLimitAttributeComponent {
    constructor() {
        /**
         * Custom value template reference
         */
        this.contentRef = '';
        /**
         * Attribute title
         */
        this.title = '';
        /**
         * Defines whether to color the amount field
         *
         * @default false
         */
        this.isAmountColored = false;
        /**
         * Whether currency should be displayed as a sign.
         *
         * @default true.
         */
        this.useShortCurrency = true;
        /**
         * Specifies whether to use small screen layout
         *
         * @default false.
         */
        this.isSmallScreen = false;
        /**
         * Specifies whether to use extra small screen layout
         *
         * @default false.
         */
        this.isExtraSmallScreen = false;
        /**
         * Specifies whether container size is small
         */
        this.responsiveView = 'screen';
    }
}
CreditLimitAttributeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditLimitAttributeComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CreditLimitAttributeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CreditLimitAttributeComponent, selector: "bb-credit-limit-attribute", inputs: { title: "title", color: "color", currency: "currency", amount: "amount", isAmountColored: "isAmountColored", useShortCurrency: "useShortCurrency", isSmallScreen: "isSmallScreen", isExtraSmallScreen: "isExtraSmallScreen", responsiveView: "responsiveView" }, viewQueries: [{ propertyName: "contentRef", first: true, predicate: ["contentRef"], descendants: true }], ngImport: i0, template: "<div [ngClass]=\"{\n  'bb-stack justify-content-between': responsiveView === 'tablet' || responsiveView === 'mobile',\n  'bb-stack--align-top': responsiveView === 'mobile'\n}\">\n  <!-- title -->\n  <div class=\"bb-text-support bb-subtitle\"\n       [ngClass]=\"{\n         'bb-block bb-block--xs': responsiveView === 'screen',\n         'bb-stack__item': responsiveView === 'tablet' || responsiveView === 'mobile'\n       }\"\n  >\n    <div *ngIf=\"color\"\n         class=\"\n         rounded-circle\n         bb-credit-limit-attribute__color-mark\n         bb-credit-limit__color--{{color}}\n       \"></div>\n    <span data-role=\"credit-limit-attribute-title\">{{title}}</span>\n  </div>\n\n  <div [ngClass]=\"{\n         'bb-stack__item': responsiveView === 'tablet' || responsiveView === 'mobile'\n  }\">\n    <!-- default value -->\n    <bb-amount-ui\n            *ngIf=\"!contentRef && amount\"\n            data-role=\"credit-limit-attribute-value\"\n            class=\"bb-stack__item bb-text-semi-bold {{ isAmountColored ? 'bb-credit-limit-attribute__value--' + color : '' }}\"\n            [class.bb-credit-limit-attribute__value]=\"color\"\n            [ngClass]=\"{\n              'bb-subtitle': responsiveView === 'mobile'\n            }\"\n            [currency]=\"currency\"\n            [amount]=\"amount\"\n            [mapCurrency]=\"useShortCurrency\"\n    ></bb-amount-ui>\n\n    <!-- custom value -->\n    <ng-content #contentRef></ng-content>\n  </div>\n</div>\n", components: [{ type: i2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditLimitAttributeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-credit-limit-attribute',
                    templateUrl: './credit-limit-attribute.component.html',
                }]
        }], propDecorators: { contentRef: [{
                type: ViewChild,
                args: ['contentRef']
            }], title: [{
                type: Input
            }], color: [{
                type: Input
            }], currency: [{
                type: Input
            }], amount: [{
                type: Input
            }], isAmountColored: [{
                type: Input
            }], useShortCurrency: [{
                type: Input
            }], isSmallScreen: [{
                type: Input
            }], isExtraSmallScreen: [{
                type: Input
            }], responsiveView: [{
                type: Input
            }] } });

/**
 * Displays a credit limit minimum payment info
 *
 * @usageNotes
 *
 * ```html
 * <bb-credit-limit-minimum-payment
 *   [minimumPayment]="100"
 *   [minimumPaymentDueDate]="'2021-03-15T16:41:41.090Z'"
 *   [currency]="EUR"
 * ></bb-credit-limit-minimum-payment>
 * ```
 *
 * @ngModule CreditLimitModule
 */
class CreditLimitMinimumPaymentComponent {
    constructor() {
        /**
         * Whether currency should be displayed as a sign.
         *
         * @default true.
         */
        this.useShortCurrency = true;
        /**
         * Specifies whether to use small screen layout
         *
         * @default false.
         */
        this.isSmallScreen = false;
        /**
         * Specifies whether to use extra small screen layout
         *
         * @default false.
         */
        this.isExtraSmallScreen = false;
        /**
         * Specifies whether container size is small
         */
        this.responsiveView = 'screen';
    }
}
CreditLimitMinimumPaymentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditLimitMinimumPaymentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CreditLimitMinimumPaymentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CreditLimitMinimumPaymentComponent, selector: "bb-credit-limit-minimum-payment", inputs: { minimumPayment: "minimumPayment", minimumPaymentDueDate: "minimumPaymentDueDate", currency: "currency", useShortCurrency: "useShortCurrency", isSmallScreen: "isSmallScreen", isExtraSmallScreen: "isExtraSmallScreen", responsiveView: "responsiveView" }, ngImport: i0, template: "<bb-credit-limit-attribute\n  class=\"bb-text-align-right--md-up\"\n  data-role=\"credit-limit-minimum-payment\"\n  title=\"Minimum Payment\"\n  i18n-title=\"Minimum Payment|Credit limit attribute: Minimum Payment@@bb-credit-limit-attribute-minimum-payment\"\n  [responsiveView]=\"responsiveView\"\n>\n  <div class=\"bb-stack bb-stack--wrap bb-stack--density-xs bb-text-semi-bold\"\n       [ngClass]=\"{\n         'bb-subtitle, justify-content-end': responsiveView === 'mobile' || responsiveView === 'tablet'\n       }\"\n       data-role=\"credit-limit-minimum-payment-value\"\n  >\n    <bb-amount-ui\n      class=\"bb-stack__item\"\n      [currency]=\"currency\"\n      [amount]=\"minimumPayment\"\n      [mapCurrency]=\"useShortCurrency\">\n    </bb-amount-ui>\n\n    <ng-container *ngIf=\"minimumPaymentDueDate\">\n      <div class=\"bb-stack__break bb-stack__break--xs-down\"></div>\n      <span class=\"bb-stack__item\"\n            i18n=\"due|Minimum payment: due to date@@bb-credit-limit-attribute-minimum-payment-due\">\n        due\n      </span>\n      <span class=\"bb-stack__item\">\n        {{minimumPaymentDueDate | bbDate}}\n      </span>\n    </ng-container>\n  </div>\n</bb-credit-limit-attribute>\n", components: [{ type: CreditLimitAttributeComponent, selector: "bb-credit-limit-attribute", inputs: ["title", "color", "currency", "amount", "isAmountColored", "useShortCurrency", "isSmallScreen", "isExtraSmallScreen", "responsiveView"] }, { type: i2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "bbDate": i1$2.BbDatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditLimitMinimumPaymentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-credit-limit-minimum-payment',
                    templateUrl: './credit-limit-minimum-payment.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { minimumPayment: [{
                type: Input
            }], minimumPaymentDueDate: [{
                type: Input
            }], currency: [{
                type: Input
            }], useShortCurrency: [{
                type: Input
            }], isSmallScreen: [{
                type: Input
            }], isExtraSmallScreen: [{
                type: Input
            }], responsiveView: [{
                type: Input
            }] } });

/**
 * Displays a credit limit status bar
 *
 * @usageNotes
 *
 * ```html
 * <bb-credit-limit-status-bar-ui
 *   [reserved]="100"
 *   [owed]="1000"
 *   [leftToSpend]="400"
 * ></bb-credit-limit-status-bar-ui>
 * ```
 *
 * @ngModule CreditLimitModule
 */
class CreditLimitStatusBarComponent {
    constructor() {
        /**
         * Defines whether to display credit limit status bar in "Emptied" of "Filled" view mode. Default "Emptied"
         */
        this.viewMode = 'emptied';
    }
    /**
     * Aria labels for "reserved", "overdue", "owed" and "leftToSpend" values.
     */
    get valueAriaLabels() {
        return {
            reservedValue: $localize `:Reserved value a11y@@product-summary.credit-limit-status-bar.a11y.reserved:Reserved ${this.formatNumberForReading(this.reservedPercent)}%`,
            overdueValue: $localize `:Overdue value a11y@@product-summary.credit-limit-status-bar.a11y.overdue:Overdue ${this.formatNumberForReading(this.overduePercent)}%`,
            owedValue: $localize `:Owed value a11y@@product-summary.credit-limit-status-bar.a11y.owed:Owed ${this.formatNumberForReading(this.owedPercent)}%`,
            leftToSpendValue: $localize `:Left to spend value a11y@@product-summary.credit-limit-status-bar.a11y.leftToSpend:Left to spend ${this.formatNumberForReading(this.leftToSpendPercent)}%`,
        };
    }
    /**
     * Displayed width of "Reserved" amount.
     */
    get reservedWidth() {
        return this.reservedPercent > 0 ? `${this.reservedPercent}%` : '0';
    }
    /**
     * Displayed width of "Overdue" amount.
     */
    get overdueWidth() {
        const reservedWidth = new BigNumber(this.overduePercent).plus(this.reservedPercent).toNumber();
        return this.overduePercent > 0 ? `${reservedWidth}%` : '0';
    }
    /**
     * Displayed width of "Owed" amount.
     */
    get owedWidth() {
        const owedValue = this.toValidValue(this.owed);
        const filledValue = new BigNumber(this.owedPercent).plus(this.overduePercent).plus(this.reservedPercent).toNumber();
        const filledWidth = owedValue !== 0 ? `${filledValue}%` : '0';
        const emptiedWidth = owedValue !== 0 ? '100%' : '0';
        return this.viewMode === 'emptied' ? emptiedWidth : filledWidth;
    }
    /**
     * Displayed width of "Left to spend" amount.
     */
    get leftToSpendWidth() {
        const leftToSpendValue = this.toValidValue(this.leftToSpend);
        const emptiedValue = new BigNumber(this.leftToSpendPercent)
            .plus(this.overduePercent)
            .plus(this.reservedPercent)
            .toNumber();
        const emptiedWidth = leftToSpendValue !== 0 ? `${emptiedValue}%` : '0';
        const filledWidth = leftToSpendValue !== 0 ? '100%' : '0';
        return this.viewMode === 'emptied' ? emptiedWidth : filledWidth;
    }
    /**
     * Minimum size of "Overdue" amount.
     */
    get overdueMinSize() {
        const reservedValue = this.toValidValue(this.reserved);
        return reservedValue > 0 ? 'md' : 'sm';
    }
    /**
     * Minimum size of primary amount.
     */
    get primaryMinSize() {
        const reservedValue = this.toValidValue(this.reserved);
        const overdueValue = this.toValidValue(this.overdue);
        return reservedValue > 0 && overdueValue > 0 ? 'lg' : reservedValue > 0 || overdueValue > 0 ? 'md' : 'sm';
    }
    get reservedPercent() {
        return this.getPercentageOfLimit(this.reserved);
    }
    get overduePercent() {
        return this.getPercentageOfLimit(this.overdue);
    }
    get owedPercent() {
        return this.getPercentageOfLimit(this.owed);
    }
    get leftToSpendPercent() {
        return this.getPercentageOfLimit(this.leftToSpend);
    }
    formatNumberForReading(value, decimalPlaces = 2) {
        const number = new BigNumber(value);
        return number.decimalPlaces() > 0 ? number.toFormat(decimalPlaces) : value.toString();
    }
    getPercentageOfLimit(value) {
        const validValue = this.toValidValue(value);
        return validValue !== 0 ? new BigNumber(validValue).dividedBy(this.limit).multipliedBy(100).toNumber() : 0;
    }
    get limit() {
        const reservedValue = this.toValidValue(this.reserved);
        const overdueValue = this.toValidValue(this.overdue);
        const owedValue = this.toValidValue(this.owed);
        const leftToSpendValue = this.toValidValue(this.leftToSpend);
        return new BigNumber(reservedValue).plus(overdueValue).plus(owedValue).plus(leftToSpendValue).toNumber();
    }
    toValidValue(value) {
        return value !== undefined && !Number.isNaN(value) ? Math.abs(value) : 0;
    }
}
CreditLimitStatusBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditLimitStatusBarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CreditLimitStatusBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CreditLimitStatusBarComponent, selector: "bb-credit-limit-status-bar-ui", inputs: { viewMode: "viewMode", reserved: "reserved", overdue: "overdue", owed: "owed", leftToSpend: "leftToSpend" }, ngImport: i0, template: "<div class=\"bb-credit-limit-status-bar\">\n  <span\n    class=\"sr-only\"\n    data-role=\"title\"\n    aria-label=\"Credit limit status bar\"\n    i18n-aria-label=\"Credit limit status bar@@product-summary.credit-limit-status-bar.a11y.title\"\n  ></span>\n\n  <ng-container *ngTemplateOutlet=\"viewMode === 'emptied' ? owedValue : leftToSpendValue; context: { color: 'secondary' }\"></ng-container>\n  <ng-container *ngTemplateOutlet=\"viewMode === 'emptied' ? leftToSpendValue : owedValue; context: { color: 'primary' }\"></ng-container>\n\n  <ng-template #owedValue let-color=\"color\">\n    <div\n      *ngIf=\"owed\"\n      [style.width]=\"owedWidth\"\n      class=\"bb-credit-limit-status-bar__value bb-credit-limit-status-bar__value--{{primaryMinSize}} bb-credit-limit__color--{{color}}\"\n      data-role=\"owed-value\"\n      [attr.aria-label]=\"valueAriaLabels.owedValue\"\n    ></div>\n  </ng-template>\n  <ng-template #leftToSpendValue let-color=\"color\">\n    <div\n      *ngIf=\"leftToSpend\"\n      [style.width]=\"leftToSpendWidth\"\n      class=\"bb-credit-limit-status-bar__value bb-credit-limit-status-bar__value--{{primaryMinSize}} bb-credit-limit__color--{{color}}\"\n      data-role=\"left-to-spend-value\"\n      [attr.aria-label]=\"valueAriaLabels.leftToSpendValue\"\n    ></div>\n  </ng-template>\n  <div\n    *ngIf=\"overdue\"\n    [style.width]=\"overdueWidth\"\n    class=\"bb-credit-limit-status-bar__value bb-credit-limit-status-bar__value--{{overdueMinSize}} bb-credit-limit__color--danger\"\n    data-role=\"overdue-value\"\n    [attr.aria-label]=\"valueAriaLabels.overdueValue\"\n  ></div>\n  <div\n    *ngIf=\"reserved\"\n    [style.width]=\"reservedWidth\"\n    class=\"bb-credit-limit-status-bar__value bb-credit-limit-status-bar__value--sm bb-credit-limit__color--warning\"\n    data-role=\"reserved-value\"\n    [attr.aria-label]=\"valueAriaLabels.reservedValue\"\n  ></div>\n</div>\n", directives: [{ type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditLimitStatusBarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-credit-limit-status-bar-ui',
                    templateUrl: './credit-limit-status-bar.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { viewMode: [{
                type: Input
            }], reserved: [{
                type: Input
            }], overdue: [{
                type: Input
            }], owed: [{
                type: Input
            }], leftToSpend: [{
                type: Input
            }] } });

/**
 * Displays credit limit of the passed product.
 *
 * @usageNotes
 *
 * ### Usage example
 * ```
 * <bb-credit-limit
 *   [product]=product
 *   viewMode='filled'
 * ></bb-credit-limit>
 * ```
 *
 * @NgModule AccountHeaderModule
 */
class CreditLimitComponent extends ResponsiveContainerComponent {
    /**
     * Constructor
     *
     * @param el
     * @param changeDetector
     */
    constructor(el, changeDetector) {
        super(el, changeDetector);
        this.el = el;
        this.changeDetector = changeDetector;
        /**
         * View Mode. Can be "filled" or "emptied"
         *
         * @default "emptied"
         */
        this.viewMode = 'emptied';
        /**
         * Defines whether to show minimum payment information
         *
         * @default "true"
         */
        this.showMinimumPayment = true;
        /**
         * Whether currency should be displayed as a sign.
         *
         * @default true.
         */
        this.useShortCurrency = true;
        /**
         * Localization for account attributes
         */
        this.localization = {
            owed: $localize `:Owed|Credit limit attribute\: owed@@bb-credit-limit-attribute-owed:Owed`,
            reserved: $localize `:Reserved|Credit limit attribute\: reserved@@bb-credit-limit-attribute-reserved:Reserved`,
            overdue: $localize `:Overdue|Credit limit attribute\: reserved@@bb-credit-limit-attribute-overdue:Overdue`,
            leftToSpend: $localize `:Left to Spend|Credit limit attribute\: Left to Spend@@bb-credit-limit-attribute-left-to-spend:Left to Spend`,
            minimumPayment: $localize `:Minimum Payment|Credit limit attribute\: Minimum Payment@@bb-credit-limit-attribute-minimum-payment:Minimum Payment`,
            of: $localize `:of|Credit limit\: of total@@bb-credit-limit-attribute-value-of:of`,
        };
    }
}
CreditLimitComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditLimitComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
CreditLimitComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CreditLimitComponent, selector: "bb-credit-limit", inputs: { product: "product", viewMode: "viewMode", showMinimumPayment: "showMinimumPayment", useShortCurrency: "useShortCurrency" }, usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"product\">\n  <!-- viewMode: emptied -->\n  <ng-container *ngIf=\"viewMode === 'emptied'; else filledTemplate\">\n    <div class=\"bb-block bb-block--md\" data-role=\"credit-limit-emptied-mode-header\">\n      <!-- Left to Spend -->\n      <bb-credit-limit-attribute\n        *ngIf=\"product.remainingCredit | bbIsDefined\"\n        data-role=\"credit-limit-left-to-spend\"\n        [title]=\"localization.leftToSpend\"\n        color=\"primary\">\n        <div class=\"bb-stack bb-stack--density-xs\"\n             data-role=\"credit-limit-left-to-spend-value\">\n          <bb-amount-ui\n            class=\"bb-stack__item bb-heading-3\"\n            [currency]=\"product.currency\"\n            [amount]=\"product.remainingCredit | bbAbsoluteValue\"\n            [mapCurrency]=\"useShortCurrency\"\n          ></bb-amount-ui>\n          <ng-container *ngIf=\"product.creditLimit\">\n            <span class=\"bb-stack__item bb-text-support bb-subtitle\">{{localization.of}}</span>\n            <bb-amount-ui\n              class=\"bb-stack__item bb-text-support bb-subtitle\"\n              [currency]=\"product.currency\"\n              [amount]=\"product.creditLimit | bbAbsoluteValue\"\n              [mapCurrency]=\"useShortCurrency\"\n            ></bb-amount-ui>\n          </ng-container>\n        </div>\n      </bb-credit-limit-attribute>\n    </div>\n\n    <div class=\"bb-block bb-block--md\">\n      <!-- Credit limit status bar -->\n      <ng-container *ngTemplateOutlet=\"creditLimitStatusBar\"></ng-container>\n    </div>\n\n    <div [ngClass]=\"{\n           'bb-stack justify-content-between': responsiveView === 'screen'\n         }\"\n    >\n      <!-- Overdue -->\n      <ng-container *ngTemplateOutlet=\"overdueAttribute\"></ng-container>\n      <!-- Reserved -->\n      <ng-container *ngTemplateOutlet=\"reservedAttribute\"></ng-container>\n\n      <!-- Owed -->\n      <bb-credit-limit-attribute\n        [class.bb-stack__item]=\"responsiveView === 'screen'\"\n        *ngIf=\"product.creditLimitUsage\"\n        data-role=\"credit-limit-owed\"\n        [title]=\"localization.owed\"\n        color=\"secondary\"\n        [currency]=\"product.currency\"\n        [amount]=\"product.creditLimitUsage | bbAbsoluteValue\"\n        [useShortCurrency]=\"useShortCurrency\"\n        [responsiveView]=\"responsiveView\"\n      >\n      </bb-credit-limit-attribute>\n\n      <ng-container *ngIf=\"showMinimumPayment && product.minimumPayment\">\n        <div *ngIf=\"responsiveView === 'tablet'\" class=\"bb-block bb-block--lg\"></div>\n        <bb-credit-limit-minimum-payment\n          [minimumPayment]=\"product.minimumPayment | bbAbsoluteValue\"\n          [minimumPaymentDueDate]=\"product.minimumPaymentDueDate\"\n          [currency]=\"product.currency\"\n          [useShortCurrency]=\"useShortCurrency\"\n          [responsiveView]=\"responsiveView\"\n        ></bb-credit-limit-minimum-payment>\n      </ng-container>\n    </div>\n  </ng-container>\n\n  <!-- viewMode: filled -->\n  <ng-template #filledTemplate>\n    <div class=\"bb-block bb-block--md\" data-role=\"credit-limit-filled-mode-header\">\n      <!-- Owed -->\n      <bb-credit-limit-attribute\n        *ngIf=\"product.creditLimitUsage | bbIsDefined\"\n        data-role=\"credit-limit-owed\"\n        [title]=\"localization.owed\"\n        color=\"primary\">\n        <div class=\"bb-stack bb-stack--density-xs\"\n             data-role=\"credit-limit-owed-value\">\n          <bb-amount-ui\n            class=\"bb-stack__item bb-heading-3\"\n            [currency]=\"product.currency\"\n            [amount]=\"product.creditLimitUsage | bbAbsoluteValue\"\n            [mapCurrency]=\"useShortCurrency\"\n          ></bb-amount-ui>\n          <ng-container *ngIf=\"product.creditLimit\">\n            <span class=\"bb-stack__item bb-text-support bb-subtitle\">{{localization.of}}</span>\n            <bb-amount-ui\n              class=\"bb-stack__item bb-text-support bb-subtitle\"\n              [currency]=\"product.currency\"\n              [amount]=\"product.creditLimit | bbAbsoluteValue\"\n              [mapCurrency]=\"useShortCurrency\"\n            ></bb-amount-ui>\n          </ng-container>\n        </div>\n      </bb-credit-limit-attribute>\n    </div>\n\n    <div class=\"bb-block bb-block--md\">\n      <!-- Credit limit status bar -->\n      <ng-container *ngTemplateOutlet=\"creditLimitStatusBar\"></ng-container>\n    </div>\n\n    <div [ngClass]=\"{\n           'bb-stack justify-content-between': responsiveView === 'screen'\n         }\"\n    >\n      <!-- Overdue -->\n      <ng-container *ngTemplateOutlet=\"overdueAttribute\"></ng-container>\n      <!-- Reserved -->\n      <ng-container *ngTemplateOutlet=\"reservedAttribute\"></ng-container>\n\n      <!-- Left to Spend -->\n      <bb-credit-limit-attribute\n        *ngIf=\"product.remainingCredit\"\n        [class.bb-stack__item]=\"responsiveView === 'screen'\"\n        data-role=\"credit-limit-left-to-spend\"\n        [title]=\"localization.leftToSpend\"\n        color=\"secondary\"\n        [currency]=\"product.currency\"\n        [amount]=\"product.remainingCredit | bbAbsoluteValue\"\n        [useShortCurrency]=\"useShortCurrency\"\n        [responsiveView]=\"responsiveView\"\n      >\n      </bb-credit-limit-attribute>\n\n      <ng-container *ngIf=\"showMinimumPayment && product.minimumPayment\">\n        <div *ngIf=\"responsiveView === 'tablet'\" class=\"bb-block bb-block--lg\"></div>\n        <bb-credit-limit-minimum-payment\n          [minimumPayment]=\"product.minimumPayment | bbAbsoluteValue\"\n          [minimumPaymentDueDate]=\"product.minimumPaymentDueDate\"\n          [currency]=\"product.currency\"\n          [useShortCurrency]=\"useShortCurrency\"\n          [responsiveView]=\"responsiveView\"\n        ></bb-credit-limit-minimum-payment>\n      </ng-container>\n    </div>\n  </ng-template>\n</ng-container>\n\n<ng-template #overdueAttribute>\n  <bb-credit-limit-attribute\n    *ngIf=\"product.amountInArrear\"\n    [ngClass]=\"{\n      'bb-stack__item': responsiveView === 'screen',\n      'bb-block bb-block--sm': responsiveView === 'tablet'\n    }\"\n    data-role=\"credit-limit-overdue\"\n    [title]=\"localization.overdue\"\n    color=\"danger\"\n    [currency]=\"product.currency\"\n    [amount]=\"product.amountInArrear | bbAbsoluteValue\"\n    [isAmountColored]=\"true\"\n    [useShortCurrency]=\"useShortCurrency\"\n    [responsiveView]=\"responsiveView\"\n  >\n  </bb-credit-limit-attribute>\n</ng-template>\n\n<ng-template #reservedAttribute>\n  <bb-credit-limit-attribute\n    *ngIf=\"product.reservedAmount\"\n    [ngClass]=\"{\n      'bb-stack__item': responsiveView === 'screen',\n      'bb-block bb-block--sm': responsiveView === 'tablet'\n    }\"\n    data-role=\"credit-limit-reserved\"\n    [title]=\"localization.reserved\"\n    color=\"warning\"\n    [currency]=\"product.currency\"\n    [amount]=\"product.reservedAmount | bbAbsoluteValue\"\n    [useShortCurrency]=\"useShortCurrency\"\n    [responsiveView]=\"responsiveView\"\n  >\n  </bb-credit-limit-attribute>\n</ng-template>\n\n<ng-template #creditLimitStatusBar>\n  <bb-credit-limit-status-bar-ui\n    *ngIf=\"product.reservedAmount || product.amountInArrear || product.creditLimitUsage || product.remainingCredit\"\n    aria-hidden=\"true\"\n    data-role=\"credit-limit-status-bar\"\n    [reserved]=\"product.reservedAmount | bbAbsoluteValue\"\n    [overdue]=\"product.amountInArrear | bbAbsoluteValue\"\n    [owed]=\"product.creditLimitUsage | bbAbsoluteValue\"\n    [leftToSpend]=\"product.remainingCredit | bbAbsoluteValue\"\n    [viewMode]=\"viewMode\"\n  ></bb-credit-limit-status-bar-ui>\n</ng-template>\n", components: [{ type: CreditLimitAttributeComponent, selector: "bb-credit-limit-attribute", inputs: ["title", "color", "currency", "amount", "isAmountColored", "useShortCurrency", "isSmallScreen", "isExtraSmallScreen", "responsiveView"] }, { type: i2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: CreditLimitMinimumPaymentComponent, selector: "bb-credit-limit-minimum-payment", inputs: ["minimumPayment", "minimumPaymentDueDate", "currency", "useShortCurrency", "isSmallScreen", "isExtraSmallScreen", "responsiveView"] }, { type: CreditLimitStatusBarComponent, selector: "bb-credit-limit-status-bar-ui", inputs: ["viewMode", "reserved", "overdue", "owed", "leftToSpend"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "bbIsDefined": i6.IsDefinedPipe, "bbAbsoluteValue": i6.AbsoluteValuePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditLimitComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-credit-limit',
                    templateUrl: './credit-limit.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { product: [{
                type: Input
            }], viewMode: [{
                type: Input
            }], showMinimumPayment: [{
                type: Input
            }], useShortCurrency: [{
                type: Input
            }] } });

const uiModules$f = [AmountModule, BbDatePipeModule, FormatPipeModule, ValidationModule];
const components$c = [
    CreditLimitComponent,
    CreditLimitAttributeComponent,
    CreditLimitStatusBarComponent,
    CreditLimitMinimumPaymentComponent,
];
class CreditLimitModule {
}
CreditLimitModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditLimitModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CreditLimitModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditLimitModule, declarations: [CreditLimitComponent,
        CreditLimitAttributeComponent,
        CreditLimitStatusBarComponent,
        CreditLimitMinimumPaymentComponent], imports: [CommonModule, AmountModule, BbDatePipeModule, FormatPipeModule, ValidationModule], exports: [CreditLimitComponent,
        CreditLimitAttributeComponent,
        CreditLimitStatusBarComponent,
        CreditLimitMinimumPaymentComponent] });
CreditLimitModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditLimitModule, imports: [[CommonModule, ...uiModules$f]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditLimitModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules$f],
                    declarations: [...components$c],
                    exports: [...components$c],
                }]
        }] });

/**
 *
 * @usageNotes
 *
 * ### Usage example
 * ```
 * <bb-account-header
 *   [product]="product"
 *   [canEditAlias]="true"
 *   [isBalanceTypeVisible]="true"
 *   [mapCurrency]="true"
 * ></bb-account-header>
 * ```
 *
 * @NgModule AccountHeaderModule
 */
class AccountHeaderComponent {
    constructor() {
        /**
         * Localisation for aliasHelpText
         */
        this.aliasHelpTextLocalization = {
            ACCOUNT: $localize `:This is visible to the whole company|Subtitle. Alias account visibility level@@product-summary-account-details-header.alias-visibility-level.account:This is visible to the whole company`,
            USER: $localize `:This is only visible to you|Subtitle. Alias user visibility level@@product-summary-account-details-header.alias-visibility-level.user:This is only visible to you`,
        };
        /**
         * Defines if alias can be edited
         */
        this.canEditAlias = false;
        /**
         * Defines visibility level of the account alis.
         *
         * @default 'USER'
         */
        this.aliasLevel = AccountAliasDisplayingLevel.USER;
        /**
         * Defines visibility of the balance.
         *
         * @default true
         */
        this.showBalance = true;
        /**
         * Defines visibility of the balance type.
         *
         * @default true
         */
        this.isBalanceTypeVisible = true;
        /**
         * Defines visibility of the logo
         *
         * @default true
         */
        this.isLogoVisible = true;
        /**
         * Whether currency local should be transformed to symbol.
         *
         * @default false.
         */
        this.mapCurrency = false;
        /**
         * Event (Output) that emits when item alias is changed
         */
        this.aliasUpdated = new EventEmitter();
        /**
         * Copy of product.displayName to be displayed and edited
         *
         * @default ""
         */
        this.displayName = '';
        /**
         * Flag to manage "confirm alias update" modal
         *
         * @default false
         */
        this.isVisibleAliasModal = false;
        /**
         * Maximum length of product item aliases
         *
         * @default UserPreferencesValidationSettings.ALIAS_MAX_LENGTH (50)
         */
        this.aliasMaxLength = UserPreferencesValidationSettings.ALIAS_MAX_LENGTH;
        /**
         * Options for the alias modal window
         */
        this.modalOptions = {
            centered: true,
            backdrop: 'static',
        };
    }
    /**
     * Product type data to display account info
     *
     * @default undefined
     */
    set product(value) {
        this.setDisplayName((value === null || value === void 0 ? void 0 : value.displayName) || '');
        this._product = value;
    }
    get product() {
        return this._product;
    }
    /**
     * Indicates whether the account alias is being edited
     */
    get aliasEditMode() {
        var _a;
        return !!this.accountAliasEditor && ((_a = this.accountAliasEditor) === null || _a === void 0 ? void 0 : _a.editMode);
    }
    /**
     * Event handler for the `accept` event of `bb-input-inline-edit-ui`
     * if `alias` is empty - emits `aliasUpdated`
     * if `alias` isn't empty and differ to previous value - opens a confirmation modal
     *
     * @param alias
     */
    onAliasEdit(alias) {
        var _a;
        if (alias === '') {
            this.updateAlias(alias);
        }
        else if (alias !== ((_a = this._product) === null || _a === void 0 ? void 0 : _a.displayName)) {
            this.displayName = alias;
            if (this.aliasLevel === AccountAliasDisplayingLevel.USER) {
                this.updateAlias(this.displayName);
            }
            if (this.aliasLevel === AccountAliasDisplayingLevel.ACCOUNT) {
                this.isVisibleAliasModal = true;
            }
        }
    }
    /**
     * Event handler for the `confirm` event of `bb-modal-ui`
     * closes the modal and sets previous `displayName`
     */
    onModalConfirm() {
        this.updateAlias(this.displayName);
    }
    /**
     * Event handler for the `cancel` event of `bb-modal-ui`
     * closes the modal and sets previous `displayName`
     */
    onModalCancel() {
        var _a;
        this.closeEditAliasModal();
        this.setDisplayName(((_a = this.product) === null || _a === void 0 ? void 0 : _a.displayName) || '');
    }
    /**
     * Closes the alias modal
     *
     * @private
     */
    closeEditAliasModal() {
        this.isVisibleAliasModal = false;
    }
    /**
     * Sets the passed value to the inline editor
     *
     * @param value
     * @private
     */
    setDisplayName(value) {
        var _a;
        this.displayName = value;
        if (this.accountAliasEditor) {
            this.accountAliasEditor.writeValue(this.displayName);
            (_a = this.accountAliasEditor.vForm) === null || _a === void 0 ? void 0 : _a.controls.inputInline.setValue(this.displayName);
        }
    }
    /**
     * Emits the passed alias to `aliasUpdated`
     *
     * @param alias
     * @private
     */
    updateAlias(alias) {
        this.aliasUpdated.emit(alias);
        this.closeEditAliasModal();
    }
}
AccountHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AccountHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountHeaderComponent, selector: "bb-account-header", inputs: { product: "product", canEditAlias: "canEditAlias", aliasLevel: "aliasLevel", showBalance: "showBalance", isBalanceTypeVisible: "isBalanceTypeVisible", isLogoVisible: "isLogoVisible", mapCurrency: "mapCurrency" }, outputs: { aliasUpdated: "aliasUpdated" }, viewQueries: [{ propertyName: "accountAliasEditor", first: true, predicate: ["accountAliasEditor"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"product\">\n  <div class=\"bb-account-header bb-stack bb-stack--wrap bb-stack--align-top\"\n       data-role=\"account-header\"\n  >\n    <div class=\"bb-stack__item bb-stack__item--fill bb-stack\">\n      <bb-product-summary-account-logo\n        *ngIf=\"isLogoVisible && !aliasEditMode\"\n        class=\"bb-stack__item\"\n        data-role=\"account-header-logo\"\n        iconColor=\"secondary\"\n        iconSize=\"md\"\n        [logoSrc]=\"product?.financialInstitution?.logo\"\n        [productKindName]=\"product.productKindName\"></bb-product-summary-account-logo>\n\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <div\n          class=\"bb-account-header__title\"\n          data-role=\"account-header-title\"\n          [ngClass]=\"{\n          'bb-heading-3': !aliasEditMode,\n          'bb-block bb-block--xs': !aliasEditMode,\n          'bb-account-header__title--display-mode': !aliasEditMode\n        }\">\n          <div\n            *ngIf=\"product.financialInstitutionId | bbIsDefined\"\n            data-role=\"account-header-external-account-name\"\n          >\n            <span class=\"bb-stack__item bb-text-support bb-subtitle bb-text-bold\"\n                  data-role=\"account-header-external-bank-name\"\n                  *ngIf=\"product?.financialInstitution?.name; else externalBankNameDefault\">\n              {{product?.financialInstitution?.name}}\n            </span>\n            <ng-template #externalBankNameDefault>\n              <span class=\"bb-stack__item bb-text-support bb-subtitle bb-text-bold\"\n                    data-role=\"account-header-external-default-name\"\n                    i18n=\"External account|Default bank name for external accounts@@manage.account.item\">\n                External account\n              </span>\n            </ng-template>\n          </div>\n          <bb-input-inline-edit-ui\n            #accountAliasEditor\n            *ngIf=\"canEditAlias; else staticAccountAlias\"\n            [inputText]=\"displayName\"\n            [maxLength]=\"aliasMaxLength\"\n            [required]=\"false\"\n            (accept)=\"onAliasEdit($event)\"\n            ariaLabelEdit=\"Edit alias for {{displayName}}\"\n            i18n-ariaLabelEdit=\"Edit alias|Inline editor aria label\n          @@product-summary-account-details-header.edit-account-alias.aria-label\"\n            [hint]=\"aliasHelpTextLocalization[aliasLevel]\"\n          ></bb-input-inline-edit-ui>\n\n          <ng-template #staticAccountAlias>\n            {{ product?.displayName }}\n          </ng-template>\n        </div>\n        <bb-product-number\n          *ngIf=\"!aliasEditMode\"\n          class=\"bb-text-support bb-subtitle\"\n          data-role=\"account-header-number\"\n          [product]=\"product\"\n        ></bb-product-number>\n      </div>\n    </div>\n    <div class=\"bb-stack__break bb-stack__break--sm-down bb-block bb-block--md\"\n         *ngIf=\"showBalance && (product.availableBalance | bbIsDefined)\"\n    ></div>\n    <div class=\"bb-stack__item text-right bb-stack__item--push-right\"\n         *ngIf=\"showBalance && (product.availableBalance | bbIsDefined)\"\n         data-role=\"account-header-balance\">\n      <div class=\"bb-block bb-block--sm bb-text-support bb-subtitle\"\n           *ngIf=\"isBalanceTypeVisible\"\n           i18n=\"Available Balance|Available Balance label\n              @@account.details.current.account.label.availableBalance\"\n           data-role=\"account-header-balance-label\">\n        Available balance\n      </div>\n      <bb-amount-ui data-role=\"account-header-balance-value\"\n                    [ngClass]=\"{\n                      'bb-heading-1': !isBalanceTypeVisible,\n                      'bb-heading-2': isBalanceTypeVisible\n                    }\"\n                    [currency]=\"product.currency\"\n                    [amount]=\"product.availableBalance\"\n                    [mapCurrency]=\"mapCurrency\">\n      </bb-amount-ui>\n    </div>\n  </div>\n</ng-container>\n\n<bb-modal-ui\n        [isOpen]=\"isVisibleAliasModal\"\n        (cancel)=\"onModalCancel()\"\n        (confirm)=\"onModalConfirm()\"\n        [modalOptions]=\"modalOptions\"\n        data-role=\"account-header-modal\"\n>\n  <bb-modal-header-ui\n          title=\"This alias will be visible to users who have access to this account\"\n          i18n-title=\"This alias will be visible to users who have access to this account\n                    |Modal window title: update alias for all users\n                    @@product-summary-account-header.modal.title.update-account-alias\"\n  ></bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template\n            bbCustomModalBody\n            i18n=\"Are you sure to change the account alias?\n              |Modal window body: update account alias\n              @@product-summary-account-header.modal.body.update-account-alias\"\n    >\n      Are you sure to change the account alias?\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui\n          confirmText=\"Continue\"\n          i18n-confirmText=\"Continue|Modal window confirm alias update button\n            @@product-summary-account-header.modal.button.confirm-update-alias\"\n          cancelText=\"Cancel\"\n          i18n-cancelText=\"Cancel|Modal window cancel alias update button\n            @@product-summary-account-header.modal.button.cancel-update-alias\"\n  ></bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: ProductSummaryAccountLogoComponent, selector: "bb-product-summary-account-logo", inputs: ["logoSrc", "productKindName", "defaultProductKindName", "iconColor", "iconSize", "logoSize"] }, { type: i2$1.InputInlineEditComponent, selector: "bb-input-inline-edit-ui", inputs: ["state", "canEdit", "hasLoadingState", "inputInlineTemplate", "inputText", "maxLength", "minLength", "maxValue", "minValue", "autofocus", "ariaLabelAccept", "ariaLabelCancel", "ariaLabelEdit", "tooltipAccept", "tooltipCancel", "tooltipEdit", "autocomplete", "pattern", "hint"], outputs: ["stateChange", "cancel", "accept"] }, { type: ProductNumberComponent, selector: "bb-product-number", inputs: ["number", "product", "format", "type", "unmaskable", "masked"], outputs: ["mask", "unmask"] }, { type: i2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i5$1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i5$1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i5$1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i5$1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5$1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }], pipes: { "bbIsDefined": i6.IsDefinedPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-header',
                    templateUrl: './bb-account-header.component.html',
                }]
        }], propDecorators: { product: [{
                type: Input
            }], canEditAlias: [{
                type: Input
            }], aliasLevel: [{
                type: Input
            }], showBalance: [{
                type: Input
            }], isBalanceTypeVisible: [{
                type: Input
            }], isLogoVisible: [{
                type: Input
            }], mapCurrency: [{
                type: Input
            }], aliasUpdated: [{
                type: Output
            }], accountAliasEditor: [{
                type: ViewChild,
                args: ['accountAliasEditor']
            }] } });

const uiModules$e = [
    IconModule,
    ProductSummaryAccountLogoModule,
    InputInlineEditModule,
    ProductNumberModule,
    CreditLimitModule,
    AmountModule,
    ModalModule,
];
class AccountHeaderModule {
}
AccountHeaderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountHeaderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AccountHeaderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountHeaderModule, declarations: [AccountHeaderComponent], imports: [CommonModule, ValidationModule, IconModule,
        ProductSummaryAccountLogoModule,
        InputInlineEditModule,
        ProductNumberModule,
        CreditLimitModule,
        AmountModule,
        ModalModule], exports: [AccountHeaderComponent, IconModule,
        ProductSummaryAccountLogoModule,
        InputInlineEditModule,
        ProductNumberModule,
        CreditLimitModule,
        AmountModule,
        ModalModule] });
AccountHeaderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountHeaderModule, imports: [[CommonModule, ValidationModule, ...uiModules$e], IconModule,
        ProductSummaryAccountLogoModule,
        InputInlineEditModule,
        ProductNumberModule,
        CreditLimitModule,
        AmountModule,
        ModalModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountHeaderModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ValidationModule, ...uiModules$e],
                    declarations: [AccountHeaderComponent],
                    exports: [AccountHeaderComponent, ...uiModules$e],
                }]
        }] });

/**
 * Displays account graphical header
 *
 * @usageNotes
 *
 * ### Usage example
 * ```
 * <bb-account-graphical-header
 *   [product]="product"
 *   [canEditAlias]="true"
 *   [useShortCurrency]="false"
 *   [creditLimitViewMode]="emptied"
 *   [canRepay]="true"
 *   [canCashInAdvance]="true"
 *   [creditCardBackgroundType]="black-card"
 *   (aliasUpdated)="onAliasUpdated($event)"
 *   (repayInitiated)="onRepayInitiated()"
 *   (cashAdvanceInitiated)="onCashAdvanceInitiated()"
 * ></bb-account-graphical-header>
 * ```
 *
 * @NgModule AccountGraphicalHeaderModule
 */
class AccountGraphicalHeaderComponent extends ResponsiveContainerComponent {
    /**
     * @internal
     */
    constructor(el, changeDetector) {
        super(el, changeDetector);
        this.el = el;
        this.changeDetector = changeDetector;
        /**
         * Defines visibility level of the account alis.
         *
         * @default 'USER'
         */
        this.aliasLevel = AccountAliasDisplayingLevel.USER;
        /**
         * Defines if alias can be edited
         *
         * @default false
         */
        this.canEditAlias = false;
        /**
         * Whether currency should be displayed as a sign.
         *
         * @default true
         */
        this.useShortCurrency = true;
        /**
         * Credit Limit view mode. Can be "filled" or "emptied"
         *
         * @default "emptied"
         */
        this.creditLimitViewMode = 'emptied';
        /**
         * Defines if quick repay is allowed
         *
         * @default false
         */
        this.canRepay = false;
        /**
         * Defines if cash in advance is allowed
         *
         * @default false
         */
        this.canCashInAdvance = false;
        /**
         * Credit card background type
         *
         * @default "black-card"
         */
        this.creditCardBackgroundType = 'black-card';
        /**
         * Defines visibility of the logo
         *
         * @default false
         */
        this.isLogoVisible = false;
        /**
         * Event (Output) that emits when item alias is changed
         */
        this.aliasUpdated = new EventEmitter();
        /**
         * Event (Output) that emits when `repay` action initiated
         */
        this.repayInitiated = new EventEmitter();
        /**
         * Event (Output) that emits when `cash advance` action initiated
         */
        this.cashAdvanceInitiated = new EventEmitter();
    }
    /**
     * A configuration for graphical presentation of payment card
     */
    get graphicalCreditCardConfiguration() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        return {
            number: (_b = (_a = this.product) === null || _a === void 0 ? void 0 : _a.number) !== null && _b !== void 0 ? _b : '',
            vendor: (_e = (_d = (_c = this.product) === null || _c === void 0 ? void 0 : _c.cardDetails) === null || _d === void 0 ? void 0 : _d.cardProvider) !== null && _e !== void 0 ? _e : '',
            name: (_g = (_f = this.product) === null || _f === void 0 ? void 0 : _f.accountHolderNames) !== null && _g !== void 0 ? _g : '',
            expirationDate: ((_h = this.product) === null || _h === void 0 ? void 0 : _h.validThru) ? new Date((_j = this.product) === null || _j === void 0 ? void 0 : _j.validThru) : undefined,
            cardName: this.creditCardBackgroundType,
        };
    }
    /**
     * Event handler for the `click` event of `repay-button`;
     * Emits `arrangementId` to `repayInitiated`
     */
    repayButtonClicked() {
        this.repayInitiated.emit(this.getArrangementId());
    }
    /**
     * Event handler for the `click` event of `cash-advance-button`;
     * Emits `arrangementId` to `cashAdvanceInitiated`
     */
    cashAdvanceButtonClicked() {
        this.cashAdvanceInitiated.emit(this.getArrangementId());
    }
    /**
     * Returns arrangement id of the product
     *
     * @private
     */
    getArrangementId() {
        var _a;
        return (_a = this.product) === null || _a === void 0 ? void 0 : _a.id;
    }
}
AccountGraphicalHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountGraphicalHeaderComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
AccountGraphicalHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountGraphicalHeaderComponent, selector: "bb-account-graphical-header", inputs: { product: "product", aliasLevel: "aliasLevel", canEditAlias: "canEditAlias", useShortCurrency: "useShortCurrency", creditLimitViewMode: "creditLimitViewMode", canRepay: "canRepay", canCashInAdvance: "canCashInAdvance", creditCardBackgroundType: "creditCardBackgroundType", isLogoVisible: "isLogoVisible" }, outputs: { aliasUpdated: "aliasUpdated", repayInitiated: "repayInitiated", cashAdvanceInitiated: "cashAdvanceInitiated" }, usesInheritance: true, ngImport: i0, template: "<div\n  class=\"bb-account-graphical-header\"\n  data-role=\"account-graphical-header\"\n>\n  <div class=\"bb-stack bb-stack--align-top\">\n    <div class=\"bb-stack__item bb-stack__item--fill bb-stack__item--spacing-xl\">\n      <div class=\"bb-account-graphical-header__title\"\n           [ngClass]=\"{\n                'bb-stack__item--spacing-none': responsiveView === 'tablet',\n                'bb-block bb-block--xl': !accountHeader.aliasEditMode,\n                'bb-account-graphical-header__title--input-mode': accountHeader.aliasEditMode\n              }\">\n        <bb-account-header\n                data-role=\"bb-account-graphical-header-account-header\"\n                #accountHeader\n                [product]=\"product\"\n                [aliasLevel]=\"aliasLevel\"\n                [canEditAlias]=\"canEditAlias\"\n                [showBalance]=\"false\"\n                [isLogoVisible]=\"isLogoVisible\"\n                (aliasUpdated)=\"aliasUpdated.emit($event)\"\n        ></bb-account-header>\n      </div>\n      <div>\n        <bb-credit-limit\n                data-role=\"bb-account-graphical-header-credit-limit\"\n                [product]=\"product\"\n                [viewMode]=\"creditLimitViewMode\"\n                [showMinimumPayment]=\"responsiveView === 'tablet' || responsiveView === 'mobile'\"\n                [useShortCurrency]=\"useShortCurrency\"\n                [responsiveView]=\"responsiveView\"\n        ></bb-credit-limit>\n      </div>\n    </div>\n\n    <div class=\"bb-stack__item\" *ngIf=\"responsiveView === 'screen'\">\n      <bb-payment-card-ui\n              data-role=\"bb-account-graphical-header-payment-card\"\n              [paymentCard]=\"graphicalCreditCardConfiguration\"\n              [paymentCardNumberFormat]=\"'cardNumber' | bbProductNumberFormat\"\n      ></bb-payment-card-ui>\n    </div>\n  </div>\n\n  <div *ngIf=\"canRepay || canCashInAdvance || (responsiveView === 'screen' && product?.minimumPayment)\"\n       class=\"bb-block bb-block--lg\"></div>\n\n  <div class=\"bb-stack bb-stack--align-bottom\">\n    <div class=\"bb-stack_item bb-stack__item--fill\"  *ngIf=\"canRepay || canCashInAdvance\">\n      <div class=\"bb-stack bb-stack--wrap\"\n           [ngClass]=\"{\n                 'bb-stack--density-none': responsiveView === 'mobile'\n               }\">\n        <button\n                *ngIf=\"canRepay\"\n                class=\"bb-stack__item\"\n                [ngClass]=\"{\n                'bb-stack__item--fill': responsiveView === 'mobile'\n              }\"\n                bbButton\n                type=\"button\"\n                color=\"primary\"\n                data-role=\"account-graphical-header-repay-button\"\n                (click)=\"repayButtonClicked()\"\n        >\n          <bb-icon-ui name=\"call-received\"></bb-icon-ui>\n          <span i18n=\"Repay@@bb-product-summary-account-graphical.repay\">Repay</span>\n        </button>\n        <div *ngIf=\"canRepay && canCashInAdvance\" class=\"bb-stack__break bb-stack__break--down bb-stack__break--spacing-sm\"></div>\n        <button\n                *ngIf=\"canCashInAdvance\"\n                class=\"bb-stack__item\"\n                [ngClass]=\"{\n                'bb-stack__item--fill': responsiveView === 'mobile'\n              }\"\n                bbButton\n                type=\"button\"\n                color=\"secondary\"\n                data-role=\"account-graphical-header-cash-advance-button\"\n                (click)=\"cashAdvanceButtonClicked()\"\n        >\n          <bb-icon-ui name=\"call-made\"></bb-icon-ui>\n          <span i18n=\"Cash advance@@bb-product-summary-account-graphical.cash-advance\">Cash advance</span>\n        </button>\n      </div>\n    </div>\n\n    <div class=\"bb-stack_item bb-stack__item--push-right\"\n         *ngIf=\"responsiveView === 'screen' && product?.minimumPayment\">\n      <bb-credit-limit-minimum-payment\n              data-role=\"bb-account-graphical-header-minimum-payment\"\n              [minimumPayment]=\"product?.minimumPayment | bbAbsoluteValue\"\n              [minimumPaymentDueDate]=\"product?.minimumPaymentDueDate\"\n              [currency]=\"product?.currency\"\n              [useShortCurrency]=\"useShortCurrency\"\n      ></bb-credit-limit-minimum-payment>\n    </div>\n  </div>\n</div>\n", components: [{ type: AccountHeaderComponent, selector: "bb-account-header", inputs: ["product", "canEditAlias", "aliasLevel", "showBalance", "isBalanceTypeVisible", "isLogoVisible", "mapCurrency"], outputs: ["aliasUpdated"] }, { type: CreditLimitComponent, selector: "bb-credit-limit", inputs: ["product", "viewMode", "showMinimumPayment", "useShortCurrency"] }, { type: i3$1.PaymentCardComponent, selector: "bb-payment-card-ui", inputs: ["paymentCard", "paymentCardNumberFormat"] }, { type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: CreditLimitMinimumPaymentComponent, selector: "bb-credit-limit-minimum-payment", inputs: ["minimumPayment", "minimumPaymentDueDate", "currency", "useShortCurrency", "isSmallScreen", "isExtraSmallScreen", "responsiveView"] }], directives: [{ type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "bbProductNumberFormat": i6.ProductNumberFormatPipe, "bbAbsoluteValue": i6.AbsoluteValuePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountGraphicalHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-graphical-header',
                    templateUrl: './account-graphical-header.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { product: [{
                type: Input
            }], aliasLevel: [{
                type: Input
            }], canEditAlias: [{
                type: Input
            }], useShortCurrency: [{
                type: Input
            }], creditLimitViewMode: [{
                type: Input
            }], canRepay: [{
                type: Input
            }], canCashInAdvance: [{
                type: Input
            }], creditCardBackgroundType: [{
                type: Input
            }], isLogoVisible: [{
                type: Input
            }], aliasUpdated: [{
                type: Output
            }], repayInitiated: [{
                type: Output
            }], cashAdvanceInitiated: [{
                type: Output
            }] } });

const uiModules$d = [
    BbDatePipeModule,
    ButtonModule,
    PaymentCardModule,
    CreditLimitModule,
    AccountHeaderModule,
    ProductNumberPipeModule,
    ValidationModule,
    FormatPipeModule,
];
const components$b = [AccountGraphicalHeaderComponent];
class AccountGraphicalHeaderModule {
}
AccountGraphicalHeaderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountGraphicalHeaderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AccountGraphicalHeaderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountGraphicalHeaderModule, declarations: [AccountGraphicalHeaderComponent], imports: [CommonModule, BbDatePipeModule,
        ButtonModule,
        PaymentCardModule,
        CreditLimitModule,
        AccountHeaderModule,
        ProductNumberPipeModule,
        ValidationModule,
        FormatPipeModule], exports: [AccountGraphicalHeaderComponent] });
AccountGraphicalHeaderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountGraphicalHeaderModule, imports: [[CommonModule, ...uiModules$d]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountGraphicalHeaderModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules$d],
                    declarations: [...components$b],
                    exports: [...components$b],
                }]
        }] });

//TO DO add this component to ui-ang as `bb-account-selector-ui`
class CustomSingleSelectedItemLabelDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CustomSingleSelectedItemLabelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomSingleSelectedItemLabelDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CustomSingleSelectedItemLabelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomSingleSelectedItemLabelDirective, selector: "ng-template[bbCustomSingleSelectedItemLabel]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomSingleSelectedItemLabelDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCustomSingleSelectedItemLabel]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class CustomMultiSelectedItemsLabelDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CustomMultiSelectedItemsLabelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomMultiSelectedItemsLabelDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CustomMultiSelectedItemsLabelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomMultiSelectedItemsLabelDirective, selector: "ng-template[bbCustomMultiSelectedItemsLabel]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomMultiSelectedItemsLabelDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCustomMultiSelectedItemsLabel]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class CustomOptionsHeaderDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CustomOptionsHeaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomOptionsHeaderDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CustomOptionsHeaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomOptionsHeaderDirective, selector: "ng-template[bbCustomOptionsHeader]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomOptionsHeaderDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCustomOptionsHeader]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class CustomOptionItemDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CustomOptionItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomOptionItemDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CustomOptionItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomOptionItemDirective, selector: "ng-template[bbCustomOptionItem]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomOptionItemDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCustomOptionItem]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class CustomGroupItemsHeaderDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CustomGroupItemsHeaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomGroupItemsHeaderDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CustomGroupItemsHeaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomGroupItemsHeaderDirective, selector: "ng-template[bbCustomGroupItemsHeader]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomGroupItemsHeaderDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCustomGroupItemsHeader]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class CustomLoadingTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CustomLoadingTemplateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomLoadingTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CustomLoadingTemplateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomLoadingTemplateDirective, selector: "ng-template[bbCustomLoadingTemplate]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomLoadingTemplateDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCustomLoadingTemplate]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class AccountPickerComponent {
    constructor() {
        this.hostRef = this;
        /**
         *  Event (Output) that emits when search is performed. Outputs search term
         */
        this.search = new EventEmitter();
        /**
         *  Event (Output) that emits when clear search
         */
        this.clearSearch = new EventEmitter();
        /**
         *  Event (Output) that emits when scrollToEnd is triggered
         */
        this.scrollToEnd = new EventEmitter();
        /**
         *  Event (Output) that emits when item is removed
         */
        this.remove = new EventEmitter();
        /**
         *  Event (Output) that emits when item is added to selected items or removed from selected items.
         * When Multiple is true: Output is Items[]
         * When Multuple is false: Output is Item
         * TODO: rename 'change' output to avoid collisions with a native 'change' event
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.change = new EventEmitter();
        /**
         * Items array that this component displays
         */
        this.items = [];
        /**
         * Flag that indicates if select of multiple items is allowed
         */
        this.multiple = false;
        /**
         * Flag that indicates whether to close the menu when a value is selected
         */
        this.closeOnSelect = true;
        /**
         * Flag that indicates whether to allow to search for value. Default from ng-select false.
         */
        this.searchable = false;
        /**
         * Flag that indicates whether to allow to clear selected value.
         */
        this.clearable = false;
        /**
         * Placeholder text
         */
        this.placeholder = '';
        /**
         * Flag that indicates loading state from the outside (async items loading)
         */
        this.loading = false;
        /**
         * Flag that indicates opening direction of dropdown (bottom | top | auto)
         */
        this.dropdownPosition = 'auto';
        /**
         * Flag that indicates whether `scrollEnd` event should be emitted
         */
        this.disableScrollEnd = false;
        /**
         * Flag that indicates whether filtering of items is allowed.
         */
        this.filterItems = false;
        /**
         * Flag that indicates whether to mark first item as focused when opening/filtering.
         */
        this.markFirst = false;
        /**
         * Allow to group items by key or function expression
         */
        this.groupByFn = () => undefined;
        /**
         * Function expression to provide group value
         */
        this.groupValueFn = (name, children) => ({
            name,
            total: children.length,
        });
    }
    onSearch(event) {
        this.search.emit(event);
    }
    onClear() {
        this.clearSearch.emit();
    }
    onScrollToEnd() {
        if (!this.disableScrollEnd) {
            this.scrollToEnd.emit();
        }
    }
    onRemove(event) {
        this.remove.emit(event);
    }
    onChange(event) {
        this.change.emit(event);
    }
    selectAll() {
        this.selectedItems = this.items;
        this.onChange(this.selectedItems);
    }
    unselectAll() {
        this.selectedItems = [];
        this.onChange(this.selectedItems);
    }
}
AccountPickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountPickerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AccountPickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountPickerComponent, selector: "bb-account-picker", inputs: { items: "items", selectedItems: "selectedItems", multiple: "multiple", closeOnSelect: "closeOnSelect", searchable: "searchable", clearable: "clearable", placeholder: "placeholder", loading: "loading", dropdownPosition: "dropdownPosition", disableScrollEnd: "disableScrollEnd", filterItems: "filterItems", markFirst: "markFirst", groupByFn: "groupByFn", groupValueFn: "groupValueFn" }, outputs: { search: "search", clearSearch: "clearSearch", scrollToEnd: "scrollToEnd", remove: "remove", change: "change" }, queries: [{ propertyName: "customSingleSelectedItemLabel", first: true, predicate: CustomSingleSelectedItemLabelDirective, descendants: true }, { propertyName: "customMultiSelectedItemsLabel", first: true, predicate: CustomMultiSelectedItemsLabelDirective, descendants: true }, { propertyName: "customOptionsHeader", first: true, predicate: CustomOptionsHeaderDirective, descendants: true }, { propertyName: "customOptionItem", first: true, predicate: CustomOptionItemDirective, descendants: true }, { propertyName: "customGroupItemsHeader", first: true, predicate: CustomGroupItemsHeaderDirective, descendants: true }, { propertyName: "customLoadingTemplate", first: true, predicate: CustomLoadingTemplateDirective, descendants: true }], ngImport: i0, template: "<ng-select\n  #accountSelector\n  ngDefaultControl\n  bindLabel=\"name\"\n  name=\"bb-account-selector-ui\"\n  class=\"bb-account-selector-ui\"\n  [dropdownPosition]=\"dropdownPosition\"\n  [groupBy]=\"groupByFn\"\n  [groupValue]=\"groupValueFn\"\n  [(ngModel)]=\"selectedItems\"\n  [placeholder]=\"placeholder\"\n  [items]=\"items\"\n  [multiple]=\"multiple\"\n  [searchable]=\"searchable\"\n  [closeOnSelect]=\"closeOnSelect\"\n  [clearable]=\"clearable\"\n  [loading]=\"loading\"\n  [markFirst]=\"markFirst\"\n  (search)=\"onSearch($event)\"\n  (clear)=\"onClear()\"\n  (scrollToEnd)=\"onScrollToEnd()\"\n  (remove)=\"onRemove($event)\"\n  (change)=\"onChange($event)\"\n>\n  <!-- Template for item selected (single:ng-label-tmp) ng-label-tmp-->\n  <ng-template *ngIf=\"!multiple\" ng-label-tmp let-item=\"item\">\n    <ng-container\n      *ngIf=\"customSingleSelectedItemLabel; else nglabeltmp\"\n    >\n      <ng-container *ngTemplateOutlet=\"customSingleSelectedItemLabel?.templateRef;\n        context: { hostRef: hostRef, item: item }\">\n      </ng-container>\n    </ng-container>\n    <!-- Default template for ng-label-tmp -->\n    <ng-template #nglabeltmp>\n      <bb-product-item-basic-account-ui\n        [title]=\"item.name\"\n        [productNumber]=\"item.IBAN || item.BBAN || item.number\"\n        [amount]=\"item.bookedBalance || item.principalAmount || item.currentInvestmentValue\"\n        [currency]=\"item.currency\"\n        [active]=\"true\"\n      ></bb-product-item-basic-account-ui>\n    </ng-template>\n  </ng-template>\n\n  <!-- Template for items selected (multiple:ng-multi-label-tmp) -->\n  <ng-template *ngIf=\"multiple\" ng-multi-label-tmp let-items=\"items\">\n    <ng-container\n      *ngIf=\"customMultiSelectedItemsLabel; else ngmultilabeltmp\"\n    >\n      <ng-container *ngTemplateOutlet=\"customMultiSelectedItemsLabel?.templateRef;\n        context: { hostRef: hostRef, items: items }\">\n      </ng-container>\n    </ng-container>\n    <!-- Default template for ng-multi-label-tmp -->\n    <ng-template #ngmultilabeltmp>\n      <div class=\"px-3 d-flex flex-column\">\n        <span class=\"font-weight-bold\">\n          {{items.length}}\n          <span i18n=\"Selected Accounts|Selected Accounts multi label\n            @@bb-account-picker-ui.multi.label\"\n            >Selected Accounts</span>\n        </span>\n        <span>\n          <ng-container *ngFor=\"let item of items\">\n            {{item.name}}\n          </ng-container>\n        </span>\n      </div>\n    </ng-template>\n  </ng-template>\n\n<!-- Template for header, with search (ng-header-tmp) -->\n  <ng-template ng-header-tmp>\n    <ng-container\n      *ngIf=\"customOptionsHeader; else ngheadertmp\"\n    >\n      <ng-container *ngTemplateOutlet=\"customOptionsHeader?.templateRef;\n        context: { hostRef: hostRef, multiple: multiple, filterItems: filterItems }\">\n      </ng-container>\n    </ng-container>\n    <!-- Default template for ng-header-tmp -->\n    <ng-template #ngheadertmp>\n      <bb-input-text-ui\n        *ngIf=\"filterItems\"\n        placeholder=\"Filter\"\n        i18n-placeholder=\"Filter|Filter placeholder@@bb-account-picker-ui.filter.placeholder\"\n        (input)=\"accountSelector.filter($event.target.value)\"\n      >\n      </bb-input-text-ui>\n      <bb-search-box-ui\n        *ngIf=\"!filterItems\"\n        showClear=\"true\"\n        showSearch=\"true\"\n        placeholder=\"Search\"\n        i18n-placeholder=\"Search|Search placeholder@@bb-account-picker-ui.search.placeholder\"\n        (clear)=\"onClear()\"\n        (submit)=\"onSearch($event)\">\n      </bb-search-box-ui>\n      <ng-container *ngIf=\"multiple\">\n        <div class=\"pt-1\">\n          <button bbButton\n            color=\"link\"\n            (click)=\"selectAll()\"\n            i18n=\"Select all|Select all text@@bb-account-picker-ui.select.all.text\"\n            >Select all</button>\n          <button bbButton\n            color=\"link\"\n            (click)=\"unselectAll()\"\n            i18n=\"Unselect all|Unselect all text@@bb-account-picker-ui.unselect.all.text\"\n            >Unselect all</button>\n        </div>\n      </ng-container>\n    </ng-template>\n  </ng-template>\n\n<!-- Template for dropdown items list (ng-option-tmp) -->\n  <ng-template ng-option-tmp let-item=\"item\" let-item$=\"item$\" let-index=\"index\">\n    <ng-container\n      *ngIf=\"customOptionItem; else ngoptiontmp\"\n    >\n      <ng-container *ngTemplateOutlet=\"customOptionItem?.templateRef;\n        context: {\n          hostRef: hostRef,\n          multiple: multiple,\n          item: item,\n          item$: item$,\n          index: index\n        }\"\n      >\n      </ng-container>\n    </ng-container>\n     <!-- Default template for ng-option-tmp -->\n     <ng-template #ngoptiontmp>\n        <ng-container *ngIf=\"multiple\">\n          <div class=\"d-flex justify-content-start align-items-center\" >\n            <div class=\"pl-3 pb-2\">\n              <bb-input-checkbox-ui [id]=\"index\" [ngModel]=\"item$.selected\" (click)=\"$event.preventDefault()\"></bb-input-checkbox-ui>\n            </div>\n            <div class=\"w-100\">\n              <bb-product-item-basic-account-ui\n                [title]=\"item.name\"\n                [productNumber]=\"item.IBAN || item.BBAN || item.number\"\n                [amount]=\"item.bookedBalance || item.principalAmount || item.currentInvestmentValue\"\n                [currency]=\"item.currency\"\n                [active]=\"false\">\n              </bb-product-item-basic-account-ui>\n            </div>\n          </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"!multiple\">\n          <bb-product-item-basic-account-ui\n            [title]=\"item.name\"\n            [productNumber]=\"item.IBAN || item.BBAN || item.number\"\n            [amount]=\"item.bookedBalance || item.principalAmount || item.currentInvestmentValue\"\n            [currency]=\"item.currency\"\n            [active]=\"item$.selected\"\n          ></bb-product-item-basic-account-ui>\n        </ng-container>\n     </ng-template>\n  </ng-template>\n\n  <!-- Template for group option header(ng-optgroup-tmp) -->\n  <ng-template ng-optgroup-tmp let-item=\"item\">\n    <ng-container\n      *ngIf=\"customGroupItemsHeader; else ngoptgrouptmp\"\n    >\n      <ng-container *ngTemplateOutlet=\"customGroupItemsHeader?.templateRef;\n        context: { hostRef: hostRef, item: item }\">\n      </ng-container>\n    </ng-container>\n    <ng-template #ngoptgrouptmp>\n      <span\n        *ngIf=\"!item.name\"\n        i18n=\"All|All group By label@@bb-account-picker-ui.groupBy.all.label\"\n        >All</span>\n      <span\n        *ngIf=\"item.name\"\n        i18n=\"Favorite|Favorite group By label@@bb-account-picker-ui.groupBy.default.label\"\n        >Favorite</span>\n      ({{item.total}})\n    </ng-template>\n  </ng-template>\n\n  <ng-template ng-loadingtext-tmp>\n    <ng-container\n      *ngIf=\"customLoadingTemplate; else ngloadingtexttmp\"\n    >\n      <ng-container *ngTemplateOutlet=\"customGroupItemsHeader?.templateRef;\">\n      </ng-container>\n    </ng-container>\n    <ng-template #ngloadingtexttmp>\n      <bb-loading-indicator-ui\n        i18n-text=\"Loading Accounts|Loading Accounts label@@bb-account-picker-ui.loading.accounts\"\n        text=\"Loading Accounts\"\n      >\n      </bb-loading-indicator-ui>\n    </ng-template>\n  </ng-template>\n</ng-select>\n", styles: [".ng-select.ng-select-opened>.ng-select-container{background:#fff;border-color:#b3b3b3 #ccc #d9d9d9}.ng-select.ng-select-opened>.ng-select-container:hover{box-shadow:none}.ng-select.ng-select-opened>.ng-select-container .ng-arrow{top:-2px;border-color:transparent transparent #999;border-width:0 5px 5px}.ng-select.ng-select-opened>.ng-select-container .ng-arrow:hover{border-color:transparent transparent #333}.ng-select.ng-select-opened.ng-select-bottom>.ng-select-container{border-bottom-right-radius:0;border-bottom-left-radius:0}.ng-select.ng-select-opened.ng-select-top>.ng-select-container{border-top-right-radius:0;border-top-left-radius:0}.ng-select.ng-select-focused:not(.ng-select-opened)>.ng-select-container{border-color:#007eff;box-shadow:inset 0 1px 1px #00000013,0 0 0 3px #007eff1a}.ng-select.ng-select-disabled>.ng-select-container{background-color:#f9f9f9}.ng-select .ng-has-value .ng-placeholder{display:none}.ng-select .ng-select-container{color:#333;background-color:#fff;border-radius:4px;border:1px solid #ccc;min-height:36px;align-items:center}.ng-select .ng-select-container:hover{box-shadow:0 1px #0000000f}.ng-select .ng-select-container .ng-value-container{align-items:center;padding-left:10px}[dir=rtl] .ng-select .ng-select-container .ng-value-container{padding-right:10px;padding-left:0}.ng-select .ng-select-container .ng-value-container .ng-placeholder{color:#999}.ng-select.ng-select-single .ng-select-container{height:36px}.ng-select.ng-select-single .ng-select-container .ng-value-container .ng-input{top:5px;left:0;padding-left:10px;padding-right:50px}[dir=rtl] .ng-select.ng-select-single .ng-select-container .ng-value-container .ng-input{padding-right:10px;padding-left:50px}.ng-select.ng-select-multiple.ng-select-disabled>.ng-select-container .ng-value-container .ng-value{background-color:#f9f9f9;border:1px solid #e6e6e6}.ng-select.ng-select-multiple.ng-select-disabled>.ng-select-container .ng-value-container .ng-value .ng-value-label{padding:0 5px}.ng-select.ng-select-multiple .ng-select-container .ng-value-container{padding-top:5px;padding-left:7px}[dir=rtl] .ng-select.ng-select-multiple .ng-select-container .ng-value-container{padding-right:7px;padding-left:0}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value{font-size:.9em;margin-bottom:5px;color:#333;background-color:#ebf5ff;border-radius:2px;margin-right:5px}[dir=rtl] .ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value{margin-right:0;margin-left:5px}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value.ng-value-disabled{background-color:#f9f9f9}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value.ng-value-disabled .ng-value-label{padding-left:5px}[dir=rtl] .ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value.ng-value-disabled .ng-value-label{padding-left:0;padding-right:5px}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-label{display:inline-block;padding:1px 5px}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon{display:inline-block;padding:1px 5px}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon:hover{background-color:#d1e8ff}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon.left{border-right:1px solid #b8dbff}[dir=rtl] .ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon.left{border-left:1px solid #b8dbff;border-right:none}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon.right{border-left:1px solid #b8dbff}[dir=rtl] .ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon.right{border-left:0;border-right:1px solid #b8dbff}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-input{padding:0 0 3px 3px}[dir=rtl] .ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-input{padding:0 3px 3px 0}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-input>input{color:#000}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-placeholder{top:5px;padding-bottom:5px;padding-left:3px}[dir=rtl] .ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-placeholder{padding-right:3px;padding-left:0}.ng-select .ng-clear-wrapper{color:#999}.ng-select .ng-clear-wrapper:hover .ng-clear{color:#d0021b}.ng-select .ng-spinner-zone{padding:5px 5px 0 0}[dir=rtl] .ng-select .ng-spinner-zone{padding:5px 0 0 5px}.ng-select .ng-arrow-wrapper{width:25px;padding-right:5px}[dir=rtl] .ng-select .ng-arrow-wrapper{padding-left:5px;padding-right:0}.ng-select .ng-arrow-wrapper:hover .ng-arrow{border-top-color:#666}.ng-select .ng-arrow-wrapper .ng-arrow{border-color:#999 transparent transparent;border-style:solid;border-width:5px 5px 2.5px}.ng-dropdown-panel{background-color:#fff;border:1px solid #ccc;box-shadow:0 1px #0000000f;left:0}.ng-dropdown-panel.ng-select-bottom{top:100%;border-bottom-right-radius:4px;border-bottom-left-radius:4px;border-top-color:#e6e6e6;margin-top:-1px}.ng-dropdown-panel.ng-select-bottom .ng-dropdown-panel-items .ng-option:last-child{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.ng-dropdown-panel.ng-select-top{bottom:100%;border-top-right-radius:4px;border-top-left-radius:4px;border-bottom-color:#e6e6e6;margin-bottom:-1px}.ng-dropdown-panel.ng-select-top .ng-dropdown-panel-items .ng-option:first-child{border-top-right-radius:4px;border-top-left-radius:4px}.ng-dropdown-panel .ng-dropdown-header{border-bottom:1px solid #ccc;padding:5px 7px}.ng-dropdown-panel .ng-dropdown-footer{border-top:1px solid #ccc;padding:5px 7px}.ng-dropdown-panel .ng-dropdown-panel-items .ng-optgroup{-webkit-user-select:none;user-select:none;padding:8px 10px;font-weight:500;color:#0000008a;cursor:pointer}.ng-dropdown-panel .ng-dropdown-panel-items .ng-optgroup.ng-option-disabled{cursor:default}.ng-dropdown-panel .ng-dropdown-panel-items .ng-optgroup.ng-option-marked{background-color:#f5faff}.ng-dropdown-panel .ng-dropdown-panel-items .ng-optgroup.ng-option-selected,.ng-dropdown-panel .ng-dropdown-panel-items .ng-optgroup.ng-option-selected.ng-option-marked{background-color:#ebf5ff;font-weight:600}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option{background-color:#fff;color:#000000de;padding:8px 10px}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-selected,.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-selected.ng-option-marked{color:#333;background-color:#ebf5ff}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-selected .ng-option-label,.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-selected.ng-option-marked .ng-option-label{font-weight:600}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-marked{background-color:#f5faff;color:#333}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-disabled{color:#ccc}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-child{padding-left:22px}[dir=rtl] .ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-child{padding-right:22px;padding-left:0}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option .ng-tag-label{font-size:80%;font-weight:400;padding-right:5px}[dir=rtl] .ng-dropdown-panel .ng-dropdown-panel-items .ng-option .ng-tag-label{padding-left:5px;padding-right:0}[dir=rtl] .ng-dropdown-panel{direction:rtl;text-align:right}\n"], components: [{ type: i1$3.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { type: i10.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }, { type: i3$2.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i4$1.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i5$2.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i6$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i7$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i7$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$3.ɵh, selector: "[ng-label-tmp]" }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1$3.ɵi, selector: "[ng-multi-label-tmp]" }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$3.ɵj, selector: "[ng-header-tmp]" }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1$3.ɵf, selector: "[ng-option-tmp]" }, { type: i1$3.ɵg, selector: "[ng-optgroup-tmp]" }, { type: i1$3.ɵn, selector: "[ng-loadingtext-tmp]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountPickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-picker',
                    templateUrl: './account-picker-ui.component.html',
                    styleUrls: ['./account-picker-ui.component.scss'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], propDecorators: { customSingleSelectedItemLabel: [{
                type: ContentChild,
                args: [CustomSingleSelectedItemLabelDirective]
            }], customMultiSelectedItemsLabel: [{
                type: ContentChild,
                args: [CustomMultiSelectedItemsLabelDirective]
            }], customOptionsHeader: [{
                type: ContentChild,
                args: [CustomOptionsHeaderDirective]
            }], customOptionItem: [{
                type: ContentChild,
                args: [CustomOptionItemDirective]
            }], customGroupItemsHeader: [{
                type: ContentChild,
                args: [CustomGroupItemsHeaderDirective]
            }], customLoadingTemplate: [{
                type: ContentChild,
                args: [CustomLoadingTemplateDirective]
            }], search: [{
                type: Output
            }], clearSearch: [{
                type: Output
            }], scrollToEnd: [{
                type: Output
            }], remove: [{
                type: Output
            }], change: [{
                type: Output
            }], items: [{
                type: Input
            }], selectedItems: [{
                type: Input
            }], multiple: [{
                type: Input
            }], closeOnSelect: [{
                type: Input
            }], searchable: [{
                type: Input
            }], clearable: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], loading: [{
                type: Input
            }], dropdownPosition: [{
                type: Input
            }], disableScrollEnd: [{
                type: Input
            }], filterItems: [{
                type: Input
            }], markFirst: [{
                type: Input
            }], groupByFn: [{
                type: Input
            }], groupValueFn: [{
                type: Input
            }] } });

const uiModules$c = [
    ProductItemBasicAccountModule,
    InputTextModule,
    SearchBoxModule,
    LoadingIndicatorModule,
    InputCheckboxModule,
    ButtonModule,
];
const components$a = [AccountPickerComponent];
const directives$5 = [
    CustomSingleSelectedItemLabelDirective,
    CustomMultiSelectedItemsLabelDirective,
    CustomOptionsHeaderDirective,
    CustomOptionItemDirective,
    CustomGroupItemsHeaderDirective,
    CustomLoadingTemplateDirective,
];
class AccountPickerModule {
}
AccountPickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountPickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AccountPickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountPickerModule, declarations: [AccountPickerComponent, CustomSingleSelectedItemLabelDirective,
        CustomMultiSelectedItemsLabelDirective,
        CustomOptionsHeaderDirective,
        CustomOptionItemDirective,
        CustomGroupItemsHeaderDirective,
        CustomLoadingTemplateDirective], imports: [CommonModule, FormsModule, NgSelectModule, ProductItemBasicAccountModule,
        InputTextModule,
        SearchBoxModule,
        LoadingIndicatorModule,
        InputCheckboxModule,
        ButtonModule], exports: [AccountPickerComponent, CustomSingleSelectedItemLabelDirective,
        CustomMultiSelectedItemsLabelDirective,
        CustomOptionsHeaderDirective,
        CustomOptionItemDirective,
        CustomGroupItemsHeaderDirective,
        CustomLoadingTemplateDirective, ProductItemBasicAccountModule,
        InputTextModule,
        SearchBoxModule,
        LoadingIndicatorModule,
        InputCheckboxModule,
        ButtonModule, NgSelectModule] });
AccountPickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountPickerModule, imports: [[CommonModule, FormsModule, NgSelectModule, ...uiModules$c], ProductItemBasicAccountModule,
        InputTextModule,
        SearchBoxModule,
        LoadingIndicatorModule,
        InputCheckboxModule,
        ButtonModule, NgSelectModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountPickerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, NgSelectModule, ...uiModules$c],
                    declarations: [...components$a, ...directives$5],
                    exports: [...components$a, ...directives$5, ...uiModules$c, NgSelectModule],
                }]
        }] });

class AccountStateComponent {
    constructor() {
        this.hostRef = this;
        /**
         * Product summary account state indicator display flag.
         */
        this.isDisplayingAlert = true;
        this.isAlertCLosed = false;
    }
    /**
     * @internal
     */
    ngOnChanges() {
        this.isAlertCLosed = false;
    }
    closeAlert() {
        this.isAlertCLosed = true;
    }
}
AccountStateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountStateComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AccountStateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountStateComponent, selector: "bb-account-state-ui", inputs: { isDisplayingAlert: "isDisplayingAlert", item: "item" }, usesOnChanges: true, ngImport: i0, template: "<ng-container\nbbAccountStateCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{item:item}\">\n</ng-container>\n\n<ng-template bbAccountStateCustomizable\n  let-hostRef\n  let-item=\"context\">\n  <div class=\"row mt-3\" *ngIf=\"hostRef.isDisplayingAlert && !hostRef.isAlertCLosed\">\n    <div class=\"col-12\">\n      <bb-alert-ui\n        data-role=\"alert-danger\"\n        [title]=\"''\"\n        [modifier]=\"hostRef.item.severity\"\n        [dismissible]=\"true\"\n        (close)=\"hostRef.closeAlert()\">\n          <ng-content></ng-content>\n      </bb-alert-ui>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$4.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }], directives: [{ type: i0.forwardRef(function () { return AccountStateCustomizableDirective; }), selector: "[bbAccountStateCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountStateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-state-ui',
                    templateUrl: 'account-state-ui.component.html',
                }]
        }], propDecorators: { isDisplayingAlert: [{
                type: Input
            }], item: [{
                type: Input
            }] } });
class AccountStateCustomizableDirective extends BbTemplate {
}
AccountStateCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountStateCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStateCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: AccountStateCustomizableDirective, selector: "[bbAccountStateCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountStateCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountStateCustomizable]',
                }]
        }] });

const uiModules$b = [AlertModule];
const components$9 = [AccountStateComponent];
const directives$4 = [AccountStateCustomizableDirective];
class AccountStateModule {
}
AccountStateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountStateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AccountStateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountStateModule, declarations: [AccountStateComponent, AccountStateCustomizableDirective], imports: [CommonModule, AlertModule], exports: [AccountStateComponent, AccountStateCustomizableDirective, AlertModule] });
AccountStateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountStateModule, imports: [[CommonModule, ...uiModules$b], AlertModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountStateModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules$b],
                    declarations: [...components$9, ...directives$4],
                    exports: [...components$9, ...directives$4, ...uiModules$b],
                }]
        }] });

var CustomColorName;
(function (CustomColorName) {
    CustomColorName["POSITIVE"] = "positive";
    CustomColorName["NEGATIVE"] = "negative";
})(CustomColorName || (CustomColorName = {}));

class ChartLegendComponent {
    constructor() {
        this.hostRef = this;
        /**
         * Currency data
         */
        this.currency = '';
        /**
         * Maximum value
         */
        this.maxValue = '';
        /**
         * Minimum value
         */
        this.minValue = '';
        /**
         * Color for positive area
         */
        this.positiveColor = '';
        /**
         * Color for negative area
         */
        this.negativeColor = '';
    }
}
ChartLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ChartLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ChartLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ChartLegendComponent, selector: "bb-chart-legend-ui", inputs: { currency: "currency", maxValue: "maxValue", minValue: "minValue", positiveColor: "positiveColor", negativeColor: "negativeColor" }, ngImport: i0, template: "<ng-container\n  bbChartLegendCustomizable\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n\n<ng-template\n  bbChartLegendCustomizable\n  let-hostRef\n>\n  <div class=\"bb-subtitle bb-stack bb-stack--center bb-stack--wrap\"\n       data-role=\"area-chart-legend\">\n    <div class=\"bb-stack__item bb-stack__item--spacing-lg bb-stack__break--sm-down\">\n      <div class=\"bb-stack bb-stack--density-sm\">\n        <bb-icon-ui\n          class=\"bb-stack__item\"\n          data-role=\"area-chart-legend-positive-color\"\n          name=\"circle\"\n          size=\"sm\"\n          [style.color]=\"hostRef.positiveColor\"\n        ></bb-icon-ui>\n        <span\n          class=\"bb-stack__item\"\n          i18n=\"Max balance@@product-summary-balance-history-chart.max-balance\"\n        >\n            Max Balance:\n          </span>\n        <bb-amount-ui\n          class=\"bb-stack__item bb-text-bold\"\n          data-role=\"area-chart-legend-max-value\"\n          [currency]=\"hostRef.currency\"\n          [amount]=\"hostRef.maxValue\"\n        ></bb-amount-ui>\n      </div>\n    </div>\n    <div class=\"bb-stack__break bb-stack__break--spacing-sm bb-stack__break--sm-down\"></div>\n    <div class=\"bb-stack__item bb-stack__item--spacing-lg bb-stack__break--sm-down\">\n      <div class=\"bb-stack bb-stack--density-sm\">\n        <bb-icon-ui\n          class=\"bb-stack__item\"\n          data-role=\"area-chart-legend-negative-color\"\n          name=\"circle\"\n          size=\"sm\"\n          [style.color]=\"hostRef.negativeColor\"\n        ></bb-icon-ui>\n        <span\n          class=\"bb-stack__item\"\n          i18n=\"Min balance@@product-summary-balance-history-chart.min-balance\"\n        >\n            Min Balance:\n          </span>\n        <bb-amount-ui\n          class=\"bb-stack__item bb-text-bold\"\n          data-role=\"area-chart-legend-min-value\"\n          [currency]=\"hostRef.currency\"\n          [amount]=\"hostRef.minValue\"\n        ></bb-amount-ui>\n      </div>\n    </div>\n  </div>\n\n</ng-template>\n\n", components: [{ type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i2.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i0.forwardRef(function () { return ChartLegendCustomizableDirective; }), selector: "[bbChartLegendCustomizable]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ChartLegendComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-chart-legend-ui',
                    templateUrl: 'chart-legend.component.html',
                }]
        }], propDecorators: { currency: [{
                type: Input
            }], maxValue: [{
                type: Input
            }], minValue: [{
                type: Input
            }], positiveColor: [{
                type: Input
            }], negativeColor: [{
                type: Input
            }] } });
class ChartLegendCustomizableDirective extends BbTemplate {
}
ChartLegendCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ChartLegendCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ChartLegendCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ChartLegendCustomizableDirective, selector: "[bbChartLegendCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ChartLegendCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbChartLegendCustomizable]',
                }]
        }] });

class AreaChartLegendComponent {
    constructor() {
        this.hostRef = this;
        /**
         * The chart data (data series) that this component is using to calculate min max
         */
        this.dataSeries = [];
        /**
         * The currency data
         */
        this.currency = '';
        /**
         * Set custom colors for negative and positive areas
         */
        this.customColors = [];
    }
    getMax() {
        return Math.max(...this.values);
    }
    getMin() {
        return Math.min(...this.values);
    }
    getPositiveColor() {
        const customColor = findByName(this.customColors, CustomColorName.POSITIVE);
        return customColor ? customColor.value : '';
    }
    getNegativeColor() {
        const customColor = findByName(this.customColors, CustomColorName.NEGATIVE);
        return customColor ? customColor.value : '';
    }
    get values() {
        const allDateSeries = this.dataSeries.reduce((memo, { series }) => memo.concat(series), []);
        return allDateSeries.map((date) => date.value);
    }
}
AreaChartLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AreaChartLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AreaChartLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AreaChartLegendComponent, selector: "bb-area-chart-legend-ui", inputs: { dataSeries: "dataSeries", currency: "currency", customColors: "customColors" }, ngImport: i0, template: "<ng-container\n  bbBalanceHistoryAreaChartLegendCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    dataSeries: dataSeries,\n    customColors: customColors\n  }\"\n></ng-container>\n\n<ng-template\n  bbBalanceHistoryAreaChartLegendCustomizable\n  let-hostRef\n  let-dataSeries=\"context.dataSeries\"\n  let-customColors=\"context.customColors\"\n>\n  <bb-chart-legend-ui\n    [currency]=\"hostRef.currency\"\n    [maxValue]=\"hostRef.getMax()\"\n    [minValue]=\"hostRef.getMin()\"\n    [positiveColor]=\"hostRef.getPositiveColor()\"\n    [negativeColor]=\"hostRef.getNegativeColor()\"\n  ></bb-chart-legend-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return ChartLegendComponent; }), selector: "bb-chart-legend-ui", inputs: ["currency", "maxValue", "minValue", "positiveColor", "negativeColor"] }], directives: [{ type: i0.forwardRef(function () { return BalanceHistoryAreaChartLegendCustomizableDirective; }), selector: "[bbBalanceHistoryAreaChartLegendCustomizable]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AreaChartLegendComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-area-chart-legend-ui',
                    templateUrl: 'area-chart-legend.component.html',
                }]
        }], propDecorators: { dataSeries: [{
                type: Input
            }], currency: [{
                type: Input
            }], customColors: [{
                type: Input
            }] } });
class BalanceHistoryAreaChartLegendCustomizableDirective extends BbTemplate {
}
BalanceHistoryAreaChartLegendCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryAreaChartLegendCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
BalanceHistoryAreaChartLegendCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BalanceHistoryAreaChartLegendCustomizableDirective, selector: "[bbBalanceHistoryAreaChartLegendCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryAreaChartLegendCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBalanceHistoryAreaChartLegendCustomizable]',
                }]
        }] });

class AreaChartComponent {
    constructor() {
        this.hostRef = this;
        /**
         * The chart data (data series)
         */
        this.dataSeries = [];
        /**
         * Show or hide X Axis
         */
        this.showXAxis = true;
        /**
         * Show or hide Y Axis
         */
        this.showYAxis = true;
        /**
         * Fill elements with a gradient instead of a solid color
         */
        this.gradient = false;
        /**
         * Show or hide the legend
         */
        this.showLegend = false;
        /**
         * Show or hide the X axis label
         */
        this.showXAxisLabel = false;
        /**
         * Show or hide the Y axis label
         */
        this.showYAxisLabel = false;
        /**
         * X axis label text
         */
        this.xAxisLabel = '';
        /**
         * Y axis label text
         */
        this.yAxisLabel = '';
        /**
         * Set the minimum value of the y axis to the minimum value in the data, instead of 0
         */
        this.autoScale = false;
        /**
         * Set the base value of chart
         */
        this.baseValue = 0;
        /**
         * Set animations to true
         */
        this.animations = true;
        /**
         * Set custom colors for negative and positive areas
         */
        this.customColors = [];
        /**
         * The currency data
         */
        this.currency = '';
    }
}
AreaChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AreaChartComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AreaChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AreaChartComponent, selector: "bb-area-chart-ui", inputs: { dataSeries: "dataSeries", showXAxis: "showXAxis", showYAxis: "showYAxis", gradient: "gradient", showLegend: "showLegend", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", autoScale: "autoScale", baseValue: "baseValue", animations: "animations", customColors: "customColors", currency: "currency" }, ngImport: i0, template: "<ng-container\n  bbBalanceHistoryAreaChartCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    baseValue: baseValue,\n    autoScale: autoScale,\n    dataSeries: dataSeries,\n    gradient: gradient,\n    customColors: customColors,\n    xAxis: showXAxis,\n    yAxis: showYAxis,\n    legend: showLegend,\n    showXAxisLabel: showXAxisLabel,\n    showYAxisLabel: showYAxisLabel,\n    xAxisLabel: xAxisLabel,\n    yAxisLabel: yAxisLabel,\n    animations: animations\n  }\">\n</ng-container>\n\n<ng-template\n  bbBalanceHistoryAreaChartCustomizable\n  let-hostRef\n  let-baseValue=\"context.baseValue\"\n  let-autoScale=\"context.autoScale\"\n  let-dataSeries=\"context.dataSeries\"\n  let-gradient=\"context.gradient\"\n  let-customColors=\"context.customColors\"\n  let-xAxis=\"context.xAxis\"\n  let-yAxis=\"context.yAxis\"\n  let-legend=\"context.legend\"\n  let-showXAxisLabel=\"context.showXAxisLabel\"\n  let-showYAxisLabel=\"context.showYAxisLabel\"\n  let-xAxisLabel=\"context.xAxisLabel\"\n  let-yAxisLabel=\"context.yAxisLabel\"\n  let-animations=\"context.animations\">\n  <div class=\"bb-stack bb-product-summary-area-chart\">\n    <ngx-charts-area-chart\n      [baseValue]=\"baseValue\"\n      [autoScale]=\"autoScale\"\n      [results]=\"dataSeries\"\n      [gradient]=\"gradient\"\n      [customColors]=\"customColors\"\n      [xAxis]=\"showXAxis\"\n      [yAxis]=\"showYAxis\"\n      [legend]=\"showLegend\"\n      [showXAxisLabel]=\"showXAxisLabel\"\n      [showYAxisLabel]=\"showYAxisLabel\"\n      [xAxisLabel]=\"xAxisLabel\"\n      [yAxisLabel]=\"yAxisLabel\"\n      [animations]=\"animations\">\n\n      <ng-template #tooltipTemplate let-model=\"model\">\n          <div class=\"bb-product-summary-area-chart__tooltip\">\n              <h6\n              class=\"bb-product-summary-area-chart__tooltip-heading\"\n              data-role=\"tooltip-header\"\n            >{{model.name | date: 'mediumDate' }}</h6>\n            <hr class=\"bb-product-summary-area-chart__tooltip-divider\"/>\n            <table class=\"bb-product-summary-area-chart__tooltip-table\">\n              <tr data-role=\"tooltip-item\"\n              >\n                <td class=\"bb-product-summary-area-chart__tooltip-label\">\n                  <span\n                    class=\"align-middle\"\n                    i18n=\"Balance History period@@balance-history-area.chart.tooltipItem\"\n                    data-role=\"tooltip-item-name\"\n                  >Balance: </span>\n                </td>\n                <td\n                  class=\"bb-product-summary-area-chart__tooltip-value\"\n                  data-role=\"tooltip-item-value\"\n                >\n                  <bb-amount-ui\n                    [amount]=\"model.value\"\n                    [showPlusSign]=\"true\"\n                    [currency]=\"hostRef.currency\"\n                    [showPercent]=\"false\"\n                    class=\"align-middle\"\n                  ></bb-amount-ui>\n                </td>\n              </tr>\n            </table>\n          </div>\n        </ng-template>\n\n      <ng-template #seriesTooltipTemplate let-model=\"model\">\n        <div class=\"bb-product-summary-area-chart__tooltip\">\n            <h6\n            class=\"bb-product-summary-area-chart__tooltip-heading\"\n            data-role=\"tooltip-header\"\n          >{{model[0]?.name | date: 'mediumDate' }}</h6>\n          <hr class=\"bb-product-summary-area-chart__tooltip-divider\"/>\n          <table class=\"bb-product-summary-area-chart__tooltip-table\">\n            <tr\n              *ngFor=\"let item of model\"\n              data-role=\"tooltip-item\"\n            >\n              <td class=\"bb-product-summary-area-chart__tooltip-label\">\n                <span\n                  class=\"align-middle\"\n                  i18n=\"Balance History period@@balance-history-area..tooltipItem\"\n                  data-role=\"tooltip-item-name\"\n                >Balance: </span>\n              </td>\n              <td\n                class=\"bb-product-summary-area-chart__tooltip-value\"\n                data-role=\"tooltip-item-value\"\n              >\n                <bb-amount-ui\n                  [amount]=\"item.value\"\n                  [showPlusSign]=\"true\"\n                  [currency]=\"hostRef.currency\"\n                  [showPercent]=\"false\"\n                  class=\"align-middle\"\n                ></bb-amount-ui>\n              </td>\n            </tr>\n          </table>\n        </div>\n      </ng-template>\n\n    </ngx-charts-area-chart>\n  </div>\n</ng-template>\n\n", components: [{ type: i0.forwardRef(function () { return i1$5.AreaChartComponent; }), selector: "ngx-charts-area-chart", inputs: ["legend", "legendTitle", "legendPosition", "xAxis", "yAxis", "baseValue", "autoScale", "timeline", "showGridLines", "curve", "activeEntries", "trimXAxisTicks", "trimYAxisTicks", "rotateXAxisTicks", "maxXAxisTickLength", "maxYAxisTickLength", "roundDomains", "tooltipDisabled", "showXAxisLabel", "showYAxisLabel", "xAxisLabel", "yAxisLabel", "gradient", "schemeType", "xAxisTickFormatting", "yAxisTickFormatting", "xAxisTicks", "yAxisTicks", "xScaleMin", "xScaleMax", "yScaleMin", "yScaleMax"], outputs: ["activate", "deactivate"] }, { type: i0.forwardRef(function () { return i2.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i0.forwardRef(function () { return BalanceHistoryAreaChartCustomizableDirective; }), selector: "[bbBalanceHistoryAreaChartCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "date": i0.forwardRef(function () { return i3.DatePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AreaChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-area-chart-ui',
                    templateUrl: 'area-chart.component.html',
                }]
        }], propDecorators: { dataSeries: [{
                type: Input
            }], showXAxis: [{
                type: Input
            }], showYAxis: [{
                type: Input
            }], gradient: [{
                type: Input
            }], showLegend: [{
                type: Input
            }], showXAxisLabel: [{
                type: Input
            }], showYAxisLabel: [{
                type: Input
            }], xAxisLabel: [{
                type: Input
            }], yAxisLabel: [{
                type: Input
            }], autoScale: [{
                type: Input
            }], baseValue: [{
                type: Input
            }], animations: [{
                type: Input
            }], customColors: [{
                type: Input
            }], currency: [{
                type: Input
            }] } });
class BalanceHistoryAreaChartCustomizableDirective extends BbTemplate {
}
BalanceHistoryAreaChartCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryAreaChartCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
BalanceHistoryAreaChartCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BalanceHistoryAreaChartCustomizableDirective, selector: "[bbBalanceHistoryAreaChartCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryAreaChartCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBalanceHistoryAreaChartCustomizable]',
                }]
        }] });

const uiModules$a = [IconModule, AmountModule];
const components$8 = [ChartLegendComponent];
const directives$3 = [ChartLegendCustomizableDirective];
class ChartLegendModule {
}
ChartLegendModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ChartLegendModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ChartLegendModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ChartLegendModule, declarations: [ChartLegendComponent, ChartLegendCustomizableDirective], imports: [CommonModule, IconModule, AmountModule], exports: [ChartLegendComponent, ChartLegendCustomizableDirective, IconModule, AmountModule] });
ChartLegendModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ChartLegendModule, imports: [[CommonModule, ...uiModules$a], IconModule, AmountModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ChartLegendModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules$a],
                    declarations: [...components$8, ...directives$3],
                    exports: [...components$8, ...directives$3, ...uiModules$a],
                }]
        }] });

const uiModules$9 = [IconModule, AmountModule, ChartLegendModule];
const components$7 = [AreaChartLegendComponent, AreaChartComponent];
const directives$2 = [BalanceHistoryAreaChartLegendCustomizableDirective, BalanceHistoryAreaChartCustomizableDirective];
class AreaChartModule {
}
AreaChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AreaChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AreaChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AreaChartModule, declarations: [AreaChartLegendComponent, AreaChartComponent, BalanceHistoryAreaChartLegendCustomizableDirective, BalanceHistoryAreaChartCustomizableDirective], imports: [CommonModule, AreaChartModule$1, IconModule, AmountModule, ChartLegendModule], exports: [AreaChartLegendComponent, AreaChartComponent, BalanceHistoryAreaChartLegendCustomizableDirective, BalanceHistoryAreaChartCustomizableDirective, IconModule, AmountModule, ChartLegendModule] });
AreaChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AreaChartModule, imports: [[CommonModule, AreaChartModule$1, ...uiModules$9], IconModule, AmountModule, ChartLegendModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AreaChartModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, AreaChartModule$1, ...uiModules$9],
                    declarations: [...components$7, ...directives$2],
                    exports: [...components$7, ...directives$2, ...uiModules$9],
                }]
        }] });

class ArrangementStateIndicatorComponent {
    constructor() {
        this.hostRef = this;
        /**
         * State name to display
         * Supported values: 'active', 'inactive', 'closed'
         * If the state name is not supported it will be shown as it is
         */
        this.state = '';
        /**
         * Visibility of the active state
         * Default: false
         */
        this.showActive = false;
        /**
         * Visibility of the icon next to the state
         * Default: true
         */
        this.showIcon = true;
        /**
         * Visibility of the state text for mobile devices
         * Default: true
         */
        this.hideStateTextForMobile = true;
    }
}
ArrangementStateIndicatorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementStateIndicatorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ArrangementStateIndicatorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ArrangementStateIndicatorComponent, selector: "bb-arrangement-state-indicator", inputs: { state: "state", showActive: "showActive", showIcon: "showIcon", hideStateTextForMobile: "hideStateTextForMobile" }, ngImport: i0, template: "<ng-container\n  bbArrangementStateIndicatorCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{state: state}\"\n>\n</ng-container>\n<ng-template\n  bbArrangementStateIndicatorCustomizable\n  let-hostRef\n  let-state=\"context.state\"\n>\n  <div class=\"bb-stack bb-account-status\">\n    <ng-container [ngSwitch]=\"state.toLowerCase()\">\n      <ng-container *ngSwitchCase=\"'active'\">\n          <span\n            *ngIf=\"hostRef.showActive\"\n            i18n=\"Active|Arrangement State Indicator: Active@@arrangement.state.indicator.active\">Active</span>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"'inactive'\">\n        <bb-icon-ui\n          *ngIf=\"hostRef.showIcon\"\n          data-role=\"inActive-icon\"\n          name=\"remove-circle-outline\"\n          size=\"sm\"\n          class=\"bb-stack__item bb-stack__item--spacing-xs bb-text-support\"\n        ></bb-icon-ui>\n        <span\n          [ngClass]=\"{'bb-account-status__state--hide-for-mobile': hostRef.hideStateTextForMobile}\"\n          class=\"bb-stack__item bb-account-status__state bb-text-semi-bold\"\n          i18n=\"Inactive|Arrangement State Indicator: Inactive@@arrangement.state.indicator.inactive\">Inactive</span>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"'closed'\">\n        <bb-icon-ui\n          *ngIf=\"hostRef.showIcon\"\n          data-role=\"closed-icon\"\n          name=\"cancel\"\n          size=\"sm\"\n          color=\"danger\"\n          class=\"bb-stack__item bb-stack__item--spacing-xs\"\n        ></bb-icon-ui>\n        <span\n          [ngClass]=\"{'bb-account-status__state--hide-for-mobile': hostRef.hideStateTextForMobile}\"\n          class=\"bb-stack__item bb-account-status__state bb-text-semi-bold\"\n          i18n=\"Closed|Arrangement State Indicator: Closed@@arrangement.state.indicator.closed\"\n        >Closed</span>\n      </ng-container>\n      <ng-container *ngSwitchDefault>\n        <span class=\"bb-stack__item bb-account-status__state bb-text-semi-bold\">\n          {{state}}\n        </span>\n      </ng-container>\n    </ng-container>\n  </div>\n</ng-template>\n\n", components: [{ type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0.forwardRef(function () { return ArrangementStateIndicatorCustomizableDirective; }), selector: "[bbArrangementStateIndicatorCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i3.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i3.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i3.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementStateIndicatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-arrangement-state-indicator',
                    templateUrl: './arrangement-state-indicator.component.html',
                }]
        }], propDecorators: { state: [{
                type: Input
            }], showActive: [{
                type: Input
            }], showIcon: [{
                type: Input
            }], hideStateTextForMobile: [{
                type: Input
            }] } });
class ArrangementStateIndicatorCustomizableDirective extends BbTemplate {
}
ArrangementStateIndicatorCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementStateIndicatorCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ArrangementStateIndicatorCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ArrangementStateIndicatorCustomizableDirective, selector: "[bbArrangementStateIndicatorCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementStateIndicatorCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbArrangementStateIndicatorCustomizable]',
                }]
        }] });

const uiModules$8 = [IconModule];
const components$6 = [ArrangementStateIndicatorComponent];
const directives$1 = [ArrangementStateIndicatorCustomizableDirective];
class ArrangementStateIndicatorModule {
}
ArrangementStateIndicatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementStateIndicatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ArrangementStateIndicatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementStateIndicatorModule, declarations: [ArrangementStateIndicatorComponent, ArrangementStateIndicatorCustomizableDirective], imports: [CommonModule, IconModule], exports: [ArrangementStateIndicatorComponent, ArrangementStateIndicatorCustomizableDirective, IconModule] });
ArrangementStateIndicatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementStateIndicatorModule, imports: [[CommonModule, ...uiModules$8], IconModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementStateIndicatorModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules$8],
                    declarations: [...components$6, ...directives$1],
                    exports: [...components$6, ...directives$1, ...uiModules$8],
                }]
        }] });

class LineChartComponent {
    constructor() {
        this.hostRef = this;
        /**
         * @default []
         * The chart data (data series)
         */
        this.dataSeries = [];
        /**
         * @default true
         * Show or hide X Axis
         */
        this.showXAxis = true;
        /**
         * @default true
         * Show or hide Y Axis
         */
        this.showYAxis = true;
        /**
         * @default false
         * Fill elements with a gradient instead of a solid color
         */
        this.gradient = false;
        /**
         * @default false
         * Show or hide the legend
         */
        this.showLegend = false;
        /**
         * @default false
         * Show or hide the X axis label
         */
        this.showXAxisLabel = false;
        /**
         * @default false
         * Show or hide the Y axis label
         */
        this.showYAxisLabel = false;
        /**
         * @default ''
         * X axis label text
         */
        this.xAxisLabel = '';
        /**
         * @default ''
         * Y axis label text
         */
        this.yAxisLabel = '';
        /**
         * @default false
         * Set the minimum value of the y axis to the minimum value in the data, instead of 0
         */
        this.autoScale = false;
        /**
         * @default true
         * Set animations to true
         */
        this.animations = true;
        /**
         * @default []
         * Set custom colors for negative and positive areas
         */
        this.customColors = [];
        /**
         * @default ''
         * The currency data
         */
        this.currency = '';
        /**
         * @default false
         * Show/Hide the amount symbol prefixed to the amount
         */
        this.showTooltipAmountSign = false;
        /**
         * @default false
         * Show/Hide the percentage symbol suffixed to the amount
         */
        this.showTooltipAmountPercent = false;
        /**
         * @default mediumDate
         * Date that will be displayed inside the tooltip
         */
        this.tooltipDateFormat = 'mediumDate';
        /**
         * @default true
         * Show/Hide the refrence line that will be shown behind the chart.
         * This will distinguish the postive and negative series.
         */
        this.showRefLines = true;
        /**
         * @default false
         * Show/Hide the refrence labels
         */
        this.showRefLabels = false;
        /**
         * @default []
         * Refrence lines that will be shown behind the chart
         */
        this.referenceLines = [];
        /**
         * @default defaultTickFormatFunction
         * x-Axis tick format function
         */
        this.xAxisTickFormatFunction = this.defaultTickFormatFunction;
        /**
         * @default defaultTickFormatFunction
         * y-Axis tick format function
         */
        this.yAxisTickFormatFunction = this.defaultTickFormatFunction;
        this.yAxisTickFormat = (tick) => {
            if (!isFunction(this.yAxisTickFormatFunction)) {
                throw new Error('Function should be provided');
            }
            return this.yAxisTickFormatFunction(tick);
        };
        this.xAxisTickFormat = (tick) => {
            if (!isFunction(this.xAxisTickFormatFunction)) {
                throw new Error('Function should be provided');
            }
            return this.xAxisTickFormatFunction(tick);
        };
    }
    ngOnInit() {
        if (this.showRefLines) {
            this.initReferenceLines();
        }
    }
    initReferenceLines() {
        this.referenceLines = this.referenceLines.slice();
        this.referenceLines.push({ name: '', value: 0 });
    }
    defaultTickFormatFunction(tick) {
        if (tick.constructor.name === 'Date') {
            return tick.toLocaleDateString();
        }
        return tick;
    }
    /**
     * Filters out consecutive duplicate values,
     * for example [2, 0, 0, 2] => [2, 0, 2]
     */
    sanitizeTooltipValues(tooltipValues) {
        return tooltipValues.filter((tooltipValue, index) => !index || Number(tooltipValue.value) !== Number(tooltipValues[index - 1].value));
    }
}
LineChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LineChartComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LineChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LineChartComponent, selector: "bb-line-chart-ui", inputs: { classes: "classes", dataSeries: "dataSeries", showXAxis: "showXAxis", showYAxis: "showYAxis", gradient: "gradient", showLegend: "showLegend", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", autoScale: "autoScale", animations: "animations", customColors: "customColors", currency: "currency", showTooltipAmountSign: "showTooltipAmountSign", showTooltipAmountPercent: "showTooltipAmountPercent", tooltipDateFormat: "tooltipDateFormat", showRefLines: "showRefLines", showRefLabels: "showRefLabels", referenceLines: "referenceLines", xAxisTickFormatFunction: "xAxisTickFormatFunction", yAxisTickFormatFunction: "yAxisTickFormatFunction" }, ngImport: i0, template: "<ng-container\n  bbBalanceHistoryLineChartCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    autoScale: autoScale,\n    dataSeries: dataSeries,\n    gradient: gradient,\n    customColors: customColors,\n    xAxis: showXAxis,\n    yAxis: showYAxis,\n    legend: showLegend,\n    showXAxisLabel: showXAxisLabel,\n    showYAxisLabel: showYAxisLabel,\n    xAxisLabel: xAxisLabel,\n    yAxisLabel: yAxisLabel,\n    animations: animations,\n    showRefLines: showRefLines,\n    referenceLines: referenceLines,\n    showRefLabels: showRefLabels\n  }\">\n</ng-container>\n<ng-template\n  bbBalanceHistoryLineChartCustomizable\n  let-hostRef\n  let-autoScale=\"context.autoScale\"\n  let-dataSeries=\"context.dataSeries\"\n  let-gradient=\"context.gradient\"\n  let-customColors=\"context.customColors\"\n  let-xAxis=\"context.xAxis\"\n  let-yAxis=\"context.yAxis\"\n  let-legend=\"context.legend\"\n  let-showXAxisLabel=\"context.showXAxisLabel\"\n  let-showYAxisLabel=\"context.showYAxisLabel\"\n  let-xAxisLabel=\"context.xAxisLabel\"\n  let-yAxisLabel=\"context.yAxisLabel\"\n  let-animations=\"context.animations\"\n  let-showRefLines=\"context.showRefLines\"\n  let-referenceLines=\"context.referenceLines\"\n  let-showRefLabels=\"context.showRefLabels\"\n  >\n  <div class=\"bb-stack bb-product-summary-line-chart\" [ngClass]=\"hostRef.classes\">\n    <ngx-charts-line-chart\n      [autoScale]=\"autoScale\"\n      [results]=\"dataSeries\"\n      [gradient]=\"gradient\"\n      [customColors]=\"customColors\"\n      [xAxis]=\"xAxis\"\n      [yAxis]=\"yAxis\"\n      [legend]=\"legend\"\n      [showXAxisLabel]=\"showXAxisLabel\"\n      [showYAxisLabel]=\"showYAxisLabel\"\n      [showRefLines]=\"showRefLines\"\n      [showRefLabels]=\"showRefLabels\"\n      [referenceLines]=\"referenceLines\"\n      [xAxisLabel]=\"xAxisLabel\"\n      [yAxisTickFormatting]=\"hostRef.yAxisTickFormat\"\n      [xAxisTickFormatting]=\"hostRef.xAxisTickFormat\"\n      [yAxisLabel]=\"yAxisLabel\"\n      [animations]=\"animations\">\n\n      <ng-template #tooltipTemplate let-model=\"model\">\n        <ng-container bbBalanceHistoryLineChartTooltipCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"{ model: model }\">\n          <ng-template bbBalanceHistoryLineChartTooltipCustomizable let-hostRef let-model=\"context.model\">\n            <div class=\"bb-product-summary-line-chart__tooltip\">\n              <div data-role=\"tooltip-header\">\n                {{model.name | date: hostRef.tooltipDateFormat }}\n              </div>\n              <div>\n                {{hostRef.currency}}\n                <span data-role=\"tooltip-item-value\">\n                  <bb-amount-ui\n                    [amount]=\"model.value\"\n                    [showPlusSign]=\"hostRef.showTooltipAmountSign\"\n                    [showPercent]=\"hostRef.showTooltipAmountPercent\"\n                  ></bb-amount-ui>\n                </span>\n              </div>\n            </div>\n          </ng-template>\n        </ng-container>\n      </ng-template>\n\n      <ng-template #seriesTooltipTemplate let-model=\"model\">\n        <ng-container\n          bbBalanceHistoryLineChartSeriesTooltipCustomizable\n          [bbHostRef]=\"hostRef\"\n          [bbTemplateContext]=\"{ model: hostRef.sanitizeTooltipValues(model) }\"\n        >\n          <ng-template bbBalanceHistoryLineChartSeriesTooltipCustomizable let-hostRef let-model=\"context.model\">\n            <div class=\"bb-product-summary-line-chart__tooltip\">\n              <div data-role=\"tooltip-header\">\n                {{model[0]?.name | date: hostRef.tooltipDateFormat }}\n              </div>\n              <div *ngFor=\"let item of model\">\n                {{hostRef.currency}}\n                <span data-role=\"tooltip-item-value\">\n                  <bb-amount-ui\n                    [amount]=\"item.value\"\n                    [showPlusSign]=\"hostRef.showTooltipAmountSign\"\n                    [showPercent]=\"hostRef.showTooltipAmountPercent\"\n                  ></bb-amount-ui>\n                </span>\n              </div>\n            </div>\n          </ng-template>\n        </ng-container>\n      </ng-template>\n    </ngx-charts-line-chart>\n  </div>\n</ng-template>\n\n", components: [{ type: i0.forwardRef(function () { return i1$5.LineChartComponent; }), selector: "ngx-charts-line-chart", inputs: ["legendTitle", "legendPosition", "showGridLines", "curve", "activeEntries", "trimXAxisTicks", "trimYAxisTicks", "rotateXAxisTicks", "maxXAxisTickLength", "maxYAxisTickLength", "roundDomains", "tooltipDisabled", "showRefLines", "showRefLabels", "legend", "xAxis", "yAxis", "showXAxisLabel", "showYAxisLabel", "xAxisLabel", "yAxisLabel", "autoScale", "timeline", "gradient", "schemeType", "rangeFillOpacity", "xAxisTickFormatting", "yAxisTickFormatting", "xAxisTicks", "yAxisTicks", "referenceLines", "xScaleMin", "xScaleMax", "yScaleMin", "yScaleMax"], outputs: ["activate", "deactivate"] }, { type: i0.forwardRef(function () { return i2.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i0.forwardRef(function () { return BalanceHistoryLineChartCustomizableDirective; }), selector: "[bbBalanceHistoryLineChartCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return BalanceHistoryLineChartTooltipCustomizableDirective; }), selector: "[bbBalanceHistoryLineChartTooltipCustomizable]" }, { type: i0.forwardRef(function () { return BalanceHistoryLineChartTooltipSeriesCustomizableDirective; }), selector: "[bbBalanceHistoryLineChartSeriesTooltipCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "date": i0.forwardRef(function () { return i3.DatePipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LineChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-line-chart-ui',
                    templateUrl: './line-chart.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { classes: [{
                type: Input
            }], dataSeries: [{
                type: Input
            }], showXAxis: [{
                type: Input
            }], showYAxis: [{
                type: Input
            }], gradient: [{
                type: Input
            }], showLegend: [{
                type: Input
            }], showXAxisLabel: [{
                type: Input
            }], showYAxisLabel: [{
                type: Input
            }], xAxisLabel: [{
                type: Input
            }], yAxisLabel: [{
                type: Input
            }], autoScale: [{
                type: Input
            }], animations: [{
                type: Input
            }], customColors: [{
                type: Input
            }], currency: [{
                type: Input
            }], showTooltipAmountSign: [{
                type: Input
            }], showTooltipAmountPercent: [{
                type: Input
            }], tooltipDateFormat: [{
                type: Input
            }], showRefLines: [{
                type: Input
            }], showRefLabels: [{
                type: Input
            }], referenceLines: [{
                type: Input
            }], xAxisTickFormatFunction: [{
                type: Input
            }], yAxisTickFormatFunction: [{
                type: Input
            }] } });
class BalanceHistoryLineChartCustomizableDirective extends BbTemplate {
}
BalanceHistoryLineChartCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryLineChartCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
BalanceHistoryLineChartCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BalanceHistoryLineChartCustomizableDirective, selector: "[bbBalanceHistoryLineChartCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryLineChartCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBalanceHistoryLineChartCustomizable]',
                }]
        }] });
class BalanceHistoryLineChartTooltipCustomizableDirective extends BbTemplate {
}
BalanceHistoryLineChartTooltipCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryLineChartTooltipCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
BalanceHistoryLineChartTooltipCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BalanceHistoryLineChartTooltipCustomizableDirective, selector: "[bbBalanceHistoryLineChartTooltipCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryLineChartTooltipCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBalanceHistoryLineChartTooltipCustomizable]',
                }]
        }] });
class BalanceHistoryLineChartTooltipSeriesCustomizableDirective extends BbTemplate {
}
BalanceHistoryLineChartTooltipSeriesCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryLineChartTooltipSeriesCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
BalanceHistoryLineChartTooltipSeriesCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BalanceHistoryLineChartTooltipSeriesCustomizableDirective, selector: "[bbBalanceHistoryLineChartSeriesTooltipCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryLineChartTooltipSeriesCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBalanceHistoryLineChartSeriesTooltipCustomizable]',
                }]
        }] });

class LineChartLegendComponent {
    constructor() {
        this.hostRef = this;
        /**
         * The chart data (data series) that this component is using to calculate min max
         */
        this.dataSeries = [];
        /**
         * The currency data
         */
        this.currency = '';
        /**
         * Set custom colors for negative and positive areas
         */
        this.customColors = [];
    }
    getMax() {
        return Math.max(...this.values);
    }
    getMin() {
        return Math.min(...this.values);
    }
    getPositiveColor() {
        const customColor = findByName(this.customColors, CustomColorName.POSITIVE);
        return customColor ? customColor.value : '';
    }
    getNegativeColor() {
        const customColor = findByName(this.customColors, CustomColorName.NEGATIVE);
        return customColor ? customColor.value : '';
    }
    get values() {
        const allDateSeries = this.dataSeries.reduce((memo, { series }) => memo.concat(series), []);
        return allDateSeries.map((date) => date.value);
    }
}
LineChartLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LineChartLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LineChartLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LineChartLegendComponent, selector: "bb-line-chart-legend-ui", inputs: { dataSeries: "dataSeries", currency: "currency", customColors: "customColors" }, ngImport: i0, template: "<ng-container\n  bbBalanceHistoryLineChartLegendCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    dataSeries: dataSeries,\n    customColors: customColors\n  }\"\n></ng-container>\n\n<ng-template\n  bbBalanceHistoryLineChartLegendCustomizable\n  let-hostRef\n  let-dataSeries=\"context.dataSeries\"\n  let-customColors=\"context.customColors\"\n>\n  <bb-chart-legend-ui\n    [currency]=\"hostRef.currency\"\n    [maxValue]=\"hostRef.getMax()\"\n    [minValue]=\"hostRef.getMin()\"\n    [positiveColor]=\"hostRef.getPositiveColor()\"\n    [negativeColor]=\"hostRef.getNegativeColor()\"\n  ></bb-chart-legend-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return ChartLegendComponent; }), selector: "bb-chart-legend-ui", inputs: ["currency", "maxValue", "minValue", "positiveColor", "negativeColor"] }], directives: [{ type: i0.forwardRef(function () { return BalanceHistoryLineChartLegendCustomizableDirective; }), selector: "[bbBalanceHistoryLineChartLegendCustomizable]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LineChartLegendComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-line-chart-legend-ui',
                    templateUrl: 'line-chart-legend.component.html',
                }]
        }], propDecorators: { dataSeries: [{
                type: Input
            }], currency: [{
                type: Input
            }], customColors: [{
                type: Input
            }] } });
class BalanceHistoryLineChartLegendCustomizableDirective extends BbTemplate {
}
BalanceHistoryLineChartLegendCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryLineChartLegendCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
BalanceHistoryLineChartLegendCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BalanceHistoryLineChartLegendCustomizableDirective, selector: "[bbBalanceHistoryLineChartLegendCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryLineChartLegendCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBalanceHistoryLineChartLegendCustomizable]',
                }]
        }] });

const uiModules$7 = [AmountModule, ChartLegendModule];
const declarations = [
    LineChartComponent,
    LineChartLegendComponent,
    BalanceHistoryLineChartCustomizableDirective,
    BalanceHistoryLineChartTooltipCustomizableDirective,
    BalanceHistoryLineChartTooltipSeriesCustomizableDirective,
    BalanceHistoryLineChartCustomizableDirective,
    BalanceHistoryLineChartTooltipCustomizableDirective,
    BalanceHistoryLineChartTooltipSeriesCustomizableDirective,
    BalanceHistoryLineChartLegendCustomizableDirective,
];
class LineChartModule {
}
LineChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LineChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
LineChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LineChartModule, declarations: [LineChartComponent,
        LineChartLegendComponent,
        BalanceHistoryLineChartCustomizableDirective,
        BalanceHistoryLineChartTooltipCustomizableDirective,
        BalanceHistoryLineChartTooltipSeriesCustomizableDirective,
        BalanceHistoryLineChartCustomizableDirective,
        BalanceHistoryLineChartTooltipCustomizableDirective,
        BalanceHistoryLineChartTooltipSeriesCustomizableDirective,
        BalanceHistoryLineChartLegendCustomizableDirective], imports: [CommonModule, LineChartModule$1, AmountModule, ChartLegendModule], exports: [LineChartComponent,
        LineChartLegendComponent,
        BalanceHistoryLineChartCustomizableDirective,
        BalanceHistoryLineChartTooltipCustomizableDirective,
        BalanceHistoryLineChartTooltipSeriesCustomizableDirective,
        BalanceHistoryLineChartCustomizableDirective,
        BalanceHistoryLineChartTooltipCustomizableDirective,
        BalanceHistoryLineChartTooltipSeriesCustomizableDirective,
        BalanceHistoryLineChartLegendCustomizableDirective, AmountModule, ChartLegendModule] });
LineChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LineChartModule, imports: [[CommonModule, LineChartModule$1, ...uiModules$7], AmountModule, ChartLegendModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LineChartModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, LineChartModule$1, ...uiModules$7],
                    declarations: [...declarations],
                    exports: [...declarations, ...uiModules$7],
                }]
        }] });

class ProductKindNameComponent {
    constructor() {
        this.hostRef = this;
        this.productKindNames = ProductKindNames;
        this.productKindUri = ProductKindUri;
        /**
         * Product kind name for which display a localized version
         *
         * @default ''
         */
        this.name = '';
        /**
         * Defines whether product kind name is plural
         *
         * @default false
         */
        this.isPlural = false;
    }
}
ProductKindNameComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindNameComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductKindNameComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductKindNameComponent, selector: "bb-product-kind-name", inputs: { name: "name", isPlural: "isPlural" }, ngImport: i0, template: "<ng-container\n  bbProductKindNameCustomizable\n  [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template\n  bbProductKindNameCustomizable\n  let-hostRef>\n  <ng-container [ngSwitch]=\"hostRef.name\">\n    <ng-container *ngSwitchCase=\"hostRef.productKindUri.CURRENT_ACCOUNT\">\n      <span i18n=\"Current Account|Product kind name@@product-summary.product-kind-name.current-account\">\n        {+hostRef.isPlural, plural, =0 {Current Account} =1 {Current Accounts}}\n      </span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"hostRef.productKindUri.SAVINGS_ACCOUNT\">\n      <span i18n=\"Savings Account|Product kind name@@product-summary.product-kind-name.savings-account\">\n        {+hostRef.isPlural, plural, =0 {Savings Account} =1 {Savings Accounts}}\n      </span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"hostRef.productKindUri.TERM_DEPOSIT\">\n      <span i18n=\"Terms Deposit|Product kind name@@product-summary.product-kind-name.term-deposit\">\n        {+hostRef.isPlural, plural, =0 {Term Deposit} =1 {Term Deposits}}\n      </span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"hostRef.productKindUri.LOAN\">\n      <span i18n=\"Loan|Product kind name@@product-summary.product-kind-name.loan\">\n        {+hostRef.isPlural, plural, =0 {Loan} =1 {Loans}}\n      </span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"hostRef.productKindUri.CREDIT_CARD\">\n      <span i18n=\"Credit Card|Product kind name@@product-summary.product-kind-name.credit-card\">\n        {+hostRef.isPlural, plural, =0 {Credit Card} =1 {Credit Cards}}\n      </span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"hostRef.productKindUri.DEBIT_CARD\">\n      <span i18n=\"Debit card|Product kind name@@product-summary.product-kind-name.debit-card\">\n        {+hostRef.isPlural, plural, =0 {Debit Card} =1 {Debit Cards}}\n      </span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"hostRef.productKindUri.INVESTMENT_ACCOUNT\">\n      <span i18n=\"Investment Account|Product kind name@@product-summary.product-kind-name.investment-account\">\n        {+hostRef.isPlural, plural, =0 {Investment Account} =1 {Investment Accounts}}\n      </span>\n    </ng-container>\n    <ng-container *ngSwitchDefault>\n      <span>{{hostRef.name}}</span>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n", directives: [{ type: i0.forwardRef(function () { return ProductKindNameCustomizableDirective; }), selector: "[bbProductKindNameCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i3.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i3.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindNameComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-kind-name',
                    templateUrl: 'bb-product-kind-name.component.html',
                }]
        }], propDecorators: { name: [{
                type: Input
            }], isPlural: [{
                type: Input
            }] } });
/**
 * This is an extension slot to be used for customizing the entire component
 *
 * @usageNotes
 *
 * ### Customize details
 *
 * ```html
 * <ng-template
 *   bbProductKindNameCustomizable
 *   let-hostRef>
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryAccountDetailsWidgetModule
 */
class ProductKindNameCustomizableDirective extends BbTemplate {
}
ProductKindNameCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindNameCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductKindNameCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductKindNameCustomizableDirective, selector: "[bbProductKindNameCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindNameCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductKindNameCustomizable]',
                }]
        }] });

class ProductItemCardComponent {
    /**
     * @internal
     * @param domAttributesService
     */
    constructor(domAttributesService) {
        this.domAttributesService = domAttributesService;
        this.hostRef = this;
        /**
         * A reference to AccountNavigationType enum
         */
        this.accountNavigationType = AccountNavigationType;
        /**
         * Unique id for account-name DOM element
         */
        this.accountNameId = this.domAttributesService.generateId();
        /**
         * Allowed navigation types, change it to hide some of the navigation links
         *
         * @default DefaultAllowedNavigationTypes
         */
        this.allowedNavigations = DefaultAllowedNavigationTypes;
        /**
         * Flag that indicates if changing favorite status is allowed
         *
         * @default true
         */
        this.canToggleFavorite = true;
        /**
         * Is item set as favorite
         */
        this.isFavorite = false;
        /**
         * itemSelect emits selected account when card is selected
         */
        this.itemSelect = new EventEmitter();
        /**
         * favorite emits selected account as ProductsummaryItem object
         */
        this.favorite = new EventEmitter();
        /**
         * viewTransactions emits id of clicked account as string - used to navigate to transactions
         */
        this.viewTransactions = new EventEmitter();
        /**
         * viewStatements emits selected account id as string - used to navigate to statements
         */
        this.viewStatements = new EventEmitter();
        /**
         * newPayment emits id of clicked account as string - used to navigate to payments
         */
        this.newPayment = new EventEmitter();
        /**
         * viewBalanceHistory emits selected account id as string - used to navigate to balance history
         */
        this.viewBalanceHistory = new EventEmitter();
    }
    get favoriteIcon() {
        return this.isFavorite ? 'star' : 'star-border';
    }
    getIconName(productKindName = '') {
        return getProductKindIconName(productKindName);
    }
    getIconColor(productKindName = '') {
        return toKebabCase(productKindName);
    }
    /**
     * emits "itemSelected" event
     */
    onItemSelected() {
        this.itemSelect.emit(this.item);
    }
    onFavorite(account) {
        this.favorite.emit(account);
    }
    onViewTransactions(id) {
        this.viewTransactions.emit(id);
    }
    onNewPayment(id) {
        this.newPayment.emit(id);
    }
    onViewStatements(id) {
        this.viewStatements.emit(id);
    }
    onViewBalanceHistory(id) {
        this.viewBalanceHistory.emit(id);
    }
}
ProductItemCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCardComponent, deps: [{ token: i6.DomAttributesService }], target: i0.ɵɵFactoryTarget.Component });
ProductItemCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductItemCardComponent, selector: "bb-product-item-card", inputs: { allowedNavigations: "allowedNavigations", canToggleFavorite: "canToggleFavorite", isFavorite: "isFavorite", item: "item" }, outputs: { itemSelect: "itemSelect", favorite: "favorite", viewTransactions: "viewTransactions", viewStatements: "viewStatements", newPayment: "newPayment", viewBalanceHistory: "viewBalanceHistory" }, ngImport: i0, template: "<div class=\"bb-product-item-card\" (bbKeyboardClick)=\"hostRef.onItemSelected()\">\n  <div class=\"bb-product-item-card__header\">\n    <div class=\"bb-product-item-card__kind\">\n      <bb-icon-ui\n        class=\"bb-product-item-card__kind bb-product-item-card__kind--icon\"\n        class=\"bb-product-item-card__kind-icon\"\n        backgroundType=\"square\"\n        size=\"sm\"\n        [name]=\"getIconName(item?.productKindName)\"\n        color=\"secondary\">\n      </bb-icon-ui>\n      <bb-product-kind-name\n        data-role=\"product-kind\"\n        class=\"bb-text-bold bb-product-item-card__kind-text\"\n        [name]=\"item?.productKindName\"></bb-product-kind-name>\n    </div>\n    <div class=\"bb-product-item-card__buttons\">\n      <div\n        *ngIf=\"hostRef.canToggleFavorite\"\n        triggers=\"hover focus\"\n        placement=\"bottom\"\n        bbTooltip=\"Toggle favorite account\"\n        i18n-bbTooltip=\"Toggle favorite account|Button tooltip favorite account\n          @@product-item-card-ui.button.tooltip.favorite\"\n        data-role=\"favorite-icon\"\n      >\n        <button\n          bbButton\n          color=\"link\"\n          [circle]=\"true\"\n          [attr.aria-describedby]=\"hostRef.accountNameId\"\n          (click)=\"onFavorite(item); $event.stopPropagation()\"\n        >\n        <span class=\"sr-only\" i18n=\"Show if is favorite account@@product-item-card.is.favorite.account\">\n          {hostRef.isFavorite ? 'yes' : 'no', select, yes {Favorite account} no {Not favorite account}}\n        </span>\n          <span class=\"sr-only\" i18n=\"Toggle favorite account@@product-item-card.button.favoriteUnfavorite\">\n          Toggle favorite account\n        </span>\n          <bb-icon-ui\n            [name]=\"favoriteIcon\"\n          ></bb-icon-ui>\n        </button>\n      </div>\n      <bb-dropdown-menu-ui\n        btnColor=\"none\"\n        [btnCircle]=\"true\"\n        icon=\"ellipsis-h\"\n        bbTooltip=\"More actions\"\n        i18n-bbTooltip=\"More actions@@product-item-card-ui.label.moreActions\"\n        triggers=\"hover focus\"\n        placement=\"bottom\"\n        aria-label=\"More actions\"\n        i18n-aria-label=\"More actions@@product-item-card-ui.label.moreActions\"\n        [attr.aria-describedby]=\"hostRef.accountNameId\"\n        (click)=\"$event.stopPropagation()\"\n        container=\"body\"\n      >\n        <ng-template bbDropdownMenuItem>\n          <a\n            *ngIf=\"hostRef.allowedNavigations?.includes(hostRef.accountNavigationType.PAYMENTS)\"\n            i18n=\"New Payment@@product-item-card-ui.label.newPayment\"\n            role=\"menuitem\"\n            data-role=\"navigate-to-new-payment\"\n            class=\"dropdown-item\"\n            aria-label=\"Navigate to new payment\"\n            i18n-aria-label=\"Navigate to new payment | Navigate to new payment aria label\n              @@product-item-card-ui.aria.label.view.new.payment\"\n            tabindex=\"0\"\n            (bbKeyboardClick)=\"hostRef.onNewPayment(item?.id); $event.stopPropagation()\">\n            New Payment\n          </a>\n          <a\n            *ngIf=\"hostRef.allowedNavigations?.includes(hostRef.accountNavigationType.TRANSACTIONS)\"\n            i18n=\"See Transactions@@product-item-card-ui.label.viewTransactions\"\n            role=\"menuitem\"\n            data-role=\"navigate-to-transactions\"\n            class=\"dropdown-item\"\n            aria-label=\"Navigate to transaction\"\n            i18n-aria-label=\"Navigate to Transaction | Navigate to Transaction aria label\n              @@product-item-card-ui.aria.label.view.transaction\"\n            tabindex=\"0\"\n            (bbKeyboardClick)=\"hostRef.onViewTransactions(item?.id); $event.stopPropagation()\">\n            See Transactions\n          </a>\n          <a\n            *ngIf=\"hostRef.allowedNavigations?.includes(hostRef.accountNavigationType.BALANCE_HISTORY)\"\n            i18n=\"See Balance history@@product-item-card-ui.label.viewBalanceHistory\"\n            role=\"menuitem\"\n            data-role=\"navigate-to-balance-history\"\n            class=\"dropdown-item\"\n            aria-label=\"Navigate to balance history\"\n            i18n-aria-label=\"Navigate to balance history | Navigate to balance history aria label\n              @@product-item-card-ui.aria.label.view.balanceHistory\"\n            tabindex=\"0\"\n            (bbKeyboardClick)=\"hostRef.onViewBalanceHistory(item?.id); $event.stopPropagation()\">\n            See Balance history\n          </a>\n          <a\n            *ngIf=\"hostRef.allowedNavigations?.includes(hostRef.accountNavigationType.STATEMENTS)\"\n            i18n=\"See Statements@@product-item-card-ui.label.viewStatements\"\n            role=\"menuitem\"\n            data-role=\"navigate-to-account-statements\"\n            class=\"dropdown-item\"\n            aria-label=\"Navigate to statements\"\n            i18n-aria-label=\"Navigate to Statements | Navigate to Statements aria label\n              @@product-item-card-ui.aria.label.view.statements\"\n            tabindex=\"0\"\n            (bbKeyboardClick)=\"hostRef.onViewStatements(item?.id); $event.stopPropagation()\">\n            See Statements\n          </a>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </div>\n  </div>\n  <div class=\"bb-product-item-card__body\">\n    <div>\n      <div>\n        <div\n          role=\"link\"\n          tabindex=\"0\"\n          data-role=\"product-name\"\n          class=\"bb-product-item-card__name\"\n          [id]=\"hostRef.accountNameId\"\n          (bbKeyboardClick)=\"hostRef.onItemSelected(); $event.stopPropagation();\"\n        >\n          {{ item?.displayName }}\n        </div>\n        <div\n          *ngIf=\"item?.bankAlias\"\n          data-role=\"product-alias\"\n          class=\"bb-product-item-card__alias\"\n        >\n          ({{ item?.bankAlias }})\n        </div>\n      </div>\n      <div\n        class=\"bb-account-info__product-number\"\n        data-role=\"card-view-account-number\"\n        *ngIf=\"item && (item?.IBAN || item?.BBAN || item?.number)\"\n      >\n        <bb-product-number\n          [product]=\"item\"\n        ></bb-product-number>\n      </div>\n    </div>\n    <div class=\"bb-product-item-card__balance\">\n      <bb-amount-ui\n        class=\"bb-account__amount bb-highlight\"\n        [amount]=\"item?.bookedBalance\"\n        [currency]=\"item?.currency\"\n        [mapCurrency]=\"false\"\n        data-role=\"card-booked-balance\"\n      >\n      </bb-amount-ui>\n      <div *ngIf=\"item?.availableBalance\">\n        <bb-amount-ui\n          class=\"bb-subtitle bb-product-item-card__balance-secondary\"\n          [amount]=\"item?.availableBalance\"\n          [currency]=\"item?.currency\"\n          [mapCurrency]=\"false\"\n          data-role=\"card-available-balance\"\n        >\n        </bb-amount-ui>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: ProductKindNameComponent, selector: "bb-product-kind-name", inputs: ["name", "isPlural"] }, { type: i4$2.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: ProductNumberComponent, selector: "bb-product-number", inputs: ["number", "product", "format", "type", "unmaskable", "masked"], outputs: ["mask", "unmask"] }, { type: i2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i7$2.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i4$2.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-item-card',
                    templateUrl: 'product-item-card-ui.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i6.DomAttributesService }]; }, propDecorators: { allowedNavigations: [{
                type: Input
            }], canToggleFavorite: [{
                type: Input
            }], isFavorite: [{
                type: Input
            }], item: [{
                type: Input
            }], itemSelect: [{
                type: Output
            }], favorite: [{
                type: Output
            }], viewTransactions: [{
                type: Output
            }], viewStatements: [{
                type: Output
            }], newPayment: [{
                type: Output
            }], viewBalanceHistory: [{
                type: Output
            }] } });

class ProductKindNameModule {
}
ProductKindNameModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindNameModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductKindNameModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindNameModule, declarations: [ProductKindNameComponent, ProductKindNameCustomizableDirective], imports: [CommonModule], exports: [ProductKindNameComponent, ProductKindNameCustomizableDirective] });
ProductKindNameModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindNameModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindNameModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [ProductKindNameComponent, ProductKindNameCustomizableDirective],
                    exports: [ProductKindNameComponent, ProductKindNameCustomizableDirective],
                }]
        }] });

const uiModules$6 = [
    IconModule,
    DropdownMenuModule,
    PaymentCardNumberModule,
    AmountModule,
    ButtonModule,
    TooltipModule,
    ProductKindNameModule,
    KeyboardClickModule,
    ProductNumberModule,
];
const components$5 = [ProductItemCardComponent];
class ProductItemCardModule {
}
ProductItemCardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductItemCardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCardModule, declarations: [ProductItemCardComponent], imports: [CommonModule, IconModule,
        DropdownMenuModule,
        PaymentCardNumberModule,
        AmountModule,
        ButtonModule,
        TooltipModule,
        ProductKindNameModule,
        KeyboardClickModule,
        ProductNumberModule], exports: [ProductItemCardComponent, IconModule,
        DropdownMenuModule,
        PaymentCardNumberModule,
        AmountModule,
        ButtonModule,
        TooltipModule,
        ProductKindNameModule,
        KeyboardClickModule,
        ProductNumberModule] });
ProductItemCardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCardModule, providers: [DomAttributesService], imports: [[CommonModule, ...uiModules$6], IconModule,
        DropdownMenuModule,
        PaymentCardNumberModule,
        AmountModule,
        ButtonModule,
        TooltipModule,
        ProductKindNameModule,
        KeyboardClickModule,
        ProductNumberModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCardModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules$6],
                    providers: [DomAttributesService],
                    declarations: [...components$5],
                    exports: [...components$5, ...uiModules$6],
                }]
        }] });

/**
 * Displays product item title
 *
 * @usageNotes
 *
 * ```html
 * <bb-product-item-custom-title-ui
 *   [title]="'title'"
 *   [productNumber]="'12345678'"
 *   [productNumberType]="'bban'"
 *   [favorite]="true"
 * ></bb-product-item-custom-title-ui>
 * ```
 *
 * @ngModule ProductItemCustomModule
 */
class ProductItemCustomTitleComponent {
    constructor() {
        /**
         * The card Title value. Default is empty string
         *
         * @default ''
         */
        this.title = '';
        /**
         * Specifies if title can be focused and selected
         *
         * @default false
         */
        this.titleInteractive = false;
        /**
         * Specifies if logo should be displayed
         *
         * @default false
         */
        this.showLogo = true;
        /**
         * Source for bank logo.
         * Can be either a URL or base64 image.
         *
         * @default ''
         */
        this.logoSrc = '';
        /**
         * Product kind name to display a related logo icon.
         *
         * @default ''
         */
        this.logoKind = '';
        /**
         * Specifies if external title should be displayed.
         *
         * @default false
         */
        this.showExternalTitle = true;
        /**
         * The favorite state of card (add favorite icon next to title)
         *
         * @default false
         */
        this.favorite = false;
        /**
         * The favorite icon color (define star icon color)
         *
         * @default 'primary'
         */
        this.favoriteIconColor = 'primary';
        /**
         * The product Number. Default is empty string
         *
         * @default ''
         */
        this.productNumber = '';
        /**
         * State name to display
         * Supported values: 'active', 'inactive', 'closed'
         * If the state name is not supported it will be shown as it is
         *
         * @default ''
         */
        this.state = '';
        /**
         * selectTitle emits when custom title is selected
         */
        this.selectCustomTitle = new EventEmitter();
        this.uniqueSelectCustomTitleEvent = new Subject();
        this.subscriptions = [];
    }
    /**
     * @internal
     */
    ngOnInit() {
        const uniqueSelectCustomTitleSubscription = this.uniqueSelectCustomTitleEvent
            .pipe(distinctUntilChanged())
            .subscribe(event => this.selectCustomTitle.emit(event));
        this.subscriptions.push(uniqueSelectCustomTitleSubscription);
    }
    /**
     * @internal
     */
    ngOnDestroy() {
        this.subscriptions.forEach(subscription => subscription.unsubscribe());
        this.uniqueSelectCustomTitleEvent.complete();
    }
    /**
     * emits "selectCustomTitle" event
     */
    onSelectCustomTitle(event) {
        this.uniqueSelectCustomTitleEvent.next(event);
    }
    /**
     * Returns financial institution name
     */
    getExternalTitle() {
        var _a;
        if (this.showExternalTitle) {
            return ((_a = this.externalTitle) !== null && _a !== void 0 ? _a : $localize `:@@product-summary-ui.product-item-custom-title.external-title:External account`);
        }
        return undefined;
    }
}
ProductItemCustomTitleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCustomTitleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductItemCustomTitleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductItemCustomTitleComponent, selector: "bb-product-item-custom-title-ui", inputs: { title: "title", titleInteractive: "titleInteractive", showLogo: "showLogo", logoSrc: "logoSrc", logoKind: "logoKind", showExternalTitle: "showExternalTitle", externalTitle: "externalTitle", favorite: "favorite", favoriteIconColor: "favoriteIconColor", productNumber: "productNumber", productNumberType: "productNumberType", state: "state" }, outputs: { selectCustomTitle: "selectCustomTitle" }, ngImport: i0, template: "<div class=\"bb-account-info\" (click)=\"onSelectCustomTitle($event)\">\n  <ng-container *ngIf=\"showLogo && (logoSrc || logoKind); else titleWithoutLogo\">\n    <div class=\"bb-stack bb-stack--align-top bb-stack--density-sm bb-block bb-block--xs\">\n      <bb-product-summary-account-logo\n        *ngIf=\"logoSrc || logoKind\"\n        class=\"bb-stack__item\"\n        [logoSrc]=\"logoSrc\"\n        [productKindName]=\"logoKind\"\n        iconColor=\"secondary\"\n        iconSize=\"sm\"\n        logoSize=\"sm\"\n      ></bb-product-summary-account-logo>\n      <div *ngIf=\"showExternalTitle; else accountTitle\" class=\"bb-stack__item\">\n        <ng-container *ngTemplateOutlet=\"accountExternalTitle\"></ng-container>\n      </div>\n    </div>\n    <ng-container *ngIf=\"showExternalTitle\">\n      <ng-container *ngTemplateOutlet=\"accountTitle\"></ng-container>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #titleWithoutLogo>\n    <ng-container *ngTemplateOutlet=\"accountExternalTitle\"></ng-container>\n    <ng-container *ngTemplateOutlet=\"accountTitle\"></ng-container>\n  </ng-template>\n\n  <ng-template #accountExternalTitle>\n    <div *ngIf=\"showExternalTitle\" class=\"bb-subtitle bb-text-semi-bold bb-text-support bb-block bb-block--xs\">\n      <bb-ellipsis-ui [text]=\"getExternalTitle()\" lineClamp=\"1\"></bb-ellipsis-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #accountTitle>\n    <div class=\"bb-stack bb-account-info__title bb-block bb-block--xs\" *ngIf=\"title || favorite || state\">\n      <div class=\"bb-stack__item bb-stack__item--spacing-sm\" data-role=\"card-title\">\n        <bb-ellipsis-ui\n          *ngIf=\"titleInteractive; else staticTitle\"\n          [text]=\"title\"\n          role=\"link\"\n          tabindex=\"0\"\n          lineClamp=\"1\"\n          (bbKeyboardClick)=\"onSelectCustomTitle($event)\"\n        ></bb-ellipsis-ui>\n        <ng-template #staticTitle>\n          <bb-ellipsis-ui [text]=\"title\" lineClamp=\"1\"></bb-ellipsis-ui>\n        </ng-template>\n      </div>\n      <bb-icon-ui\n        *ngIf=\"favorite\"\n        class=\"bb-stack__item bb-account-info__icon\"\n        size=\"sm\"\n        [color]=\"favoriteIconColor\"\n        data-role=\"favorite-icon\"\n        name=\"star\"\n        tabindex=\"0\"\n        aria-label=\"Favorite account\"\n        i18n-aria-label=\"Favorite account|Icon aria-label favorite account\n                @@product-summary.product-item-title-custom.icon.favorite.aria-label\"\n        bbTooltip=\"Favorite account\"\n        triggers=\"hover focus\"\n        i18n-bbTooltip=\"Favorite account|Icon tooltip favorite account\n                @@product-summary.product-item-title-custom.icon.favorite.tooltip\"\n      ></bb-icon-ui>\n      <bb-arrangement-state-indicator\n        *ngIf=\"state\"\n        [state]=\"state\"\n        class=\"bb-stack__item\"\n        data-role=\"arrangementState\"\n      ></bb-arrangement-state-indicator>\n    </div>\n  </ng-template>\n\n  <div\n      (mousedown)=\"$event.stopPropagation()\"\n      *ngIf=\"productNumber\"\n      data-role=\"card-sub-title\"\n      class=\"bb-account-info__product-number\"\n    >\n    <bb-ellipsis-ui>\n      <bb-product-number\n        [number]=\"productNumber\"\n        [type]=\"productNumberType\"\n      ></bb-product-number>\n    </bb-ellipsis-ui>\n  </div>\n</div>\n\n", components: [{ type: ProductSummaryAccountLogoComponent, selector: "bb-product-summary-account-logo", inputs: ["logoSrc", "productKindName", "defaultProductKindName", "iconColor", "iconSize", "logoSize"] }, { type: i2$2.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }, { type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: ArrangementStateIndicatorComponent, selector: "bb-arrangement-state-indicator", inputs: ["state", "showActive", "showIcon", "hideStateTextForMobile"] }, { type: ProductNumberComponent, selector: "bb-product-number", inputs: ["number", "product", "format", "type", "unmaskable", "masked"], outputs: ["mask", "unmask"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7$2.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i5.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCustomTitleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-item-custom-title-ui',
                    templateUrl: './bb-product-item-custom-title-ui.component.html',
                }]
        }], propDecorators: { title: [{
                type: Input
            }], titleInteractive: [{
                type: Input
            }], showLogo: [{
                type: Input
            }], logoSrc: [{
                type: Input
            }], logoKind: [{
                type: Input
            }], showExternalTitle: [{
                type: Input
            }], externalTitle: [{
                type: Input
            }], favorite: [{
                type: Input
            }], favoriteIconColor: [{
                type: Input
            }], productNumber: [{
                type: Input
            }], productNumberType: [{
                type: Input
            }], state: [{
                type: Input
            }], selectCustomTitle: [{
                type: Output
            }] } });

const uiModules$5 = [
    IconModule,
    PaymentCardNumberModule,
    ArrangementStateIndicatorModule,
    EllipsisModule,
    TooltipModule,
    ProductNumberModule,
    KeyboardClickModule,
    ProductSummaryAccountLogoModule,
];
const components$4 = [ProductItemCustomTitleComponent];
class ProductItemCustomModule {
}
ProductItemCustomModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCustomModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductItemCustomModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCustomModule, declarations: [ProductItemCustomTitleComponent], imports: [CommonModule, BackbaseCoreModule, IconModule,
        PaymentCardNumberModule,
        ArrangementStateIndicatorModule,
        EllipsisModule,
        TooltipModule,
        ProductNumberModule,
        KeyboardClickModule,
        ProductSummaryAccountLogoModule], exports: [ProductItemCustomTitleComponent, IconModule,
        PaymentCardNumberModule,
        ArrangementStateIndicatorModule,
        EllipsisModule,
        TooltipModule,
        ProductNumberModule,
        KeyboardClickModule,
        ProductSummaryAccountLogoModule] });
ProductItemCustomModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCustomModule, imports: [[CommonModule, BackbaseCoreModule, ...uiModules$5], IconModule,
        PaymentCardNumberModule,
        ArrangementStateIndicatorModule,
        EllipsisModule,
        TooltipModule,
        ProductNumberModule,
        KeyboardClickModule,
        ProductSummaryAccountLogoModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCustomModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, BackbaseCoreModule, ...uiModules$5],
                    declarations: [...components$4],
                    exports: [...components$4, ...uiModules$5],
                }]
        }] });

/**
 * Displays product kind item
 *
 * @usageNotes
 *
 * ```html
 * <bb-product-kind
 *   [item]="item"
 * ></bb-product-kind>
 * ```
 *
 * @ngModule ProductKindModule
 */
class ProductKindComponent extends ResponsiveContainerComponent {
    /**
     * @internal
     */
    constructor(element, changeDetector) {
        super(element, changeDetector);
        this.hostRef = this;
        /**
         * A method to return the alias of the given account
         */
        this.getAlias = getAccountAlias;
        /**
         * Returns true if product has external info
         */
        this.hasExternalInfo = hasExternalInfo;
        /**
         * Emits ProductKind when selected
         */
        this.selectProductKind = new EventEmitter();
        this.uniqueSelectProductKindEvent = new Subject();
        this.subscriptions = [];
    }
    /**
     * @internal
     */
    ngOnInit() {
        const uniqueSelectProductKindSubscription = this.uniqueSelectProductKindEvent
            .pipe(distinctUntilChanged())
            .subscribe(() => this.selectProductKind.emit(this.item));
        this.subscriptions.push(uniqueSelectProductKindSubscription);
    }
    /**
     * @internal
     */
    ngOnDestroy() {
        this.subscriptions.forEach(subscription => subscription.unsubscribe());
        this.uniqueSelectProductKindEvent.complete();
    }
    /**
     * Emits `selectProductKind` event
     */
    onSelectProductKind(event = new Event('default')) {
        this.uniqueSelectProductKindEvent.next(event);
    }
}
ProductKindComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ProductKindComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductKindComponent, selector: "bb-product-kind", inputs: { item: "item", showLogo: "showLogo" }, outputs: { selectProductKind: "selectProductKind" }, usesInheritance: true, ngImport: i0, template: "<ng-container\n  bbProductKindCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"item\">\n</ng-container>\n\n<ng-template bbProductKindCustomizable\n  let-hostRef\n  let-item=\"context\">\n  <div class=\"bb-product-kind-ui\">\n    <div class=\"bb-product-kind-ui__item bb-stack bb-stack--align-top\" (click)=\"hostRef.onSelectProductKind($event)\">\n      <div *ngIf=\"hostRef.showLogo && hostRef.responsiveView !== 'mobile'\" class=\"bb-stack__item\">\n        <ng-container *ngTemplateOutlet=\"productLogo\"></ng-container>\n      </div>\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <bb-product-item-custom-title-ui\n          *ngIf=\"hostRef.hasExternalInfo(item) && hostRef.responsiveView !== 'mobile'\"\n          [showExternalTitle]=\"true\"\n          [externalTitle]=\"item?.financialInstitution?.name\"\n        ></bb-product-item-custom-title-ui>\n        <ng-container *ngTemplateOutlet=\"productItem\"></ng-container>\n      </div>\n    </div>\n\n    <ng-template #productLogo>\n      <bb-product-summary-account-logo\n        [logoSrc]=\"item?.financialInstitution?.logo\"\n        [productKindName]=\"item?.productKindName\"\n        iconColor=\"secondary\"\n      ></bb-product-summary-account-logo>\n    </ng-template>\n\n    <ng-template #productItem>\n      <ng-container [ngSwitch]=\"item.kind\">\n\n        <!-- Current Account -->\n        <ng-container *ngSwitchCase=\"'currentAccounts'\">\n          <bb-product-item-current-account-ui\n            [title]=\"hostRef.getAlias(item)\"\n            [mainSectionCurrency]=\"item.currency\"\n            [mainSectionAmount]=\"item.availableBalance\"\n            mainSectionTitle=\"Available Balance\"\n            i18n-mainSectionTitle=\"Available Balance|Main Section tittle\n            @@product-summary-item-current-account-ui.main.section.title\"\n            [secondarySectionCurrency]=\"item.currency\"\n            [secondarySectionAmount]=\"item.creditLimitUsage\"\n            secondarySectionTitle=\"Credit Limit Usage\"\n            i18n-secondarySectionTitle=\"Credit Limit Usage|Secondary Section tittle\n            @@product-summary-item-current-account-ui.secondary.section.title\"\n            [active]=\"false\"\n            [productDetailsInfo]=\"{\n            'owners': item.accountHolderNames || ''\n          }\"\n          >\n            <ng-template bbCustomProductItemCurrentAccountTitle>\n              <ng-container *ngTemplateOutlet=\"productTitle\"></ng-container>\n            </ng-template>\n            <ng-template bbCustomProductItemCurrentAccountDetailsFormatter>\n              <ng-container *ngTemplateOutlet=\"productBalance; context: { amount: item.bookedBalance }\"></ng-container>\n            </ng-template>\n          </bb-product-item-current-account-ui>\n        </ng-container>\n\n        <!-- Savings Account -->\n        <ng-container *ngSwitchCase=\"'savingsAccounts'\">\n          <bb-product-item-savings-account-ui\n            [title]=\"hostRef.getAlias(item)\"\n            [mainSectionCurrency]=\"item.currency\"\n            [mainSectionAmount]=\"item.accruedInterest\"\n            mainSectionTitle=\"Accrued interest\"\n            i18n-mainSectionTitle=\"Accrued interest|Main Section tittle\n            @@product-summary-item-saving-accounts-ui.main.section.title\"\n            [active]=\"false\"\n            [productDetailsInfo]=\"{\n            'owners': item.accountHolderNames || ''\n          }\"\n          >\n            <ng-template bbCustomProductItemSavingsAccountTitle>\n              <ng-container *ngTemplateOutlet=\"productTitle\"></ng-container>\n            </ng-template>\n            <ng-template bbCustomProductItemSavingsAccountDetailsFormatter>\n              <ng-container *ngTemplateOutlet=\"productBalance; context: { amount: item.bookedBalance }\"></ng-container>\n            </ng-template>\n          </bb-product-item-savings-account-ui>\n        </ng-container>\n\n        <!-- Term Deposit -->\n        <ng-container *ngSwitchCase=\"'termDeposits'\">\n          <bb-product-item-term-deposit-ui\n            [title]=\"hostRef.getAlias(item)\"\n            [mainSectionCurrency]=\"item.currency\"\n            [mainSectionAmount]=\"item.accruedInterest\"\n            mainSectionTitle=\"Accrued interest\"\n            i18n-mainSectionTitle=\"Accrued interest|Accrued interest tittle\n            @@product-summary-item-term-deposit-ui.main.section.title\"\n            [active]=\"false\"\n            [productDetailsInfo]=\"{\n            'owners': item.accountHolderNames || ''\n          }\"\n          >\n            <ng-template bbCustomProductItemTermDepositTitle>\n              <ng-container *ngTemplateOutlet=\"productTitle\"></ng-container>\n            </ng-template>\n            <ng-template bbCustomProductItemTermDepositDetailsFormatter>\n              <ng-container *ngTemplateOutlet=\"productBalance; context: { amount: item.principalAmount }\"></ng-container>\n            </ng-template>\n          </bb-product-item-term-deposit-ui>\n        </ng-container>\n\n        <!-- Loans -->\n        <ng-container *ngSwitchCase=\"'loans'\">\n          <bb-product-item-loan-ui\n            [title]=\"hostRef.getAlias(item)\"\n            [active]=\"false\"\n            [productDetailsInfo]=\"{\n            'owners': item.accountHolderNames || ''\n          }\"\n          >\n            <ng-template bbCustomProductItemLoanTitle>\n              <ng-container *ngTemplateOutlet=\"productTitle\"></ng-container>\n            </ng-template>\n            <ng-template bbCustomProductItemLoanDetailsFormatter>\n              <ng-container *ngTemplateOutlet=\"productBalance; context: { amount: item.bookedBalance }\"></ng-container>\n            </ng-template>\n          </bb-product-item-loan-ui>\n        </ng-container>\n\n        <!-- Credit Card -->\n        <ng-container *ngSwitchCase=\"'creditCards'\">\n          <bb-product-item-credit-card-ui\n            [title]=\"hostRef.getAlias(item)\"\n            [mainSectionCurrency]=\"item.currency\"\n            [mainSectionAmount]=\"item.availableBalance\"\n            mainSectionTitle=\"Available Balance\"\n            i18n-mainSectionTitle=\"Available Balance|Main Section tittle\n            @@product-summary-item-credit-card-ui.main.section.title\"\n            [secondarySectionCurrency]=\"item.currency\"\n            [secondarySectionAmount]=\"item.creditLimit\"\n            secondarySectionTitle=\"Credit Limit\"\n            i18n-secondarySectionTitle=\"Credit Limit|Secondary Section tittle\n            @@product-summary-item-credit-card-ui.secondary.section.title\"\n            [active]=\"false\"\n            [productDetailsInfo]=\"{\n            'owners': item.accountHolderNames || ''\n          }\"\n          >\n            <ng-template bbCustomProductItemCreditCardTitle>\n              <ng-container *ngTemplateOutlet=\"productTitle\"></ng-container>\n            </ng-template>\n            <ng-template bbCustomProductItemCreditCardDetailsFormatter>\n              <ng-container *ngTemplateOutlet=\"productBalance; context: { amount: item.bookedBalance }\"></ng-container>\n            </ng-template>\n          </bb-product-item-credit-card-ui>\n        </ng-container>\n\n        <!-- Debit Card -->\n        <ng-container *ngSwitchCase=\"'debitCards'\">\n          <bb-product-item-debit-card-ui\n            [title]=\"hostRef.getAlias(item)\"\n            [active]=\"false\"\n            [productDetailsInfo]=\"{\n            'owners': item.accountHolderNames || ''\n          }\"\n          >\n            <ng-template bbCustomProductItemDebitCardTitle>\n              <ng-container *ngTemplateOutlet=\"productTitle\"></ng-container>\n            </ng-template>\n          </bb-product-item-debit-card-ui>\n        </ng-container>\n\n        <!-- Investment Account -->\n        <ng-container *ngSwitchCase=\"'investmentAccounts'\">\n          <bb-product-item-investment-account-ui\n            [title]=\"hostRef.getAlias(item)\"\n            [active]=\"false\"\n            [productDetailsInfo]=\"{\n            'owners': item.accountHolderNames || ''\n          }\"\n          >\n            <ng-template bbCustomProductItemInvestmentAccountTitle>\n              <ng-container *ngTemplateOutlet=\"productTitle\"></ng-container>\n            </ng-template>\n            <ng-template bbCustomProductItemInvestmentAccountDetailsFormatter>\n              <ng-container *ngTemplateOutlet=\"productBalance; context: { amount: item.currentInvestmentValue }\"></ng-container>\n            </ng-template>\n          </bb-product-item-investment-account-ui>\n        </ng-container>\n\n        <!-- Custom Account -->\n        <ng-container *ngSwitchDefault>\n          <bb-product-item-basic-account-ui\n            [title]=\"hostRef.getAlias(item)\"\n            [active]=\"false\"\n            [productDetailsInfo]=\"{\n            'owners': item.accountHolderNames || ''\n          }\"\n          >\n            <ng-template bbCustomProductItemBasicAccountTitle>\n              <ng-container *ngTemplateOutlet=\"productTitle\"></ng-container>\n            </ng-template>\n            <ng-template bbCustomProductItemBasicAccountDetailsFormatter>\n              <ng-container *ngTemplateOutlet=\"productBalance; context: { amount: item.bookedBalance }\"></ng-container>\n            </ng-template>\n          </bb-product-item-basic-account-ui>\n        </ng-container>\n\n      </ng-container>\n    </ng-template>\n\n    <ng-template #productTitle>\n      <bb-product-item-custom-title-ui\n        [title]=\"hostRef.getAlias(item)\"\n        [titleInteractive]=\"true\"\n        [showLogo]=\"hostRef.showLogo && hostRef.responsiveView == 'mobile'\"\n        [logoSrc]=\"item?.financialInstitution?.logo\"\n        [logoKind]=\"item?.productKindName\"\n        [showExternalTitle]=\"hostRef.hasExternalInfo(item) && hostRef.responsiveView == 'mobile'\"\n        [externalTitle]=\"item?.financialInstitution?.name\"\n        [productNumber]=\"item | bbProductNumberValue\"\n        [productNumberType]=\"item | bbProductNumberType\"\n        [favorite]=\"item?.userPreferences?.favorite\"\n        [state]=\"item?.state?.state\"\n        (selectCustomTitle)=\"hostRef.onSelectProductKind($event)\"\n      ></bb-product-item-custom-title-ui>\n    </ng-template>\n\n    <ng-template #productBalance let-amount=\"amount\">\n      <div class=\"bb-text-align-right\" *ngIf=\"amount | bbIsDefined\">\n        <bb-amount-ui\n          class=\"bb-highlight bb-product-item__amount\"\n          [amount]=\"amount\"\n          [currency]=\"item?.currency\"\n        ></bb-amount-ui>\n        <div *ngIf=\"hostRef.hasExternalInfo(item) && item?.lastSyncDate\" class=\"bb-text-support bb-subtitle\">\n          {{ item?.lastSyncDate | bbDateUpdatedAgo }}\n        </div>\n      </div>\n    </ng-template>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return ProductItemCustomTitleComponent; }), selector: "bb-product-item-custom-title-ui", inputs: ["title", "titleInteractive", "showLogo", "logoSrc", "logoKind", "showExternalTitle", "externalTitle", "favorite", "favoriteIconColor", "productNumber", "productNumberType", "state"], outputs: ["selectCustomTitle"] }, { type: i0.forwardRef(function () { return ProductSummaryAccountLogoComponent; }), selector: "bb-product-summary-account-logo", inputs: ["logoSrc", "productKindName", "defaultProductKindName", "iconColor", "iconSize", "logoSize"] }, { type: i0.forwardRef(function () { return i3$3.ProductItemCurrentAccountComponent; }), selector: "bb-product-item-current-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "mainSectionCurrency", "mainSectionAmount", "mainSectionTitle", "secondarySectionCurrency", "secondarySectionAmount", "secondarySectionTitle", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }, { type: i0.forwardRef(function () { return i4$3.ProductItemSavingsAccountComponent; }), selector: "bb-product-item-savings-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "mainSectionCurrency", "mainSectionAmount", "mainSectionTitle", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }, { type: i0.forwardRef(function () { return i5$3.ProductItemTermDepositComponent; }), selector: "bb-product-item-term-deposit-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "mainSectionCurrency", "mainSectionAmount", "mainSectionTitle", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }, { type: i0.forwardRef(function () { return i6$2.ProductItemLoanComponent; }), selector: "bb-product-item-loan-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }, { type: i0.forwardRef(function () { return i7$3.ProductItemCreditCardComponent; }), selector: "bb-product-item-credit-card-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "mainSectionCurrency", "mainSectionAmount", "mainSectionTitle", "secondarySectionCurrency", "secondarySectionAmount", "secondarySectionTitle", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }, { type: i0.forwardRef(function () { return i8.ProductItemDebitCardComponent; }), selector: "bb-product-item-debit-card-ui", inputs: ["title", "productNumber", "productNumberFormat", "highlight", "active", "productDetailsInfo", "favorite", "favoriteIconColor"] }, { type: i0.forwardRef(function () { return i9.ProductItemInvestmentAccountComponent; }), selector: "bb-product-item-investment-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }, { type: i0.forwardRef(function () { return i10.ProductItemBasicAccountComponent; }), selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }, { type: i0.forwardRef(function () { return i2.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i0.forwardRef(function () { return ProductKindCustomizableDirective; }), selector: "[bbProductKindCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i3.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return i3.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i3.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i3$3.CustomProductItemCurrentAccountTitleDirective; }), selector: "ng-template[bbCustomProductItemCurrentAccountTitle]" }, { type: i0.forwardRef(function () { return i3$3.CustomProductItemCurrentAccountDetailsFormatterDirective; }), selector: "ng-template[bbCustomProductItemCurrentAccountDetailsFormatter]" }, { type: i0.forwardRef(function () { return i4$3.CustomProductItemSavingsAccountTitleDirective; }), selector: "ng-template[bbCustomProductItemSavingsAccountTitle]" }, { type: i0.forwardRef(function () { return i4$3.CustomProductItemSavingsAccountDetailsFormatterDirective; }), selector: "ng-template[bbCustomProductItemSavingsAccountDetailsFormatter]" }, { type: i0.forwardRef(function () { return i5$3.CustomProductItemTermDepositTitleDirective; }), selector: "ng-template[bbCustomProductItemTermDepositTitle]" }, { type: i0.forwardRef(function () { return i5$3.CustomProductItemTermDepositDetailsFormatterDirective; }), selector: "ng-template[bbCustomProductItemTermDepositDetailsFormatter]" }, { type: i0.forwardRef(function () { return i6$2.CustomProductItemLoanTitleDirective; }), selector: "ng-template[bbCustomProductItemLoanTitle]" }, { type: i0.forwardRef(function () { return i6$2.CustomProductItemLoanDetailsFormatterDirective; }), selector: "ng-template[bbCustomProductItemLoanDetailsFormatter]" }, { type: i0.forwardRef(function () { return i7$3.CustomProductItemCreditCardTitleDirective; }), selector: "ng-template[bbCustomProductItemCreditCardTitle]" }, { type: i0.forwardRef(function () { return i7$3.CustomProductItemCreditCardDetailsFormatterDirective; }), selector: "ng-template[bbCustomProductItemCreditCardDetailsFormatter]" }, { type: i0.forwardRef(function () { return i8.CustomProductItemDebitCardTitleDirective; }), selector: "ng-template[bbCustomProductItemDebitCardTitle]" }, { type: i0.forwardRef(function () { return i9.CustomProductItemInvestmentAccountTitleDirective; }), selector: "ng-template[bbCustomProductItemInvestmentAccountTitle]" }, { type: i0.forwardRef(function () { return i9.CustomProductItemInvestmentAccountDetailsFormatterDirective; }), selector: "ng-template[bbCustomProductItemInvestmentAccountDetailsFormatter]" }, { type: i0.forwardRef(function () { return i3.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }, { type: i0.forwardRef(function () { return i10.CustomProductItemBasicAccountTitleDirective; }), selector: "ng-template[bbCustomProductItemBasicAccountTitle]" }, { type: i0.forwardRef(function () { return i10.CustomProductItemBasicAccountDetailsFormatterDirective; }), selector: "ng-template[bbCustomProductItemBasicAccountDetailsFormatter]" }], pipes: { "bbProductNumberValue": i0.forwardRef(function () { return i6.ProductNumberValuePipe; }), "bbProductNumberType": i0.forwardRef(function () { return i6.ProductNumberTypePipe; }), "bbIsDefined": i0.forwardRef(function () { return i6.IsDefinedPipe; }), "bbDateUpdatedAgo": i0.forwardRef(function () { return i6.DateUpdatedAgoPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-kind',
                    templateUrl: 'product-kind-ui.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { item: [{
                type: Input
            }], selectProductKind: [{
                type: Output
            }], showLogo: [{
                type: Input
            }] } });
class ProductKindCustomizableDirective extends BbTemplate {
}
ProductKindCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductKindCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductKindCustomizableDirective, selector: "[bbProductKindCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductKindCustomizable]',
                }]
        }] });

class ProductKindCollapsibleComponent {
    constructor() {
        /**
         * Emits the id of clicked account
         */
        this.selectAccount = new EventEmitter();
        /**
         * Emits selected product
         */
        this.selectProduct = new EventEmitter();
        /**
         * Emits the boolean value to toggle the expand/collapse state of the collapsable
         */
        this.isExpandedChange = new EventEmitter();
        this.hostRef = this;
    }
    onSelectAccount(id) {
        this.selectAccount.emit(id);
    }
    toggleExpanded() {
        this.isExpandedChange.emit(!this.isExpanded);
    }
}
ProductKindCollapsibleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindCollapsibleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductKindCollapsibleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductKindCollapsibleComponent, selector: "bb-product-kind-collapsible-ui", inputs: { isExpanded: "isExpanded", showIcons: "showIcons", iconName: "iconName", productKind: "productKind" }, outputs: { selectAccount: "selectAccount", selectProduct: "selectProduct", isExpandedChange: "isExpandedChange" }, ngImport: i0, template: "<ng-container bbProductKindCollapsibleCustomizable\n              [bbHostRef]=\"hostRef\">\n</ng-container>\n\n<ng-template bbProductKindCollapsibleCustomizable\n             let-hostRef>\n  <div class=\"bb-product-kind card card-body\">\n    <div role=\"button\"\n         tabindex=\"0\"\n         [attr.aria-expanded]=\"!hostRef.isExpanded\"\n         class=\"bb-product-kind__header\"\n         data-role=\"expand-button\"\n         [class.bb-product-kind__header--collapsed]=\"hostRef.isExpanded\"\n         (bbKeyboardClick)=\"hostRef.toggleExpanded()\">\n      <div class=\"bb-product-kind__title\">\n        <bb-icon-ui [attr.data-role]=\"hostRef.iconName\"\n                    *ngIf=\"hostRef.showIcons && hostRef.iconName\"\n                    [name]=\"hostRef.iconName\"\n                    class=\"bb-product-kind__title-icon\">\n        </bb-icon-ui>\n        <bb-product-kind-name\n          [attr.data-role]=\"hostRef.productKind?.products[0]?.productKindUri\"\n          [isPlural]=\"true\"\n          [name]=\"hostRef.productKind?.products[0]?.productKindUri\"></bb-product-kind-name>\n      </div>\n      <div class=\"bb-product-kind__balance\">\n        <ng-container *ngIf=\"hostRef.productKind?.aggregatedBalance\">\n          <span class=\"bb-product-kind__balance-block\">\n            <span class=\"bb-product-kind__balance-title\"\n                  i18n=\"Total label|Label for a product summary widget total label component@@product-summary-total.label.total\">\n              Total\n            </span>\n            <bb-amount-ui data-role=\"current-account-total-amount\"\n                          [currency]=\"hostRef.productKind?.currency\"\n                          [amount]=\"hostRef.productKind?.aggregatedBalance\"></bb-amount-ui>\n          </span>\n        </ng-container>\n        <bb-icon-ui class=\"bb-product-kind__balance-icon \"\n                    name=\"toggle-{{!hostRef.isExpanded ? 'up' : 'down'}}\"></bb-icon-ui>\n      </div>\n    </div>\n\n    <div class=\"bb-product-kind__item-group\"\n         [ngbCollapse]=\"hostRef.isExpanded\">\n      <div class=\"bb-product-kind__item bb-list__item\"\n           *ngFor=\"let item of hostRef.productKind?.products\">\n        <bb-product-kind\n          [item]=\"item\"\n          [showLogo]=\"hostRef.showIcons\"\n          (selectProductKind)=\"hostRef.selectProduct.emit(item); hostRef.onSelectAccount($event.id);\"\n        ></bb-product-kind>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return ProductKindNameComponent; }), selector: "bb-product-kind-name", inputs: ["name", "isPlural"] }, { type: i0.forwardRef(function () { return i2.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0.forwardRef(function () { return ProductKindComponent; }), selector: "bb-product-kind", inputs: ["item", "showLogo"], outputs: ["selectProductKind"] }], directives: [{ type: i0.forwardRef(function () { return ProductKindCollapsibleCustomizableDirective; }), selector: "[bbProductKindCollapsibleCustomizable]" }, { type: i0.forwardRef(function () { return i7$2.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i7$4.NgbCollapse; }), selector: "[ngbCollapse]", inputs: ["ngbCollapse", "animation"], outputs: ["ngbCollapseChange", "shown", "hidden"], exportAs: ["ngbCollapse"] }, { type: i0.forwardRef(function () { return i3.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindCollapsibleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-kind-collapsible-ui',
                    templateUrl: './product-kind-collapsible.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isExpanded: [{
                type: Input
            }], showIcons: [{
                type: Input
            }], iconName: [{
                type: Input
            }], productKind: [{
                type: Input
            }], selectAccount: [{
                type: Output
            }], selectProduct: [{
                type: Output
            }], isExpandedChange: [{
                type: Output
            }] } });
class ProductKindCollapsibleCustomizableDirective extends BbTemplate {
}
ProductKindCollapsibleCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindCollapsibleCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductKindCollapsibleCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductKindCollapsibleCustomizableDirective, selector: "[bbProductKindCollapsibleCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindCollapsibleCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductKindCollapsibleCustomizable]',
                }]
        }] });

const uiModules$4 = [
    ProductItemCurrentAccountModule,
    ProductItemSavingsAccountModule,
    ProductItemTermDepositModule,
    ProductItemLoanModule,
    ProductItemCreditCardModule,
    ProductItemDebitCardModule,
    ProductItemInvestmentAccountModule,
    ProductItemBasicAccountModule,
    ProductItemCustomModule,
    KeyboardClickModule,
    ProductNumberModule,
    ProductSummaryAccountLogoModule,
    AmountModule,
    ValidationModule,
    DatePipeModule,
];
const components$3 = [ProductKindComponent];
const directives = [ProductKindCustomizableDirective];
class ProductKindModule {
}
ProductKindModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductKindModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindModule, declarations: [ProductKindComponent, ProductKindCustomizableDirective], imports: [CommonModule, ProductItemCurrentAccountModule,
        ProductItemSavingsAccountModule,
        ProductItemTermDepositModule,
        ProductItemLoanModule,
        ProductItemCreditCardModule,
        ProductItemDebitCardModule,
        ProductItemInvestmentAccountModule,
        ProductItemBasicAccountModule,
        ProductItemCustomModule,
        KeyboardClickModule,
        ProductNumberModule,
        ProductSummaryAccountLogoModule,
        AmountModule,
        ValidationModule,
        DatePipeModule], exports: [ProductKindComponent, ProductKindCustomizableDirective, ProductItemCurrentAccountModule,
        ProductItemSavingsAccountModule,
        ProductItemTermDepositModule,
        ProductItemLoanModule,
        ProductItemCreditCardModule,
        ProductItemDebitCardModule,
        ProductItemInvestmentAccountModule,
        ProductItemBasicAccountModule,
        ProductItemCustomModule,
        KeyboardClickModule,
        ProductNumberModule,
        ProductSummaryAccountLogoModule,
        AmountModule,
        ValidationModule,
        DatePipeModule] });
ProductKindModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindModule, imports: [[CommonModule, ...uiModules$4], ProductItemCurrentAccountModule,
        ProductItemSavingsAccountModule,
        ProductItemTermDepositModule,
        ProductItemLoanModule,
        ProductItemCreditCardModule,
        ProductItemDebitCardModule,
        ProductItemInvestmentAccountModule,
        ProductItemBasicAccountModule,
        ProductItemCustomModule,
        KeyboardClickModule,
        ProductNumberModule,
        ProductSummaryAccountLogoModule,
        AmountModule,
        ValidationModule,
        DatePipeModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules$4],
                    declarations: [...components$3, ...directives],
                    exports: [...components$3, ...directives, ...uiModules$4],
                }]
        }] });

const uiModules$3 = [IconModule, AmountModule, KeyboardClickModule, NgbModule, ProductKindModule, ProductKindNameModule];
const components$2 = [ProductKindCollapsibleComponent, ProductKindCollapsibleCustomizableDirective];
class ProductKindCollapsibleModule {
}
ProductKindCollapsibleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindCollapsibleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductKindCollapsibleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindCollapsibleModule, declarations: [ProductKindCollapsibleComponent, ProductKindCollapsibleCustomizableDirective], imports: [CommonModule, IconModule, AmountModule, KeyboardClickModule, NgbModule, ProductKindModule, ProductKindNameModule], exports: [ProductKindCollapsibleComponent, ProductKindCollapsibleCustomizableDirective, IconModule, AmountModule, KeyboardClickModule, NgbModule, ProductKindModule, ProductKindNameModule] });
ProductKindCollapsibleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindCollapsibleModule, imports: [[CommonModule, ...uiModules$3], IconModule, AmountModule, KeyboardClickModule, NgbModule, ProductKindModule, ProductKindNameModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindCollapsibleModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules$3],
                    declarations: [...components$2],
                    exports: [...components$2, ...uiModules$3],
                }]
        }] });

class ProductNeedsAttentionItemComponent extends ResponsiveContainerComponent {
    constructor(datePipe, element, changeDetector) {
        super(element, changeDetector);
        this.datePipe = datePipe;
        this.hostRef = this;
        this.productKindUri = ProductKindUri;
        /**
         * Emits ProductKind when selected
         */
        this.selectProductKind = new EventEmitter();
        /**
         * Emits arrangement id when pay now is clicked
         */
        this.payNowClick = new EventEmitter();
    }
    /**
     * Localisation for statusBadge
     */
    get statusBadges() {
        var _a, _b, _c, _d, _e, _f;
        return {
            overdueWithDate: $localize `:Status badge for overdue accounts with date|status badge for overdue accounts with date@@product-summary-ui.product-needs-attention-item.badge.overdueWithDate:${(_b = (_a = this.item) === null || _a === void 0 ? void 0 : _a.paymentsPastDue) !== null && _b !== void 0 ? _b : ''} Payments Missed Since ${this.datePipe.transform((_c = this.item) === null || _c === void 0 ? void 0 : _c.overdueSince, 'MMM d, yyyy')}`,
            overdueWithoutDate: $localize `:Status badge for overdue accounts without date|status badge for overdue accounts without date@@product-summary-ui.product-needs-attention-item.badge.overdueWithoutDate:${(_e = (_d = this.item) === null || _d === void 0 ? void 0 : _d.paymentsPastDue) !== null && _e !== void 0 ? _e : ''} Payments Missed`,
            overdrawnWithDate: $localize `:Status badge for overdrawn accounts with date|status badge for overdrawn accounts with date@@product-summary-ui.product-needs-attention-item.badge.overdrawnWithDate:Overdrawn Since ${this.datePipe.transform((_f = this.item) === null || _f === void 0 ? void 0 : _f.overdueSince, 'MMM d, yyyy')}`,
            overdrawnWithoutDate: $localize `:Status badge for overdrawn accounts without date|status badge for overdrawn accounts without date@@product-summary-ui.product-needs-attention-item.badge.overdrawnWithoutDate:Overdrawn`,
        };
    }
    /**
     * Emits `selectProductKind` event
     */
    onSelectProductKind() {
        this.selectProductKind.emit(this.item);
    }
}
ProductNeedsAttentionItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNeedsAttentionItemComponent, deps: [{ token: i1$2.BbDatePipe }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ProductNeedsAttentionItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductNeedsAttentionItemComponent, selector: "bb-product-needs-attention-item-ui", inputs: { item: "item", showLogo: "showLogo" }, outputs: { selectProductKind: "selectProductKind", payNowClick: "payNowClick" }, usesInheritance: true, ngImport: i0, template: "<ng-container\n  bbProductNeedsAttentionItemCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"item\"\n></ng-container>\n\n<ng-template\n  bbProductNeedsAttentionItemCustomizable\n  let-hostRef\n>\n  <div class=\"bb-product-needs-attention-item-ui\">\n    <div class=\"bb-product-needs-attention-item-ui__item\" (click)=\"hostRef.onSelectProductKind($event)\">\n      <!-- Account details  -->\n      <div class=\"bb-stack bb-stack--align-top bb-product-needs-attention-item-ui-header\">\n        <div class=\"bb-stack__item\" *ngIf=\"hostRef.showLogo && hostRef.responsiveView !== 'mobile'\">\n          <ng-container *ngTemplateOutlet=\"productLogo\"></ng-container>\n        </div>\n        <div class=\"bb-stack__item bb-stack__item--fill\">\n          <div class=\"bb-stack bb-stack--wrap\">\n            <div class=\"bb-stack__item\">\n              <div\n                role=\"link\"\n                tabindex=\"0\"\n                class=\"bb-text-bold\"\n                data-role=\"overdue-account-name\"\n                (bbKeyboardClick)=\"hostRef.onSelectProductKind($event)\"\n              >\n                {{ hostRef.item?.name }}\n              </div>\n              <div\n                class=\"bb-account-info__product-number\"\n                *ngIf=\"hostRef.item && (hostRef.item.IBAN || hostRef.item.BBAN || hostRef.item.number)\"\n              >\n                <bb-product-number\n                  data-role=\"overdue-account-number\"\n                  [product]=\"hostRef.item\"\n                ></bb-product-number>\n              </div>\n            </div>\n            <div\n              class=\"bb-stack__item bb-stack__item--push-right-lg-down bb-product-item__details\"\n              [ngClass]=\"{\n                'bb-stack__item--push-right': !(hostRef.responsiveView === 'mobile'),\n                'bb-stack__item--push-left': (hostRef.responsiveView === 'mobile')\n              }\"\n            >\n              <bb-amount-ui\n                data-role=\"overdue-account-booked-balance\"\n                class=\"bb-text-bold\"\n                [amount]=\"hostRef.item?.bookedBalance\"\n                [currency]=\"hostRef.item?.currency\"\n                [mapCurrency]=\"true\"\n              >\n              </bb-amount-ui>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Account status -->\n      <div class=\"bb-stack bb-block bb-block--sm bb-block--md-md-down\">\n        <div class=\"bb-stack__item\">\n          <bb-badge-ui\n            *ngIf=\"hostRef.item.productKindUri === hostRef.productKindUri.LOAN || hostRef.item.productKindUri === hostRef.productKindUri.CREDIT_CARD; else overdrawnStatusBadge\"\n            text=\"{{hostRef.item.overdueSince ? hostRef.statusBadges.overdueWithDate : hostRef.statusBadges.overdueWithoutDate}}\"\n            color=\"danger\"\n            data-role=\"overdue-account-status-badge\"\n          ></bb-badge-ui>\n          <ng-template #overdrawnStatusBadge>\n            <bb-badge-ui\n              text=\"{{hostRef.item.overdueSince ? hostRef.statusBadges.overdrawnWithDate : hostRef.statusBadges.overdrawnWithoutDate}}\"\n              color=\"danger\"\n              data-role=\"overdue-account-status-badge\"\n            ></bb-badge-ui>\n          </ng-template>\n        </div>\n        <div class=\"bb-stack__item bb-stack__item--push-right\">\n          <bb-amount-ui\n            class=\"bb-text-bold bb-text-danger\"\n            data-role=\"overdue-account-secondary-balance\"\n            [amount]=\"hostRef.item?.secondaryBalance\"\n            [currency]=\"hostRef.item?.currency\"\n            [mapCurrency]=\"true\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n\n      <!-- Pay now button -->\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          color=\"primary\"\n          class=\"bb-button-bar__button\"\n          data-role=\"overdue-account-pay-now-button\"\n          i18n=\"Pay Now button@@product-summary-ui.bb-product-needs-attention-item.button.payNow\"\n          (click)=\"hostRef.payNowClick.emit(hostRef.item.id); $event.stopPropagation()\"\n        >\n          Pay Now\n        </button>\n      </div>\n    </div>\n\n    <ng-template #productLogo>\n      <bb-product-summary-account-logo\n        [logoSrc]=\"hostRef.item?.financialInstitution?.logo\"\n        [productKindName]=\"hostRef.item?.productKindName\"\n        iconColor=\"secondary\"\n        data-role=\"overdue-account-logo\"\n      ></bb-product-summary-account-logo>\n    </ng-template>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return ProductNumberComponent; }), selector: "bb-product-number", inputs: ["number", "product", "format", "type", "unmaskable", "masked"], outputs: ["mask", "unmask"] }, { type: i0.forwardRef(function () { return i2.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0.forwardRef(function () { return i4$4.BadgeComponent; }), selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i0.forwardRef(function () { return ProductSummaryAccountLogoComponent; }), selector: "bb-product-summary-account-logo", inputs: ["logoSrc", "productKindName", "defaultProductKindName", "iconColor", "iconSize", "logoSize"] }], directives: [{ type: i0.forwardRef(function () { return ProductNeedsAttentionItemCustomizableDirective; }), selector: "[bbProductNeedsAttentionItemCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i3.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return i7$2.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i0.forwardRef(function () { return i3.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i4.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNeedsAttentionItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-needs-attention-item-ui',
                    templateUrl: './product-needs-attention-item.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$2.BbDatePipe }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { item: [{
                type: Input
            }], showLogo: [{
                type: Input
            }], selectProductKind: [{
                type: Output
            }], payNowClick: [{
                type: Output
            }] } });
class ProductNeedsAttentionItemCustomizableDirective extends BbTemplate {
}
ProductNeedsAttentionItemCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNeedsAttentionItemCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductNeedsAttentionItemCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductNeedsAttentionItemCustomizableDirective, selector: "[bbProductNeedsAttentionItemCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNeedsAttentionItemCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductNeedsAttentionItemCustomizable]',
                }]
        }] });

class ProductNeedsAttentionComponent {
    constructor() {
        /**
         * Emits the id of clicked account
         */
        this.selectAccount = new EventEmitter();
        /**
         * Emits selected product
         */
        this.selectProduct = new EventEmitter();
        /**
         * Emits the boolean value to toggle the expand/collapse state of the collapsable
         */
        this.isExpandedChange = new EventEmitter();
        /**
         * Emits arrangement id when pay now is clicked
         */
        this.payNowClick = new EventEmitter();
        this.hostRef = this;
    }
    onSelectAccount(id) {
        this.selectAccount.emit(id);
    }
    toggleExpanded() {
        this.isExpandedChange.emit(!this.isExpanded);
    }
}
ProductNeedsAttentionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNeedsAttentionComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductNeedsAttentionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductNeedsAttentionComponent, selector: "bb-product-needs-attention-ui", inputs: { isExpanded: "isExpanded", showIcons: "showIcons", iconName: "iconName", productKind: "productKind" }, outputs: { selectAccount: "selectAccount", selectProduct: "selectProduct", isExpandedChange: "isExpandedChange", payNowClick: "payNowClick" }, ngImport: i0, template: "<ng-container\n  bbProductNeedsAttentionCustomizable\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n\n<ng-template\n  bbProductNeedsAttentionCustomizable\n  let-hostRef\n>\n  <div class=\"bb-product-needs-attention card card-body\">\n    <div\n      role=\"button\"\n      tabindex=\"0\"\n      [attr.aria-expanded]=\"!hostRef.isExpanded\"\n      class=\"bb-product-needs-attention__header\"\n      data-role=\"needs-attention-expand-button\"\n      [class.bb-product-kind__header--collapsed]=\"hostRef.isExpanded\"\n      (bbKeyboardClick)=\"hostRef.toggleExpanded()\"\n    >\n      <div class=\"bb-product-needs-attention__header-title bb-stack\">\n        <bb-icon-ui\n          name=\"error\"\n          color=\"danger\"\n          data-role=\"needs-attention-title-icon\"\n          class=\"bb-product-needs-attention-title-icon bb-stack__item bb-stack__item--spacing-sm\"\n        ></bb-icon-ui>\n        <span \n          data-role=\"needs-attention-title-text\"\n          class=\"bb-product-needs-attention-title-text bb-stack__item\"\n        >Needs Your Attention</span>\n      </div>\n\n      <div class=\"bb-product-needs-attention__header-icon\">\n        <bb-icon-ui\n          class=\"bb-product-needs-attention-header-icon-chevron\"\n          data-role=\"needs-attention-header-icon-chevron\"\n          name=\"toggle-{{!hostRef.isExpanded ? 'up' : 'down'}}\"\n        ></bb-icon-ui>\n      </div>\n    </div>\n\n    <div\n      class=\"bb-product-needs-attention__item-group\"\n      [ngbCollapse]=\"hostRef.isExpanded\"\n    >\n      <div\n        class=\"bb-product-needs-attention-item bb-list__item\"\n        *ngFor=\"let item of hostRef.productKind?.products\"\n      >\n        <bb-product-needs-attention-item-ui\n          data-role=\"needs-attention-product-item\"\n          [item]=\"item\"\n          [showLogo]=\"hostRef.showIcons\"\n          (selectProductKind)=\"hostRef.selectProduct.emit(item); hostRef.onSelectAccount($event.id);\"\n          (payNowClick)=\"hostRef.payNowClick.emit($event);\"\n        ></bb-product-needs-attention-item-ui>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return ProductNeedsAttentionItemComponent; }), selector: "bb-product-needs-attention-item-ui", inputs: ["item", "showLogo"], outputs: ["selectProductKind", "payNowClick"] }], directives: [{ type: i0.forwardRef(function () { return ProductNeedsAttentionCustomizableDirective; }), selector: "[bbProductNeedsAttentionCustomizable]" }, { type: i0.forwardRef(function () { return i7$2.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i0.forwardRef(function () { return i7$4.NgbCollapse; }), selector: "[ngbCollapse]", inputs: ["ngbCollapse", "animation"], outputs: ["ngbCollapseChange", "shown", "hidden"], exportAs: ["ngbCollapse"] }, { type: i0.forwardRef(function () { return i3.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNeedsAttentionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-needs-attention-ui',
                    templateUrl: './product-needs-attention.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isExpanded: [{
                type: Input
            }], showIcons: [{
                type: Input
            }], iconName: [{
                type: Input
            }], productKind: [{
                type: Input
            }], selectAccount: [{
                type: Output
            }], selectProduct: [{
                type: Output
            }], isExpandedChange: [{
                type: Output
            }], payNowClick: [{
                type: Output
            }] } });
class ProductNeedsAttentionCustomizableDirective extends BbTemplate {
}
ProductNeedsAttentionCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNeedsAttentionCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductNeedsAttentionCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductNeedsAttentionCustomizableDirective, selector: "[bbProductNeedsAttentionCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNeedsAttentionCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductNeedsAttentionCustomizable]',
                }]
        }] });

const uiModules$2 = [
    IconModule,
    AmountModule,
    KeyboardClickModule,
    NgbModule,
    BadgeModule,
    ProductSummaryAccountLogoModule,
    ProductNumberModule,
    PaymentCardNumberModule,
    ButtonModule,
];
const components$1 = [ProductNeedsAttentionItemComponent, ProductNeedsAttentionItemCustomizableDirective];
class ProductNeedsAttentionItemModule {
}
ProductNeedsAttentionItemModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNeedsAttentionItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductNeedsAttentionItemModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNeedsAttentionItemModule, declarations: [ProductNeedsAttentionItemComponent, ProductNeedsAttentionItemCustomizableDirective], imports: [CommonModule, IconModule,
        AmountModule,
        KeyboardClickModule,
        NgbModule,
        BadgeModule,
        ProductSummaryAccountLogoModule,
        ProductNumberModule,
        PaymentCardNumberModule,
        ButtonModule], exports: [ProductNeedsAttentionItemComponent, ProductNeedsAttentionItemCustomizableDirective, IconModule,
        AmountModule,
        KeyboardClickModule,
        NgbModule,
        BadgeModule,
        ProductSummaryAccountLogoModule,
        ProductNumberModule,
        PaymentCardNumberModule,
        ButtonModule] });
ProductNeedsAttentionItemModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNeedsAttentionItemModule, imports: [[CommonModule, ...uiModules$2], IconModule,
        AmountModule,
        KeyboardClickModule,
        NgbModule,
        BadgeModule,
        ProductSummaryAccountLogoModule,
        ProductNumberModule,
        PaymentCardNumberModule,
        ButtonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNeedsAttentionItemModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules$2],
                    declarations: [...components$1],
                    exports: [...components$1, ...uiModules$2],
                }]
        }] });

const uiModules$1 = [IconModule, AmountModule, KeyboardClickModule, NgbModule, ProductNeedsAttentionItemModule];
const components = [ProductNeedsAttentionComponent, ProductNeedsAttentionCustomizableDirective];
class ProductNeedsAttentionModule {
}
ProductNeedsAttentionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNeedsAttentionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductNeedsAttentionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNeedsAttentionModule, declarations: [ProductNeedsAttentionComponent, ProductNeedsAttentionCustomizableDirective], imports: [CommonModule, IconModule, AmountModule, KeyboardClickModule, NgbModule, ProductNeedsAttentionItemModule], exports: [ProductNeedsAttentionComponent, ProductNeedsAttentionCustomizableDirective, IconModule, AmountModule, KeyboardClickModule, NgbModule, ProductNeedsAttentionItemModule] });
ProductNeedsAttentionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNeedsAttentionModule, imports: [[CommonModule, ...uiModules$1], IconModule, AmountModule, KeyboardClickModule, NgbModule, ProductNeedsAttentionItemModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNeedsAttentionModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules$1],
                    declarations: [...components],
                    exports: [...components, ...uiModules$1],
                }]
        }] });

class ProductSummaryFooterComponent {
    constructor() {
        /**
         * If `true`, the "First" and "Last" page links are shown.
         */
        this.boundaryLinks = true;
        /**
         * If `true`, the "Next" and "Previous" page links are shown.
         */
        this.directionLinks = false;
        /**
         * Event (Output) that emits when page prop is changed
         */
        this.pageChange = new EventEmitter();
        /**
         * Event (Output) that emits when load-more
         */
        this.loadMore = new EventEmitter();
        this.PaginationType = PaginationType;
    }
    onPageChange(page) {
        this.pageChange.emit(page);
    }
    onLoadMore() {
        if (!this.loading) {
            this.loadMore.emit();
        }
    }
}
ProductSummaryFooterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryFooterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductSummaryFooterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryFooterComponent, selector: "bb-product-summary-footer-ui", inputs: { page: "page", count: "count", itemsPerPage: "itemsPerPage", paginationType: "paginationType", hasMore: "hasMore", loading: "loading", boundaryLinks: "boundaryLinks", directionLinks: "directionLinks", maxNavPages: "maxNavPages" }, outputs: { pageChange: "pageChange", loadMore: "loadMore" }, ngImport: i0, template: "<div class=\"bb-stack bb-stack--center\">\n  <bb-pagination-ui\n    *ngIf=\"paginationType === PaginationType.PAGINATION && (hasMore || (!!page && page > 0))\"\n    [boundaryLinks]=\"boundaryLinks\"\n    [directionLinks]=\"directionLinks\"\n    [itemsPerPage]=\"itemsPerPage\"\n    [maxNavPages]=\"maxNavPages\"\n    [page]=\"page\"\n    [totalItems]=\"count\"\n    (pageChange)=\"onPageChange($event)\">\n  </bb-pagination-ui>\n\n  <bb-load-button-ui\n    color=\"secondary\"\n    *ngIf=\"paginationType === PaginationType.LOAD_MORE && hasMore\"\n    [size]=\"page\"\n    [totalCount]=\"count\"\n    (paramChange)=\"onLoadMore()\"\n    [isLoading]=\"loading\">\n      <span i18n=\"Load more|Load more button@@accounts-overview-footer.pagination.button.load-more\">\n        Load more\n      </span>\n  </bb-load-button-ui>\n</div>\n", components: [{ type: i1$6.PaginatorComponent, selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }, { type: i2$3.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryFooterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-summary-footer-ui',
                    templateUrl: './product-summary-footer.component.html',
                }]
        }], propDecorators: { page: [{
                type: Input
            }], count: [{
                type: Input
            }], itemsPerPage: [{
                type: Input
            }], paginationType: [{
                type: Input
            }], hasMore: [{
                type: Input
            }], loading: [{
                type: Input
            }], boundaryLinks: [{
                type: Input
            }], directionLinks: [{
                type: Input
            }], maxNavPages: [{
                type: Input
            }], pageChange: [{
                type: Output
            }], loadMore: [{
                type: Output
            }] } });

class ProductSummaryFooterModule {
}
ProductSummaryFooterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryFooterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductSummaryFooterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryFooterModule, declarations: [ProductSummaryFooterComponent], imports: [CommonModule, PaginationModule, LoadButtonModule], exports: [ProductSummaryFooterComponent] });
ProductSummaryFooterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryFooterModule, imports: [[CommonModule, PaginationModule, LoadButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryFooterModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PaginationModule, LoadButtonModule],
                    declarations: [ProductSummaryFooterComponent],
                    exports: [ProductSummaryFooterComponent],
                }]
        }] });

/**
 * Displays a loading indicator while favourite accounts are being loaded
 *
 * @usageNotes
 *
 * ### Display details of an account
 *
 * ```html
 * <bb-product-summary-loading></bb-product-summary-loading>
 * ```
 *
 * @ngModule ProductSummaryUiModule
 */
class ProductSummaryLoadingComponent {
    constructor() {
        /**
         * Flag indicating if list is requesting new data.
         *
         * @default false
         */
        this.isLoading = false;
        /**
         * Text to be displayed during loading.
         *
         * @default ''.
         */
        this.text = '';
    }
}
ProductSummaryLoadingComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryLoadingComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductSummaryLoadingComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryLoadingComponent, selector: "bb-product-summary-loading", inputs: { isLoading: "isLoading", text: "text", classes: "classes" }, ngImport: i0, template: "<ng-container *ngIf=\"!isLoading; else loading\">\n  <ng-content></ng-content>\n</ng-container>\n\n<ng-template #loading>\n  <div [ngClass]=\"classes\">\n    <bb-loading-indicator-ui [text]=\"text\"></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n", components: [{ type: i6$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryLoadingComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-summary-loading',
                    templateUrl: 'bb-product-summary-loading.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isLoading: [{
                type: Input
            }], text: [{
                type: Input
            }], classes: [{
                type: Input
            }] } });

class ProductSummaryLoadingModule {
}
ProductSummaryLoadingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryLoadingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductSummaryLoadingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryLoadingModule, declarations: [ProductSummaryLoadingComponent], imports: [CommonModule, LoadingIndicatorModule], exports: [ProductSummaryLoadingComponent] });
ProductSummaryLoadingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryLoadingModule, imports: [[CommonModule, LoadingIndicatorModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryLoadingModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, LoadingIndicatorModule],
                    declarations: [ProductSummaryLoadingComponent],
                    exports: [ProductSummaryLoadingComponent],
                }]
        }] });

const uiModules = [
    AccountGraphicalHeaderModule,
    AccountHeaderModule,
    AccountPickerModule,
    AccountStateModule,
    AreaChartModule,
    ArrangementStateIndicatorModule,
    ChartLegendModule,
    CreditLimitModule,
    LineChartModule,
    ProductItemCardModule,
    ProductItemCustomModule,
    ProductKindCollapsibleModule,
    ProductKindModule,
    ProductKindNameModule,
    ProductNeedsAttentionModule,
    ProductNeedsAttentionItemModule,
    ProductNumberModule,
    ProductSummaryAccountLogoModule,
    ProductSummaryFooterModule,
    ProductSummaryLoadingModule,
];
class ProductSummaryUiModule {
}
ProductSummaryUiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryUiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductSummaryUiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryUiModule, imports: [AccountGraphicalHeaderModule,
        AccountHeaderModule,
        AccountPickerModule,
        AccountStateModule,
        AreaChartModule,
        ArrangementStateIndicatorModule,
        ChartLegendModule,
        CreditLimitModule,
        LineChartModule,
        ProductItemCardModule,
        ProductItemCustomModule,
        ProductKindCollapsibleModule,
        ProductKindModule,
        ProductKindNameModule,
        ProductNeedsAttentionModule,
        ProductNeedsAttentionItemModule,
        ProductNumberModule,
        ProductSummaryAccountLogoModule,
        ProductSummaryFooterModule,
        ProductSummaryLoadingModule], exports: [AccountGraphicalHeaderModule,
        AccountHeaderModule,
        AccountPickerModule,
        AccountStateModule,
        AreaChartModule,
        ArrangementStateIndicatorModule,
        ChartLegendModule,
        CreditLimitModule,
        LineChartModule,
        ProductItemCardModule,
        ProductItemCustomModule,
        ProductKindCollapsibleModule,
        ProductKindModule,
        ProductKindNameModule,
        ProductNeedsAttentionModule,
        ProductNeedsAttentionItemModule,
        ProductNumberModule,
        ProductSummaryAccountLogoModule,
        ProductSummaryFooterModule,
        ProductSummaryLoadingModule] });
ProductSummaryUiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryUiModule, imports: [[...uiModules], AccountGraphicalHeaderModule,
        AccountHeaderModule,
        AccountPickerModule,
        AccountStateModule,
        AreaChartModule,
        ArrangementStateIndicatorModule,
        ChartLegendModule,
        CreditLimitModule,
        LineChartModule,
        ProductItemCardModule,
        ProductItemCustomModule,
        ProductKindCollapsibleModule,
        ProductKindModule,
        ProductKindNameModule,
        ProductNeedsAttentionModule,
        ProductNeedsAttentionItemModule,
        ProductNumberModule,
        ProductSummaryAccountLogoModule,
        ProductSummaryFooterModule,
        ProductSummaryLoadingModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryUiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...uiModules],
                    exports: [...uiModules],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AccountGraphicalHeaderComponent, AccountGraphicalHeaderModule, AccountHeaderComponent, AccountHeaderModule, AccountPickerComponent, AccountPickerModule, AccountStateComponent, AccountStateCustomizableDirective, AccountStateModule, AreaChartComponent, AreaChartLegendComponent, AreaChartModule, ArrangementStateIndicatorComponent, ArrangementStateIndicatorCustomizableDirective, ArrangementStateIndicatorModule, BalanceHistoryAreaChartCustomizableDirective, BalanceHistoryAreaChartLegendCustomizableDirective, BalanceHistoryLineChartCustomizableDirective, BalanceHistoryLineChartLegendCustomizableDirective, BalanceHistoryLineChartTooltipCustomizableDirective, BalanceHistoryLineChartTooltipSeriesCustomizableDirective, ChartLegendComponent, ChartLegendCustomizableDirective, ChartLegendModule, CreditLimitAttributeComponent, CreditLimitComponent, CreditLimitMinimumPaymentComponent, CreditLimitModule, CreditLimitStatusBarComponent, CustomColorName, CustomGroupItemsHeaderDirective, CustomLoadingTemplateDirective, CustomMultiSelectedItemsLabelDirective, CustomOptionItemDirective, CustomOptionsHeaderDirective, CustomSingleSelectedItemLabelDirective, LineChartComponent, LineChartLegendComponent, LineChartModule, ProductItemCardComponent, ProductItemCardModule, ProductItemCustomModule, ProductItemCustomTitleComponent, ProductKindCollapsibleComponent, ProductKindCollapsibleCustomizableDirective, ProductKindCollapsibleModule, ProductKindComponent, ProductKindCustomizableDirective, ProductKindModule, ProductKindNameComponent, ProductKindNameCustomizableDirective, ProductKindNameModule, ProductNeedsAttentionComponent, ProductNeedsAttentionCustomizableDirective, ProductNeedsAttentionItemComponent, ProductNeedsAttentionItemCustomizableDirective, ProductNeedsAttentionItemModule, ProductNeedsAttentionModule, ProductNumberComponent, ProductNumberCustomizableDirective, ProductNumberModule, ProductSummaryAccountLogoComponent, ProductSummaryAccountLogoCustomizableDirective, ProductSummaryAccountLogoModule, ProductSummaryFooterComponent, ProductSummaryFooterModule, ProductSummaryLoadingComponent, ProductSummaryLoadingModule, ProductSummaryUiModule };
//# sourceMappingURL=backbase-product-summary-ui.js.map
