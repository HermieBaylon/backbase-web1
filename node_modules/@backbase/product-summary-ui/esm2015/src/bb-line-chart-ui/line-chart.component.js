import { Component, Directive, Input, ChangeDetectionStrategy } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { isFunction } from '@backbase/product-summary-common-ang';
import * as i0 from "@angular/core";
import * as i1 from "@swimlane/ngx-charts";
import * as i2 from "@backbase/ui-ang/amount";
import * as i3 from "@angular/common";
export class LineChartComponent {
    constructor() {
        this.hostRef = this;
        /**
         * @default []
         * The chart data (data series)
         */
        this.dataSeries = [];
        /**
         * @default true
         * Show or hide X Axis
         */
        this.showXAxis = true;
        /**
         * @default true
         * Show or hide Y Axis
         */
        this.showYAxis = true;
        /**
         * @default false
         * Fill elements with a gradient instead of a solid color
         */
        this.gradient = false;
        /**
         * @default false
         * Show or hide the legend
         */
        this.showLegend = false;
        /**
         * @default false
         * Show or hide the X axis label
         */
        this.showXAxisLabel = false;
        /**
         * @default false
         * Show or hide the Y axis label
         */
        this.showYAxisLabel = false;
        /**
         * @default ''
         * X axis label text
         */
        this.xAxisLabel = '';
        /**
         * @default ''
         * Y axis label text
         */
        this.yAxisLabel = '';
        /**
         * @default false
         * Set the minimum value of the y axis to the minimum value in the data, instead of 0
         */
        this.autoScale = false;
        /**
         * @default true
         * Set animations to true
         */
        this.animations = true;
        /**
         * @default []
         * Set custom colors for negative and positive areas
         */
        this.customColors = [];
        /**
         * @default ''
         * The currency data
         */
        this.currency = '';
        /**
         * @default false
         * Show/Hide the amount symbol prefixed to the amount
         */
        this.showTooltipAmountSign = false;
        /**
         * @default false
         * Show/Hide the percentage symbol suffixed to the amount
         */
        this.showTooltipAmountPercent = false;
        /**
         * @default mediumDate
         * Date that will be displayed inside the tooltip
         */
        this.tooltipDateFormat = 'mediumDate';
        /**
         * @default true
         * Show/Hide the refrence line that will be shown behind the chart.
         * This will distinguish the postive and negative series.
         */
        this.showRefLines = true;
        /**
         * @default false
         * Show/Hide the refrence labels
         */
        this.showRefLabels = false;
        /**
         * @default []
         * Refrence lines that will be shown behind the chart
         */
        this.referenceLines = [];
        /**
         * @default defaultTickFormatFunction
         * x-Axis tick format function
         */
        this.xAxisTickFormatFunction = this.defaultTickFormatFunction;
        /**
         * @default defaultTickFormatFunction
         * y-Axis tick format function
         */
        this.yAxisTickFormatFunction = this.defaultTickFormatFunction;
        this.yAxisTickFormat = (tick) => {
            if (!isFunction(this.yAxisTickFormatFunction)) {
                throw new Error('Function should be provided');
            }
            return this.yAxisTickFormatFunction(tick);
        };
        this.xAxisTickFormat = (tick) => {
            if (!isFunction(this.xAxisTickFormatFunction)) {
                throw new Error('Function should be provided');
            }
            return this.xAxisTickFormatFunction(tick);
        };
    }
    ngOnInit() {
        if (this.showRefLines) {
            this.initReferenceLines();
        }
    }
    initReferenceLines() {
        this.referenceLines = this.referenceLines.slice();
        this.referenceLines.push({ name: '', value: 0 });
    }
    defaultTickFormatFunction(tick) {
        if (tick.constructor.name === 'Date') {
            return tick.toLocaleDateString();
        }
        return tick;
    }
    /**
     * Filters out consecutive duplicate values,
     * for example [2, 0, 0, 2] => [2, 0, 2]
     */
    sanitizeTooltipValues(tooltipValues) {
        return tooltipValues.filter((tooltipValue, index) => !index || Number(tooltipValue.value) !== Number(tooltipValues[index - 1].value));
    }
}
LineChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LineChartComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LineChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LineChartComponent, selector: "bb-line-chart-ui", inputs: { classes: "classes", dataSeries: "dataSeries", showXAxis: "showXAxis", showYAxis: "showYAxis", gradient: "gradient", showLegend: "showLegend", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", autoScale: "autoScale", animations: "animations", customColors: "customColors", currency: "currency", showTooltipAmountSign: "showTooltipAmountSign", showTooltipAmountPercent: "showTooltipAmountPercent", tooltipDateFormat: "tooltipDateFormat", showRefLines: "showRefLines", showRefLabels: "showRefLabels", referenceLines: "referenceLines", xAxisTickFormatFunction: "xAxisTickFormatFunction", yAxisTickFormatFunction: "yAxisTickFormatFunction" }, ngImport: i0, template: "<ng-container\n  bbBalanceHistoryLineChartCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    autoScale: autoScale,\n    dataSeries: dataSeries,\n    gradient: gradient,\n    customColors: customColors,\n    xAxis: showXAxis,\n    yAxis: showYAxis,\n    legend: showLegend,\n    showXAxisLabel: showXAxisLabel,\n    showYAxisLabel: showYAxisLabel,\n    xAxisLabel: xAxisLabel,\n    yAxisLabel: yAxisLabel,\n    animations: animations,\n    showRefLines: showRefLines,\n    referenceLines: referenceLines,\n    showRefLabels: showRefLabels\n  }\">\n</ng-container>\n<ng-template\n  bbBalanceHistoryLineChartCustomizable\n  let-hostRef\n  let-autoScale=\"context.autoScale\"\n  let-dataSeries=\"context.dataSeries\"\n  let-gradient=\"context.gradient\"\n  let-customColors=\"context.customColors\"\n  let-xAxis=\"context.xAxis\"\n  let-yAxis=\"context.yAxis\"\n  let-legend=\"context.legend\"\n  let-showXAxisLabel=\"context.showXAxisLabel\"\n  let-showYAxisLabel=\"context.showYAxisLabel\"\n  let-xAxisLabel=\"context.xAxisLabel\"\n  let-yAxisLabel=\"context.yAxisLabel\"\n  let-animations=\"context.animations\"\n  let-showRefLines=\"context.showRefLines\"\n  let-referenceLines=\"context.referenceLines\"\n  let-showRefLabels=\"context.showRefLabels\"\n  >\n  <div class=\"bb-stack bb-product-summary-line-chart\" [ngClass]=\"hostRef.classes\">\n    <ngx-charts-line-chart\n      [autoScale]=\"autoScale\"\n      [results]=\"dataSeries\"\n      [gradient]=\"gradient\"\n      [customColors]=\"customColors\"\n      [xAxis]=\"xAxis\"\n      [yAxis]=\"yAxis\"\n      [legend]=\"legend\"\n      [showXAxisLabel]=\"showXAxisLabel\"\n      [showYAxisLabel]=\"showYAxisLabel\"\n      [showRefLines]=\"showRefLines\"\n      [showRefLabels]=\"showRefLabels\"\n      [referenceLines]=\"referenceLines\"\n      [xAxisLabel]=\"xAxisLabel\"\n      [yAxisTickFormatting]=\"hostRef.yAxisTickFormat\"\n      [xAxisTickFormatting]=\"hostRef.xAxisTickFormat\"\n      [yAxisLabel]=\"yAxisLabel\"\n      [animations]=\"animations\">\n\n      <ng-template #tooltipTemplate let-model=\"model\">\n        <ng-container bbBalanceHistoryLineChartTooltipCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"{ model: model }\">\n          <ng-template bbBalanceHistoryLineChartTooltipCustomizable let-hostRef let-model=\"context.model\">\n            <div class=\"bb-product-summary-line-chart__tooltip\">\n              <div data-role=\"tooltip-header\">\n                {{model.name | date: hostRef.tooltipDateFormat }}\n              </div>\n              <div>\n                {{hostRef.currency}}\n                <span data-role=\"tooltip-item-value\">\n                  <bb-amount-ui\n                    [amount]=\"model.value\"\n                    [showPlusSign]=\"hostRef.showTooltipAmountSign\"\n                    [showPercent]=\"hostRef.showTooltipAmountPercent\"\n                  ></bb-amount-ui>\n                </span>\n              </div>\n            </div>\n          </ng-template>\n        </ng-container>\n      </ng-template>\n\n      <ng-template #seriesTooltipTemplate let-model=\"model\">\n        <ng-container\n          bbBalanceHistoryLineChartSeriesTooltipCustomizable\n          [bbHostRef]=\"hostRef\"\n          [bbTemplateContext]=\"{ model: hostRef.sanitizeTooltipValues(model) }\"\n        >\n          <ng-template bbBalanceHistoryLineChartSeriesTooltipCustomizable let-hostRef let-model=\"context.model\">\n            <div class=\"bb-product-summary-line-chart__tooltip\">\n              <div data-role=\"tooltip-header\">\n                {{model[0]?.name | date: hostRef.tooltipDateFormat }}\n              </div>\n              <div *ngFor=\"let item of model\">\n                {{hostRef.currency}}\n                <span data-role=\"tooltip-item-value\">\n                  <bb-amount-ui\n                    [amount]=\"item.value\"\n                    [showPlusSign]=\"hostRef.showTooltipAmountSign\"\n                    [showPercent]=\"hostRef.showTooltipAmountPercent\"\n                  ></bb-amount-ui>\n                </span>\n              </div>\n            </div>\n          </ng-template>\n        </ng-container>\n      </ng-template>\n    </ngx-charts-line-chart>\n  </div>\n</ng-template>\n\n", components: [{ type: i0.forwardRef(function () { return i1.LineChartComponent; }), selector: "ngx-charts-line-chart", inputs: ["legendTitle", "legendPosition", "showGridLines", "curve", "activeEntries", "trimXAxisTicks", "trimYAxisTicks", "rotateXAxisTicks", "maxXAxisTickLength", "maxYAxisTickLength", "roundDomains", "tooltipDisabled", "showRefLines", "showRefLabels", "legend", "xAxis", "yAxis", "showXAxisLabel", "showYAxisLabel", "xAxisLabel", "yAxisLabel", "autoScale", "timeline", "gradient", "schemeType", "rangeFillOpacity", "xAxisTickFormatting", "yAxisTickFormatting", "xAxisTicks", "yAxisTicks", "referenceLines", "xScaleMin", "xScaleMax", "yScaleMin", "yScaleMax"], outputs: ["activate", "deactivate"] }, { type: i0.forwardRef(function () { return i2.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i0.forwardRef(function () { return BalanceHistoryLineChartCustomizableDirective; }), selector: "[bbBalanceHistoryLineChartCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return BalanceHistoryLineChartTooltipCustomizableDirective; }), selector: "[bbBalanceHistoryLineChartTooltipCustomizable]" }, { type: i0.forwardRef(function () { return BalanceHistoryLineChartTooltipSeriesCustomizableDirective; }), selector: "[bbBalanceHistoryLineChartSeriesTooltipCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "date": i0.forwardRef(function () { return i3.DatePipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LineChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-line-chart-ui',
                    templateUrl: './line-chart.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { classes: [{
                type: Input
            }], dataSeries: [{
                type: Input
            }], showXAxis: [{
                type: Input
            }], showYAxis: [{
                type: Input
            }], gradient: [{
                type: Input
            }], showLegend: [{
                type: Input
            }], showXAxisLabel: [{
                type: Input
            }], showYAxisLabel: [{
                type: Input
            }], xAxisLabel: [{
                type: Input
            }], yAxisLabel: [{
                type: Input
            }], autoScale: [{
                type: Input
            }], animations: [{
                type: Input
            }], customColors: [{
                type: Input
            }], currency: [{
                type: Input
            }], showTooltipAmountSign: [{
                type: Input
            }], showTooltipAmountPercent: [{
                type: Input
            }], tooltipDateFormat: [{
                type: Input
            }], showRefLines: [{
                type: Input
            }], showRefLabels: [{
                type: Input
            }], referenceLines: [{
                type: Input
            }], xAxisTickFormatFunction: [{
                type: Input
            }], yAxisTickFormatFunction: [{
                type: Input
            }] } });
export class BalanceHistoryLineChartCustomizableDirective extends BbTemplate {
}
BalanceHistoryLineChartCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryLineChartCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
BalanceHistoryLineChartCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BalanceHistoryLineChartCustomizableDirective, selector: "[bbBalanceHistoryLineChartCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryLineChartCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBalanceHistoryLineChartCustomizable]',
                }]
        }] });
export class BalanceHistoryLineChartTooltipCustomizableDirective extends BbTemplate {
}
BalanceHistoryLineChartTooltipCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryLineChartTooltipCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
BalanceHistoryLineChartTooltipCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BalanceHistoryLineChartTooltipCustomizableDirective, selector: "[bbBalanceHistoryLineChartTooltipCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryLineChartTooltipCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBalanceHistoryLineChartTooltipCustomizable]',
                }]
        }] });
export class BalanceHistoryLineChartTooltipSeriesCustomizableDirective extends BbTemplate {
}
BalanceHistoryLineChartTooltipSeriesCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryLineChartTooltipSeriesCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
BalanceHistoryLineChartTooltipSeriesCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BalanceHistoryLineChartTooltipSeriesCustomizableDirective, selector: "[bbBalanceHistoryLineChartSeriesTooltipCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryLineChartTooltipSeriesCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBalanceHistoryLineChartSeriesTooltipCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,