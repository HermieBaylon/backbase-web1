import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { AccountAliasDisplayingLevel, UserPreferencesValidationSettings, } from '@backbase/product-summary-common-ang';
import * as i0 from "@angular/core";
import * as i1 from "../bb-product-summary-account-logo-ui/bb-product-summary-account-logo.component";
import * as i2 from "@backbase/ui-ang/input-inline-edit";
import * as i3 from "../bb-product-number/product-number.component";
import * as i4 from "@backbase/ui-ang/amount";
import * as i5 from "@backbase/ui-ang/modal";
import * as i6 from "@angular/common";
import * as i7 from "@backbase/product-summary-common-ang";
/**
 *
 * @usageNotes
 *
 * ### Usage example
 * ```
 * <bb-account-header
 *   [product]="product"
 *   [canEditAlias]="true"
 *   [isBalanceTypeVisible]="true"
 *   [mapCurrency]="true"
 * ></bb-account-header>
 * ```
 *
 * @NgModule AccountHeaderModule
 */
export class AccountHeaderComponent {
    constructor() {
        /**
         * Localisation for aliasHelpText
         */
        this.aliasHelpTextLocalization = {
            ACCOUNT: $localize `:This is visible to the whole company|Subtitle. Alias account visibility level@@product-summary-account-details-header.alias-visibility-level.account:This is visible to the whole company`,
            USER: $localize `:This is only visible to you|Subtitle. Alias user visibility level@@product-summary-account-details-header.alias-visibility-level.user:This is only visible to you`,
        };
        /**
         * Defines if alias can be edited
         */
        this.canEditAlias = false;
        /**
         * Defines visibility level of the account alis.
         *
         * @default 'USER'
         */
        this.aliasLevel = AccountAliasDisplayingLevel.USER;
        /**
         * Defines visibility of the balance.
         *
         * @default true
         */
        this.showBalance = true;
        /**
         * Defines visibility of the balance type.
         *
         * @default true
         */
        this.isBalanceTypeVisible = true;
        /**
         * Defines visibility of the logo
         *
         * @default true
         */
        this.isLogoVisible = true;
        /**
         * Whether currency local should be transformed to symbol.
         *
         * @default false.
         */
        this.mapCurrency = false;
        /**
         * Event (Output) that emits when item alias is changed
         */
        this.aliasUpdated = new EventEmitter();
        /**
         * Copy of product.displayName to be displayed and edited
         *
         * @default ""
         */
        this.displayName = '';
        /**
         * Flag to manage "confirm alias update" modal
         *
         * @default false
         */
        this.isVisibleAliasModal = false;
        /**
         * Maximum length of product item aliases
         *
         * @default UserPreferencesValidationSettings.ALIAS_MAX_LENGTH (50)
         */
        this.aliasMaxLength = UserPreferencesValidationSettings.ALIAS_MAX_LENGTH;
        /**
         * Options for the alias modal window
         */
        this.modalOptions = {
            centered: true,
            backdrop: 'static',
        };
    }
    /**
     * Product type data to display account info
     *
     * @default undefined
     */
    set product(value) {
        this.setDisplayName((value === null || value === void 0 ? void 0 : value.displayName) || '');
        this._product = value;
    }
    get product() {
        return this._product;
    }
    /**
     * Indicates whether the account alias is being edited
     */
    get aliasEditMode() {
        var _a;
        return !!this.accountAliasEditor && ((_a = this.accountAliasEditor) === null || _a === void 0 ? void 0 : _a.editMode);
    }
    /**
     * Event handler for the `accept` event of `bb-input-inline-edit-ui`
     * if `alias` is empty - emits `aliasUpdated`
     * if `alias` isn't empty and differ to previous value - opens a confirmation modal
     *
     * @param alias
     */
    onAliasEdit(alias) {
        var _a;
        if (alias === '') {
            this.updateAlias(alias);
        }
        else if (alias !== ((_a = this._product) === null || _a === void 0 ? void 0 : _a.displayName)) {
            this.displayName = alias;
            if (this.aliasLevel === AccountAliasDisplayingLevel.USER) {
                this.updateAlias(this.displayName);
            }
            if (this.aliasLevel === AccountAliasDisplayingLevel.ACCOUNT) {
                this.isVisibleAliasModal = true;
            }
        }
    }
    /**
     * Event handler for the `confirm` event of `bb-modal-ui`
     * closes the modal and sets previous `displayName`
     */
    onModalConfirm() {
        this.updateAlias(this.displayName);
    }
    /**
     * Event handler for the `cancel` event of `bb-modal-ui`
     * closes the modal and sets previous `displayName`
     */
    onModalCancel() {
        var _a;
        this.closeEditAliasModal();
        this.setDisplayName(((_a = this.product) === null || _a === void 0 ? void 0 : _a.displayName) || '');
    }
    /**
     * Closes the alias modal
     *
     * @private
     */
    closeEditAliasModal() {
        this.isVisibleAliasModal = false;
    }
    /**
     * Sets the passed value to the inline editor
     *
     * @param value
     * @private
     */
    setDisplayName(value) {
        var _a;
        this.displayName = value;
        if (this.accountAliasEditor) {
            this.accountAliasEditor.writeValue(this.displayName);
            (_a = this.accountAliasEditor.vForm) === null || _a === void 0 ? void 0 : _a.controls.inputInline.setValue(this.displayName);
        }
    }
    /**
     * Emits the passed alias to `aliasUpdated`
     *
     * @param alias
     * @private
     */
    updateAlias(alias) {
        this.aliasUpdated.emit(alias);
        this.closeEditAliasModal();
    }
}
AccountHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AccountHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountHeaderComponent, selector: "bb-account-header", inputs: { product: "product", canEditAlias: "canEditAlias", aliasLevel: "aliasLevel", showBalance: "showBalance", isBalanceTypeVisible: "isBalanceTypeVisible", isLogoVisible: "isLogoVisible", mapCurrency: "mapCurrency" }, outputs: { aliasUpdated: "aliasUpdated" }, viewQueries: [{ propertyName: "accountAliasEditor", first: true, predicate: ["accountAliasEditor"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"product\">\n  <div class=\"bb-account-header bb-stack bb-stack--wrap bb-stack--align-top\"\n       data-role=\"account-header\"\n  >\n    <div class=\"bb-stack__item bb-stack__item--fill bb-stack\">\n      <bb-product-summary-account-logo\n        *ngIf=\"isLogoVisible && !aliasEditMode\"\n        class=\"bb-stack__item\"\n        data-role=\"account-header-logo\"\n        iconColor=\"secondary\"\n        iconSize=\"md\"\n        [logoSrc]=\"product?.financialInstitution?.logo\"\n        [productKindName]=\"product.productKindName\"></bb-product-summary-account-logo>\n\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <div\n          class=\"bb-account-header__title\"\n          data-role=\"account-header-title\"\n          [ngClass]=\"{\n          'bb-heading-3': !aliasEditMode,\n          'bb-block bb-block--xs': !aliasEditMode,\n          'bb-account-header__title--display-mode': !aliasEditMode\n        }\">\n          <div\n            *ngIf=\"product.financialInstitutionId | bbIsDefined\"\n            data-role=\"account-header-external-account-name\"\n          >\n            <span class=\"bb-stack__item bb-text-support bb-subtitle bb-text-bold\"\n                  data-role=\"account-header-external-bank-name\"\n                  *ngIf=\"product?.financialInstitution?.name; else externalBankNameDefault\">\n              {{product?.financialInstitution?.name}}\n            </span>\n            <ng-template #externalBankNameDefault>\n              <span class=\"bb-stack__item bb-text-support bb-subtitle bb-text-bold\"\n                    data-role=\"account-header-external-default-name\"\n                    i18n=\"External account|Default bank name for external accounts@@manage.account.item\">\n                External account\n              </span>\n            </ng-template>\n          </div>\n          <bb-input-inline-edit-ui\n            #accountAliasEditor\n            *ngIf=\"canEditAlias; else staticAccountAlias\"\n            [inputText]=\"displayName\"\n            [maxLength]=\"aliasMaxLength\"\n            [required]=\"false\"\n            (accept)=\"onAliasEdit($event)\"\n            ariaLabelEdit=\"Edit alias for {{displayName}}\"\n            i18n-ariaLabelEdit=\"Edit alias|Inline editor aria label\n          @@product-summary-account-details-header.edit-account-alias.aria-label\"\n            [hint]=\"aliasHelpTextLocalization[aliasLevel]\"\n          ></bb-input-inline-edit-ui>\n\n          <ng-template #staticAccountAlias>\n            {{ product?.displayName }}\n          </ng-template>\n        </div>\n        <bb-product-number\n          *ngIf=\"!aliasEditMode\"\n          class=\"bb-text-support bb-subtitle\"\n          data-role=\"account-header-number\"\n          [product]=\"product\"\n        ></bb-product-number>\n      </div>\n    </div>\n    <div class=\"bb-stack__break bb-stack__break--sm-down bb-block bb-block--md\"\n         *ngIf=\"showBalance && (product.availableBalance | bbIsDefined)\"\n    ></div>\n    <div class=\"bb-stack__item text-right bb-stack__item--push-right\"\n         *ngIf=\"showBalance && (product.availableBalance | bbIsDefined)\"\n         data-role=\"account-header-balance\">\n      <div class=\"bb-block bb-block--sm bb-text-support bb-subtitle\"\n           *ngIf=\"isBalanceTypeVisible\"\n           i18n=\"Available Balance|Available Balance label\n              @@account.details.current.account.label.availableBalance\"\n           data-role=\"account-header-balance-label\">\n        Available balance\n      </div>\n      <bb-amount-ui data-role=\"account-header-balance-value\"\n                    [ngClass]=\"{\n                      'bb-heading-1': !isBalanceTypeVisible,\n                      'bb-heading-2': isBalanceTypeVisible\n                    }\"\n                    [currency]=\"product.currency\"\n                    [amount]=\"product.availableBalance\"\n                    [mapCurrency]=\"mapCurrency\">\n      </bb-amount-ui>\n    </div>\n  </div>\n</ng-container>\n\n<bb-modal-ui\n        [isOpen]=\"isVisibleAliasModal\"\n        (cancel)=\"onModalCancel()\"\n        (confirm)=\"onModalConfirm()\"\n        [modalOptions]=\"modalOptions\"\n        data-role=\"account-header-modal\"\n>\n  <bb-modal-header-ui\n          title=\"This alias will be visible to users who have access to this account\"\n          i18n-title=\"This alias will be visible to users who have access to this account\n                    |Modal window title: update alias for all users\n                    @@product-summary-account-header.modal.title.update-account-alias\"\n  ></bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template\n            bbCustomModalBody\n            i18n=\"Are you sure to change the account alias?\n              |Modal window body: update account alias\n              @@product-summary-account-header.modal.body.update-account-alias\"\n    >\n      Are you sure to change the account alias?\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui\n          confirmText=\"Continue\"\n          i18n-confirmText=\"Continue|Modal window confirm alias update button\n            @@product-summary-account-header.modal.button.confirm-update-alias\"\n          cancelText=\"Cancel\"\n          i18n-cancelText=\"Cancel|Modal window cancel alias update button\n            @@product-summary-account-header.modal.button.cancel-update-alias\"\n  ></bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1.ProductSummaryAccountLogoComponent, selector: "bb-product-summary-account-logo", inputs: ["logoSrc", "productKindName", "defaultProductKindName", "iconColor", "iconSize", "logoSize"] }, { type: i2.InputInlineEditComponent, selector: "bb-input-inline-edit-ui", inputs: ["state", "canEdit", "hasLoadingState", "inputInlineTemplate", "inputText", "maxLength", "minLength", "maxValue", "minValue", "autofocus", "ariaLabelAccept", "ariaLabelCancel", "ariaLabelEdit", "tooltipAccept", "tooltipCancel", "tooltipEdit", "autocomplete", "pattern", "hint"], outputs: ["stateChange", "cancel", "accept"] }, { type: i3.ProductNumberComponent, selector: "bb-product-number", inputs: ["number", "product", "format", "type", "unmaskable", "masked"], outputs: ["mask", "unmask"] }, { type: i4.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i5.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i5.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i5.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i5.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }], pipes: { "bbIsDefined": i7.IsDefinedPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-header',
                    templateUrl: './bb-account-header.component.html',
                }]
        }], propDecorators: { product: [{
                type: Input
            }], canEditAlias: [{
                type: Input
            }], aliasLevel: [{
                type: Input
            }], showBalance: [{
                type: Input
            }], isBalanceTypeVisible: [{
                type: Input
            }], isLogoVisible: [{
                type: Input
            }], mapCurrency: [{
                type: Input
            }], aliasUpdated: [{
                type: Output
            }], accountAliasEditor: [{
                type: ViewChild,
                args: ['accountAliasEditor']
            }] } });
//# sourceMappingURL=data:application/json;base64,