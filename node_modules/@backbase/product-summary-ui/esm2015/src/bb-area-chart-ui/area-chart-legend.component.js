import { Component, Directive, Input } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { findByName } from '@backbase/product-summary-common-ang';
import { CustomColorName } from '../types/chart';
import * as i0 from "@angular/core";
import * as i1 from "../bb-chart-legend-ui/chart-legend.component";
export class AreaChartLegendComponent {
    constructor() {
        this.hostRef = this;
        /**
         * The chart data (data series) that this component is using to calculate min max
         */
        this.dataSeries = [];
        /**
         * The currency data
         */
        this.currency = '';
        /**
         * Set custom colors for negative and positive areas
         */
        this.customColors = [];
    }
    getMax() {
        return Math.max(...this.values);
    }
    getMin() {
        return Math.min(...this.values);
    }
    getPositiveColor() {
        const customColor = findByName(this.customColors, CustomColorName.POSITIVE);
        return customColor ? customColor.value : '';
    }
    getNegativeColor() {
        const customColor = findByName(this.customColors, CustomColorName.NEGATIVE);
        return customColor ? customColor.value : '';
    }
    get values() {
        const allDateSeries = this.dataSeries.reduce((memo, { series }) => memo.concat(series), []);
        return allDateSeries.map((date) => date.value);
    }
}
AreaChartLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AreaChartLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AreaChartLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AreaChartLegendComponent, selector: "bb-area-chart-legend-ui", inputs: { dataSeries: "dataSeries", currency: "currency", customColors: "customColors" }, ngImport: i0, template: "<ng-container\n  bbBalanceHistoryAreaChartLegendCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    dataSeries: dataSeries,\n    customColors: customColors\n  }\"\n></ng-container>\n\n<ng-template\n  bbBalanceHistoryAreaChartLegendCustomizable\n  let-hostRef\n  let-dataSeries=\"context.dataSeries\"\n  let-customColors=\"context.customColors\"\n>\n  <bb-chart-legend-ui\n    [currency]=\"hostRef.currency\"\n    [maxValue]=\"hostRef.getMax()\"\n    [minValue]=\"hostRef.getMin()\"\n    [positiveColor]=\"hostRef.getPositiveColor()\"\n    [negativeColor]=\"hostRef.getNegativeColor()\"\n  ></bb-chart-legend-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.ChartLegendComponent; }), selector: "bb-chart-legend-ui", inputs: ["currency", "maxValue", "minValue", "positiveColor", "negativeColor"] }], directives: [{ type: i0.forwardRef(function () { return BalanceHistoryAreaChartLegendCustomizableDirective; }), selector: "[bbBalanceHistoryAreaChartLegendCustomizable]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AreaChartLegendComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-area-chart-legend-ui',
                    templateUrl: 'area-chart-legend.component.html',
                }]
        }], propDecorators: { dataSeries: [{
                type: Input
            }], currency: [{
                type: Input
            }], customColors: [{
                type: Input
            }] } });
export class BalanceHistoryAreaChartLegendCustomizableDirective extends BbTemplate {
}
BalanceHistoryAreaChartLegendCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryAreaChartLegendCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
BalanceHistoryAreaChartLegendCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BalanceHistoryAreaChartLegendCustomizableDirective, selector: "[bbBalanceHistoryAreaChartLegendCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BalanceHistoryAreaChartLegendCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBalanceHistoryAreaChartLegendCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJlYS1jaGFydC1sZWdlbmQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9wcm9kdWN0LXN1bW1hcnktdWkvc3JjL2JiLWFyZWEtY2hhcnQtdWkvYXJlYS1jaGFydC1sZWdlbmQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9wcm9kdWN0LXN1bW1hcnktdWkvc3JjL2JiLWFyZWEtY2hhcnQtdWkvYXJlYS1jaGFydC1sZWdlbmQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDbEUsT0FBTyxFQUFFLGVBQWUsRUFBZ0IsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBTy9ELE1BQU0sT0FBTyx3QkFBd0I7SUFKckM7UUFLVyxZQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3hCOztXQUVHO1FBQ00sZUFBVSxHQUFVLEVBQUUsQ0FBQztRQUNoQzs7V0FFRztRQUNNLGFBQVEsR0FBRyxFQUFFLENBQUM7UUFDdkI7O1dBRUc7UUFDTSxpQkFBWSxHQUFtQixFQUFFLENBQUM7S0F3QjVDO0lBdEJDLE1BQU07UUFDSixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELE1BQU07UUFDSixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELGdCQUFnQjtRQUNkLE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1RSxPQUFPLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzlDLENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUUsT0FBTyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFBWSxNQUFNO1FBQ2hCLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDNUYsT0FBTyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEQsQ0FBQzs7c0hBcENVLHdCQUF3QjswR0FBeEIsd0JBQXdCLHlKQ1ZyQywyb0JBdUJBLGtRRDZCYSxrREFBa0Q7NEZBMUNsRCx3QkFBd0I7a0JBSnBDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHlCQUF5QjtvQkFDbkMsV0FBVyxFQUFFLGtDQUFrQztpQkFDaEQ7OEJBTVUsVUFBVTtzQkFBbEIsS0FBSztnQkFJRyxRQUFRO3NCQUFoQixLQUFLO2dCQUlHLFlBQVk7c0JBQXBCLEtBQUs7O0FBNkJSLE1BQU0sT0FBTyxrREFBbUQsU0FBUSxVQUd2RTs7Z0pBSFksa0RBQWtEO29JQUFsRCxrREFBa0Q7NEZBQWxELGtEQUFrRDtrQkFIOUQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsK0NBQStDO2lCQUMxRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRGlyZWN0aXZlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmJUZW1wbGF0ZSB9IGZyb20gJ0BiYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9jb3JlJztcbmltcG9ydCB7IGZpbmRCeU5hbWUgfSBmcm9tICdAYmFja2Jhc2UvcHJvZHVjdC1zdW1tYXJ5LWNvbW1vbi1hbmcnO1xuaW1wb3J0IHsgQ3VzdG9tQ29sb3JOYW1lLCBDdXN0b21Db2xvcnMgfSBmcm9tICcuLi90eXBlcy9jaGFydCc7XG5pbXBvcnQgeyBCYWxhbmNlSGlzdG9yeUFyZWFMZWdlbmRDdXN0b21pemFibGVEaXJlY3RpdmVDb250ZXh0IH0gZnJvbSAnLi90eXBlcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWFyZWEtY2hhcnQtbGVnZW5kLXVpJyxcbiAgdGVtcGxhdGVVcmw6ICdhcmVhLWNoYXJ0LWxlZ2VuZC5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIEFyZWFDaGFydExlZ2VuZENvbXBvbmVudCB7XG4gIHJlYWRvbmx5IGhvc3RSZWYgPSB0aGlzO1xuICAvKipcbiAgICogVGhlIGNoYXJ0IGRhdGEgKGRhdGEgc2VyaWVzKSB0aGF0IHRoaXMgY29tcG9uZW50IGlzIHVzaW5nIHRvIGNhbGN1bGF0ZSBtaW4gbWF4XG4gICAqL1xuICBASW5wdXQoKSBkYXRhU2VyaWVzOiBhbnlbXSA9IFtdO1xuICAvKipcbiAgICogVGhlIGN1cnJlbmN5IGRhdGFcbiAgICovXG4gIEBJbnB1dCgpIGN1cnJlbmN5ID0gJyc7XG4gIC8qKlxuICAgKiBTZXQgY3VzdG9tIGNvbG9ycyBmb3IgbmVnYXRpdmUgYW5kIHBvc2l0aXZlIGFyZWFzXG4gICAqL1xuICBASW5wdXQoKSBjdXN0b21Db2xvcnM6IEN1c3RvbUNvbG9yc1tdID0gW107XG5cbiAgZ2V0TWF4KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGgubWF4KC4uLnRoaXMudmFsdWVzKTtcbiAgfVxuXG4gIGdldE1pbigpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLm1pbiguLi50aGlzLnZhbHVlcyk7XG4gIH1cblxuICBnZXRQb3NpdGl2ZUNvbG9yKCk6IHN0cmluZyB7XG4gICAgY29uc3QgY3VzdG9tQ29sb3IgPSBmaW5kQnlOYW1lKHRoaXMuY3VzdG9tQ29sb3JzLCBDdXN0b21Db2xvck5hbWUuUE9TSVRJVkUpO1xuICAgIHJldHVybiBjdXN0b21Db2xvciA/IGN1c3RvbUNvbG9yLnZhbHVlIDogJyc7XG4gIH1cblxuICBnZXROZWdhdGl2ZUNvbG9yKCk6IHN0cmluZyB7XG4gICAgY29uc3QgY3VzdG9tQ29sb3IgPSBmaW5kQnlOYW1lKHRoaXMuY3VzdG9tQ29sb3JzLCBDdXN0b21Db2xvck5hbWUuTkVHQVRJVkUpO1xuICAgIHJldHVybiBjdXN0b21Db2xvciA/IGN1c3RvbUNvbG9yLnZhbHVlIDogJyc7XG4gIH1cblxuICBwcml2YXRlIGdldCB2YWx1ZXMoKTogbnVtYmVyW10ge1xuICAgIGNvbnN0IGFsbERhdGVTZXJpZXMgPSB0aGlzLmRhdGFTZXJpZXMucmVkdWNlKChtZW1vLCB7IHNlcmllcyB9KSA9PiBtZW1vLmNvbmNhdChzZXJpZXMpLCBbXSk7XG4gICAgcmV0dXJuIGFsbERhdGVTZXJpZXMubWFwKChkYXRlOiBhbnkpID0+IGRhdGUudmFsdWUpO1xuICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tiYkJhbGFuY2VIaXN0b3J5QXJlYUNoYXJ0TGVnZW5kQ3VzdG9taXphYmxlXScsXG59KVxuZXhwb3J0IGNsYXNzIEJhbGFuY2VIaXN0b3J5QXJlYUNoYXJ0TGVnZW5kQ3VzdG9taXphYmxlRGlyZWN0aXZlIGV4dGVuZHMgQmJUZW1wbGF0ZTxcbiAgQXJlYUNoYXJ0TGVnZW5kQ29tcG9uZW50LFxuICBCYWxhbmNlSGlzdG9yeUFyZWFMZWdlbmRDdXN0b21pemFibGVEaXJlY3RpdmVDb250ZXh0XG4+IHt9XG4iLCI8bmctY29udGFpbmVyXG4gIGJiQmFsYW5jZUhpc3RvcnlBcmVhQ2hhcnRMZWdlbmRDdXN0b21pemFibGVcbiAgW2JiSG9zdFJlZl09XCJob3N0UmVmXCJcbiAgW2JiVGVtcGxhdGVDb250ZXh0XT1cIntcbiAgICBkYXRhU2VyaWVzOiBkYXRhU2VyaWVzLFxuICAgIGN1c3RvbUNvbG9yczogY3VzdG9tQ29sb3JzXG4gIH1cIlxuPjwvbmctY29udGFpbmVyPlxuXG48bmctdGVtcGxhdGVcbiAgYmJCYWxhbmNlSGlzdG9yeUFyZWFDaGFydExlZ2VuZEN1c3RvbWl6YWJsZVxuICBsZXQtaG9zdFJlZlxuICBsZXQtZGF0YVNlcmllcz1cImNvbnRleHQuZGF0YVNlcmllc1wiXG4gIGxldC1jdXN0b21Db2xvcnM9XCJjb250ZXh0LmN1c3RvbUNvbG9yc1wiXG4+XG4gIDxiYi1jaGFydC1sZWdlbmQtdWlcbiAgICBbY3VycmVuY3ldPVwiaG9zdFJlZi5jdXJyZW5jeVwiXG4gICAgW21heFZhbHVlXT1cImhvc3RSZWYuZ2V0TWF4KClcIlxuICAgIFttaW5WYWx1ZV09XCJob3N0UmVmLmdldE1pbigpXCJcbiAgICBbcG9zaXRpdmVDb2xvcl09XCJob3N0UmVmLmdldFBvc2l0aXZlQ29sb3IoKVwiXG4gICAgW25lZ2F0aXZlQ29sb3JdPVwiaG9zdFJlZi5nZXROZWdhdGl2ZUNvbG9yKClcIlxuICA+PC9iYi1jaGFydC1sZWdlbmQtdWk+XG48L25nLXRlbXBsYXRlPlxuIl19