import { Component, Input, Directive } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "@angular/common";
export class ArrangementStateIndicatorComponent {
    constructor() {
        this.hostRef = this;
        /**
         * State name to display
         * Supported values: 'active', 'inactive', 'closed'
         * If the state name is not supported it will be shown as it is
         */
        this.state = '';
        /**
         * Visibility of the active state
         * Default: false
         */
        this.showActive = false;
        /**
         * Visibility of the icon next to the state
         * Default: true
         */
        this.showIcon = true;
        /**
         * Visibility of the state text for mobile devices
         * Default: true
         */
        this.hideStateTextForMobile = true;
    }
}
ArrangementStateIndicatorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementStateIndicatorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ArrangementStateIndicatorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ArrangementStateIndicatorComponent, selector: "bb-arrangement-state-indicator", inputs: { state: "state", showActive: "showActive", showIcon: "showIcon", hideStateTextForMobile: "hideStateTextForMobile" }, ngImport: i0, template: "<ng-container\n  bbArrangementStateIndicatorCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{state: state}\"\n>\n</ng-container>\n<ng-template\n  bbArrangementStateIndicatorCustomizable\n  let-hostRef\n  let-state=\"context.state\"\n>\n  <div class=\"bb-stack bb-account-status\">\n    <ng-container [ngSwitch]=\"state.toLowerCase()\">\n      <ng-container *ngSwitchCase=\"'active'\">\n          <span\n            *ngIf=\"hostRef.showActive\"\n            i18n=\"Active|Arrangement State Indicator: Active@@arrangement.state.indicator.active\">Active</span>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"'inactive'\">\n        <bb-icon-ui\n          *ngIf=\"hostRef.showIcon\"\n          data-role=\"inActive-icon\"\n          name=\"remove-circle-outline\"\n          size=\"sm\"\n          class=\"bb-stack__item bb-stack__item--spacing-xs bb-text-support\"\n        ></bb-icon-ui>\n        <span\n          [ngClass]=\"{'bb-account-status__state--hide-for-mobile': hostRef.hideStateTextForMobile}\"\n          class=\"bb-stack__item bb-account-status__state bb-text-semi-bold\"\n          i18n=\"Inactive|Arrangement State Indicator: Inactive@@arrangement.state.indicator.inactive\">Inactive</span>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"'closed'\">\n        <bb-icon-ui\n          *ngIf=\"hostRef.showIcon\"\n          data-role=\"closed-icon\"\n          name=\"cancel\"\n          size=\"sm\"\n          color=\"danger\"\n          class=\"bb-stack__item bb-stack__item--spacing-xs\"\n        ></bb-icon-ui>\n        <span\n          [ngClass]=\"{'bb-account-status__state--hide-for-mobile': hostRef.hideStateTextForMobile}\"\n          class=\"bb-stack__item bb-account-status__state bb-text-semi-bold\"\n          i18n=\"Closed|Arrangement State Indicator: Closed@@arrangement.state.indicator.closed\"\n        >Closed</span>\n      </ng-container>\n      <ng-container *ngSwitchDefault>\n        <span class=\"bb-stack__item bb-account-status__state bb-text-semi-bold\">\n          {{state}}\n        </span>\n      </ng-container>\n    </ng-container>\n  </div>\n</ng-template>\n\n", components: [{ type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0.forwardRef(function () { return ArrangementStateIndicatorCustomizableDirective; }), selector: "[bbArrangementStateIndicatorCustomizable]" }, { type: i0.forwardRef(function () { return i2.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i2.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i2.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i2.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementStateIndicatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-arrangement-state-indicator',
                    templateUrl: './arrangement-state-indicator.component.html',
                }]
        }], propDecorators: { state: [{
                type: Input
            }], showActive: [{
                type: Input
            }], showIcon: [{
                type: Input
            }], hideStateTextForMobile: [{
                type: Input
            }] } });
export class ArrangementStateIndicatorCustomizableDirective extends BbTemplate {
}
ArrangementStateIndicatorCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementStateIndicatorCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ArrangementStateIndicatorCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ArrangementStateIndicatorCustomizableDirective, selector: "[bbArrangementStateIndicatorCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementStateIndicatorCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbArrangementStateIndicatorCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYW5nZW1lbnQtc3RhdGUtaW5kaWNhdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvcHJvZHVjdC1zdW1tYXJ5LXVpL3NyYy9iYi1hcnJhbmdlbWVudC1zdGF0ZS1pbmRpY2F0b3ItdWkvYXJyYW5nZW1lbnQtc3RhdGUtaW5kaWNhdG9yLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvcHJvZHVjdC1zdW1tYXJ5LXVpL3NyYy9iYi1hcnJhbmdlbWVudC1zdGF0ZS1pbmRpY2F0b3ItdWkvYXJyYW5nZW1lbnQtc3RhdGUtaW5kaWNhdG9yLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7QUFNM0QsTUFBTSxPQUFPLGtDQUFrQztJQUovQztRQUtXLFlBQU8sR0FBdUMsSUFBSSxDQUFDO1FBRTVEOzs7O1dBSUc7UUFDTSxVQUFLLEdBQUcsRUFBRSxDQUFDO1FBRXBCOzs7V0FHRztRQUNNLGVBQVUsR0FBRyxLQUFLLENBQUM7UUFFNUI7OztXQUdHO1FBQ00sYUFBUSxHQUFHLElBQUksQ0FBQztRQUV6Qjs7O1dBR0c7UUFDTSwyQkFBc0IsR0FBRyxJQUFJLENBQUM7S0FDeEM7O2dJQTNCWSxrQ0FBa0M7b0hBQWxDLGtDQUFrQyxvTUNQL0Msa21FQXVEQSx1UURoQmEsOENBQThDOzRGQWhDOUMsa0NBQWtDO2tCQUo5QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxnQ0FBZ0M7b0JBQzFDLFdBQVcsRUFBRSw4Q0FBOEM7aUJBQzVEOzhCQVNVLEtBQUs7c0JBQWIsS0FBSztnQkFNRyxVQUFVO3NCQUFsQixLQUFLO2dCQU1HLFFBQVE7c0JBQWhCLEtBQUs7Z0JBTUcsc0JBQXNCO3NCQUE5QixLQUFLOztBQU1SLE1BQU0sT0FBTyw4Q0FBK0MsU0FBUSxVQUduRTs7NElBSFksOENBQThDO2dJQUE5Qyw4Q0FBOEM7NEZBQTlDLDhDQUE4QztrQkFIMUQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsMkNBQTJDO2lCQUN0RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmJUZW1wbGF0ZSB9IGZyb20gJ0BiYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItYXJyYW5nZW1lbnQtc3RhdGUtaW5kaWNhdG9yJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2FycmFuZ2VtZW50LXN0YXRlLWluZGljYXRvci5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIEFycmFuZ2VtZW50U3RhdGVJbmRpY2F0b3JDb21wb25lbnQge1xuICByZWFkb25seSBob3N0UmVmOiBBcnJhbmdlbWVudFN0YXRlSW5kaWNhdG9yQ29tcG9uZW50ID0gdGhpcztcblxuICAvKipcbiAgICogU3RhdGUgbmFtZSB0byBkaXNwbGF5XG4gICAqIFN1cHBvcnRlZCB2YWx1ZXM6ICdhY3RpdmUnLCAnaW5hY3RpdmUnLCAnY2xvc2VkJ1xuICAgKiBJZiB0aGUgc3RhdGUgbmFtZSBpcyBub3Qgc3VwcG9ydGVkIGl0IHdpbGwgYmUgc2hvd24gYXMgaXQgaXNcbiAgICovXG4gIEBJbnB1dCgpIHN0YXRlID0gJyc7XG5cbiAgLyoqXG4gICAqIFZpc2liaWxpdHkgb2YgdGhlIGFjdGl2ZSBzdGF0ZVxuICAgKiBEZWZhdWx0OiBmYWxzZVxuICAgKi9cbiAgQElucHV0KCkgc2hvd0FjdGl2ZSA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBWaXNpYmlsaXR5IG9mIHRoZSBpY29uIG5leHQgdG8gdGhlIHN0YXRlXG4gICAqIERlZmF1bHQ6IHRydWVcbiAgICovXG4gIEBJbnB1dCgpIHNob3dJY29uID0gdHJ1ZTtcblxuICAvKipcbiAgICogVmlzaWJpbGl0eSBvZiB0aGUgc3RhdGUgdGV4dCBmb3IgbW9iaWxlIGRldmljZXNcbiAgICogRGVmYXVsdDogdHJ1ZVxuICAgKi9cbiAgQElucHV0KCkgaGlkZVN0YXRlVGV4dEZvck1vYmlsZSA9IHRydWU7XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tiYkFycmFuZ2VtZW50U3RhdGVJbmRpY2F0b3JDdXN0b21pemFibGVdJyxcbn0pXG5leHBvcnQgY2xhc3MgQXJyYW5nZW1lbnRTdGF0ZUluZGljYXRvckN1c3RvbWl6YWJsZURpcmVjdGl2ZSBleHRlbmRzIEJiVGVtcGxhdGU8XG4gIEFycmFuZ2VtZW50U3RhdGVJbmRpY2F0b3JDb21wb25lbnQsXG4gIHsgc3RhdGU6IHN0cmluZyB9XG4+IHt9XG4iLCI8bmctY29udGFpbmVyXG4gIGJiQXJyYW5nZW1lbnRTdGF0ZUluZGljYXRvckN1c3RvbWl6YWJsZVxuICBbYmJIb3N0UmVmXT1cImhvc3RSZWZcIlxuICBbYmJUZW1wbGF0ZUNvbnRleHRdPVwie3N0YXRlOiBzdGF0ZX1cIlxuPlxuPC9uZy1jb250YWluZXI+XG48bmctdGVtcGxhdGVcbiAgYmJBcnJhbmdlbWVudFN0YXRlSW5kaWNhdG9yQ3VzdG9taXphYmxlXG4gIGxldC1ob3N0UmVmXG4gIGxldC1zdGF0ZT1cImNvbnRleHQuc3RhdGVcIlxuPlxuICA8ZGl2IGNsYXNzPVwiYmItc3RhY2sgYmItYWNjb3VudC1zdGF0dXNcIj5cbiAgICA8bmctY29udGFpbmVyIFtuZ1N3aXRjaF09XCJzdGF0ZS50b0xvd2VyQ2FzZSgpXCI+XG4gICAgICA8bmctY29udGFpbmVyICpuZ1N3aXRjaENhc2U9XCInYWN0aXZlJ1wiPlxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAqbmdJZj1cImhvc3RSZWYuc2hvd0FjdGl2ZVwiXG4gICAgICAgICAgICBpMThuPVwiQWN0aXZlfEFycmFuZ2VtZW50IFN0YXRlIEluZGljYXRvcjogQWN0aXZlQEBhcnJhbmdlbWVudC5zdGF0ZS5pbmRpY2F0b3IuYWN0aXZlXCI+QWN0aXZlPC9zcGFuPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICA8bmctY29udGFpbmVyICpuZ1N3aXRjaENhc2U9XCInaW5hY3RpdmUnXCI+XG4gICAgICAgIDxiYi1pY29uLXVpXG4gICAgICAgICAgKm5nSWY9XCJob3N0UmVmLnNob3dJY29uXCJcbiAgICAgICAgICBkYXRhLXJvbGU9XCJpbkFjdGl2ZS1pY29uXCJcbiAgICAgICAgICBuYW1lPVwicmVtb3ZlLWNpcmNsZS1vdXRsaW5lXCJcbiAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgIGNsYXNzPVwiYmItc3RhY2tfX2l0ZW0gYmItc3RhY2tfX2l0ZW0tLXNwYWNpbmcteHMgYmItdGV4dC1zdXBwb3J0XCJcbiAgICAgICAgPjwvYmItaWNvbi11aT5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBbbmdDbGFzc109XCJ7J2JiLWFjY291bnQtc3RhdHVzX19zdGF0ZS0taGlkZS1mb3ItbW9iaWxlJzogaG9zdFJlZi5oaWRlU3RhdGVUZXh0Rm9yTW9iaWxlfVwiXG4gICAgICAgICAgY2xhc3M9XCJiYi1zdGFja19faXRlbSBiYi1hY2NvdW50LXN0YXR1c19fc3RhdGUgYmItdGV4dC1zZW1pLWJvbGRcIlxuICAgICAgICAgIGkxOG49XCJJbmFjdGl2ZXxBcnJhbmdlbWVudCBTdGF0ZSBJbmRpY2F0b3I6IEluYWN0aXZlQEBhcnJhbmdlbWVudC5zdGF0ZS5pbmRpY2F0b3IuaW5hY3RpdmVcIj5JbmFjdGl2ZTwvc3Bhbj5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdTd2l0Y2hDYXNlPVwiJ2Nsb3NlZCdcIj5cbiAgICAgICAgPGJiLWljb24tdWlcbiAgICAgICAgICAqbmdJZj1cImhvc3RSZWYuc2hvd0ljb25cIlxuICAgICAgICAgIGRhdGEtcm9sZT1cImNsb3NlZC1pY29uXCJcbiAgICAgICAgICBuYW1lPVwiY2FuY2VsXCJcbiAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgIGNvbG9yPVwiZGFuZ2VyXCJcbiAgICAgICAgICBjbGFzcz1cImJiLXN0YWNrX19pdGVtIGJiLXN0YWNrX19pdGVtLS1zcGFjaW5nLXhzXCJcbiAgICAgICAgPjwvYmItaWNvbi11aT5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBbbmdDbGFzc109XCJ7J2JiLWFjY291bnQtc3RhdHVzX19zdGF0ZS0taGlkZS1mb3ItbW9iaWxlJzogaG9zdFJlZi5oaWRlU3RhdGVUZXh0Rm9yTW9iaWxlfVwiXG4gICAgICAgICAgY2xhc3M9XCJiYi1zdGFja19faXRlbSBiYi1hY2NvdW50LXN0YXR1c19fc3RhdGUgYmItdGV4dC1zZW1pLWJvbGRcIlxuICAgICAgICAgIGkxOG49XCJDbG9zZWR8QXJyYW5nZW1lbnQgU3RhdGUgSW5kaWNhdG9yOiBDbG9zZWRAQGFycmFuZ2VtZW50LnN0YXRlLmluZGljYXRvci5jbG9zZWRcIlxuICAgICAgICA+Q2xvc2VkPC9zcGFuPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICA8bmctY29udGFpbmVyICpuZ1N3aXRjaERlZmF1bHQ+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiYmItc3RhY2tfX2l0ZW0gYmItYWNjb3VudC1zdGF0dXNfX3N0YXRlIGJiLXRleHQtc2VtaS1ib2xkXCI+XG4gICAgICAgICAge3tzdGF0ZX19XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvbmctY29udGFpbmVyPlxuICA8L2Rpdj5cbjwvbmctdGVtcGxhdGU+XG5cbiJdfQ==