import { Component, Directive, Input } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { getProductKindIconName, ProductKindNames, toKebabCase } from '@backbase/product-summary-common-ang';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "@angular/common";
/**
 * A component for displaying an account logo.
 * In case the logo is not reachable a related icon is displayed basing on `productKindName`.
 *
 * @usageNotes
 *
 * ### Include this widget in your `AppModule`:
 *
 * ```typescript
 * @NgModule({
 *   imports: [
 *     ProductSummaryAccountLogoModule,
 *   ],
 *   ...
 * })
 * export class AppModule {}
 * ```
 *
 * ### Display details
 *
 * ```html
 * <bb-product-summary-account-logo
 *   [logoSrc]="externalBank.logo"
 *   [productKindName]="item.productKindName"
 *   [defaultProductKindName]="'Current Account'"
 * ></bb-product-summary-account-logo>
 * ```
 *
 * @ngModule ProductSummaryAccountLogoModule
 */
export class ProductSummaryAccountLogoComponent {
    constructor() {
        this.hostRef = this;
        /**
         * Source for bank logo.
         * Can be either a URL or base64 image.
         *
         * @default ''
         */
        this.logoSrc = '';
        /**
         * Product kind name to display a related icon.
         *
         * @default ''
         */
        this.productKindName = '';
        /**
         * Default product kind name to display icons
         */
        this.defaultProductKindName = ProductKindNames.CURRENT_ACCOUNT;
        /**
         * Sets icon size
         *
         * @default 'md'
         */
        this.iconSize = 'md';
        /**
         * Sets icon size
         *
         * @default 'md'
         */
        this.logoSize = 'md';
        /**
         * Indicates whether during loading of the image any errors appeared
         *
         * @default false
         */
        this.isImgError = false;
    }
    /**
     * Returns a related icon color for the given 'productKindName'
     */
    getProductKindIconColor() {
        const color = this.getProductKindIconName().slice(0, -1);
        return color === 'account' ? toKebabCase(this.defaultProductKindName) : color;
    }
    /**
     * Returns a related icon name for the given 'productKindName'
     */
    getProductKindIconName() {
        return getProductKindIconName(this.productKindName);
    }
    /**
     * Event handler for the `error` event of `img`
     * sets `isImgError` to `true`
     */
    onImgError() {
        this.isImgError = true;
    }
}
ProductSummaryAccountLogoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountLogoComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductSummaryAccountLogoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountLogoComponent, selector: "bb-product-summary-account-logo", inputs: { logoSrc: "logoSrc", productKindName: "productKindName", defaultProductKindName: "defaultProductKindName", iconColor: "iconColor", iconSize: "iconSize", logoSize: "logoSize" }, ngImport: i0, template: "<ng-container\n  bbProductSummaryAccountLogoCustomizable\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n\n<ng-template\n  bbProductSummaryAccountLogoCustomizable\n  let-hostRef\n>\n  <ng-container *ngIf=\"hostRef.logoSrc && !hostRef.isImgError; else productKindIcon\">\n    <div class=\"bb-stack bb-icon bb-icon--{{hostRef.logoSize}} bb-icon__background\">\n      <img [src]=\"hostRef.logoSrc\"\n           data-role=\"product-summary-account-logo-img\"\n           aria-hidden=\"true\"\n           alt=\"\"\n           class=\"bb-product-summary-account-logo__img bb-icon__background--square\"\n           (error)=\"hostRef.onImgError()\"/>\n    </div>\n  </ng-container>\n  <ng-template #productKindIcon>\n    <bb-icon-ui data-role=\"product-summary-account-logo-icon\"\n                backgroundType=\"square\"\n                [size]=\"hostRef.iconSize\"\n                [color]=\"hostRef.iconColor || hostRef.getProductKindIconColor()\"\n                [name]=\"hostRef.getProductKindIconName()\">\n    </bb-icon-ui>\n  </ng-template>\n</ng-template>\n\n", components: [{ type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0.forwardRef(function () { return ProductSummaryAccountLogoCustomizableDirective; }), selector: "[bbProductSummaryAccountLogoCustomizable]" }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountLogoComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-summary-account-logo',
                    templateUrl: 'bb-product-summary-account-logo.component.html',
                }]
        }], propDecorators: { logoSrc: [{
                type: Input
            }], productKindName: [{
                type: Input
            }], defaultProductKindName: [{
                type: Input
            }], iconColor: [{
                type: Input
            }], iconSize: [{
                type: Input
            }], logoSize: [{
                type: Input
            }] } });
/**
 * This is an extension slot to be used for customizing the logo
 *
 * @usageNotes
 *
 * ### Customize details
 *
 * ```html
 * <ng-template
 *   bbProductSummaryAccountLogoCustomizable
 *   let-hostRef>
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryAccountDetailsWidgetModule
 */
export class ProductSummaryAccountLogoCustomizableDirective extends BbTemplate {
}
ProductSummaryAccountLogoCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountLogoCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryAccountLogoCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountLogoCustomizableDirective, selector: "[bbProductSummaryAccountLogoCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountLogoCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryAccountLogoCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmItcHJvZHVjdC1zdW1tYXJ5LWFjY291bnQtbG9nby5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3Byb2R1Y3Qtc3VtbWFyeS11aS9zcmMvYmItcHJvZHVjdC1zdW1tYXJ5LWFjY291bnQtbG9nby11aS9iYi1wcm9kdWN0LXN1bW1hcnktYWNjb3VudC1sb2dvLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvcHJvZHVjdC1zdW1tYXJ5LXVpL3NyYy9iYi1wcm9kdWN0LXN1bW1hcnktYWNjb3VudC1sb2dvLXVpL2JiLXByb2R1Y3Qtc3VtbWFyeS1hY2NvdW50LWxvZ28uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7Ozs7QUFDN0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBNkJHO0FBS0gsTUFBTSxPQUFPLGtDQUFrQztJQUovQztRQUtXLFlBQU8sR0FBdUMsSUFBSSxDQUFDO1FBQzVEOzs7OztXQUtHO1FBQ00sWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUN0Qjs7OztXQUlHO1FBQ00sb0JBQWUsR0FBRyxFQUFFLENBQUM7UUFDOUI7O1dBRUc7UUFDTSwyQkFBc0IsR0FBcUIsZ0JBQWdCLENBQUMsZUFBZSxDQUFDO1FBT3JGOzs7O1dBSUc7UUFDTSxhQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3pCOzs7O1dBSUc7UUFDTSxhQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3pCOzs7O1dBSUc7UUFDSCxlQUFVLEdBQUcsS0FBSyxDQUFDO0tBcUJwQjtJQXBCQzs7T0FFRztJQUNILHVCQUF1QjtRQUNyQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekQsT0FBTyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNoRixDQUFDO0lBQ0Q7O09BRUc7SUFDSCxzQkFBc0I7UUFDcEIsT0FBTyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUNEOzs7T0FHRztJQUNILFVBQVU7UUFDUixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUN6QixDQUFDOztnSUE5RFUsa0NBQWtDO29IQUFsQyxrQ0FBa0MsaVFDckMvQyx1aUNBNkJBLHVRRDZGYSw4Q0FBOEM7NEZBckY5QyxrQ0FBa0M7a0JBSjlDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGlDQUFpQztvQkFDM0MsV0FBVyxFQUFFLGdEQUFnRDtpQkFDOUQ7OEJBU1UsT0FBTztzQkFBZixLQUFLO2dCQU1HLGVBQWU7c0JBQXZCLEtBQUs7Z0JBSUcsc0JBQXNCO3NCQUE5QixLQUFLO2dCQU1HLFNBQVM7c0JBQWpCLEtBQUs7Z0JBTUcsUUFBUTtzQkFBaEIsS0FBSztnQkFNRyxRQUFRO3NCQUFoQixLQUFLOztBQTZCUjs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUlILE1BQU0sT0FBTyw4Q0FBK0MsU0FBUSxVQUduRTs7NElBSFksOENBQThDO2dJQUE5Qyw4Q0FBOEM7NEZBQTlDLDhDQUE4QztrQkFIMUQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsMkNBQTJDO2lCQUN0RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRGlyZWN0aXZlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmJUZW1wbGF0ZSB9IGZyb20gJ0BiYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9jb3JlJztcbmltcG9ydCB7IGdldFByb2R1Y3RLaW5kSWNvbk5hbWUsIFByb2R1Y3RLaW5kTmFtZXMsIHRvS2ViYWJDYXNlIH0gZnJvbSAnQGJhY2tiYXNlL3Byb2R1Y3Qtc3VtbWFyeS1jb21tb24tYW5nJztcbi8qKlxuICogQSBjb21wb25lbnQgZm9yIGRpc3BsYXlpbmcgYW4gYWNjb3VudCBsb2dvLlxuICogSW4gY2FzZSB0aGUgbG9nbyBpcyBub3QgcmVhY2hhYmxlIGEgcmVsYXRlZCBpY29uIGlzIGRpc3BsYXllZCBiYXNpbmcgb24gYHByb2R1Y3RLaW5kTmFtZWAuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqXG4gKiAjIyMgSW5jbHVkZSB0aGlzIHdpZGdldCBpbiB5b3VyIGBBcHBNb2R1bGVgOlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIEBOZ01vZHVsZSh7XG4gKiAgIGltcG9ydHM6IFtcbiAqICAgICBQcm9kdWN0U3VtbWFyeUFjY291bnRMb2dvTW9kdWxlLFxuICogICBdLFxuICogICAuLi5cbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgQXBwTW9kdWxlIHt9XG4gKiBgYGBcbiAqXG4gKiAjIyMgRGlzcGxheSBkZXRhaWxzXG4gKlxuICogYGBgaHRtbFxuICogPGJiLXByb2R1Y3Qtc3VtbWFyeS1hY2NvdW50LWxvZ29cbiAqICAgW2xvZ29TcmNdPVwiZXh0ZXJuYWxCYW5rLmxvZ29cIlxuICogICBbcHJvZHVjdEtpbmROYW1lXT1cIml0ZW0ucHJvZHVjdEtpbmROYW1lXCJcbiAqICAgW2RlZmF1bHRQcm9kdWN0S2luZE5hbWVdPVwiJ0N1cnJlbnQgQWNjb3VudCdcIlxuICogPjwvYmItcHJvZHVjdC1zdW1tYXJ5LWFjY291bnQtbG9nbz5cbiAqIGBgYFxuICpcbiAqIEBuZ01vZHVsZSBQcm9kdWN0U3VtbWFyeUFjY291bnRMb2dvTW9kdWxlXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLXByb2R1Y3Qtc3VtbWFyeS1hY2NvdW50LWxvZ28nLFxuICB0ZW1wbGF0ZVVybDogJ2JiLXByb2R1Y3Qtc3VtbWFyeS1hY2NvdW50LWxvZ28uY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBQcm9kdWN0U3VtbWFyeUFjY291bnRMb2dvQ29tcG9uZW50IHtcbiAgcmVhZG9ubHkgaG9zdFJlZjogUHJvZHVjdFN1bW1hcnlBY2NvdW50TG9nb0NvbXBvbmVudCA9IHRoaXM7XG4gIC8qKlxuICAgKiBTb3VyY2UgZm9yIGJhbmsgbG9nby5cbiAgICogQ2FuIGJlIGVpdGhlciBhIFVSTCBvciBiYXNlNjQgaW1hZ2UuXG4gICAqXG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICBASW5wdXQoKSBsb2dvU3JjID0gJyc7XG4gIC8qKlxuICAgKiBQcm9kdWN0IGtpbmQgbmFtZSB0byBkaXNwbGF5IGEgcmVsYXRlZCBpY29uLlxuICAgKlxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgQElucHV0KCkgcHJvZHVjdEtpbmROYW1lID0gJyc7XG4gIC8qKlxuICAgKiBEZWZhdWx0IHByb2R1Y3Qga2luZCBuYW1lIHRvIGRpc3BsYXkgaWNvbnNcbiAgICovXG4gIEBJbnB1dCgpIGRlZmF1bHRQcm9kdWN0S2luZE5hbWU6IFByb2R1Y3RLaW5kTmFtZXMgPSBQcm9kdWN0S2luZE5hbWVzLkNVUlJFTlRfQUNDT1VOVDtcbiAgLyoqXG4gICAqIFNldHMgdGhlIHNhbWUgaWNvbiBjb2xvciBmb3IgYWxsIHByb2R1Y3Qga2luZHNcbiAgICpcbiAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAqL1xuICBASW5wdXQoKSBpY29uQ29sb3I6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIFNldHMgaWNvbiBzaXplXG4gICAqXG4gICAqIEBkZWZhdWx0ICdtZCdcbiAgICovXG4gIEBJbnB1dCgpIGljb25TaXplID0gJ21kJztcbiAgLyoqXG4gICAqIFNldHMgaWNvbiBzaXplXG4gICAqXG4gICAqIEBkZWZhdWx0ICdtZCdcbiAgICovXG4gIEBJbnB1dCgpIGxvZ29TaXplID0gJ21kJztcbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIGR1cmluZyBsb2FkaW5nIG9mIHRoZSBpbWFnZSBhbnkgZXJyb3JzIGFwcGVhcmVkXG4gICAqXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpc0ltZ0Vycm9yID0gZmFsc2U7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcmVsYXRlZCBpY29uIGNvbG9yIGZvciB0aGUgZ2l2ZW4gJ3Byb2R1Y3RLaW5kTmFtZSdcbiAgICovXG4gIGdldFByb2R1Y3RLaW5kSWNvbkNvbG9yKCk6IHN0cmluZyB7XG4gICAgY29uc3QgY29sb3IgPSB0aGlzLmdldFByb2R1Y3RLaW5kSWNvbk5hbWUoKS5zbGljZSgwLCAtMSk7XG4gICAgcmV0dXJuIGNvbG9yID09PSAnYWNjb3VudCcgPyB0b0tlYmFiQ2FzZSh0aGlzLmRlZmF1bHRQcm9kdWN0S2luZE5hbWUpIDogY29sb3I7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSByZWxhdGVkIGljb24gbmFtZSBmb3IgdGhlIGdpdmVuICdwcm9kdWN0S2luZE5hbWUnXG4gICAqL1xuICBnZXRQcm9kdWN0S2luZEljb25OYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGdldFByb2R1Y3RLaW5kSWNvbk5hbWUodGhpcy5wcm9kdWN0S2luZE5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciB0aGUgYGVycm9yYCBldmVudCBvZiBgaW1nYFxuICAgKiBzZXRzIGBpc0ltZ0Vycm9yYCB0byBgdHJ1ZWBcbiAgICovXG4gIG9uSW1nRXJyb3IoKSB7XG4gICAgdGhpcy5pc0ltZ0Vycm9yID0gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgaXMgYW4gZXh0ZW5zaW9uIHNsb3QgdG8gYmUgdXNlZCBmb3IgY3VzdG9taXppbmcgdGhlIGxvZ29cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICpcbiAqICMjIyBDdXN0b21pemUgZGV0YWlsc1xuICpcbiAqIGBgYGh0bWxcbiAqIDxuZy10ZW1wbGF0ZVxuICogICBiYlByb2R1Y3RTdW1tYXJ5QWNjb3VudExvZ29DdXN0b21pemFibGVcbiAqICAgbGV0LWhvc3RSZWY+XG4gKiAgIFlvdXIgY3VzdG9tIHRlbXBsYXRlIGhlcmVcbiAqIDwvbmctdGVtcGxhdGU+XG4gKiBgYGBcbiAqXG4gKiBATmdNb2R1bGUgUHJvZHVjdFN1bW1hcnlBY2NvdW50RGV0YWlsc1dpZGdldE1vZHVsZVxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYmJQcm9kdWN0U3VtbWFyeUFjY291bnRMb2dvQ3VzdG9taXphYmxlXScsXG59KVxuZXhwb3J0IGNsYXNzIFByb2R1Y3RTdW1tYXJ5QWNjb3VudExvZ29DdXN0b21pemFibGVEaXJlY3RpdmUgZXh0ZW5kcyBCYlRlbXBsYXRlPFxuICBQcm9kdWN0U3VtbWFyeUFjY291bnRMb2dvQ29tcG9uZW50LFxuICB1bmRlZmluZWRcbj4ge31cbiIsIjxuZy1jb250YWluZXJcbiAgYmJQcm9kdWN0U3VtbWFyeUFjY291bnRMb2dvQ3VzdG9taXphYmxlXG4gIFtiYkhvc3RSZWZdPVwiaG9zdFJlZlwiXG4+PC9uZy1jb250YWluZXI+XG5cbjxuZy10ZW1wbGF0ZVxuICBiYlByb2R1Y3RTdW1tYXJ5QWNjb3VudExvZ29DdXN0b21pemFibGVcbiAgbGV0LWhvc3RSZWZcbj5cbiAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImhvc3RSZWYubG9nb1NyYyAmJiAhaG9zdFJlZi5pc0ltZ0Vycm9yOyBlbHNlIHByb2R1Y3RLaW5kSWNvblwiPlxuICAgIDxkaXYgY2xhc3M9XCJiYi1zdGFjayBiYi1pY29uIGJiLWljb24tLXt7aG9zdFJlZi5sb2dvU2l6ZX19IGJiLWljb25fX2JhY2tncm91bmRcIj5cbiAgICAgIDxpbWcgW3NyY109XCJob3N0UmVmLmxvZ29TcmNcIlxuICAgICAgICAgICBkYXRhLXJvbGU9XCJwcm9kdWN0LXN1bW1hcnktYWNjb3VudC1sb2dvLWltZ1wiXG4gICAgICAgICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgIGNsYXNzPVwiYmItcHJvZHVjdC1zdW1tYXJ5LWFjY291bnQtbG9nb19faW1nIGJiLWljb25fX2JhY2tncm91bmQtLXNxdWFyZVwiXG4gICAgICAgICAgIChlcnJvcik9XCJob3N0UmVmLm9uSW1nRXJyb3IoKVwiLz5cbiAgICA8L2Rpdj5cbiAgPC9uZy1jb250YWluZXI+XG4gIDxuZy10ZW1wbGF0ZSAjcHJvZHVjdEtpbmRJY29uPlxuICAgIDxiYi1pY29uLXVpIGRhdGEtcm9sZT1cInByb2R1Y3Qtc3VtbWFyeS1hY2NvdW50LWxvZ28taWNvblwiXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFR5cGU9XCJzcXVhcmVcIlxuICAgICAgICAgICAgICAgIFtzaXplXT1cImhvc3RSZWYuaWNvblNpemVcIlxuICAgICAgICAgICAgICAgIFtjb2xvcl09XCJob3N0UmVmLmljb25Db2xvciB8fCBob3N0UmVmLmdldFByb2R1Y3RLaW5kSWNvbkNvbG9yKClcIlxuICAgICAgICAgICAgICAgIFtuYW1lXT1cImhvc3RSZWYuZ2V0UHJvZHVjdEtpbmRJY29uTmFtZSgpXCI+XG4gICAgPC9iYi1pY29uLXVpPlxuICA8L25nLXRlbXBsYXRlPlxuPC9uZy10ZW1wbGF0ZT5cblxuIl19