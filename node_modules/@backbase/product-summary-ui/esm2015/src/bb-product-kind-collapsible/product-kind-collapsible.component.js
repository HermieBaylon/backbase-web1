import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, Directive } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "../bb-product-kind-name/bb-product-kind-name.component";
import * as i3 from "@backbase/ui-ang/amount";
import * as i4 from "../bb-product-kind-ui/product-kind-ui.component";
import * as i5 from "@backbase/ui-ang/keyboard-click-directive";
import * as i6 from "@angular/common";
import * as i7 from "@ng-bootstrap/ng-bootstrap";
export class ProductKindCollapsibleComponent {
    constructor() {
        /**
         * Emits the id of clicked account
         */
        this.selectAccount = new EventEmitter();
        /**
         * Emits selected product
         */
        this.selectProduct = new EventEmitter();
        /**
         * Emits the boolean value to toggle the expand/collapse state of the collapsable
         */
        this.isExpandedChange = new EventEmitter();
        this.hostRef = this;
    }
    onSelectAccount(id) {
        this.selectAccount.emit(id);
    }
    toggleExpanded() {
        this.isExpandedChange.emit(!this.isExpanded);
    }
}
ProductKindCollapsibleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindCollapsibleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductKindCollapsibleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductKindCollapsibleComponent, selector: "bb-product-kind-collapsible-ui", inputs: { isExpanded: "isExpanded", showIcons: "showIcons", iconName: "iconName", productKind: "productKind" }, outputs: { selectAccount: "selectAccount", selectProduct: "selectProduct", isExpandedChange: "isExpandedChange" }, ngImport: i0, template: "<ng-container bbProductKindCollapsibleCustomizable\n              [bbHostRef]=\"hostRef\">\n</ng-container>\n\n<ng-template bbProductKindCollapsibleCustomizable\n             let-hostRef>\n  <div class=\"bb-product-kind card card-body\">\n    <div role=\"button\"\n         tabindex=\"0\"\n         [attr.aria-expanded]=\"!hostRef.isExpanded\"\n         class=\"bb-product-kind__header\"\n         data-role=\"expand-button\"\n         [class.bb-product-kind__header--collapsed]=\"hostRef.isExpanded\"\n         (bbKeyboardClick)=\"hostRef.toggleExpanded()\">\n      <div class=\"bb-product-kind__title\">\n        <bb-icon-ui [attr.data-role]=\"hostRef.iconName\"\n                    *ngIf=\"hostRef.showIcons && hostRef.iconName\"\n                    [name]=\"hostRef.iconName\"\n                    class=\"bb-product-kind__title-icon\">\n        </bb-icon-ui>\n        <bb-product-kind-name\n          [attr.data-role]=\"hostRef.productKind?.products[0]?.productKindUri\"\n          [isPlural]=\"true\"\n          [name]=\"hostRef.productKind?.products[0]?.productKindUri\"></bb-product-kind-name>\n      </div>\n      <div class=\"bb-product-kind__balance\">\n        <ng-container *ngIf=\"hostRef.productKind?.aggregatedBalance\">\n          <span class=\"bb-product-kind__balance-block\">\n            <span class=\"bb-product-kind__balance-title\"\n                  i18n=\"Total label|Label for a product summary widget total label component@@product-summary-total.label.total\">\n              Total\n            </span>\n            <bb-amount-ui data-role=\"current-account-total-amount\"\n                          [currency]=\"hostRef.productKind?.currency\"\n                          [amount]=\"hostRef.productKind?.aggregatedBalance\"></bb-amount-ui>\n          </span>\n        </ng-container>\n        <bb-icon-ui class=\"bb-product-kind__balance-icon \"\n                    name=\"toggle-{{!hostRef.isExpanded ? 'up' : 'down'}}\"></bb-icon-ui>\n      </div>\n    </div>\n\n    <div class=\"bb-product-kind__item-group\"\n         [ngbCollapse]=\"hostRef.isExpanded\">\n      <div class=\"bb-product-kind__item bb-list__item\"\n           *ngFor=\"let item of hostRef.productKind?.products\">\n        <bb-product-kind\n          [item]=\"item\"\n          [showLogo]=\"hostRef.showIcons\"\n          (selectProductKind)=\"hostRef.selectProduct.emit(item); hostRef.onSelectAccount($event.id);\"\n        ></bb-product-kind>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i2.ProductKindNameComponent; }), selector: "bb-product-kind-name", inputs: ["name", "isPlural"] }, { type: i0.forwardRef(function () { return i3.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0.forwardRef(function () { return i4.ProductKindComponent; }), selector: "bb-product-kind", inputs: ["item", "showLogo"], outputs: ["selectProductKind"] }], directives: [{ type: i0.forwardRef(function () { return ProductKindCollapsibleCustomizableDirective; }), selector: "[bbProductKindCollapsibleCustomizable]" }, { type: i0.forwardRef(function () { return i5.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i0.forwardRef(function () { return i6.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i7.NgbCollapse; }), selector: "[ngbCollapse]", inputs: ["ngbCollapse", "animation"], outputs: ["ngbCollapseChange", "shown", "hidden"], exportAs: ["ngbCollapse"] }, { type: i0.forwardRef(function () { return i6.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindCollapsibleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-kind-collapsible-ui',
                    templateUrl: './product-kind-collapsible.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isExpanded: [{
                type: Input
            }], showIcons: [{
                type: Input
            }], iconName: [{
                type: Input
            }], productKind: [{
                type: Input
            }], selectAccount: [{
                type: Output
            }], selectProduct: [{
                type: Output
            }], isExpandedChange: [{
                type: Output
            }] } });
export class ProductKindCollapsibleCustomizableDirective extends BbTemplate {
}
ProductKindCollapsibleCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindCollapsibleCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductKindCollapsibleCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductKindCollapsibleCustomizableDirective, selector: "[bbProductKindCollapsibleCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductKindCollapsibleCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductKindCollapsibleCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1raW5kLWNvbGxhcHNpYmxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvcHJvZHVjdC1zdW1tYXJ5LXVpL3NyYy9iYi1wcm9kdWN0LWtpbmQtY29sbGFwc2libGUvcHJvZHVjdC1raW5kLWNvbGxhcHNpYmxlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvcHJvZHVjdC1zdW1tYXJ5LXVpL3NyYy9iYi1wcm9kdWN0LWtpbmQtY29sbGFwc2libGUvcHJvZHVjdC1raW5kLWNvbGxhcHNpYmxlLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsdUJBQXVCLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNHLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQzs7Ozs7Ozs7O0FBTzNELE1BQU0sT0FBTywrQkFBK0I7SUFMNUM7UUEyQkU7O1dBRUc7UUFDTyxrQkFBYSxHQUF5QixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRW5FOztXQUVHO1FBQ08sa0JBQWEsR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVwRTs7V0FFRztRQUNPLHFCQUFnQixHQUEwQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTlELFlBQU8sR0FBRyxJQUFJLENBQUM7S0FTekI7SUFQQyxlQUFlLENBQUMsRUFBVTtRQUN4QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsY0FBYztRQUNaLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7NkhBN0NVLCtCQUErQjtpSEFBL0IsK0JBQStCLHlTQ1Y1QyxxOEVBdURBLHd4QkRNYSwyQ0FBMkM7NEZBbkQzQywrQkFBK0I7a0JBTDNDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGdDQUFnQztvQkFDMUMsV0FBVyxFQUFFLDJDQUEyQztvQkFDeEQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzhCQUtVLFVBQVU7c0JBQWxCLEtBQUs7Z0JBTU4sU0FBUztzQkFEUixLQUFLO2dCQU1HLFFBQVE7c0JBQWhCLEtBQUs7Z0JBS0csV0FBVztzQkFBbkIsS0FBSztnQkFLSSxhQUFhO3NCQUF0QixNQUFNO2dCQUtHLGFBQWE7c0JBQXRCLE1BQU07Z0JBS0csZ0JBQWdCO3NCQUF6QixNQUFNOztBQWdCVCxNQUFNLE9BQU8sMkNBQTRDLFNBQVEsVUFHaEU7O3lJQUhZLDJDQUEyQzs2SEFBM0MsMkNBQTJDOzRGQUEzQywyQ0FBMkM7a0JBSHZELFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHdDQUF3QztpQkFDbkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJvZHVjdCB9IGZyb20gJ0BiYWNrYmFzZS9wcm9kdWN0LXN1bW1hcnktY29tbW9uLWFuZyc7XG5pbXBvcnQgeyBQcm9kdWN0S2luZEN1c3RvbWl6ZWQgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IEJiVGVtcGxhdGUgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLXByb2R1Y3Qta2luZC1jb2xsYXBzaWJsZS11aScsXG4gIHRlbXBsYXRlVXJsOiAnLi9wcm9kdWN0LWtpbmQtY29sbGFwc2libGUuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgUHJvZHVjdEtpbmRDb2xsYXBzaWJsZUNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBGbGFnIHRoYXQgaW5kaWNhdGVzIHRoYXQgdGhlIHByb2R1Y3Qta2luZCBjYXJkIGlzIGV4cGFuZGVkL2NvbGxhcHNlZFxuICAgKi9cbiAgQElucHV0KCkgaXNFeHBhbmRlZDogYm9vbGVhbiB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogRmxhZyB0byBzaG93IGFuZCBoaWRlIHRoZSBpY29uc1xuICAgKi9cbiAgQElucHV0KClcbiAgc2hvd0ljb25zOiBib29sZWFuIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBJY29uIG5hbWUgZGlzcGxheWVkIG9uIHRoZSBwcm9kdWN0LWtpbmQgY2FyZFxuICAgKi9cbiAgQElucHV0KCkgaWNvbk5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogUHJvZHVjdEtpbmQgaXRlbSBkaXNwbGF5ZWQgaW5zaWRlIHRoZSBjb2xsYXBzYWJsZVxuICAgKi9cbiAgQElucHV0KCkgcHJvZHVjdEtpbmQ6IFByb2R1Y3RLaW5kQ3VzdG9taXplZCB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogRW1pdHMgdGhlIGlkIG9mIGNsaWNrZWQgYWNjb3VudFxuICAgKi9cbiAgQE91dHB1dCgpIHNlbGVjdEFjY291bnQ6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIC8qKlxuICAgKiBFbWl0cyBzZWxlY3RlZCBwcm9kdWN0XG4gICAqL1xuICBAT3V0cHV0KCkgc2VsZWN0UHJvZHVjdDogRXZlbnRFbWl0dGVyPFByb2R1Y3Q+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIC8qKlxuICAgKiBFbWl0cyB0aGUgYm9vbGVhbiB2YWx1ZSB0byB0b2dnbGUgdGhlIGV4cGFuZC9jb2xsYXBzZSBzdGF0ZSBvZiB0aGUgY29sbGFwc2FibGVcbiAgICovXG4gIEBPdXRwdXQoKSBpc0V4cGFuZGVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgcmVhZG9ubHkgaG9zdFJlZiA9IHRoaXM7XG5cbiAgb25TZWxlY3RBY2NvdW50KGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNlbGVjdEFjY291bnQuZW1pdChpZCk7XG4gIH1cblxuICB0b2dnbGVFeHBhbmRlZCgpIHtcbiAgICB0aGlzLmlzRXhwYW5kZWRDaGFuZ2UuZW1pdCghdGhpcy5pc0V4cGFuZGVkKTtcbiAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYmJQcm9kdWN0S2luZENvbGxhcHNpYmxlQ3VzdG9taXphYmxlXScsXG59KVxuZXhwb3J0IGNsYXNzIFByb2R1Y3RLaW5kQ29sbGFwc2libGVDdXN0b21pemFibGVEaXJlY3RpdmUgZXh0ZW5kcyBCYlRlbXBsYXRlPFxuICBQcm9kdWN0S2luZENvbGxhcHNpYmxlQ29tcG9uZW50LFxuICB1bmRlZmluZWRcbj4ge31cbiIsIjxuZy1jb250YWluZXIgYmJQcm9kdWN0S2luZENvbGxhcHNpYmxlQ3VzdG9taXphYmxlXG4gICAgICAgICAgICAgIFtiYkhvc3RSZWZdPVwiaG9zdFJlZlwiPlxuPC9uZy1jb250YWluZXI+XG5cbjxuZy10ZW1wbGF0ZSBiYlByb2R1Y3RLaW5kQ29sbGFwc2libGVDdXN0b21pemFibGVcbiAgICAgICAgICAgICBsZXQtaG9zdFJlZj5cbiAgPGRpdiBjbGFzcz1cImJiLXByb2R1Y3Qta2luZCBjYXJkIGNhcmQtYm9keVwiPlxuICAgIDxkaXYgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgW2F0dHIuYXJpYS1leHBhbmRlZF09XCIhaG9zdFJlZi5pc0V4cGFuZGVkXCJcbiAgICAgICAgIGNsYXNzPVwiYmItcHJvZHVjdC1raW5kX19oZWFkZXJcIlxuICAgICAgICAgZGF0YS1yb2xlPVwiZXhwYW5kLWJ1dHRvblwiXG4gICAgICAgICBbY2xhc3MuYmItcHJvZHVjdC1raW5kX19oZWFkZXItLWNvbGxhcHNlZF09XCJob3N0UmVmLmlzRXhwYW5kZWRcIlxuICAgICAgICAgKGJiS2V5Ym9hcmRDbGljayk9XCJob3N0UmVmLnRvZ2dsZUV4cGFuZGVkKClcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJiYi1wcm9kdWN0LWtpbmRfX3RpdGxlXCI+XG4gICAgICAgIDxiYi1pY29uLXVpIFthdHRyLmRhdGEtcm9sZV09XCJob3N0UmVmLmljb25OYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgKm5nSWY9XCJob3N0UmVmLnNob3dJY29ucyAmJiBob3N0UmVmLmljb25OYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgW25hbWVdPVwiaG9zdFJlZi5pY29uTmFtZVwiXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYmItcHJvZHVjdC1raW5kX190aXRsZS1pY29uXCI+XG4gICAgICAgIDwvYmItaWNvbi11aT5cbiAgICAgICAgPGJiLXByb2R1Y3Qta2luZC1uYW1lXG4gICAgICAgICAgW2F0dHIuZGF0YS1yb2xlXT1cImhvc3RSZWYucHJvZHVjdEtpbmQ/LnByb2R1Y3RzWzBdPy5wcm9kdWN0S2luZFVyaVwiXG4gICAgICAgICAgW2lzUGx1cmFsXT1cInRydWVcIlxuICAgICAgICAgIFtuYW1lXT1cImhvc3RSZWYucHJvZHVjdEtpbmQ/LnByb2R1Y3RzWzBdPy5wcm9kdWN0S2luZFVyaVwiPjwvYmItcHJvZHVjdC1raW5kLW5hbWU+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJiYi1wcm9kdWN0LWtpbmRfX2JhbGFuY2VcIj5cbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImhvc3RSZWYucHJvZHVjdEtpbmQ/LmFnZ3JlZ2F0ZWRCYWxhbmNlXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJiYi1wcm9kdWN0LWtpbmRfX2JhbGFuY2UtYmxvY2tcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYmItcHJvZHVjdC1raW5kX19iYWxhbmNlLXRpdGxlXCJcbiAgICAgICAgICAgICAgICAgIGkxOG49XCJUb3RhbCBsYWJlbHxMYWJlbCBmb3IgYSBwcm9kdWN0IHN1bW1hcnkgd2lkZ2V0IHRvdGFsIGxhYmVsIGNvbXBvbmVudEBAcHJvZHVjdC1zdW1tYXJ5LXRvdGFsLmxhYmVsLnRvdGFsXCI+XG4gICAgICAgICAgICAgIFRvdGFsXG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8YmItYW1vdW50LXVpIGRhdGEtcm9sZT1cImN1cnJlbnQtYWNjb3VudC10b3RhbC1hbW91bnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBbY3VycmVuY3ldPVwiaG9zdFJlZi5wcm9kdWN0S2luZD8uY3VycmVuY3lcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBbYW1vdW50XT1cImhvc3RSZWYucHJvZHVjdEtpbmQ/LmFnZ3JlZ2F0ZWRCYWxhbmNlXCI+PC9iYi1hbW91bnQtdWk+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgPGJiLWljb24tdWkgY2xhc3M9XCJiYi1wcm9kdWN0LWtpbmRfX2JhbGFuY2UtaWNvbiBcIlxuICAgICAgICAgICAgICAgICAgICBuYW1lPVwidG9nZ2xlLXt7IWhvc3RSZWYuaXNFeHBhbmRlZCA/ICd1cCcgOiAnZG93bid9fVwiPjwvYmItaWNvbi11aT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cImJiLXByb2R1Y3Qta2luZF9faXRlbS1ncm91cFwiXG4gICAgICAgICBbbmdiQ29sbGFwc2VdPVwiaG9zdFJlZi5pc0V4cGFuZGVkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiYmItcHJvZHVjdC1raW5kX19pdGVtIGJiLWxpc3RfX2l0ZW1cIlxuICAgICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBob3N0UmVmLnByb2R1Y3RLaW5kPy5wcm9kdWN0c1wiPlxuICAgICAgICA8YmItcHJvZHVjdC1raW5kXG4gICAgICAgICAgW2l0ZW1dPVwiaXRlbVwiXG4gICAgICAgICAgW3Nob3dMb2dvXT1cImhvc3RSZWYuc2hvd0ljb25zXCJcbiAgICAgICAgICAoc2VsZWN0UHJvZHVjdEtpbmQpPVwiaG9zdFJlZi5zZWxlY3RQcm9kdWN0LmVtaXQoaXRlbSk7IGhvc3RSZWYub25TZWxlY3RBY2NvdW50KCRldmVudC5pZCk7XCJcbiAgICAgICAgPjwvYmItcHJvZHVjdC1raW5kPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9uZy10ZW1wbGF0ZT5cbiJdfQ==