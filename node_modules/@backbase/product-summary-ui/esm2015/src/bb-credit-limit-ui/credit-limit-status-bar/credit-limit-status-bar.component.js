import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import BigNumber from 'bignumber.js';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * Displays a credit limit status bar
 *
 * @usageNotes
 *
 * ```html
 * <bb-credit-limit-status-bar-ui
 *   [reserved]="100"
 *   [owed]="1000"
 *   [leftToSpend]="400"
 * ></bb-credit-limit-status-bar-ui>
 * ```
 *
 * @ngModule CreditLimitModule
 */
export class CreditLimitStatusBarComponent {
    constructor() {
        /**
         * Defines whether to display credit limit status bar in "Emptied" of "Filled" view mode. Default "Emptied"
         */
        this.viewMode = 'emptied';
    }
    /**
     * Aria labels for "reserved", "overdue", "owed" and "leftToSpend" values.
     */
    get valueAriaLabels() {
        return {
            reservedValue: $localize `:Reserved value a11y@@product-summary.credit-limit-status-bar.a11y.reserved:Reserved ${this.formatNumberForReading(this.reservedPercent)}%`,
            overdueValue: $localize `:Overdue value a11y@@product-summary.credit-limit-status-bar.a11y.overdue:Overdue ${this.formatNumberForReading(this.overduePercent)}%`,
            owedValue: $localize `:Owed value a11y@@product-summary.credit-limit-status-bar.a11y.owed:Owed ${this.formatNumberForReading(this.owedPercent)}%`,
            leftToSpendValue: $localize `:Left to spend value a11y@@product-summary.credit-limit-status-bar.a11y.leftToSpend:Left to spend ${this.formatNumberForReading(this.leftToSpendPercent)}%`,
        };
    }
    /**
     * Displayed width of "Reserved" amount.
     */
    get reservedWidth() {
        return this.reservedPercent > 0 ? `${this.reservedPercent}%` : '0';
    }
    /**
     * Displayed width of "Overdue" amount.
     */
    get overdueWidth() {
        const reservedWidth = new BigNumber(this.overduePercent).plus(this.reservedPercent).toNumber();
        return this.overduePercent > 0 ? `${reservedWidth}%` : '0';
    }
    /**
     * Displayed width of "Owed" amount.
     */
    get owedWidth() {
        const owedValue = this.toValidValue(this.owed);
        const filledValue = new BigNumber(this.owedPercent).plus(this.overduePercent).plus(this.reservedPercent).toNumber();
        const filledWidth = owedValue !== 0 ? `${filledValue}%` : '0';
        const emptiedWidth = owedValue !== 0 ? '100%' : '0';
        return this.viewMode === 'emptied' ? emptiedWidth : filledWidth;
    }
    /**
     * Displayed width of "Left to spend" amount.
     */
    get leftToSpendWidth() {
        const leftToSpendValue = this.toValidValue(this.leftToSpend);
        const emptiedValue = new BigNumber(this.leftToSpendPercent)
            .plus(this.overduePercent)
            .plus(this.reservedPercent)
            .toNumber();
        const emptiedWidth = leftToSpendValue !== 0 ? `${emptiedValue}%` : '0';
        const filledWidth = leftToSpendValue !== 0 ? '100%' : '0';
        return this.viewMode === 'emptied' ? emptiedWidth : filledWidth;
    }
    /**
     * Minimum size of "Overdue" amount.
     */
    get overdueMinSize() {
        const reservedValue = this.toValidValue(this.reserved);
        return reservedValue > 0 ? 'md' : 'sm';
    }
    /**
     * Minimum size of primary amount.
     */
    get primaryMinSize() {
        const reservedValue = this.toValidValue(this.reserved);
        const overdueValue = this.toValidValue(this.overdue);
        return reservedValue > 0 && overdueValue > 0 ? 'lg' : reservedValue > 0 || overdueValue > 0 ? 'md' : 'sm';
    }
    get reservedPercent() {
        return this.getPercentageOfLimit(this.reserved);
    }
    get overduePercent() {
        return this.getPercentageOfLimit(this.overdue);
    }
    get owedPercent() {
        return this.getPercentageOfLimit(this.owed);
    }
    get leftToSpendPercent() {
        return this.getPercentageOfLimit(this.leftToSpend);
    }
    formatNumberForReading(value, decimalPlaces = 2) {
        const number = new BigNumber(value);
        return number.decimalPlaces() > 0 ? number.toFormat(decimalPlaces) : value.toString();
    }
    getPercentageOfLimit(value) {
        const validValue = this.toValidValue(value);
        return validValue !== 0 ? new BigNumber(validValue).dividedBy(this.limit).multipliedBy(100).toNumber() : 0;
    }
    get limit() {
        const reservedValue = this.toValidValue(this.reserved);
        const overdueValue = this.toValidValue(this.overdue);
        const owedValue = this.toValidValue(this.owed);
        const leftToSpendValue = this.toValidValue(this.leftToSpend);
        return new BigNumber(reservedValue).plus(overdueValue).plus(owedValue).plus(leftToSpendValue).toNumber();
    }
    toValidValue(value) {
        return value !== undefined && !Number.isNaN(value) ? Math.abs(value) : 0;
    }
}
CreditLimitStatusBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditLimitStatusBarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CreditLimitStatusBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CreditLimitStatusBarComponent, selector: "bb-credit-limit-status-bar-ui", inputs: { viewMode: "viewMode", reserved: "reserved", overdue: "overdue", owed: "owed", leftToSpend: "leftToSpend" }, ngImport: i0, template: "<div class=\"bb-credit-limit-status-bar\">\n  <span\n    class=\"sr-only\"\n    data-role=\"title\"\n    aria-label=\"Credit limit status bar\"\n    i18n-aria-label=\"Credit limit status bar@@product-summary.credit-limit-status-bar.a11y.title\"\n  ></span>\n\n  <ng-container *ngTemplateOutlet=\"viewMode === 'emptied' ? owedValue : leftToSpendValue; context: { color: 'secondary' }\"></ng-container>\n  <ng-container *ngTemplateOutlet=\"viewMode === 'emptied' ? leftToSpendValue : owedValue; context: { color: 'primary' }\"></ng-container>\n\n  <ng-template #owedValue let-color=\"color\">\n    <div\n      *ngIf=\"owed\"\n      [style.width]=\"owedWidth\"\n      class=\"bb-credit-limit-status-bar__value bb-credit-limit-status-bar__value--{{primaryMinSize}} bb-credit-limit__color--{{color}}\"\n      data-role=\"owed-value\"\n      [attr.aria-label]=\"valueAriaLabels.owedValue\"\n    ></div>\n  </ng-template>\n  <ng-template #leftToSpendValue let-color=\"color\">\n    <div\n      *ngIf=\"leftToSpend\"\n      [style.width]=\"leftToSpendWidth\"\n      class=\"bb-credit-limit-status-bar__value bb-credit-limit-status-bar__value--{{primaryMinSize}} bb-credit-limit__color--{{color}}\"\n      data-role=\"left-to-spend-value\"\n      [attr.aria-label]=\"valueAriaLabels.leftToSpendValue\"\n    ></div>\n  </ng-template>\n  <div\n    *ngIf=\"overdue\"\n    [style.width]=\"overdueWidth\"\n    class=\"bb-credit-limit-status-bar__value bb-credit-limit-status-bar__value--{{overdueMinSize}} bb-credit-limit__color--danger\"\n    data-role=\"overdue-value\"\n    [attr.aria-label]=\"valueAriaLabels.overdueValue\"\n  ></div>\n  <div\n    *ngIf=\"reserved\"\n    [style.width]=\"reservedWidth\"\n    class=\"bb-credit-limit-status-bar__value bb-credit-limit-status-bar__value--sm bb-credit-limit__color--warning\"\n    data-role=\"reserved-value\"\n    [attr.aria-label]=\"valueAriaLabels.reservedValue\"\n  ></div>\n</div>\n", directives: [{ type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditLimitStatusBarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-credit-limit-status-bar-ui',
                    templateUrl: './credit-limit-status-bar.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { viewMode: [{
                type: Input
            }], reserved: [{
                type: Input
            }], overdue: [{
                type: Input
            }], owed: [{
                type: Input
            }], leftToSpend: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,