import { Component, Input } from '@angular/core';
import { ResponsiveContainerComponent } from '@backbase/product-summary-common-ang';
import * as i0 from "@angular/core";
import * as i1 from "./credit-limit-attribute/credit-limit-attribute.component";
import * as i2 from "@backbase/ui-ang/amount";
import * as i3 from "./credit-limit-minimum-payment/credit-limit-minimum-payment.component";
import * as i4 from "./credit-limit-status-bar/credit-limit-status-bar.component";
import * as i5 from "@angular/common";
import * as i6 from "@backbase/product-summary-common-ang";
/**
 * Displays credit limit of the passed product.
 *
 * @usageNotes
 *
 * ### Usage example
 * ```
 * <bb-credit-limit
 *   [product]=product
 *   viewMode='filled'
 * ></bb-credit-limit>
 * ```
 *
 * @NgModule AccountHeaderModule
 */
export class CreditLimitComponent extends ResponsiveContainerComponent {
    /**
     * Constructor
     *
     * @param el
     * @param changeDetector
     */
    constructor(el, changeDetector) {
        super(el, changeDetector);
        this.el = el;
        this.changeDetector = changeDetector;
        /**
         * View Mode. Can be "filled" or "emptied"
         *
         * @default "emptied"
         */
        this.viewMode = 'emptied';
        /**
         * Defines whether to show minimum payment information
         *
         * @default "true"
         */
        this.showMinimumPayment = true;
        /**
         * Whether currency should be displayed as a sign.
         *
         * @default true.
         */
        this.useShortCurrency = true;
        /**
         * Localization for account attributes
         */
        this.localization = {
            owed: $localize `:Owed|Credit limit attribute\: owed@@bb-credit-limit-attribute-owed:Owed`,
            reserved: $localize `:Reserved|Credit limit attribute\: reserved@@bb-credit-limit-attribute-reserved:Reserved`,
            overdue: $localize `:Overdue|Credit limit attribute\: reserved@@bb-credit-limit-attribute-overdue:Overdue`,
            leftToSpend: $localize `:Left to Spend|Credit limit attribute\: Left to Spend@@bb-credit-limit-attribute-left-to-spend:Left to Spend`,
            minimumPayment: $localize `:Minimum Payment|Credit limit attribute\: Minimum Payment@@bb-credit-limit-attribute-minimum-payment:Minimum Payment`,
            of: $localize `:of|Credit limit\: of total@@bb-credit-limit-attribute-value-of:of`,
        };
    }
}
CreditLimitComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditLimitComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
CreditLimitComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CreditLimitComponent, selector: "bb-credit-limit", inputs: { product: "product", viewMode: "viewMode", showMinimumPayment: "showMinimumPayment", useShortCurrency: "useShortCurrency" }, usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"product\">\n  <!-- viewMode: emptied -->\n  <ng-container *ngIf=\"viewMode === 'emptied'; else filledTemplate\">\n    <div class=\"bb-block bb-block--md\" data-role=\"credit-limit-emptied-mode-header\">\n      <!-- Left to Spend -->\n      <bb-credit-limit-attribute\n        *ngIf=\"product.remainingCredit | bbIsDefined\"\n        data-role=\"credit-limit-left-to-spend\"\n        [title]=\"localization.leftToSpend\"\n        color=\"primary\">\n        <div class=\"bb-stack bb-stack--density-xs\"\n             data-role=\"credit-limit-left-to-spend-value\">\n          <bb-amount-ui\n            class=\"bb-stack__item bb-heading-3\"\n            [currency]=\"product.currency\"\n            [amount]=\"product.remainingCredit | bbAbsoluteValue\"\n            [mapCurrency]=\"useShortCurrency\"\n          ></bb-amount-ui>\n          <ng-container *ngIf=\"product.creditLimit\">\n            <span class=\"bb-stack__item bb-text-support bb-subtitle\">{{localization.of}}</span>\n            <bb-amount-ui\n              class=\"bb-stack__item bb-text-support bb-subtitle\"\n              [currency]=\"product.currency\"\n              [amount]=\"product.creditLimit | bbAbsoluteValue\"\n              [mapCurrency]=\"useShortCurrency\"\n            ></bb-amount-ui>\n          </ng-container>\n        </div>\n      </bb-credit-limit-attribute>\n    </div>\n\n    <div class=\"bb-block bb-block--md\">\n      <!-- Credit limit status bar -->\n      <ng-container *ngTemplateOutlet=\"creditLimitStatusBar\"></ng-container>\n    </div>\n\n    <div [ngClass]=\"{\n           'bb-stack justify-content-between': responsiveView === 'screen'\n         }\"\n    >\n      <!-- Overdue -->\n      <ng-container *ngTemplateOutlet=\"overdueAttribute\"></ng-container>\n      <!-- Reserved -->\n      <ng-container *ngTemplateOutlet=\"reservedAttribute\"></ng-container>\n\n      <!-- Owed -->\n      <bb-credit-limit-attribute\n        [class.bb-stack__item]=\"responsiveView === 'screen'\"\n        *ngIf=\"product.creditLimitUsage\"\n        data-role=\"credit-limit-owed\"\n        [title]=\"localization.owed\"\n        color=\"secondary\"\n        [currency]=\"product.currency\"\n        [amount]=\"product.creditLimitUsage | bbAbsoluteValue\"\n        [useShortCurrency]=\"useShortCurrency\"\n        [responsiveView]=\"responsiveView\"\n      >\n      </bb-credit-limit-attribute>\n\n      <ng-container *ngIf=\"showMinimumPayment && product.minimumPayment\">\n        <div *ngIf=\"responsiveView === 'tablet'\" class=\"bb-block bb-block--lg\"></div>\n        <bb-credit-limit-minimum-payment\n          [minimumPayment]=\"product.minimumPayment | bbAbsoluteValue\"\n          [minimumPaymentDueDate]=\"product.minimumPaymentDueDate\"\n          [currency]=\"product.currency\"\n          [useShortCurrency]=\"useShortCurrency\"\n          [responsiveView]=\"responsiveView\"\n        ></bb-credit-limit-minimum-payment>\n      </ng-container>\n    </div>\n  </ng-container>\n\n  <!-- viewMode: filled -->\n  <ng-template #filledTemplate>\n    <div class=\"bb-block bb-block--md\" data-role=\"credit-limit-filled-mode-header\">\n      <!-- Owed -->\n      <bb-credit-limit-attribute\n        *ngIf=\"product.creditLimitUsage | bbIsDefined\"\n        data-role=\"credit-limit-owed\"\n        [title]=\"localization.owed\"\n        color=\"primary\">\n        <div class=\"bb-stack bb-stack--density-xs\"\n             data-role=\"credit-limit-owed-value\">\n          <bb-amount-ui\n            class=\"bb-stack__item bb-heading-3\"\n            [currency]=\"product.currency\"\n            [amount]=\"product.creditLimitUsage | bbAbsoluteValue\"\n            [mapCurrency]=\"useShortCurrency\"\n          ></bb-amount-ui>\n          <ng-container *ngIf=\"product.creditLimit\">\n            <span class=\"bb-stack__item bb-text-support bb-subtitle\">{{localization.of}}</span>\n            <bb-amount-ui\n              class=\"bb-stack__item bb-text-support bb-subtitle\"\n              [currency]=\"product.currency\"\n              [amount]=\"product.creditLimit | bbAbsoluteValue\"\n              [mapCurrency]=\"useShortCurrency\"\n            ></bb-amount-ui>\n          </ng-container>\n        </div>\n      </bb-credit-limit-attribute>\n    </div>\n\n    <div class=\"bb-block bb-block--md\">\n      <!-- Credit limit status bar -->\n      <ng-container *ngTemplateOutlet=\"creditLimitStatusBar\"></ng-container>\n    </div>\n\n    <div [ngClass]=\"{\n           'bb-stack justify-content-between': responsiveView === 'screen'\n         }\"\n    >\n      <!-- Overdue -->\n      <ng-container *ngTemplateOutlet=\"overdueAttribute\"></ng-container>\n      <!-- Reserved -->\n      <ng-container *ngTemplateOutlet=\"reservedAttribute\"></ng-container>\n\n      <!-- Left to Spend -->\n      <bb-credit-limit-attribute\n        *ngIf=\"product.remainingCredit\"\n        [class.bb-stack__item]=\"responsiveView === 'screen'\"\n        data-role=\"credit-limit-left-to-spend\"\n        [title]=\"localization.leftToSpend\"\n        color=\"secondary\"\n        [currency]=\"product.currency\"\n        [amount]=\"product.remainingCredit | bbAbsoluteValue\"\n        [useShortCurrency]=\"useShortCurrency\"\n        [responsiveView]=\"responsiveView\"\n      >\n      </bb-credit-limit-attribute>\n\n      <ng-container *ngIf=\"showMinimumPayment && product.minimumPayment\">\n        <div *ngIf=\"responsiveView === 'tablet'\" class=\"bb-block bb-block--lg\"></div>\n        <bb-credit-limit-minimum-payment\n          [minimumPayment]=\"product.minimumPayment | bbAbsoluteValue\"\n          [minimumPaymentDueDate]=\"product.minimumPaymentDueDate\"\n          [currency]=\"product.currency\"\n          [useShortCurrency]=\"useShortCurrency\"\n          [responsiveView]=\"responsiveView\"\n        ></bb-credit-limit-minimum-payment>\n      </ng-container>\n    </div>\n  </ng-template>\n</ng-container>\n\n<ng-template #overdueAttribute>\n  <bb-credit-limit-attribute\n    *ngIf=\"product.amountInArrear\"\n    [ngClass]=\"{\n      'bb-stack__item': responsiveView === 'screen',\n      'bb-block bb-block--sm': responsiveView === 'tablet'\n    }\"\n    data-role=\"credit-limit-overdue\"\n    [title]=\"localization.overdue\"\n    color=\"danger\"\n    [currency]=\"product.currency\"\n    [amount]=\"product.amountInArrear | bbAbsoluteValue\"\n    [isAmountColored]=\"true\"\n    [useShortCurrency]=\"useShortCurrency\"\n    [responsiveView]=\"responsiveView\"\n  >\n  </bb-credit-limit-attribute>\n</ng-template>\n\n<ng-template #reservedAttribute>\n  <bb-credit-limit-attribute\n    *ngIf=\"product.reservedAmount\"\n    [ngClass]=\"{\n      'bb-stack__item': responsiveView === 'screen',\n      'bb-block bb-block--sm': responsiveView === 'tablet'\n    }\"\n    data-role=\"credit-limit-reserved\"\n    [title]=\"localization.reserved\"\n    color=\"warning\"\n    [currency]=\"product.currency\"\n    [amount]=\"product.reservedAmount | bbAbsoluteValue\"\n    [useShortCurrency]=\"useShortCurrency\"\n    [responsiveView]=\"responsiveView\"\n  >\n  </bb-credit-limit-attribute>\n</ng-template>\n\n<ng-template #creditLimitStatusBar>\n  <bb-credit-limit-status-bar-ui\n    *ngIf=\"product.reservedAmount || product.amountInArrear || product.creditLimitUsage || product.remainingCredit\"\n    aria-hidden=\"true\"\n    data-role=\"credit-limit-status-bar\"\n    [reserved]=\"product.reservedAmount | bbAbsoluteValue\"\n    [overdue]=\"product.amountInArrear | bbAbsoluteValue\"\n    [owed]=\"product.creditLimitUsage | bbAbsoluteValue\"\n    [leftToSpend]=\"product.remainingCredit | bbAbsoluteValue\"\n    [viewMode]=\"viewMode\"\n  ></bb-credit-limit-status-bar-ui>\n</ng-template>\n", components: [{ type: i1.CreditLimitAttributeComponent, selector: "bb-credit-limit-attribute", inputs: ["title", "color", "currency", "amount", "isAmountColored", "useShortCurrency", "isSmallScreen", "isExtraSmallScreen", "responsiveView"] }, { type: i2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i3.CreditLimitMinimumPaymentComponent, selector: "bb-credit-limit-minimum-payment", inputs: ["minimumPayment", "minimumPaymentDueDate", "currency", "useShortCurrency", "isSmallScreen", "isExtraSmallScreen", "responsiveView"] }, { type: i4.CreditLimitStatusBarComponent, selector: "bb-credit-limit-status-bar-ui", inputs: ["viewMode", "reserved", "overdue", "owed", "leftToSpend"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "bbIsDefined": i6.IsDefinedPipe, "bbAbsoluteValue": i6.AbsoluteValuePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CreditLimitComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-credit-limit',
                    templateUrl: './credit-limit.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { product: [{
                type: Input
            }], viewMode: [{
                type: Input
            }], showMinimumPayment: [{
                type: Input
            }], useShortCurrency: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,