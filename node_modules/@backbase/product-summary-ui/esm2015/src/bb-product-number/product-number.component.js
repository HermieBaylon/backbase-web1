import { Component, Directive, Input, Output, EventEmitter } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { MaskableAttribute } from '@backbase/data-ang/arrangements';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@angular/common";
import * as i4 from "@backbase/ui-ang/button";
import * as i5 from "@backbase/ui-ang/tooltip-directive";
import * as i6 from "@backbase/product-summary-common-ang";
import * as i7 from "@backbase/ui-ang/account-number-pipe";
/**
 * Displays a formatted product number ('iban', 'bban' or 'cardNumber')
 *
 * @usageNotes
 *
 * ```html
 * <bb-product-number
 *    value='12345678'
 *    type='iban'
 * ></bb-product-number>
 * ```
 *
 * @ngModule ProductNumberModule
 */
export class ProductNumberComponent {
    /**
     * Constructor
     *
     * @param featuresService
     */
    constructor(featuresService) {
        this.featuresService = featuresService;
        this.hostRef = this;
        /**
         * A product that contains product number, a format will be picked automatically
         * Used when `number` unset
         */
        this.product = {};
        /**
         * Defines whether the attribute is unmaskable
         */
        this.unmaskable = false;
        /**
         * Defines whether the attribute is masked
         */
        this.masked = false;
        /**
         * Emits a `MaskableAttribute` to be masked
         */
        this.mask = new EventEmitter();
        /**
         * Emits a `MaskableAttribute` to be unmasked
         */
        this.unmask = new EventEmitter();
    }
    /**
     * Event handler for the `mask` button
     * Emits the `masked` output with a `MaskedAttribute`
     *
     * @param type
     */
    onMask(type) {
        this.mask.emit(this.mapToMaskableAttribute(type));
    }
    /**
     * Event handler for the `unmask` button
     * Emits the `unmasked` output with a `MaskedAttribute`
     *
     * @param type
     */
    onUnmask(type) {
        this.unmask.emit(this.mapToMaskableAttribute(type));
    }
    mapToMaskableAttribute(type) {
        switch (type) {
            case 'bban':
                return MaskableAttribute.BBAN;
            case 'iban':
                return MaskableAttribute.IBAN;
            default:
                return MaskableAttribute.Number;
        }
    }
}
ProductNumberComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberComponent, deps: [{ token: i1.FeaturesService }], target: i0.ɵɵFactoryTarget.Component });
ProductNumberComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductNumberComponent, selector: "bb-product-number", inputs: { number: "number", product: "product", format: "format", type: "type", unmaskable: "unmaskable", masked: "masked" }, outputs: { mask: "mask", unmask: "unmask" }, ngImport: i0, template: "<ng-container\n  bbProductNumberCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    productNumber: hostRef.number || (hostRef.product | bbProductNumberValue),\n    productType: hostRef.type || (hostRef.product | bbProductNumberType),\n    productFormat: hostRef.format\n  }\"\n></ng-container>\n\n<ng-template\n  bbProductNumberCustomizable\n  let-hostRef\n  let-productNumber=\"context.productNumber\"\n  let-productType=\"context.productType\"\n  let-productFormat=\"context.productFormat\"\n>\n  <span class=\"contextual-alternates-off\" data-role=\"product-number\">\n    {{ productNumber | bbAccountNumber:(productType || productFormat) }}\n  </span>\n  <ng-container *ngIf=\"hostRef.unmaskable\">\n    <button bbButton\n            *ngIf=\"hostRef.masked; else maskButton\"\n            triggers=\"hover focus\"\n            [bbTooltip]=\"unmaskButtonTooltip\"\n            aria-label=\"Unmask\"\n            i18n-aria-label=\"Unmask button@@product-summary-product-number.button-unmask-label\"\n            (click)=\"hostRef.onUnmask(productType)\"\n            buttonSize=\"sm\"\n            circle=\"true\"\n            color=\"link\"\n            type=\"button\"\n            data-role=\"product-number-unmask-button\">\n      <bb-icon-ui name=\"visibility\"></bb-icon-ui>\n    </button>\n    <ng-template #maskButton>\n      <button bbButton\n              triggers=\"hover focus\"\n              [bbTooltip]=\"maskButtonTooltip\"\n              aria-label=\"Mask\"\n              i18n-aria-label=\"Mask button@@product-summary-product-number.button-mask-label\"\n              (click)=\"hostRef.onMask(productType)\"\n              buttonSize=\"sm\"\n              circle=\"true\"\n              color=\"link\"\n              type=\"button\"\n              data-role=\"product-number-mask-button\">\n        <bb-icon-ui name=\"visibility-off\"></bb-icon-ui>\n      </button>\n    </ng-template>\n\n    <ng-template #unmaskButtonTooltip>\n      <ng-container [ngSwitch]=\"productType\">\n        <ng-container *ngSwitchCase=\"'iban'\"\n                      i18n=\"Unmask IBAN|Button to unmask IBAN@@product-summary-product-number.button-unmask-iban.tooltip\">\n          Unmask IBAN\n        </ng-container>\n        <ng-container *ngSwitchCase=\"'bban'\"\n                      i18n=\"Unmask BBAN|Button to unmask BBAN@@product-summary-product-number.button-unmask-bban.tooltip\">\n          Unmask BBAN\n        </ng-container>\n        <ng-container *ngSwitchCase=\"'cardNumber'\"\n                      i18n=\"Unmask number|Button to unmask card number@@product-summary-product-number.button-unmask-number.tooltip\">\n          Unmask number\n        </ng-container>\n        <ng-container *ngSwitchDefault\n                      i18n=\"Unmask|Button to unmask@@product-summary-product-number.button-unmask.tooltip\">\n          Unmask\n        </ng-container>\n      </ng-container>\n    </ng-template>\n\n    <ng-template #maskButtonTooltip>\n      <ng-container [ngSwitch]=\"productType\">\n        <ng-container *ngSwitchCase=\"'iban'\"\n                      i18n=\"Mask IBAN|Button to unmask IBAN@@product-summary-product-number.button-mask-iban.tooltip\">\n          Mask IBAN\n        </ng-container>\n        <ng-container *ngSwitchCase=\"'bban'\"\n                      i18n=\"Mask BBAN|Button to unmask BBAN@@product-summary-product-number.button-mask-bban.tooltip\">\n          Mask BBAN\n        </ng-container>\n        <ng-container *ngSwitchCase=\"'cardNumber'\"\n                      i18n=\"Mask  number|Button to unmask card number@@product-summary-product-number.button-mask-number.tooltip\">\n          Mask number\n        </ng-container>\n        <ng-container *ngSwitchDefault\n                      i18n=\"Mask|Button to unmask@@product-summary-product-number.button-mask.tooltip\">\n          Mask\n        </ng-container>\n      </ng-container>\n    </ng-template>\n  </ng-container>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0.forwardRef(function () { return ProductNumberCustomizableDirective; }), selector: "[bbProductNumberCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i4.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i5.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i3.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i3.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i3.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }], pipes: { "bbProductNumberValue": i0.forwardRef(function () { return i6.ProductNumberValuePipe; }), "bbProductNumberType": i0.forwardRef(function () { return i6.ProductNumberTypePipe; }), "bbAccountNumber": i0.forwardRef(function () { return i7.AccountNumberPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-number',
                    templateUrl: 'product-number.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FeaturesService }]; }, propDecorators: { number: [{
                type: Input
            }], product: [{
                type: Input
            }], format: [{
                type: Input
            }], type: [{
                type: Input
            }], unmaskable: [{
                type: Input
            }], masked: [{
                type: Input
            }], mask: [{
                type: Output
            }], unmask: [{
                type: Output
            }] } });
/**
 * This is an extension slot to be used for customizing the entire component
 *
 * @usageNotes
 *
 * ### Customize details
 *
 * ```html
 * <ng-template
 *   bbProductNumberCustomizable
 *   let-hostRef>
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductNumberCustomizableDirective
 */
export class ProductNumberCustomizableDirective extends BbTemplate {
}
ProductNumberCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductNumberCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductNumberCustomizableDirective, selector: "[bbProductNumberCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductNumberCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,