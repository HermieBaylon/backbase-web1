import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ProductNumberPipeModule } from '@backbase/product-summary-common-ang';
import { ButtonModule } from '@backbase/ui-ang/button';
import { IconModule } from '@backbase/ui-ang/icon';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';
import { ProductNumberComponent, ProductNumberCustomizableDirective } from './product-number.component';
import * as i0 from "@angular/core";
const sharedPipes = [ProductNumberPipeModule];
const components = [ProductNumberComponent];
const directives = [ProductNumberCustomizableDirective];
const uiModules = [ButtonModule, IconModule, TooltipModule];
export class ProductNumberModule {
}
ProductNumberModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductNumberModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberModule, declarations: [ProductNumberComponent, ProductNumberCustomizableDirective], imports: [CommonModule, ProductNumberPipeModule, ButtonModule, IconModule, TooltipModule], exports: [ProductNumberPipeModule, ProductNumberComponent, ProductNumberCustomizableDirective] });
ProductNumberModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberModule, imports: [[CommonModule, ...sharedPipes, ...uiModules], ProductNumberPipeModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...sharedPipes, ...uiModules],
                    declarations: [...components, ...directives],
                    exports: [...sharedPipes, ...components, ...directives],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1udW1iZXIubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9wcm9kdWN0LXN1bW1hcnktdWkvc3JjL2JiLXByb2R1Y3QtbnVtYmVyL3Byb2R1Y3QtbnVtYmVyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ25ELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7QUFFeEcsTUFBTSxXQUFXLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQzlDLE1BQU0sVUFBVSxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUM1QyxNQUFNLFVBQVUsR0FBRyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7QUFDeEQsTUFBTSxTQUFTLEdBQUcsQ0FBQyxZQUFZLEVBQUUsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBTzVELE1BQU0sT0FBTyxtQkFBbUI7O2lIQUFuQixtQkFBbUI7a0hBQW5CLG1CQUFtQixpQkFUWixzQkFBc0IsRUFDdEIsa0NBQWtDLGFBSTFDLFlBQVksRUFOSCx1QkFBdUIsRUFHekIsWUFBWSxFQUFFLFVBQVUsRUFBRSxhQUFhLGFBSHJDLHVCQUF1QixFQUN4QixzQkFBc0IsRUFDdEIsa0NBQWtDO2tIQVF6QyxtQkFBbUIsWUFKckIsQ0FBQyxZQUFZLEVBQUUsR0FBRyxXQUFXLEVBQUUsR0FBRyxTQUFTLENBQUMsRUFObEMsdUJBQXVCOzRGQVUvQixtQkFBbUI7a0JBTC9CLFFBQVE7bUJBQUM7b0JBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLEdBQUcsV0FBVyxFQUFFLEdBQUcsU0FBUyxDQUFDO29CQUNyRCxZQUFZLEVBQUUsQ0FBQyxHQUFHLFVBQVUsRUFBRSxHQUFHLFVBQVUsQ0FBQztvQkFDNUMsT0FBTyxFQUFFLENBQUMsR0FBRyxXQUFXLEVBQUUsR0FBRyxVQUFVLEVBQUUsR0FBRyxVQUFVLENBQUM7aUJBQ3hEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBQcm9kdWN0TnVtYmVyUGlwZU1vZHVsZSB9IGZyb20gJ0BiYWNrYmFzZS9wcm9kdWN0LXN1bW1hcnktY29tbW9uLWFuZyc7XG5pbXBvcnQgeyBCdXR0b25Nb2R1bGUgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL2J1dHRvbic7XG5pbXBvcnQgeyBJY29uTW9kdWxlIH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy9pY29uJztcbmltcG9ydCB7IFRvb2x0aXBNb2R1bGUgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL3Rvb2x0aXAtZGlyZWN0aXZlJztcbmltcG9ydCB7IFByb2R1Y3ROdW1iZXJDb21wb25lbnQsIFByb2R1Y3ROdW1iZXJDdXN0b21pemFibGVEaXJlY3RpdmUgfSBmcm9tICcuL3Byb2R1Y3QtbnVtYmVyLmNvbXBvbmVudCc7XG5cbmNvbnN0IHNoYXJlZFBpcGVzID0gW1Byb2R1Y3ROdW1iZXJQaXBlTW9kdWxlXTtcbmNvbnN0IGNvbXBvbmVudHMgPSBbUHJvZHVjdE51bWJlckNvbXBvbmVudF07XG5jb25zdCBkaXJlY3RpdmVzID0gW1Byb2R1Y3ROdW1iZXJDdXN0b21pemFibGVEaXJlY3RpdmVdO1xuY29uc3QgdWlNb2R1bGVzID0gW0J1dHRvbk1vZHVsZSwgSWNvbk1vZHVsZSwgVG9vbHRpcE1vZHVsZV07XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIC4uLnNoYXJlZFBpcGVzLCAuLi51aU1vZHVsZXNdLFxuICBkZWNsYXJhdGlvbnM6IFsuLi5jb21wb25lbnRzLCAuLi5kaXJlY3RpdmVzXSxcbiAgZXhwb3J0czogWy4uLnNoYXJlZFBpcGVzLCAuLi5jb21wb25lbnRzLCAuLi5kaXJlY3RpdmVzXSxcbn0pXG5leHBvcnQgY2xhc3MgUHJvZHVjdE51bWJlck1vZHVsZSB7fVxuIl19