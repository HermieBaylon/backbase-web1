import { EventEmitter, TemplateRef } from '@angular/core';
import * as i0 from "@angular/core";
export declare class CustomSingleSelectedItemLabelDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomSingleSelectedItemLabelDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CustomSingleSelectedItemLabelDirective, "ng-template[bbCustomSingleSelectedItemLabel]", never, {}, {}, never>;
}
export declare class CustomMultiSelectedItemsLabelDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomMultiSelectedItemsLabelDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CustomMultiSelectedItemsLabelDirective, "ng-template[bbCustomMultiSelectedItemsLabel]", never, {}, {}, never>;
}
export declare class CustomOptionsHeaderDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomOptionsHeaderDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CustomOptionsHeaderDirective, "ng-template[bbCustomOptionsHeader]", never, {}, {}, never>;
}
export declare class CustomOptionItemDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomOptionItemDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CustomOptionItemDirective, "ng-template[bbCustomOptionItem]", never, {}, {}, never>;
}
export declare class CustomGroupItemsHeaderDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomGroupItemsHeaderDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CustomGroupItemsHeaderDirective, "ng-template[bbCustomGroupItemsHeader]", never, {}, {}, never>;
}
export declare class CustomLoadingTemplateDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomLoadingTemplateDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CustomLoadingTemplateDirective, "ng-template[bbCustomLoadingTemplate]", never, {}, {}, never>;
}
export declare class AccountPickerComponent {
    readonly hostRef: AccountPickerComponent;
    customSingleSelectedItemLabel: CustomSingleSelectedItemLabelDirective | undefined;
    customMultiSelectedItemsLabel: CustomMultiSelectedItemsLabelDirective | undefined;
    customOptionsHeader: CustomOptionsHeaderDirective | undefined;
    customOptionItem: CustomOptionItemDirective | undefined;
    customGroupItemsHeader: CustomGroupItemsHeaderDirective | undefined;
    customLoadingTemplate: CustomLoadingTemplateDirective | undefined;
    /**
     *  Event (Output) that emits when search is performed. Outputs search term
     */
    search: EventEmitter<string>;
    /**
     *  Event (Output) that emits when clear search
     */
    clearSearch: EventEmitter<void>;
    /**
     *  Event (Output) that emits when scrollToEnd is triggered
     */
    scrollToEnd: EventEmitter<void>;
    /**
     *  Event (Output) that emits when item is removed
     */
    remove: EventEmitter<any>;
    /**
     *  Event (Output) that emits when item is added to selected items or removed from selected items.
     * When Multiple is true: Output is Items[]
     * When Multuple is false: Output is Item
     * TODO: rename 'change' output to avoid collisions with a native 'change' event
     */
    change: EventEmitter<any>;
    /**
     * Items array that this component displays
     */
    items: any | any[];
    /**
     * Selected items
     */
    selectedItems: any | any[];
    /**
     * Flag that indicates if select of multiple items is allowed
     */
    multiple: boolean;
    /**
     * Flag that indicates whether to close the menu when a value is selected
     */
    closeOnSelect: boolean;
    /**
     * Flag that indicates whether to allow to search for value. Default from ng-select false.
     */
    searchable: boolean;
    /**
     * Flag that indicates whether to allow to clear selected value.
     */
    clearable: boolean;
    /**
     * Placeholder text
     */
    placeholder: string;
    /**
     * Flag that indicates loading state from the outside (async items loading)
     */
    loading: boolean;
    /**
     * Flag that indicates opening direction of dropdown (bottom | top | auto)
     */
    dropdownPosition: string;
    /**
     * Flag that indicates whether `scrollEnd` event should be emitted
     */
    disableScrollEnd: boolean;
    /**
     * Flag that indicates whether filtering of items is allowed.
     */
    filterItems: boolean;
    /**
     * Flag that indicates whether to mark first item as focused when opening/filtering.
     */
    markFirst: boolean;
    /**
     * Allow to group items by key or function expression
     */
    groupByFn: (item: any) => any;
    /**
     * Function expression to provide group value
     */
    groupValueFn: (name: string, children: any[]) => {
        name: string;
        total: number;
    };
    onSearch(event: string): void;
    onClear(): void;
    onScrollToEnd(): void;
    onRemove(event: any): void;
    onChange(event: any): void;
    selectAll(): void;
    unselectAll(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AccountPickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AccountPickerComponent, "bb-account-picker", never, { "items": "items"; "selectedItems": "selectedItems"; "multiple": "multiple"; "closeOnSelect": "closeOnSelect"; "searchable": "searchable"; "clearable": "clearable"; "placeholder": "placeholder"; "loading": "loading"; "dropdownPosition": "dropdownPosition"; "disableScrollEnd": "disableScrollEnd"; "filterItems": "filterItems"; "markFirst": "markFirst"; "groupByFn": "groupByFn"; "groupValueFn": "groupValueFn"; }, { "search": "search"; "clearSearch": "clearSearch"; "scrollToEnd": "scrollToEnd"; "remove": "remove"; "change": "change"; }, ["customSingleSelectedItemLabel", "customMultiSelectedItemsLabel", "customOptionsHeader", "customOptionItem", "customGroupItemsHeader", "customLoadingTemplate"], never>;
}
