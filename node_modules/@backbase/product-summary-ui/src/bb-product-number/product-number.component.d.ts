import { EventEmitter } from '@angular/core';
import { BbTemplate, FeaturesService } from '@backbase/foundation-ang/core';
import { Product } from '@backbase/product-summary-common-ang';
import { ProductSummaryItem, MaskableAttribute } from '@backbase/data-ang/arrangements';
import { AccountNumberType } from '@backbase/ui-ang/account-number-pipe';
import { PaymentCardNumberFormat } from '@backbase/ui-ang/payment-card-number-pipe';
import * as i0 from "@angular/core";
/**
 * Displays a formatted product number ('iban', 'bban' or 'cardNumber')
 *
 * @usageNotes
 *
 * ```html
 * <bb-product-number
 *    value='12345678'
 *    type='iban'
 * ></bb-product-number>
 * ```
 *
 * @ngModule ProductNumberModule
 */
export declare class ProductNumberComponent {
    private readonly featuresService;
    readonly hostRef: this;
    /**
     * A product number,
     * Use with `type` to specify which format to use
     */
    number: string | undefined;
    /**
     * A product that contains product number, a format will be picked automatically
     * Used when `number` unset
     */
    product: ProductSummaryItem | Product;
    /**
     * Custom product number format, will override default app level format configuration
     */
    format: PaymentCardNumberFormat | undefined;
    /**
     * Product number type ('bban', 'iban' or 'cardNumber')
     */
    type: AccountNumberType | undefined;
    /**
     * Defines whether the attribute is unmaskable
     */
    unmaskable: boolean;
    /**
     * Defines whether the attribute is masked
     */
    masked: boolean;
    /**
     * Emits a `MaskableAttribute` to be masked
     */
    mask: EventEmitter<MaskableAttribute>;
    /**
     * Emits a `MaskableAttribute` to be unmasked
     */
    unmask: EventEmitter<MaskableAttribute>;
    /**
     * Constructor
     *
     * @param featuresService
     */
    constructor(featuresService: FeaturesService);
    /**
     * Event handler for the `mask` button
     * Emits the `masked` output with a `MaskedAttribute`
     *
     * @param type
     */
    onMask(type: AccountNumberType): void;
    /**
     * Event handler for the `unmask` button
     * Emits the `unmasked` output with a `MaskedAttribute`
     *
     * @param type
     */
    onUnmask(type: AccountNumberType): void;
    private mapToMaskableAttribute;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductNumberComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ProductNumberComponent, "bb-product-number", never, { "number": "number"; "product": "product"; "format": "format"; "type": "type"; "unmaskable": "unmaskable"; "masked": "masked"; }, { "mask": "mask"; "unmask": "unmask"; }, never, never>;
}
/**
 * This is an extension slot to be used for customizing the entire component
 *
 * @usageNotes
 *
 * ### Customize details
 *
 * ```html
 * <ng-template
 *   bbProductNumberCustomizable
 *   let-hostRef>
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductNumberCustomizableDirective
 */
export declare class ProductNumberCustomizableDirective extends BbTemplate<ProductNumberComponent, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductNumberCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ProductNumberCustomizableDirective, "[bbProductNumberCustomizable]", never, {}, {}, never>;
}
