import { EventEmitter } from '@angular/core';
import { AccountAliasDisplayingLevel, AccountArrangementItem } from '@backbase/product-summary-common-ang';
import * as i0 from "@angular/core";
/**
 *
 * @usageNotes
 *
 * ### Usage example
 * ```
 * <bb-account-header
 *   [product]="product"
 *   [canEditAlias]="true"
 *   [isBalanceTypeVisible]="true"
 *   [mapCurrency]="true"
 * ></bb-account-header>
 * ```
 *
 * @NgModule AccountHeaderModule
 */
export declare class AccountHeaderComponent {
    /**
     * Localisation for aliasHelpText
     */
    readonly aliasHelpTextLocalization: {
        ACCOUNT: string;
        USER: string;
    };
    /**
     * Product type data to display account info
     *
     * @default undefined
     */
    set product(value: AccountArrangementItem | undefined);
    get product(): AccountArrangementItem | undefined;
    /**
     * Defines if alias can be edited
     */
    canEditAlias: boolean;
    /**
     * Defines visibility level of the account alis.
     *
     * @default 'USER'
     */
    aliasLevel: AccountAliasDisplayingLevel;
    /**
     * Defines visibility of the balance.
     *
     * @default true
     */
    showBalance: boolean;
    /**
     * Defines visibility of the balance type.
     *
     * @default true
     */
    isBalanceTypeVisible: boolean;
    /**
     * Defines visibility of the logo
     *
     * @default true
     */
    isLogoVisible: boolean;
    /**
     * Whether currency local should be transformed to symbol.
     *
     * @default false.
     */
    mapCurrency: boolean;
    /**
     * Event (Output) that emits when item alias is changed
     */
    aliasUpdated: EventEmitter<string>;
    /**
     * Copy of product.displayName to be displayed and edited
     *
     * @default ""
     */
    displayName: string;
    /**
     * Flag to manage "confirm alias update" modal
     *
     * @default false
     */
    isVisibleAliasModal: boolean;
    /**
     * Indicates whether the account alias is being edited
     */
    get aliasEditMode(): boolean;
    /**
     * Maximum length of product item aliases
     *
     * @default UserPreferencesValidationSettings.ALIAS_MAX_LENGTH (50)
     */
    readonly aliasMaxLength: number;
    /**
     * Options for the alias modal window
     */
    readonly modalOptions: {
        centered: boolean;
        backdrop: string;
    };
    private readonly accountAliasEditor;
    private _product;
    /**
     * Event handler for the `accept` event of `bb-input-inline-edit-ui`
     * if `alias` is empty - emits `aliasUpdated`
     * if `alias` isn't empty and differ to previous value - opens a confirmation modal
     *
     * @param alias
     */
    onAliasEdit(alias: string): void;
    /**
     * Event handler for the `confirm` event of `bb-modal-ui`
     * closes the modal and sets previous `displayName`
     */
    onModalConfirm(): void;
    /**
     * Event handler for the `cancel` event of `bb-modal-ui`
     * closes the modal and sets previous `displayName`
     */
    onModalCancel(): void;
    /**
     * Closes the alias modal
     *
     * @private
     */
    private closeEditAliasModal;
    /**
     * Sets the passed value to the inline editor
     *
     * @param value
     * @private
     */
    private setDisplayName;
    /**
     * Emits the passed alias to `aliasUpdated`
     *
     * @param alias
     * @private
     */
    private updateAlias;
    static ɵfac: i0.ɵɵFactoryDeclaration<AccountHeaderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AccountHeaderComponent, "bb-account-header", never, { "product": "product"; "canEditAlias": "canEditAlias"; "aliasLevel": "aliasLevel"; "showBalance": "showBalance"; "isBalanceTypeVisible": "isBalanceTypeVisible"; "isLogoVisible": "isLogoVisible"; "mapCurrency": "mapCurrency"; }, { "aliasUpdated": "aliasUpdated"; }, never, never>;
}
