import { ElementRef, EventEmitter, AfterViewInit, ChangeDetectorRef } from '@angular/core';
import { AccountArrangementItem as ProductType } from '@backbase/data-ang/arrangements';
import { PaymentCard } from '@backbase/ui-ang/payment-card';
import { AccountAliasDisplayingLevel, ResponsiveContainerComponent } from '@backbase/product-summary-common-ang';
import { CreditLimitViewMode } from '../bb-credit-limit-ui/types';
import { CreditCardBackgroundType } from './types';
import * as i0 from "@angular/core";
/**
 * Displays account graphical header
 *
 * @usageNotes
 *
 * ### Usage example
 * ```
 * <bb-account-graphical-header
 *   [product]="product"
 *   [canEditAlias]="true"
 *   [useShortCurrency]="false"
 *   [creditLimitViewMode]="emptied"
 *   [canRepay]="true"
 *   [canCashInAdvance]="true"
 *   [creditCardBackgroundType]="black-card"
 *   (aliasUpdated)="onAliasUpdated($event)"
 *   (repayInitiated)="onRepayInitiated()"
 *   (cashAdvanceInitiated)="onCashAdvanceInitiated()"
 * ></bb-account-graphical-header>
 * ```
 *
 * @NgModule AccountGraphicalHeaderModule
 */
export declare class AccountGraphicalHeaderComponent extends ResponsiveContainerComponent implements AfterViewInit {
    private readonly el;
    private readonly changeDetector;
    /**
     * AccountArrangementItem to display credit limit
     *
     * @default undefined
     */
    product: ProductType | undefined;
    /**
     * Defines visibility level of the account alis.
     *
     * @default 'USER'
     */
    aliasLevel: AccountAliasDisplayingLevel;
    /**
     * Defines if alias can be edited
     *
     * @default false
     */
    canEditAlias: boolean;
    /**
     * Whether currency should be displayed as a sign.
     *
     * @default true
     */
    useShortCurrency: boolean;
    /**
     * Credit Limit view mode. Can be "filled" or "emptied"
     *
     * @default "emptied"
     */
    creditLimitViewMode: CreditLimitViewMode;
    /**
     * Defines if quick repay is allowed
     *
     * @default false
     */
    canRepay: boolean;
    /**
     * Defines if cash in advance is allowed
     *
     * @default false
     */
    canCashInAdvance: boolean;
    /**
     * Credit card background type
     *
     * @default "black-card"
     */
    creditCardBackgroundType: CreditCardBackgroundType;
    /**
     * Defines visibility of the logo
     *
     * @default false
     */
    isLogoVisible: boolean;
    /**
     * Event (Output) that emits when item alias is changed
     */
    aliasUpdated: EventEmitter<string>;
    /**
     * Event (Output) that emits when `repay` action initiated
     */
    repayInitiated: EventEmitter<string>;
    /**
     * Event (Output) that emits when `cash advance` action initiated
     */
    cashAdvanceInitiated: EventEmitter<string>;
    /**
     * @internal
     */
    constructor(el: ElementRef<HTMLElement>, changeDetector: ChangeDetectorRef);
    /**
     * A configuration for graphical presentation of payment card
     */
    get graphicalCreditCardConfiguration(): PaymentCard;
    /**
     * Event handler for the `click` event of `repay-button`;
     * Emits `arrangementId` to `repayInitiated`
     */
    repayButtonClicked(): void;
    /**
     * Event handler for the `click` event of `cash-advance-button`;
     * Emits `arrangementId` to `cashAdvanceInitiated`
     */
    cashAdvanceButtonClicked(): void;
    /**
     * Returns arrangement id of the product
     *
     * @private
     */
    private getArrangementId;
    static ɵfac: i0.ɵɵFactoryDeclaration<AccountGraphicalHeaderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AccountGraphicalHeaderComponent, "bb-account-graphical-header", never, { "product": "product"; "aliasLevel": "aliasLevel"; "canEditAlias": "canEditAlias"; "useShortCurrency": "useShortCurrency"; "creditLimitViewMode": "creditLimitViewMode"; "canRepay": "canRepay"; "canCashInAdvance": "canCashInAdvance"; "creditCardBackgroundType": "creditCardBackgroundType"; "isLogoVisible": "isLogoVisible"; }, { "aliasUpdated": "aliasUpdated"; "repayInitiated": "repayInitiated"; "cashAdvanceInitiated": "cashAdvanceInitiated"; }, never, never>;
}
