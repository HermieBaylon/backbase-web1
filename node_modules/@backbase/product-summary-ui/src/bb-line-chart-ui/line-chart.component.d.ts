import { OnInit } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { BalanceHistoryData } from '@backbase/product-summary-common-ang';
import { BalanceHistoryLineChartCustomizableDirectiveContext, ChartReferenceLine, BalanceHistoryLineChartTooltipCustomizableDirectiveContext } from './types';
import * as i0 from "@angular/core";
export declare class LineChartComponent implements OnInit {
    readonly hostRef: this;
    /**
     * List of classes applied to the chart container
     */
    classes: string | undefined;
    /**
     * @default []
     * The chart data (data series)
     */
    dataSeries: any[];
    /**
     * @default true
     * Show or hide X Axis
     */
    showXAxis: boolean;
    /**
     * @default true
     * Show or hide Y Axis
     */
    showYAxis: boolean;
    /**
     * @default false
     * Fill elements with a gradient instead of a solid color
     */
    gradient: boolean;
    /**
     * @default false
     * Show or hide the legend
     */
    showLegend: boolean;
    /**
     * @default false
     * Show or hide the X axis label
     */
    showXAxisLabel: boolean;
    /**
     * @default false
     * Show or hide the Y axis label
     */
    showYAxisLabel: boolean;
    /**
     * @default ''
     * X axis label text
     */
    xAxisLabel: string;
    /**
     * @default ''
     * Y axis label text
     */
    yAxisLabel: string;
    /**
     * @default false
     * Set the minimum value of the y axis to the minimum value in the data, instead of 0
     */
    autoScale: boolean;
    /**
     * @default true
     * Set animations to true
     */
    animations: boolean;
    /**
     * @default []
     * Set custom colors for negative and positive areas
     */
    customColors: never[];
    /**
     * @default ''
     * The currency data
     */
    currency: string;
    /**
     * @default false
     * Show/Hide the amount symbol prefixed to the amount
     */
    showTooltipAmountSign: boolean;
    /**
     * @default false
     * Show/Hide the percentage symbol suffixed to the amount
     */
    showTooltipAmountPercent: boolean;
    /**
     * @default mediumDate
     * Date that will be displayed inside the tooltip
     */
    tooltipDateFormat: string;
    /**
     * @default true
     * Show/Hide the refrence line that will be shown behind the chart.
     * This will distinguish the postive and negative series.
     */
    showRefLines: boolean;
    /**
     * @default false
     * Show/Hide the refrence labels
     */
    showRefLabels: boolean;
    /**
     * @default []
     * Refrence lines that will be shown behind the chart
     */
    referenceLines: ChartReferenceLine[];
    /**
     * @default defaultTickFormatFunction
     * x-Axis tick format function
     */
    xAxisTickFormatFunction: (tick: any) => any;
    /**
     * @default defaultTickFormatFunction
     * y-Axis tick format function
     */
    yAxisTickFormatFunction: (tick: any) => any;
    constructor();
    ngOnInit(): void;
    yAxisTickFormat: (tick: any) => any;
    xAxisTickFormat: (tick: any) => any;
    initReferenceLines(): void;
    defaultTickFormatFunction(tick: any): any;
    /**
     * Filters out consecutive duplicate values,
     * for example [2, 0, 0, 2] => [2, 0, 2]
     */
    sanitizeTooltipValues(tooltipValues: BalanceHistoryData[]): BalanceHistoryData[];
    static ɵfac: i0.ɵɵFactoryDeclaration<LineChartComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LineChartComponent, "bb-line-chart-ui", never, { "classes": "classes"; "dataSeries": "dataSeries"; "showXAxis": "showXAxis"; "showYAxis": "showYAxis"; "gradient": "gradient"; "showLegend": "showLegend"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "autoScale": "autoScale"; "animations": "animations"; "customColors": "customColors"; "currency": "currency"; "showTooltipAmountSign": "showTooltipAmountSign"; "showTooltipAmountPercent": "showTooltipAmountPercent"; "tooltipDateFormat": "tooltipDateFormat"; "showRefLines": "showRefLines"; "showRefLabels": "showRefLabels"; "referenceLines": "referenceLines"; "xAxisTickFormatFunction": "xAxisTickFormatFunction"; "yAxisTickFormatFunction": "yAxisTickFormatFunction"; }, {}, never, never>;
}
export declare class BalanceHistoryLineChartCustomizableDirective extends BbTemplate<LineChartComponent, BalanceHistoryLineChartCustomizableDirectiveContext> {
    static ɵfac: i0.ɵɵFactoryDeclaration<BalanceHistoryLineChartCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BalanceHistoryLineChartCustomizableDirective, "[bbBalanceHistoryLineChartCustomizable]", never, {}, {}, never>;
}
export declare class BalanceHistoryLineChartTooltipCustomizableDirective extends BbTemplate<LineChartComponent, BalanceHistoryLineChartTooltipCustomizableDirectiveContext> {
    static ɵfac: i0.ɵɵFactoryDeclaration<BalanceHistoryLineChartTooltipCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BalanceHistoryLineChartTooltipCustomizableDirective, "[bbBalanceHistoryLineChartTooltipCustomizable]", never, {}, {}, never>;
}
export declare class BalanceHistoryLineChartTooltipSeriesCustomizableDirective extends BbTemplate<LineChartComponent, BalanceHistoryLineChartTooltipCustomizableDirectiveContext[]> {
    static ɵfac: i0.ɵɵFactoryDeclaration<BalanceHistoryLineChartTooltipSeriesCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BalanceHistoryLineChartTooltipSeriesCustomizableDirective, "[bbBalanceHistoryLineChartSeriesTooltipCustomizable]", never, {}, {}, never>;
}
