import { EventEmitter } from '@angular/core';
import { ProductSummaryItem } from '@backbase/data-ang/arrangements';
import { DomAttributesService, AccountNavigationType } from '@backbase/product-summary-common-ang';
import * as i0 from "@angular/core";
export declare class ProductItemCardComponent {
    private readonly domAttributesService;
    readonly hostRef: ProductItemCardComponent;
    /**
     * A reference to AccountNavigationType enum
     */
    readonly accountNavigationType: typeof AccountNavigationType;
    /**
     * Unique id for account-name DOM element
     */
    readonly accountNameId: string;
    /**
     * Allowed navigation types, change it to hide some of the navigation links
     *
     * @default DefaultAllowedNavigationTypes
     */
    allowedNavigations: AccountNavigationType[];
    /**
     * Flag that indicates if changing favorite status is allowed
     *
     * @default true
     */
    canToggleFavorite: boolean;
    /**
     * Is item set as favorite
     */
    isFavorite: boolean;
    /**
     * Product summary Item array - list of accounts data that this component displays.
     */
    item: ProductSummaryItem | undefined;
    /**
     * itemSelect emits selected account when card is selected
     */
    itemSelect: EventEmitter<ProductSummaryItem | undefined>;
    /**
     * favorite emits selected account as ProductsummaryItem object
     */
    favorite: EventEmitter<ProductSummaryItem>;
    /**
     * viewTransactions emits id of clicked account as string - used to navigate to transactions
     */
    viewTransactions: EventEmitter<any>;
    /**
     * viewStatements emits selected account id as string - used to navigate to statements
     */
    viewStatements: EventEmitter<any>;
    /**
     * newPayment emits id of clicked account as string - used to navigate to payments
     */
    newPayment: EventEmitter<any>;
    /**
     * viewBalanceHistory emits selected account id as string - used to navigate to balance history
     */
    viewBalanceHistory: EventEmitter<any>;
    /**
     * @internal
     * @param domAttributesService
     */
    constructor(domAttributesService: DomAttributesService);
    get favoriteIcon(): string;
    getIconName(productKindName?: string): string;
    getIconColor(productKindName?: string): string;
    /**
     * emits "itemSelected" event
     */
    onItemSelected(): void;
    onFavorite(account: ProductSummaryItem | undefined): void;
    onViewTransactions(id: string): void;
    onNewPayment(id: string): void;
    onViewStatements(id: string): void;
    onViewBalanceHistory(id: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductItemCardComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ProductItemCardComponent, "bb-product-item-card", never, { "allowedNavigations": "allowedNavigations"; "canToggleFavorite": "canToggleFavorite"; "isFavorite": "isFavorite"; "item": "item"; }, { "itemSelect": "itemSelect"; "favorite": "favorite"; "viewTransactions": "viewTransactions"; "viewStatements": "viewStatements"; "newPayment": "newPayment"; "viewBalanceHistory": "viewBalanceHistory"; }, never, never>;
}
