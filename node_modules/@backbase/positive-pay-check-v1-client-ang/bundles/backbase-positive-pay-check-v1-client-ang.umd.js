(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/positive-pay-check-v1-client-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["positive-pay-check-v1-client-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var Direction = {
        ASC: 'ASC',
        DESC: 'DESC'
    };

    exports.ExceptionCheckDecisionRequest = void 0;
    (function (ExceptionCheckDecisionRequest) {
        ExceptionCheckDecisionRequest.ActionTypeEnum = {
            PAY: 'PAY',
            REJECT: 'REJECT'
        };
    })(exports.ExceptionCheckDecisionRequest || (exports.ExceptionCheckDecisionRequest = {}));

    var POSITIVE_PAY_CHECK_BASE_PATH = new i0.InjectionToken('POSITIVE_PAY_CHECK_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var PositivePayCheckConfiguration = /** @class */ (function () {
        function PositivePayCheckConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        PositivePayCheckConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        PositivePayCheckConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        PositivePayCheckConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        PositivePayCheckConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return PositivePayCheckConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module PositivePayCheckConfiguration');

    var PositivePayCheckApiModule = /** @class */ (function () {
        function PositivePayCheckApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('PositivePayCheckApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        PositivePayCheckApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: PositivePayCheckApiModule,
                providers: [{ provide: PositivePayCheckConfiguration, useFactory: configurationFactory }]
            };
        };
        return PositivePayCheckApiModule;
    }());
    PositivePayCheckApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PositivePayCheckApiModule, deps: [{ token: PositivePayCheckApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: PositivePayCheckConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PositivePayCheckApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PositivePayCheckApiModule });
    PositivePayCheckApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PositivePayCheckApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PositivePayCheckApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: PositivePayCheckApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: PositivePayCheckConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var PositivePayChecksHttpService = /** @class */ (function () {
        function PositivePayChecksHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new PositivePayCheckConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        PositivePayChecksHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        PositivePayChecksHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        PositivePayChecksHttpService.prototype.deleteCheck = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteCheck.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v1/checks/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PositivePayChecksHttpService.prototype.deleteCheckUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteCheck.');
            }
            return this.configuration.basePath + "/client-api/v1/checks/" + encodeURIComponent(String(_id));
        };
        PositivePayChecksHttpService.prototype.filterChecks = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _body = requestParameters["body"];
            if (_body === null || _body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling filterChecks.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/checks/filter", _body, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PositivePayChecksHttpService.prototype.filterChecksUrl = function (requestParameters) {
            var _body = requestParameters["body"];
            if (_body === null || _body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling filterChecks.');
            }
            return this.configuration.basePath + "/client-api/v1/checks/filter";
        };
        PositivePayChecksHttpService.prototype.filterExceptions = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _body = requestParameters["body"];
            if (_body === null || _body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling filterExceptions.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/exceptions/filter", _body, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PositivePayChecksHttpService.prototype.filterExceptionsUrl = function (requestParameters) {
            var _body = requestParameters["body"];
            if (_body === null || _body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling filterExceptions.');
            }
            return this.configuration.basePath + "/client-api/v1/exceptions/filter";
        };
        PositivePayChecksHttpService.prototype.getCounts = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/counts", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PositivePayChecksHttpService.prototype.getCountsUrl = function () {
            return this.configuration.basePath + "/client-api/v1/counts";
        };
        PositivePayChecksHttpService.prototype.getExceptionDetails = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getExceptionDetails.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/exceptions/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PositivePayChecksHttpService.prototype.getExceptionDetailsUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getExceptionDetails.');
            }
            return this.configuration.basePath + "/client-api/v1/exceptions/" + encodeURIComponent(String(_id));
        };
        PositivePayChecksHttpService.prototype.getSettings = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/settings", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PositivePayChecksHttpService.prototype.getSettingsUrl = function () {
            return this.configuration.basePath + "/client-api/v1/settings";
        };
        PositivePayChecksHttpService.prototype.processExceptionDecision = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling processExceptionDecision.');
            }
            var _body = requestParameters["body"];
            if (_body === null || _body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling processExceptionDecision.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.patch(this.configuration.basePath + "/client-api/v1/exceptions/" + encodeURIComponent(String(_id)), _body, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PositivePayChecksHttpService.prototype.processExceptionDecisionUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling processExceptionDecision.');
            }
            var _body = requestParameters["body"];
            if (_body === null || _body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling processExceptionDecision.');
            }
            return this.configuration.basePath + "/client-api/v1/exceptions/" + encodeURIComponent(String(_id));
        };
        PositivePayChecksHttpService.prototype.startChecksFileUpload = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _body = requestParameters["body"];
            if (_body === null || _body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling startChecksFileUpload.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/uploads/checks", _body, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PositivePayChecksHttpService.prototype.startChecksFileUploadUrl = function (requestParameters) {
            var _body = requestParameters["body"];
            if (_body === null || _body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling startChecksFileUpload.');
            }
            return this.configuration.basePath + "/client-api/v1/uploads/checks";
        };
        PositivePayChecksHttpService.prototype.submitCheck = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _body = requestParameters["body"];
            if (_body === null || _body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling submitCheck.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/checks", _body, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PositivePayChecksHttpService.prototype.submitCheckUrl = function (requestParameters) {
            var _body = requestParameters["body"];
            if (_body === null || _body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling submitCheck.');
            }
            return this.configuration.basePath + "/client-api/v1/checks";
        };
        PositivePayChecksHttpService.prototype.updateSettings = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _body = requestParameters["body"];
            if (_body === null || _body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling updateSettings.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.patch(this.configuration.basePath + "/client-api/v1/settings", _body, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PositivePayChecksHttpService.prototype.updateSettingsUrl = function (requestParameters) {
            var _body = requestParameters["body"];
            if (_body === null || _body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling updateSettings.');
            }
            return this.configuration.basePath + "/client-api/v1/settings";
        };
        return PositivePayChecksHttpService;
    }());
    PositivePayChecksHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PositivePayChecksHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: POSITIVE_PAY_CHECK_BASE_PATH, optional: true }, { token: PositivePayCheckConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PositivePayChecksHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PositivePayChecksHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PositivePayChecksHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [POSITIVE_PAY_CHECK_BASE_PATH]
                        }] }, { type: PositivePayCheckConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var PositivePayChecksHttpServiceDeleteCheckMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/checks/{id}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var PositivePayChecksHttpServiceFilterChecksMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/checks/filter",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "checks": [{
                                "id": "849d66ae-c942-2ba7-8739-c5a38a596f31",
                                "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                "payeeName": "Sarah Lee",
                                "amountDetails": {
                                    "currencyCode": "USD",
                                    "amount": "99.99"
                                },
                                "checkNumber": "111456789123456789123456789111",
                                "issueDate": "2020-11-01",
                                "voidCheck": false,
                                "registrationDate": "2005-10-21T11:50:23.000-05:00",
                                "issueStatus": "SUBMITTED"
                            }, {
                                "id": "849d66ae-c942-2ba7-8739-c5a38a596f32",
                                "arrangementId": "aa9d66ae-b927-4ac7-8799-c5a38a53ed24",
                                "payeeName": " ",
                                "amountDetails": {
                                    "currencyCode": "USD",
                                    "amount": "150.54"
                                },
                                "checkNumber": "333456789123456789123456789333",
                                "issueDate": "2020-11-01",
                                "voidCheck": true,
                                "registrationDate": "2009-09-20T15:42:20.000-05:00",
                                "issueStatus": "SUBMITTED"
                            }, {
                                "id": "849d66ae-c942-2ba7-8739-c5a38a596f33",
                                "arrangementId": "c3d62af-3r27-4ac7-8799-c5a38a596asf2",
                                "payeeName": "Robin Green",
                                "amountDetails": {
                                    "currencyCode": "CAD",
                                    "amount": "10.89"
                                },
                                "checkNumber": "444456789123456789123456789444",
                                "issueDate": "2020-11-01",
                                "voidCheck": false,
                                "issueStatus": "SAVED"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var PositivePayChecksHttpServiceFilterExceptionsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/exceptions/filter",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "exceptions": [{
                                "id": "849d66ae-c942-2ba7-8739-c5a38a596f32",
                                "checkNumber": "111456789123456789123456789111",
                                "accountNumber": "12312312312321213",
                                "issueDate": "2020-11-01",
                                "payeeName": "Robin Green",
                                "amountDetails": {
                                    "currencyCode": "USD",
                                    "amount": "150.54"
                                },
                                "errors": ["Data mismatch", "Duplicate check"],
                                "displayName": "Current account"
                            }, {
                                "id": "849d66ae-c942-2ba7-8739-c5a38a596f44",
                                "checkNumber": "111456789123456789123456789222",
                                "accountNumber": "12312312312324444",
                                "issueDate": "2021-01-05",
                                "payeeName": "Robert Plant",
                                "amountDetails": {
                                    "currencyCode": "USD",
                                    "amount": "120.00"
                                },
                                "errors": ["Already paid"],
                                "displayName": "Saving account"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var PositivePayChecksHttpServiceGetCountsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/counts",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "exceptionCount": 250
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var PositivePayChecksHttpServiceGetExceptionDetailsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/exceptions/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "exceptionCheck": {
                            "id": "849d66ae-c942-2ba7-8739-c5a38a596f32",
                            "checkNumber": "111456789123456789123456789111",
                            "accountNumber": "12312312312321213",
                            "issueDate": "2020-11-01",
                            "payeeName": "Robin Green",
                            "amountDetails": {
                                "currencyCode": "USD",
                                "amount": "150.54"
                            },
                            "errors": ["Data mismatch", "Duplicate check"],
                            "checkDepositDate": "2020-12-01T10:05:28Z",
                            "exceptionDate": "2020-12-01T11:00:00Z",
                            "displayName": "Payroll account for new hires"
                        },
                        "issuedCheck": {
                            "id": "849d66ae-c942-2ba7-8739-c5a38a596f31",
                            "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                            "payeeName": "Sarah Lee",
                            "amountDetails": {
                                "currencyCode": "USD",
                                "amount": "99.99"
                            },
                            "checkNumber": "111456789123456789123456789111",
                            "issueDate": "2020-11-01",
                            "voidCheck": false,
                            "registrationDate": "2020-12-31T01:30:00.000-05:00",
                            "issueStatus": "SAVED",
                            "displayName": "Payroll account for new hires",
                            "userFullName": "Jimmy Page"
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var PositivePayChecksHttpServiceGetSettingsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/settings",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "settings": [{
                                "subscription": "checks-positive-pay-with-payee-match",
                                "systemDecision": "Reject",
                                "additions": {
                                    "costs-to-update": "$1.50 ex. taxes"
                                }
                            }, {
                                "subscription": "checks-positive-pay-without-payee-match",
                                "systemDecision": "Pay"
                            }],
                        "additions": {
                            "settingId": "1"
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var PositivePayChecksHttpServiceProcessExceptionDecisionMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/exceptions/{id}",
            method: "PATCH",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var PositivePayChecksHttpServiceStartChecksFileUploadMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/uploads/checks",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "uploadId": "10"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var PositivePayChecksHttpServiceSubmitCheckMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/checks",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "849d66ae-c942-2ba7-8739-c5a38a596f31",
                        "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                        "payeeName": "Sarah Lee",
                        "amountDetails": {
                            "currencyCode": "USD",
                            "amount": "99.99"
                        },
                        "checkNumber": "111456789123456789123456789111",
                        "issueDate": "2020-11-01",
                        "voidCheck": false,
                        "registrationDate": "2020-12-31T01:30:00.000",
                        "issueStatus": "SAVED"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var PositivePayChecksHttpServiceUpdateSettingsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/settings",
            method: "PATCH",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var PositivePayChecksHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v1/checks/{id}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/checks/filter",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "checks": [{
                                "id": "849d66ae-c942-2ba7-8739-c5a38a596f31",
                                "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                "payeeName": "Sarah Lee",
                                "amountDetails": {
                                    "currencyCode": "USD",
                                    "amount": "99.99"
                                },
                                "checkNumber": "111456789123456789123456789111",
                                "issueDate": "2020-11-01",
                                "voidCheck": false,
                                "registrationDate": "2005-10-21T11:50:23.000-05:00",
                                "issueStatus": "SUBMITTED"
                            }, {
                                "id": "849d66ae-c942-2ba7-8739-c5a38a596f32",
                                "arrangementId": "aa9d66ae-b927-4ac7-8799-c5a38a53ed24",
                                "payeeName": " ",
                                "amountDetails": {
                                    "currencyCode": "USD",
                                    "amount": "150.54"
                                },
                                "checkNumber": "333456789123456789123456789333",
                                "issueDate": "2020-11-01",
                                "voidCheck": true,
                                "registrationDate": "2009-09-20T15:42:20.000-05:00",
                                "issueStatus": "SUBMITTED"
                            }, {
                                "id": "849d66ae-c942-2ba7-8739-c5a38a596f33",
                                "arrangementId": "c3d62af-3r27-4ac7-8799-c5a38a596asf2",
                                "payeeName": "Robin Green",
                                "amountDetails": {
                                    "currencyCode": "CAD",
                                    "amount": "10.89"
                                },
                                "checkNumber": "444456789123456789123456789444",
                                "issueDate": "2020-11-01",
                                "voidCheck": false,
                                "issueStatus": "SAVED"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/exceptions/filter",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "exceptions": [{
                                "id": "849d66ae-c942-2ba7-8739-c5a38a596f32",
                                "checkNumber": "111456789123456789123456789111",
                                "accountNumber": "12312312312321213",
                                "issueDate": "2020-11-01",
                                "payeeName": "Robin Green",
                                "amountDetails": {
                                    "currencyCode": "USD",
                                    "amount": "150.54"
                                },
                                "errors": ["Data mismatch", "Duplicate check"],
                                "displayName": "Current account"
                            }, {
                                "id": "849d66ae-c942-2ba7-8739-c5a38a596f44",
                                "checkNumber": "111456789123456789123456789222",
                                "accountNumber": "12312312312324444",
                                "issueDate": "2021-01-05",
                                "payeeName": "Robert Plant",
                                "amountDetails": {
                                    "currencyCode": "USD",
                                    "amount": "120.00"
                                },
                                "errors": ["Already paid"],
                                "displayName": "Saving account"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/counts",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "exceptionCount": 250
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/exceptions/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "exceptionCheck": {
                            "id": "849d66ae-c942-2ba7-8739-c5a38a596f32",
                            "checkNumber": "111456789123456789123456789111",
                            "accountNumber": "12312312312321213",
                            "issueDate": "2020-11-01",
                            "payeeName": "Robin Green",
                            "amountDetails": {
                                "currencyCode": "USD",
                                "amount": "150.54"
                            },
                            "errors": ["Data mismatch", "Duplicate check"],
                            "checkDepositDate": "2020-12-01T10:05:28Z",
                            "exceptionDate": "2020-12-01T11:00:00Z",
                            "displayName": "Payroll account for new hires"
                        },
                        "issuedCheck": {
                            "id": "849d66ae-c942-2ba7-8739-c5a38a596f31",
                            "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                            "payeeName": "Sarah Lee",
                            "amountDetails": {
                                "currencyCode": "USD",
                                "amount": "99.99"
                            },
                            "checkNumber": "111456789123456789123456789111",
                            "issueDate": "2020-11-01",
                            "voidCheck": false,
                            "registrationDate": "2020-12-31T01:30:00.000-05:00",
                            "issueStatus": "SAVED",
                            "displayName": "Payroll account for new hires",
                            "userFullName": "Jimmy Page"
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/settings",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "settings": [{
                                "subscription": "checks-positive-pay-with-payee-match",
                                "systemDecision": "Reject",
                                "additions": {
                                    "costs-to-update": "$1.50 ex. taxes"
                                }
                            }, {
                                "subscription": "checks-positive-pay-without-payee-match",
                                "systemDecision": "Pay"
                            }],
                        "additions": {
                            "settingId": "1"
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/exceptions/{id}",
            method: "PATCH",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/uploads/checks",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "uploadId": "10"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/checks",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "849d66ae-c942-2ba7-8739-c5a38a596f31",
                        "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                        "payeeName": "Sarah Lee",
                        "amountDetails": {
                            "currencyCode": "USD",
                            "amount": "99.99"
                        },
                        "checkNumber": "111456789123456789123456789111",
                        "issueDate": "2020-11-01",
                        "voidCheck": false,
                        "registrationDate": "2020-12-31T01:30:00.000",
                        "issueStatus": "SAVED"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/settings",
            method: "PATCH",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.Direction = Direction;
    exports.POSITIVE_PAY_CHECK_BASE_PATH = POSITIVE_PAY_CHECK_BASE_PATH;
    exports.PositivePayCheckApiModule = PositivePayCheckApiModule;
    exports.PositivePayCheckConfiguration = PositivePayCheckConfiguration;
    exports.PositivePayChecksHttpService = PositivePayChecksHttpService;
    exports.PositivePayChecksHttpServiceDeleteCheckMocksProvider = PositivePayChecksHttpServiceDeleteCheckMocksProvider;
    exports.PositivePayChecksHttpServiceFilterChecksMocksProvider = PositivePayChecksHttpServiceFilterChecksMocksProvider;
    exports.PositivePayChecksHttpServiceFilterExceptionsMocksProvider = PositivePayChecksHttpServiceFilterExceptionsMocksProvider;
    exports.PositivePayChecksHttpServiceGetCountsMocksProvider = PositivePayChecksHttpServiceGetCountsMocksProvider;
    exports.PositivePayChecksHttpServiceGetExceptionDetailsMocksProvider = PositivePayChecksHttpServiceGetExceptionDetailsMocksProvider;
    exports.PositivePayChecksHttpServiceGetSettingsMocksProvider = PositivePayChecksHttpServiceGetSettingsMocksProvider;
    exports.PositivePayChecksHttpServiceMocksProvider = PositivePayChecksHttpServiceMocksProvider;
    exports.PositivePayChecksHttpServiceProcessExceptionDecisionMocksProvider = PositivePayChecksHttpServiceProcessExceptionDecisionMocksProvider;
    exports.PositivePayChecksHttpServiceStartChecksFileUploadMocksProvider = PositivePayChecksHttpServiceStartChecksFileUploadMocksProvider;
    exports.PositivePayChecksHttpServiceSubmitCheckMocksProvider = PositivePayChecksHttpServiceSubmitCheckMocksProvider;
    exports.PositivePayChecksHttpServiceUpdateSettingsMocksProvider = PositivePayChecksHttpServiceUpdateSettingsMocksProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-positive-pay-check-v1-client-ang.umd.js.map
