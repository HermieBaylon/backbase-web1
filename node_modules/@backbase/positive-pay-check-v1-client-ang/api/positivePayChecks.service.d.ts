import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CountResponse } from '../model/models';
import { ExceptionCheckDecisionRequest } from '../model/models';
import { ExceptionCheckDetailsResponse } from '../model/models';
import { ExceptionCheckFilter } from '../model/models';
import { ExceptionCheckList } from '../model/models';
import { IssuedCheck } from '../model/models';
import { IssuedCheckFilter } from '../model/models';
import { IssuedCheckList } from '../model/models';
import { IssuedCheckSubmitRequest } from '../model/models';
import { SettingList } from '../model/models';
import { StartFileUploadRequest } from '../model/models';
import { StartFileUploadResponse } from '../model/models';
import { PositivePayCheckConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteCheckRequestParams {
    ["id"]: string;
}
export interface FilterChecksRequestParams {
    ["body"]: IssuedCheckFilter;
}
export interface FilterExceptionsRequestParams {
    ["body"]: ExceptionCheckFilter;
}
export interface GetExceptionDetailsRequestParams {
    ["id"]: string;
}
export interface ProcessExceptionDecisionRequestParams {
    ["id"]: string;
    ["body"]: ExceptionCheckDecisionRequest;
}
export interface StartChecksFileUploadRequestParams {
    ["body"]: StartFileUploadRequest;
}
export interface SubmitCheckRequestParams {
    ["body"]: IssuedCheckSubmitRequest;
}
export interface UpdateSettingsRequestParams {
    ["body"]: SettingList;
}
export declare class PositivePayChecksHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PositivePayCheckConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PositivePayCheckConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deleteCheck(requestParameters: DeleteCheckRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteCheck(requestParameters: DeleteCheckRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteCheck(requestParameters: DeleteCheckRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteCheckUrl(requestParameters: DeleteCheckRequestParams): string;
    filterChecks(requestParameters: FilterChecksRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<IssuedCheckList>;
    filterChecks(requestParameters: FilterChecksRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<IssuedCheckList>>;
    filterChecks(requestParameters: FilterChecksRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<IssuedCheckList>>;
    filterChecksUrl(requestParameters: FilterChecksRequestParams): string;
    filterExceptions(requestParameters: FilterExceptionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ExceptionCheckList>;
    filterExceptions(requestParameters: FilterExceptionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ExceptionCheckList>>;
    filterExceptions(requestParameters: FilterExceptionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ExceptionCheckList>>;
    filterExceptionsUrl(requestParameters: FilterExceptionsRequestParams): string;
    getCounts(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CountResponse>;
    getCounts(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CountResponse>>;
    getCounts(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CountResponse>>;
    getCountsUrl(): string;
    getExceptionDetails(requestParameters: GetExceptionDetailsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ExceptionCheckDetailsResponse>;
    getExceptionDetails(requestParameters: GetExceptionDetailsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ExceptionCheckDetailsResponse>>;
    getExceptionDetails(requestParameters: GetExceptionDetailsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ExceptionCheckDetailsResponse>>;
    getExceptionDetailsUrl(requestParameters: GetExceptionDetailsRequestParams): string;
    getSettings(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<SettingList>;
    getSettings(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<SettingList>>;
    getSettings(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<SettingList>>;
    getSettingsUrl(): string;
    processExceptionDecision(requestParameters: ProcessExceptionDecisionRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    processExceptionDecision(requestParameters: ProcessExceptionDecisionRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    processExceptionDecision(requestParameters: ProcessExceptionDecisionRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    processExceptionDecisionUrl(requestParameters: ProcessExceptionDecisionRequestParams): string;
    startChecksFileUpload(requestParameters: StartChecksFileUploadRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<StartFileUploadResponse>;
    startChecksFileUpload(requestParameters: StartChecksFileUploadRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<StartFileUploadResponse>>;
    startChecksFileUpload(requestParameters: StartChecksFileUploadRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<StartFileUploadResponse>>;
    startChecksFileUploadUrl(requestParameters: StartChecksFileUploadRequestParams): string;
    submitCheck(requestParameters: SubmitCheckRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<IssuedCheck>;
    submitCheck(requestParameters: SubmitCheckRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<IssuedCheck>>;
    submitCheck(requestParameters: SubmitCheckRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<IssuedCheck>>;
    submitCheckUrl(requestParameters: SubmitCheckRequestParams): string;
    updateSettings(requestParameters: UpdateSettingsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    updateSettings(requestParameters: UpdateSettingsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    updateSettings(requestParameters: UpdateSettingsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    updateSettingsUrl(requestParameters: UpdateSettingsRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<PositivePayChecksHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PositivePayChecksHttpService>;
}
