import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const Direction = {
    ASC: 'ASC',
    DESC: 'DESC'
};

var ExceptionCheckDecisionRequest;
(function (ExceptionCheckDecisionRequest) {
    ExceptionCheckDecisionRequest.ActionTypeEnum = {
        PAY: 'PAY',
        REJECT: 'REJECT'
    };
})(ExceptionCheckDecisionRequest || (ExceptionCheckDecisionRequest = {}));

const POSITIVE_PAY_CHECK_BASE_PATH = new InjectionToken('POSITIVE_PAY_CHECK_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class PositivePayCheckConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module PositivePayCheckConfiguration');

class PositivePayCheckApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('PositivePayCheckApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: PositivePayCheckApiModule,
            providers: [{ provide: PositivePayCheckConfiguration, useFactory: configurationFactory }]
        };
    }
}
PositivePayCheckApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PositivePayCheckApiModule, deps: [{ token: PositivePayCheckApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: PositivePayCheckConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
PositivePayCheckApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PositivePayCheckApiModule });
PositivePayCheckApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PositivePayCheckApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PositivePayCheckApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: PositivePayCheckApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: PositivePayCheckConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class PositivePayChecksHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PositivePayCheckConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteCheck(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteCheck.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v1/checks/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteCheckUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteCheck.');
        }
        return `${this.configuration.basePath}/client-api/v1/checks/${encodeURIComponent(String(_id))}`;
    }
    filterChecks(requestParameters, observe = 'body', reportProgress = false, options) {
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling filterChecks.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/checks/filter`, _body, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    filterChecksUrl(requestParameters) {
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling filterChecks.');
        }
        return `${this.configuration.basePath}/client-api/v1/checks/filter`;
    }
    filterExceptions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling filterExceptions.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/exceptions/filter`, _body, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    filterExceptionsUrl(requestParameters) {
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling filterExceptions.');
        }
        return `${this.configuration.basePath}/client-api/v1/exceptions/filter`;
    }
    getCounts(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/counts`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getCountsUrl() {
        return `${this.configuration.basePath}/client-api/v1/counts`;
    }
    getExceptionDetails(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getExceptionDetails.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/exceptions/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getExceptionDetailsUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getExceptionDetails.');
        }
        return `${this.configuration.basePath}/client-api/v1/exceptions/${encodeURIComponent(String(_id))}`;
    }
    getSettings(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/settings`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getSettingsUrl() {
        return `${this.configuration.basePath}/client-api/v1/settings`;
    }
    processExceptionDecision(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling processExceptionDecision.');
        }
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling processExceptionDecision.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.patch(`${this.configuration.basePath}/client-api/v1/exceptions/${encodeURIComponent(String(_id))}`, _body, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    processExceptionDecisionUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling processExceptionDecision.');
        }
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling processExceptionDecision.');
        }
        return `${this.configuration.basePath}/client-api/v1/exceptions/${encodeURIComponent(String(_id))}`;
    }
    startChecksFileUpload(requestParameters, observe = 'body', reportProgress = false, options) {
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling startChecksFileUpload.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/uploads/checks`, _body, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    startChecksFileUploadUrl(requestParameters) {
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling startChecksFileUpload.');
        }
        return `${this.configuration.basePath}/client-api/v1/uploads/checks`;
    }
    submitCheck(requestParameters, observe = 'body', reportProgress = false, options) {
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling submitCheck.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/checks`, _body, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    submitCheckUrl(requestParameters) {
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling submitCheck.');
        }
        return `${this.configuration.basePath}/client-api/v1/checks`;
    }
    updateSettings(requestParameters, observe = 'body', reportProgress = false, options) {
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateSettings.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.patch(`${this.configuration.basePath}/client-api/v1/settings`, _body, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateSettingsUrl(requestParameters) {
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateSettings.');
        }
        return `${this.configuration.basePath}/client-api/v1/settings`;
    }
}
PositivePayChecksHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PositivePayChecksHttpService, deps: [{ token: i1.HttpClient }, { token: POSITIVE_PAY_CHECK_BASE_PATH, optional: true }, { token: PositivePayCheckConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PositivePayChecksHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PositivePayChecksHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PositivePayChecksHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [POSITIVE_PAY_CHECK_BASE_PATH]
                }] }, { type: PositivePayCheckConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const PositivePayChecksHttpServiceDeleteCheckMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/checks/{id}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PositivePayChecksHttpServiceFilterChecksMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/checks/filter",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "checks": [{
                            "id": "849d66ae-c942-2ba7-8739-c5a38a596f31",
                            "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                            "payeeName": "Sarah Lee",
                            "amountDetails": {
                                "currencyCode": "USD",
                                "amount": "99.99"
                            },
                            "checkNumber": "111456789123456789123456789111",
                            "issueDate": "2020-11-01",
                            "voidCheck": false,
                            "registrationDate": "2005-10-21T11:50:23.000-05:00",
                            "issueStatus": "SUBMITTED"
                        }, {
                            "id": "849d66ae-c942-2ba7-8739-c5a38a596f32",
                            "arrangementId": "aa9d66ae-b927-4ac7-8799-c5a38a53ed24",
                            "payeeName": " ",
                            "amountDetails": {
                                "currencyCode": "USD",
                                "amount": "150.54"
                            },
                            "checkNumber": "333456789123456789123456789333",
                            "issueDate": "2020-11-01",
                            "voidCheck": true,
                            "registrationDate": "2009-09-20T15:42:20.000-05:00",
                            "issueStatus": "SUBMITTED"
                        }, {
                            "id": "849d66ae-c942-2ba7-8739-c5a38a596f33",
                            "arrangementId": "c3d62af-3r27-4ac7-8799-c5a38a596asf2",
                            "payeeName": "Robin Green",
                            "amountDetails": {
                                "currencyCode": "CAD",
                                "amount": "10.89"
                            },
                            "checkNumber": "444456789123456789123456789444",
                            "issueDate": "2020-11-01",
                            "voidCheck": false,
                            "issueStatus": "SAVED"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PositivePayChecksHttpServiceFilterExceptionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/exceptions/filter",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "exceptions": [{
                            "id": "849d66ae-c942-2ba7-8739-c5a38a596f32",
                            "checkNumber": "111456789123456789123456789111",
                            "accountNumber": "12312312312321213",
                            "issueDate": "2020-11-01",
                            "payeeName": "Robin Green",
                            "amountDetails": {
                                "currencyCode": "USD",
                                "amount": "150.54"
                            },
                            "errors": ["Data mismatch", "Duplicate check"],
                            "displayName": "Current account"
                        }, {
                            "id": "849d66ae-c942-2ba7-8739-c5a38a596f44",
                            "checkNumber": "111456789123456789123456789222",
                            "accountNumber": "12312312312324444",
                            "issueDate": "2021-01-05",
                            "payeeName": "Robert Plant",
                            "amountDetails": {
                                "currencyCode": "USD",
                                "amount": "120.00"
                            },
                            "errors": ["Already paid"],
                            "displayName": "Saving account"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PositivePayChecksHttpServiceGetCountsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/counts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "exceptionCount": 250
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PositivePayChecksHttpServiceGetExceptionDetailsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/exceptions/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "exceptionCheck": {
                        "id": "849d66ae-c942-2ba7-8739-c5a38a596f32",
                        "checkNumber": "111456789123456789123456789111",
                        "accountNumber": "12312312312321213",
                        "issueDate": "2020-11-01",
                        "payeeName": "Robin Green",
                        "amountDetails": {
                            "currencyCode": "USD",
                            "amount": "150.54"
                        },
                        "errors": ["Data mismatch", "Duplicate check"],
                        "checkDepositDate": "2020-12-01T10:05:28Z",
                        "exceptionDate": "2020-12-01T11:00:00Z",
                        "displayName": "Payroll account for new hires"
                    },
                    "issuedCheck": {
                        "id": "849d66ae-c942-2ba7-8739-c5a38a596f31",
                        "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                        "payeeName": "Sarah Lee",
                        "amountDetails": {
                            "currencyCode": "USD",
                            "amount": "99.99"
                        },
                        "checkNumber": "111456789123456789123456789111",
                        "issueDate": "2020-11-01",
                        "voidCheck": false,
                        "registrationDate": "2020-12-31T01:30:00.000-05:00",
                        "issueStatus": "SAVED",
                        "displayName": "Payroll account for new hires",
                        "userFullName": "Jimmy Page"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PositivePayChecksHttpServiceGetSettingsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/settings",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "settings": [{
                            "subscription": "checks-positive-pay-with-payee-match",
                            "systemDecision": "Reject",
                            "additions": {
                                "costs-to-update": "$1.50 ex. taxes"
                            }
                        }, {
                            "subscription": "checks-positive-pay-without-payee-match",
                            "systemDecision": "Pay"
                        }],
                    "additions": {
                        "settingId": "1"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PositivePayChecksHttpServiceProcessExceptionDecisionMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/exceptions/{id}",
        method: "PATCH",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PositivePayChecksHttpServiceStartChecksFileUploadMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/uploads/checks",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "uploadId": "10"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PositivePayChecksHttpServiceSubmitCheckMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/checks",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": "849d66ae-c942-2ba7-8739-c5a38a596f31",
                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                    "payeeName": "Sarah Lee",
                    "amountDetails": {
                        "currencyCode": "USD",
                        "amount": "99.99"
                    },
                    "checkNumber": "111456789123456789123456789111",
                    "issueDate": "2020-11-01",
                    "voidCheck": false,
                    "registrationDate": "2020-12-31T01:30:00.000",
                    "issueStatus": "SAVED"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PositivePayChecksHttpServiceUpdateSettingsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/settings",
        method: "PATCH",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PositivePayChecksHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/checks/{id}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/checks/filter",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "checks": [{
                            "id": "849d66ae-c942-2ba7-8739-c5a38a596f31",
                            "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                            "payeeName": "Sarah Lee",
                            "amountDetails": {
                                "currencyCode": "USD",
                                "amount": "99.99"
                            },
                            "checkNumber": "111456789123456789123456789111",
                            "issueDate": "2020-11-01",
                            "voidCheck": false,
                            "registrationDate": "2005-10-21T11:50:23.000-05:00",
                            "issueStatus": "SUBMITTED"
                        }, {
                            "id": "849d66ae-c942-2ba7-8739-c5a38a596f32",
                            "arrangementId": "aa9d66ae-b927-4ac7-8799-c5a38a53ed24",
                            "payeeName": " ",
                            "amountDetails": {
                                "currencyCode": "USD",
                                "amount": "150.54"
                            },
                            "checkNumber": "333456789123456789123456789333",
                            "issueDate": "2020-11-01",
                            "voidCheck": true,
                            "registrationDate": "2009-09-20T15:42:20.000-05:00",
                            "issueStatus": "SUBMITTED"
                        }, {
                            "id": "849d66ae-c942-2ba7-8739-c5a38a596f33",
                            "arrangementId": "c3d62af-3r27-4ac7-8799-c5a38a596asf2",
                            "payeeName": "Robin Green",
                            "amountDetails": {
                                "currencyCode": "CAD",
                                "amount": "10.89"
                            },
                            "checkNumber": "444456789123456789123456789444",
                            "issueDate": "2020-11-01",
                            "voidCheck": false,
                            "issueStatus": "SAVED"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/exceptions/filter",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "exceptions": [{
                            "id": "849d66ae-c942-2ba7-8739-c5a38a596f32",
                            "checkNumber": "111456789123456789123456789111",
                            "accountNumber": "12312312312321213",
                            "issueDate": "2020-11-01",
                            "payeeName": "Robin Green",
                            "amountDetails": {
                                "currencyCode": "USD",
                                "amount": "150.54"
                            },
                            "errors": ["Data mismatch", "Duplicate check"],
                            "displayName": "Current account"
                        }, {
                            "id": "849d66ae-c942-2ba7-8739-c5a38a596f44",
                            "checkNumber": "111456789123456789123456789222",
                            "accountNumber": "12312312312324444",
                            "issueDate": "2021-01-05",
                            "payeeName": "Robert Plant",
                            "amountDetails": {
                                "currencyCode": "USD",
                                "amount": "120.00"
                            },
                            "errors": ["Already paid"],
                            "displayName": "Saving account"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/counts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "exceptionCount": 250
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/exceptions/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "exceptionCheck": {
                        "id": "849d66ae-c942-2ba7-8739-c5a38a596f32",
                        "checkNumber": "111456789123456789123456789111",
                        "accountNumber": "12312312312321213",
                        "issueDate": "2020-11-01",
                        "payeeName": "Robin Green",
                        "amountDetails": {
                            "currencyCode": "USD",
                            "amount": "150.54"
                        },
                        "errors": ["Data mismatch", "Duplicate check"],
                        "checkDepositDate": "2020-12-01T10:05:28Z",
                        "exceptionDate": "2020-12-01T11:00:00Z",
                        "displayName": "Payroll account for new hires"
                    },
                    "issuedCheck": {
                        "id": "849d66ae-c942-2ba7-8739-c5a38a596f31",
                        "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                        "payeeName": "Sarah Lee",
                        "amountDetails": {
                            "currencyCode": "USD",
                            "amount": "99.99"
                        },
                        "checkNumber": "111456789123456789123456789111",
                        "issueDate": "2020-11-01",
                        "voidCheck": false,
                        "registrationDate": "2020-12-31T01:30:00.000-05:00",
                        "issueStatus": "SAVED",
                        "displayName": "Payroll account for new hires",
                        "userFullName": "Jimmy Page"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/settings",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "settings": [{
                            "subscription": "checks-positive-pay-with-payee-match",
                            "systemDecision": "Reject",
                            "additions": {
                                "costs-to-update": "$1.50 ex. taxes"
                            }
                        }, {
                            "subscription": "checks-positive-pay-without-payee-match",
                            "systemDecision": "Pay"
                        }],
                    "additions": {
                        "settingId": "1"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/exceptions/{id}",
        method: "PATCH",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/uploads/checks",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "uploadId": "10"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/checks",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": "849d66ae-c942-2ba7-8739-c5a38a596f31",
                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                    "payeeName": "Sarah Lee",
                    "amountDetails": {
                        "currencyCode": "USD",
                        "amount": "99.99"
                    },
                    "checkNumber": "111456789123456789123456789111",
                    "issueDate": "2020-11-01",
                    "voidCheck": false,
                    "registrationDate": "2020-12-31T01:30:00.000",
                    "issueStatus": "SAVED"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/settings",
        method: "PATCH",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

export { COLLECTION_FORMATS, CONFIG_TOKEN, Direction, ExceptionCheckDecisionRequest, POSITIVE_PAY_CHECK_BASE_PATH, PositivePayCheckApiModule, PositivePayCheckConfiguration, PositivePayChecksHttpService, PositivePayChecksHttpServiceDeleteCheckMocksProvider, PositivePayChecksHttpServiceFilterChecksMocksProvider, PositivePayChecksHttpServiceFilterExceptionsMocksProvider, PositivePayChecksHttpServiceGetCountsMocksProvider, PositivePayChecksHttpServiceGetExceptionDetailsMocksProvider, PositivePayChecksHttpServiceGetSettingsMocksProvider, PositivePayChecksHttpServiceMocksProvider, PositivePayChecksHttpServiceProcessExceptionDecisionMocksProvider, PositivePayChecksHttpServiceStartChecksFileUploadMocksProvider, PositivePayChecksHttpServiceSubmitCheckMocksProvider, PositivePayChecksHttpServiceUpdateSettingsMocksProvider };
//# sourceMappingURL=backbase-positive-pay-check-v1-client-ang.js.map
