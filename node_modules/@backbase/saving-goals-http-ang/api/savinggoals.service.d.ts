import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { IdPutRequestBody } from '../model/models';
import { IdstandingorderPostRequestBody } from '../model/models';
import { SavingGoalsGetResponseBody } from '../model/models';
import { SavingGoalsPostRequestBody } from '../model/models';
import { SavingGoalsPostResponseBody } from '../model/models';
import { SavingGoalsConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteIdRequestParams {
    ["id"]: string;
}
export interface GetIdRequestParams {
    ["id"]: string;
}
export interface GetSavingGoalsRequestParams {
    ["arrangementId"]: string;
}
export interface PostIdstandingorderRequestParams {
    ["id"]: string;
    ["idstandingorderPostRequestBody"]: IdstandingorderPostRequestBody;
}
export interface PostSavingGoalsRequestParams {
    ["savingGoalsPostRequestBody"]: SavingGoalsPostRequestBody;
}
export interface PutIdRequestParams {
    ["id"]: string;
    ["idPutRequestBody"]: IdPutRequestBody;
}
export declare class SavinggoalsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: SavingGoalsConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: SavingGoalsConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deleteId(requestParameters: DeleteIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteId(requestParameters: DeleteIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteId(requestParameters: DeleteIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteIdUrl(requestParameters: DeleteIdRequestParams): string;
    getId(requestParameters: GetIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<SavingGoalsGetResponseBody>;
    getId(requestParameters: GetIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<SavingGoalsGetResponseBody>>;
    getId(requestParameters: GetIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<SavingGoalsGetResponseBody>>;
    getIdUrl(requestParameters: GetIdRequestParams): string;
    getSavingGoals(requestParameters: GetSavingGoalsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<SavingGoalsGetResponseBody>>;
    getSavingGoals(requestParameters: GetSavingGoalsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<SavingGoalsGetResponseBody>>>;
    getSavingGoals(requestParameters: GetSavingGoalsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<SavingGoalsGetResponseBody>>>;
    getSavingGoalsUrl(requestParameters: GetSavingGoalsRequestParams): string;
    postIdstandingorder(requestParameters: PostIdstandingorderRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    postIdstandingorder(requestParameters: PostIdstandingorderRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    postIdstandingorder(requestParameters: PostIdstandingorderRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    postIdstandingorderUrl(requestParameters: PostIdstandingorderRequestParams): string;
    postSavingGoals(requestParameters: PostSavingGoalsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<SavingGoalsPostResponseBody>;
    postSavingGoals(requestParameters: PostSavingGoalsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<SavingGoalsPostResponseBody>>;
    postSavingGoals(requestParameters: PostSavingGoalsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<SavingGoalsPostResponseBody>>;
    postSavingGoalsUrl(requestParameters: PostSavingGoalsRequestParams): string;
    putId(requestParameters: PutIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    putId(requestParameters: PutIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    putId(requestParameters: PutIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    putIdUrl(requestParameters: PutIdRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<SavinggoalsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<SavinggoalsHttpService>;
}
