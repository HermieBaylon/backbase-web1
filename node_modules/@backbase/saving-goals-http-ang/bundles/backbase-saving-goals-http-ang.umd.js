(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/saving-goals-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["saving-goals-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    exports.IdstandingorderPostRequestBody = void 0;
    (function (IdstandingorderPostRequestBody) {
        IdstandingorderPostRequestBody.FrequencyEnum = {
            MONTHLY: 'MONTHLY',
            WEEKLY: 'WEEKLY',
            DAILY: 'DAILY'
        };
    })(exports.IdstandingorderPostRequestBody || (exports.IdstandingorderPostRequestBody = {}));

    var SAVING_GOALS_BASE_PATH = new i0.InjectionToken('SAVING_GOALS_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var SavingGoalsConfiguration = /** @class */ (function () {
        function SavingGoalsConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        SavingGoalsConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        SavingGoalsConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        SavingGoalsConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        SavingGoalsConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return SavingGoalsConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module SavingGoalsConfiguration');

    var SavingGoalsApiModule = /** @class */ (function () {
        function SavingGoalsApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('SavingGoalsApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        SavingGoalsApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: SavingGoalsApiModule,
                providers: [{ provide: SavingGoalsConfiguration, useFactory: configurationFactory }]
            };
        };
        return SavingGoalsApiModule;
    }());
    SavingGoalsApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SavingGoalsApiModule, deps: [{ token: SavingGoalsApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: SavingGoalsConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SavingGoalsApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SavingGoalsApiModule });
    SavingGoalsApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SavingGoalsApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SavingGoalsApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: SavingGoalsApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: SavingGoalsConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var SavinggoalsHttpService = /** @class */ (function () {
        function SavinggoalsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new SavingGoalsConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        SavinggoalsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        SavinggoalsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        SavinggoalsHttpService.prototype.deleteId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/savinggoals/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        SavinggoalsHttpService.prototype.deleteIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteId.');
            }
            return this.configuration.basePath + "/client-api/v2/savinggoals/" + encodeURIComponent(String(_id));
        };
        SavinggoalsHttpService.prototype.getId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/savinggoals/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        SavinggoalsHttpService.prototype.getIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getId.');
            }
            return this.configuration.basePath + "/client-api/v2/savinggoals/" + encodeURIComponent(String(_id));
        };
        SavinggoalsHttpService.prototype.getSavingGoals = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _arrangementId = requestParameters["arrangementId"];
            if (_arrangementId === null || _arrangementId === undefined) {
                throw new Error('Required parameter arrangementId was null or undefined when calling getSavingGoals.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_arrangementId !== undefined && _arrangementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _arrangementId, 'arrangementId');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/savinggoals", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        SavinggoalsHttpService.prototype.getSavingGoalsUrl = function (requestParameters) {
            var _arrangementId = requestParameters["arrangementId"];
            if (_arrangementId === null || _arrangementId === undefined) {
                throw new Error('Required parameter arrangementId was null or undefined when calling getSavingGoals.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_arrangementId !== undefined && _arrangementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _arrangementId, 'arrangementId');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/savinggoals" + (queryString ? "?" + queryString : '');
        };
        SavinggoalsHttpService.prototype.postIdstandingorder = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling postIdstandingorder.');
            }
            var _idstandingorderPostRequestBody = requestParameters["idstandingorderPostRequestBody"];
            if (_idstandingorderPostRequestBody === null || _idstandingorderPostRequestBody === undefined) {
                throw new Error('Required parameter idstandingorderPostRequestBody was null or undefined when calling postIdstandingorder.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/savinggoals/" + encodeURIComponent(String(_id)) + "/standing-order", _idstandingorderPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        SavinggoalsHttpService.prototype.postIdstandingorderUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling postIdstandingorder.');
            }
            var _idstandingorderPostRequestBody = requestParameters["idstandingorderPostRequestBody"];
            if (_idstandingorderPostRequestBody === null || _idstandingorderPostRequestBody === undefined) {
                throw new Error('Required parameter idstandingorderPostRequestBody was null or undefined when calling postIdstandingorder.');
            }
            return this.configuration.basePath + "/client-api/v2/savinggoals/" + encodeURIComponent(String(_id)) + "/standing-order";
        };
        SavinggoalsHttpService.prototype.postSavingGoals = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _savingGoalsPostRequestBody = requestParameters["savingGoalsPostRequestBody"];
            if (_savingGoalsPostRequestBody === null || _savingGoalsPostRequestBody === undefined) {
                throw new Error('Required parameter savingGoalsPostRequestBody was null or undefined when calling postSavingGoals.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/savinggoals", _savingGoalsPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        SavinggoalsHttpService.prototype.postSavingGoalsUrl = function (requestParameters) {
            var _savingGoalsPostRequestBody = requestParameters["savingGoalsPostRequestBody"];
            if (_savingGoalsPostRequestBody === null || _savingGoalsPostRequestBody === undefined) {
                throw new Error('Required parameter savingGoalsPostRequestBody was null or undefined when calling postSavingGoals.');
            }
            return this.configuration.basePath + "/client-api/v2/savinggoals";
        };
        SavinggoalsHttpService.prototype.putId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling putId.');
            }
            var _idPutRequestBody = requestParameters["idPutRequestBody"];
            if (_idPutRequestBody === null || _idPutRequestBody === undefined) {
                throw new Error('Required parameter idPutRequestBody was null or undefined when calling putId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/savinggoals/" + encodeURIComponent(String(_id)), _idPutRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        SavinggoalsHttpService.prototype.putIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling putId.');
            }
            var _idPutRequestBody = requestParameters["idPutRequestBody"];
            if (_idPutRequestBody === null || _idPutRequestBody === undefined) {
                throw new Error('Required parameter idPutRequestBody was null or undefined when calling putId.');
            }
            return this.configuration.basePath + "/client-api/v2/savinggoals/" + encodeURIComponent(String(_id));
        };
        return SavinggoalsHttpService;
    }());
    SavinggoalsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SavinggoalsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: SAVING_GOALS_BASE_PATH, optional: true }, { token: SavingGoalsConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    SavinggoalsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SavinggoalsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SavinggoalsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [SAVING_GOALS_BASE_PATH]
                        }] }, { type: SavingGoalsConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var SavinggoalsHttpServiceDeleteIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/savinggoals/{id}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var SavinggoalsHttpServiceGetIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/savinggoals/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "1955e686-d31e-4216-b3dd-5d66161d536b",
                        "goalName": "Holiday to Hawaii",
                        "goalAmount": {
                            "amount": "2000.00",
                            "currencyCode": "EUR"
                        },
                        "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                        "amountProgress": {
                            "amount": "550.00",
                            "currencyCode": "EUR"
                        },
                        "progressPercentage": 27.5,
                        "performancePercentage": 27.5,
                        "timePercentage": 50.5,
                        "amountRemaining": {
                            "amount": "1450.00",
                            "currencyCode": "EUR"
                        },
                        "startDate": "2017-02-28",
                        "endDate": "2019-02-28",
                        "initialAmount": {
                            "amount": "10.00",
                            "currencyCode": "EUR"
                        },
                        "recipeId": "65b5c1b7-17e0-435f-a828-e2f6afec26a9"
                    }
                },
                {
                    status: 200,
                    body: {
                        "arrangementId": "arrangementId",
                        "goalAmount": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        },
                        "additions": {
                            "key": "additions"
                        },
                        "endDate": "2000-01-23",
                        "recipeId": "recipeId",
                        "goalName": "goalName",
                        "amountRemaining": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        },
                        "initialAmount": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        },
                        "progressPercentage": 0.8008281904610115,
                        "performancePercentage": 6.027456183070403,
                        "amountProgress": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        },
                        "id": "id",
                        "timePercentage": 1.4658129805029452,
                        "startDate": "2000-01-23"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var SavinggoalsHttpServiceGetSavingGoalsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/savinggoals",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "1955e686-d31e-4216-b3dd-5d66161d536b",
                            "goalName": "Holiday to Hawaii",
                            "goalAmount": {
                                "amount": "2000.00",
                                "currencyCode": "EUR"
                            },
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "amountProgress": {
                                "amount": "550.00",
                                "currencyCode": "EUR"
                            },
                            "progressPercentage": 27.5,
                            "performancePercentage": 27.5,
                            "timePercentage": 50.5,
                            "amountRemaining": {
                                "amount": "1450.00",
                                "currencyCode": "EUR"
                            },
                            "startDate": "2017-02-28",
                            "endDate": "2019-02-28",
                            "initialAmount": {
                                "amount": "10.00",
                                "currencyCode": "EUR"
                            },
                            "recipeId": "65b5c1b7-17e0-435f-a828-e2f6afec26a9"
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var SavinggoalsHttpServicePostIdstandingorderMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/savinggoals/{id}/standing-order",
            method: "POST",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var SavinggoalsHttpServicePostSavingGoalsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/savinggoals",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "0955e686-d31e-4216-b3dd-5d77161d536d"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var SavinggoalsHttpServicePutIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/savinggoals/{id}",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var SavinggoalsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/savinggoals/{id}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/savinggoals/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "1955e686-d31e-4216-b3dd-5d66161d536b",
                        "goalName": "Holiday to Hawaii",
                        "goalAmount": {
                            "amount": "2000.00",
                            "currencyCode": "EUR"
                        },
                        "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                        "amountProgress": {
                            "amount": "550.00",
                            "currencyCode": "EUR"
                        },
                        "progressPercentage": 27.5,
                        "performancePercentage": 27.5,
                        "timePercentage": 50.5,
                        "amountRemaining": {
                            "amount": "1450.00",
                            "currencyCode": "EUR"
                        },
                        "startDate": "2017-02-28",
                        "endDate": "2019-02-28",
                        "initialAmount": {
                            "amount": "10.00",
                            "currencyCode": "EUR"
                        },
                        "recipeId": "65b5c1b7-17e0-435f-a828-e2f6afec26a9"
                    }
                },
                {
                    status: 200,
                    body: {
                        "arrangementId": "arrangementId",
                        "goalAmount": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        },
                        "additions": {
                            "key": "additions"
                        },
                        "endDate": "2000-01-23",
                        "recipeId": "recipeId",
                        "goalName": "goalName",
                        "amountRemaining": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        },
                        "initialAmount": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        },
                        "progressPercentage": 0.8008281904610115,
                        "performancePercentage": 6.027456183070403,
                        "amountProgress": {
                            "amount": "amount",
                            "additions": {
                                "key": "additions"
                            },
                            "currencyCode": "currencyCode"
                        },
                        "id": "id",
                        "timePercentage": 1.4658129805029452,
                        "startDate": "2000-01-23"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/savinggoals",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "1955e686-d31e-4216-b3dd-5d66161d536b",
                            "goalName": "Holiday to Hawaii",
                            "goalAmount": {
                                "amount": "2000.00",
                                "currencyCode": "EUR"
                            },
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "amountProgress": {
                                "amount": "550.00",
                                "currencyCode": "EUR"
                            },
                            "progressPercentage": 27.5,
                            "performancePercentage": 27.5,
                            "timePercentage": 50.5,
                            "amountRemaining": {
                                "amount": "1450.00",
                                "currencyCode": "EUR"
                            },
                            "startDate": "2017-02-28",
                            "endDate": "2019-02-28",
                            "initialAmount": {
                                "amount": "10.00",
                                "currencyCode": "EUR"
                            },
                            "recipeId": "65b5c1b7-17e0-435f-a828-e2f6afec26a9"
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/savinggoals/{id}/standing-order",
            method: "POST",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/savinggoals",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "0955e686-d31e-4216-b3dd-5d77161d536d"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/savinggoals/{id}",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.SAVING_GOALS_BASE_PATH = SAVING_GOALS_BASE_PATH;
    exports.SavingGoalsApiModule = SavingGoalsApiModule;
    exports.SavingGoalsConfiguration = SavingGoalsConfiguration;
    exports.SavinggoalsHttpService = SavinggoalsHttpService;
    exports.SavinggoalsHttpServiceDeleteIdMocksProvider = SavinggoalsHttpServiceDeleteIdMocksProvider;
    exports.SavinggoalsHttpServiceGetIdMocksProvider = SavinggoalsHttpServiceGetIdMocksProvider;
    exports.SavinggoalsHttpServiceGetSavingGoalsMocksProvider = SavinggoalsHttpServiceGetSavingGoalsMocksProvider;
    exports.SavinggoalsHttpServiceMocksProvider = SavinggoalsHttpServiceMocksProvider;
    exports.SavinggoalsHttpServicePostIdstandingorderMocksProvider = SavinggoalsHttpServicePostIdstandingorderMocksProvider;
    exports.SavinggoalsHttpServicePostSavingGoalsMocksProvider = SavinggoalsHttpServicePostSavingGoalsMocksProvider;
    exports.SavinggoalsHttpServicePutIdMocksProvider = SavinggoalsHttpServicePutIdMocksProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-saving-goals-http-ang.umd.js.map
