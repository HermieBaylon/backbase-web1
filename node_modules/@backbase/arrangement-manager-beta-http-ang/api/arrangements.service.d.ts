import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AccountArrangementItem } from '../model/models';
import { AccountLinkedArrangementItem } from '../model/models';
import { AccountLinkedArrangementItems } from '../model/models';
import { AccountUserPreferences } from '../model/models';
import { ChildArrangementResult } from '../model/models';
import { MaskableAttribute } from '../model/models';
import { ArrangementManagerConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetArrangementByIdRequestParams {
    ["arrangementId"]: string;
    ["contentLanguage"]?: string;
    ["maskIndicator"]?: boolean;
}
export interface GetArrangementChildrenRequestParams {
    ["arrangementId"]: string;
    ["from"]?: number;
    ["size"]?: number;
}
export interface GetLinkedRequestParams {
    ["legalEntityId"]: string;
    ["from"]?: number;
    ["size"]?: number;
}
export interface GetUserPreferencesRequestParams {
    ["arrangementId"]: string;
}
export interface LinkExternalLegalEntityRequestParams {
    ["externalLegalEntityId"]: string;
    ["accountLinkedArrangementItem"]: AccountLinkedArrangementItem;
}
export interface UnlinkExternalLegalEntityRequestParams {
    ["externalLegalEntityId"]: string;
    ["externalArrangementId"]: string;
}
export interface UnmaskedAttributeRequestParams {
    ["arrangementId"]: string;
    ["attributeName"]: MaskableAttribute;
}
export interface UpdateUserPreferencesRequestParams {
    ["accountUserPreferences"]: AccountUserPreferences;
}
export declare class ArrangementsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: ArrangementManagerConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: ArrangementManagerConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getArrangementById(requestParameters: GetArrangementByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<AccountArrangementItem>;
    getArrangementById(requestParameters: GetArrangementByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<AccountArrangementItem>>;
    getArrangementById(requestParameters: GetArrangementByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<AccountArrangementItem>>;
    getArrangementByIdUrl(requestParameters: GetArrangementByIdRequestParams): string;
    getArrangementChildren(requestParameters: GetArrangementChildrenRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ChildArrangementResult>>;
    getArrangementChildren(requestParameters: GetArrangementChildrenRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ChildArrangementResult>>>;
    getArrangementChildren(requestParameters: GetArrangementChildrenRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ChildArrangementResult>>>;
    getArrangementChildrenUrl(requestParameters: GetArrangementChildrenRequestParams): string;
    getLinked(requestParameters: GetLinkedRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<AccountLinkedArrangementItems>;
    getLinked(requestParameters: GetLinkedRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<AccountLinkedArrangementItems>>;
    getLinked(requestParameters: GetLinkedRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<AccountLinkedArrangementItems>>;
    getLinkedUrl(requestParameters: GetLinkedRequestParams): string;
    getUserPreferences(requestParameters: GetUserPreferencesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<AccountUserPreferences>;
    getUserPreferences(requestParameters: GetUserPreferencesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<AccountUserPreferences>>;
    getUserPreferences(requestParameters: GetUserPreferencesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<AccountUserPreferences>>;
    getUserPreferencesUrl(requestParameters: GetUserPreferencesRequestParams): string;
    linkExternalLegalEntity(requestParameters: LinkExternalLegalEntityRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    linkExternalLegalEntity(requestParameters: LinkExternalLegalEntityRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    linkExternalLegalEntity(requestParameters: LinkExternalLegalEntityRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    linkExternalLegalEntityUrl(requestParameters: LinkExternalLegalEntityRequestParams): string;
    unlinkExternalLegalEntity(requestParameters: UnlinkExternalLegalEntityRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    unlinkExternalLegalEntity(requestParameters: UnlinkExternalLegalEntityRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    unlinkExternalLegalEntity(requestParameters: UnlinkExternalLegalEntityRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    unlinkExternalLegalEntityUrl(requestParameters: UnlinkExternalLegalEntityRequestParams): string;
    unmaskedAttribute(requestParameters: UnmaskedAttributeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/plain';
    }): Observable<string>;
    unmaskedAttribute(requestParameters: UnmaskedAttributeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/plain';
    }): Observable<HttpResponse<string>>;
    unmaskedAttribute(requestParameters: UnmaskedAttributeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/plain';
    }): Observable<HttpEvent<string>>;
    unmaskedAttribute(requestParameters: UnmaskedAttributeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<string>;
    unmaskedAttribute(requestParameters: UnmaskedAttributeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<string>>;
    unmaskedAttribute(requestParameters: UnmaskedAttributeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<string>>;
    unmaskedAttributeUrl(requestParameters: UnmaskedAttributeRequestParams): string;
    updateUserPreferences(requestParameters: UpdateUserPreferencesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    updateUserPreferences(requestParameters: UpdateUserPreferencesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    updateUserPreferences(requestParameters: UpdateUserPreferencesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    updateUserPreferencesUrl(requestParameters: UpdateUserPreferencesRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<ArrangementsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ArrangementsHttpService>;
}
