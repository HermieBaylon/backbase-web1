import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { OrderByField } from '../model/models';
import { ProductSummary } from '../model/models';
import { ProductSummaryFilterParams } from '../model/models';
import { ProductSummaryFilterResult } from '../model/models';
import { ProductSummaryItem } from '../model/models';
import { SortDirection } from '../model/models';
import { ArrangementManagerConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetArrangementsByBusinessFunctionRequestParams {
    ["businessFunction"]: string;
    ["resourceName"]: string;
    ["privilege"]: string;
    ["contentLanguage"]?: string;
    ["withLatestBalances"]?: boolean;
    ["maskIndicator"]?: boolean;
    ["debitAccount"]?: boolean;
    ["creditAccount"]?: boolean;
    ["externalTransferAllowed"]?: boolean;
    ["productKindName"]?: string;
    ["legalEntityIds"]?: Array<string>;
    ["sourceId"]?: string;
    ["favorite"]?: boolean;
    ["searchTerm"]?: string;
    ["customOrder"]?: boolean;
    ["favoriteFirst"]?: boolean;
    ["subscriptions"]?: Array<string>;
    ["from"]?: number;
    ["size"]?: number;
    ["cursor"]?: string;
    ["orderBy"]?: Array<OrderByField>;
    ["direction"]?: SortDirection;
    ["ignoredProductKindNames"]?: Array<string>;
    ["productKindNames"]?: Array<string>;
}
export interface GetProductSummaryRequestParams {
    ["contentLanguage"]?: string;
    ["debitAccount"]?: boolean;
    ["creditAccount"]?: boolean;
    ["maskIndicator"]?: boolean;
    ["ignoredProductKindNames"]?: Array<string>;
}
export interface GetProductSummaryEntitlementsByLegalEntityIdRequestParams {
    ["legalEntityIds"]: Array<string>;
    ["arrangementIds"]?: Array<string>;
    ["ignoredArrangementIds"]?: Array<string>;
    ["searchTerm"]?: string;
    ["from"]?: number;
    ["size"]?: number;
    ["cursor"]?: string;
    ["orderBy"]?: Array<OrderByField>;
    ["direction"]?: SortDirection;
}
export interface PostFilterProductSummariesRequestParams {
    ["productSummaryFilterParams"]: ProductSummaryFilterParams;
}
export declare class ProductSummaryHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: ArrangementManagerConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: ArrangementManagerConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getArrangementsByBusinessFunction(requestParameters: GetArrangementsByBusinessFunctionRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ProductSummaryItem>>;
    getArrangementsByBusinessFunction(requestParameters: GetArrangementsByBusinessFunctionRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ProductSummaryItem>>>;
    getArrangementsByBusinessFunction(requestParameters: GetArrangementsByBusinessFunctionRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ProductSummaryItem>>>;
    getArrangementsByBusinessFunctionUrl(requestParameters: GetArrangementsByBusinessFunctionRequestParams): string;
    getProductSummary(requestParameters: GetProductSummaryRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ProductSummary>;
    getProductSummary(requestParameters: GetProductSummaryRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ProductSummary>>;
    getProductSummary(requestParameters: GetProductSummaryRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ProductSummary>>;
    getProductSummaryUrl(requestParameters: GetProductSummaryRequestParams): string;
    getProductSummaryEntitlementsByLegalEntityId(requestParameters: GetProductSummaryEntitlementsByLegalEntityIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ProductSummaryItem>>;
    getProductSummaryEntitlementsByLegalEntityId(requestParameters: GetProductSummaryEntitlementsByLegalEntityIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ProductSummaryItem>>>;
    getProductSummaryEntitlementsByLegalEntityId(requestParameters: GetProductSummaryEntitlementsByLegalEntityIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ProductSummaryItem>>>;
    getProductSummaryEntitlementsByLegalEntityIdUrl(requestParameters: GetProductSummaryEntitlementsByLegalEntityIdRequestParams): string;
    postFilterProductSummaries(requestParameters: PostFilterProductSummariesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ProductSummaryFilterResult>;
    postFilterProductSummaries(requestParameters: PostFilterProductSummariesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ProductSummaryFilterResult>>;
    postFilterProductSummaries(requestParameters: PostFilterProductSummariesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ProductSummaryFilterResult>>;
    postFilterProductSummariesUrl(requestParameters: PostFilterProductSummariesRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ProductSummaryHttpService>;
}
