import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AggregatedBalance } from '../model/models';
import { AggregatedBalances } from '../model/models';
import { ArrangementManagerConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetAggregationsRequestParams {
    ["contentLanguage"]?: string;
    ["productKindIds"]?: Array<number>;
    ["externalProductKindIds"]?: Array<string>;
    ["groupedBy"]?: 'PRODUCT_KIND';
    ["includeTotals"]?: boolean;
}
export declare class BalancesHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: ArrangementManagerConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: ArrangementManagerConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getAggregations(requestParameters: GetAggregationsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<AggregatedBalances>>;
    getAggregations(requestParameters: GetAggregationsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<AggregatedBalances>>>;
    getAggregations(requestParameters: GetAggregationsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<AggregatedBalances>>>;
    getAggregationsUrl(requestParameters: GetAggregationsRequestParams): string;
    getFavoriteCurrencies(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<AggregatedBalance>>;
    getFavoriteCurrencies(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<AggregatedBalance>>>;
    getFavoriteCurrencies(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<AggregatedBalance>>>;
    getFavoriteCurrenciesUrl(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<BalancesHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<BalancesHttpService>;
}
