import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { ARRANGEMENT_MANAGER_BASE_PATH } from '../variables';
import { ArrangementManagerConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class ProductSummaryHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ArrangementManagerConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getArrangementsByBusinessFunction(requestParameters, observe = 'body', reportProgress = false, options) {
        const _businessFunction = requestParameters["businessFunction"];
        if (_businessFunction === null || _businessFunction === undefined) {
            throw new Error('Required parameter businessFunction was null or undefined when calling getArrangementsByBusinessFunction.');
        }
        const _resourceName = requestParameters["resourceName"];
        if (_resourceName === null || _resourceName === undefined) {
            throw new Error('Required parameter resourceName was null or undefined when calling getArrangementsByBusinessFunction.');
        }
        const _privilege = requestParameters["privilege"];
        if (_privilege === null || _privilege === undefined) {
            throw new Error('Required parameter privilege was null or undefined when calling getArrangementsByBusinessFunction.');
        }
        const _contentLanguage = requestParameters["contentLanguage"];
        const _withLatestBalances = requestParameters["withLatestBalances"];
        const _maskIndicator = requestParameters["maskIndicator"];
        const _debitAccount = requestParameters["debitAccount"];
        const _creditAccount = requestParameters["creditAccount"];
        const _externalTransferAllowed = requestParameters["externalTransferAllowed"];
        const _productKindName = requestParameters["productKindName"];
        const _legalEntityIds = requestParameters["legalEntityIds"];
        const _sourceId = requestParameters["sourceId"];
        const _favorite = requestParameters["favorite"];
        const _searchTerm = requestParameters["searchTerm"];
        const _customOrder = requestParameters["customOrder"];
        const _favoriteFirst = requestParameters["favoriteFirst"];
        const _subscriptions = requestParameters["subscriptions"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _cursor = requestParameters["cursor"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        const _ignoredProductKindNames = requestParameters["ignoredProductKindNames"];
        const _productKindNames = requestParameters["productKindNames"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_withLatestBalances !== undefined && _withLatestBalances !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _withLatestBalances, 'withLatestBalances');
        }
        if (_maskIndicator !== undefined && _maskIndicator !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _maskIndicator, 'maskIndicator');
        }
        if (_debitAccount !== undefined && _debitAccount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _debitAccount, 'debitAccount');
        }
        if (_creditAccount !== undefined && _creditAccount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _creditAccount, 'creditAccount');
        }
        if (_businessFunction !== undefined && _businessFunction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _businessFunction, 'businessFunction');
        }
        if (_resourceName !== undefined && _resourceName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _resourceName, 'resourceName');
        }
        if (_privilege !== undefined && _privilege !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
        }
        if (_externalTransferAllowed !== undefined && _externalTransferAllowed !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _externalTransferAllowed, 'externalTransferAllowed');
        }
        if (_productKindName !== undefined && _productKindName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _productKindName, 'productKindName');
        }
        if (_legalEntityIds) {
            _legalEntityIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'legalEntityIds');
            });
        }
        if (_sourceId !== undefined && _sourceId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _sourceId, 'sourceId');
        }
        if (_favorite !== undefined && _favorite !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _favorite, 'favorite');
        }
        if (_searchTerm !== undefined && _searchTerm !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _searchTerm, 'searchTerm');
        }
        if (_customOrder !== undefined && _customOrder !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _customOrder, 'customOrder');
        }
        if (_favoriteFirst !== undefined && _favoriteFirst !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _favoriteFirst, 'favoriteFirst');
        }
        if (_subscriptions) {
            _subscriptions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'subscriptions');
            });
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_orderBy) {
            _orderBy.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'orderBy');
            });
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        if (_ignoredProductKindNames) {
            _ignoredProductKindNames.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ignoredProductKindNames');
            });
        }
        if (_productKindNames) {
            _productKindNames.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'productKindNames');
            });
        }
        let headers = this.defaultHeaders;
        if (_contentLanguage !== undefined && _contentLanguage !== null) {
            headers = headers.set('Content-Language', String(_contentLanguage));
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/productsummary/context/arrangements`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getArrangementsByBusinessFunctionUrl(requestParameters) {
        const _businessFunction = requestParameters["businessFunction"];
        if (_businessFunction === null || _businessFunction === undefined) {
            throw new Error('Required parameter businessFunction was null or undefined when calling getArrangementsByBusinessFunction.');
        }
        const _resourceName = requestParameters["resourceName"];
        if (_resourceName === null || _resourceName === undefined) {
            throw new Error('Required parameter resourceName was null or undefined when calling getArrangementsByBusinessFunction.');
        }
        const _privilege = requestParameters["privilege"];
        if (_privilege === null || _privilege === undefined) {
            throw new Error('Required parameter privilege was null or undefined when calling getArrangementsByBusinessFunction.');
        }
        const _contentLanguage = requestParameters["contentLanguage"];
        const _withLatestBalances = requestParameters["withLatestBalances"];
        const _maskIndicator = requestParameters["maskIndicator"];
        const _debitAccount = requestParameters["debitAccount"];
        const _creditAccount = requestParameters["creditAccount"];
        const _externalTransferAllowed = requestParameters["externalTransferAllowed"];
        const _productKindName = requestParameters["productKindName"];
        const _legalEntityIds = requestParameters["legalEntityIds"];
        const _sourceId = requestParameters["sourceId"];
        const _favorite = requestParameters["favorite"];
        const _searchTerm = requestParameters["searchTerm"];
        const _customOrder = requestParameters["customOrder"];
        const _favoriteFirst = requestParameters["favoriteFirst"];
        const _subscriptions = requestParameters["subscriptions"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _cursor = requestParameters["cursor"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        const _ignoredProductKindNames = requestParameters["ignoredProductKindNames"];
        const _productKindNames = requestParameters["productKindNames"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_withLatestBalances !== undefined && _withLatestBalances !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _withLatestBalances, 'withLatestBalances');
        }
        if (_maskIndicator !== undefined && _maskIndicator !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _maskIndicator, 'maskIndicator');
        }
        if (_debitAccount !== undefined && _debitAccount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _debitAccount, 'debitAccount');
        }
        if (_creditAccount !== undefined && _creditAccount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _creditAccount, 'creditAccount');
        }
        if (_businessFunction !== undefined && _businessFunction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _businessFunction, 'businessFunction');
        }
        if (_resourceName !== undefined && _resourceName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _resourceName, 'resourceName');
        }
        if (_privilege !== undefined && _privilege !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
        }
        if (_externalTransferAllowed !== undefined && _externalTransferAllowed !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _externalTransferAllowed, 'externalTransferAllowed');
        }
        if (_productKindName !== undefined && _productKindName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _productKindName, 'productKindName');
        }
        if (_legalEntityIds) {
            _legalEntityIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'legalEntityIds');
            });
        }
        if (_sourceId !== undefined && _sourceId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _sourceId, 'sourceId');
        }
        if (_favorite !== undefined && _favorite !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _favorite, 'favorite');
        }
        if (_searchTerm !== undefined && _searchTerm !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _searchTerm, 'searchTerm');
        }
        if (_customOrder !== undefined && _customOrder !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _customOrder, 'customOrder');
        }
        if (_favoriteFirst !== undefined && _favoriteFirst !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _favoriteFirst, 'favoriteFirst');
        }
        if (_subscriptions) {
            _subscriptions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'subscriptions');
            });
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_orderBy) {
            _orderBy.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'orderBy');
            });
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        if (_ignoredProductKindNames) {
            _ignoredProductKindNames.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ignoredProductKindNames');
            });
        }
        if (_productKindNames) {
            _productKindNames.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'productKindNames');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/productsummary/context/arrangements${queryString ? `?${queryString}` : ''}`;
    }
    getProductSummary(requestParameters, observe = 'body', reportProgress = false, options) {
        const _contentLanguage = requestParameters["contentLanguage"];
        const _debitAccount = requestParameters["debitAccount"];
        const _creditAccount = requestParameters["creditAccount"];
        const _maskIndicator = requestParameters["maskIndicator"];
        const _ignoredProductKindNames = requestParameters["ignoredProductKindNames"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_debitAccount !== undefined && _debitAccount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _debitAccount, 'debitAccount');
        }
        if (_creditAccount !== undefined && _creditAccount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _creditAccount, 'creditAccount');
        }
        if (_maskIndicator !== undefined && _maskIndicator !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _maskIndicator, 'maskIndicator');
        }
        if (_ignoredProductKindNames) {
            _ignoredProductKindNames.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ignoredProductKindNames');
            });
        }
        let headers = this.defaultHeaders;
        if (_contentLanguage !== undefined && _contentLanguage !== null) {
            headers = headers.set('Content-Language', String(_contentLanguage));
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/productsummary`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getProductSummaryUrl(requestParameters) {
        const _contentLanguage = requestParameters["contentLanguage"];
        const _debitAccount = requestParameters["debitAccount"];
        const _creditAccount = requestParameters["creditAccount"];
        const _maskIndicator = requestParameters["maskIndicator"];
        const _ignoredProductKindNames = requestParameters["ignoredProductKindNames"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_debitAccount !== undefined && _debitAccount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _debitAccount, 'debitAccount');
        }
        if (_creditAccount !== undefined && _creditAccount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _creditAccount, 'creditAccount');
        }
        if (_maskIndicator !== undefined && _maskIndicator !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _maskIndicator, 'maskIndicator');
        }
        if (_ignoredProductKindNames) {
            _ignoredProductKindNames.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ignoredProductKindNames');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/productsummary${queryString ? `?${queryString}` : ''}`;
    }
    getProductSummaryEntitlementsByLegalEntityId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _legalEntityIds = requestParameters["legalEntityIds"];
        if (_legalEntityIds === null || _legalEntityIds === undefined) {
            throw new Error('Required parameter legalEntityIds was null or undefined when calling getProductSummaryEntitlementsByLegalEntityId.');
        }
        const _arrangementIds = requestParameters["arrangementIds"];
        const _ignoredArrangementIds = requestParameters["ignoredArrangementIds"];
        const _searchTerm = requestParameters["searchTerm"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _cursor = requestParameters["cursor"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_arrangementIds) {
            _arrangementIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'arrangementIds');
            });
        }
        if (_ignoredArrangementIds) {
            _ignoredArrangementIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ignoredArrangementIds');
            });
        }
        if (_legalEntityIds) {
            _legalEntityIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'legalEntityIds');
            });
        }
        if (_searchTerm !== undefined && _searchTerm !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _searchTerm, 'searchTerm');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_orderBy) {
            _orderBy.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'orderBy');
            });
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/productsummary/configuration`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getProductSummaryEntitlementsByLegalEntityIdUrl(requestParameters) {
        const _legalEntityIds = requestParameters["legalEntityIds"];
        if (_legalEntityIds === null || _legalEntityIds === undefined) {
            throw new Error('Required parameter legalEntityIds was null or undefined when calling getProductSummaryEntitlementsByLegalEntityId.');
        }
        const _arrangementIds = requestParameters["arrangementIds"];
        const _ignoredArrangementIds = requestParameters["ignoredArrangementIds"];
        const _searchTerm = requestParameters["searchTerm"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _cursor = requestParameters["cursor"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_arrangementIds) {
            _arrangementIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'arrangementIds');
            });
        }
        if (_ignoredArrangementIds) {
            _ignoredArrangementIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ignoredArrangementIds');
            });
        }
        if (_legalEntityIds) {
            _legalEntityIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'legalEntityIds');
            });
        }
        if (_searchTerm !== undefined && _searchTerm !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _searchTerm, 'searchTerm');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_orderBy) {
            _orderBy.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'orderBy');
            });
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/productsummary/configuration${queryString ? `?${queryString}` : ''}`;
    }
    postFilterProductSummaries(requestParameters, observe = 'body', reportProgress = false, options) {
        const _productSummaryFilterParams = requestParameters["productSummaryFilterParams"];
        if (_productSummaryFilterParams === null || _productSummaryFilterParams === undefined) {
            throw new Error('Required parameter productSummaryFilterParams was null or undefined when calling postFilterProductSummaries.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/productsummary/configuration/filter`, _productSummaryFilterParams, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postFilterProductSummariesUrl(requestParameters) {
        const _productSummaryFilterParams = requestParameters["productSummaryFilterParams"];
        if (_productSummaryFilterParams === null || _productSummaryFilterParams === undefined) {
            throw new Error('Required parameter productSummaryFilterParams was null or undefined when calling postFilterProductSummaries.');
        }
        return `${this.configuration.basePath}/client-api/v2/productsummary/configuration/filter`;
    }
}
ProductSummaryHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ProductSummaryHttpService, deps: [{ token: i1.HttpClient }, { token: ARRANGEMENT_MANAGER_BASE_PATH, optional: true }, { token: i2.ArrangementManagerConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ProductSummaryHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ProductSummaryHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ProductSummaryHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ARRANGEMENT_MANAGER_BASE_PATH]
                }] }, { type: i2.ArrangementManagerConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,