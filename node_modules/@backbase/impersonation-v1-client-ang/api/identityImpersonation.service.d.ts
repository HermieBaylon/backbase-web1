import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AccessTokenRequest } from '../model/models';
import { AccessTokenResponse } from '../model/models';
import { TokenReferenceRequest } from '../model/models';
import { TokenReferenceResponse } from '../model/models';
import { ImpersonationConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetImpersonationAccessTokenRequestParams {
    ["accessTokenRequest"]: AccessTokenRequest;
}
export interface GetImpersonationTokenReferenceRequestParams {
    ["tokenReferenceRequest"]: TokenReferenceRequest;
}
export declare class IdentityImpersonationService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: ImpersonationConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: ImpersonationConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getImpersonationAccessToken(requestParameters: GetImpersonationAccessTokenRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<AccessTokenResponse>;
    getImpersonationAccessToken(requestParameters: GetImpersonationAccessTokenRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<AccessTokenResponse>>;
    getImpersonationAccessToken(requestParameters: GetImpersonationAccessTokenRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<AccessTokenResponse>>;
    getImpersonationAccessToken(requestParameters: GetImpersonationAccessTokenRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/problem+json';
    }): Observable<AccessTokenResponse>;
    getImpersonationAccessToken(requestParameters: GetImpersonationAccessTokenRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/problem+json';
    }): Observable<HttpResponse<AccessTokenResponse>>;
    getImpersonationAccessToken(requestParameters: GetImpersonationAccessTokenRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/problem+json';
    }): Observable<HttpEvent<AccessTokenResponse>>;
    getImpersonationAccessTokenUrl(requestParameters: GetImpersonationAccessTokenRequestParams): string;
    getImpersonationTokenReference(requestParameters: GetImpersonationTokenReferenceRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<TokenReferenceResponse>;
    getImpersonationTokenReference(requestParameters: GetImpersonationTokenReferenceRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<TokenReferenceResponse>>;
    getImpersonationTokenReference(requestParameters: GetImpersonationTokenReferenceRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<TokenReferenceResponse>>;
    getImpersonationTokenReference(requestParameters: GetImpersonationTokenReferenceRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/problem+json';
    }): Observable<TokenReferenceResponse>;
    getImpersonationTokenReference(requestParameters: GetImpersonationTokenReferenceRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/problem+json';
    }): Observable<HttpResponse<TokenReferenceResponse>>;
    getImpersonationTokenReference(requestParameters: GetImpersonationTokenReferenceRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/problem+json';
    }): Observable<HttpEvent<TokenReferenceResponse>>;
    getImpersonationTokenReferenceUrl(requestParameters: GetImpersonationTokenReferenceRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<IdentityImpersonationService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<IdentityImpersonationService>;
}
