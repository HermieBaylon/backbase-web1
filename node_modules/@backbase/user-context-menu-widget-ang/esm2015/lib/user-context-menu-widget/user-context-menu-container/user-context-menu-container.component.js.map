{"version":3,"file":"user-context-menu-container.component.js","sourceRoot":"","sources":["../../../../../../../libs/user-context-menu-widget/src/lib/user-context-menu-widget/user-context-menu-container/user-context-menu-container.component.ts","../../../../../../../libs/user-context-menu-widget/src/lib/user-context-menu-widget/user-context-menu-container/user-context-menu-container.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACpE,OAAO,EAAE,UAAU,EAAE,MAAM,+BAA+B,CAAC;AAC3D,OAAO,EAAiB,MAAM,EAAE,MAAM,kCAAkC,CAAC;AAEzE,OAAO,EACL,sCAAsC,GAEvC,MAAM,gDAAgD,CAAC;AAExD,OAAO,EAAE,sBAAsB,EAA8B,MAAM,8BAA8B,CAAC;;;;;;;;;;;;AAelG,MAAM,OAAO,iCAAiC;IAQ5C,YACmB,OAA+B,EAC/B,uBAA+D,EAC/C,aAA4B;QAF5C,YAAO,GAAP,OAAO,CAAwB;QAC/B,4BAAuB,GAAvB,uBAAuB,CAAwC;QAC/C,kBAAa,GAAb,aAAa,CAAe;QAV/D,YAAO,GAAG,IAAI,CAAC;QAaf,mBAAc,GAA6C,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC;QACvF,sBAAiB,GAAwB,IAAI,CAAC,uBAAuB,CAAC,kBAAkB,CAAC;QACzF,sBAAiB,GAAiC,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC;QAC3F,qBAAgB,GAAwB,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC;QACtE,aAAQ,GAAqC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QAEnE,2BAAsB,GAAG,KAAK,CAAC;QAC/B,wBAAmB,GAAG,KAAK,CAAC;QAC5B,qBAAgB,GAAG,KAAK,CAAC;IAVtB,CAAC;IAYJ,sBAAsB;QACpB,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;QACnC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IAClC,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,aAAa;aACf,MAAM,EAAE;aACR,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC;aACf,IAAI,CAAC,GAAG,EAAE;YACT,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;QACrC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,KAAc;QAC3B,IAAI,CAAC,gBAAgB,GAAG,CAAC,KAAK,CAAC;IACjC,CAAC;;kJA3CU,iCAAiC,8GAWlC,MAAM;sIAXL,iCAAiC,gICxB9C,gjGA8EA,qzDDLa,6CAA6C;4FAjD7C,iCAAiC;kBAJ7C,SAAS;mBAAC;oBACT,QAAQ,EAAE,gCAAgC;oBAC1C,WAAW,EAAE,8CAA8C;iBAC5D;;0BAYI,MAAM;2BAAC,MAAM;4CALP,oBAAoB;sBAA5B,KAAK;;AA2CR,MAAM,OAAO,6CAA8C,SAAQ,UAGlE;;8JAHY,6CAA6C;kJAA7C,6CAA6C;4FAA7C,6CAA6C;kBAHzD,SAAS;mBAAC;oBACT,QAAQ,EAAE,0CAA0C;iBACrD","sourcesContent":["import { Component, Directive, Inject, Input } from '@angular/core';\nimport { BbTemplate } from '@backbase/foundation-ang/core';\nimport { LogoutService, LOGOUT } from '@backbase/foundation-ang/web-sdk';\nimport { Observable } from 'rxjs';\nimport {\n  UserContextMenuWidgetPropertiesService,\n  WidgetProperties,\n} from '../user-context-menu-widget-properties.service';\n\nimport { UserContextMenuService, ServiceAgreement, UserInfo } from '../user-context-menu.service';\n\nexport interface UserContextMenuContainerCustomizableContext {\n  currentContext: ServiceAgreement | undefined | null;\n  showSingleContext: boolean | undefined | null;\n  canSelectContext: boolean | null;\n  dropdownMenuPosition: string | undefined | null;\n  userInfo: UserInfo | undefined | null;\n  widgetProperties: WidgetProperties | null;\n}\n\n@Component({\n  selector: 'bb-user-context-menu-container',\n  templateUrl: './user-context-menu-container.component.html',\n})\nexport class UserContextMenuContainerComponent {\n  hostRef = this;\n\n  /**\n   * Dropdown menu position\n   */\n  @Input() dropdownMenuPosition?: string;\n\n  constructor(\n    private readonly service: UserContextMenuService,\n    private readonly widgetPropertiesService: UserContextMenuWidgetPropertiesService,\n    @Inject(LOGOUT) private readonly logoutService: LogoutService,\n  ) {}\n\n  currentContext: Observable<ServiceAgreement | undefined> = this.service.currentContext;\n  showSingleContext: Observable<boolean> = this.widgetPropertiesService.showSingleContext$;\n  widgetProperties$: Observable<WidgetProperties> = this.widgetPropertiesService.properties$;\n  canSelectContext: Observable<boolean> = this.service.canSelectContext;\n  userInfo: Observable<UserInfo | undefined> = this.service.userInfo;\n\n  showSwitchContextModal = false;\n  renderContextSelect = false;\n  showCancelButton = false;\n\n  openSwitchContextModal() {\n    this.showSwitchContextModal = true;\n    this.renderContextSelect = true;\n  }\n\n  logout() {\n    this.logoutService\n      .logout()\n      .catch(() => {})\n      .then(() => {\n        this.logoutService.goToLoginPage();\n      });\n  }\n\n  /**\n   * Set flag for show cancel button when loading finished\n   */\n  loadingChanged(event: boolean) {\n    this.showCancelButton = !event;\n  }\n}\n\n@Directive({\n  selector: '[bbUserContextMenuContainerCustomizable]',\n})\nexport class UserContextMenuContainerCustomizableDirective extends BbTemplate<\n  UserContextMenuContainerComponent,\n  UserContextMenuContainerCustomizableContext\n> {}\n","<ng-container\n  bbUserContextMenuContainerCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    currentContext: currentContext | async,\n    showSingleContext: showSingleContext | async,\n    dropdownMenuPosition: dropdownMenuPosition,\n    canSelectContext: canSelectContext | async,\n    userInfo: userInfo | async,\n    widgetProperties: widgetProperties$ | async\n  }\">\n</ng-container>\n\n<ng-template\n  bbUserContextMenuContainerCustomizable\n  let-hostRef\n  let-currentContext=\"context.currentContext\"\n  let-showSingleContext=\"context.showSingleContext\"\n  let-dropdownMenuPosition=\"context.dropdownMenuPosition\"\n  let-canSelectContext=\"context.canSelectContext\"\n  let-userInfo=\"context.userInfo\"\n  let-widgetProperties=\"context.widgetProperties\">\n  <div class=\"user-context-dropdown\">\n    <bb-dropdown-menu-ui\n      [position]=\"dropdownMenuPosition\"\n      btnColor=\"unstyled\"\n      container=\"body\"\n      [fullWidth]=\"true\"\n      ariaLabel=\"User Context Menu\"\n      i18n-ariaLabel=\"User Context Menu ariaLabel@@user-context-menu.ariaLabel.text\">\n      <ng-template bbDropdownLabel>\n        <div role=\"button\" data-role=\"context-navigation\" class=\"user-context-dropdown__selector\">\n          <bb-user-context-menu-info\n            [userInfo]=\"userInfo\"\n            [currentContext]=\"currentContext\"></bb-user-context-menu-info>\n          <div class=\"user-context-dropdown__toggle\">\n            <bb-icon-ui name=\"toggle-down\"></bb-icon-ui>\n          </div>\n        </div>\n      </ng-template>\n      <ng-template bbDropdownMenuItem>\n        <bb-user-context-menu-dropdown\n          [currentContext]=\"currentContext\"\n          [showSingleContext]=\"showSingleContext\"\n          [canSelectContext]=\"canSelectContext\"\n          (changeContext)=\"hostRef.openSwitchContextModal()\"\n          (logout)=\"hostRef.logout()\"></bb-user-context-menu-dropdown>\n      </ng-template>\n    </bb-dropdown-menu-ui>\n  </div>\n\n  <bb-modal-ui [(isOpen)]=\"hostRef.showSwitchContextModal\">\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <bb-select-context-widget\n          (loading)=\"hostRef.loadingChanged($event)\"\n          *ngIf=\"hostRef.renderContextSelect\"\n          [pageSize]=\"widgetProperties.pageSize\"\n          [includeCurrentContext]=\"widgetProperties.includeCurrentContext\"\n          [showSearchAfter]=\"widgetProperties.showSearchAfter\"\n          [selectContextRedirectPage]=\"widgetProperties.selectContextRedirectPage\"></bb-select-context-widget>\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <button\n          bbButton\n          *ngIf=\"hostRef.showCancelButton\"\n          (click)=\"hostRef.showSwitchContextModal = false\"\n          color=\"secondary\"\n          data-role=\"cancel-button\"\n          i18n=\"Cancel button text@@user-context-menu.label.cancelButton\">\n          Cancel\n        </button>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n</ng-template>\n"]}