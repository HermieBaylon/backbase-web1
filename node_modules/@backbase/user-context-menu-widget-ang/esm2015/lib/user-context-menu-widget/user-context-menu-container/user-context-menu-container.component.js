import { Component, Directive, Inject, Input } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { LOGOUT } from '@backbase/foundation-ang/web-sdk';
import { UserContextMenuWidgetPropertiesService, } from '../user-context-menu-widget-properties.service';
import { UserContextMenuService } from '../user-context-menu.service';
import * as i0 from "@angular/core";
import * as i1 from "../user-context-menu.service";
import * as i2 from "../user-context-menu-widget-properties.service";
import * as i3 from "@backbase/ui-ang/dropdown-menu";
import * as i4 from "../user-context-menu-info/user-context-menu-info.component";
import * as i5 from "@backbase/ui-ang/icon";
import * as i6 from "../user-context-menu-dropdown/user-context-menu-dropdown.component";
import * as i7 from "@backbase/ui-ang/modal";
import * as i8 from "@backbase/select-context-widget-ang";
import * as i9 from "@angular/common";
import * as i10 from "@backbase/ui-ang/button";
export class UserContextMenuContainerComponent {
    constructor(service, widgetPropertiesService, logoutService) {
        this.service = service;
        this.widgetPropertiesService = widgetPropertiesService;
        this.logoutService = logoutService;
        this.hostRef = this;
        this.currentContext = this.service.currentContext;
        this.showSingleContext = this.widgetPropertiesService.showSingleContext$;
        this.widgetProperties$ = this.widgetPropertiesService.properties$;
        this.canSelectContext = this.service.canSelectContext;
        this.userInfo = this.service.userInfo;
        this.showSwitchContextModal = false;
        this.renderContextSelect = false;
        this.showCancelButton = false;
    }
    openSwitchContextModal() {
        this.showSwitchContextModal = true;
        this.renderContextSelect = true;
    }
    logout() {
        this.logoutService
            .logout()
            .catch(() => { })
            .then(() => {
            this.logoutService.goToLoginPage();
        });
    }
    /**
     * Set flag for show cancel button when loading finished
     */
    loadingChanged(event) {
        this.showCancelButton = !event;
    }
}
/** @nocollapse */ UserContextMenuContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuContainerComponent, deps: [{ token: i1.UserContextMenuService }, { token: i2.UserContextMenuWidgetPropertiesService }, { token: LOGOUT }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UserContextMenuContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UserContextMenuContainerComponent, selector: "bb-user-context-menu-container", inputs: { dropdownMenuPosition: "dropdownMenuPosition" }, ngImport: i0, template: "<ng-container\n  bbUserContextMenuContainerCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    currentContext: currentContext | async,\n    showSingleContext: showSingleContext | async,\n    dropdownMenuPosition: dropdownMenuPosition,\n    canSelectContext: canSelectContext | async,\n    userInfo: userInfo | async,\n    widgetProperties: widgetProperties$ | async\n  }\">\n</ng-container>\n\n<ng-template\n  bbUserContextMenuContainerCustomizable\n  let-hostRef\n  let-currentContext=\"context.currentContext\"\n  let-showSingleContext=\"context.showSingleContext\"\n  let-dropdownMenuPosition=\"context.dropdownMenuPosition\"\n  let-canSelectContext=\"context.canSelectContext\"\n  let-userInfo=\"context.userInfo\"\n  let-widgetProperties=\"context.widgetProperties\">\n  <div class=\"user-context-dropdown\">\n    <bb-dropdown-menu-ui\n      [position]=\"dropdownMenuPosition\"\n      btnColor=\"unstyled\"\n      container=\"body\"\n      [fullWidth]=\"true\"\n      ariaLabel=\"User Context Menu\"\n      i18n-ariaLabel=\"User Context Menu ariaLabel@@user-context-menu.ariaLabel.text\">\n      <ng-template bbDropdownLabel>\n        <div role=\"button\" data-role=\"context-navigation\" class=\"user-context-dropdown__selector\">\n          <bb-user-context-menu-info\n            [userInfo]=\"userInfo\"\n            [currentContext]=\"currentContext\"></bb-user-context-menu-info>\n          <div class=\"user-context-dropdown__toggle\">\n            <bb-icon-ui name=\"toggle-down\"></bb-icon-ui>\n          </div>\n        </div>\n      </ng-template>\n      <ng-template bbDropdownMenuItem>\n        <bb-user-context-menu-dropdown\n          [currentContext]=\"currentContext\"\n          [showSingleContext]=\"showSingleContext\"\n          [canSelectContext]=\"canSelectContext\"\n          (changeContext)=\"hostRef.openSwitchContextModal()\"\n          (logout)=\"hostRef.logout()\"></bb-user-context-menu-dropdown>\n      </ng-template>\n    </bb-dropdown-menu-ui>\n  </div>\n\n  <bb-modal-ui [(isOpen)]=\"hostRef.showSwitchContextModal\">\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <bb-select-context-widget\n          (loading)=\"hostRef.loadingChanged($event)\"\n          *ngIf=\"hostRef.renderContextSelect\"\n          [pageSize]=\"widgetProperties.pageSize\"\n          [includeCurrentContext]=\"widgetProperties.includeCurrentContext\"\n          [showSearchAfter]=\"widgetProperties.showSearchAfter\"\n          [selectContextRedirectPage]=\"widgetProperties.selectContextRedirectPage\"></bb-select-context-widget>\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <button\n          bbButton\n          *ngIf=\"hostRef.showCancelButton\"\n          (click)=\"hostRef.showSwitchContextModal = false\"\n          color=\"secondary\"\n          data-role=\"cancel-button\"\n          i18n=\"Cancel button text@@user-context-menu.label.cancelButton\">\n          Cancel\n        </button>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i3.DropdownMenuComponent; }), selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i0.forwardRef(function () { return i4.UserContextMenuInfoComponent; }), selector: "bb-user-context-menu-info", inputs: ["userInfo", "currentContext"] }, { type: i0.forwardRef(function () { return i5.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i6.UserContextMenuDropdownComponent; }), selector: "bb-user-context-menu-dropdown", inputs: ["currentContext", "showSingleContext", "canSelectContext"], outputs: ["changeContext", "logout"] }, { type: i0.forwardRef(function () { return i7.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i7.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i8.SelectContextWidgetComponent; }), selector: "bb-select-context-widget", inputs: ["pageSize", "includeCurrentContext", "showSearchAfter", "selectContextRedirectPage", "backOutput"], outputs: ["back", "loading"] }, { type: i0.forwardRef(function () { return i7.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i0.forwardRef(function () { return UserContextMenuContainerCustomizableDirective; }), selector: "[bbUserContextMenuContainerCustomizable]" }, { type: i0.forwardRef(function () { return i3.DropdownLabelDirective; }), selector: "ng-template[bbDropdownLabel]" }, { type: i0.forwardRef(function () { return i3.DropdownMenuItemDirective; }), selector: "ng-template[bbDropdownMenuItem]" }, { type: i0.forwardRef(function () { return i7.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i9.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i7.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0.forwardRef(function () { return i10.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0.forwardRef(function () { return i9.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-context-menu-container',
                    templateUrl: './user-context-menu-container.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.UserContextMenuService }, { type: i2.UserContextMenuWidgetPropertiesService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOGOUT]
                }] }]; }, propDecorators: { dropdownMenuPosition: [{
                type: Input
            }] } });
export class UserContextMenuContainerCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ UserContextMenuContainerCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuContainerCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ UserContextMenuContainerCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: UserContextMenuContainerCustomizableDirective, selector: "[bbUserContextMenuContainerCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuContainerCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbUserContextMenuContainerCustomizable]',
                }]
        }] });
//# sourceMappingURL=user-context-menu-container.component.js.map