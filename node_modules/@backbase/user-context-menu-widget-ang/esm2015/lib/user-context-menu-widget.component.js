import { Component, Input } from '@angular/core';
import { UserContextMenuWidgetPropertiesService } from './user-context-menu-widget/user-context-menu-widget-properties.service';
import { UserContextMenuService } from './user-context-menu-widget/user-context-menu.service';
import * as i0 from "@angular/core";
import * as i1 from "./user-context-menu-widget/user-context-menu-widget-properties.service";
import * as i2 from "./user-context-menu-widget/user-context-menu-container/user-context-menu-container.component";
export class UserContextMenuWidgetComponent {
    constructor(userContextMenuWidgetPropertiesService) {
        this.userContextMenuWidgetPropertiesService = userContextMenuWidgetPropertiesService;
        /**
         * Dropdown menu postion
         */
        this.dropdownMenuPosition = 'bottom-right';
    }
    /**
     * Number of service agreements to load per page
     */
    set pageSize(value) {
        this.userContextMenuWidgetPropertiesService.setPageSize(value);
    }
    /**
     * Include current context
     */
    set includeCurrentContext(value) {
        this.userContextMenuWidgetPropertiesService.setIncludeCurrentContext(value);
    }
    /**
     * Show search if more than service agreements
     */
    set showSearchAfter(value) {
        this.userContextMenuWidgetPropertiesService.setShowSearchAfter(value);
    }
    /**
     * Redirect after successful context select
     */
    set selectContextRedirectPage(value) {
        this.userContextMenuWidgetPropertiesService.setSelectContextRedirectPage(value);
    }
    /**
     * Show current context in context switcher when there is only one context
     */
    set showSingleContext(value) {
        this.userContextMenuWidgetPropertiesService.setShowSingleContext(value);
    }
}
/** @nocollapse */ UserContextMenuWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuWidgetComponent, deps: [{ token: i1.UserContextMenuWidgetPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UserContextMenuWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UserContextMenuWidgetComponent, selector: "bb-user-context-menu-widget", inputs: { pageSize: "pageSize", includeCurrentContext: "includeCurrentContext", showSearchAfter: "showSearchAfter", selectContextRedirectPage: "selectContextRedirectPage", showSingleContext: "showSingleContext", dropdownMenuPosition: "dropdownMenuPosition" }, providers: [UserContextMenuService, UserContextMenuWidgetPropertiesService], ngImport: i0, template: `
    <bb-user-context-menu-container [dropdownMenuPosition]="dropdownMenuPosition"></bb-user-context-menu-container>
  `, isInline: true, components: [{ type: i2.UserContextMenuContainerComponent, selector: "bb-user-context-menu-container", inputs: ["dropdownMenuPosition"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-context-menu-widget',
                    template: `
    <bb-user-context-menu-container [dropdownMenuPosition]="dropdownMenuPosition"></bb-user-context-menu-container>
  `,
                    providers: [UserContextMenuService, UserContextMenuWidgetPropertiesService],
                }]
        }], ctorParameters: function () { return [{ type: i1.UserContextMenuWidgetPropertiesService }]; }, propDecorators: { pageSize: [{
                type: Input
            }], includeCurrentContext: [{
                type: Input
            }], showSearchAfter: [{
                type: Input
            }], selectContextRedirectPage: [{
                type: Input
            }], showSingleContext: [{
                type: Input
            }], dropdownMenuPosition: [{
                type: Input
            }] } });
//# sourceMappingURL=user-context-menu-widget.component.js.map