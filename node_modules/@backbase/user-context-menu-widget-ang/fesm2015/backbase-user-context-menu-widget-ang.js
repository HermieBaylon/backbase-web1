import * as i0 from '@angular/core';
import { Component, Input, Directive, EventEmitter, Output, Injectable, Optional, Inject, NgModule } from '@angular/core';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1$2 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import * as i1$1 from '@backbase/accessgroup-ui';
import { AccessgroupUiModule } from '@backbase/accessgroup-ui';
import * as i8 from '@backbase/select-context-widget-ang';
import { SelectContextWidgetModule } from '@backbase/select-context-widget-ang';
import * as i1 from '@backbase/ui-ang/avatar';
import { AvatarModule } from '@backbase/ui-ang/avatar';
import * as i5 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i7 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i10 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i3 from '@backbase/ui-ang/dropdown-menu';
import { DropdownMenuModule } from '@backbase/ui-ang/dropdown-menu';
import { LOGOUT } from '@backbase/foundation-ang/web-sdk';
import { BehaviorSubject, of, combineLatest } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import * as i1$3 from '@backbase/data-ang/accesscontrol';
import * as i2$1 from '@backbase/data-ang/user';

class UserContextMenuInfoComponent {
    constructor() {
        this.hostRef = this;
    }
}
/** @nocollapse */ UserContextMenuInfoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuInfoComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UserContextMenuInfoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UserContextMenuInfoComponent, selector: "bb-user-context-menu-info", inputs: { userInfo: "userInfo", currentContext: "currentContext" }, ngImport: i0, template: "<ng-container\n  bbUserContextMenuInfoCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    userInfo: userInfo,\n    currentContext: currentContext\n  }\">\n</ng-container>\n\n<ng-template\n  bbUserContextMenuInfoCustomizable\n  let-hostRef\n  let-userInfo=\"context.userInfo\"\n  let-currentContext=\"context.currentContext\">\n  <div class=\"user-context-menu-info\">\n    <bb-avatar-ui *ngIf=\"userInfo\" [name]=\"userInfo?.fullName\" class=\"user-context-menu-info__avatar\"></bb-avatar-ui>\n    <div class=\"user-context-menu-info__description\">\n      <div *ngIf=\"userInfo\" class=\"user-context-menu-info__name\" data-role=\"user-full-name\">\n        {{ userInfo?.fullName }}\n      </div>\n      <div class=\"user-context-menu-info__context\" data-role=\"current-context\">\n        {{ currentContext?.name }}\n      </div>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.AvatarComponent; }), selector: "bb-avatar-ui", inputs: ["image", "name", "imgAlt", "size"] }], directives: [{ type: i0.forwardRef(function () { return UserContextMenuInfoCustomizableDirective; }), selector: "[bbUserContextMenuInfoCustomizable]" }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuInfoComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-context-menu-info',
                    templateUrl: './user-context-menu-info.component.html',
                }]
        }], propDecorators: { userInfo: [{
                type: Input
            }], currentContext: [{
                type: Input
            }] } });
class UserContextMenuInfoCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ UserContextMenuInfoCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuInfoCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ UserContextMenuInfoCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: UserContextMenuInfoCustomizableDirective, selector: "[bbUserContextMenuInfoCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuInfoCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbUserContextMenuInfoCustomizable]',
                }]
        }] });

class UserContextMenuDropdownComponent {
    constructor() {
        this.hostRef = this;
        this.canSelectContext = false;
        this.changeContext = new EventEmitter();
        this.logout = new EventEmitter();
    }
    onChangeContext() {
        if (this.canSelectContext) {
            this.changeContext.emit();
        }
    }
    onLogout() {
        this.logout.emit();
    }
}
/** @nocollapse */ UserContextMenuDropdownComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuDropdownComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UserContextMenuDropdownComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UserContextMenuDropdownComponent, selector: "bb-user-context-menu-dropdown", inputs: { currentContext: "currentContext", showSingleContext: "showSingleContext", canSelectContext: "canSelectContext" }, outputs: { changeContext: "changeContext", logout: "logout" }, ngImport: i0, template: "<ng-container\n  bbUserContextMenuDropdownCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    currentContext: currentContext,\n    canSelectContext: canSelectContext,\n    showSingleContext: showSingleContext\n  }\">\n</ng-container>\n\n<ng-template\n  bbUserContextMenuDropdownCustomizable\n  let-hostRef\n  let-currentContext=\"context.currentContext\"\n  let-canSelectContext=\"context.canSelectContext\"\n  let-showSingleContext=\"context.showSingleContext\">\n  <ng-container *ngIf=\"canSelectContext || showSingleContext\">\n    <button\n      class=\"dropdown-item bb-stack\"\n      role=\"menuitem\"\n      data-role=\"user-context-menu-dropdown-change-context-btn\"\n      (click)=\"hostRef.onChangeContext()\">\n      <div class=\"bb-stack__item\">\n        <bb-user-context-icon-ui\n          [isMaster]=\"currentContext?.isMaster\"\n          [name]=\"currentContext?.name\"></bb-user-context-icon-ui>\n      </div>\n      <div class=\"bb-stack__item\">\n        <div class=\"bb-text-bold\" data-role=\"user-context\">\n          {{ currentContext?.name }}\n        </div>\n        <div\n          class=\"bb-text-support\"\n          data-role=\"change-context\"\n          *ngIf=\"canSelectContext\"\n          i18n=\"Change context|Click to change context label@@user-context-menu.label.clickToChange\">\n          (click to change context)\n        </div>\n      </div>\n    </button>\n\n    <div class=\"dropdown-divider\"></div>\n  </ng-container>\n\n  <button role=\"menuitem\" class=\"dropdown-item\" data-role=\"logout\" (click)=\"hostRef.onLogout()\">\n    <div class=\"user-context-menu-info\" i18n=\"Log out|Click to log out label@@user-context-menu.label.logout\">\n      Log out\n    </div>\n  </button>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$1.UserContextIconComponent; }), selector: "bb-user-context-icon-ui", inputs: ["isMaster", "name"] }], directives: [{ type: i0.forwardRef(function () { return UserContextMenuDropdownCustomizableDirective; }), selector: "[bbUserContextMenuDropdownCustomizable]" }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuDropdownComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-context-menu-dropdown',
                    templateUrl: './user-context-menu-dropdown.component.html',
                }]
        }], propDecorators: { currentContext: [{
                type: Input
            }], showSingleContext: [{
                type: Input
            }], canSelectContext: [{
                type: Input
            }], changeContext: [{
                type: Output
            }], logout: [{
                type: Output
            }] } });
class UserContextMenuDropdownCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ UserContextMenuDropdownCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuDropdownCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ UserContextMenuDropdownCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: UserContextMenuDropdownCustomizableDirective, selector: "[bbUserContextMenuDropdownCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuDropdownCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbUserContextMenuDropdownCustomizable]',
                }]
        }] });

const WidgetProperty = {
    PAGE_SIZE: 'pageSize',
    INCLUDE_CURRENT_CONTEXT: 'includeCurrentContext',
    SHOW_SEARCH_AFTER: 'showSearchAfter',
    SHOW_SINGLE_CONTEXT: 'showSingleContext',
    REDIRECT_PAGE: 'selectContextRedirectPage',
};
const DefaultWidgetProperties = {
    pageSize: 7,
    includeCurrentContext: true,
    showSearchAfter: 7,
    selectContextRedirectPage: '',
    showSingleContext: true,
};
class UserContextMenuWidgetPropertiesService {
    constructor(itemModel) {
        this.itemModel = itemModel;
        this.pageSizeSubject$ = new BehaviorSubject(undefined);
        this.includeCurrentContextSubject$ = new BehaviorSubject(undefined);
        this.showSearchAfterSubject$ = new BehaviorSubject(undefined);
        this.selectContextRedirectPageSubject$ = new BehaviorSubject(undefined);
        this.showSingleContextSubject$ = new BehaviorSubject(undefined);
        this.pageSize = this.itemModel
            ? this.itemModel
                .property(WidgetProperty.PAGE_SIZE, '7')
                .pipe(map(propertyValue => parseInt(propertyValue, 10)))
            : of(DefaultWidgetProperties.pageSize);
        this.includeCurrentContext = this.itemModel
            ? this.itemModel
                .property(WidgetProperty.INCLUDE_CURRENT_CONTEXT, 'true')
                .pipe(map(propertyValue => `${propertyValue}` === 'true'))
            : of(DefaultWidgetProperties.includeCurrentContext);
        this.showSearchAfter = this.itemModel
            ? this.itemModel
                .property(WidgetProperty.SHOW_SEARCH_AFTER, '7')
                .pipe(map(propertyValue => parseInt(propertyValue, 10)))
            : of(DefaultWidgetProperties.showSearchAfter);
        this.selectContextRedirectPage = this.itemModel
            ? this.itemModel.property(WidgetProperty.REDIRECT_PAGE, '')
            : of(DefaultWidgetProperties.selectContextRedirectPage);
        this.showSingleContext = this.itemModel
            ? this.itemModel
                .property(WidgetProperty.SHOW_SINGLE_CONTEXT, 'true')
                .pipe(map(propertyValue => `${propertyValue}` === 'true'))
            : of(DefaultWidgetProperties.showSingleContext);
        this.pageSize$ = this.getProperty(this.pageSizeSubject$, this.pageSize).pipe(map(Number));
        this.includeCurrentContext$ = this.getProperty(this.includeCurrentContextSubject$, this.includeCurrentContext).pipe(map(this.toBoolean));
        this.showSearchAfter$ = this.getProperty(this.showSearchAfterSubject$, this.showSearchAfter).pipe(map(Number));
        this.selectContextRedirectPage$ = this.getProperty(this.selectContextRedirectPageSubject$, this.selectContextRedirectPage);
        this.showSingleContext$ = this.getProperty(this.showSingleContextSubject$, this.showSingleContext);
        this.properties$ = combineLatest([
            this.pageSize$,
            this.includeCurrentContext$,
            this.showSearchAfter$,
            this.selectContextRedirectPage$,
            this.showSingleContext$,
        ]).pipe(map(([pageSize, includeCurrentContext, showSearchAfter, selectContextRedirectPage, showSingleContext]) => ({
            pageSize,
            includeCurrentContext,
            showSearchAfter,
            selectContextRedirectPage,
            showSingleContext,
        })));
    }
    getProperty(input$, itemModel) {
        return combineLatest([input$, itemModel]).pipe(map(([value, valueIM]) => (value === undefined ? valueIM : value)));
    }
    toBoolean(value) {
        return value === 'true' || value === true;
    }
    setPageSize(value) {
        this.pageSizeSubject$.next(value);
    }
    setIncludeCurrentContext(value) {
        this.includeCurrentContextSubject$.next(value);
    }
    setShowSearchAfter(value) {
        this.showSearchAfterSubject$.next(value);
    }
    setSelectContextRedirectPage(value) {
        this.selectContextRedirectPageSubject$.next(value);
    }
    setShowSingleContext(value) {
        this.showSingleContextSubject$.next(value);
    }
}
/** @nocollapse */ UserContextMenuWidgetPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuWidgetPropertiesService, deps: [{ token: i1$2.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ UserContextMenuWidgetPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuWidgetPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuWidgetPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$2.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });

class UserContextMenuService {
    constructor(userContextService, serviceAgreementService, userService) {
        this.userContextService = userContextService;
        this.serviceAgreementService = serviceAgreementService;
        this.userService = userService;
        this.currentContext = this.serviceAgreementService
            .getServiceAgreementContext()
            .pipe(catchError(() => of(undefined)));
        this.canSelectContext = this.getTotalServiceAgreements();
        this.userInfo = this.userService
            .getOwnUser()
            .pipe(catchError(() => of(undefined)));
    }
    getTotalServiceAgreements() {
        return this.userContextService.getUserContextServiceAgreements({ from: 0, size: 2 }, 'response').pipe(map((response) => {
            const items = response.body || [];
            return (parseInt(response.headers.get('x-total-count') || '0', 10) || items.length) > 1;
        }), catchError(() => {
            return of(false);
        }));
    }
}
/** @nocollapse */ UserContextMenuService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuService, deps: [{ token: i1$3.UserContextHttpService }, { token: i1$3.ServiceAgreementHttpService }, { token: i2$1.UserManagementService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ UserContextMenuService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$3.UserContextHttpService }, { type: i1$3.ServiceAgreementHttpService }, { type: i2$1.UserManagementService }]; } });

class UserContextMenuContainerComponent {
    constructor(service, widgetPropertiesService, logoutService) {
        this.service = service;
        this.widgetPropertiesService = widgetPropertiesService;
        this.logoutService = logoutService;
        this.hostRef = this;
        this.currentContext = this.service.currentContext;
        this.showSingleContext = this.widgetPropertiesService.showSingleContext$;
        this.widgetProperties$ = this.widgetPropertiesService.properties$;
        this.canSelectContext = this.service.canSelectContext;
        this.userInfo = this.service.userInfo;
        this.showSwitchContextModal = false;
        this.renderContextSelect = false;
        this.showCancelButton = false;
    }
    openSwitchContextModal() {
        this.showSwitchContextModal = true;
        this.renderContextSelect = true;
    }
    logout() {
        this.logoutService
            .logout()
            .catch(() => { })
            .then(() => {
            this.logoutService.goToLoginPage();
        });
    }
    /**
     * Set flag for show cancel button when loading finished
     */
    loadingChanged(event) {
        this.showCancelButton = !event;
    }
}
/** @nocollapse */ UserContextMenuContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuContainerComponent, deps: [{ token: UserContextMenuService }, { token: UserContextMenuWidgetPropertiesService }, { token: LOGOUT }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UserContextMenuContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UserContextMenuContainerComponent, selector: "bb-user-context-menu-container", inputs: { dropdownMenuPosition: "dropdownMenuPosition" }, ngImport: i0, template: "<ng-container\n  bbUserContextMenuContainerCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    currentContext: currentContext | async,\n    showSingleContext: showSingleContext | async,\n    dropdownMenuPosition: dropdownMenuPosition,\n    canSelectContext: canSelectContext | async,\n    userInfo: userInfo | async,\n    widgetProperties: widgetProperties$ | async\n  }\">\n</ng-container>\n\n<ng-template\n  bbUserContextMenuContainerCustomizable\n  let-hostRef\n  let-currentContext=\"context.currentContext\"\n  let-showSingleContext=\"context.showSingleContext\"\n  let-dropdownMenuPosition=\"context.dropdownMenuPosition\"\n  let-canSelectContext=\"context.canSelectContext\"\n  let-userInfo=\"context.userInfo\"\n  let-widgetProperties=\"context.widgetProperties\">\n  <div class=\"user-context-dropdown\">\n    <bb-dropdown-menu-ui\n      [position]=\"dropdownMenuPosition\"\n      btnColor=\"unstyled\"\n      container=\"body\"\n      [fullWidth]=\"true\"\n      ariaLabel=\"User Context Menu\"\n      i18n-ariaLabel=\"User Context Menu ariaLabel@@user-context-menu.ariaLabel.text\">\n      <ng-template bbDropdownLabel>\n        <div role=\"button\" data-role=\"context-navigation\" class=\"user-context-dropdown__selector\">\n          <bb-user-context-menu-info\n            [userInfo]=\"userInfo\"\n            [currentContext]=\"currentContext\"></bb-user-context-menu-info>\n          <div class=\"user-context-dropdown__toggle\">\n            <bb-icon-ui name=\"toggle-down\"></bb-icon-ui>\n          </div>\n        </div>\n      </ng-template>\n      <ng-template bbDropdownMenuItem>\n        <bb-user-context-menu-dropdown\n          [currentContext]=\"currentContext\"\n          [showSingleContext]=\"showSingleContext\"\n          [canSelectContext]=\"canSelectContext\"\n          (changeContext)=\"hostRef.openSwitchContextModal()\"\n          (logout)=\"hostRef.logout()\"></bb-user-context-menu-dropdown>\n      </ng-template>\n    </bb-dropdown-menu-ui>\n  </div>\n\n  <bb-modal-ui [(isOpen)]=\"hostRef.showSwitchContextModal\">\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <bb-select-context-widget\n          (loading)=\"hostRef.loadingChanged($event)\"\n          *ngIf=\"hostRef.renderContextSelect\"\n          [pageSize]=\"widgetProperties.pageSize\"\n          [includeCurrentContext]=\"widgetProperties.includeCurrentContext\"\n          [showSearchAfter]=\"widgetProperties.showSearchAfter\"\n          [selectContextRedirectPage]=\"widgetProperties.selectContextRedirectPage\"></bb-select-context-widget>\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <button\n          bbButton\n          *ngIf=\"hostRef.showCancelButton\"\n          (click)=\"hostRef.showSwitchContextModal = false\"\n          color=\"secondary\"\n          data-role=\"cancel-button\"\n          i18n=\"Cancel button text@@user-context-menu.label.cancelButton\">\n          Cancel\n        </button>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i3.DropdownMenuComponent; }), selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i0.forwardRef(function () { return UserContextMenuInfoComponent; }), selector: "bb-user-context-menu-info", inputs: ["userInfo", "currentContext"] }, { type: i0.forwardRef(function () { return i5.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return UserContextMenuDropdownComponent; }), selector: "bb-user-context-menu-dropdown", inputs: ["currentContext", "showSingleContext", "canSelectContext"], outputs: ["changeContext", "logout"] }, { type: i0.forwardRef(function () { return i7.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i7.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i8.SelectContextWidgetComponent; }), selector: "bb-select-context-widget", inputs: ["pageSize", "includeCurrentContext", "showSearchAfter", "selectContextRedirectPage", "backOutput"], outputs: ["back", "loading"] }, { type: i0.forwardRef(function () { return i7.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i0.forwardRef(function () { return UserContextMenuContainerCustomizableDirective; }), selector: "[bbUserContextMenuContainerCustomizable]" }, { type: i0.forwardRef(function () { return i3.DropdownLabelDirective; }), selector: "ng-template[bbDropdownLabel]" }, { type: i0.forwardRef(function () { return i3.DropdownMenuItemDirective; }), selector: "ng-template[bbDropdownMenuItem]" }, { type: i0.forwardRef(function () { return i7.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i7.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0.forwardRef(function () { return i10.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0.forwardRef(function () { return i2.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-context-menu-container',
                    templateUrl: './user-context-menu-container.component.html',
                }]
        }], ctorParameters: function () { return [{ type: UserContextMenuService }, { type: UserContextMenuWidgetPropertiesService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOGOUT]
                }] }]; }, propDecorators: { dropdownMenuPosition: [{
                type: Input
            }] } });
class UserContextMenuContainerCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ UserContextMenuContainerCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuContainerCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ UserContextMenuContainerCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: UserContextMenuContainerCustomizableDirective, selector: "[bbUserContextMenuContainerCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuContainerCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbUserContextMenuContainerCustomizable]',
                }]
        }] });

class UserContextMenuWidgetComponent {
    constructor(userContextMenuWidgetPropertiesService) {
        this.userContextMenuWidgetPropertiesService = userContextMenuWidgetPropertiesService;
        /**
         * Dropdown menu postion
         */
        this.dropdownMenuPosition = 'bottom-right';
    }
    /**
     * Number of service agreements to load per page
     */
    set pageSize(value) {
        this.userContextMenuWidgetPropertiesService.setPageSize(value);
    }
    /**
     * Include current context
     */
    set includeCurrentContext(value) {
        this.userContextMenuWidgetPropertiesService.setIncludeCurrentContext(value);
    }
    /**
     * Show search if more than service agreements
     */
    set showSearchAfter(value) {
        this.userContextMenuWidgetPropertiesService.setShowSearchAfter(value);
    }
    /**
     * Redirect after successful context select
     */
    set selectContextRedirectPage(value) {
        this.userContextMenuWidgetPropertiesService.setSelectContextRedirectPage(value);
    }
    /**
     * Show current context in context switcher when there is only one context
     */
    set showSingleContext(value) {
        this.userContextMenuWidgetPropertiesService.setShowSingleContext(value);
    }
}
/** @nocollapse */ UserContextMenuWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuWidgetComponent, deps: [{ token: UserContextMenuWidgetPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UserContextMenuWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UserContextMenuWidgetComponent, selector: "bb-user-context-menu-widget", inputs: { pageSize: "pageSize", includeCurrentContext: "includeCurrentContext", showSearchAfter: "showSearchAfter", selectContextRedirectPage: "selectContextRedirectPage", showSingleContext: "showSingleContext", dropdownMenuPosition: "dropdownMenuPosition" }, providers: [UserContextMenuService, UserContextMenuWidgetPropertiesService], ngImport: i0, template: `
    <bb-user-context-menu-container [dropdownMenuPosition]="dropdownMenuPosition"></bb-user-context-menu-container>
  `, isInline: true, components: [{ type: UserContextMenuContainerComponent, selector: "bb-user-context-menu-container", inputs: ["dropdownMenuPosition"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-context-menu-widget',
                    template: `
    <bb-user-context-menu-container [dropdownMenuPosition]="dropdownMenuPosition"></bb-user-context-menu-container>
  `,
                    providers: [UserContextMenuService, UserContextMenuWidgetPropertiesService],
                }]
        }], ctorParameters: function () { return [{ type: UserContextMenuWidgetPropertiesService }]; }, propDecorators: { pageSize: [{
                type: Input
            }], includeCurrentContext: [{
                type: Input
            }], showSearchAfter: [{
                type: Input
            }], selectContextRedirectPage: [{
                type: Input
            }], showSingleContext: [{
                type: Input
            }], dropdownMenuPosition: [{
                type: Input
            }] } });

const components = [
    UserContextMenuWidgetComponent,
    UserContextMenuContainerComponent,
    UserContextMenuDropdownComponent,
    UserContextMenuInfoComponent,
];
const directives = [
    UserContextMenuInfoCustomizableDirective,
    UserContextMenuDropdownCustomizableDirective,
    UserContextMenuContainerCustomizableDirective,
];
const uiModules = [
    AccessgroupUiModule,
    SelectContextWidgetModule,
    AvatarModule,
    IconModule,
    ModalModule,
    ButtonModule,
    NgbDropdownModule,
    DropdownMenuModule,
];
class UserContextMenuWidgetModule {
}
/** @nocollapse */ UserContextMenuWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ UserContextMenuWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuWidgetModule, declarations: [UserContextMenuWidgetComponent,
        UserContextMenuContainerComponent,
        UserContextMenuDropdownComponent,
        UserContextMenuInfoComponent, UserContextMenuInfoCustomizableDirective,
        UserContextMenuDropdownCustomizableDirective,
        UserContextMenuContainerCustomizableDirective], imports: [CommonModule, i1$2.BackbaseCoreModule, AccessgroupUiModule,
        SelectContextWidgetModule,
        AvatarModule,
        IconModule,
        ModalModule,
        ButtonModule,
        NgbDropdownModule,
        DropdownMenuModule], exports: [UserContextMenuWidgetComponent,
        UserContextMenuContainerComponent,
        UserContextMenuDropdownComponent,
        UserContextMenuInfoComponent, UserContextMenuInfoCustomizableDirective,
        UserContextMenuDropdownCustomizableDirective,
        UserContextMenuContainerCustomizableDirective, AccessgroupUiModule,
        SelectContextWidgetModule,
        AvatarModule,
        IconModule,
        ModalModule,
        ButtonModule,
        NgbDropdownModule,
        DropdownMenuModule] });
/** @nocollapse */ UserContextMenuWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuWidgetModule, imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                classMap: { UserContextMenuWidgetComponent },
            }),
            ...uiModules,
        ], AccessgroupUiModule,
        SelectContextWidgetModule,
        AvatarModule,
        IconModule,
        ModalModule,
        ButtonModule,
        NgbDropdownModule,
        DropdownMenuModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserContextMenuWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components, ...directives],
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { UserContextMenuWidgetComponent },
                        }),
                        ...uiModules,
                    ],
                    exports: [...components, ...directives, ...uiModules],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { UserContextMenuWidgetComponent, UserContextMenuWidgetModule, UserContextMenuContainerComponent as ӨUserContextMenuContainerComponent, UserContextMenuContainerCustomizableDirective as ӨUserContextMenuContainerCustomizableDirective, UserContextMenuDropdownComponent as ӨUserContextMenuDropdownComponent, UserContextMenuDropdownCustomizableDirective as ӨUserContextMenuDropdownCustomizableDirective, UserContextMenuInfoComponent as ӨUserContextMenuInfoComponent, UserContextMenuInfoCustomizableDirective as ӨUserContextMenuInfoCustomizableDirective };
//# sourceMappingURL=backbase-user-context-menu-widget-ang.js.map
