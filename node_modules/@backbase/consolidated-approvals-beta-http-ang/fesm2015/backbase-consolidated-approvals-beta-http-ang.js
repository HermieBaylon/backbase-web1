import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const AccessContextScope = {
    SA: 'SA',
    LE: 'LE',
    USER: 'USER'
};

const ActiveContactStatus = {
    ACTIVE: 'ACTIVE',
    PENDINGAPPROVAL: 'PENDING_APPROVAL'
};

const ApprovalRequestAction = {
    CREATE: 'CREATE',
    UPDATE: 'UPDATE',
    DELETE: 'DELETE'
};

const ApprovalRequestStatus = {
    ENTERED: 'ENTERED',
    REJECTED: 'REJECTED'
};

const ApprovalStatus = {
    PENDING: 'PENDING',
    APPROVED: 'APPROVED',
    REJECTED: 'REJECTED',
    CANCELLED: 'CANCELLED'
};

const ChargeBearer = {
    OUR: 'OUR',
    BEN: 'BEN',
    SHA: 'SHA'
};

var ExchangeRateInformation;
(function (ExchangeRateInformation) {
    ExchangeRateInformation.RateTypeEnum = {
        ACTUAL: 'ACTUAL',
        INDICATIVE: 'INDICATIVE',
        AGREED: 'AGREED'
    };
})(ExchangeRateInformation || (ExchangeRateInformation = {}));

const InstructionPriority = {
    NORM: 'NORM',
    HIGH: 'HIGH'
};

const InvolvedPartyRole = {
    CREDITOR: 'CREDITOR',
    DEBTOR: 'DEBTOR'
};

const LogicalOperator = {
    OR: 'OR'
};

const PaymentAction = {
    APPROVE: 'APPROVE',
    FINALAPPROVE: 'FINAL_APPROVE',
    REJECT: 'REJECT',
    CANCEL: 'CANCEL',
    DELETE: 'DELETE',
    EDIT: 'EDIT',
    CREATE: 'CREATE'
};

const PaymentMode = {
    SINGLE: 'SINGLE',
    RECURRING: 'RECURRING'
};

const RecordStatus = {
    APPROVED: 'APPROVED',
    REJECTED: 'REJECTED'
};

var RemittanceInformation;
(function (RemittanceInformation) {
    RemittanceInformation.TypeEnum = {
        STRUCTURED: 'STRUCTURED',
        UNSTRUCTURED: 'UNSTRUCTURED'
    };
})(RemittanceInformation || (RemittanceInformation = {}));

var Schedule;
(function (Schedule) {
    Schedule.NonWorkingDayExecutionStrategyEnum = {
        BEFORE: 'BEFORE',
        AFTER: 'AFTER',
        NONE: 'NONE'
    };
    Schedule.TransferFrequencyEnum = {
        ONCE: 'ONCE',
        DAILY: 'DAILY',
        WEEKLY: 'WEEKLY',
        BIWEEKLY: 'BIWEEKLY',
        MONTHLY: 'MONTHLY',
        QUARTERLY: 'QUARTERLY',
        YEARLY: 'YEARLY'
    };
    Schedule.EveryEnum = {
        _1: '1',
        _2: '2'
    };
})(Schedule || (Schedule = {}));

const SchemeNames = {
    IBAN: 'IBAN',
    BBAN: 'BBAN',
    ID: 'ID',
    EXTERNALID: 'EXTERNAL_ID',
    EMAIL: 'EMAIL',
    MOBILE: 'MOBILE'
};

const Status = {
    DRAFT: 'DRAFT',
    ENTERED: 'ENTERED',
    READY: 'READY',
    ACCEPTED: 'ACCEPTED',
    PROCESSED: 'PROCESSED',
    REJECTED: 'REJECTED',
    CANCELLED: 'CANCELLED',
    CANCELLATIONPENDING: 'CANCELLATION_PENDING',
    CONFIRMATIONPENDING: 'CONFIRMATION_PENDING',
    CONFIRMATIONDECLINED: 'CONFIRMATION_DECLINED',
    REPLACED: 'REPLACED'
};

const CONSOLIDATED_APPROVALS_BETA_BASE_PATH = new InjectionToken('CONSOLIDATED_APPROVALS_BETA_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class ConsolidatedApprovalsBetaConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module ConsolidatedApprovalsBetaConfiguration');

class ConsolidatedApprovalsBetaApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('ConsolidatedApprovalsBetaApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: ConsolidatedApprovalsBetaApiModule,
            providers: [{ provide: ConsolidatedApprovalsBetaConfiguration, useFactory: configurationFactory }]
        };
    }
}
ConsolidatedApprovalsBetaApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsolidatedApprovalsBetaApiModule, deps: [{ token: ConsolidatedApprovalsBetaApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: ConsolidatedApprovalsBetaConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
ConsolidatedApprovalsBetaApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsolidatedApprovalsBetaApiModule });
ConsolidatedApprovalsBetaApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsolidatedApprovalsBetaApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsolidatedApprovalsBetaApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: ConsolidatedApprovalsBetaApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: ConsolidatedApprovalsBetaConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class ConsolidatedApprovalsCountHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ConsolidatedApprovalsBetaConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getApprovalsCount(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/approvals-private/count`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getApprovalsCountUrl() {
        return `${this.configuration.basePath}/client-api/v2/approvals-private/count`;
    }
}
ConsolidatedApprovalsCountHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsolidatedApprovalsCountHttpService, deps: [{ token: i1.HttpClient }, { token: CONSOLIDATED_APPROVALS_BETA_BASE_PATH, optional: true }, { token: ConsolidatedApprovalsBetaConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ConsolidatedApprovalsCountHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsolidatedApprovalsCountHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsolidatedApprovalsCountHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CONSOLIDATED_APPROVALS_BETA_BASE_PATH]
                }] }, { type: ConsolidatedApprovalsBetaConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const ConsolidatedApprovalsCountHttpServiceGetApprovalsCountMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approvals-private/count",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                        "serviceAgreementName": "My Service Agreement",
                        "totalApprovals": 12,
                        "resources": [{
                                "resource": "Payments",
                                "approvalsCount": 5
                            }, {
                                "resource": "Contacts",
                                "approvalsCount": 3
                            }, {
                                "resource": "Entitlements",
                                "approvalsCount": 4
                            }]
                    }, {
                        "serviceAgreementId": "d5f67fd9-1234-48d9-b38a-3f8b24d6c9ac",
                        "serviceAgreementName": "Yet another Service Agreement",
                        "totalApprovals": 18,
                        "resources": [{
                                "resource": "Payments",
                                "approvalsCount": 10
                            }, {
                                "resource": "Contacts",
                                "approvalsCount": 5
                            }, {
                                "resource": "Entitlements",
                                "approvalsCount": 3
                            }]
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ConsolidatedApprovalsCountHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/approvals-private/count",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                        "serviceAgreementName": "My Service Agreement",
                        "totalApprovals": 12,
                        "resources": [{
                                "resource": "Payments",
                                "approvalsCount": 5
                            }, {
                                "resource": "Contacts",
                                "approvalsCount": 3
                            }, {
                                "resource": "Entitlements",
                                "approvalsCount": 4
                            }]
                    }, {
                        "serviceAgreementId": "d5f67fd9-1234-48d9-b38a-3f8b24d6c9ac",
                        "serviceAgreementName": "Yet another Service Agreement",
                        "totalApprovals": 18,
                        "resources": [{
                                "resource": "Payments",
                                "approvalsCount": 10
                            }, {
                                "resource": "Contacts",
                                "approvalsCount": 5
                            }, {
                                "resource": "Entitlements",
                                "approvalsCount": 3
                            }]
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class ContactApprovalsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ConsolidatedApprovalsBetaConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    postFilterContactApprovals(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postFilterApprovalsRequest = requestParameters["postFilterApprovalsRequest"];
        if (_postFilterApprovalsRequest === null || _postFilterApprovalsRequest === undefined) {
            throw new Error('Required parameter postFilterApprovalsRequest was null or undefined when calling postFilterContactApprovals.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/approvals-private/contacts/filter`, _postFilterApprovalsRequest, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postFilterContactApprovalsUrl(requestParameters) {
        const _postFilterApprovalsRequest = requestParameters["postFilterApprovalsRequest"];
        if (_postFilterApprovalsRequest === null || _postFilterApprovalsRequest === undefined) {
            throw new Error('Required parameter postFilterApprovalsRequest was null or undefined when calling postFilterContactApprovals.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/approvals-private/contacts/filter${queryString ? `?${queryString}` : ''}`;
    }
}
ContactApprovalsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ContactApprovalsHttpService, deps: [{ token: i1.HttpClient }, { token: CONSOLIDATED_APPROVALS_BETA_BASE_PATH, optional: true }, { token: ConsolidatedApprovalsBetaConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ContactApprovalsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ContactApprovalsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ContactApprovalsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CONSOLIDATED_APPROVALS_BETA_BASE_PATH]
                }] }, { type: ConsolidatedApprovalsBetaConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const ContactApprovalsHttpServicePostFilterContactApprovalsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approvals-private/contacts/filter",
        method: "POST",
        responses: [
            {
                status: 200,
                body: [{
                        "contactInfo": {
                            "id": "0855e686-d31e-4216-b3dd-5d66161d5312",
                            "creatorBbId": "john@example.com",
                            "data": {
                                "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                                "name": "John Doe",
                                "alias": "John",
                                "category": "Employee",
                                "contactPerson": "Jane Doe",
                                "phoneNumber": "055512345678",
                                "emailId": "john@example.com",
                                "addressLine1": "Backbase enterprise",
                                "addressLine2": "",
                                "streetName": "Jacob Bontiusplaats 9",
                                "town": "Amsterdam",
                                "postCode": "1018 LL",
                                "countrySubDivision": "North Holland",
                                "country": "NL",
                                "accounts": [{
                                        "name": "Jane Doe",
                                        "alias": "Jane",
                                        "accountType": "SAVINGS",
                                        "IBAN": "FI21 1234 5600 0007 85",
                                        "bankName": "Test Bank",
                                        "bankAddressLine1": "QA Bank",
                                        "bankAddressLine2": "",
                                        "bankStreetName": "Jodenbreestraat 96",
                                        "bankTown": "Amsterdam",
                                        "bankPostCode": "1011NS",
                                        "bankCountrySubDivision": "North Holland",
                                        "bankCountry": "NL",
                                        "accountHolderAddressLine1": "",
                                        "accountHolderAddressLine2": "",
                                        "accountHolderStreetName": "Woestduinstraat 114-3",
                                        "accountHolderTown": "Amsterdam",
                                        "accountHolderPostCode": "1059 SP",
                                        "accountHolderCountrySubDivision": "North Holland",
                                        "accountHolderCountry": "NL"
                                    }],
                                "accessContextScope": "SA"
                            },
                            "creationTime": "2017-05-12T14:33:13.452Z",
                            "action": "CREATE",
                            "status": "ENTERED"
                        },
                        "approvalInfo": {
                            "id": "b3e4692d-6772-4fb2-9446-b8f4607f49b1",
                            "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                            "userFullName": "Paddy Brian",
                            "externalUserId": "paddy-brian",
                            "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                            "itemId": "0855e686-d31e-4216-b3dd-5d66161d5312",
                            "resource": "Contacts",
                            "function": "Contacts",
                            "status": "PENDING",
                            "createdAt": "2018-07-22T13:44:02Z",
                            "records": [{
                                    "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                    "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                                    "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                    "externalUserId": "robin-green",
                                    "userFullName": "Robin Green",
                                    "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                    "status": "APPROVED",
                                    "createdAt": "2018-01-22T13:44:02Z"
                                }],
                            "approvalTypes": [{
                                    "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                    "name": "A",
                                    "description": "1st approval",
                                    "rank": 100
                                }, {
                                    "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                    "name": "B",
                                    "description": "2nd approval",
                                    "rank": 101
                                }],
                            "policy": {
                                "id": "6546c424-d3b1-4848-bbda-31cd44ab6915",
                                "name": "Default policy",
                                "description": "A default policy that requires two approvals of different types: A + B",
                                "items": [{
                                        "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                        "approvalType": {
                                            "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                            "name": "A",
                                            "description": "1st approval",
                                            "rank": 100
                                        },
                                        "numberOfApprovals": 1
                                    }, {
                                        "approvalTypeId": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                        "approvalType": {
                                            "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                            "name": "B",
                                            "description": "2nd approval",
                                            "rank": 101
                                        },
                                        "numberOfApprovals": 1
                                    }]
                            },
                            "canApprove": true,
                            "canReject": true,
                            "finalApprover": false
                        }
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ContactApprovalsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/approvals-private/contacts/filter",
        method: "POST",
        responses: [
            {
                status: 200,
                body: [{
                        "contactInfo": {
                            "id": "0855e686-d31e-4216-b3dd-5d66161d5312",
                            "creatorBbId": "john@example.com",
                            "data": {
                                "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                                "name": "John Doe",
                                "alias": "John",
                                "category": "Employee",
                                "contactPerson": "Jane Doe",
                                "phoneNumber": "055512345678",
                                "emailId": "john@example.com",
                                "addressLine1": "Backbase enterprise",
                                "addressLine2": "",
                                "streetName": "Jacob Bontiusplaats 9",
                                "town": "Amsterdam",
                                "postCode": "1018 LL",
                                "countrySubDivision": "North Holland",
                                "country": "NL",
                                "accounts": [{
                                        "name": "Jane Doe",
                                        "alias": "Jane",
                                        "accountType": "SAVINGS",
                                        "IBAN": "FI21 1234 5600 0007 85",
                                        "bankName": "Test Bank",
                                        "bankAddressLine1": "QA Bank",
                                        "bankAddressLine2": "",
                                        "bankStreetName": "Jodenbreestraat 96",
                                        "bankTown": "Amsterdam",
                                        "bankPostCode": "1011NS",
                                        "bankCountrySubDivision": "North Holland",
                                        "bankCountry": "NL",
                                        "accountHolderAddressLine1": "",
                                        "accountHolderAddressLine2": "",
                                        "accountHolderStreetName": "Woestduinstraat 114-3",
                                        "accountHolderTown": "Amsterdam",
                                        "accountHolderPostCode": "1059 SP",
                                        "accountHolderCountrySubDivision": "North Holland",
                                        "accountHolderCountry": "NL"
                                    }],
                                "accessContextScope": "SA"
                            },
                            "creationTime": "2017-05-12T14:33:13.452Z",
                            "action": "CREATE",
                            "status": "ENTERED"
                        },
                        "approvalInfo": {
                            "id": "b3e4692d-6772-4fb2-9446-b8f4607f49b1",
                            "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                            "userFullName": "Paddy Brian",
                            "externalUserId": "paddy-brian",
                            "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                            "itemId": "0855e686-d31e-4216-b3dd-5d66161d5312",
                            "resource": "Contacts",
                            "function": "Contacts",
                            "status": "PENDING",
                            "createdAt": "2018-07-22T13:44:02Z",
                            "records": [{
                                    "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                    "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                                    "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                    "externalUserId": "robin-green",
                                    "userFullName": "Robin Green",
                                    "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                    "status": "APPROVED",
                                    "createdAt": "2018-01-22T13:44:02Z"
                                }],
                            "approvalTypes": [{
                                    "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                    "name": "A",
                                    "description": "1st approval",
                                    "rank": 100
                                }, {
                                    "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                    "name": "B",
                                    "description": "2nd approval",
                                    "rank": 101
                                }],
                            "policy": {
                                "id": "6546c424-d3b1-4848-bbda-31cd44ab6915",
                                "name": "Default policy",
                                "description": "A default policy that requires two approvals of different types: A + B",
                                "items": [{
                                        "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                        "approvalType": {
                                            "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                            "name": "A",
                                            "description": "1st approval",
                                            "rank": 100
                                        },
                                        "numberOfApprovals": 1
                                    }, {
                                        "approvalTypeId": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                        "approvalType": {
                                            "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                            "name": "B",
                                            "description": "2nd approval",
                                            "rank": 101
                                        },
                                        "numberOfApprovals": 1
                                    }]
                            },
                            "canApprove": true,
                            "canReject": true,
                            "finalApprover": false
                        }
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class EntitlementsApprovalsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ConsolidatedApprovalsBetaConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    postFilterEntitlementsApprovals(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postFilterApprovalsRequest = requestParameters["postFilterApprovalsRequest"];
        if (_postFilterApprovalsRequest === null || _postFilterApprovalsRequest === undefined) {
            throw new Error('Required parameter postFilterApprovalsRequest was null or undefined when calling postFilterEntitlementsApprovals.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/approvals-private/entitlements/filter`, _postFilterApprovalsRequest, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postFilterEntitlementsApprovalsUrl(requestParameters) {
        const _postFilterApprovalsRequest = requestParameters["postFilterApprovalsRequest"];
        if (_postFilterApprovalsRequest === null || _postFilterApprovalsRequest === undefined) {
            throw new Error('Required parameter postFilterApprovalsRequest was null or undefined when calling postFilterEntitlementsApprovals.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/approvals-private/entitlements/filter${queryString ? `?${queryString}` : ''}`;
    }
}
EntitlementsApprovalsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EntitlementsApprovalsHttpService, deps: [{ token: i1.HttpClient }, { token: CONSOLIDATED_APPROVALS_BETA_BASE_PATH, optional: true }, { token: ConsolidatedApprovalsBetaConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
EntitlementsApprovalsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EntitlementsApprovalsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EntitlementsApprovalsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CONSOLIDATED_APPROVALS_BETA_BASE_PATH]
                }] }, { type: ConsolidatedApprovalsBetaConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const EntitlementsApprovalsHttpServicePostFilterEntitlementsApprovalsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approvals-private/entitlements/filter",
        method: "POST",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const EntitlementsApprovalsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/approvals-private/entitlements/filter",
        method: "POST",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class PaymentApprovalsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ConsolidatedApprovalsBetaConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    postFilterPaymentApprovals(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postFilterApprovalsRequest = requestParameters["postFilterApprovalsRequest"];
        if (_postFilterApprovalsRequest === null || _postFilterApprovalsRequest === undefined) {
            throw new Error('Required parameter postFilterApprovalsRequest was null or undefined when calling postFilterPaymentApprovals.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/approvals-private/payments/filter`, _postFilterApprovalsRequest, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postFilterPaymentApprovalsUrl(requestParameters) {
        const _postFilterApprovalsRequest = requestParameters["postFilterApprovalsRequest"];
        if (_postFilterApprovalsRequest === null || _postFilterApprovalsRequest === undefined) {
            throw new Error('Required parameter postFilterApprovalsRequest was null or undefined when calling postFilterPaymentApprovals.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/approvals-private/payments/filter${queryString ? `?${queryString}` : ''}`;
    }
}
PaymentApprovalsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentApprovalsHttpService, deps: [{ token: i1.HttpClient }, { token: CONSOLIDATED_APPROVALS_BETA_BASE_PATH, optional: true }, { token: ConsolidatedApprovalsBetaConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PaymentApprovalsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentApprovalsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentApprovalsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CONSOLIDATED_APPROVALS_BETA_BASE_PATH]
                }] }, { type: ConsolidatedApprovalsBetaConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const PaymentApprovalsHttpServicePostFilterPaymentApprovalsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approvals-private/payments/filter",
        method: "POST",
        responses: [
            {
                status: 200,
                body: [{
                        "paymentOrderInfo": {
                            "id": "cddf639a-3cbe-4162-a925-dd8909b43bfb",
                            "approvalId": "12aacd0c-2648-4452-b04f-3fc160bda571",
                            "status": "ENTERED",
                            "createdBy": "u0001012",
                            "createdAt": "2022-04-01T11:27:59.416190Z",
                            "updatedBy": "u0001012",
                            "updatedAt": "2022-04-01T11:27:59.416190Z",
                            "actions": ["APPROVE", "REJECT"],
                            "intraLegalEntity": false,
                            "originatorAccountCurrency": "EUR",
                            "originator": {
                                "name": "vPBxYC",
                                "role": "DEBTOR",
                                "postalAddress": {
                                    "addressLine1": "nwRlOk",
                                    "addressLine2": "mzZWeZbz",
                                    "streetName": "vKlNcfHRUUEiJm",
                                    "postCode": "177135",
                                    "town": "gXNt",
                                    "countrySubDivision": "dMptgmoC",
                                    "country": "AQ"
                                }
                            },
                            "originatorAccount": {
                                "arrangementId": "903309c5-1b07-4043-b46b-4a022bdb1b41",
                                "externalArrangementId": "0000000000000001bwdCoVXvNuDrYTSw",
                                "identification": {
                                    "identification": "LT526319689655711037",
                                    "schemeName": "IBAN"
                                }
                            },
                            "batchBooking": false,
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2022-04-01",
                            "paymentMode": "SINGLE",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "transferTransactionInformation": {
                                "counterparty": {
                                    "name": "Sleek Copper Shirt",
                                    "role": "CREDITOR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "IE06YJVA15965129386257",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "instructedAmount": {
                                    "amount": "50.00000",
                                    "currencyCode": "EUR"
                                }
                            },
                            "totalAmount": {
                                "amount": "50.00000",
                                "currencyCode": "EUR"
                            }
                        },
                        "approvalInfo": {
                            "id": "12aacd0c-2648-4452-b04f-3fc160bda571",
                            "userId": "2226d9be-4323-40e8-acec-988eab4777f3",
                            "serviceAgreementId": "8a49bc667fe4c35e017fe4e16b1f016a",
                            "itemId": "cddf639a-3cbe-4162-a925-dd8909b43bfb",
                            "dataAccessItemId": "903309c5-1b07-4043-b46b-4a022bdb1b41",
                            "resource": "Payments",
                            "function": "SEPA CT",
                            "status": "PENDING",
                            "canApprove": true,
                            "canReject": true,
                            "finalApprover": false,
                            "createdAt": "2022-04-01T11:27:58.800336Z"
                        }
                    }, {
                        "paymentOrderInfo": {
                            "id": "f4bc422a-1d7d-4a3f-aad8-52882fe2f2dd",
                            "approvalId": "98b07ac0-2360-453b-8dc9-6af7b5228bec",
                            "status": "ENTERED",
                            "createdBy": "u0001012",
                            "createdAt": "2022-04-01T11:28:00.643542Z",
                            "updatedBy": "u0001012",
                            "updatedAt": "2022-04-01T11:28:00.643542Z",
                            "actions": ["APPROVE", "REJECT"],
                            "intraLegalEntity": false,
                            "originatorAccountCurrency": "EUR",
                            "originator": {
                                "name": "vPBxYC",
                                "role": "DEBTOR",
                                "postalAddress": {
                                    "addressLine1": "nwRlOk",
                                    "addressLine2": "mzZWeZbz",
                                    "streetName": "vKlNcfHRUUEiJm",
                                    "postCode": "177135",
                                    "town": "gXNt",
                                    "countrySubDivision": "dMptgmoC",
                                    "country": "AQ"
                                }
                            },
                            "originatorAccount": {
                                "arrangementId": "903309c5-1b07-4043-b46b-4a022bdb1b41",
                                "externalArrangementId": "0000000000000001bwdCoVXvNuDrYTSw",
                                "identification": {
                                    "identification": "LT526319689655711037",
                                    "schemeName": "IBAN"
                                }
                            },
                            "batchBooking": false,
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2022-04-01",
                            "paymentMode": "SINGLE",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "transferTransactionInformation": {
                                "counterparty": {
                                    "name": "Sleek Wooden Table",
                                    "role": "CREDITOR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "SM37C1125812374QXIKVA5ZKH96",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "instructedAmount": {
                                    "amount": "50.00000",
                                    "currencyCode": "EUR"
                                }
                            },
                            "totalAmount": {
                                "amount": "50.00000",
                                "currencyCode": "EUR"
                            }
                        },
                        "approvalInfo": {
                            "id": "98b07ac0-2360-453b-8dc9-6af7b5228bec",
                            "userId": "2226d9be-4323-40e8-acec-988eab4777f3",
                            "serviceAgreementId": "8a49bc667fe4c35e017fe4e16cc60172",
                            "itemId": "f4bc422a-1d7d-4a3f-aad8-52882fe2f2dd",
                            "dataAccessItemId": "903309c5-1b07-4043-b46b-4a022bdb1b41",
                            "resource": "Payments",
                            "function": "SEPA CT",
                            "amountDetails": {
                                "currencyCode": "EUR",
                                "amount": "50.00000"
                            },
                            "status": "PENDING",
                            "records": [{
                                    "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                    "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                                    "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                    "approvalTypeId": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                    "status": "APPROVED",
                                    "createdAt": "2018-01-22T13:44:02Z"
                                }],
                            "approvalTypes": [{
                                    "id": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                    "name": "A",
                                    "description": "1st approval",
                                    "rank": 100
                                }, {
                                    "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                    "name": "B",
                                    "description": "2nd approval",
                                    "rank": 101
                                }],
                            "policy": {
                                "id": "6546c424-d3b1-4848-bbda-31cd44ab6915",
                                "name": "Default policy",
                                "description": "A default policy that requires two approvals of different types: A + B",
                                "items": [{
                                        "approvalTypeId": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                        "approvalType": {
                                            "id": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                            "name": "A",
                                            "description": "1st approval",
                                            "rank": 100
                                        },
                                        "numberOfApprovals": 1
                                    }, {
                                        "approvalTypeId": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                        "approvalType": {
                                            "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                            "name": "B",
                                            "description": "2nd approval",
                                            "rank": 101
                                        },
                                        "numberOfApprovals": 1
                                    }]
                            },
                            "canApprove": true,
                            "canReject": true,
                            "finalApprover": false,
                            "createdAt": "2022-04-01T11:28:00.418198Z"
                        }
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const PaymentApprovalsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/approvals-private/payments/filter",
        method: "POST",
        responses: [
            {
                status: 200,
                body: [{
                        "paymentOrderInfo": {
                            "id": "cddf639a-3cbe-4162-a925-dd8909b43bfb",
                            "approvalId": "12aacd0c-2648-4452-b04f-3fc160bda571",
                            "status": "ENTERED",
                            "createdBy": "u0001012",
                            "createdAt": "2022-04-01T11:27:59.416190Z",
                            "updatedBy": "u0001012",
                            "updatedAt": "2022-04-01T11:27:59.416190Z",
                            "actions": ["APPROVE", "REJECT"],
                            "intraLegalEntity": false,
                            "originatorAccountCurrency": "EUR",
                            "originator": {
                                "name": "vPBxYC",
                                "role": "DEBTOR",
                                "postalAddress": {
                                    "addressLine1": "nwRlOk",
                                    "addressLine2": "mzZWeZbz",
                                    "streetName": "vKlNcfHRUUEiJm",
                                    "postCode": "177135",
                                    "town": "gXNt",
                                    "countrySubDivision": "dMptgmoC",
                                    "country": "AQ"
                                }
                            },
                            "originatorAccount": {
                                "arrangementId": "903309c5-1b07-4043-b46b-4a022bdb1b41",
                                "externalArrangementId": "0000000000000001bwdCoVXvNuDrYTSw",
                                "identification": {
                                    "identification": "LT526319689655711037",
                                    "schemeName": "IBAN"
                                }
                            },
                            "batchBooking": false,
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2022-04-01",
                            "paymentMode": "SINGLE",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "transferTransactionInformation": {
                                "counterparty": {
                                    "name": "Sleek Copper Shirt",
                                    "role": "CREDITOR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "IE06YJVA15965129386257",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "instructedAmount": {
                                    "amount": "50.00000",
                                    "currencyCode": "EUR"
                                }
                            },
                            "totalAmount": {
                                "amount": "50.00000",
                                "currencyCode": "EUR"
                            }
                        },
                        "approvalInfo": {
                            "id": "12aacd0c-2648-4452-b04f-3fc160bda571",
                            "userId": "2226d9be-4323-40e8-acec-988eab4777f3",
                            "serviceAgreementId": "8a49bc667fe4c35e017fe4e16b1f016a",
                            "itemId": "cddf639a-3cbe-4162-a925-dd8909b43bfb",
                            "dataAccessItemId": "903309c5-1b07-4043-b46b-4a022bdb1b41",
                            "resource": "Payments",
                            "function": "SEPA CT",
                            "status": "PENDING",
                            "canApprove": true,
                            "canReject": true,
                            "finalApprover": false,
                            "createdAt": "2022-04-01T11:27:58.800336Z"
                        }
                    }, {
                        "paymentOrderInfo": {
                            "id": "f4bc422a-1d7d-4a3f-aad8-52882fe2f2dd",
                            "approvalId": "98b07ac0-2360-453b-8dc9-6af7b5228bec",
                            "status": "ENTERED",
                            "createdBy": "u0001012",
                            "createdAt": "2022-04-01T11:28:00.643542Z",
                            "updatedBy": "u0001012",
                            "updatedAt": "2022-04-01T11:28:00.643542Z",
                            "actions": ["APPROVE", "REJECT"],
                            "intraLegalEntity": false,
                            "originatorAccountCurrency": "EUR",
                            "originator": {
                                "name": "vPBxYC",
                                "role": "DEBTOR",
                                "postalAddress": {
                                    "addressLine1": "nwRlOk",
                                    "addressLine2": "mzZWeZbz",
                                    "streetName": "vKlNcfHRUUEiJm",
                                    "postCode": "177135",
                                    "town": "gXNt",
                                    "countrySubDivision": "dMptgmoC",
                                    "country": "AQ"
                                }
                            },
                            "originatorAccount": {
                                "arrangementId": "903309c5-1b07-4043-b46b-4a022bdb1b41",
                                "externalArrangementId": "0000000000000001bwdCoVXvNuDrYTSw",
                                "identification": {
                                    "identification": "LT526319689655711037",
                                    "schemeName": "IBAN"
                                }
                            },
                            "batchBooking": false,
                            "instructionPriority": "NORM",
                            "requestedExecutionDate": "2022-04-01",
                            "paymentMode": "SINGLE",
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "transferTransactionInformation": {
                                "counterparty": {
                                    "name": "Sleek Wooden Table",
                                    "role": "CREDITOR"
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "SM37C1125812374QXIKVA5ZKH96",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "instructedAmount": {
                                    "amount": "50.00000",
                                    "currencyCode": "EUR"
                                }
                            },
                            "totalAmount": {
                                "amount": "50.00000",
                                "currencyCode": "EUR"
                            }
                        },
                        "approvalInfo": {
                            "id": "98b07ac0-2360-453b-8dc9-6af7b5228bec",
                            "userId": "2226d9be-4323-40e8-acec-988eab4777f3",
                            "serviceAgreementId": "8a49bc667fe4c35e017fe4e16cc60172",
                            "itemId": "f4bc422a-1d7d-4a3f-aad8-52882fe2f2dd",
                            "dataAccessItemId": "903309c5-1b07-4043-b46b-4a022bdb1b41",
                            "resource": "Payments",
                            "function": "SEPA CT",
                            "amountDetails": {
                                "currencyCode": "EUR",
                                "amount": "50.00000"
                            },
                            "status": "PENDING",
                            "records": [{
                                    "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                    "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                                    "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                    "approvalTypeId": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                    "status": "APPROVED",
                                    "createdAt": "2018-01-22T13:44:02Z"
                                }],
                            "approvalTypes": [{
                                    "id": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                    "name": "A",
                                    "description": "1st approval",
                                    "rank": 100
                                }, {
                                    "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                    "name": "B",
                                    "description": "2nd approval",
                                    "rank": 101
                                }],
                            "policy": {
                                "id": "6546c424-d3b1-4848-bbda-31cd44ab6915",
                                "name": "Default policy",
                                "description": "A default policy that requires two approvals of different types: A + B",
                                "items": [{
                                        "approvalTypeId": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                        "approvalType": {
                                            "id": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                            "name": "A",
                                            "description": "1st approval",
                                            "rank": 100
                                        },
                                        "numberOfApprovals": 1
                                    }, {
                                        "approvalTypeId": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                        "approvalType": {
                                            "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                            "name": "B",
                                            "description": "2nd approval",
                                            "rank": 101
                                        },
                                        "numberOfApprovals": 1
                                    }]
                            },
                            "canApprove": true,
                            "canReject": true,
                            "finalApprover": false,
                            "createdAt": "2022-04-01T11:28:00.418198Z"
                        }
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

export { AccessContextScope, ActiveContactStatus, ApprovalRequestAction, ApprovalRequestStatus, ApprovalStatus, COLLECTION_FORMATS, CONFIG_TOKEN, CONSOLIDATED_APPROVALS_BETA_BASE_PATH, ChargeBearer, ConsolidatedApprovalsBetaApiModule, ConsolidatedApprovalsBetaConfiguration, ConsolidatedApprovalsCountHttpService, ConsolidatedApprovalsCountHttpServiceGetApprovalsCountMocksProvider, ConsolidatedApprovalsCountHttpServiceMocksProvider, ContactApprovalsHttpService, ContactApprovalsHttpServiceMocksProvider, ContactApprovalsHttpServicePostFilterContactApprovalsMocksProvider, EntitlementsApprovalsHttpService, EntitlementsApprovalsHttpServiceMocksProvider, EntitlementsApprovalsHttpServicePostFilterEntitlementsApprovalsMocksProvider, ExchangeRateInformation, InstructionPriority, InvolvedPartyRole, LogicalOperator, PaymentAction, PaymentApprovalsHttpService, PaymentApprovalsHttpServiceMocksProvider, PaymentApprovalsHttpServicePostFilterPaymentApprovalsMocksProvider, PaymentMode, RecordStatus, RemittanceInformation, Schedule, SchemeNames, Status };
//# sourceMappingURL=backbase-consolidated-approvals-beta-http-ang.js.map
