import { createMocks } from '@backbase/foundation-ang/data-http';
export const ConsolidatedApprovalsCountHttpServiceGetApprovalsCountMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approvals-private/count",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                        "serviceAgreementName": "My Service Agreement",
                        "totalApprovals": 12,
                        "resources": [{
                                "resource": "Payments",
                                "approvalsCount": 5
                            }, {
                                "resource": "Contacts",
                                "approvalsCount": 3
                            }, {
                                "resource": "Entitlements",
                                "approvalsCount": 4
                            }]
                    }, {
                        "serviceAgreementId": "d5f67fd9-1234-48d9-b38a-3f8b24d6c9ac",
                        "serviceAgreementName": "Yet another Service Agreement",
                        "totalApprovals": 18,
                        "resources": [{
                                "resource": "Payments",
                                "approvalsCount": 10
                            }, {
                                "resource": "Contacts",
                                "approvalsCount": 5
                            }, {
                                "resource": "Entitlements",
                                "approvalsCount": 3
                            }]
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
export const ConsolidatedApprovalsCountHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/approvals-private/count",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                        "serviceAgreementName": "My Service Agreement",
                        "totalApprovals": 12,
                        "resources": [{
                                "resource": "Payments",
                                "approvalsCount": 5
                            }, {
                                "resource": "Contacts",
                                "approvalsCount": 3
                            }, {
                                "resource": "Entitlements",
                                "approvalsCount": 4
                            }]
                    }, {
                        "serviceAgreementId": "d5f67fd9-1234-48d9-b38a-3f8b24d6c9ac",
                        "serviceAgreementName": "Yet another Service Agreement",
                        "totalApprovals": 18,
                        "resources": [{
                                "resource": "Payments",
                                "approvalsCount": 10
                            }, {
                                "resource": "Contacts",
                                "approvalsCount": 5
                            }, {
                                "resource": "Entitlements",
                                "approvalsCount": 3
                            }]
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);
//# sourceMappingURL=data:application/json;base64,