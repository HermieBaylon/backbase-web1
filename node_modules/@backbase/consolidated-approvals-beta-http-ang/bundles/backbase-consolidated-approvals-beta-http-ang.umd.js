(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/consolidated-approvals-beta-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["consolidated-approvals-beta-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var AccessContextScope = {
        SA: 'SA',
        LE: 'LE',
        USER: 'USER'
    };

    var ActiveContactStatus = {
        ACTIVE: 'ACTIVE',
        PENDINGAPPROVAL: 'PENDING_APPROVAL'
    };

    var ApprovalRequestAction = {
        CREATE: 'CREATE',
        UPDATE: 'UPDATE',
        DELETE: 'DELETE'
    };

    var ApprovalRequestStatus = {
        ENTERED: 'ENTERED',
        REJECTED: 'REJECTED'
    };

    var ApprovalStatus = {
        PENDING: 'PENDING',
        APPROVED: 'APPROVED',
        REJECTED: 'REJECTED',
        CANCELLED: 'CANCELLED'
    };

    var ChargeBearer = {
        OUR: 'OUR',
        BEN: 'BEN',
        SHA: 'SHA'
    };

    exports.ExchangeRateInformation = void 0;
    (function (ExchangeRateInformation) {
        ExchangeRateInformation.RateTypeEnum = {
            ACTUAL: 'ACTUAL',
            INDICATIVE: 'INDICATIVE',
            AGREED: 'AGREED'
        };
    })(exports.ExchangeRateInformation || (exports.ExchangeRateInformation = {}));

    var InstructionPriority = {
        NORM: 'NORM',
        HIGH: 'HIGH'
    };

    var InvolvedPartyRole = {
        CREDITOR: 'CREDITOR',
        DEBTOR: 'DEBTOR'
    };

    var LogicalOperator = {
        OR: 'OR'
    };

    var PaymentAction = {
        APPROVE: 'APPROVE',
        FINALAPPROVE: 'FINAL_APPROVE',
        REJECT: 'REJECT',
        CANCEL: 'CANCEL',
        DELETE: 'DELETE',
        EDIT: 'EDIT',
        CREATE: 'CREATE'
    };

    var PaymentMode = {
        SINGLE: 'SINGLE',
        RECURRING: 'RECURRING'
    };

    var RecordStatus = {
        APPROVED: 'APPROVED',
        REJECTED: 'REJECTED'
    };

    exports.RemittanceInformation = void 0;
    (function (RemittanceInformation) {
        RemittanceInformation.TypeEnum = {
            STRUCTURED: 'STRUCTURED',
            UNSTRUCTURED: 'UNSTRUCTURED'
        };
    })(exports.RemittanceInformation || (exports.RemittanceInformation = {}));

    exports.Schedule = void 0;
    (function (Schedule) {
        Schedule.NonWorkingDayExecutionStrategyEnum = {
            BEFORE: 'BEFORE',
            AFTER: 'AFTER',
            NONE: 'NONE'
        };
        Schedule.TransferFrequencyEnum = {
            ONCE: 'ONCE',
            DAILY: 'DAILY',
            WEEKLY: 'WEEKLY',
            BIWEEKLY: 'BIWEEKLY',
            MONTHLY: 'MONTHLY',
            QUARTERLY: 'QUARTERLY',
            YEARLY: 'YEARLY'
        };
        Schedule.EveryEnum = {
            _1: '1',
            _2: '2'
        };
    })(exports.Schedule || (exports.Schedule = {}));

    var SchemeNames = {
        IBAN: 'IBAN',
        BBAN: 'BBAN',
        ID: 'ID',
        EXTERNALID: 'EXTERNAL_ID',
        EMAIL: 'EMAIL',
        MOBILE: 'MOBILE'
    };

    var Status = {
        DRAFT: 'DRAFT',
        ENTERED: 'ENTERED',
        READY: 'READY',
        ACCEPTED: 'ACCEPTED',
        PROCESSED: 'PROCESSED',
        REJECTED: 'REJECTED',
        CANCELLED: 'CANCELLED',
        CANCELLATIONPENDING: 'CANCELLATION_PENDING',
        CONFIRMATIONPENDING: 'CONFIRMATION_PENDING',
        CONFIRMATIONDECLINED: 'CONFIRMATION_DECLINED',
        REPLACED: 'REPLACED'
    };

    var CONSOLIDATED_APPROVALS_BETA_BASE_PATH = new i0.InjectionToken('CONSOLIDATED_APPROVALS_BETA_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var ConsolidatedApprovalsBetaConfiguration = /** @class */ (function () {
        function ConsolidatedApprovalsBetaConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        ConsolidatedApprovalsBetaConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        ConsolidatedApprovalsBetaConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        ConsolidatedApprovalsBetaConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        ConsolidatedApprovalsBetaConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return ConsolidatedApprovalsBetaConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module ConsolidatedApprovalsBetaConfiguration');

    var ConsolidatedApprovalsBetaApiModule = /** @class */ (function () {
        function ConsolidatedApprovalsBetaApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('ConsolidatedApprovalsBetaApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        ConsolidatedApprovalsBetaApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: ConsolidatedApprovalsBetaApiModule,
                providers: [{ provide: ConsolidatedApprovalsBetaConfiguration, useFactory: configurationFactory }]
            };
        };
        return ConsolidatedApprovalsBetaApiModule;
    }());
    ConsolidatedApprovalsBetaApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsolidatedApprovalsBetaApiModule, deps: [{ token: ConsolidatedApprovalsBetaApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: ConsolidatedApprovalsBetaConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsolidatedApprovalsBetaApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsolidatedApprovalsBetaApiModule });
    ConsolidatedApprovalsBetaApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsolidatedApprovalsBetaApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsolidatedApprovalsBetaApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: ConsolidatedApprovalsBetaApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: ConsolidatedApprovalsBetaConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var ConsolidatedApprovalsCountHttpService = /** @class */ (function () {
        function ConsolidatedApprovalsCountHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new ConsolidatedApprovalsBetaConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        ConsolidatedApprovalsCountHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        ConsolidatedApprovalsCountHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        ConsolidatedApprovalsCountHttpService.prototype.getApprovalsCount = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/approvals-private/count", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ConsolidatedApprovalsCountHttpService.prototype.getApprovalsCountUrl = function () {
            return this.configuration.basePath + "/client-api/v2/approvals-private/count";
        };
        return ConsolidatedApprovalsCountHttpService;
    }());
    ConsolidatedApprovalsCountHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsolidatedApprovalsCountHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: CONSOLIDATED_APPROVALS_BETA_BASE_PATH, optional: true }, { token: ConsolidatedApprovalsBetaConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ConsolidatedApprovalsCountHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsolidatedApprovalsCountHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsolidatedApprovalsCountHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [CONSOLIDATED_APPROVALS_BETA_BASE_PATH]
                        }] }, { type: ConsolidatedApprovalsBetaConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var ConsolidatedApprovalsCountHttpServiceGetApprovalsCountMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/approvals-private/count",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                            "serviceAgreementName": "My Service Agreement",
                            "totalApprovals": 12,
                            "resources": [{
                                    "resource": "Payments",
                                    "approvalsCount": 5
                                }, {
                                    "resource": "Contacts",
                                    "approvalsCount": 3
                                }, {
                                    "resource": "Entitlements",
                                    "approvalsCount": 4
                                }]
                        }, {
                            "serviceAgreementId": "d5f67fd9-1234-48d9-b38a-3f8b24d6c9ac",
                            "serviceAgreementName": "Yet another Service Agreement",
                            "totalApprovals": 18,
                            "resources": [{
                                    "resource": "Payments",
                                    "approvalsCount": 10
                                }, {
                                    "resource": "Contacts",
                                    "approvalsCount": 5
                                }, {
                                    "resource": "Entitlements",
                                    "approvalsCount": 3
                                }]
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var ConsolidatedApprovalsCountHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/approvals-private/count",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                            "serviceAgreementName": "My Service Agreement",
                            "totalApprovals": 12,
                            "resources": [{
                                    "resource": "Payments",
                                    "approvalsCount": 5
                                }, {
                                    "resource": "Contacts",
                                    "approvalsCount": 3
                                }, {
                                    "resource": "Entitlements",
                                    "approvalsCount": 4
                                }]
                        }, {
                            "serviceAgreementId": "d5f67fd9-1234-48d9-b38a-3f8b24d6c9ac",
                            "serviceAgreementName": "Yet another Service Agreement",
                            "totalApprovals": 18,
                            "resources": [{
                                    "resource": "Payments",
                                    "approvalsCount": 10
                                }, {
                                    "resource": "Contacts",
                                    "approvalsCount": 5
                                }, {
                                    "resource": "Entitlements",
                                    "approvalsCount": 3
                                }]
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    var ContactApprovalsHttpService = /** @class */ (function () {
        function ContactApprovalsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new ConsolidatedApprovalsBetaConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        ContactApprovalsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        ContactApprovalsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        ContactApprovalsHttpService.prototype.postFilterContactApprovals = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _postFilterApprovalsRequest = requestParameters["postFilterApprovalsRequest"];
            if (_postFilterApprovalsRequest === null || _postFilterApprovalsRequest === undefined) {
                throw new Error('Required parameter postFilterApprovalsRequest was null or undefined when calling postFilterContactApprovals.');
            }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/approvals-private/contacts/filter", _postFilterApprovalsRequest, {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ContactApprovalsHttpService.prototype.postFilterContactApprovalsUrl = function (requestParameters) {
            var _postFilterApprovalsRequest = requestParameters["postFilterApprovalsRequest"];
            if (_postFilterApprovalsRequest === null || _postFilterApprovalsRequest === undefined) {
                throw new Error('Required parameter postFilterApprovalsRequest was null or undefined when calling postFilterContactApprovals.');
            }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/approvals-private/contacts/filter" + (queryString ? "?" + queryString : '');
        };
        return ContactApprovalsHttpService;
    }());
    ContactApprovalsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ContactApprovalsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: CONSOLIDATED_APPROVALS_BETA_BASE_PATH, optional: true }, { token: ConsolidatedApprovalsBetaConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ContactApprovalsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ContactApprovalsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ContactApprovalsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [CONSOLIDATED_APPROVALS_BETA_BASE_PATH]
                        }] }, { type: ConsolidatedApprovalsBetaConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var ContactApprovalsHttpServicePostFilterContactApprovalsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/approvals-private/contacts/filter",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: [{
                            "contactInfo": {
                                "id": "0855e686-d31e-4216-b3dd-5d66161d5312",
                                "creatorBbId": "john@example.com",
                                "data": {
                                    "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                                    "name": "John Doe",
                                    "alias": "John",
                                    "category": "Employee",
                                    "contactPerson": "Jane Doe",
                                    "phoneNumber": "055512345678",
                                    "emailId": "john@example.com",
                                    "addressLine1": "Backbase enterprise",
                                    "addressLine2": "",
                                    "streetName": "Jacob Bontiusplaats 9",
                                    "town": "Amsterdam",
                                    "postCode": "1018 LL",
                                    "countrySubDivision": "North Holland",
                                    "country": "NL",
                                    "accounts": [{
                                            "name": "Jane Doe",
                                            "alias": "Jane",
                                            "accountType": "SAVINGS",
                                            "IBAN": "FI21 1234 5600 0007 85",
                                            "bankName": "Test Bank",
                                            "bankAddressLine1": "QA Bank",
                                            "bankAddressLine2": "",
                                            "bankStreetName": "Jodenbreestraat 96",
                                            "bankTown": "Amsterdam",
                                            "bankPostCode": "1011NS",
                                            "bankCountrySubDivision": "North Holland",
                                            "bankCountry": "NL",
                                            "accountHolderAddressLine1": "",
                                            "accountHolderAddressLine2": "",
                                            "accountHolderStreetName": "Woestduinstraat 114-3",
                                            "accountHolderTown": "Amsterdam",
                                            "accountHolderPostCode": "1059 SP",
                                            "accountHolderCountrySubDivision": "North Holland",
                                            "accountHolderCountry": "NL"
                                        }],
                                    "accessContextScope": "SA"
                                },
                                "creationTime": "2017-05-12T14:33:13.452Z",
                                "action": "CREATE",
                                "status": "ENTERED"
                            },
                            "approvalInfo": {
                                "id": "b3e4692d-6772-4fb2-9446-b8f4607f49b1",
                                "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                                "userFullName": "Paddy Brian",
                                "externalUserId": "paddy-brian",
                                "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                "itemId": "0855e686-d31e-4216-b3dd-5d66161d5312",
                                "resource": "Contacts",
                                "function": "Contacts",
                                "status": "PENDING",
                                "createdAt": "2018-07-22T13:44:02Z",
                                "records": [{
                                        "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                        "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                                        "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                        "externalUserId": "robin-green",
                                        "userFullName": "Robin Green",
                                        "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                        "status": "APPROVED",
                                        "createdAt": "2018-01-22T13:44:02Z"
                                    }],
                                "approvalTypes": [{
                                        "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                        "name": "A",
                                        "description": "1st approval",
                                        "rank": 100
                                    }, {
                                        "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                        "name": "B",
                                        "description": "2nd approval",
                                        "rank": 101
                                    }],
                                "policy": {
                                    "id": "6546c424-d3b1-4848-bbda-31cd44ab6915",
                                    "name": "Default policy",
                                    "description": "A default policy that requires two approvals of different types: A + B",
                                    "items": [{
                                            "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                            "approvalType": {
                                                "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                                "name": "A",
                                                "description": "1st approval",
                                                "rank": 100
                                            },
                                            "numberOfApprovals": 1
                                        }, {
                                            "approvalTypeId": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                            "approvalType": {
                                                "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                                "name": "B",
                                                "description": "2nd approval",
                                                "rank": 101
                                            },
                                            "numberOfApprovals": 1
                                        }]
                                },
                                "canApprove": true,
                                "canReject": true,
                                "finalApprover": false
                            }
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var ContactApprovalsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/approvals-private/contacts/filter",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: [{
                            "contactInfo": {
                                "id": "0855e686-d31e-4216-b3dd-5d66161d5312",
                                "creatorBbId": "john@example.com",
                                "data": {
                                    "id": "0855e686-d31e-4216-b3dd-5d66161d536d",
                                    "name": "John Doe",
                                    "alias": "John",
                                    "category": "Employee",
                                    "contactPerson": "Jane Doe",
                                    "phoneNumber": "055512345678",
                                    "emailId": "john@example.com",
                                    "addressLine1": "Backbase enterprise",
                                    "addressLine2": "",
                                    "streetName": "Jacob Bontiusplaats 9",
                                    "town": "Amsterdam",
                                    "postCode": "1018 LL",
                                    "countrySubDivision": "North Holland",
                                    "country": "NL",
                                    "accounts": [{
                                            "name": "Jane Doe",
                                            "alias": "Jane",
                                            "accountType": "SAVINGS",
                                            "IBAN": "FI21 1234 5600 0007 85",
                                            "bankName": "Test Bank",
                                            "bankAddressLine1": "QA Bank",
                                            "bankAddressLine2": "",
                                            "bankStreetName": "Jodenbreestraat 96",
                                            "bankTown": "Amsterdam",
                                            "bankPostCode": "1011NS",
                                            "bankCountrySubDivision": "North Holland",
                                            "bankCountry": "NL",
                                            "accountHolderAddressLine1": "",
                                            "accountHolderAddressLine2": "",
                                            "accountHolderStreetName": "Woestduinstraat 114-3",
                                            "accountHolderTown": "Amsterdam",
                                            "accountHolderPostCode": "1059 SP",
                                            "accountHolderCountrySubDivision": "North Holland",
                                            "accountHolderCountry": "NL"
                                        }],
                                    "accessContextScope": "SA"
                                },
                                "creationTime": "2017-05-12T14:33:13.452Z",
                                "action": "CREATE",
                                "status": "ENTERED"
                            },
                            "approvalInfo": {
                                "id": "b3e4692d-6772-4fb2-9446-b8f4607f49b1",
                                "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                                "userFullName": "Paddy Brian",
                                "externalUserId": "paddy-brian",
                                "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                "itemId": "0855e686-d31e-4216-b3dd-5d66161d5312",
                                "resource": "Contacts",
                                "function": "Contacts",
                                "status": "PENDING",
                                "createdAt": "2018-07-22T13:44:02Z",
                                "records": [{
                                        "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                        "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                                        "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                        "externalUserId": "robin-green",
                                        "userFullName": "Robin Green",
                                        "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                        "status": "APPROVED",
                                        "createdAt": "2018-01-22T13:44:02Z"
                                    }],
                                "approvalTypes": [{
                                        "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                        "name": "A",
                                        "description": "1st approval",
                                        "rank": 100
                                    }, {
                                        "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                        "name": "B",
                                        "description": "2nd approval",
                                        "rank": 101
                                    }],
                                "policy": {
                                    "id": "6546c424-d3b1-4848-bbda-31cd44ab6915",
                                    "name": "Default policy",
                                    "description": "A default policy that requires two approvals of different types: A + B",
                                    "items": [{
                                            "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                            "approvalType": {
                                                "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                                "name": "A",
                                                "description": "1st approval",
                                                "rank": 100
                                            },
                                            "numberOfApprovals": 1
                                        }, {
                                            "approvalTypeId": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                            "approvalType": {
                                                "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                                "name": "B",
                                                "description": "2nd approval",
                                                "rank": 101
                                            },
                                            "numberOfApprovals": 1
                                        }]
                                },
                                "canApprove": true,
                                "canReject": true,
                                "finalApprover": false
                            }
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    var EntitlementsApprovalsHttpService = /** @class */ (function () {
        function EntitlementsApprovalsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new ConsolidatedApprovalsBetaConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        EntitlementsApprovalsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        EntitlementsApprovalsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        EntitlementsApprovalsHttpService.prototype.postFilterEntitlementsApprovals = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _postFilterApprovalsRequest = requestParameters["postFilterApprovalsRequest"];
            if (_postFilterApprovalsRequest === null || _postFilterApprovalsRequest === undefined) {
                throw new Error('Required parameter postFilterApprovalsRequest was null or undefined when calling postFilterEntitlementsApprovals.');
            }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/approvals-private/entitlements/filter", _postFilterApprovalsRequest, {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EntitlementsApprovalsHttpService.prototype.postFilterEntitlementsApprovalsUrl = function (requestParameters) {
            var _postFilterApprovalsRequest = requestParameters["postFilterApprovalsRequest"];
            if (_postFilterApprovalsRequest === null || _postFilterApprovalsRequest === undefined) {
                throw new Error('Required parameter postFilterApprovalsRequest was null or undefined when calling postFilterEntitlementsApprovals.');
            }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/approvals-private/entitlements/filter" + (queryString ? "?" + queryString : '');
        };
        return EntitlementsApprovalsHttpService;
    }());
    EntitlementsApprovalsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: EntitlementsApprovalsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: CONSOLIDATED_APPROVALS_BETA_BASE_PATH, optional: true }, { token: ConsolidatedApprovalsBetaConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    EntitlementsApprovalsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: EntitlementsApprovalsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: EntitlementsApprovalsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [CONSOLIDATED_APPROVALS_BETA_BASE_PATH]
                        }] }, { type: ConsolidatedApprovalsBetaConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var EntitlementsApprovalsHttpServicePostFilterEntitlementsApprovalsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/approvals-private/entitlements/filter",
            method: "POST",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var EntitlementsApprovalsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/approvals-private/entitlements/filter",
            method: "POST",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    var PaymentApprovalsHttpService = /** @class */ (function () {
        function PaymentApprovalsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new ConsolidatedApprovalsBetaConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        PaymentApprovalsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        PaymentApprovalsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        PaymentApprovalsHttpService.prototype.postFilterPaymentApprovals = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _postFilterApprovalsRequest = requestParameters["postFilterApprovalsRequest"];
            if (_postFilterApprovalsRequest === null || _postFilterApprovalsRequest === undefined) {
                throw new Error('Required parameter postFilterApprovalsRequest was null or undefined when calling postFilterPaymentApprovals.');
            }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/approvals-private/payments/filter", _postFilterApprovalsRequest, {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentApprovalsHttpService.prototype.postFilterPaymentApprovalsUrl = function (requestParameters) {
            var _postFilterApprovalsRequest = requestParameters["postFilterApprovalsRequest"];
            if (_postFilterApprovalsRequest === null || _postFilterApprovalsRequest === undefined) {
                throw new Error('Required parameter postFilterApprovalsRequest was null or undefined when calling postFilterPaymentApprovals.');
            }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/approvals-private/payments/filter" + (queryString ? "?" + queryString : '');
        };
        return PaymentApprovalsHttpService;
    }());
    PaymentApprovalsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentApprovalsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: CONSOLIDATED_APPROVALS_BETA_BASE_PATH, optional: true }, { token: ConsolidatedApprovalsBetaConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PaymentApprovalsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentApprovalsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentApprovalsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [CONSOLIDATED_APPROVALS_BETA_BASE_PATH]
                        }] }, { type: ConsolidatedApprovalsBetaConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var PaymentApprovalsHttpServicePostFilterPaymentApprovalsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/approvals-private/payments/filter",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: [{
                            "paymentOrderInfo": {
                                "id": "cddf639a-3cbe-4162-a925-dd8909b43bfb",
                                "approvalId": "12aacd0c-2648-4452-b04f-3fc160bda571",
                                "status": "ENTERED",
                                "createdBy": "u0001012",
                                "createdAt": "2022-04-01T11:27:59.416190Z",
                                "updatedBy": "u0001012",
                                "updatedAt": "2022-04-01T11:27:59.416190Z",
                                "actions": ["APPROVE", "REJECT"],
                                "intraLegalEntity": false,
                                "originatorAccountCurrency": "EUR",
                                "originator": {
                                    "name": "vPBxYC",
                                    "role": "DEBTOR",
                                    "postalAddress": {
                                        "addressLine1": "nwRlOk",
                                        "addressLine2": "mzZWeZbz",
                                        "streetName": "vKlNcfHRUUEiJm",
                                        "postCode": "177135",
                                        "town": "gXNt",
                                        "countrySubDivision": "dMptgmoC",
                                        "country": "AQ"
                                    }
                                },
                                "originatorAccount": {
                                    "arrangementId": "903309c5-1b07-4043-b46b-4a022bdb1b41",
                                    "externalArrangementId": "0000000000000001bwdCoVXvNuDrYTSw",
                                    "identification": {
                                        "identification": "LT526319689655711037",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "batchBooking": false,
                                "instructionPriority": "NORM",
                                "requestedExecutionDate": "2022-04-01",
                                "paymentMode": "SINGLE",
                                "paymentType": "SEPA_CREDIT_TRANSFER",
                                "transferTransactionInformation": {
                                    "counterparty": {
                                        "name": "Sleek Copper Shirt",
                                        "role": "CREDITOR"
                                    },
                                    "counterpartyAccount": {
                                        "identification": {
                                            "identification": "IE06YJVA15965129386257",
                                            "schemeName": "IBAN"
                                        }
                                    },
                                    "instructedAmount": {
                                        "amount": "50.00000",
                                        "currencyCode": "EUR"
                                    }
                                },
                                "totalAmount": {
                                    "amount": "50.00000",
                                    "currencyCode": "EUR"
                                }
                            },
                            "approvalInfo": {
                                "id": "12aacd0c-2648-4452-b04f-3fc160bda571",
                                "userId": "2226d9be-4323-40e8-acec-988eab4777f3",
                                "serviceAgreementId": "8a49bc667fe4c35e017fe4e16b1f016a",
                                "itemId": "cddf639a-3cbe-4162-a925-dd8909b43bfb",
                                "dataAccessItemId": "903309c5-1b07-4043-b46b-4a022bdb1b41",
                                "resource": "Payments",
                                "function": "SEPA CT",
                                "status": "PENDING",
                                "canApprove": true,
                                "canReject": true,
                                "finalApprover": false,
                                "createdAt": "2022-04-01T11:27:58.800336Z"
                            }
                        }, {
                            "paymentOrderInfo": {
                                "id": "f4bc422a-1d7d-4a3f-aad8-52882fe2f2dd",
                                "approvalId": "98b07ac0-2360-453b-8dc9-6af7b5228bec",
                                "status": "ENTERED",
                                "createdBy": "u0001012",
                                "createdAt": "2022-04-01T11:28:00.643542Z",
                                "updatedBy": "u0001012",
                                "updatedAt": "2022-04-01T11:28:00.643542Z",
                                "actions": ["APPROVE", "REJECT"],
                                "intraLegalEntity": false,
                                "originatorAccountCurrency": "EUR",
                                "originator": {
                                    "name": "vPBxYC",
                                    "role": "DEBTOR",
                                    "postalAddress": {
                                        "addressLine1": "nwRlOk",
                                        "addressLine2": "mzZWeZbz",
                                        "streetName": "vKlNcfHRUUEiJm",
                                        "postCode": "177135",
                                        "town": "gXNt",
                                        "countrySubDivision": "dMptgmoC",
                                        "country": "AQ"
                                    }
                                },
                                "originatorAccount": {
                                    "arrangementId": "903309c5-1b07-4043-b46b-4a022bdb1b41",
                                    "externalArrangementId": "0000000000000001bwdCoVXvNuDrYTSw",
                                    "identification": {
                                        "identification": "LT526319689655711037",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "batchBooking": false,
                                "instructionPriority": "NORM",
                                "requestedExecutionDate": "2022-04-01",
                                "paymentMode": "SINGLE",
                                "paymentType": "SEPA_CREDIT_TRANSFER",
                                "transferTransactionInformation": {
                                    "counterparty": {
                                        "name": "Sleek Wooden Table",
                                        "role": "CREDITOR"
                                    },
                                    "counterpartyAccount": {
                                        "identification": {
                                            "identification": "SM37C1125812374QXIKVA5ZKH96",
                                            "schemeName": "IBAN"
                                        }
                                    },
                                    "instructedAmount": {
                                        "amount": "50.00000",
                                        "currencyCode": "EUR"
                                    }
                                },
                                "totalAmount": {
                                    "amount": "50.00000",
                                    "currencyCode": "EUR"
                                }
                            },
                            "approvalInfo": {
                                "id": "98b07ac0-2360-453b-8dc9-6af7b5228bec",
                                "userId": "2226d9be-4323-40e8-acec-988eab4777f3",
                                "serviceAgreementId": "8a49bc667fe4c35e017fe4e16cc60172",
                                "itemId": "f4bc422a-1d7d-4a3f-aad8-52882fe2f2dd",
                                "dataAccessItemId": "903309c5-1b07-4043-b46b-4a022bdb1b41",
                                "resource": "Payments",
                                "function": "SEPA CT",
                                "amountDetails": {
                                    "currencyCode": "EUR",
                                    "amount": "50.00000"
                                },
                                "status": "PENDING",
                                "records": [{
                                        "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                        "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                                        "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                        "approvalTypeId": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                        "status": "APPROVED",
                                        "createdAt": "2018-01-22T13:44:02Z"
                                    }],
                                "approvalTypes": [{
                                        "id": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                        "name": "A",
                                        "description": "1st approval",
                                        "rank": 100
                                    }, {
                                        "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                        "name": "B",
                                        "description": "2nd approval",
                                        "rank": 101
                                    }],
                                "policy": {
                                    "id": "6546c424-d3b1-4848-bbda-31cd44ab6915",
                                    "name": "Default policy",
                                    "description": "A default policy that requires two approvals of different types: A + B",
                                    "items": [{
                                            "approvalTypeId": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                            "approvalType": {
                                                "id": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                                "name": "A",
                                                "description": "1st approval",
                                                "rank": 100
                                            },
                                            "numberOfApprovals": 1
                                        }, {
                                            "approvalTypeId": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                            "approvalType": {
                                                "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                                "name": "B",
                                                "description": "2nd approval",
                                                "rank": 101
                                            },
                                            "numberOfApprovals": 1
                                        }]
                                },
                                "canApprove": true,
                                "canReject": true,
                                "finalApprover": false,
                                "createdAt": "2022-04-01T11:28:00.418198Z"
                            }
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var PaymentApprovalsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/approvals-private/payments/filter",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: [{
                            "paymentOrderInfo": {
                                "id": "cddf639a-3cbe-4162-a925-dd8909b43bfb",
                                "approvalId": "12aacd0c-2648-4452-b04f-3fc160bda571",
                                "status": "ENTERED",
                                "createdBy": "u0001012",
                                "createdAt": "2022-04-01T11:27:59.416190Z",
                                "updatedBy": "u0001012",
                                "updatedAt": "2022-04-01T11:27:59.416190Z",
                                "actions": ["APPROVE", "REJECT"],
                                "intraLegalEntity": false,
                                "originatorAccountCurrency": "EUR",
                                "originator": {
                                    "name": "vPBxYC",
                                    "role": "DEBTOR",
                                    "postalAddress": {
                                        "addressLine1": "nwRlOk",
                                        "addressLine2": "mzZWeZbz",
                                        "streetName": "vKlNcfHRUUEiJm",
                                        "postCode": "177135",
                                        "town": "gXNt",
                                        "countrySubDivision": "dMptgmoC",
                                        "country": "AQ"
                                    }
                                },
                                "originatorAccount": {
                                    "arrangementId": "903309c5-1b07-4043-b46b-4a022bdb1b41",
                                    "externalArrangementId": "0000000000000001bwdCoVXvNuDrYTSw",
                                    "identification": {
                                        "identification": "LT526319689655711037",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "batchBooking": false,
                                "instructionPriority": "NORM",
                                "requestedExecutionDate": "2022-04-01",
                                "paymentMode": "SINGLE",
                                "paymentType": "SEPA_CREDIT_TRANSFER",
                                "transferTransactionInformation": {
                                    "counterparty": {
                                        "name": "Sleek Copper Shirt",
                                        "role": "CREDITOR"
                                    },
                                    "counterpartyAccount": {
                                        "identification": {
                                            "identification": "IE06YJVA15965129386257",
                                            "schemeName": "IBAN"
                                        }
                                    },
                                    "instructedAmount": {
                                        "amount": "50.00000",
                                        "currencyCode": "EUR"
                                    }
                                },
                                "totalAmount": {
                                    "amount": "50.00000",
                                    "currencyCode": "EUR"
                                }
                            },
                            "approvalInfo": {
                                "id": "12aacd0c-2648-4452-b04f-3fc160bda571",
                                "userId": "2226d9be-4323-40e8-acec-988eab4777f3",
                                "serviceAgreementId": "8a49bc667fe4c35e017fe4e16b1f016a",
                                "itemId": "cddf639a-3cbe-4162-a925-dd8909b43bfb",
                                "dataAccessItemId": "903309c5-1b07-4043-b46b-4a022bdb1b41",
                                "resource": "Payments",
                                "function": "SEPA CT",
                                "status": "PENDING",
                                "canApprove": true,
                                "canReject": true,
                                "finalApprover": false,
                                "createdAt": "2022-04-01T11:27:58.800336Z"
                            }
                        }, {
                            "paymentOrderInfo": {
                                "id": "f4bc422a-1d7d-4a3f-aad8-52882fe2f2dd",
                                "approvalId": "98b07ac0-2360-453b-8dc9-6af7b5228bec",
                                "status": "ENTERED",
                                "createdBy": "u0001012",
                                "createdAt": "2022-04-01T11:28:00.643542Z",
                                "updatedBy": "u0001012",
                                "updatedAt": "2022-04-01T11:28:00.643542Z",
                                "actions": ["APPROVE", "REJECT"],
                                "intraLegalEntity": false,
                                "originatorAccountCurrency": "EUR",
                                "originator": {
                                    "name": "vPBxYC",
                                    "role": "DEBTOR",
                                    "postalAddress": {
                                        "addressLine1": "nwRlOk",
                                        "addressLine2": "mzZWeZbz",
                                        "streetName": "vKlNcfHRUUEiJm",
                                        "postCode": "177135",
                                        "town": "gXNt",
                                        "countrySubDivision": "dMptgmoC",
                                        "country": "AQ"
                                    }
                                },
                                "originatorAccount": {
                                    "arrangementId": "903309c5-1b07-4043-b46b-4a022bdb1b41",
                                    "externalArrangementId": "0000000000000001bwdCoVXvNuDrYTSw",
                                    "identification": {
                                        "identification": "LT526319689655711037",
                                        "schemeName": "IBAN"
                                    }
                                },
                                "batchBooking": false,
                                "instructionPriority": "NORM",
                                "requestedExecutionDate": "2022-04-01",
                                "paymentMode": "SINGLE",
                                "paymentType": "SEPA_CREDIT_TRANSFER",
                                "transferTransactionInformation": {
                                    "counterparty": {
                                        "name": "Sleek Wooden Table",
                                        "role": "CREDITOR"
                                    },
                                    "counterpartyAccount": {
                                        "identification": {
                                            "identification": "SM37C1125812374QXIKVA5ZKH96",
                                            "schemeName": "IBAN"
                                        }
                                    },
                                    "instructedAmount": {
                                        "amount": "50.00000",
                                        "currencyCode": "EUR"
                                    }
                                },
                                "totalAmount": {
                                    "amount": "50.00000",
                                    "currencyCode": "EUR"
                                }
                            },
                            "approvalInfo": {
                                "id": "98b07ac0-2360-453b-8dc9-6af7b5228bec",
                                "userId": "2226d9be-4323-40e8-acec-988eab4777f3",
                                "serviceAgreementId": "8a49bc667fe4c35e017fe4e16cc60172",
                                "itemId": "f4bc422a-1d7d-4a3f-aad8-52882fe2f2dd",
                                "dataAccessItemId": "903309c5-1b07-4043-b46b-4a022bdb1b41",
                                "resource": "Payments",
                                "function": "SEPA CT",
                                "amountDetails": {
                                    "currencyCode": "EUR",
                                    "amount": "50.00000"
                                },
                                "status": "PENDING",
                                "records": [{
                                        "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                        "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                                        "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                        "approvalTypeId": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                        "status": "APPROVED",
                                        "createdAt": "2018-01-22T13:44:02Z"
                                    }],
                                "approvalTypes": [{
                                        "id": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                        "name": "A",
                                        "description": "1st approval",
                                        "rank": 100
                                    }, {
                                        "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                        "name": "B",
                                        "description": "2nd approval",
                                        "rank": 101
                                    }],
                                "policy": {
                                    "id": "6546c424-d3b1-4848-bbda-31cd44ab6915",
                                    "name": "Default policy",
                                    "description": "A default policy that requires two approvals of different types: A + B",
                                    "items": [{
                                            "approvalTypeId": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                            "approvalType": {
                                                "id": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                                "name": "A",
                                                "description": "1st approval",
                                                "rank": 100
                                            },
                                            "numberOfApprovals": 1
                                        }, {
                                            "approvalTypeId": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                            "approvalType": {
                                                "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                                "name": "B",
                                                "description": "2nd approval",
                                                "rank": 101
                                            },
                                            "numberOfApprovals": 1
                                        }]
                                },
                                "canApprove": true,
                                "canReject": true,
                                "finalApprover": false,
                                "createdAt": "2022-04-01T11:28:00.418198Z"
                            }
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    exports.AccessContextScope = AccessContextScope;
    exports.ActiveContactStatus = ActiveContactStatus;
    exports.ApprovalRequestAction = ApprovalRequestAction;
    exports.ApprovalRequestStatus = ApprovalRequestStatus;
    exports.ApprovalStatus = ApprovalStatus;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.CONSOLIDATED_APPROVALS_BETA_BASE_PATH = CONSOLIDATED_APPROVALS_BETA_BASE_PATH;
    exports.ChargeBearer = ChargeBearer;
    exports.ConsolidatedApprovalsBetaApiModule = ConsolidatedApprovalsBetaApiModule;
    exports.ConsolidatedApprovalsBetaConfiguration = ConsolidatedApprovalsBetaConfiguration;
    exports.ConsolidatedApprovalsCountHttpService = ConsolidatedApprovalsCountHttpService;
    exports.ConsolidatedApprovalsCountHttpServiceGetApprovalsCountMocksProvider = ConsolidatedApprovalsCountHttpServiceGetApprovalsCountMocksProvider;
    exports.ConsolidatedApprovalsCountHttpServiceMocksProvider = ConsolidatedApprovalsCountHttpServiceMocksProvider;
    exports.ContactApprovalsHttpService = ContactApprovalsHttpService;
    exports.ContactApprovalsHttpServiceMocksProvider = ContactApprovalsHttpServiceMocksProvider;
    exports.ContactApprovalsHttpServicePostFilterContactApprovalsMocksProvider = ContactApprovalsHttpServicePostFilterContactApprovalsMocksProvider;
    exports.EntitlementsApprovalsHttpService = EntitlementsApprovalsHttpService;
    exports.EntitlementsApprovalsHttpServiceMocksProvider = EntitlementsApprovalsHttpServiceMocksProvider;
    exports.EntitlementsApprovalsHttpServicePostFilterEntitlementsApprovalsMocksProvider = EntitlementsApprovalsHttpServicePostFilterEntitlementsApprovalsMocksProvider;
    exports.InstructionPriority = InstructionPriority;
    exports.InvolvedPartyRole = InvolvedPartyRole;
    exports.LogicalOperator = LogicalOperator;
    exports.PaymentAction = PaymentAction;
    exports.PaymentApprovalsHttpService = PaymentApprovalsHttpService;
    exports.PaymentApprovalsHttpServiceMocksProvider = PaymentApprovalsHttpServiceMocksProvider;
    exports.PaymentApprovalsHttpServicePostFilterPaymentApprovalsMocksProvider = PaymentApprovalsHttpServicePostFilterPaymentApprovalsMocksProvider;
    exports.PaymentMode = PaymentMode;
    exports.RecordStatus = RecordStatus;
    exports.SchemeNames = SchemeNames;
    exports.Status = Status;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-consolidated-approvals-beta-http-ang.umd.js.map
