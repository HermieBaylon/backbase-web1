import { OnChanges, Type } from '@angular/core';
import { LoanInfoDataConfig, LoanInfoDataItem, LoanInfoItem, LoanInfoTitleBase, LoanItemCustomBase } from './loan-info.model';
import { Loan } from '../models/loan.model';
import { LoanConfigBaseComponent } from '../base/loan-config-base.component';
import * as i0 from "@angular/core";
export declare class LoanInfoComponent<T extends Loan, U extends LoanItemCustomBase<T>> extends LoanConfigBaseComponent<T, LoanInfoDataConfig<T, U>> implements OnChanges {
    /**
     * Whether currency local should be transformed to symbol
     */
    isCurrencySymbolUsed: boolean;
    /**
     * Filtered info sections
     */
    sections: LoanInfoDataConfig<T, U>;
    ngOnChanges(): void;
    /**
     * Typed reference to info item
     *
     * @param item
     */
    getTypedDataItem(item: LoanInfoItem<T, U>): LoanInfoDataItem<T>;
    /**
     * Typed reference to custom item component ref
     *
     * @param item
     */
    getItemComponentRef(item: LoanInfoItem<T, U>): Type<U>;
    /**
     * Track by method used by *ngFor directive
     *
     * @param _index
     * @param title
     */
    trackByTitle<Y extends LoanInfoTitleBase>(_index: number, { title }: Y): string;
    /**
     * Filter sections by the items.
     * There are two options:
     * - check for the `showItem` function execution
     * - check the property value by `fieldKey`
     *
     * In case if all items in the section do not fit the condition, the sections will be omitted
     *
     * @private
     */
    private filterSections;
    static ɵfac: i0.ɵɵFactoryDeclaration<LoanInfoComponent<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LoanInfoComponent<any, any>, "bb-loan-info", never, { "isCurrencySymbolUsed": "isCurrencySymbolUsed"; }, {}, never, never>;
}
