import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const RuleType = {
    OneWay: 'one-way',
    TwoWay: 'two-way'
};

var SweepScheduleRuleMonthOptions;
(function (SweepScheduleRuleMonthOptions) {
    SweepScheduleRuleMonthOptions.MonthRepeatEnum = {
        DayOfTheMonth: 'day-of-the-month',
        WeekDayOfTheMonth: 'week-day-of-the-month'
    };
})(SweepScheduleRuleMonthOptions || (SweepScheduleRuleMonthOptions = {}));

var SweepScheduleRuleWeekOptions;
(function (SweepScheduleRuleWeekOptions) {
    SweepScheduleRuleWeekOptions.WeekRepeatDayEnum = {
        NUMBER_0: 0,
        NUMBER_1: 1,
        NUMBER_2: 2,
        NUMBER_3: 3,
        NUMBER_4: 4,
        NUMBER_5: 5,
        NUMBER_6: 6
    };
})(SweepScheduleRuleWeekOptions || (SweepScheduleRuleWeekOptions = {}));

const CASH_MANAGEMENT_BASE_PATH = new InjectionToken('CASH_MANAGEMENT_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class CashManagementConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module CashManagementConfiguration');

class CashManagementApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('CashManagementApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: CashManagementApiModule,
            providers: [{ provide: CashManagementConfiguration, useFactory: configurationFactory }]
        };
    }
}
CashManagementApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CashManagementApiModule, deps: [{ token: CashManagementApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: CashManagementConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
CashManagementApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CashManagementApiModule });
CashManagementApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CashManagementApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CashManagementApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: CashManagementApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: CashManagementConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class SweepRulesHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new CashManagementConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getSweepRuleBySweepId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _sweepId = requestParameters["sweepId"];
        if (_sweepId === null || _sweepId === undefined) {
            throw new Error('Required parameter sweepId was null or undefined when calling getSweepRuleBySweepId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getSweepRuleBySweepIdUrl(requestParameters) {
        const _sweepId = requestParameters["sweepId"];
        if (_sweepId === null || _sweepId === undefined) {
            throw new Error('Required parameter sweepId was null or undefined when calling getSweepRuleBySweepId.');
        }
        return `${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}`;
    }
    getSweeprules(requestParameters, observe = 'body', reportProgress = false, options) {
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/sweep-rules`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getSweeprulesUrl(requestParameters) {
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/sweep-rules${queryString ? `?${queryString}` : ''}`;
    }
    postCreateSweepRule(requestParameters, observe = 'body', reportProgress = false, options) {
        const _createSweepRuleRequest = requestParameters["createSweepRuleRequest"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/sweep-rules`, _createSweepRuleRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postCreateSweepRuleUrl(requestParameters) {
        const _createSweepRuleRequest = requestParameters["createSweepRuleRequest"];
        return `${this.configuration.basePath}/client-api/v2/sweep-rules`;
    }
    postSweepRuleActivationBySweepId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _sweepId = requestParameters["sweepId"];
        if (_sweepId === null || _sweepId === undefined) {
            throw new Error('Required parameter sweepId was null or undefined when calling postSweepRuleActivationBySweepId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}/activate`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postSweepRuleActivationBySweepIdUrl(requestParameters) {
        const _sweepId = requestParameters["sweepId"];
        if (_sweepId === null || _sweepId === undefined) {
            throw new Error('Required parameter sweepId was null or undefined when calling postSweepRuleActivationBySweepId.');
        }
        return `${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}/activate`;
    }
    postSweepRuleCancelingBySweepId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _sweepId = requestParameters["sweepId"];
        if (_sweepId === null || _sweepId === undefined) {
            throw new Error('Required parameter sweepId was null or undefined when calling postSweepRuleCancelingBySweepId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}/cancel`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postSweepRuleCancelingBySweepIdUrl(requestParameters) {
        const _sweepId = requestParameters["sweepId"];
        if (_sweepId === null || _sweepId === undefined) {
            throw new Error('Required parameter sweepId was null or undefined when calling postSweepRuleCancelingBySweepId.');
        }
        return `${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}/cancel`;
    }
    postSweepRulePausingBySweepId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _sweepId = requestParameters["sweepId"];
        if (_sweepId === null || _sweepId === undefined) {
            throw new Error('Required parameter sweepId was null or undefined when calling postSweepRulePausingBySweepId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}/pause`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postSweepRulePausingBySweepIdUrl(requestParameters) {
        const _sweepId = requestParameters["sweepId"];
        if (_sweepId === null || _sweepId === undefined) {
            throw new Error('Required parameter sweepId was null or undefined when calling postSweepRulePausingBySweepId.');
        }
        return `${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}/pause`;
    }
}
SweepRulesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SweepRulesHttpService, deps: [{ token: i1.HttpClient }, { token: CASH_MANAGEMENT_BASE_PATH, optional: true }, { token: CashManagementConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
SweepRulesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SweepRulesHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SweepRulesHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CASH_MANAGEMENT_BASE_PATH]
                }] }, { type: CashManagementConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const SweepRulesHttpServiceGetSweepRuleBySweepIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/sweep-rules/{sweepId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": 135864,
                    "name": "Investment IS 605",
                    "description": "Two-way daily investment sweep that never expires.",
                    "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                    "targetAccountBban": "680BCNMXVMFAY60",
                    "lowerBoundAmount": 10000,
                    "upperBoundAmount": 12500,
                    "status": "active",
                    "ruleType": "two-way",
                    "schedule": {
                        "frequency": "EvryDay(1)",
                        "dayOptions": {
                            "startingAtTime": 540,
                            "intradayRepeat": {
                                "everyMinutes": 60,
                                "endingAtTime": 1260
                            }
                        }
                    },
                    "startDate": "2019-04-10T15:52:27.218Z",
                    "createdAt": "2019-04-09T15:52:27.218Z",
                    "createdBy": "Denys Haidash"
                }
            },
            {
                status: 200,
                body: {
                    "lowerBoundAmount": 6.027456183070403,
                    "additions": {
                        "key": "additions"
                    },
                    "targetAccountBban": "targetAccountBban",
                    "description": "description",
                    "sweptAccountBban": "sweptAccountBban",
                    "expiryDate": "2000-01-23T04:56:07.000+00:00",
                    "schedule": {
                        "dayOptions": {
                            "intradayRepeat": {
                                "endingAtTime": 2.3021358869347655,
                                "everyMinutes": 5.637376656633329
                            },
                            "startingAtTime": 5.962133916683182
                        },
                        "monthOptions": {
                            "startingAtTime": 3.616076749251911,
                            "monthRepeat": "day-of-the-month"
                        },
                        "frequency": "frequency",
                        "weekOptions": {
                            "weekRepeatDay": 9.301444243932576,
                            "startingAtTime": 7.061401241503109
                        }
                    },
                    "createdAt": "2000-01-23T04:56:07.000+00:00",
                    "createdBy": "createdBy",
                    "upperBoundAmount": 1.4658129805029452,
                    "name": "name",
                    "id": 0.8008281904610115,
                    "startDate": "2000-01-23T04:56:07.000+00:00",
                    "status": "status"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const SweepRulesHttpServiceGetSweeprulesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/sweep-rules",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "items": [{
                            "id": 135864,
                            "name": "Investment IS 605",
                            "description": "Two-way daily investment sweep that never expires.",
                            "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                            "targetAccountBban": "680BCNMXVMFAY60",
                            "lowerBoundAmount": 10000,
                            "upperBoundAmount": 12500,
                            "status": "entered",
                            "ruleType": "two-way",
                            "schedule": {
                                "frequency": "EvryDay(1)",
                                "dayOptions": {
                                    "startingAtTime": 540,
                                    "intradayRepeat": {
                                        "everyMinutes": 60,
                                        "endingAtTime": 1260
                                    }
                                }
                            },
                            "startDate": "2019-04-10T15:52:27.218Z",
                            "createdAt": "2019-04-09T15:52:27.218Z",
                            "createdBy": "Anna Hrechana"
                        }, {
                            "id": 246975,
                            "name": "Current CS 16",
                            "description": "Two-way monthly sweep between current accounts that expires today.",
                            "sweptAccountBban": "TRIO0212471066",
                            "targetAccountBban": "FR596129172765GE6UQ2U8TYD56",
                            "lowerBoundAmount": 500,
                            "upperBoundAmount": 1750,
                            "status": "active",
                            "ruleType": "two-way",
                            "schedule": {
                                "frequency": "EvryMonth(1)",
                                "monthOptions": {
                                    "startingAtTime": 720,
                                    "monthRepeat": "week-day-of-the-month"
                                }
                            },
                            "startDate": "2019-04-10T16:24:37.463Z",
                            "createdAt": "2019-04-09T16:24:37.463Z",
                            "createdBy": "Serhii Koshman"
                        }, {
                            "id": 137731,
                            "name": "Loan LS 31",
                            "description": "Loan sweep that takes place each 4 weeks on Sundays until manually stopped.",
                            "sweptAccountBban": "FR596129172765GE6UQ2U8TYD56",
                            "targetAccountBban": "6129172765GE6UQ2U8TYD84",
                            "upperBoundAmount": 5000,
                            "status": "paused",
                            "ruleType": "one-way",
                            "schedule": {
                                "frequency": "EvryWeek(4)",
                                "weekOptions": {
                                    "startingAtTime": 0,
                                    "weekRepeatDay": 0
                                }
                            },
                            "startDate": "2019-01-01T16:24:37.463Z",
                            "createdAt": "2019-01-01T16:23:37.463Z",
                            "createdBy": "Marian Kitsenko"
                        }, {
                            "id": 225547,
                            "name": "Savings SS 24",
                            "description": "One-time one-way sweep to accumulate savings performed on a daily basis.",
                            "sweptAccountBban": "FR596129172765GE6UQ2U8TYD56",
                            "targetAccountBban": "TRIO0212471066",
                            "upperBoundAmount": 1100,
                            "status": "rejected",
                            "ruleType": "one-way",
                            "schedule": {
                                "frequency": "EvryDay(1)",
                                "dayOptions": {
                                    "startingAtTime": 30,
                                    "intradayRepeat": {
                                        "everyMinutes": 60,
                                        "endingAtTime": 30
                                    }
                                }
                            },
                            "startDate": "2019-04-11T08:10:18.591Z",
                            "expiryDate": "2019-04-11T20:59:59.999Z",
                            "createdAt": "2019-04-10T08:10:18.591Z",
                            "createdBy": "Dmytro Topchii"
                        }, {
                            "id": 110580,
                            "name": "Debit SD 350",
                            "description": "Maintenance sweep to handle debit card account set to repeat once a week starting from next month.",
                            "sweptAccountBban": "FR596129172765GE6UQ2U8TYD56",
                            "targetAccountBban": "6129172765GE6UQ2U8TYD84",
                            "lowerBoundAmount": 1000,
                            "status": "cancelled",
                            "ruleType": "one-way",
                            "schedule": {
                                "frequency": "EvryDay(7)",
                                "dayOptions": {
                                    "startingAtTime": 540
                                }
                            },
                            "startDate": "2019-05-10T21:00:00.000Z",
                            "expiryDate": "2019-05-11T20:59:59.999Z",
                            "createdAt": "2019-05-09T21:00:00.000Z",
                            "createdBy": "Serhii Sobur"
                        }, {
                            "id": 190783,
                            "name": "Debit 500",
                            "description": "Maintenance sweep to handle debit card account set to repeat every 5 days starting from next month.",
                            "sweptAccountBban": "FR596129172765GE6UQ2U8TYD56",
                            "targetAccountBban": "6129172765GE6UQ2U8TYD84",
                            "lowerBoundAmount": 500,
                            "status": "processing",
                            "ruleType": "one-way",
                            "schedule": {
                                "frequency": "EvryDay(5)",
                                "dayOptions": {
                                    "startingAtTime": 540
                                }
                            },
                            "startDate": "2019-05-10T21:00:00.000Z",
                            "expiryDate": "2019-05-11T20:59:59.999Z",
                            "createdAt": "2019-05-09T21:00:00.000Z",
                            "createdBy": "Yevhen Lubianov"
                        }, {
                            "id": 256076,
                            "name": "Outdated CS 3",
                            "description": "Two-way monthly sweep between current accounts that have been expired.",
                            "sweptAccountBban": "TRIO0212471066",
                            "targetAccountBban": "FR596129172765GE6UQ2U8TYD56",
                            "lowerBoundAmount": 500,
                            "upperBoundAmount": 1750,
                            "status": "expired",
                            "ruleType": "two-way",
                            "schedule": {
                                "frequency": "EvryMonth(1)",
                                "monthOptions": {
                                    "startingAtTime": 720,
                                    "monthRepeat": "week-day-of-the-month"
                                }
                            },
                            "startDate": "2019-03-10T16:24:37.463Z",
                            "expiryDate": "2019-04-10T16:24:37.463Z",
                            "createdAt": "2019-03-09T16:24:37.463Z",
                            "createdBy": "Yevhenii Holub"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const SweepRulesHttpServicePostCreateSweepRuleMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/sweep-rules",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": 16250
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const SweepRulesHttpServicePostSweepRuleActivationBySweepIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/sweep-rules/{sweepId}/activate",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": 135864,
                    "name": "Investment IS 605",
                    "description": "Two-way daily investment sweep that never expires.",
                    "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                    "targetAccountBban": "680BCNMXVMFAY60",
                    "lowerBoundAmount": 10000,
                    "upperBoundAmount": 12500,
                    "status": "active",
                    "ruleType": "two-way",
                    "schedule": {
                        "frequency": "EvryDay(1)",
                        "dayOptions": {
                            "startingAtTime": 540,
                            "intradayRepeat": {
                                "everyMinutes": 60,
                                "endingAtTime": 1260
                            }
                        }
                    },
                    "startDate": "2019-04-10T15:52:27.218Z",
                    "createdAt": "2019-04-09T15:52:27.218Z",
                    "createdBy": "Denys Haidash"
                }
            },
            {
                status: 200,
                body: {
                    "lowerBoundAmount": 6.027456183070403,
                    "additions": {
                        "key": "additions"
                    },
                    "targetAccountBban": "targetAccountBban",
                    "description": "description",
                    "sweptAccountBban": "sweptAccountBban",
                    "expiryDate": "2000-01-23T04:56:07.000+00:00",
                    "schedule": {
                        "dayOptions": {
                            "intradayRepeat": {
                                "endingAtTime": 2.3021358869347655,
                                "everyMinutes": 5.637376656633329
                            },
                            "startingAtTime": 5.962133916683182
                        },
                        "monthOptions": {
                            "startingAtTime": 3.616076749251911,
                            "monthRepeat": "day-of-the-month"
                        },
                        "frequency": "frequency",
                        "weekOptions": {
                            "weekRepeatDay": 9.301444243932576,
                            "startingAtTime": 7.061401241503109
                        }
                    },
                    "createdAt": "2000-01-23T04:56:07.000+00:00",
                    "createdBy": "createdBy",
                    "upperBoundAmount": 1.4658129805029452,
                    "name": "name",
                    "id": 0.8008281904610115,
                    "startDate": "2000-01-23T04:56:07.000+00:00",
                    "status": "status"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const SweepRulesHttpServicePostSweepRuleCancelingBySweepIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/sweep-rules/{sweepId}/cancel",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": 135864,
                    "name": "Investment IS 605",
                    "description": "Two-way daily investment sweep that never expires.",
                    "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                    "targetAccountBban": "680BCNMXVMFAY60",
                    "lowerBoundAmount": 10000,
                    "upperBoundAmount": 12500,
                    "status": "cancel",
                    "ruleType": "two-way",
                    "schedule": {
                        "frequency": "EvryDay(1)",
                        "dayOptions": {
                            "startingAtTime": 540,
                            "intradayRepeat": {
                                "everyMinutes": 60,
                                "endingAtTime": 1260
                            }
                        }
                    },
                    "startDate": "2019-04-10T15:52:27.218Z",
                    "createdAt": "2019-04-09T15:52:27.218Z",
                    "createdBy": "Denys Haidash"
                }
            },
            {
                status: 200,
                body: {
                    "lowerBoundAmount": 6.027456183070403,
                    "additions": {
                        "key": "additions"
                    },
                    "targetAccountBban": "targetAccountBban",
                    "description": "description",
                    "sweptAccountBban": "sweptAccountBban",
                    "expiryDate": "2000-01-23T04:56:07.000+00:00",
                    "schedule": {
                        "dayOptions": {
                            "intradayRepeat": {
                                "endingAtTime": 2.3021358869347655,
                                "everyMinutes": 5.637376656633329
                            },
                            "startingAtTime": 5.962133916683182
                        },
                        "monthOptions": {
                            "startingAtTime": 3.616076749251911,
                            "monthRepeat": "day-of-the-month"
                        },
                        "frequency": "frequency",
                        "weekOptions": {
                            "weekRepeatDay": 9.301444243932576,
                            "startingAtTime": 7.061401241503109
                        }
                    },
                    "createdAt": "2000-01-23T04:56:07.000+00:00",
                    "createdBy": "createdBy",
                    "upperBoundAmount": 1.4658129805029452,
                    "name": "name",
                    "id": 0.8008281904610115,
                    "startDate": "2000-01-23T04:56:07.000+00:00",
                    "status": "status"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const SweepRulesHttpServicePostSweepRulePausingBySweepIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/sweep-rules/{sweepId}/pause",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": 135864,
                    "name": "Investment IS 605",
                    "description": "Two-way daily investment sweep that never expires.",
                    "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                    "targetAccountBban": "680BCNMXVMFAY60",
                    "lowerBoundAmount": 10000,
                    "upperBoundAmount": 12500,
                    "status": "pause",
                    "ruleType": "two-way",
                    "schedule": {
                        "frequency": "EvryDay(1)",
                        "dayOptions": {
                            "startingAtTime": 540,
                            "intradayRepeat": {
                                "everyMinutes": 60,
                                "endingAtTime": 1260
                            }
                        }
                    },
                    "startDate": "2019-04-10T15:52:27.218Z",
                    "createdAt": "2019-04-09T15:52:27.218Z",
                    "createdBy": "Denys Haidash"
                }
            },
            {
                status: 200,
                body: {
                    "lowerBoundAmount": 6.027456183070403,
                    "additions": {
                        "key": "additions"
                    },
                    "targetAccountBban": "targetAccountBban",
                    "description": "description",
                    "sweptAccountBban": "sweptAccountBban",
                    "expiryDate": "2000-01-23T04:56:07.000+00:00",
                    "schedule": {
                        "dayOptions": {
                            "intradayRepeat": {
                                "endingAtTime": 2.3021358869347655,
                                "everyMinutes": 5.637376656633329
                            },
                            "startingAtTime": 5.962133916683182
                        },
                        "monthOptions": {
                            "startingAtTime": 3.616076749251911,
                            "monthRepeat": "day-of-the-month"
                        },
                        "frequency": "frequency",
                        "weekOptions": {
                            "weekRepeatDay": 9.301444243932576,
                            "startingAtTime": 7.061401241503109
                        }
                    },
                    "createdAt": "2000-01-23T04:56:07.000+00:00",
                    "createdBy": "createdBy",
                    "upperBoundAmount": 1.4658129805029452,
                    "name": "name",
                    "id": 0.8008281904610115,
                    "startDate": "2000-01-23T04:56:07.000+00:00",
                    "status": "status"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const SweepRulesHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/sweep-rules/{sweepId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": 135864,
                    "name": "Investment IS 605",
                    "description": "Two-way daily investment sweep that never expires.",
                    "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                    "targetAccountBban": "680BCNMXVMFAY60",
                    "lowerBoundAmount": 10000,
                    "upperBoundAmount": 12500,
                    "status": "active",
                    "ruleType": "two-way",
                    "schedule": {
                        "frequency": "EvryDay(1)",
                        "dayOptions": {
                            "startingAtTime": 540,
                            "intradayRepeat": {
                                "everyMinutes": 60,
                                "endingAtTime": 1260
                            }
                        }
                    },
                    "startDate": "2019-04-10T15:52:27.218Z",
                    "createdAt": "2019-04-09T15:52:27.218Z",
                    "createdBy": "Denys Haidash"
                }
            },
            {
                status: 200,
                body: {
                    "lowerBoundAmount": 6.027456183070403,
                    "additions": {
                        "key": "additions"
                    },
                    "targetAccountBban": "targetAccountBban",
                    "description": "description",
                    "sweptAccountBban": "sweptAccountBban",
                    "expiryDate": "2000-01-23T04:56:07.000+00:00",
                    "schedule": {
                        "dayOptions": {
                            "intradayRepeat": {
                                "endingAtTime": 2.3021358869347655,
                                "everyMinutes": 5.637376656633329
                            },
                            "startingAtTime": 5.962133916683182
                        },
                        "monthOptions": {
                            "startingAtTime": 3.616076749251911,
                            "monthRepeat": "day-of-the-month"
                        },
                        "frequency": "frequency",
                        "weekOptions": {
                            "weekRepeatDay": 9.301444243932576,
                            "startingAtTime": 7.061401241503109
                        }
                    },
                    "createdAt": "2000-01-23T04:56:07.000+00:00",
                    "createdBy": "createdBy",
                    "upperBoundAmount": 1.4658129805029452,
                    "name": "name",
                    "id": 0.8008281904610115,
                    "startDate": "2000-01-23T04:56:07.000+00:00",
                    "status": "status"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/sweep-rules",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "items": [{
                            "id": 135864,
                            "name": "Investment IS 605",
                            "description": "Two-way daily investment sweep that never expires.",
                            "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                            "targetAccountBban": "680BCNMXVMFAY60",
                            "lowerBoundAmount": 10000,
                            "upperBoundAmount": 12500,
                            "status": "entered",
                            "ruleType": "two-way",
                            "schedule": {
                                "frequency": "EvryDay(1)",
                                "dayOptions": {
                                    "startingAtTime": 540,
                                    "intradayRepeat": {
                                        "everyMinutes": 60,
                                        "endingAtTime": 1260
                                    }
                                }
                            },
                            "startDate": "2019-04-10T15:52:27.218Z",
                            "createdAt": "2019-04-09T15:52:27.218Z",
                            "createdBy": "Anna Hrechana"
                        }, {
                            "id": 246975,
                            "name": "Current CS 16",
                            "description": "Two-way monthly sweep between current accounts that expires today.",
                            "sweptAccountBban": "TRIO0212471066",
                            "targetAccountBban": "FR596129172765GE6UQ2U8TYD56",
                            "lowerBoundAmount": 500,
                            "upperBoundAmount": 1750,
                            "status": "active",
                            "ruleType": "two-way",
                            "schedule": {
                                "frequency": "EvryMonth(1)",
                                "monthOptions": {
                                    "startingAtTime": 720,
                                    "monthRepeat": "week-day-of-the-month"
                                }
                            },
                            "startDate": "2019-04-10T16:24:37.463Z",
                            "createdAt": "2019-04-09T16:24:37.463Z",
                            "createdBy": "Serhii Koshman"
                        }, {
                            "id": 137731,
                            "name": "Loan LS 31",
                            "description": "Loan sweep that takes place each 4 weeks on Sundays until manually stopped.",
                            "sweptAccountBban": "FR596129172765GE6UQ2U8TYD56",
                            "targetAccountBban": "6129172765GE6UQ2U8TYD84",
                            "upperBoundAmount": 5000,
                            "status": "paused",
                            "ruleType": "one-way",
                            "schedule": {
                                "frequency": "EvryWeek(4)",
                                "weekOptions": {
                                    "startingAtTime": 0,
                                    "weekRepeatDay": 0
                                }
                            },
                            "startDate": "2019-01-01T16:24:37.463Z",
                            "createdAt": "2019-01-01T16:23:37.463Z",
                            "createdBy": "Marian Kitsenko"
                        }, {
                            "id": 225547,
                            "name": "Savings SS 24",
                            "description": "One-time one-way sweep to accumulate savings performed on a daily basis.",
                            "sweptAccountBban": "FR596129172765GE6UQ2U8TYD56",
                            "targetAccountBban": "TRIO0212471066",
                            "upperBoundAmount": 1100,
                            "status": "rejected",
                            "ruleType": "one-way",
                            "schedule": {
                                "frequency": "EvryDay(1)",
                                "dayOptions": {
                                    "startingAtTime": 30,
                                    "intradayRepeat": {
                                        "everyMinutes": 60,
                                        "endingAtTime": 30
                                    }
                                }
                            },
                            "startDate": "2019-04-11T08:10:18.591Z",
                            "expiryDate": "2019-04-11T20:59:59.999Z",
                            "createdAt": "2019-04-10T08:10:18.591Z",
                            "createdBy": "Dmytro Topchii"
                        }, {
                            "id": 110580,
                            "name": "Debit SD 350",
                            "description": "Maintenance sweep to handle debit card account set to repeat once a week starting from next month.",
                            "sweptAccountBban": "FR596129172765GE6UQ2U8TYD56",
                            "targetAccountBban": "6129172765GE6UQ2U8TYD84",
                            "lowerBoundAmount": 1000,
                            "status": "cancelled",
                            "ruleType": "one-way",
                            "schedule": {
                                "frequency": "EvryDay(7)",
                                "dayOptions": {
                                    "startingAtTime": 540
                                }
                            },
                            "startDate": "2019-05-10T21:00:00.000Z",
                            "expiryDate": "2019-05-11T20:59:59.999Z",
                            "createdAt": "2019-05-09T21:00:00.000Z",
                            "createdBy": "Serhii Sobur"
                        }, {
                            "id": 190783,
                            "name": "Debit 500",
                            "description": "Maintenance sweep to handle debit card account set to repeat every 5 days starting from next month.",
                            "sweptAccountBban": "FR596129172765GE6UQ2U8TYD56",
                            "targetAccountBban": "6129172765GE6UQ2U8TYD84",
                            "lowerBoundAmount": 500,
                            "status": "processing",
                            "ruleType": "one-way",
                            "schedule": {
                                "frequency": "EvryDay(5)",
                                "dayOptions": {
                                    "startingAtTime": 540
                                }
                            },
                            "startDate": "2019-05-10T21:00:00.000Z",
                            "expiryDate": "2019-05-11T20:59:59.999Z",
                            "createdAt": "2019-05-09T21:00:00.000Z",
                            "createdBy": "Yevhen Lubianov"
                        }, {
                            "id": 256076,
                            "name": "Outdated CS 3",
                            "description": "Two-way monthly sweep between current accounts that have been expired.",
                            "sweptAccountBban": "TRIO0212471066",
                            "targetAccountBban": "FR596129172765GE6UQ2U8TYD56",
                            "lowerBoundAmount": 500,
                            "upperBoundAmount": 1750,
                            "status": "expired",
                            "ruleType": "two-way",
                            "schedule": {
                                "frequency": "EvryMonth(1)",
                                "monthOptions": {
                                    "startingAtTime": 720,
                                    "monthRepeat": "week-day-of-the-month"
                                }
                            },
                            "startDate": "2019-03-10T16:24:37.463Z",
                            "expiryDate": "2019-04-10T16:24:37.463Z",
                            "createdAt": "2019-03-09T16:24:37.463Z",
                            "createdBy": "Yevhenii Holub"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/sweep-rules",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": 16250
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/sweep-rules/{sweepId}/activate",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": 135864,
                    "name": "Investment IS 605",
                    "description": "Two-way daily investment sweep that never expires.",
                    "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                    "targetAccountBban": "680BCNMXVMFAY60",
                    "lowerBoundAmount": 10000,
                    "upperBoundAmount": 12500,
                    "status": "active",
                    "ruleType": "two-way",
                    "schedule": {
                        "frequency": "EvryDay(1)",
                        "dayOptions": {
                            "startingAtTime": 540,
                            "intradayRepeat": {
                                "everyMinutes": 60,
                                "endingAtTime": 1260
                            }
                        }
                    },
                    "startDate": "2019-04-10T15:52:27.218Z",
                    "createdAt": "2019-04-09T15:52:27.218Z",
                    "createdBy": "Denys Haidash"
                }
            },
            {
                status: 200,
                body: {
                    "lowerBoundAmount": 6.027456183070403,
                    "additions": {
                        "key": "additions"
                    },
                    "targetAccountBban": "targetAccountBban",
                    "description": "description",
                    "sweptAccountBban": "sweptAccountBban",
                    "expiryDate": "2000-01-23T04:56:07.000+00:00",
                    "schedule": {
                        "dayOptions": {
                            "intradayRepeat": {
                                "endingAtTime": 2.3021358869347655,
                                "everyMinutes": 5.637376656633329
                            },
                            "startingAtTime": 5.962133916683182
                        },
                        "monthOptions": {
                            "startingAtTime": 3.616076749251911,
                            "monthRepeat": "day-of-the-month"
                        },
                        "frequency": "frequency",
                        "weekOptions": {
                            "weekRepeatDay": 9.301444243932576,
                            "startingAtTime": 7.061401241503109
                        }
                    },
                    "createdAt": "2000-01-23T04:56:07.000+00:00",
                    "createdBy": "createdBy",
                    "upperBoundAmount": 1.4658129805029452,
                    "name": "name",
                    "id": 0.8008281904610115,
                    "startDate": "2000-01-23T04:56:07.000+00:00",
                    "status": "status"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/sweep-rules/{sweepId}/cancel",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": 135864,
                    "name": "Investment IS 605",
                    "description": "Two-way daily investment sweep that never expires.",
                    "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                    "targetAccountBban": "680BCNMXVMFAY60",
                    "lowerBoundAmount": 10000,
                    "upperBoundAmount": 12500,
                    "status": "cancel",
                    "ruleType": "two-way",
                    "schedule": {
                        "frequency": "EvryDay(1)",
                        "dayOptions": {
                            "startingAtTime": 540,
                            "intradayRepeat": {
                                "everyMinutes": 60,
                                "endingAtTime": 1260
                            }
                        }
                    },
                    "startDate": "2019-04-10T15:52:27.218Z",
                    "createdAt": "2019-04-09T15:52:27.218Z",
                    "createdBy": "Denys Haidash"
                }
            },
            {
                status: 200,
                body: {
                    "lowerBoundAmount": 6.027456183070403,
                    "additions": {
                        "key": "additions"
                    },
                    "targetAccountBban": "targetAccountBban",
                    "description": "description",
                    "sweptAccountBban": "sweptAccountBban",
                    "expiryDate": "2000-01-23T04:56:07.000+00:00",
                    "schedule": {
                        "dayOptions": {
                            "intradayRepeat": {
                                "endingAtTime": 2.3021358869347655,
                                "everyMinutes": 5.637376656633329
                            },
                            "startingAtTime": 5.962133916683182
                        },
                        "monthOptions": {
                            "startingAtTime": 3.616076749251911,
                            "monthRepeat": "day-of-the-month"
                        },
                        "frequency": "frequency",
                        "weekOptions": {
                            "weekRepeatDay": 9.301444243932576,
                            "startingAtTime": 7.061401241503109
                        }
                    },
                    "createdAt": "2000-01-23T04:56:07.000+00:00",
                    "createdBy": "createdBy",
                    "upperBoundAmount": 1.4658129805029452,
                    "name": "name",
                    "id": 0.8008281904610115,
                    "startDate": "2000-01-23T04:56:07.000+00:00",
                    "status": "status"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/sweep-rules/{sweepId}/pause",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "id": 135864,
                    "name": "Investment IS 605",
                    "description": "Two-way daily investment sweep that never expires.",
                    "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                    "targetAccountBban": "680BCNMXVMFAY60",
                    "lowerBoundAmount": 10000,
                    "upperBoundAmount": 12500,
                    "status": "pause",
                    "ruleType": "two-way",
                    "schedule": {
                        "frequency": "EvryDay(1)",
                        "dayOptions": {
                            "startingAtTime": 540,
                            "intradayRepeat": {
                                "everyMinutes": 60,
                                "endingAtTime": 1260
                            }
                        }
                    },
                    "startDate": "2019-04-10T15:52:27.218Z",
                    "createdAt": "2019-04-09T15:52:27.218Z",
                    "createdBy": "Denys Haidash"
                }
            },
            {
                status: 200,
                body: {
                    "lowerBoundAmount": 6.027456183070403,
                    "additions": {
                        "key": "additions"
                    },
                    "targetAccountBban": "targetAccountBban",
                    "description": "description",
                    "sweptAccountBban": "sweptAccountBban",
                    "expiryDate": "2000-01-23T04:56:07.000+00:00",
                    "schedule": {
                        "dayOptions": {
                            "intradayRepeat": {
                                "endingAtTime": 2.3021358869347655,
                                "everyMinutes": 5.637376656633329
                            },
                            "startingAtTime": 5.962133916683182
                        },
                        "monthOptions": {
                            "startingAtTime": 3.616076749251911,
                            "monthRepeat": "day-of-the-month"
                        },
                        "frequency": "frequency",
                        "weekOptions": {
                            "weekRepeatDay": 9.301444243932576,
                            "startingAtTime": 7.061401241503109
                        }
                    },
                    "createdAt": "2000-01-23T04:56:07.000+00:00",
                    "createdBy": "createdBy",
                    "upperBoundAmount": 1.4658129805029452,
                    "name": "name",
                    "id": 0.8008281904610115,
                    "startDate": "2000-01-23T04:56:07.000+00:00",
                    "status": "status"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

export { CASH_MANAGEMENT_BASE_PATH, COLLECTION_FORMATS, CONFIG_TOKEN, CashManagementApiModule, CashManagementConfiguration, RuleType, SweepRulesHttpService, SweepRulesHttpServiceGetSweepRuleBySweepIdMocksProvider, SweepRulesHttpServiceGetSweeprulesMocksProvider, SweepRulesHttpServiceMocksProvider, SweepRulesHttpServicePostCreateSweepRuleMocksProvider, SweepRulesHttpServicePostSweepRuleActivationBySweepIdMocksProvider, SweepRulesHttpServicePostSweepRuleCancelingBySweepIdMocksProvider, SweepRulesHttpServicePostSweepRulePausingBySweepIdMocksProvider, SweepScheduleRuleMonthOptions, SweepScheduleRuleWeekOptions };
//# sourceMappingURL=backbase-cash-management-http-ang.js.map
