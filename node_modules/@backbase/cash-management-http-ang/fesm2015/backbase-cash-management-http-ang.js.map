{"version":3,"file":"backbase-cash-management-http-ang.js","sources":["../../model/ruleType.ts","../../model/sweepScheduleRuleMonthOptions.ts","../../model/sweepScheduleRuleWeekOptions.ts","../../variables.ts","../../configuration.ts","../../api.module.ts","../../encoder.ts","../../api/sweepRules.service.ts","../../api/sweepRules.service.mocks.ts"],"sourcesContent":["/**\n * Sweeping\n * Automates the sweeping of funds between accounts to ensure that money is earning higher interest rates in better investment vehicles\n *\n * The version of the OpenAPI document: 2.2.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * The rule type of a sweep.\n */\nexport type RuleType = 'one-way' | 'two-way';\n\nexport const RuleType = {\n    OneWay: 'one-way' as RuleType,\n    TwoWay: 'two-way' as RuleType\n};\n\n","/**\n * Sweeping\n * Automates the sweeping of funds between accounts to ensure that money is earning higher interest rates in better investment vehicles\n *\n * The version of the OpenAPI document: 2.2.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface SweepScheduleRuleMonthOptions { \n    /**\n     * Time when sweep rule will begin to act (in minutes from beginning of day)\n     */\n    [\"startingAtTime\"]: number;\n    /**\n     * Type of a repeat within a month\n     */\n    [\"monthRepeat\"]: SweepScheduleRuleMonthOptions.MonthRepeatEnum;\n}\nexport namespace SweepScheduleRuleMonthOptions {\n    export type MonthRepeatEnum = 'day-of-the-month' | 'week-day-of-the-month';\n    export const MonthRepeatEnum = {\n        DayOfTheMonth: 'day-of-the-month' as MonthRepeatEnum,\n        WeekDayOfTheMonth: 'week-day-of-the-month' as MonthRepeatEnum\n    };\n}\n\n\n","/**\n * Sweeping\n * Automates the sweeping of funds between accounts to ensure that money is earning higher interest rates in better investment vehicles\n *\n * The version of the OpenAPI document: 2.2.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface SweepScheduleRuleWeekOptions { \n    /**\n     * Time when sweep rule will begin to act (in minutes from beginning of day)\n     */\n    [\"startingAtTime\"]: number;\n    /**\n     * Number of a day in a week when the sweep is repeating (starting from Sunday = 0)\n     */\n    [\"weekRepeatDay\"]: SweepScheduleRuleWeekOptions.WeekRepeatDayEnum;\n}\nexport namespace SweepScheduleRuleWeekOptions {\n    export type WeekRepeatDayEnum = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n    export const WeekRepeatDayEnum = {\n        NUMBER_0: 0 as WeekRepeatDayEnum,\n        NUMBER_1: 1 as WeekRepeatDayEnum,\n        NUMBER_2: 2 as WeekRepeatDayEnum,\n        NUMBER_3: 3 as WeekRepeatDayEnum,\n        NUMBER_4: 4 as WeekRepeatDayEnum,\n        NUMBER_5: 5 as WeekRepeatDayEnum,\n        NUMBER_6: 6 as WeekRepeatDayEnum\n    };\n}\n\n\n","import { InjectionToken } from '@angular/core';\n\nexport const CASH_MANAGEMENT_BASE_PATH = new InjectionToken<string>('CASH_MANAGEMENT_BASE_PATH');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nimport { InjectionToken } from '@angular/core';\n\nexport interface CashManagementConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class CashManagementConfiguration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: CashManagementConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link CashManagementConfiguration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link CashManagementConfiguration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n\nexport const CONFIG_TOKEN = new InjectionToken('api-data-module CashManagementConfiguration');\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { CashManagementConfiguration, CONFIG_TOKEN } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DataModulesManager } from \"@backbase/foundation-ang/data-http\";\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers:    []\n})\nexport class CashManagementApiModule {\n    public static forRoot(configurationFactory: () => CashManagementConfiguration): ModuleWithProviders<CashManagementApiModule> {\n        return {\n            ngModule: CashManagementApiModule,\n            providers: [ { provide: CashManagementConfiguration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: CashManagementApiModule,\n                 @Optional() http: HttpClient,\n                 @Optional() dataModulesManager: DataModulesManager | null,\n                 config: CashManagementConfiguration,\n\n        ) {\n        if (parentModule) {\n            throw new Error('CashManagementApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","/**\n * Sweeping\n * Automates the sweeping of funds between accounts to ensure that money is earning higher interest rates in better investment vehicles\n *\n * The version of the OpenAPI document: 2.2.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { BadRequestError } from '../model/models';\nimport { Conflict } from '../model/models';\nimport { CreateSweepRuleRequest } from '../model/models';\nimport { ForbiddenError } from '../model/models';\nimport { InternalServerError } from '../model/models';\nimport { ListofsweeprulesPostResponseBody } from '../model/models';\nimport { SweepRuleGet } from '../model/models';\nimport { SweepRuleResponse } from '../model/models';\nimport { SweepRulesGet } from '../model/models';\n\nimport { CASH_MANAGEMENT_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { CashManagementConfiguration }                                     from '../configuration';\n\n\nexport interface GetSweepRuleBySweepIdRequestParams {\n    /** No description available */\n    [\"sweepId\"]: string;\n}\n\nexport interface GetSweeprulesRequestParams {\n    /** The search term used to search for sweep rules */\n    [\"query\"]?: string;\n    /** Page Number. Skip over pages of elements by specifying a start value for the query */\n    [\"from\"]?: number;\n    /** Record UUID. As an alternative for specifying \\&#39;from\\&#39; this allows to point to the record to start the selection from.  */\n    [\"cursor\"]?: string;\n    /** Limit the number of elements on the response. When used in combination with cursor, the value is allowed to be a negative number to indicate requesting records upwards from the starting point indicated by the cursor.  */\n    [\"size\"]?: number;\n}\n\nexport interface PostCreateSweepRuleRequestParams {\n    /** Create sweep rule */\n    [\"createSweepRuleRequest\"]?: CreateSweepRuleRequest;\n}\n\nexport interface PostSweepRuleActivationBySweepIdRequestParams {\n    /** No description available */\n    [\"sweepId\"]: string;\n}\n\nexport interface PostSweepRuleCancelingBySweepIdRequestParams {\n    /** No description available */\n    [\"sweepId\"]: string;\n}\n\nexport interface PostSweepRulePausingBySweepIdRequestParams {\n    /** No description available */\n    [\"sweepId\"]: string;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SweepRulesHttpService {\n\n    protected basePath = '';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new CashManagementConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(CASH_MANAGEMENT_BASE_PATH) basePath: string, @Optional() configuration: CashManagementConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Retrieve specific sweep rule.\n     * Retrieve specific sweep rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSweepRuleBySweepId(requestParameters: GetSweepRuleBySweepIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<SweepRuleGet>;\n    /**\n     * Retrieve specific sweep rule.\n     * Retrieve specific sweep rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSweepRuleBySweepId(requestParameters: GetSweepRuleBySweepIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<SweepRuleGet>>;\n    /**\n     * Retrieve specific sweep rule.\n     * Retrieve specific sweep rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSweepRuleBySweepId(requestParameters: GetSweepRuleBySweepIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<SweepRuleGet>>;\n    /**\n     * Retrieve specific sweep rule.\n     * Retrieve specific sweep rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSweepRuleBySweepId(requestParameters: GetSweepRuleBySweepIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _sweepId = requestParameters[\"sweepId\"];\n        if (_sweepId === null || _sweepId === undefined) {\n            throw new Error('Required parameter sweepId was null or undefined when calling getSweepRuleBySweepId.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<SweepRuleGet>(`${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getSweepRuleBySweepIdUrl(requestParameters: GetSweepRuleBySweepIdRequestParams): string {\n        const _sweepId = requestParameters[\"sweepId\"];\n        if (_sweepId === null || _sweepId === undefined) {\n            throw new Error('Required parameter sweepId was null or undefined when calling getSweepRuleBySweepId.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}`;\n    }\n\n    /**\n     * Retrieve list of sweep rules.\n     * Retrieve list of sweep rules.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSweeprules(requestParameters: GetSweeprulesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<SweepRulesGet>;\n    /**\n     * Retrieve list of sweep rules.\n     * Retrieve list of sweep rules.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSweeprules(requestParameters: GetSweeprulesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<SweepRulesGet>>;\n    /**\n     * Retrieve list of sweep rules.\n     * Retrieve list of sweep rules.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSweeprules(requestParameters: GetSweeprulesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<SweepRulesGet>>;\n    /**\n     * Retrieve list of sweep rules.\n     * Retrieve list of sweep rules.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSweeprules(requestParameters: GetSweeprulesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _query = requestParameters[\"query\"];\n        const _from = requestParameters[\"from\"];\n        const _cursor = requestParameters[\"cursor\"];\n        const _size = requestParameters[\"size\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_query !== undefined && _query !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_query, 'query');\n        }\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_cursor !== undefined && _cursor !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_cursor, 'cursor');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<SweepRulesGet>(`${this.configuration.basePath}/client-api/v2/sweep-rules`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getSweeprulesUrl(requestParameters: GetSweeprulesRequestParams): string {\n        const _query = requestParameters[\"query\"];\n        const _from = requestParameters[\"from\"];\n        const _cursor = requestParameters[\"cursor\"];\n        const _size = requestParameters[\"size\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_query !== undefined && _query !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_query, 'query');\n        }\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_cursor !== undefined && _cursor !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_cursor, 'cursor');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v2/sweep-rules${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Create sweep rule.\n     * Create sweep rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postCreateSweepRule(requestParameters: PostCreateSweepRuleRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<SweepRuleResponse>;\n    /**\n     * Create sweep rule.\n     * Create sweep rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postCreateSweepRule(requestParameters: PostCreateSweepRuleRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<SweepRuleResponse>>;\n    /**\n     * Create sweep rule.\n     * Create sweep rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postCreateSweepRule(requestParameters: PostCreateSweepRuleRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<SweepRuleResponse>>;\n    /**\n     * Create sweep rule.\n     * Create sweep rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postCreateSweepRule(requestParameters: PostCreateSweepRuleRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _createSweepRuleRequest = requestParameters[\"createSweepRuleRequest\"];\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<SweepRuleResponse>(`${this.configuration.basePath}/client-api/v2/sweep-rules`,\n            _createSweepRuleRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postCreateSweepRuleUrl(requestParameters: PostCreateSweepRuleRequestParams): string {\n        const _createSweepRuleRequest = requestParameters[\"createSweepRuleRequest\"];\n        return `${this.configuration.basePath}/client-api/v2/sweep-rules`;\n    }\n\n    /**\n     * Activate Sweep Rule.\n     * Activate Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRuleActivationBySweepId(requestParameters: PostSweepRuleActivationBySweepIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<SweepRuleGet>;\n    /**\n     * Activate Sweep Rule.\n     * Activate Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRuleActivationBySweepId(requestParameters: PostSweepRuleActivationBySweepIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<SweepRuleGet>>;\n    /**\n     * Activate Sweep Rule.\n     * Activate Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRuleActivationBySweepId(requestParameters: PostSweepRuleActivationBySweepIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<SweepRuleGet>>;\n    /**\n     * Activate Sweep Rule.\n     * Activate Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRuleActivationBySweepId(requestParameters: PostSweepRuleActivationBySweepIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _sweepId = requestParameters[\"sweepId\"];\n        if (_sweepId === null || _sweepId === undefined) {\n            throw new Error('Required parameter sweepId was null or undefined when calling postSweepRuleActivationBySweepId.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<SweepRuleGet>(`${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}/activate`,\n            null,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postSweepRuleActivationBySweepIdUrl(requestParameters: PostSweepRuleActivationBySweepIdRequestParams): string {\n        const _sweepId = requestParameters[\"sweepId\"];\n        if (_sweepId === null || _sweepId === undefined) {\n            throw new Error('Required parameter sweepId was null or undefined when calling postSweepRuleActivationBySweepId.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}/activate`;\n    }\n\n    /**\n     * Cancel Sweep Rule.\n     * Cancel Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRuleCancelingBySweepId(requestParameters: PostSweepRuleCancelingBySweepIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<SweepRuleGet>;\n    /**\n     * Cancel Sweep Rule.\n     * Cancel Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRuleCancelingBySweepId(requestParameters: PostSweepRuleCancelingBySweepIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<SweepRuleGet>>;\n    /**\n     * Cancel Sweep Rule.\n     * Cancel Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRuleCancelingBySweepId(requestParameters: PostSweepRuleCancelingBySweepIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<SweepRuleGet>>;\n    /**\n     * Cancel Sweep Rule.\n     * Cancel Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRuleCancelingBySweepId(requestParameters: PostSweepRuleCancelingBySweepIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _sweepId = requestParameters[\"sweepId\"];\n        if (_sweepId === null || _sweepId === undefined) {\n            throw new Error('Required parameter sweepId was null or undefined when calling postSweepRuleCancelingBySweepId.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<SweepRuleGet>(`${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}/cancel`,\n            null,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postSweepRuleCancelingBySweepIdUrl(requestParameters: PostSweepRuleCancelingBySweepIdRequestParams): string {\n        const _sweepId = requestParameters[\"sweepId\"];\n        if (_sweepId === null || _sweepId === undefined) {\n            throw new Error('Required parameter sweepId was null or undefined when calling postSweepRuleCancelingBySweepId.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}/cancel`;\n    }\n\n    /**\n     * Pause Sweep Rule.\n     * Pause Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRulePausingBySweepId(requestParameters: PostSweepRulePausingBySweepIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<SweepRuleGet>;\n    /**\n     * Pause Sweep Rule.\n     * Pause Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRulePausingBySweepId(requestParameters: PostSweepRulePausingBySweepIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<SweepRuleGet>>;\n    /**\n     * Pause Sweep Rule.\n     * Pause Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRulePausingBySweepId(requestParameters: PostSweepRulePausingBySweepIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<SweepRuleGet>>;\n    /**\n     * Pause Sweep Rule.\n     * Pause Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRulePausingBySweepId(requestParameters: PostSweepRulePausingBySweepIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _sweepId = requestParameters[\"sweepId\"];\n        if (_sweepId === null || _sweepId === undefined) {\n            throw new Error('Required parameter sweepId was null or undefined when calling postSweepRulePausingBySweepId.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<SweepRuleGet>(`${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}/pause`,\n            null,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postSweepRulePausingBySweepIdUrl(requestParameters: PostSweepRulePausingBySweepIdRequestParams): string {\n        const _sweepId = requestParameters[\"sweepId\"];\n        if (_sweepId === null || _sweepId === undefined) {\n            throw new Error('Required parameter sweepId was null or undefined when calling postSweepRulePausingBySweepId.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}/pause`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /client-api/v2/sweep-rules/{sweepId} URL pattern\n*/\nexport const SweepRulesHttpServiceGetSweepRuleBySweepIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/sweep-rules/{sweepId}\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : 135864,\n  \"name\" : \"Investment IS 605\",\n  \"description\" : \"Two-way daily investment sweep that never expires.\",\n  \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n  \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n  \"lowerBoundAmount\" : 10000,\n  \"upperBoundAmount\" : 12500,\n  \"status\" : \"active\",\n  \"ruleType\" : \"two-way\",\n  \"schedule\" : {\n    \"frequency\" : \"EvryDay(1)\",\n    \"dayOptions\" : {\n      \"startingAtTime\" : 540,\n      \"intradayRepeat\" : {\n        \"everyMinutes\" : 60,\n        \"endingAtTime\" : 1260\n      }\n    }\n  },\n  \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n  \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n  \"createdBy\" : \"Denys Haidash\"\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"lowerBoundAmount\" : 6.027456183070403,\n  \"additions\" : {\n    \"key\" : \"additions\"\n  },\n  \"targetAccountBban\" : \"targetAccountBban\",\n  \"description\" : \"description\",\n  \"sweptAccountBban\" : \"sweptAccountBban\",\n  \"expiryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"schedule\" : {\n    \"dayOptions\" : {\n      \"intradayRepeat\" : {\n        \"endingAtTime\" : 2.3021358869347655,\n        \"everyMinutes\" : 5.637376656633329\n      },\n      \"startingAtTime\" : 5.962133916683182\n    },\n    \"monthOptions\" : {\n      \"startingAtTime\" : 3.616076749251911,\n      \"monthRepeat\" : \"day-of-the-month\"\n    },\n    \"frequency\" : \"frequency\",\n    \"weekOptions\" : {\n      \"weekRepeatDay\" : 9.301444243932576,\n      \"startingAtTime\" : 7.061401241503109\n    }\n  },\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdBy\" : \"createdBy\",\n  \"upperBoundAmount\" : 1.4658129805029452,\n  \"name\" : \"name\",\n  \"id\" : 0.8008281904610115,\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"status\" : \"status\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/sweep-rules URL pattern\n*/\nexport const SweepRulesHttpServiceGetSweeprulesMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/sweep-rules\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"items\" : [ {\n    \"id\" : 135864,\n    \"name\" : \"Investment IS 605\",\n    \"description\" : \"Two-way daily investment sweep that never expires.\",\n    \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n    \"lowerBoundAmount\" : 10000,\n    \"upperBoundAmount\" : 12500,\n    \"status\" : \"entered\",\n    \"ruleType\" : \"two-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryDay(1)\",\n      \"dayOptions\" : {\n        \"startingAtTime\" : 540,\n        \"intradayRepeat\" : {\n          \"everyMinutes\" : 60,\n          \"endingAtTime\" : 1260\n        }\n      }\n    },\n    \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n    \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n    \"createdBy\" : \"Anna Hrechana\"\n  }, {\n    \"id\" : 246975,\n    \"name\" : \"Current CS 16\",\n    \"description\" : \"Two-way monthly sweep between current accounts that expires today.\",\n    \"sweptAccountBban\" : \"TRIO0212471066\",\n    \"targetAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"lowerBoundAmount\" : 500,\n    \"upperBoundAmount\" : 1750,\n    \"status\" : \"active\",\n    \"ruleType\" : \"two-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryMonth(1)\",\n      \"monthOptions\" : {\n        \"startingAtTime\" : 720,\n        \"monthRepeat\" : \"week-day-of-the-month\"\n      }\n    },\n    \"startDate\" : \"2019-04-10T16:24:37.463Z\",\n    \"createdAt\" : \"2019-04-09T16:24:37.463Z\",\n    \"createdBy\" : \"Serhii Koshman\"\n  }, {\n    \"id\" : 137731,\n    \"name\" : \"Loan LS 31\",\n    \"description\" : \"Loan sweep that takes place each 4 weeks on Sundays until manually stopped.\",\n    \"sweptAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"6129172765GE6UQ2U8TYD84\",\n    \"upperBoundAmount\" : 5000,\n    \"status\" : \"paused\",\n    \"ruleType\" : \"one-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryWeek(4)\",\n      \"weekOptions\" : {\n        \"startingAtTime\" : 0,\n        \"weekRepeatDay\" : 0\n      }\n    },\n    \"startDate\" : \"2019-01-01T16:24:37.463Z\",\n    \"createdAt\" : \"2019-01-01T16:23:37.463Z\",\n    \"createdBy\" : \"Marian Kitsenko\"\n  }, {\n    \"id\" : 225547,\n    \"name\" : \"Savings SS 24\",\n    \"description\" : \"One-time one-way sweep to accumulate savings performed on a daily basis.\",\n    \"sweptAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"TRIO0212471066\",\n    \"upperBoundAmount\" : 1100,\n    \"status\" : \"rejected\",\n    \"ruleType\" : \"one-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryDay(1)\",\n      \"dayOptions\" : {\n        \"startingAtTime\" : 30,\n        \"intradayRepeat\" : {\n          \"everyMinutes\" : 60,\n          \"endingAtTime\" : 30\n        }\n      }\n    },\n    \"startDate\" : \"2019-04-11T08:10:18.591Z\",\n    \"expiryDate\" : \"2019-04-11T20:59:59.999Z\",\n    \"createdAt\" : \"2019-04-10T08:10:18.591Z\",\n    \"createdBy\" : \"Dmytro Topchii\"\n  }, {\n    \"id\" : 110580,\n    \"name\" : \"Debit SD 350\",\n    \"description\" : \"Maintenance sweep to handle debit card account set to repeat once a week starting from next month.\",\n    \"sweptAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"6129172765GE6UQ2U8TYD84\",\n    \"lowerBoundAmount\" : 1000,\n    \"status\" : \"cancelled\",\n    \"ruleType\" : \"one-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryDay(7)\",\n      \"dayOptions\" : {\n        \"startingAtTime\" : 540\n      }\n    },\n    \"startDate\" : \"2019-05-10T21:00:00.000Z\",\n    \"expiryDate\" : \"2019-05-11T20:59:59.999Z\",\n    \"createdAt\" : \"2019-05-09T21:00:00.000Z\",\n    \"createdBy\" : \"Serhii Sobur\"\n  }, {\n    \"id\" : 190783,\n    \"name\" : \"Debit 500\",\n    \"description\" : \"Maintenance sweep to handle debit card account set to repeat every 5 days starting from next month.\",\n    \"sweptAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"6129172765GE6UQ2U8TYD84\",\n    \"lowerBoundAmount\" : 500,\n    \"status\" : \"processing\",\n    \"ruleType\" : \"one-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryDay(5)\",\n      \"dayOptions\" : {\n        \"startingAtTime\" : 540\n      }\n    },\n    \"startDate\" : \"2019-05-10T21:00:00.000Z\",\n    \"expiryDate\" : \"2019-05-11T20:59:59.999Z\",\n    \"createdAt\" : \"2019-05-09T21:00:00.000Z\",\n    \"createdBy\" : \"Yevhen Lubianov\"\n  }, {\n    \"id\" : 256076,\n    \"name\" : \"Outdated CS 3\",\n    \"description\" : \"Two-way monthly sweep between current accounts that have been expired.\",\n    \"sweptAccountBban\" : \"TRIO0212471066\",\n    \"targetAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"lowerBoundAmount\" : 500,\n    \"upperBoundAmount\" : 1750,\n    \"status\" : \"expired\",\n    \"ruleType\" : \"two-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryMonth(1)\",\n      \"monthOptions\" : {\n        \"startingAtTime\" : 720,\n        \"monthRepeat\" : \"week-day-of-the-month\"\n      }\n    },\n    \"startDate\" : \"2019-03-10T16:24:37.463Z\",\n    \"expiryDate\" : \"2019-04-10T16:24:37.463Z\",\n    \"createdAt\" : \"2019-03-09T16:24:37.463Z\",\n    \"createdBy\" : \"Yevhenii Holub\"\n  } ]\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/sweep-rules URL pattern\n*/\nexport const SweepRulesHttpServicePostCreateSweepRuleMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/sweep-rules\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : 16250\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/sweep-rules/{sweepId}/activate URL pattern\n*/\nexport const SweepRulesHttpServicePostSweepRuleActivationBySweepIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/sweep-rules/{sweepId}/activate\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : 135864,\n  \"name\" : \"Investment IS 605\",\n  \"description\" : \"Two-way daily investment sweep that never expires.\",\n  \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n  \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n  \"lowerBoundAmount\" : 10000,\n  \"upperBoundAmount\" : 12500,\n  \"status\" : \"active\",\n  \"ruleType\" : \"two-way\",\n  \"schedule\" : {\n    \"frequency\" : \"EvryDay(1)\",\n    \"dayOptions\" : {\n      \"startingAtTime\" : 540,\n      \"intradayRepeat\" : {\n        \"everyMinutes\" : 60,\n        \"endingAtTime\" : 1260\n      }\n    }\n  },\n  \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n  \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n  \"createdBy\" : \"Denys Haidash\"\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"lowerBoundAmount\" : 6.027456183070403,\n  \"additions\" : {\n    \"key\" : \"additions\"\n  },\n  \"targetAccountBban\" : \"targetAccountBban\",\n  \"description\" : \"description\",\n  \"sweptAccountBban\" : \"sweptAccountBban\",\n  \"expiryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"schedule\" : {\n    \"dayOptions\" : {\n      \"intradayRepeat\" : {\n        \"endingAtTime\" : 2.3021358869347655,\n        \"everyMinutes\" : 5.637376656633329\n      },\n      \"startingAtTime\" : 5.962133916683182\n    },\n    \"monthOptions\" : {\n      \"startingAtTime\" : 3.616076749251911,\n      \"monthRepeat\" : \"day-of-the-month\"\n    },\n    \"frequency\" : \"frequency\",\n    \"weekOptions\" : {\n      \"weekRepeatDay\" : 9.301444243932576,\n      \"startingAtTime\" : 7.061401241503109\n    }\n  },\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdBy\" : \"createdBy\",\n  \"upperBoundAmount\" : 1.4658129805029452,\n  \"name\" : \"name\",\n  \"id\" : 0.8008281904610115,\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"status\" : \"status\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/sweep-rules/{sweepId}/cancel URL pattern\n*/\nexport const SweepRulesHttpServicePostSweepRuleCancelingBySweepIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/sweep-rules/{sweepId}/cancel\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : 135864,\n  \"name\" : \"Investment IS 605\",\n  \"description\" : \"Two-way daily investment sweep that never expires.\",\n  \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n  \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n  \"lowerBoundAmount\" : 10000,\n  \"upperBoundAmount\" : 12500,\n  \"status\" : \"cancel\",\n  \"ruleType\" : \"two-way\",\n  \"schedule\" : {\n    \"frequency\" : \"EvryDay(1)\",\n    \"dayOptions\" : {\n      \"startingAtTime\" : 540,\n      \"intradayRepeat\" : {\n        \"everyMinutes\" : 60,\n        \"endingAtTime\" : 1260\n      }\n    }\n  },\n  \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n  \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n  \"createdBy\" : \"Denys Haidash\"\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"lowerBoundAmount\" : 6.027456183070403,\n  \"additions\" : {\n    \"key\" : \"additions\"\n  },\n  \"targetAccountBban\" : \"targetAccountBban\",\n  \"description\" : \"description\",\n  \"sweptAccountBban\" : \"sweptAccountBban\",\n  \"expiryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"schedule\" : {\n    \"dayOptions\" : {\n      \"intradayRepeat\" : {\n        \"endingAtTime\" : 2.3021358869347655,\n        \"everyMinutes\" : 5.637376656633329\n      },\n      \"startingAtTime\" : 5.962133916683182\n    },\n    \"monthOptions\" : {\n      \"startingAtTime\" : 3.616076749251911,\n      \"monthRepeat\" : \"day-of-the-month\"\n    },\n    \"frequency\" : \"frequency\",\n    \"weekOptions\" : {\n      \"weekRepeatDay\" : 9.301444243932576,\n      \"startingAtTime\" : 7.061401241503109\n    }\n  },\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdBy\" : \"createdBy\",\n  \"upperBoundAmount\" : 1.4658129805029452,\n  \"name\" : \"name\",\n  \"id\" : 0.8008281904610115,\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"status\" : \"status\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/sweep-rules/{sweepId}/pause URL pattern\n*/\nexport const SweepRulesHttpServicePostSweepRulePausingBySweepIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/sweep-rules/{sweepId}/pause\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : 135864,\n  \"name\" : \"Investment IS 605\",\n  \"description\" : \"Two-way daily investment sweep that never expires.\",\n  \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n  \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n  \"lowerBoundAmount\" : 10000,\n  \"upperBoundAmount\" : 12500,\n  \"status\" : \"pause\",\n  \"ruleType\" : \"two-way\",\n  \"schedule\" : {\n    \"frequency\" : \"EvryDay(1)\",\n    \"dayOptions\" : {\n      \"startingAtTime\" : 540,\n      \"intradayRepeat\" : {\n        \"everyMinutes\" : 60,\n        \"endingAtTime\" : 1260\n      }\n    }\n  },\n  \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n  \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n  \"createdBy\" : \"Denys Haidash\"\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"lowerBoundAmount\" : 6.027456183070403,\n  \"additions\" : {\n    \"key\" : \"additions\"\n  },\n  \"targetAccountBban\" : \"targetAccountBban\",\n  \"description\" : \"description\",\n  \"sweptAccountBban\" : \"sweptAccountBban\",\n  \"expiryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"schedule\" : {\n    \"dayOptions\" : {\n      \"intradayRepeat\" : {\n        \"endingAtTime\" : 2.3021358869347655,\n        \"everyMinutes\" : 5.637376656633329\n      },\n      \"startingAtTime\" : 5.962133916683182\n    },\n    \"monthOptions\" : {\n      \"startingAtTime\" : 3.616076749251911,\n      \"monthRepeat\" : \"day-of-the-month\"\n    },\n    \"frequency\" : \"frequency\",\n    \"weekOptions\" : {\n      \"weekRepeatDay\" : 9.301444243932576,\n      \"startingAtTime\" : 7.061401241503109\n    }\n  },\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdBy\" : \"createdBy\",\n  \"upperBoundAmount\" : 1.4658129805029452,\n  \"name\" : \"name\",\n  \"id\" : 0.8008281904610115,\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"status\" : \"status\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n    ]\n}]);\n\nexport const SweepRulesHttpServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/client-api/v2/sweep-rules/{sweepId}\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : 135864,\n  \"name\" : \"Investment IS 605\",\n  \"description\" : \"Two-way daily investment sweep that never expires.\",\n  \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n  \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n  \"lowerBoundAmount\" : 10000,\n  \"upperBoundAmount\" : 12500,\n  \"status\" : \"active\",\n  \"ruleType\" : \"two-way\",\n  \"schedule\" : {\n    \"frequency\" : \"EvryDay(1)\",\n    \"dayOptions\" : {\n      \"startingAtTime\" : 540,\n      \"intradayRepeat\" : {\n        \"everyMinutes\" : 60,\n        \"endingAtTime\" : 1260\n      }\n    }\n  },\n  \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n  \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n  \"createdBy\" : \"Denys Haidash\"\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"lowerBoundAmount\" : 6.027456183070403,\n  \"additions\" : {\n    \"key\" : \"additions\"\n  },\n  \"targetAccountBban\" : \"targetAccountBban\",\n  \"description\" : \"description\",\n  \"sweptAccountBban\" : \"sweptAccountBban\",\n  \"expiryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"schedule\" : {\n    \"dayOptions\" : {\n      \"intradayRepeat\" : {\n        \"endingAtTime\" : 2.3021358869347655,\n        \"everyMinutes\" : 5.637376656633329\n      },\n      \"startingAtTime\" : 5.962133916683182\n    },\n    \"monthOptions\" : {\n      \"startingAtTime\" : 3.616076749251911,\n      \"monthRepeat\" : \"day-of-the-month\"\n    },\n    \"frequency\" : \"frequency\",\n    \"weekOptions\" : {\n      \"weekRepeatDay\" : 9.301444243932576,\n      \"startingAtTime\" : 7.061401241503109\n    }\n  },\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdBy\" : \"createdBy\",\n  \"upperBoundAmount\" : 1.4658129805029452,\n  \"name\" : \"name\",\n  \"id\" : 0.8008281904610115,\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"status\" : \"status\"\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/sweep-rules\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"items\" : [ {\n    \"id\" : 135864,\n    \"name\" : \"Investment IS 605\",\n    \"description\" : \"Two-way daily investment sweep that never expires.\",\n    \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n    \"lowerBoundAmount\" : 10000,\n    \"upperBoundAmount\" : 12500,\n    \"status\" : \"entered\",\n    \"ruleType\" : \"two-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryDay(1)\",\n      \"dayOptions\" : {\n        \"startingAtTime\" : 540,\n        \"intradayRepeat\" : {\n          \"everyMinutes\" : 60,\n          \"endingAtTime\" : 1260\n        }\n      }\n    },\n    \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n    \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n    \"createdBy\" : \"Anna Hrechana\"\n  }, {\n    \"id\" : 246975,\n    \"name\" : \"Current CS 16\",\n    \"description\" : \"Two-way monthly sweep between current accounts that expires today.\",\n    \"sweptAccountBban\" : \"TRIO0212471066\",\n    \"targetAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"lowerBoundAmount\" : 500,\n    \"upperBoundAmount\" : 1750,\n    \"status\" : \"active\",\n    \"ruleType\" : \"two-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryMonth(1)\",\n      \"monthOptions\" : {\n        \"startingAtTime\" : 720,\n        \"monthRepeat\" : \"week-day-of-the-month\"\n      }\n    },\n    \"startDate\" : \"2019-04-10T16:24:37.463Z\",\n    \"createdAt\" : \"2019-04-09T16:24:37.463Z\",\n    \"createdBy\" : \"Serhii Koshman\"\n  }, {\n    \"id\" : 137731,\n    \"name\" : \"Loan LS 31\",\n    \"description\" : \"Loan sweep that takes place each 4 weeks on Sundays until manually stopped.\",\n    \"sweptAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"6129172765GE6UQ2U8TYD84\",\n    \"upperBoundAmount\" : 5000,\n    \"status\" : \"paused\",\n    \"ruleType\" : \"one-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryWeek(4)\",\n      \"weekOptions\" : {\n        \"startingAtTime\" : 0,\n        \"weekRepeatDay\" : 0\n      }\n    },\n    \"startDate\" : \"2019-01-01T16:24:37.463Z\",\n    \"createdAt\" : \"2019-01-01T16:23:37.463Z\",\n    \"createdBy\" : \"Marian Kitsenko\"\n  }, {\n    \"id\" : 225547,\n    \"name\" : \"Savings SS 24\",\n    \"description\" : \"One-time one-way sweep to accumulate savings performed on a daily basis.\",\n    \"sweptAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"TRIO0212471066\",\n    \"upperBoundAmount\" : 1100,\n    \"status\" : \"rejected\",\n    \"ruleType\" : \"one-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryDay(1)\",\n      \"dayOptions\" : {\n        \"startingAtTime\" : 30,\n        \"intradayRepeat\" : {\n          \"everyMinutes\" : 60,\n          \"endingAtTime\" : 30\n        }\n      }\n    },\n    \"startDate\" : \"2019-04-11T08:10:18.591Z\",\n    \"expiryDate\" : \"2019-04-11T20:59:59.999Z\",\n    \"createdAt\" : \"2019-04-10T08:10:18.591Z\",\n    \"createdBy\" : \"Dmytro Topchii\"\n  }, {\n    \"id\" : 110580,\n    \"name\" : \"Debit SD 350\",\n    \"description\" : \"Maintenance sweep to handle debit card account set to repeat once a week starting from next month.\",\n    \"sweptAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"6129172765GE6UQ2U8TYD84\",\n    \"lowerBoundAmount\" : 1000,\n    \"status\" : \"cancelled\",\n    \"ruleType\" : \"one-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryDay(7)\",\n      \"dayOptions\" : {\n        \"startingAtTime\" : 540\n      }\n    },\n    \"startDate\" : \"2019-05-10T21:00:00.000Z\",\n    \"expiryDate\" : \"2019-05-11T20:59:59.999Z\",\n    \"createdAt\" : \"2019-05-09T21:00:00.000Z\",\n    \"createdBy\" : \"Serhii Sobur\"\n  }, {\n    \"id\" : 190783,\n    \"name\" : \"Debit 500\",\n    \"description\" : \"Maintenance sweep to handle debit card account set to repeat every 5 days starting from next month.\",\n    \"sweptAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"6129172765GE6UQ2U8TYD84\",\n    \"lowerBoundAmount\" : 500,\n    \"status\" : \"processing\",\n    \"ruleType\" : \"one-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryDay(5)\",\n      \"dayOptions\" : {\n        \"startingAtTime\" : 540\n      }\n    },\n    \"startDate\" : \"2019-05-10T21:00:00.000Z\",\n    \"expiryDate\" : \"2019-05-11T20:59:59.999Z\",\n    \"createdAt\" : \"2019-05-09T21:00:00.000Z\",\n    \"createdBy\" : \"Yevhen Lubianov\"\n  }, {\n    \"id\" : 256076,\n    \"name\" : \"Outdated CS 3\",\n    \"description\" : \"Two-way monthly sweep between current accounts that have been expired.\",\n    \"sweptAccountBban\" : \"TRIO0212471066\",\n    \"targetAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"lowerBoundAmount\" : 500,\n    \"upperBoundAmount\" : 1750,\n    \"status\" : \"expired\",\n    \"ruleType\" : \"two-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryMonth(1)\",\n      \"monthOptions\" : {\n        \"startingAtTime\" : 720,\n        \"monthRepeat\" : \"week-day-of-the-month\"\n      }\n    },\n    \"startDate\" : \"2019-03-10T16:24:37.463Z\",\n    \"expiryDate\" : \"2019-04-10T16:24:37.463Z\",\n    \"createdAt\" : \"2019-03-09T16:24:37.463Z\",\n    \"createdBy\" : \"Yevhenii Holub\"\n  } ]\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/sweep-rules\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : 16250\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/sweep-rules/{sweepId}/activate\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : 135864,\n  \"name\" : \"Investment IS 605\",\n  \"description\" : \"Two-way daily investment sweep that never expires.\",\n  \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n  \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n  \"lowerBoundAmount\" : 10000,\n  \"upperBoundAmount\" : 12500,\n  \"status\" : \"active\",\n  \"ruleType\" : \"two-way\",\n  \"schedule\" : {\n    \"frequency\" : \"EvryDay(1)\",\n    \"dayOptions\" : {\n      \"startingAtTime\" : 540,\n      \"intradayRepeat\" : {\n        \"everyMinutes\" : 60,\n        \"endingAtTime\" : 1260\n      }\n    }\n  },\n  \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n  \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n  \"createdBy\" : \"Denys Haidash\"\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"lowerBoundAmount\" : 6.027456183070403,\n  \"additions\" : {\n    \"key\" : \"additions\"\n  },\n  \"targetAccountBban\" : \"targetAccountBban\",\n  \"description\" : \"description\",\n  \"sweptAccountBban\" : \"sweptAccountBban\",\n  \"expiryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"schedule\" : {\n    \"dayOptions\" : {\n      \"intradayRepeat\" : {\n        \"endingAtTime\" : 2.3021358869347655,\n        \"everyMinutes\" : 5.637376656633329\n      },\n      \"startingAtTime\" : 5.962133916683182\n    },\n    \"monthOptions\" : {\n      \"startingAtTime\" : 3.616076749251911,\n      \"monthRepeat\" : \"day-of-the-month\"\n    },\n    \"frequency\" : \"frequency\",\n    \"weekOptions\" : {\n      \"weekRepeatDay\" : 9.301444243932576,\n      \"startingAtTime\" : 7.061401241503109\n    }\n  },\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdBy\" : \"createdBy\",\n  \"upperBoundAmount\" : 1.4658129805029452,\n  \"name\" : \"name\",\n  \"id\" : 0.8008281904610115,\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"status\" : \"status\"\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/sweep-rules/{sweepId}/cancel\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : 135864,\n  \"name\" : \"Investment IS 605\",\n  \"description\" : \"Two-way daily investment sweep that never expires.\",\n  \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n  \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n  \"lowerBoundAmount\" : 10000,\n  \"upperBoundAmount\" : 12500,\n  \"status\" : \"cancel\",\n  \"ruleType\" : \"two-way\",\n  \"schedule\" : {\n    \"frequency\" : \"EvryDay(1)\",\n    \"dayOptions\" : {\n      \"startingAtTime\" : 540,\n      \"intradayRepeat\" : {\n        \"everyMinutes\" : 60,\n        \"endingAtTime\" : 1260\n      }\n    }\n  },\n  \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n  \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n  \"createdBy\" : \"Denys Haidash\"\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"lowerBoundAmount\" : 6.027456183070403,\n  \"additions\" : {\n    \"key\" : \"additions\"\n  },\n  \"targetAccountBban\" : \"targetAccountBban\",\n  \"description\" : \"description\",\n  \"sweptAccountBban\" : \"sweptAccountBban\",\n  \"expiryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"schedule\" : {\n    \"dayOptions\" : {\n      \"intradayRepeat\" : {\n        \"endingAtTime\" : 2.3021358869347655,\n        \"everyMinutes\" : 5.637376656633329\n      },\n      \"startingAtTime\" : 5.962133916683182\n    },\n    \"monthOptions\" : {\n      \"startingAtTime\" : 3.616076749251911,\n      \"monthRepeat\" : \"day-of-the-month\"\n    },\n    \"frequency\" : \"frequency\",\n    \"weekOptions\" : {\n      \"weekRepeatDay\" : 9.301444243932576,\n      \"startingAtTime\" : 7.061401241503109\n    }\n  },\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdBy\" : \"createdBy\",\n  \"upperBoundAmount\" : 1.4658129805029452,\n  \"name\" : \"name\",\n  \"id\" : 0.8008281904610115,\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"status\" : \"status\"\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/sweep-rules/{sweepId}/pause\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : 135864,\n  \"name\" : \"Investment IS 605\",\n  \"description\" : \"Two-way daily investment sweep that never expires.\",\n  \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n  \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n  \"lowerBoundAmount\" : 10000,\n  \"upperBoundAmount\" : 12500,\n  \"status\" : \"pause\",\n  \"ruleType\" : \"two-way\",\n  \"schedule\" : {\n    \"frequency\" : \"EvryDay(1)\",\n    \"dayOptions\" : {\n      \"startingAtTime\" : 540,\n      \"intradayRepeat\" : {\n        \"everyMinutes\" : 60,\n        \"endingAtTime\" : 1260\n      }\n    }\n  },\n  \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n  \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n  \"createdBy\" : \"Denys Haidash\"\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"lowerBoundAmount\" : 6.027456183070403,\n  \"additions\" : {\n    \"key\" : \"additions\"\n  },\n  \"targetAccountBban\" : \"targetAccountBban\",\n  \"description\" : \"description\",\n  \"sweptAccountBban\" : \"sweptAccountBban\",\n  \"expiryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"schedule\" : {\n    \"dayOptions\" : {\n      \"intradayRepeat\" : {\n        \"endingAtTime\" : 2.3021358869347655,\n        \"everyMinutes\" : 5.637376656633329\n      },\n      \"startingAtTime\" : 5.962133916683182\n    },\n    \"monthOptions\" : {\n      \"startingAtTime\" : 3.616076749251911,\n      \"monthRepeat\" : \"day-of-the-month\"\n    },\n    \"frequency\" : \"frequency\",\n    \"weekOptions\" : {\n      \"weekRepeatDay\" : 9.301444243932576,\n      \"startingAtTime\" : 7.061401241503109\n    }\n  },\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdBy\" : \"createdBy\",\n  \"upperBoundAmount\" : 1.4658129805029452,\n  \"name\" : \"name\",\n  \"id\" : 0.8008281904610115,\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"status\" : \"status\"\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n    ]\n},\n]\n);\n\n\n"],"names":[],"mappings":"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"}