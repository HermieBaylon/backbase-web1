(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/cash-management-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["cash-management-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var RuleType = {
        OneWay: 'one-way',
        TwoWay: 'two-way'
    };

    exports.SweepScheduleRuleMonthOptions = void 0;
    (function (SweepScheduleRuleMonthOptions) {
        SweepScheduleRuleMonthOptions.MonthRepeatEnum = {
            DayOfTheMonth: 'day-of-the-month',
            WeekDayOfTheMonth: 'week-day-of-the-month'
        };
    })(exports.SweepScheduleRuleMonthOptions || (exports.SweepScheduleRuleMonthOptions = {}));

    exports.SweepScheduleRuleWeekOptions = void 0;
    (function (SweepScheduleRuleWeekOptions) {
        SweepScheduleRuleWeekOptions.WeekRepeatDayEnum = {
            NUMBER_0: 0,
            NUMBER_1: 1,
            NUMBER_2: 2,
            NUMBER_3: 3,
            NUMBER_4: 4,
            NUMBER_5: 5,
            NUMBER_6: 6
        };
    })(exports.SweepScheduleRuleWeekOptions || (exports.SweepScheduleRuleWeekOptions = {}));

    var CASH_MANAGEMENT_BASE_PATH = new i0.InjectionToken('CASH_MANAGEMENT_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var CashManagementConfiguration = /** @class */ (function () {
        function CashManagementConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        CashManagementConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        CashManagementConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        CashManagementConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        CashManagementConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return CashManagementConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module CashManagementConfiguration');

    var CashManagementApiModule = /** @class */ (function () {
        function CashManagementApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('CashManagementApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        CashManagementApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: CashManagementApiModule,
                providers: [{ provide: CashManagementConfiguration, useFactory: configurationFactory }]
            };
        };
        return CashManagementApiModule;
    }());
    CashManagementApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CashManagementApiModule, deps: [{ token: CashManagementApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: CashManagementConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CashManagementApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CashManagementApiModule });
    CashManagementApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CashManagementApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CashManagementApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: CashManagementApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: CashManagementConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var SweepRulesHttpService = /** @class */ (function () {
        function SweepRulesHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new CashManagementConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        SweepRulesHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        SweepRulesHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        SweepRulesHttpService.prototype.getSweepRuleBySweepId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _sweepId = requestParameters["sweepId"];
            if (_sweepId === null || _sweepId === undefined) {
                throw new Error('Required parameter sweepId was null or undefined when calling getSweepRuleBySweepId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/sweep-rules/" + encodeURIComponent(String(_sweepId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        SweepRulesHttpService.prototype.getSweepRuleBySweepIdUrl = function (requestParameters) {
            var _sweepId = requestParameters["sweepId"];
            if (_sweepId === null || _sweepId === undefined) {
                throw new Error('Required parameter sweepId was null or undefined when calling getSweepRuleBySweepId.');
            }
            return this.configuration.basePath + "/client-api/v2/sweep-rules/" + encodeURIComponent(String(_sweepId));
        };
        SweepRulesHttpService.prototype.getSweeprules = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/sweep-rules", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        SweepRulesHttpService.prototype.getSweeprulesUrl = function (requestParameters) {
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/sweep-rules" + (queryString ? "?" + queryString : '');
        };
        SweepRulesHttpService.prototype.postCreateSweepRule = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _createSweepRuleRequest = requestParameters["createSweepRuleRequest"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/sweep-rules", _createSweepRuleRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        SweepRulesHttpService.prototype.postCreateSweepRuleUrl = function (requestParameters) {
            var _createSweepRuleRequest = requestParameters["createSweepRuleRequest"];
            return this.configuration.basePath + "/client-api/v2/sweep-rules";
        };
        SweepRulesHttpService.prototype.postSweepRuleActivationBySweepId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _sweepId = requestParameters["sweepId"];
            if (_sweepId === null || _sweepId === undefined) {
                throw new Error('Required parameter sweepId was null or undefined when calling postSweepRuleActivationBySweepId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/sweep-rules/" + encodeURIComponent(String(_sweepId)) + "/activate", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        SweepRulesHttpService.prototype.postSweepRuleActivationBySweepIdUrl = function (requestParameters) {
            var _sweepId = requestParameters["sweepId"];
            if (_sweepId === null || _sweepId === undefined) {
                throw new Error('Required parameter sweepId was null or undefined when calling postSweepRuleActivationBySweepId.');
            }
            return this.configuration.basePath + "/client-api/v2/sweep-rules/" + encodeURIComponent(String(_sweepId)) + "/activate";
        };
        SweepRulesHttpService.prototype.postSweepRuleCancelingBySweepId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _sweepId = requestParameters["sweepId"];
            if (_sweepId === null || _sweepId === undefined) {
                throw new Error('Required parameter sweepId was null or undefined when calling postSweepRuleCancelingBySweepId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/sweep-rules/" + encodeURIComponent(String(_sweepId)) + "/cancel", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        SweepRulesHttpService.prototype.postSweepRuleCancelingBySweepIdUrl = function (requestParameters) {
            var _sweepId = requestParameters["sweepId"];
            if (_sweepId === null || _sweepId === undefined) {
                throw new Error('Required parameter sweepId was null or undefined when calling postSweepRuleCancelingBySweepId.');
            }
            return this.configuration.basePath + "/client-api/v2/sweep-rules/" + encodeURIComponent(String(_sweepId)) + "/cancel";
        };
        SweepRulesHttpService.prototype.postSweepRulePausingBySweepId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _sweepId = requestParameters["sweepId"];
            if (_sweepId === null || _sweepId === undefined) {
                throw new Error('Required parameter sweepId was null or undefined when calling postSweepRulePausingBySweepId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/sweep-rules/" + encodeURIComponent(String(_sweepId)) + "/pause", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        SweepRulesHttpService.prototype.postSweepRulePausingBySweepIdUrl = function (requestParameters) {
            var _sweepId = requestParameters["sweepId"];
            if (_sweepId === null || _sweepId === undefined) {
                throw new Error('Required parameter sweepId was null or undefined when calling postSweepRulePausingBySweepId.');
            }
            return this.configuration.basePath + "/client-api/v2/sweep-rules/" + encodeURIComponent(String(_sweepId)) + "/pause";
        };
        return SweepRulesHttpService;
    }());
    SweepRulesHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SweepRulesHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: CASH_MANAGEMENT_BASE_PATH, optional: true }, { token: CashManagementConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    SweepRulesHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SweepRulesHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SweepRulesHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [CASH_MANAGEMENT_BASE_PATH]
                        }] }, { type: CashManagementConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var SweepRulesHttpServiceGetSweepRuleBySweepIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/sweep-rules/{sweepId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": 135864,
                        "name": "Investment IS 605",
                        "description": "Two-way daily investment sweep that never expires.",
                        "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                        "targetAccountBban": "680BCNMXVMFAY60",
                        "lowerBoundAmount": 10000,
                        "upperBoundAmount": 12500,
                        "status": "active",
                        "ruleType": "two-way",
                        "schedule": {
                            "frequency": "EvryDay(1)",
                            "dayOptions": {
                                "startingAtTime": 540,
                                "intradayRepeat": {
                                    "everyMinutes": 60,
                                    "endingAtTime": 1260
                                }
                            }
                        },
                        "startDate": "2019-04-10T15:52:27.218Z",
                        "createdAt": "2019-04-09T15:52:27.218Z",
                        "createdBy": "Denys Haidash"
                    }
                },
                {
                    status: 200,
                    body: {
                        "lowerBoundAmount": 6.027456183070403,
                        "additions": {
                            "key": "additions"
                        },
                        "targetAccountBban": "targetAccountBban",
                        "description": "description",
                        "sweptAccountBban": "sweptAccountBban",
                        "expiryDate": "2000-01-23T04:56:07.000+00:00",
                        "schedule": {
                            "dayOptions": {
                                "intradayRepeat": {
                                    "endingAtTime": 2.3021358869347655,
                                    "everyMinutes": 5.637376656633329
                                },
                                "startingAtTime": 5.962133916683182
                            },
                            "monthOptions": {
                                "startingAtTime": 3.616076749251911,
                                "monthRepeat": "day-of-the-month"
                            },
                            "frequency": "frequency",
                            "weekOptions": {
                                "weekRepeatDay": 9.301444243932576,
                                "startingAtTime": 7.061401241503109
                            }
                        },
                        "createdAt": "2000-01-23T04:56:07.000+00:00",
                        "createdBy": "createdBy",
                        "upperBoundAmount": 1.4658129805029452,
                        "name": "name",
                        "id": 0.8008281904610115,
                        "startDate": "2000-01-23T04:56:07.000+00:00",
                        "status": "status"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var SweepRulesHttpServiceGetSweeprulesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/sweep-rules",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "items": [{
                                "id": 135864,
                                "name": "Investment IS 605",
                                "description": "Two-way daily investment sweep that never expires.",
                                "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                                "targetAccountBban": "680BCNMXVMFAY60",
                                "lowerBoundAmount": 10000,
                                "upperBoundAmount": 12500,
                                "status": "entered",
                                "ruleType": "two-way",
                                "schedule": {
                                    "frequency": "EvryDay(1)",
                                    "dayOptions": {
                                        "startingAtTime": 540,
                                        "intradayRepeat": {
                                            "everyMinutes": 60,
                                            "endingAtTime": 1260
                                        }
                                    }
                                },
                                "startDate": "2019-04-10T15:52:27.218Z",
                                "createdAt": "2019-04-09T15:52:27.218Z",
                                "createdBy": "Anna Hrechana"
                            }, {
                                "id": 246975,
                                "name": "Current CS 16",
                                "description": "Two-way monthly sweep between current accounts that expires today.",
                                "sweptAccountBban": "TRIO0212471066",
                                "targetAccountBban": "FR596129172765GE6UQ2U8TYD56",
                                "lowerBoundAmount": 500,
                                "upperBoundAmount": 1750,
                                "status": "active",
                                "ruleType": "two-way",
                                "schedule": {
                                    "frequency": "EvryMonth(1)",
                                    "monthOptions": {
                                        "startingAtTime": 720,
                                        "monthRepeat": "week-day-of-the-month"
                                    }
                                },
                                "startDate": "2019-04-10T16:24:37.463Z",
                                "createdAt": "2019-04-09T16:24:37.463Z",
                                "createdBy": "Serhii Koshman"
                            }, {
                                "id": 137731,
                                "name": "Loan LS 31",
                                "description": "Loan sweep that takes place each 4 weeks on Sundays until manually stopped.",
                                "sweptAccountBban": "FR596129172765GE6UQ2U8TYD56",
                                "targetAccountBban": "6129172765GE6UQ2U8TYD84",
                                "upperBoundAmount": 5000,
                                "status": "paused",
                                "ruleType": "one-way",
                                "schedule": {
                                    "frequency": "EvryWeek(4)",
                                    "weekOptions": {
                                        "startingAtTime": 0,
                                        "weekRepeatDay": 0
                                    }
                                },
                                "startDate": "2019-01-01T16:24:37.463Z",
                                "createdAt": "2019-01-01T16:23:37.463Z",
                                "createdBy": "Marian Kitsenko"
                            }, {
                                "id": 225547,
                                "name": "Savings SS 24",
                                "description": "One-time one-way sweep to accumulate savings performed on a daily basis.",
                                "sweptAccountBban": "FR596129172765GE6UQ2U8TYD56",
                                "targetAccountBban": "TRIO0212471066",
                                "upperBoundAmount": 1100,
                                "status": "rejected",
                                "ruleType": "one-way",
                                "schedule": {
                                    "frequency": "EvryDay(1)",
                                    "dayOptions": {
                                        "startingAtTime": 30,
                                        "intradayRepeat": {
                                            "everyMinutes": 60,
                                            "endingAtTime": 30
                                        }
                                    }
                                },
                                "startDate": "2019-04-11T08:10:18.591Z",
                                "expiryDate": "2019-04-11T20:59:59.999Z",
                                "createdAt": "2019-04-10T08:10:18.591Z",
                                "createdBy": "Dmytro Topchii"
                            }, {
                                "id": 110580,
                                "name": "Debit SD 350",
                                "description": "Maintenance sweep to handle debit card account set to repeat once a week starting from next month.",
                                "sweptAccountBban": "FR596129172765GE6UQ2U8TYD56",
                                "targetAccountBban": "6129172765GE6UQ2U8TYD84",
                                "lowerBoundAmount": 1000,
                                "status": "cancelled",
                                "ruleType": "one-way",
                                "schedule": {
                                    "frequency": "EvryDay(7)",
                                    "dayOptions": {
                                        "startingAtTime": 540
                                    }
                                },
                                "startDate": "2019-05-10T21:00:00.000Z",
                                "expiryDate": "2019-05-11T20:59:59.999Z",
                                "createdAt": "2019-05-09T21:00:00.000Z",
                                "createdBy": "Serhii Sobur"
                            }, {
                                "id": 190783,
                                "name": "Debit 500",
                                "description": "Maintenance sweep to handle debit card account set to repeat every 5 days starting from next month.",
                                "sweptAccountBban": "FR596129172765GE6UQ2U8TYD56",
                                "targetAccountBban": "6129172765GE6UQ2U8TYD84",
                                "lowerBoundAmount": 500,
                                "status": "processing",
                                "ruleType": "one-way",
                                "schedule": {
                                    "frequency": "EvryDay(5)",
                                    "dayOptions": {
                                        "startingAtTime": 540
                                    }
                                },
                                "startDate": "2019-05-10T21:00:00.000Z",
                                "expiryDate": "2019-05-11T20:59:59.999Z",
                                "createdAt": "2019-05-09T21:00:00.000Z",
                                "createdBy": "Yevhen Lubianov"
                            }, {
                                "id": 256076,
                                "name": "Outdated CS 3",
                                "description": "Two-way monthly sweep between current accounts that have been expired.",
                                "sweptAccountBban": "TRIO0212471066",
                                "targetAccountBban": "FR596129172765GE6UQ2U8TYD56",
                                "lowerBoundAmount": 500,
                                "upperBoundAmount": 1750,
                                "status": "expired",
                                "ruleType": "two-way",
                                "schedule": {
                                    "frequency": "EvryMonth(1)",
                                    "monthOptions": {
                                        "startingAtTime": 720,
                                        "monthRepeat": "week-day-of-the-month"
                                    }
                                },
                                "startDate": "2019-03-10T16:24:37.463Z",
                                "expiryDate": "2019-04-10T16:24:37.463Z",
                                "createdAt": "2019-03-09T16:24:37.463Z",
                                "createdBy": "Yevhenii Holub"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var SweepRulesHttpServicePostCreateSweepRuleMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/sweep-rules",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": 16250
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var SweepRulesHttpServicePostSweepRuleActivationBySweepIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/sweep-rules/{sweepId}/activate",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": 135864,
                        "name": "Investment IS 605",
                        "description": "Two-way daily investment sweep that never expires.",
                        "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                        "targetAccountBban": "680BCNMXVMFAY60",
                        "lowerBoundAmount": 10000,
                        "upperBoundAmount": 12500,
                        "status": "active",
                        "ruleType": "two-way",
                        "schedule": {
                            "frequency": "EvryDay(1)",
                            "dayOptions": {
                                "startingAtTime": 540,
                                "intradayRepeat": {
                                    "everyMinutes": 60,
                                    "endingAtTime": 1260
                                }
                            }
                        },
                        "startDate": "2019-04-10T15:52:27.218Z",
                        "createdAt": "2019-04-09T15:52:27.218Z",
                        "createdBy": "Denys Haidash"
                    }
                },
                {
                    status: 200,
                    body: {
                        "lowerBoundAmount": 6.027456183070403,
                        "additions": {
                            "key": "additions"
                        },
                        "targetAccountBban": "targetAccountBban",
                        "description": "description",
                        "sweptAccountBban": "sweptAccountBban",
                        "expiryDate": "2000-01-23T04:56:07.000+00:00",
                        "schedule": {
                            "dayOptions": {
                                "intradayRepeat": {
                                    "endingAtTime": 2.3021358869347655,
                                    "everyMinutes": 5.637376656633329
                                },
                                "startingAtTime": 5.962133916683182
                            },
                            "monthOptions": {
                                "startingAtTime": 3.616076749251911,
                                "monthRepeat": "day-of-the-month"
                            },
                            "frequency": "frequency",
                            "weekOptions": {
                                "weekRepeatDay": 9.301444243932576,
                                "startingAtTime": 7.061401241503109
                            }
                        },
                        "createdAt": "2000-01-23T04:56:07.000+00:00",
                        "createdBy": "createdBy",
                        "upperBoundAmount": 1.4658129805029452,
                        "name": "name",
                        "id": 0.8008281904610115,
                        "startDate": "2000-01-23T04:56:07.000+00:00",
                        "status": "status"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var SweepRulesHttpServicePostSweepRuleCancelingBySweepIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/sweep-rules/{sweepId}/cancel",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": 135864,
                        "name": "Investment IS 605",
                        "description": "Two-way daily investment sweep that never expires.",
                        "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                        "targetAccountBban": "680BCNMXVMFAY60",
                        "lowerBoundAmount": 10000,
                        "upperBoundAmount": 12500,
                        "status": "cancel",
                        "ruleType": "two-way",
                        "schedule": {
                            "frequency": "EvryDay(1)",
                            "dayOptions": {
                                "startingAtTime": 540,
                                "intradayRepeat": {
                                    "everyMinutes": 60,
                                    "endingAtTime": 1260
                                }
                            }
                        },
                        "startDate": "2019-04-10T15:52:27.218Z",
                        "createdAt": "2019-04-09T15:52:27.218Z",
                        "createdBy": "Denys Haidash"
                    }
                },
                {
                    status: 200,
                    body: {
                        "lowerBoundAmount": 6.027456183070403,
                        "additions": {
                            "key": "additions"
                        },
                        "targetAccountBban": "targetAccountBban",
                        "description": "description",
                        "sweptAccountBban": "sweptAccountBban",
                        "expiryDate": "2000-01-23T04:56:07.000+00:00",
                        "schedule": {
                            "dayOptions": {
                                "intradayRepeat": {
                                    "endingAtTime": 2.3021358869347655,
                                    "everyMinutes": 5.637376656633329
                                },
                                "startingAtTime": 5.962133916683182
                            },
                            "monthOptions": {
                                "startingAtTime": 3.616076749251911,
                                "monthRepeat": "day-of-the-month"
                            },
                            "frequency": "frequency",
                            "weekOptions": {
                                "weekRepeatDay": 9.301444243932576,
                                "startingAtTime": 7.061401241503109
                            }
                        },
                        "createdAt": "2000-01-23T04:56:07.000+00:00",
                        "createdBy": "createdBy",
                        "upperBoundAmount": 1.4658129805029452,
                        "name": "name",
                        "id": 0.8008281904610115,
                        "startDate": "2000-01-23T04:56:07.000+00:00",
                        "status": "status"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var SweepRulesHttpServicePostSweepRulePausingBySweepIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/sweep-rules/{sweepId}/pause",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": 135864,
                        "name": "Investment IS 605",
                        "description": "Two-way daily investment sweep that never expires.",
                        "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                        "targetAccountBban": "680BCNMXVMFAY60",
                        "lowerBoundAmount": 10000,
                        "upperBoundAmount": 12500,
                        "status": "pause",
                        "ruleType": "two-way",
                        "schedule": {
                            "frequency": "EvryDay(1)",
                            "dayOptions": {
                                "startingAtTime": 540,
                                "intradayRepeat": {
                                    "everyMinutes": 60,
                                    "endingAtTime": 1260
                                }
                            }
                        },
                        "startDate": "2019-04-10T15:52:27.218Z",
                        "createdAt": "2019-04-09T15:52:27.218Z",
                        "createdBy": "Denys Haidash"
                    }
                },
                {
                    status: 200,
                    body: {
                        "lowerBoundAmount": 6.027456183070403,
                        "additions": {
                            "key": "additions"
                        },
                        "targetAccountBban": "targetAccountBban",
                        "description": "description",
                        "sweptAccountBban": "sweptAccountBban",
                        "expiryDate": "2000-01-23T04:56:07.000+00:00",
                        "schedule": {
                            "dayOptions": {
                                "intradayRepeat": {
                                    "endingAtTime": 2.3021358869347655,
                                    "everyMinutes": 5.637376656633329
                                },
                                "startingAtTime": 5.962133916683182
                            },
                            "monthOptions": {
                                "startingAtTime": 3.616076749251911,
                                "monthRepeat": "day-of-the-month"
                            },
                            "frequency": "frequency",
                            "weekOptions": {
                                "weekRepeatDay": 9.301444243932576,
                                "startingAtTime": 7.061401241503109
                            }
                        },
                        "createdAt": "2000-01-23T04:56:07.000+00:00",
                        "createdBy": "createdBy",
                        "upperBoundAmount": 1.4658129805029452,
                        "name": "name",
                        "id": 0.8008281904610115,
                        "startDate": "2000-01-23T04:56:07.000+00:00",
                        "status": "status"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var SweepRulesHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/sweep-rules/{sweepId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": 135864,
                        "name": "Investment IS 605",
                        "description": "Two-way daily investment sweep that never expires.",
                        "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                        "targetAccountBban": "680BCNMXVMFAY60",
                        "lowerBoundAmount": 10000,
                        "upperBoundAmount": 12500,
                        "status": "active",
                        "ruleType": "two-way",
                        "schedule": {
                            "frequency": "EvryDay(1)",
                            "dayOptions": {
                                "startingAtTime": 540,
                                "intradayRepeat": {
                                    "everyMinutes": 60,
                                    "endingAtTime": 1260
                                }
                            }
                        },
                        "startDate": "2019-04-10T15:52:27.218Z",
                        "createdAt": "2019-04-09T15:52:27.218Z",
                        "createdBy": "Denys Haidash"
                    }
                },
                {
                    status: 200,
                    body: {
                        "lowerBoundAmount": 6.027456183070403,
                        "additions": {
                            "key": "additions"
                        },
                        "targetAccountBban": "targetAccountBban",
                        "description": "description",
                        "sweptAccountBban": "sweptAccountBban",
                        "expiryDate": "2000-01-23T04:56:07.000+00:00",
                        "schedule": {
                            "dayOptions": {
                                "intradayRepeat": {
                                    "endingAtTime": 2.3021358869347655,
                                    "everyMinutes": 5.637376656633329
                                },
                                "startingAtTime": 5.962133916683182
                            },
                            "monthOptions": {
                                "startingAtTime": 3.616076749251911,
                                "monthRepeat": "day-of-the-month"
                            },
                            "frequency": "frequency",
                            "weekOptions": {
                                "weekRepeatDay": 9.301444243932576,
                                "startingAtTime": 7.061401241503109
                            }
                        },
                        "createdAt": "2000-01-23T04:56:07.000+00:00",
                        "createdBy": "createdBy",
                        "upperBoundAmount": 1.4658129805029452,
                        "name": "name",
                        "id": 0.8008281904610115,
                        "startDate": "2000-01-23T04:56:07.000+00:00",
                        "status": "status"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/sweep-rules",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "items": [{
                                "id": 135864,
                                "name": "Investment IS 605",
                                "description": "Two-way daily investment sweep that never expires.",
                                "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                                "targetAccountBban": "680BCNMXVMFAY60",
                                "lowerBoundAmount": 10000,
                                "upperBoundAmount": 12500,
                                "status": "entered",
                                "ruleType": "two-way",
                                "schedule": {
                                    "frequency": "EvryDay(1)",
                                    "dayOptions": {
                                        "startingAtTime": 540,
                                        "intradayRepeat": {
                                            "everyMinutes": 60,
                                            "endingAtTime": 1260
                                        }
                                    }
                                },
                                "startDate": "2019-04-10T15:52:27.218Z",
                                "createdAt": "2019-04-09T15:52:27.218Z",
                                "createdBy": "Anna Hrechana"
                            }, {
                                "id": 246975,
                                "name": "Current CS 16",
                                "description": "Two-way monthly sweep between current accounts that expires today.",
                                "sweptAccountBban": "TRIO0212471066",
                                "targetAccountBban": "FR596129172765GE6UQ2U8TYD56",
                                "lowerBoundAmount": 500,
                                "upperBoundAmount": 1750,
                                "status": "active",
                                "ruleType": "two-way",
                                "schedule": {
                                    "frequency": "EvryMonth(1)",
                                    "monthOptions": {
                                        "startingAtTime": 720,
                                        "monthRepeat": "week-day-of-the-month"
                                    }
                                },
                                "startDate": "2019-04-10T16:24:37.463Z",
                                "createdAt": "2019-04-09T16:24:37.463Z",
                                "createdBy": "Serhii Koshman"
                            }, {
                                "id": 137731,
                                "name": "Loan LS 31",
                                "description": "Loan sweep that takes place each 4 weeks on Sundays until manually stopped.",
                                "sweptAccountBban": "FR596129172765GE6UQ2U8TYD56",
                                "targetAccountBban": "6129172765GE6UQ2U8TYD84",
                                "upperBoundAmount": 5000,
                                "status": "paused",
                                "ruleType": "one-way",
                                "schedule": {
                                    "frequency": "EvryWeek(4)",
                                    "weekOptions": {
                                        "startingAtTime": 0,
                                        "weekRepeatDay": 0
                                    }
                                },
                                "startDate": "2019-01-01T16:24:37.463Z",
                                "createdAt": "2019-01-01T16:23:37.463Z",
                                "createdBy": "Marian Kitsenko"
                            }, {
                                "id": 225547,
                                "name": "Savings SS 24",
                                "description": "One-time one-way sweep to accumulate savings performed on a daily basis.",
                                "sweptAccountBban": "FR596129172765GE6UQ2U8TYD56",
                                "targetAccountBban": "TRIO0212471066",
                                "upperBoundAmount": 1100,
                                "status": "rejected",
                                "ruleType": "one-way",
                                "schedule": {
                                    "frequency": "EvryDay(1)",
                                    "dayOptions": {
                                        "startingAtTime": 30,
                                        "intradayRepeat": {
                                            "everyMinutes": 60,
                                            "endingAtTime": 30
                                        }
                                    }
                                },
                                "startDate": "2019-04-11T08:10:18.591Z",
                                "expiryDate": "2019-04-11T20:59:59.999Z",
                                "createdAt": "2019-04-10T08:10:18.591Z",
                                "createdBy": "Dmytro Topchii"
                            }, {
                                "id": 110580,
                                "name": "Debit SD 350",
                                "description": "Maintenance sweep to handle debit card account set to repeat once a week starting from next month.",
                                "sweptAccountBban": "FR596129172765GE6UQ2U8TYD56",
                                "targetAccountBban": "6129172765GE6UQ2U8TYD84",
                                "lowerBoundAmount": 1000,
                                "status": "cancelled",
                                "ruleType": "one-way",
                                "schedule": {
                                    "frequency": "EvryDay(7)",
                                    "dayOptions": {
                                        "startingAtTime": 540
                                    }
                                },
                                "startDate": "2019-05-10T21:00:00.000Z",
                                "expiryDate": "2019-05-11T20:59:59.999Z",
                                "createdAt": "2019-05-09T21:00:00.000Z",
                                "createdBy": "Serhii Sobur"
                            }, {
                                "id": 190783,
                                "name": "Debit 500",
                                "description": "Maintenance sweep to handle debit card account set to repeat every 5 days starting from next month.",
                                "sweptAccountBban": "FR596129172765GE6UQ2U8TYD56",
                                "targetAccountBban": "6129172765GE6UQ2U8TYD84",
                                "lowerBoundAmount": 500,
                                "status": "processing",
                                "ruleType": "one-way",
                                "schedule": {
                                    "frequency": "EvryDay(5)",
                                    "dayOptions": {
                                        "startingAtTime": 540
                                    }
                                },
                                "startDate": "2019-05-10T21:00:00.000Z",
                                "expiryDate": "2019-05-11T20:59:59.999Z",
                                "createdAt": "2019-05-09T21:00:00.000Z",
                                "createdBy": "Yevhen Lubianov"
                            }, {
                                "id": 256076,
                                "name": "Outdated CS 3",
                                "description": "Two-way monthly sweep between current accounts that have been expired.",
                                "sweptAccountBban": "TRIO0212471066",
                                "targetAccountBban": "FR596129172765GE6UQ2U8TYD56",
                                "lowerBoundAmount": 500,
                                "upperBoundAmount": 1750,
                                "status": "expired",
                                "ruleType": "two-way",
                                "schedule": {
                                    "frequency": "EvryMonth(1)",
                                    "monthOptions": {
                                        "startingAtTime": 720,
                                        "monthRepeat": "week-day-of-the-month"
                                    }
                                },
                                "startDate": "2019-03-10T16:24:37.463Z",
                                "expiryDate": "2019-04-10T16:24:37.463Z",
                                "createdAt": "2019-03-09T16:24:37.463Z",
                                "createdBy": "Yevhenii Holub"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/sweep-rules",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": 16250
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/sweep-rules/{sweepId}/activate",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": 135864,
                        "name": "Investment IS 605",
                        "description": "Two-way daily investment sweep that never expires.",
                        "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                        "targetAccountBban": "680BCNMXVMFAY60",
                        "lowerBoundAmount": 10000,
                        "upperBoundAmount": 12500,
                        "status": "active",
                        "ruleType": "two-way",
                        "schedule": {
                            "frequency": "EvryDay(1)",
                            "dayOptions": {
                                "startingAtTime": 540,
                                "intradayRepeat": {
                                    "everyMinutes": 60,
                                    "endingAtTime": 1260
                                }
                            }
                        },
                        "startDate": "2019-04-10T15:52:27.218Z",
                        "createdAt": "2019-04-09T15:52:27.218Z",
                        "createdBy": "Denys Haidash"
                    }
                },
                {
                    status: 200,
                    body: {
                        "lowerBoundAmount": 6.027456183070403,
                        "additions": {
                            "key": "additions"
                        },
                        "targetAccountBban": "targetAccountBban",
                        "description": "description",
                        "sweptAccountBban": "sweptAccountBban",
                        "expiryDate": "2000-01-23T04:56:07.000+00:00",
                        "schedule": {
                            "dayOptions": {
                                "intradayRepeat": {
                                    "endingAtTime": 2.3021358869347655,
                                    "everyMinutes": 5.637376656633329
                                },
                                "startingAtTime": 5.962133916683182
                            },
                            "monthOptions": {
                                "startingAtTime": 3.616076749251911,
                                "monthRepeat": "day-of-the-month"
                            },
                            "frequency": "frequency",
                            "weekOptions": {
                                "weekRepeatDay": 9.301444243932576,
                                "startingAtTime": 7.061401241503109
                            }
                        },
                        "createdAt": "2000-01-23T04:56:07.000+00:00",
                        "createdBy": "createdBy",
                        "upperBoundAmount": 1.4658129805029452,
                        "name": "name",
                        "id": 0.8008281904610115,
                        "startDate": "2000-01-23T04:56:07.000+00:00",
                        "status": "status"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/sweep-rules/{sweepId}/cancel",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": 135864,
                        "name": "Investment IS 605",
                        "description": "Two-way daily investment sweep that never expires.",
                        "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                        "targetAccountBban": "680BCNMXVMFAY60",
                        "lowerBoundAmount": 10000,
                        "upperBoundAmount": 12500,
                        "status": "cancel",
                        "ruleType": "two-way",
                        "schedule": {
                            "frequency": "EvryDay(1)",
                            "dayOptions": {
                                "startingAtTime": 540,
                                "intradayRepeat": {
                                    "everyMinutes": 60,
                                    "endingAtTime": 1260
                                }
                            }
                        },
                        "startDate": "2019-04-10T15:52:27.218Z",
                        "createdAt": "2019-04-09T15:52:27.218Z",
                        "createdBy": "Denys Haidash"
                    }
                },
                {
                    status: 200,
                    body: {
                        "lowerBoundAmount": 6.027456183070403,
                        "additions": {
                            "key": "additions"
                        },
                        "targetAccountBban": "targetAccountBban",
                        "description": "description",
                        "sweptAccountBban": "sweptAccountBban",
                        "expiryDate": "2000-01-23T04:56:07.000+00:00",
                        "schedule": {
                            "dayOptions": {
                                "intradayRepeat": {
                                    "endingAtTime": 2.3021358869347655,
                                    "everyMinutes": 5.637376656633329
                                },
                                "startingAtTime": 5.962133916683182
                            },
                            "monthOptions": {
                                "startingAtTime": 3.616076749251911,
                                "monthRepeat": "day-of-the-month"
                            },
                            "frequency": "frequency",
                            "weekOptions": {
                                "weekRepeatDay": 9.301444243932576,
                                "startingAtTime": 7.061401241503109
                            }
                        },
                        "createdAt": "2000-01-23T04:56:07.000+00:00",
                        "createdBy": "createdBy",
                        "upperBoundAmount": 1.4658129805029452,
                        "name": "name",
                        "id": 0.8008281904610115,
                        "startDate": "2000-01-23T04:56:07.000+00:00",
                        "status": "status"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/sweep-rules/{sweepId}/pause",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": 135864,
                        "name": "Investment IS 605",
                        "description": "Two-way daily investment sweep that never expires.",
                        "sweptAccountBban": "6129172765GE6UQ2U8TYD56",
                        "targetAccountBban": "680BCNMXVMFAY60",
                        "lowerBoundAmount": 10000,
                        "upperBoundAmount": 12500,
                        "status": "pause",
                        "ruleType": "two-way",
                        "schedule": {
                            "frequency": "EvryDay(1)",
                            "dayOptions": {
                                "startingAtTime": 540,
                                "intradayRepeat": {
                                    "everyMinutes": 60,
                                    "endingAtTime": 1260
                                }
                            }
                        },
                        "startDate": "2019-04-10T15:52:27.218Z",
                        "createdAt": "2019-04-09T15:52:27.218Z",
                        "createdBy": "Denys Haidash"
                    }
                },
                {
                    status: 200,
                    body: {
                        "lowerBoundAmount": 6.027456183070403,
                        "additions": {
                            "key": "additions"
                        },
                        "targetAccountBban": "targetAccountBban",
                        "description": "description",
                        "sweptAccountBban": "sweptAccountBban",
                        "expiryDate": "2000-01-23T04:56:07.000+00:00",
                        "schedule": {
                            "dayOptions": {
                                "intradayRepeat": {
                                    "endingAtTime": 2.3021358869347655,
                                    "everyMinutes": 5.637376656633329
                                },
                                "startingAtTime": 5.962133916683182
                            },
                            "monthOptions": {
                                "startingAtTime": 3.616076749251911,
                                "monthRepeat": "day-of-the-month"
                            },
                            "frequency": "frequency",
                            "weekOptions": {
                                "weekRepeatDay": 9.301444243932576,
                                "startingAtTime": 7.061401241503109
                            }
                        },
                        "createdAt": "2000-01-23T04:56:07.000+00:00",
                        "createdBy": "createdBy",
                        "upperBoundAmount": 1.4658129805029452,
                        "name": "name",
                        "id": 0.8008281904610115,
                        "startDate": "2000-01-23T04:56:07.000+00:00",
                        "status": "status"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    exports.CASH_MANAGEMENT_BASE_PATH = CASH_MANAGEMENT_BASE_PATH;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.CashManagementApiModule = CashManagementApiModule;
    exports.CashManagementConfiguration = CashManagementConfiguration;
    exports.RuleType = RuleType;
    exports.SweepRulesHttpService = SweepRulesHttpService;
    exports.SweepRulesHttpServiceGetSweepRuleBySweepIdMocksProvider = SweepRulesHttpServiceGetSweepRuleBySweepIdMocksProvider;
    exports.SweepRulesHttpServiceGetSweeprulesMocksProvider = SweepRulesHttpServiceGetSweeprulesMocksProvider;
    exports.SweepRulesHttpServiceMocksProvider = SweepRulesHttpServiceMocksProvider;
    exports.SweepRulesHttpServicePostCreateSweepRuleMocksProvider = SweepRulesHttpServicePostCreateSweepRuleMocksProvider;
    exports.SweepRulesHttpServicePostSweepRuleActivationBySweepIdMocksProvider = SweepRulesHttpServicePostSweepRuleActivationBySweepIdMocksProvider;
    exports.SweepRulesHttpServicePostSweepRuleCancelingBySweepIdMocksProvider = SweepRulesHttpServicePostSweepRuleCancelingBySweepIdMocksProvider;
    exports.SweepRulesHttpServicePostSweepRulePausingBySweepIdMocksProvider = SweepRulesHttpServicePostSweepRulePausingBySweepIdMocksProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-cash-management-http-ang.umd.js.map
