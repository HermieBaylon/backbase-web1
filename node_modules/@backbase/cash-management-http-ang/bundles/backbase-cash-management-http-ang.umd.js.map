{"version":3,"file":"backbase-cash-management-http-ang.umd.js","sources":["../../model/ruleType.ts","../../model/sweepScheduleRuleMonthOptions.ts","../../model/sweepScheduleRuleWeekOptions.ts","../../variables.ts","../../configuration.ts","../../api.module.ts","../../encoder.ts","../../api/sweepRules.service.ts","../../api/sweepRules.service.mocks.ts"],"sourcesContent":["/**\n * Sweeping\n * Automates the sweeping of funds between accounts to ensure that money is earning higher interest rates in better investment vehicles\n *\n * The version of the OpenAPI document: 2.2.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * The rule type of a sweep.\n */\nexport type RuleType = 'one-way' | 'two-way';\n\nexport const RuleType = {\n    OneWay: 'one-way' as RuleType,\n    TwoWay: 'two-way' as RuleType\n};\n\n","/**\n * Sweeping\n * Automates the sweeping of funds between accounts to ensure that money is earning higher interest rates in better investment vehicles\n *\n * The version of the OpenAPI document: 2.2.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface SweepScheduleRuleMonthOptions { \n    /**\n     * Time when sweep rule will begin to act (in minutes from beginning of day)\n     */\n    [\"startingAtTime\"]: number;\n    /**\n     * Type of a repeat within a month\n     */\n    [\"monthRepeat\"]: SweepScheduleRuleMonthOptions.MonthRepeatEnum;\n}\nexport namespace SweepScheduleRuleMonthOptions {\n    export type MonthRepeatEnum = 'day-of-the-month' | 'week-day-of-the-month';\n    export const MonthRepeatEnum = {\n        DayOfTheMonth: 'day-of-the-month' as MonthRepeatEnum,\n        WeekDayOfTheMonth: 'week-day-of-the-month' as MonthRepeatEnum\n    };\n}\n\n\n","/**\n * Sweeping\n * Automates the sweeping of funds between accounts to ensure that money is earning higher interest rates in better investment vehicles\n *\n * The version of the OpenAPI document: 2.2.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface SweepScheduleRuleWeekOptions { \n    /**\n     * Time when sweep rule will begin to act (in minutes from beginning of day)\n     */\n    [\"startingAtTime\"]: number;\n    /**\n     * Number of a day in a week when the sweep is repeating (starting from Sunday = 0)\n     */\n    [\"weekRepeatDay\"]: SweepScheduleRuleWeekOptions.WeekRepeatDayEnum;\n}\nexport namespace SweepScheduleRuleWeekOptions {\n    export type WeekRepeatDayEnum = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n    export const WeekRepeatDayEnum = {\n        NUMBER_0: 0 as WeekRepeatDayEnum,\n        NUMBER_1: 1 as WeekRepeatDayEnum,\n        NUMBER_2: 2 as WeekRepeatDayEnum,\n        NUMBER_3: 3 as WeekRepeatDayEnum,\n        NUMBER_4: 4 as WeekRepeatDayEnum,\n        NUMBER_5: 5 as WeekRepeatDayEnum,\n        NUMBER_6: 6 as WeekRepeatDayEnum\n    };\n}\n\n\n","import { InjectionToken } from '@angular/core';\n\nexport const CASH_MANAGEMENT_BASE_PATH = new InjectionToken<string>('CASH_MANAGEMENT_BASE_PATH');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nimport { InjectionToken } from '@angular/core';\n\nexport interface CashManagementConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class CashManagementConfiguration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: CashManagementConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link CashManagementConfiguration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link CashManagementConfiguration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n\nexport const CONFIG_TOKEN = new InjectionToken('api-data-module CashManagementConfiguration');\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { CashManagementConfiguration, CONFIG_TOKEN } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DataModulesManager } from \"@backbase/foundation-ang/data-http\";\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers:    []\n})\nexport class CashManagementApiModule {\n    public static forRoot(configurationFactory: () => CashManagementConfiguration): ModuleWithProviders<CashManagementApiModule> {\n        return {\n            ngModule: CashManagementApiModule,\n            providers: [ { provide: CashManagementConfiguration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: CashManagementApiModule,\n                 @Optional() http: HttpClient,\n                 @Optional() dataModulesManager: DataModulesManager | null,\n                 config: CashManagementConfiguration,\n\n        ) {\n        if (parentModule) {\n            throw new Error('CashManagementApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","/**\n * Sweeping\n * Automates the sweeping of funds between accounts to ensure that money is earning higher interest rates in better investment vehicles\n *\n * The version of the OpenAPI document: 2.2.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { BadRequestError } from '../model/models';\nimport { Conflict } from '../model/models';\nimport { CreateSweepRuleRequest } from '../model/models';\nimport { ForbiddenError } from '../model/models';\nimport { InternalServerError } from '../model/models';\nimport { ListofsweeprulesPostResponseBody } from '../model/models';\nimport { SweepRuleGet } from '../model/models';\nimport { SweepRuleResponse } from '../model/models';\nimport { SweepRulesGet } from '../model/models';\n\nimport { CASH_MANAGEMENT_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { CashManagementConfiguration }                                     from '../configuration';\n\n\nexport interface GetSweepRuleBySweepIdRequestParams {\n    /** No description available */\n    [\"sweepId\"]: string;\n}\n\nexport interface GetSweeprulesRequestParams {\n    /** The search term used to search for sweep rules */\n    [\"query\"]?: string;\n    /** Page Number. Skip over pages of elements by specifying a start value for the query */\n    [\"from\"]?: number;\n    /** Record UUID. As an alternative for specifying \\&#39;from\\&#39; this allows to point to the record to start the selection from.  */\n    [\"cursor\"]?: string;\n    /** Limit the number of elements on the response. When used in combination with cursor, the value is allowed to be a negative number to indicate requesting records upwards from the starting point indicated by the cursor.  */\n    [\"size\"]?: number;\n}\n\nexport interface PostCreateSweepRuleRequestParams {\n    /** Create sweep rule */\n    [\"createSweepRuleRequest\"]?: CreateSweepRuleRequest;\n}\n\nexport interface PostSweepRuleActivationBySweepIdRequestParams {\n    /** No description available */\n    [\"sweepId\"]: string;\n}\n\nexport interface PostSweepRuleCancelingBySweepIdRequestParams {\n    /** No description available */\n    [\"sweepId\"]: string;\n}\n\nexport interface PostSweepRulePausingBySweepIdRequestParams {\n    /** No description available */\n    [\"sweepId\"]: string;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SweepRulesHttpService {\n\n    protected basePath = '';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new CashManagementConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(CASH_MANAGEMENT_BASE_PATH) basePath: string, @Optional() configuration: CashManagementConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Retrieve specific sweep rule.\n     * Retrieve specific sweep rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSweepRuleBySweepId(requestParameters: GetSweepRuleBySweepIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<SweepRuleGet>;\n    /**\n     * Retrieve specific sweep rule.\n     * Retrieve specific sweep rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSweepRuleBySweepId(requestParameters: GetSweepRuleBySweepIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<SweepRuleGet>>;\n    /**\n     * Retrieve specific sweep rule.\n     * Retrieve specific sweep rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSweepRuleBySweepId(requestParameters: GetSweepRuleBySweepIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<SweepRuleGet>>;\n    /**\n     * Retrieve specific sweep rule.\n     * Retrieve specific sweep rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSweepRuleBySweepId(requestParameters: GetSweepRuleBySweepIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _sweepId = requestParameters[\"sweepId\"];\n        if (_sweepId === null || _sweepId === undefined) {\n            throw new Error('Required parameter sweepId was null or undefined when calling getSweepRuleBySweepId.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<SweepRuleGet>(`${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getSweepRuleBySweepIdUrl(requestParameters: GetSweepRuleBySweepIdRequestParams): string {\n        const _sweepId = requestParameters[\"sweepId\"];\n        if (_sweepId === null || _sweepId === undefined) {\n            throw new Error('Required parameter sweepId was null or undefined when calling getSweepRuleBySweepId.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}`;\n    }\n\n    /**\n     * Retrieve list of sweep rules.\n     * Retrieve list of sweep rules.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSweeprules(requestParameters: GetSweeprulesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<SweepRulesGet>;\n    /**\n     * Retrieve list of sweep rules.\n     * Retrieve list of sweep rules.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSweeprules(requestParameters: GetSweeprulesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<SweepRulesGet>>;\n    /**\n     * Retrieve list of sweep rules.\n     * Retrieve list of sweep rules.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSweeprules(requestParameters: GetSweeprulesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<SweepRulesGet>>;\n    /**\n     * Retrieve list of sweep rules.\n     * Retrieve list of sweep rules.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSweeprules(requestParameters: GetSweeprulesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _query = requestParameters[\"query\"];\n        const _from = requestParameters[\"from\"];\n        const _cursor = requestParameters[\"cursor\"];\n        const _size = requestParameters[\"size\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_query !== undefined && _query !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_query, 'query');\n        }\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_cursor !== undefined && _cursor !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_cursor, 'cursor');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<SweepRulesGet>(`${this.configuration.basePath}/client-api/v2/sweep-rules`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getSweeprulesUrl(requestParameters: GetSweeprulesRequestParams): string {\n        const _query = requestParameters[\"query\"];\n        const _from = requestParameters[\"from\"];\n        const _cursor = requestParameters[\"cursor\"];\n        const _size = requestParameters[\"size\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_query !== undefined && _query !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_query, 'query');\n        }\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_cursor !== undefined && _cursor !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_cursor, 'cursor');\n        }\n        if (_size !== undefined && _size !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_size, 'size');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v2/sweep-rules${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Create sweep rule.\n     * Create sweep rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postCreateSweepRule(requestParameters: PostCreateSweepRuleRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<SweepRuleResponse>;\n    /**\n     * Create sweep rule.\n     * Create sweep rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postCreateSweepRule(requestParameters: PostCreateSweepRuleRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<SweepRuleResponse>>;\n    /**\n     * Create sweep rule.\n     * Create sweep rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postCreateSweepRule(requestParameters: PostCreateSweepRuleRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<SweepRuleResponse>>;\n    /**\n     * Create sweep rule.\n     * Create sweep rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postCreateSweepRule(requestParameters: PostCreateSweepRuleRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _createSweepRuleRequest = requestParameters[\"createSweepRuleRequest\"];\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<SweepRuleResponse>(`${this.configuration.basePath}/client-api/v2/sweep-rules`,\n            _createSweepRuleRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postCreateSweepRuleUrl(requestParameters: PostCreateSweepRuleRequestParams): string {\n        const _createSweepRuleRequest = requestParameters[\"createSweepRuleRequest\"];\n        return `${this.configuration.basePath}/client-api/v2/sweep-rules`;\n    }\n\n    /**\n     * Activate Sweep Rule.\n     * Activate Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRuleActivationBySweepId(requestParameters: PostSweepRuleActivationBySweepIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<SweepRuleGet>;\n    /**\n     * Activate Sweep Rule.\n     * Activate Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRuleActivationBySweepId(requestParameters: PostSweepRuleActivationBySweepIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<SweepRuleGet>>;\n    /**\n     * Activate Sweep Rule.\n     * Activate Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRuleActivationBySweepId(requestParameters: PostSweepRuleActivationBySweepIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<SweepRuleGet>>;\n    /**\n     * Activate Sweep Rule.\n     * Activate Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRuleActivationBySweepId(requestParameters: PostSweepRuleActivationBySweepIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _sweepId = requestParameters[\"sweepId\"];\n        if (_sweepId === null || _sweepId === undefined) {\n            throw new Error('Required parameter sweepId was null or undefined when calling postSweepRuleActivationBySweepId.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<SweepRuleGet>(`${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}/activate`,\n            null,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postSweepRuleActivationBySweepIdUrl(requestParameters: PostSweepRuleActivationBySweepIdRequestParams): string {\n        const _sweepId = requestParameters[\"sweepId\"];\n        if (_sweepId === null || _sweepId === undefined) {\n            throw new Error('Required parameter sweepId was null or undefined when calling postSweepRuleActivationBySweepId.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}/activate`;\n    }\n\n    /**\n     * Cancel Sweep Rule.\n     * Cancel Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRuleCancelingBySweepId(requestParameters: PostSweepRuleCancelingBySweepIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<SweepRuleGet>;\n    /**\n     * Cancel Sweep Rule.\n     * Cancel Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRuleCancelingBySweepId(requestParameters: PostSweepRuleCancelingBySweepIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<SweepRuleGet>>;\n    /**\n     * Cancel Sweep Rule.\n     * Cancel Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRuleCancelingBySweepId(requestParameters: PostSweepRuleCancelingBySweepIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<SweepRuleGet>>;\n    /**\n     * Cancel Sweep Rule.\n     * Cancel Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRuleCancelingBySweepId(requestParameters: PostSweepRuleCancelingBySweepIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _sweepId = requestParameters[\"sweepId\"];\n        if (_sweepId === null || _sweepId === undefined) {\n            throw new Error('Required parameter sweepId was null or undefined when calling postSweepRuleCancelingBySweepId.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<SweepRuleGet>(`${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}/cancel`,\n            null,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postSweepRuleCancelingBySweepIdUrl(requestParameters: PostSweepRuleCancelingBySweepIdRequestParams): string {\n        const _sweepId = requestParameters[\"sweepId\"];\n        if (_sweepId === null || _sweepId === undefined) {\n            throw new Error('Required parameter sweepId was null or undefined when calling postSweepRuleCancelingBySweepId.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}/cancel`;\n    }\n\n    /**\n     * Pause Sweep Rule.\n     * Pause Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRulePausingBySweepId(requestParameters: PostSweepRulePausingBySweepIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<SweepRuleGet>;\n    /**\n     * Pause Sweep Rule.\n     * Pause Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRulePausingBySweepId(requestParameters: PostSweepRulePausingBySweepIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<SweepRuleGet>>;\n    /**\n     * Pause Sweep Rule.\n     * Pause Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRulePausingBySweepId(requestParameters: PostSweepRulePausingBySweepIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<SweepRuleGet>>;\n    /**\n     * Pause Sweep Rule.\n     * Pause Sweep Rule\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postSweepRulePausingBySweepId(requestParameters: PostSweepRulePausingBySweepIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _sweepId = requestParameters[\"sweepId\"];\n        if (_sweepId === null || _sweepId === undefined) {\n            throw new Error('Required parameter sweepId was null or undefined when calling postSweepRulePausingBySweepId.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<SweepRuleGet>(`${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}/pause`,\n            null,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postSweepRulePausingBySweepIdUrl(requestParameters: PostSweepRulePausingBySweepIdRequestParams): string {\n        const _sweepId = requestParameters[\"sweepId\"];\n        if (_sweepId === null || _sweepId === undefined) {\n            throw new Error('Required parameter sweepId was null or undefined when calling postSweepRulePausingBySweepId.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/sweep-rules/${encodeURIComponent(String(_sweepId))}/pause`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /client-api/v2/sweep-rules/{sweepId} URL pattern\n*/\nexport const SweepRulesHttpServiceGetSweepRuleBySweepIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/sweep-rules/{sweepId}\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : 135864,\n  \"name\" : \"Investment IS 605\",\n  \"description\" : \"Two-way daily investment sweep that never expires.\",\n  \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n  \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n  \"lowerBoundAmount\" : 10000,\n  \"upperBoundAmount\" : 12500,\n  \"status\" : \"active\",\n  \"ruleType\" : \"two-way\",\n  \"schedule\" : {\n    \"frequency\" : \"EvryDay(1)\",\n    \"dayOptions\" : {\n      \"startingAtTime\" : 540,\n      \"intradayRepeat\" : {\n        \"everyMinutes\" : 60,\n        \"endingAtTime\" : 1260\n      }\n    }\n  },\n  \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n  \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n  \"createdBy\" : \"Denys Haidash\"\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"lowerBoundAmount\" : 6.027456183070403,\n  \"additions\" : {\n    \"key\" : \"additions\"\n  },\n  \"targetAccountBban\" : \"targetAccountBban\",\n  \"description\" : \"description\",\n  \"sweptAccountBban\" : \"sweptAccountBban\",\n  \"expiryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"schedule\" : {\n    \"dayOptions\" : {\n      \"intradayRepeat\" : {\n        \"endingAtTime\" : 2.3021358869347655,\n        \"everyMinutes\" : 5.637376656633329\n      },\n      \"startingAtTime\" : 5.962133916683182\n    },\n    \"monthOptions\" : {\n      \"startingAtTime\" : 3.616076749251911,\n      \"monthRepeat\" : \"day-of-the-month\"\n    },\n    \"frequency\" : \"frequency\",\n    \"weekOptions\" : {\n      \"weekRepeatDay\" : 9.301444243932576,\n      \"startingAtTime\" : 7.061401241503109\n    }\n  },\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdBy\" : \"createdBy\",\n  \"upperBoundAmount\" : 1.4658129805029452,\n  \"name\" : \"name\",\n  \"id\" : 0.8008281904610115,\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"status\" : \"status\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/sweep-rules URL pattern\n*/\nexport const SweepRulesHttpServiceGetSweeprulesMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/sweep-rules\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"items\" : [ {\n    \"id\" : 135864,\n    \"name\" : \"Investment IS 605\",\n    \"description\" : \"Two-way daily investment sweep that never expires.\",\n    \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n    \"lowerBoundAmount\" : 10000,\n    \"upperBoundAmount\" : 12500,\n    \"status\" : \"entered\",\n    \"ruleType\" : \"two-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryDay(1)\",\n      \"dayOptions\" : {\n        \"startingAtTime\" : 540,\n        \"intradayRepeat\" : {\n          \"everyMinutes\" : 60,\n          \"endingAtTime\" : 1260\n        }\n      }\n    },\n    \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n    \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n    \"createdBy\" : \"Anna Hrechana\"\n  }, {\n    \"id\" : 246975,\n    \"name\" : \"Current CS 16\",\n    \"description\" : \"Two-way monthly sweep between current accounts that expires today.\",\n    \"sweptAccountBban\" : \"TRIO0212471066\",\n    \"targetAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"lowerBoundAmount\" : 500,\n    \"upperBoundAmount\" : 1750,\n    \"status\" : \"active\",\n    \"ruleType\" : \"two-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryMonth(1)\",\n      \"monthOptions\" : {\n        \"startingAtTime\" : 720,\n        \"monthRepeat\" : \"week-day-of-the-month\"\n      }\n    },\n    \"startDate\" : \"2019-04-10T16:24:37.463Z\",\n    \"createdAt\" : \"2019-04-09T16:24:37.463Z\",\n    \"createdBy\" : \"Serhii Koshman\"\n  }, {\n    \"id\" : 137731,\n    \"name\" : \"Loan LS 31\",\n    \"description\" : \"Loan sweep that takes place each 4 weeks on Sundays until manually stopped.\",\n    \"sweptAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"6129172765GE6UQ2U8TYD84\",\n    \"upperBoundAmount\" : 5000,\n    \"status\" : \"paused\",\n    \"ruleType\" : \"one-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryWeek(4)\",\n      \"weekOptions\" : {\n        \"startingAtTime\" : 0,\n        \"weekRepeatDay\" : 0\n      }\n    },\n    \"startDate\" : \"2019-01-01T16:24:37.463Z\",\n    \"createdAt\" : \"2019-01-01T16:23:37.463Z\",\n    \"createdBy\" : \"Marian Kitsenko\"\n  }, {\n    \"id\" : 225547,\n    \"name\" : \"Savings SS 24\",\n    \"description\" : \"One-time one-way sweep to accumulate savings performed on a daily basis.\",\n    \"sweptAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"TRIO0212471066\",\n    \"upperBoundAmount\" : 1100,\n    \"status\" : \"rejected\",\n    \"ruleType\" : \"one-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryDay(1)\",\n      \"dayOptions\" : {\n        \"startingAtTime\" : 30,\n        \"intradayRepeat\" : {\n          \"everyMinutes\" : 60,\n          \"endingAtTime\" : 30\n        }\n      }\n    },\n    \"startDate\" : \"2019-04-11T08:10:18.591Z\",\n    \"expiryDate\" : \"2019-04-11T20:59:59.999Z\",\n    \"createdAt\" : \"2019-04-10T08:10:18.591Z\",\n    \"createdBy\" : \"Dmytro Topchii\"\n  }, {\n    \"id\" : 110580,\n    \"name\" : \"Debit SD 350\",\n    \"description\" : \"Maintenance sweep to handle debit card account set to repeat once a week starting from next month.\",\n    \"sweptAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"6129172765GE6UQ2U8TYD84\",\n    \"lowerBoundAmount\" : 1000,\n    \"status\" : \"cancelled\",\n    \"ruleType\" : \"one-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryDay(7)\",\n      \"dayOptions\" : {\n        \"startingAtTime\" : 540\n      }\n    },\n    \"startDate\" : \"2019-05-10T21:00:00.000Z\",\n    \"expiryDate\" : \"2019-05-11T20:59:59.999Z\",\n    \"createdAt\" : \"2019-05-09T21:00:00.000Z\",\n    \"createdBy\" : \"Serhii Sobur\"\n  }, {\n    \"id\" : 190783,\n    \"name\" : \"Debit 500\",\n    \"description\" : \"Maintenance sweep to handle debit card account set to repeat every 5 days starting from next month.\",\n    \"sweptAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"6129172765GE6UQ2U8TYD84\",\n    \"lowerBoundAmount\" : 500,\n    \"status\" : \"processing\",\n    \"ruleType\" : \"one-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryDay(5)\",\n      \"dayOptions\" : {\n        \"startingAtTime\" : 540\n      }\n    },\n    \"startDate\" : \"2019-05-10T21:00:00.000Z\",\n    \"expiryDate\" : \"2019-05-11T20:59:59.999Z\",\n    \"createdAt\" : \"2019-05-09T21:00:00.000Z\",\n    \"createdBy\" : \"Yevhen Lubianov\"\n  }, {\n    \"id\" : 256076,\n    \"name\" : \"Outdated CS 3\",\n    \"description\" : \"Two-way monthly sweep between current accounts that have been expired.\",\n    \"sweptAccountBban\" : \"TRIO0212471066\",\n    \"targetAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"lowerBoundAmount\" : 500,\n    \"upperBoundAmount\" : 1750,\n    \"status\" : \"expired\",\n    \"ruleType\" : \"two-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryMonth(1)\",\n      \"monthOptions\" : {\n        \"startingAtTime\" : 720,\n        \"monthRepeat\" : \"week-day-of-the-month\"\n      }\n    },\n    \"startDate\" : \"2019-03-10T16:24:37.463Z\",\n    \"expiryDate\" : \"2019-04-10T16:24:37.463Z\",\n    \"createdAt\" : \"2019-03-09T16:24:37.463Z\",\n    \"createdBy\" : \"Yevhenii Holub\"\n  } ]\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/sweep-rules URL pattern\n*/\nexport const SweepRulesHttpServicePostCreateSweepRuleMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/sweep-rules\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : 16250\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/sweep-rules/{sweepId}/activate URL pattern\n*/\nexport const SweepRulesHttpServicePostSweepRuleActivationBySweepIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/sweep-rules/{sweepId}/activate\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : 135864,\n  \"name\" : \"Investment IS 605\",\n  \"description\" : \"Two-way daily investment sweep that never expires.\",\n  \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n  \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n  \"lowerBoundAmount\" : 10000,\n  \"upperBoundAmount\" : 12500,\n  \"status\" : \"active\",\n  \"ruleType\" : \"two-way\",\n  \"schedule\" : {\n    \"frequency\" : \"EvryDay(1)\",\n    \"dayOptions\" : {\n      \"startingAtTime\" : 540,\n      \"intradayRepeat\" : {\n        \"everyMinutes\" : 60,\n        \"endingAtTime\" : 1260\n      }\n    }\n  },\n  \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n  \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n  \"createdBy\" : \"Denys Haidash\"\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"lowerBoundAmount\" : 6.027456183070403,\n  \"additions\" : {\n    \"key\" : \"additions\"\n  },\n  \"targetAccountBban\" : \"targetAccountBban\",\n  \"description\" : \"description\",\n  \"sweptAccountBban\" : \"sweptAccountBban\",\n  \"expiryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"schedule\" : {\n    \"dayOptions\" : {\n      \"intradayRepeat\" : {\n        \"endingAtTime\" : 2.3021358869347655,\n        \"everyMinutes\" : 5.637376656633329\n      },\n      \"startingAtTime\" : 5.962133916683182\n    },\n    \"monthOptions\" : {\n      \"startingAtTime\" : 3.616076749251911,\n      \"monthRepeat\" : \"day-of-the-month\"\n    },\n    \"frequency\" : \"frequency\",\n    \"weekOptions\" : {\n      \"weekRepeatDay\" : 9.301444243932576,\n      \"startingAtTime\" : 7.061401241503109\n    }\n  },\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdBy\" : \"createdBy\",\n  \"upperBoundAmount\" : 1.4658129805029452,\n  \"name\" : \"name\",\n  \"id\" : 0.8008281904610115,\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"status\" : \"status\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/sweep-rules/{sweepId}/cancel URL pattern\n*/\nexport const SweepRulesHttpServicePostSweepRuleCancelingBySweepIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/sweep-rules/{sweepId}/cancel\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : 135864,\n  \"name\" : \"Investment IS 605\",\n  \"description\" : \"Two-way daily investment sweep that never expires.\",\n  \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n  \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n  \"lowerBoundAmount\" : 10000,\n  \"upperBoundAmount\" : 12500,\n  \"status\" : \"cancel\",\n  \"ruleType\" : \"two-way\",\n  \"schedule\" : {\n    \"frequency\" : \"EvryDay(1)\",\n    \"dayOptions\" : {\n      \"startingAtTime\" : 540,\n      \"intradayRepeat\" : {\n        \"everyMinutes\" : 60,\n        \"endingAtTime\" : 1260\n      }\n    }\n  },\n  \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n  \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n  \"createdBy\" : \"Denys Haidash\"\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"lowerBoundAmount\" : 6.027456183070403,\n  \"additions\" : {\n    \"key\" : \"additions\"\n  },\n  \"targetAccountBban\" : \"targetAccountBban\",\n  \"description\" : \"description\",\n  \"sweptAccountBban\" : \"sweptAccountBban\",\n  \"expiryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"schedule\" : {\n    \"dayOptions\" : {\n      \"intradayRepeat\" : {\n        \"endingAtTime\" : 2.3021358869347655,\n        \"everyMinutes\" : 5.637376656633329\n      },\n      \"startingAtTime\" : 5.962133916683182\n    },\n    \"monthOptions\" : {\n      \"startingAtTime\" : 3.616076749251911,\n      \"monthRepeat\" : \"day-of-the-month\"\n    },\n    \"frequency\" : \"frequency\",\n    \"weekOptions\" : {\n      \"weekRepeatDay\" : 9.301444243932576,\n      \"startingAtTime\" : 7.061401241503109\n    }\n  },\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdBy\" : \"createdBy\",\n  \"upperBoundAmount\" : 1.4658129805029452,\n  \"name\" : \"name\",\n  \"id\" : 0.8008281904610115,\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"status\" : \"status\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v2/sweep-rules/{sweepId}/pause URL pattern\n*/\nexport const SweepRulesHttpServicePostSweepRulePausingBySweepIdMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v2/sweep-rules/{sweepId}/pause\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"id\" : 135864,\n  \"name\" : \"Investment IS 605\",\n  \"description\" : \"Two-way daily investment sweep that never expires.\",\n  \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n  \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n  \"lowerBoundAmount\" : 10000,\n  \"upperBoundAmount\" : 12500,\n  \"status\" : \"pause\",\n  \"ruleType\" : \"two-way\",\n  \"schedule\" : {\n    \"frequency\" : \"EvryDay(1)\",\n    \"dayOptions\" : {\n      \"startingAtTime\" : 540,\n      \"intradayRepeat\" : {\n        \"everyMinutes\" : 60,\n        \"endingAtTime\" : 1260\n      }\n    }\n  },\n  \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n  \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n  \"createdBy\" : \"Denys Haidash\"\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"lowerBoundAmount\" : 6.027456183070403,\n  \"additions\" : {\n    \"key\" : \"additions\"\n  },\n  \"targetAccountBban\" : \"targetAccountBban\",\n  \"description\" : \"description\",\n  \"sweptAccountBban\" : \"sweptAccountBban\",\n  \"expiryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"schedule\" : {\n    \"dayOptions\" : {\n      \"intradayRepeat\" : {\n        \"endingAtTime\" : 2.3021358869347655,\n        \"everyMinutes\" : 5.637376656633329\n      },\n      \"startingAtTime\" : 5.962133916683182\n    },\n    \"monthOptions\" : {\n      \"startingAtTime\" : 3.616076749251911,\n      \"monthRepeat\" : \"day-of-the-month\"\n    },\n    \"frequency\" : \"frequency\",\n    \"weekOptions\" : {\n      \"weekRepeatDay\" : 9.301444243932576,\n      \"startingAtTime\" : 7.061401241503109\n    }\n  },\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdBy\" : \"createdBy\",\n  \"upperBoundAmount\" : 1.4658129805029452,\n  \"name\" : \"name\",\n  \"id\" : 0.8008281904610115,\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"status\" : \"status\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 403,\n                    body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n    ]\n}]);\n\nexport const SweepRulesHttpServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/client-api/v2/sweep-rules/{sweepId}\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : 135864,\n  \"name\" : \"Investment IS 605\",\n  \"description\" : \"Two-way daily investment sweep that never expires.\",\n  \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n  \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n  \"lowerBoundAmount\" : 10000,\n  \"upperBoundAmount\" : 12500,\n  \"status\" : \"active\",\n  \"ruleType\" : \"two-way\",\n  \"schedule\" : {\n    \"frequency\" : \"EvryDay(1)\",\n    \"dayOptions\" : {\n      \"startingAtTime\" : 540,\n      \"intradayRepeat\" : {\n        \"everyMinutes\" : 60,\n        \"endingAtTime\" : 1260\n      }\n    }\n  },\n  \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n  \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n  \"createdBy\" : \"Denys Haidash\"\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"lowerBoundAmount\" : 6.027456183070403,\n  \"additions\" : {\n    \"key\" : \"additions\"\n  },\n  \"targetAccountBban\" : \"targetAccountBban\",\n  \"description\" : \"description\",\n  \"sweptAccountBban\" : \"sweptAccountBban\",\n  \"expiryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"schedule\" : {\n    \"dayOptions\" : {\n      \"intradayRepeat\" : {\n        \"endingAtTime\" : 2.3021358869347655,\n        \"everyMinutes\" : 5.637376656633329\n      },\n      \"startingAtTime\" : 5.962133916683182\n    },\n    \"monthOptions\" : {\n      \"startingAtTime\" : 3.616076749251911,\n      \"monthRepeat\" : \"day-of-the-month\"\n    },\n    \"frequency\" : \"frequency\",\n    \"weekOptions\" : {\n      \"weekRepeatDay\" : 9.301444243932576,\n      \"startingAtTime\" : 7.061401241503109\n    }\n  },\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdBy\" : \"createdBy\",\n  \"upperBoundAmount\" : 1.4658129805029452,\n  \"name\" : \"name\",\n  \"id\" : 0.8008281904610115,\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"status\" : \"status\"\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/sweep-rules\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"items\" : [ {\n    \"id\" : 135864,\n    \"name\" : \"Investment IS 605\",\n    \"description\" : \"Two-way daily investment sweep that never expires.\",\n    \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n    \"lowerBoundAmount\" : 10000,\n    \"upperBoundAmount\" : 12500,\n    \"status\" : \"entered\",\n    \"ruleType\" : \"two-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryDay(1)\",\n      \"dayOptions\" : {\n        \"startingAtTime\" : 540,\n        \"intradayRepeat\" : {\n          \"everyMinutes\" : 60,\n          \"endingAtTime\" : 1260\n        }\n      }\n    },\n    \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n    \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n    \"createdBy\" : \"Anna Hrechana\"\n  }, {\n    \"id\" : 246975,\n    \"name\" : \"Current CS 16\",\n    \"description\" : \"Two-way monthly sweep between current accounts that expires today.\",\n    \"sweptAccountBban\" : \"TRIO0212471066\",\n    \"targetAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"lowerBoundAmount\" : 500,\n    \"upperBoundAmount\" : 1750,\n    \"status\" : \"active\",\n    \"ruleType\" : \"two-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryMonth(1)\",\n      \"monthOptions\" : {\n        \"startingAtTime\" : 720,\n        \"monthRepeat\" : \"week-day-of-the-month\"\n      }\n    },\n    \"startDate\" : \"2019-04-10T16:24:37.463Z\",\n    \"createdAt\" : \"2019-04-09T16:24:37.463Z\",\n    \"createdBy\" : \"Serhii Koshman\"\n  }, {\n    \"id\" : 137731,\n    \"name\" : \"Loan LS 31\",\n    \"description\" : \"Loan sweep that takes place each 4 weeks on Sundays until manually stopped.\",\n    \"sweptAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"6129172765GE6UQ2U8TYD84\",\n    \"upperBoundAmount\" : 5000,\n    \"status\" : \"paused\",\n    \"ruleType\" : \"one-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryWeek(4)\",\n      \"weekOptions\" : {\n        \"startingAtTime\" : 0,\n        \"weekRepeatDay\" : 0\n      }\n    },\n    \"startDate\" : \"2019-01-01T16:24:37.463Z\",\n    \"createdAt\" : \"2019-01-01T16:23:37.463Z\",\n    \"createdBy\" : \"Marian Kitsenko\"\n  }, {\n    \"id\" : 225547,\n    \"name\" : \"Savings SS 24\",\n    \"description\" : \"One-time one-way sweep to accumulate savings performed on a daily basis.\",\n    \"sweptAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"TRIO0212471066\",\n    \"upperBoundAmount\" : 1100,\n    \"status\" : \"rejected\",\n    \"ruleType\" : \"one-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryDay(1)\",\n      \"dayOptions\" : {\n        \"startingAtTime\" : 30,\n        \"intradayRepeat\" : {\n          \"everyMinutes\" : 60,\n          \"endingAtTime\" : 30\n        }\n      }\n    },\n    \"startDate\" : \"2019-04-11T08:10:18.591Z\",\n    \"expiryDate\" : \"2019-04-11T20:59:59.999Z\",\n    \"createdAt\" : \"2019-04-10T08:10:18.591Z\",\n    \"createdBy\" : \"Dmytro Topchii\"\n  }, {\n    \"id\" : 110580,\n    \"name\" : \"Debit SD 350\",\n    \"description\" : \"Maintenance sweep to handle debit card account set to repeat once a week starting from next month.\",\n    \"sweptAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"6129172765GE6UQ2U8TYD84\",\n    \"lowerBoundAmount\" : 1000,\n    \"status\" : \"cancelled\",\n    \"ruleType\" : \"one-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryDay(7)\",\n      \"dayOptions\" : {\n        \"startingAtTime\" : 540\n      }\n    },\n    \"startDate\" : \"2019-05-10T21:00:00.000Z\",\n    \"expiryDate\" : \"2019-05-11T20:59:59.999Z\",\n    \"createdAt\" : \"2019-05-09T21:00:00.000Z\",\n    \"createdBy\" : \"Serhii Sobur\"\n  }, {\n    \"id\" : 190783,\n    \"name\" : \"Debit 500\",\n    \"description\" : \"Maintenance sweep to handle debit card account set to repeat every 5 days starting from next month.\",\n    \"sweptAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"targetAccountBban\" : \"6129172765GE6UQ2U8TYD84\",\n    \"lowerBoundAmount\" : 500,\n    \"status\" : \"processing\",\n    \"ruleType\" : \"one-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryDay(5)\",\n      \"dayOptions\" : {\n        \"startingAtTime\" : 540\n      }\n    },\n    \"startDate\" : \"2019-05-10T21:00:00.000Z\",\n    \"expiryDate\" : \"2019-05-11T20:59:59.999Z\",\n    \"createdAt\" : \"2019-05-09T21:00:00.000Z\",\n    \"createdBy\" : \"Yevhen Lubianov\"\n  }, {\n    \"id\" : 256076,\n    \"name\" : \"Outdated CS 3\",\n    \"description\" : \"Two-way monthly sweep between current accounts that have been expired.\",\n    \"sweptAccountBban\" : \"TRIO0212471066\",\n    \"targetAccountBban\" : \"FR596129172765GE6UQ2U8TYD56\",\n    \"lowerBoundAmount\" : 500,\n    \"upperBoundAmount\" : 1750,\n    \"status\" : \"expired\",\n    \"ruleType\" : \"two-way\",\n    \"schedule\" : {\n      \"frequency\" : \"EvryMonth(1)\",\n      \"monthOptions\" : {\n        \"startingAtTime\" : 720,\n        \"monthRepeat\" : \"week-day-of-the-month\"\n      }\n    },\n    \"startDate\" : \"2019-03-10T16:24:37.463Z\",\n    \"expiryDate\" : \"2019-04-10T16:24:37.463Z\",\n    \"createdAt\" : \"2019-03-09T16:24:37.463Z\",\n    \"createdBy\" : \"Yevhenii Holub\"\n  } ]\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/sweep-rules\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : 16250\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/sweep-rules/{sweepId}/activate\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : 135864,\n  \"name\" : \"Investment IS 605\",\n  \"description\" : \"Two-way daily investment sweep that never expires.\",\n  \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n  \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n  \"lowerBoundAmount\" : 10000,\n  \"upperBoundAmount\" : 12500,\n  \"status\" : \"active\",\n  \"ruleType\" : \"two-way\",\n  \"schedule\" : {\n    \"frequency\" : \"EvryDay(1)\",\n    \"dayOptions\" : {\n      \"startingAtTime\" : 540,\n      \"intradayRepeat\" : {\n        \"everyMinutes\" : 60,\n        \"endingAtTime\" : 1260\n      }\n    }\n  },\n  \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n  \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n  \"createdBy\" : \"Denys Haidash\"\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"lowerBoundAmount\" : 6.027456183070403,\n  \"additions\" : {\n    \"key\" : \"additions\"\n  },\n  \"targetAccountBban\" : \"targetAccountBban\",\n  \"description\" : \"description\",\n  \"sweptAccountBban\" : \"sweptAccountBban\",\n  \"expiryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"schedule\" : {\n    \"dayOptions\" : {\n      \"intradayRepeat\" : {\n        \"endingAtTime\" : 2.3021358869347655,\n        \"everyMinutes\" : 5.637376656633329\n      },\n      \"startingAtTime\" : 5.962133916683182\n    },\n    \"monthOptions\" : {\n      \"startingAtTime\" : 3.616076749251911,\n      \"monthRepeat\" : \"day-of-the-month\"\n    },\n    \"frequency\" : \"frequency\",\n    \"weekOptions\" : {\n      \"weekRepeatDay\" : 9.301444243932576,\n      \"startingAtTime\" : 7.061401241503109\n    }\n  },\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdBy\" : \"createdBy\",\n  \"upperBoundAmount\" : 1.4658129805029452,\n  \"name\" : \"name\",\n  \"id\" : 0.8008281904610115,\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"status\" : \"status\"\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/sweep-rules/{sweepId}/cancel\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : 135864,\n  \"name\" : \"Investment IS 605\",\n  \"description\" : \"Two-way daily investment sweep that never expires.\",\n  \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n  \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n  \"lowerBoundAmount\" : 10000,\n  \"upperBoundAmount\" : 12500,\n  \"status\" : \"cancel\",\n  \"ruleType\" : \"two-way\",\n  \"schedule\" : {\n    \"frequency\" : \"EvryDay(1)\",\n    \"dayOptions\" : {\n      \"startingAtTime\" : 540,\n      \"intradayRepeat\" : {\n        \"everyMinutes\" : 60,\n        \"endingAtTime\" : 1260\n      }\n    }\n  },\n  \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n  \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n  \"createdBy\" : \"Denys Haidash\"\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"lowerBoundAmount\" : 6.027456183070403,\n  \"additions\" : {\n    \"key\" : \"additions\"\n  },\n  \"targetAccountBban\" : \"targetAccountBban\",\n  \"description\" : \"description\",\n  \"sweptAccountBban\" : \"sweptAccountBban\",\n  \"expiryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"schedule\" : {\n    \"dayOptions\" : {\n      \"intradayRepeat\" : {\n        \"endingAtTime\" : 2.3021358869347655,\n        \"everyMinutes\" : 5.637376656633329\n      },\n      \"startingAtTime\" : 5.962133916683182\n    },\n    \"monthOptions\" : {\n      \"startingAtTime\" : 3.616076749251911,\n      \"monthRepeat\" : \"day-of-the-month\"\n    },\n    \"frequency\" : \"frequency\",\n    \"weekOptions\" : {\n      \"weekRepeatDay\" : 9.301444243932576,\n      \"startingAtTime\" : 7.061401241503109\n    }\n  },\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdBy\" : \"createdBy\",\n  \"upperBoundAmount\" : 1.4658129805029452,\n  \"name\" : \"name\",\n  \"id\" : 0.8008281904610115,\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"status\" : \"status\"\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v2/sweep-rules/{sweepId}/pause\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"id\" : 135864,\n  \"name\" : \"Investment IS 605\",\n  \"description\" : \"Two-way daily investment sweep that never expires.\",\n  \"sweptAccountBban\" : \"6129172765GE6UQ2U8TYD56\",\n  \"targetAccountBban\" : \"680BCNMXVMFAY60\",\n  \"lowerBoundAmount\" : 10000,\n  \"upperBoundAmount\" : 12500,\n  \"status\" : \"pause\",\n  \"ruleType\" : \"two-way\",\n  \"schedule\" : {\n    \"frequency\" : \"EvryDay(1)\",\n    \"dayOptions\" : {\n      \"startingAtTime\" : 540,\n      \"intradayRepeat\" : {\n        \"everyMinutes\" : 60,\n        \"endingAtTime\" : 1260\n      }\n    }\n  },\n  \"startDate\" : \"2019-04-10T15:52:27.218Z\",\n  \"createdAt\" : \"2019-04-09T15:52:27.218Z\",\n  \"createdBy\" : \"Denys Haidash\"\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"lowerBoundAmount\" : 6.027456183070403,\n  \"additions\" : {\n    \"key\" : \"additions\"\n  },\n  \"targetAccountBban\" : \"targetAccountBban\",\n  \"description\" : \"description\",\n  \"sweptAccountBban\" : \"sweptAccountBban\",\n  \"expiryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"schedule\" : {\n    \"dayOptions\" : {\n      \"intradayRepeat\" : {\n        \"endingAtTime\" : 2.3021358869347655,\n        \"everyMinutes\" : 5.637376656633329\n      },\n      \"startingAtTime\" : 5.962133916683182\n    },\n    \"monthOptions\" : {\n      \"startingAtTime\" : 3.616076749251911,\n      \"monthRepeat\" : \"day-of-the-month\"\n    },\n    \"frequency\" : \"frequency\",\n    \"weekOptions\" : {\n      \"weekRepeatDay\" : 9.301444243932576,\n      \"startingAtTime\" : 7.061401241503109\n    }\n  },\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdBy\" : \"createdBy\",\n  \"upperBoundAmount\" : 1.4658129805029452,\n  \"name\" : \"name\",\n  \"id\" : 0.8008281904610115,\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"status\" : \"status\"\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 403,\n                body: {\n  \"message\" : \"Access to requested resource denied.\",\n  \"errors\" : [ {\n    \"message\" : \"Resource access denied due to an insufficient user quota of {quota}.\",\n    \"key\" : \"common.api.quota\",\n    \"context\" : {\n      \"quota\" : \"someQuota\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"message\" : \"Conflict error\",\n  \"errors\" : [ {\n    \"message\" : \"The request could not be completed due to a conflict with the current state of the resource.\",\n    \"key\" : \"transactions.api.billingstatus.transaction\",\n    \"context\" : {\n      \"billingStatus\" : \"BILLED\"\n    }\n  } ]\n}\n            },\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n    ]\n},\n]\n);\n\n\n"],"names":["SweepScheduleRuleMonthOptions","SweepScheduleRuleWeekOptions","InjectionToken","NgModule","Optional","SkipSelf","HttpHeaders","HttpParams","Injectable","Inject","createMocks"],"mappings":"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"}