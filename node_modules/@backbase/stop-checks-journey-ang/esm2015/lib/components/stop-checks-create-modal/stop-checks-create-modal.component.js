import { Component } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { ApiHttpService, NavigationService, RequestStatus, StateService, StopChecksPreferencesService, } from '@backbase/payord-stop-checks-widget-ang';
import { ChecksService } from '@backbase/payment-orders-ang';
import { StopChecksCreatePreferencesService } from '../../services/stop-checks-create-preferences.service';
import { StopChecksNavigationService } from '../../services/navigation.service';
import { pluck, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { StopChecksListCommunicationService } from '@backbase/payord-stop-checks-list-widget-ang';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/payord-stop-checks-list-widget-ang";
import * as i2 from "@angular/router";
import * as i3 from "@backbase/payord-stop-checks-widget-ang";
import * as i4 from "@backbase/ui-ang/modal";
export class StopChecksCreateModalComponent {
    constructor(communicationListService, router, activatedRoute, stateService) {
        this.communicationListService = communicationListService;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.stateService = stateService;
        this.destroyed = new Subject();
        this.modalOptions = {
            centered: true,
            backdrop: 'static',
        };
    }
    navigateToList() {
        this.router.navigate(['..'], { relativeTo: this.activatedRoute });
    }
    ngOnInit() {
        this.stateService.store
            .pipe(pluck('status'))
            .pipe(takeUntil(this.destroyed))
            .subscribe((status) => {
            if (status === RequestStatus.REQUEST_IS_SUBMITTED ||
                status === RequestStatus.DISCARD) {
                this.communicationListService.refreshListSub.next();
                this.navigateToList();
            }
        });
    }
    ngOnDestroy() {
        this.destroyed.next();
    }
    closeModal() {
        this.navigateToList();
    }
}
/** @nocollapse */ StopChecksCreateModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksCreateModalComponent, deps: [{ token: i1.StopChecksListCommunicationService }, { token: i2.Router }, { token: i2.ActivatedRoute }, { token: i3.StateService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ StopChecksCreateModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: StopChecksCreateModalComponent, selector: "bb-stop-checks-create-modal", providers: [
        {
            provide: StopChecksPreferencesService,
            useClass: StopChecksCreatePreferencesService,
        },
        { provide: NavigationService, useClass: StopChecksNavigationService },
        StateService,
        ApiHttpService,
        ChecksService,
    ], ngImport: i0, template: `
    <bb-modal-ui
      [isOpen]="true"
      [modalOptions]="modalOptions"
      (cancel)="closeModal()"
    >
      <div class="card card-body">
        <router-outlet></router-outlet>
      </div>
    </bb-modal-ui>
  `, isInline: true, components: [{ type: i4.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }], directives: [{ type: i2.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksCreateModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-stop-checks-create-modal',
                    template: `
    <bb-modal-ui
      [isOpen]="true"
      [modalOptions]="modalOptions"
      (cancel)="closeModal()"
    >
      <div class="card card-body">
        <router-outlet></router-outlet>
      </div>
    </bb-modal-ui>
  `,
                    providers: [
                        {
                            provide: StopChecksPreferencesService,
                            useClass: StopChecksCreatePreferencesService,
                        },
                        { provide: NavigationService, useClass: StopChecksNavigationService },
                        StateService,
                        ApiHttpService,
                        ChecksService,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.StopChecksListCommunicationService }, { type: i2.Router }, { type: i2.ActivatedRoute }, { type: i3.StateService }]; } });
//# sourceMappingURL=stop-checks-create-modal.component.js.map