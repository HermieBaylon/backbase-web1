import { Inject, Injectable, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN, defaultStopChecksCreatePreferences, } from '@backbase/payord-stop-checks-widget-ang';
import { StopChecksJourneyService } from './stop-checks-journey-config.service';
import * as i0 from "@angular/core";
import * as i1 from "./stop-checks-journey-config.service";
/** @internal */
export class StopChecksCreatePreferencesService {
    constructor(accessControlToken, journeyConfig) {
        this.accessControlToken = accessControlToken;
        this.journeyConfig = journeyConfig;
        this.config = Object.assign(Object.assign(Object.assign({}, defaultStopChecksCreatePreferences), this.journeyConfig.configuration), (this.accessControlToken || {}));
        this.resourceNameSub$ = new BehaviorSubject(this.config.resourceName);
        this.businessFunctionSub$ = new BehaviorSubject(this.config.businessFunction);
        this.privilegeSub$ = new BehaviorSubject(this.config.privilege);
        this.notificationDismissTimeSub$ = new BehaviorSubject(this.config.notificationDismissTime);
        this.currenciesSubject$ = new BehaviorSubject(this.config.currencies);
        this.checksRangeNumberSubject$ = new BehaviorSubject(this.config.checksRangeNumber);
        this.schemeNameSubject$ = new BehaviorSubject(this.config.schemeName);
        this.resourceName$ = this.resourceNameSub$.asObservable();
        this.businessFunction$ = this.businessFunctionSub$.asObservable();
        this.privilege$ = this.privilegeSub$.asObservable();
        this.notificationDismissTime$ = this.notificationDismissTimeSub$.asObservable();
        this.currencies$ = this.currenciesSubject$.asObservable();
        this.checksRangeNumber$ = this.checksRangeNumberSubject$.asObservable();
        this.schemeName$ = this.schemeNameSubject$.asObservable();
    }
}
/** @nocollapse */ StopChecksCreatePreferencesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksCreatePreferencesService, deps: [{ token: BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN, optional: true }, { token: i1.StopChecksJourneyService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ StopChecksCreatePreferencesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksCreatePreferencesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksCreatePreferencesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN]
                }] }, { type: i1.StopChecksJourneyService }]; } });
//# sourceMappingURL=stop-checks-create-preferences.service.js.map