import { Validators } from '@angular/forms';
import { AccountBalances, CounterPartyFields, endDateAfterStartDateValidator, InitiatorFields, internalTransScheduleStartDateOnInitHook, maxValueTwoHundredValidator, minValueTwoValidator, pastDateValidator, PaymentBaseFields, PaymentComponents, ProductKinds, RemittanceInfoFields, scheduleEndDateOnInitHook, scheduleEndTypeToggleDependants, ScheduleFields, scheduleFrequencyToggleDependants, scheduleStartDateOnDestroyHook, Frequencies, ScheduleEndType, } from '@backbase/payment-orders-ang';
import { amountCurrencyGroupDestroyHook, amountCurrencyGroupInitHook, amountInputCounterPartyInitHook, counterPartyPaymentInitHook, frequencySelectDestroyHook, frequencySelectInitHook, initiatorInitHook, internalAmountOptionsInitHook, scheduleFrequencyForAmountOption, } from './config.actions';
const initiatorPayment = {
    name: PaymentBaseFields.initiator,
    fields: [
        {
            type: PaymentComponents.internalAccountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                label: 'From',
                placeholder: 'Select an account',
                cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                showCurrencySymbol: false,
                productKinds: [
                    {
                        productKind: ProductKinds.savingsAccount,
                        balance: { apiField: AccountBalances.available, label: 'Available Balance' },
                    },
                    {
                        productKind: ProductKinds.currentAccount,
                        balance: { apiField: AccountBalances.current, label: 'Current Balance' },
                    },
                ],
                connectedAccounts: false,
                connectedAccountsSubHeader: 'Connected Accounts',
            },
            hooks: {
                onInit: initiatorInitHook,
            },
        },
    ],
};
const counterParty = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            type: PaymentComponents.internalAccountSelector,
            name: CounterPartyFields.counterPartyAccountGroup,
            options: {
                label: 'To',
                placeholder: 'Select an account',
                cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                productKinds: [{ productKind: ProductKinds.loanAccount, balance: { label: 'Current Balance' } }],
                connectedAccountsSubHeader: 'Connected Accounts',
                connectedAccounts: false,
                showCurrencySymbol: false,
                preselect: true,
                dependants: [
                    {
                        parent: PaymentBaseFields.remittanceInfo,
                        items: [RemittanceInfoFields.amountOptions],
                    },
                ],
                activateDependantsOn: () => {
                    return [
                        {
                            parent: PaymentBaseFields.remittanceInfo,
                            items: [RemittanceInfoFields.amountOptions],
                        },
                    ];
                },
                validationMessages: [
                    {
                        name: 'required',
                        message: 'Please select an account from the list to transfer to',
                    },
                ],
            },
            hooks: {
                onInit: counterPartyPaymentInitHook,
            },
        },
    ],
};
const remittanceInfo = {
    name: PaymentBaseFields.remittanceInfo,
    fields: [
        {
            type: PaymentComponents.header,
            name: PaymentComponents.header,
            options: {
                cssClasses: ['col-12', 'pb-0', 'pt-2', 'bb-fieldset__heading'],
                heading: 'Payment details ',
                headingType: 'h2',
                headingClasses: ['mb-0'],
                separatorLine: true,
            },
        },
        {
            type: PaymentComponents.internalAmountOptions,
            name: RemittanceInfoFields.amountOptions,
            hidden: true,
            options: {
                cssClasses: ['col-12', 'pb-0'],
                isConditionalMandatory: true,
                noBalanceText: 'You donâ€™t have any amount due on this credit card account.',
                amountInputClassName: 'bb-amount-input__field--large',
                autoDecimal: true,
                showCurrencySymbol: false,
                mapCurrency: false,
                amountOptions: {
                    cssClasses: ['pl-2'],
                    loan: [
                        {
                            label: 'Additional payment',
                            description: 'This is on top of your existing schedule',
                            amountApiField: 'nextRepaymentAmount',
                            scheduleFrequency: [{ label: 'Once', value: Frequencies.ONCE }],
                        },
                        {
                            label: 'Different amount',
                            description: 'Choose what you wish to repay',
                            scheduleFrequency: scheduleFrequencyForAmountOption,
                        },
                    ],
                },
                validationMessages: [
                    {
                        name: 'invalidAmount',
                        message: 'Please select an amount to transfer',
                    },
                    {
                        name: 'required',
                        message: 'Please add amount of this transfer',
                    },
                ],
                currencies: ['USD'],
                dependants: [
                    RemittanceInfoFields.amountCurrencyGroup,
                    RemittanceInfoFields.purposeOfPayment,
                    ScheduleFields.frequency,
                ],
                activateDependantsOn: (value) => {
                    return value === 1 || value === '0'
                        ? [
                            RemittanceInfoFields.amountCurrencyGroup,
                            RemittanceInfoFields.purposeOfPayment,
                            ScheduleFields.frequency,
                        ]
                        : [ScheduleFields.frequency];
                },
            },
            hooks: {
                onInit: internalAmountOptionsInitHook,
            },
        },
        {
            type: PaymentComponents.amount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            hidden: true,
            options: {
                label: 'Amount',
                cssClasses: [
                    'bb-amount-input__field--medium',
                    'bb-block',
                    'bb-block--lg',
                    'col-md-7',
                    'bb-loans-remittance-info__section',
                ],
                autoDecimal: true,
                keepValueOnHidden: true,
                currencies: ['USD'],
                validationMessages: [
                    {
                        name: 'invalidAmount',
                        message: 'Please add amount of this transfer',
                    },
                ],
            },
            hooks: {
                onInit: amountCurrencyGroupInitHook,
                onDestroy: amountCurrencyGroupDestroyHook,
            },
        },
        {
            type: PaymentComponents.select,
            name: RemittanceInfoFields.purposeOfPayment,
            hidden: true,
            options: {
                label: 'Payment towards (optional)',
                options: [
                    { label: '', value: '' },
                    { label: 'Interest only', value: 'Interest only' },
                    { label: 'Principal only', value: 'Principal only' },
                    { label: 'Principal and interest', value: 'Principal and interest' },
                ],
                preselect: true,
                cssClasses: ['d-block', 'col-md-6', 'align-top', 'bb-loans-remittance-info__section'],
            },
        },
    ],
};
const schedule = {
    name: PaymentBaseFields.schedule,
    fields: [
        {
            type: PaymentComponents.scheduleHeader,
            name: PaymentComponents.scheduleHeader,
            options: {
                cssClasses: ['pb-0', 'bb-schedule-header__relative-text'],
                label: 'Schedule',
            },
        },
        {
            type: PaymentComponents.select,
            name: ScheduleFields.frequency,
            options: {
                label: 'Frequency',
                validators: [Validators.required],
                options: scheduleFrequencyForAmountOption,
                defaultValue: Frequencies.ONCE,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                dependants: [ScheduleFields.endType],
                activateDependantsOn: scheduleFrequencyToggleDependants,
            },
            hooks: {
                onInit: frequencySelectInitHook,
                onDestroy: frequencySelectDestroyHook,
            },
        },
        {
            type: PaymentComponents.date,
            name: ScheduleFields.startDate,
            options: {
                label: 'Execution date',
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                validators: [Validators.required, pastDateValidator],
                defaultValue: new Date().toISOString(),
                validationMessages: [{ name: 'pastDate', message: 'Start date cannot be in the past' }],
                description: 'You selected a date after the due date, this transfer will incur a late fee',
            },
            hooks: {
                onInit: internalTransScheduleStartDateOnInitHook,
                onDestroy: scheduleStartDateOnDestroyHook,
            },
        },
        {
            type: PaymentComponents.radio,
            name: ScheduleFields.endType,
            options: {
                label: 'End',
                preselect: true,
                isConditionalMandatory: true,
                cssClasses: ['d-inline-block', 'col-md-2', 'align-top', 'bb-schedule__end-type'],
                defaultValue: ScheduleEndType.NEVER,
                options: [
                    { label: 'Never', value: ScheduleEndType.NEVER },
                    { label: 'On date', value: ScheduleEndType.ON },
                    { label: 'After', value: ScheduleEndType.AFTER },
                ],
                dependants: [ScheduleFields.endDate, ScheduleFields.repeat],
                activateDependantsOn: scheduleEndTypeToggleDependants,
            },
        },
        {
            type: PaymentComponents.date,
            name: ScheduleFields.endDate,
            options: {
                cssClasses: ['d-inline-block', 'col-md-10', 'align-top', 'bb-schedule__end-date'],
                validators: [endDateAfterStartDateValidator],
                validationMessages: [
                    { name: 'required', message: 'End date is required' },
                    { name: 'lessThanStartDate', message: 'End date cannot be before start date' },
                ],
                isConditionalMandatory: true,
            },
            hooks: {
                onInit: scheduleEndDateOnInitHook,
            },
        },
        {
            type: PaymentComponents.number,
            name: ScheduleFields.repeat,
            options: {
                isConditionalMandatory: true,
                description: 'occurrences',
                min: 2,
                max: 200,
                defaultValue: 2,
                validators: [minValueTwoValidator, maxValueTwoHundredValidator],
                validationMessages: [
                    { name: 'required', message: 'Value is required' },
                    { name: 'min', message: 'Value is below the minimum allowed occurrences (2)' },
                    { name: 'max', message: 'Value exceeds maximum allowed occurrences (200)' },
                ],
                cssClasses: ['d-inline-block', 'col-md-9', 'align-top', 'px-0', 'bb-schedule__repeat'],
            },
        },
    ],
};
const remittanceInfoZeroOptions = {
    name: PaymentBaseFields.remittanceInfo,
    fields: [
        {
            type: PaymentComponents.header,
            name: PaymentComponents.header,
            options: {
                cssClasses: ['col-12', 'pb-0', 'pt-2', 'bb-fieldset__heading'],
                heading: 'Payment details ',
                headingType: 'h2',
                headingClasses: ['mb-0'],
                separatorLine: true,
            },
        },
        {
            type: PaymentComponents.amount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: 'Amount',
                cssClasses: ['bb-amount-input__field--medium', 'bb-block', 'bb-block--lg', 'col-md-7'],
                autoDecimal: true,
                keepValueOnHidden: true,
                currencies: ['USD'],
                validationMessages: [
                    {
                        name: 'invalidAmount',
                        message: 'Please add amount of this transfer',
                    },
                ],
            },
            hooks: {
                onInit: amountInputCounterPartyInitHook,
            },
        },
        {
            type: PaymentComponents.select,
            name: RemittanceInfoFields.purposeOfPayment,
            options: {
                label: 'Payment towards (optional)',
                options: [
                    { label: '', value: '' },
                    { label: 'Interest only', value: 'Interest only' },
                    { label: 'Principal only', value: 'Principal only' },
                    { label: 'Principal and interest', value: 'Principal and interest' },
                ],
                preselect: true,
                cssClasses: ['d-block', 'col-md-6', 'align-top'],
            },
        },
    ],
};
/**
 * This is the copy of the INTERNAL_TRANSFER as it fits in the best way for the loans configs
 */
export const LOANS_PAYMENT = {
    fields: [initiatorPayment, counterParty, remittanceInfo, schedule],
    name: 'Loans Payment',
    paymentType: 'LOAN_PAYMENT',
    businessFunction: 'Loans Payment',
    options: {
        disabledCombinations: [{ from: ProductKinds.loanAccount, to: ProductKinds.loanAccount }],
    },
};
export function changeFields(loan) {
    if (!(loan === null || loan === void 0 ? void 0 : loan.nextRepaymentAmount) || (loan === null || loan === void 0 ? void 0 : loan.nextRepaymentAmount) === '0') {
        LOANS_PAYMENT.fields[2] = remittanceInfoZeroOptions;
    }
    else {
        LOANS_PAYMENT.fields[2] = remittanceInfo;
    }
}
//# sourceMappingURL=loans-payment-config.js.map