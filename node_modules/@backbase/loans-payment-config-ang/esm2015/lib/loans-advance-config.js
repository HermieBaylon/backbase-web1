import { Validators } from '@angular/forms';
import { PaymentBaseFields, PaymentComponents, InitiatorFields, ProductKinds, CounterPartyFields, AccountBalances, RemittanceInfoFields, ScheduleFields, internalTransScheduleStartDateOnInitHook, scheduleStartDateOnDestroyHook, scheduleFrequencyToggleDependants, pastDateValidator, Frequencies, } from '@backbase/payment-orders-ang';
import { counterpartyInitAdvanceHook, amountInputInitHook, destroyHook, initiatorAdvanceInitHook, } from './config.actions';
const initiatorAdvance = {
    name: PaymentBaseFields.initiator,
    title: 'Draw Amount',
    fields: [
        {
            type: PaymentComponents.internalAccountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                label: 'From',
                placeholder: 'Select an account',
                cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                productKinds: [{ productKind: ProductKinds.loanAccount, balance: { label: 'Current Balance' } }],
                connectedAccounts: false,
                connectedAccountsSubHeader: 'Connected Accounts',
                showCurrencySymbol: false,
            },
            hooks: {
                onInit: initiatorAdvanceInitHook,
            },
        },
    ],
};
const counterPartyAdvance = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            type: PaymentComponents.internalAccountSelector,
            name: CounterPartyFields.counterPartyAccountGroup,
            options: {
                label: 'To',
                placeholder: 'Select an account',
                cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                productKinds: [
                    {
                        productKind: ProductKinds.savingsAccount,
                        balance: { apiField: AccountBalances.available, label: 'Available Balance' },
                    },
                    {
                        productKind: ProductKinds.currentAccount,
                        balance: { apiField: AccountBalances.current, label: 'Current Balance' },
                    },
                ],
                connectedAccountsSubHeader: 'Connected Accounts',
                connectedAccounts: false,
                validationMessages: [
                    {
                        name: 'required',
                        message: 'Please select an account from the list to transfer to',
                    },
                ],
                showCurrencySymbol: false,
            },
            hooks: {
                onInit: counterpartyInitAdvanceHook,
            },
        },
    ],
};
const remittanceInfoAdvance = {
    name: PaymentBaseFields.remittanceInfo,
    fields: [
        {
            type: PaymentComponents.amount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: 'Amount',
                cssClasses: ['bb-amount-input__field--medium', 'bb-block', 'bb-block--lg', 'col-md-7'],
                autoDecimal: true,
                keepValueOnHidden: true,
                currencies: ['EUR'],
                validationMessages: [
                    {
                        name: 'invalidAmount',
                        message: 'Please add amount of this transfer',
                    },
                ],
            },
            hooks: {
                onInit: amountInputInitHook,
            },
        },
    ],
};
const scheduleAdvance = {
    name: PaymentBaseFields.schedule,
    fields: [
        {
            type: PaymentComponents.date,
            name: ScheduleFields.startDate,
            options: {
                label: 'Execution date',
                cssClasses: ['d-block', 'col-md-6', 'align-top'],
                validators: [Validators.required, pastDateValidator],
                defaultValue: new Date().toISOString(),
                validationMessages: [{ name: 'pastDate', message: 'Start date cannot be in the past' }],
                description: 'You selected a date after the due date, this transfer will incur a late fee',
            },
            hooks: {
                onInit: internalTransScheduleStartDateOnInitHook,
                onDestroy: scheduleStartDateOnDestroyHook,
            },
        },
        {
            type: PaymentComponents.select,
            name: ScheduleFields.frequency,
            hidden: true,
            options: {
                label: 'Frequency',
                validators: [Validators.required],
                options: [{ label: 'Once', value: Frequencies.ONCE }],
                defaultValue: Frequencies.ONCE,
                cssClasses: ['d-block', 'col-md-6', 'align-top'],
                dependants: [ScheduleFields.endType],
                activateDependantsOn: scheduleFrequencyToggleDependants,
            },
        },
    ],
};
export const LOANS_ADVANCE = {
    fields: [initiatorAdvance, counterPartyAdvance, remittanceInfoAdvance, scheduleAdvance],
    name: 'Loans Advance',
    paymentType: 'LOAN_ADVANCE',
    businessFunction: 'Loans Advance',
    options: {
        disabledCombinations: [
            { from: ProductKinds.loanAccount, to: ProductKinds.loanAccount },
            { from: ProductKinds.creditCard, to: ProductKinds.creditCard },
        ],
    },
    hooks: {
        onDestroy: destroyHook,
    },
};
//# sourceMappingURL=loans-advance-config.js.map