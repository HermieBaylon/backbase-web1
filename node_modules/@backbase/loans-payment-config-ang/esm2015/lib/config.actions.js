import { Frequencies, internalTransferScheduleFreqOnInitHook, } from '@backbase/payment-orders-ang';
import { pairwise, startWith, tap } from 'rxjs/operators';
import { AccountRole } from '@backbase/loans-collection-ui-ang';
import { changeFields } from './loans-payment-config';
const subscriptions = [];
let isEditMode = false;
let amountOptionsSubscription;
let frequencySelectSubscription;
const getAccountForm = (group, name) => { var _a; return (_a = group === null || group === void 0 ? void 0 : group.parent) === null || _a === void 0 ? void 0 : _a.get(name); };
let selectedLoan;
export const scheduleFrequencyForAmountOption = [
    { label: 'Once', value: Frequencies.ONCE },
    { label: 'Daily', value: Frequencies.DAILY },
    { label: 'Weekly', value: Frequencies.WEEKLY },
    { label: 'Biweekly', value: Frequencies.BIWEEKLY },
    { label: 'Monthly', value: Frequencies.MONTHLY },
    { label: 'Quarterly', value: Frequencies.QUARTERLY },
    { label: 'Annually', value: Frequencies.YEARLY },
];
export const setLoan = (loan) => {
    selectedLoan = loan;
    if (loan) {
        changeFields(loan);
    }
};
export const frequencySelectInitHook = (params) => {
    internalTransferScheduleFreqOnInitHook(params);
    frequencySelectSubscription = params.control.valueChanges.subscribe(() => {
        params.component.toggleDependants();
    });
};
export const frequencySelectDestroyHook = () => {
    frequencySelectSubscription === null || frequencySelectSubscription === void 0 ? void 0 : frequencySelectSubscription.unsubscribe();
};
export const amountCurrencyGroupInitHook = (params) => {
    var _a;
    amountInputCounterPartyInitHook(params);
    const remittanceInfoControl = params.group;
    const amountGroup = remittanceInfoControl === null || remittanceInfoControl === void 0 ? void 0 : remittanceInfoControl.get('amountGroup');
    const scheduleFrequency = remittanceInfoControl.get('scheduleFrequency');
    amountOptionsSubscription = (_a = remittanceInfoControl === null || remittanceInfoControl === void 0 ? void 0 : remittanceInfoControl.get('amountOptions')) === null || _a === void 0 ? void 0 : _a.valueChanges.pipe(startWith(remittanceInfoControl.value), pairwise()).subscribe(([prev, next]) => {
        if (prev !== next) {
            if (next === 1) {
                amountGroup === null || amountGroup === void 0 ? void 0 : amountGroup.patchValue({
                    currency: selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.currencyCode,
                    amount: cutAmount(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.inArrearsAmount),
                });
                scheduleFrequency === null || scheduleFrequency === void 0 ? void 0 : scheduleFrequency.patchValue(scheduleFrequencyForAmountOption);
            }
            if (next === 0) {
                scheduleFrequency === null || scheduleFrequency === void 0 ? void 0 : scheduleFrequency.patchValue(scheduleFrequencyForAmountOption);
            }
        }
    });
};
export const amountCurrencyGroupDestroyHook = () => {
    amountOptionsSubscription === null || amountOptionsSubscription === void 0 ? void 0 : amountOptionsSubscription.unsubscribe();
};
export const internalAmountOptionsInitHook = (params) => {
    isEditMode = params.component.stateService.paymentStateSubject.value === 'EDIT';
};
export const amountInputInitHook = (form) => {
    const initiatorControl = getAccountForm(form.group, 'initiator');
    initiatorControl === null || initiatorControl === void 0 ? void 0 : initiatorControl.valueChanges.subscribe((data) => {
        form.component.options.currencies = [data.currency];
    });
};
export const amountInputCounterPartyInitHook = ({ component, group }) => {
    const amountGroup = group === null || group === void 0 ? void 0 : group.get('amountGroup');
    if ((selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.inArrearsAmount) && !(amountGroup === null || amountGroup === void 0 ? void 0 : amountGroup.value.amount)) {
        amountGroup === null || amountGroup === void 0 ? void 0 : amountGroup.patchValue({
            currency: selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.currencyCode,
            amount: cutAmount(selectedLoan.inArrearsAmount),
        });
    }
    const counterpartyControl = getAccountForm(group, 'counterparty');
    counterpartyControl === null || counterpartyControl === void 0 ? void 0 : counterpartyControl.valueChanges.subscribe((data) => {
        component.options.currencies = [data.currency];
    });
};
export const counterPartyPaymentInitHook = ({ component, group }) => {
    component.options.mapItems = (accounts) => !!(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.id)
        ? accounts.filter((account) => {
            if (account.id === (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.id)) {
                component.selectItem(account);
                if (account.defaultRecord) {
                    const defaultRecord = account.defaultRecord;
                    defaultRecord.nextRepaymentAmount = selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.nextRepaymentAmount;
                    defaultRecord.inArrearsAmount = cutAmount(selectedLoan.inArrearsAmount);
                }
            }
            return account.id === (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.id);
        })
        : accounts;
    const remittanceInfoControl = getAccountForm(group, 'remittanceInfo');
    const changesSubscription = group.valueChanges.subscribe((value) => {
        if (value.productKindName === 'Loan') {
            group.patchValue({ role: AccountRole.DEBTOR }, { onlySelf: true, emitEvent: false });
        }
        else {
            group.patchValue({ role: AccountRole.CREDITOR }, { onlySelf: true, emitEvent: false });
        }
        const amountOptions = remittanceInfoControl === null || remittanceInfoControl === void 0 ? void 0 : remittanceInfoControl.get('amountOptions');
        if ((amountOptions === null || amountOptions === void 0 ? void 0 : amountOptions.value) !== 0 && (amountOptions === null || amountOptions === void 0 ? void 0 : amountOptions.value) !== 1 && !isEditMode) {
            if ((!(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.inArrearsAmount) || (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.inArrearsAmount) === '0') &&
                !!(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.nextRepaymentAmount)) {
                amountOptions === null || amountOptions === void 0 ? void 0 : amountOptions.setValue(0);
            }
            if (!!(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.inArrearsAmount) &&
                (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.inArrearsAmount) !== '0' &&
                !!(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.nextRepaymentAmount)) {
                amountOptions === null || amountOptions === void 0 ? void 0 : amountOptions.setValue(1);
            }
        }
    });
    subscriptions.push(changesSubscription);
};
export const initiatorAdvanceInitHook = ({ component }) => {
    const selectedId = selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.id;
    component.options.mapItems = (accounts) => !!selectedId
        ? accounts.filter((account) => {
            if (account.id === selectedId) {
                component.selectItem(account);
            }
            return account.id === selectedId;
        })
        : accounts;
};
export const counterpartyInitAdvanceHook = (params) => {
    params.component.options.mapItems = (accounts) => {
        const currency = selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.currencyCode;
        return !!currency ? accounts.filter((account) => account.currency === currency) : accounts;
    };
    selectAccountDefaultSettlement(params);
};
export const initiatorInitHook = ({ component }) => {
    component.options.mapItems = (accounts) => !!(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.id)
        ? accounts.filter((account) => {
            if (account.id === (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.defaultSettlementAccountId) &&
                account.currency === (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.currencyCode)) {
                component.selectItem(account);
            }
            return account.currency === (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.currencyCode);
        })
        : accounts;
};
const selectAccountDefaultSettlement = ({ component }) => {
    const defaultSettlementId = selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.defaultSettlementAccountId;
    if (defaultSettlementId) {
        const subscription = component.options.items$
            .pipe(tap((accounts) => {
            const account = accounts.find((internalAccount) => internalAccount.id === defaultSettlementId);
            component.selectItem(account);
        }))
            .subscribe();
        subscriptions.push(subscription);
    }
};
export const destroyHook = () => {
    subscriptions.forEach((subscription) => subscription.unsubscribe());
};
const cutAmount = (val) => (val ? val.split('.')[0] + '.' + val.split('.')[1].slice(0, 2) : '');
//# sourceMappingURL=config.actions.js.map