import { Validators } from '@angular/forms';
import { Frequencies, internalTransferScheduleFreqOnInitHook, PaymentBaseFields, PaymentComponents, InitiatorFields, ProductKinds, AccountBalances, CounterPartyFields, RemittanceInfoFields, ScheduleFields, scheduleFrequencyToggleDependants, pastDateValidator, internalTransScheduleStartDateOnInitHook, scheduleStartDateOnDestroyHook, ScheduleEndType, scheduleEndTypeToggleDependants, endDateAfterStartDateValidator, scheduleEndDateOnInitHook, minValueTwoValidator, maxValueTwoHundredValidator, PaymentMode } from '@backbase/payment-orders-ang';
import { startWith, pairwise, tap } from 'rxjs/operators';
import { AccountRole } from '@backbase/loans-collection-ui-ang';

const subscriptions = [];
let isEditMode = false;
let amountOptionsSubscription;
let frequencySelectSubscription;
const getAccountForm = (group, name) => { var _a; return (_a = group === null || group === void 0 ? void 0 : group.parent) === null || _a === void 0 ? void 0 : _a.get(name); };
let selectedLoan;
const scheduleFrequencyForAmountOption = [
    { label: 'Once', value: Frequencies.ONCE },
    { label: 'Daily', value: Frequencies.DAILY },
    { label: 'Weekly', value: Frequencies.WEEKLY },
    { label: 'Biweekly', value: Frequencies.BIWEEKLY },
    { label: 'Monthly', value: Frequencies.MONTHLY },
    { label: 'Quarterly', value: Frequencies.QUARTERLY },
    { label: 'Annually', value: Frequencies.YEARLY },
];
const setLoan = (loan) => {
    selectedLoan = loan;
    if (loan) {
        changeFields(loan);
    }
};
const frequencySelectInitHook = (params) => {
    internalTransferScheduleFreqOnInitHook(params);
    frequencySelectSubscription = params.control.valueChanges.subscribe(() => {
        params.component.toggleDependants();
    });
};
const frequencySelectDestroyHook = () => {
    frequencySelectSubscription === null || frequencySelectSubscription === void 0 ? void 0 : frequencySelectSubscription.unsubscribe();
};
const amountCurrencyGroupInitHook = (params) => {
    var _a;
    amountInputCounterPartyInitHook(params);
    const remittanceInfoControl = params.group;
    const amountGroup = remittanceInfoControl === null || remittanceInfoControl === void 0 ? void 0 : remittanceInfoControl.get('amountGroup');
    const scheduleFrequency = remittanceInfoControl.get('scheduleFrequency');
    amountOptionsSubscription = (_a = remittanceInfoControl === null || remittanceInfoControl === void 0 ? void 0 : remittanceInfoControl.get('amountOptions')) === null || _a === void 0 ? void 0 : _a.valueChanges.pipe(startWith(remittanceInfoControl.value), pairwise()).subscribe(([prev, next]) => {
        if (prev !== next) {
            if (next === 1) {
                amountGroup === null || amountGroup === void 0 ? void 0 : amountGroup.patchValue({
                    currency: selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.currencyCode,
                    amount: cutAmount(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.inArrearsAmount),
                });
                scheduleFrequency === null || scheduleFrequency === void 0 ? void 0 : scheduleFrequency.patchValue(scheduleFrequencyForAmountOption);
            }
            if (next === 0) {
                scheduleFrequency === null || scheduleFrequency === void 0 ? void 0 : scheduleFrequency.patchValue(scheduleFrequencyForAmountOption);
            }
        }
    });
};
const amountCurrencyGroupDestroyHook = () => {
    amountOptionsSubscription === null || amountOptionsSubscription === void 0 ? void 0 : amountOptionsSubscription.unsubscribe();
};
const internalAmountOptionsInitHook = (params) => {
    isEditMode = params.component.stateService.paymentStateSubject.value === 'EDIT';
};
const amountInputInitHook = (form) => {
    const initiatorControl = getAccountForm(form.group, 'initiator');
    initiatorControl === null || initiatorControl === void 0 ? void 0 : initiatorControl.valueChanges.subscribe((data) => {
        form.component.options.currencies = [data.currency];
    });
};
const amountInputCounterPartyInitHook = ({ component, group }) => {
    const amountGroup = group === null || group === void 0 ? void 0 : group.get('amountGroup');
    if ((selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.inArrearsAmount) && !(amountGroup === null || amountGroup === void 0 ? void 0 : amountGroup.value.amount)) {
        amountGroup === null || amountGroup === void 0 ? void 0 : amountGroup.patchValue({
            currency: selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.currencyCode,
            amount: cutAmount(selectedLoan.inArrearsAmount),
        });
    }
    const counterpartyControl = getAccountForm(group, 'counterparty');
    counterpartyControl === null || counterpartyControl === void 0 ? void 0 : counterpartyControl.valueChanges.subscribe((data) => {
        component.options.currencies = [data.currency];
    });
};
const counterPartyPaymentInitHook = ({ component, group }) => {
    component.options.mapItems = (accounts) => !!(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.id)
        ? accounts.filter((account) => {
            if (account.id === (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.id)) {
                component.selectItem(account);
                if (account.defaultRecord) {
                    const defaultRecord = account.defaultRecord;
                    defaultRecord.nextRepaymentAmount = selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.nextRepaymentAmount;
                    defaultRecord.inArrearsAmount = cutAmount(selectedLoan.inArrearsAmount);
                }
            }
            return account.id === (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.id);
        })
        : accounts;
    const remittanceInfoControl = getAccountForm(group, 'remittanceInfo');
    const changesSubscription = group.valueChanges.subscribe((value) => {
        if (value.productKindName === 'Loan') {
            group.patchValue({ role: AccountRole.DEBTOR }, { onlySelf: true, emitEvent: false });
        }
        else {
            group.patchValue({ role: AccountRole.CREDITOR }, { onlySelf: true, emitEvent: false });
        }
        const amountOptions = remittanceInfoControl === null || remittanceInfoControl === void 0 ? void 0 : remittanceInfoControl.get('amountOptions');
        if ((amountOptions === null || amountOptions === void 0 ? void 0 : amountOptions.value) !== 0 && (amountOptions === null || amountOptions === void 0 ? void 0 : amountOptions.value) !== 1 && !isEditMode) {
            if ((!(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.inArrearsAmount) || (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.inArrearsAmount) === '0') &&
                !!(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.nextRepaymentAmount)) {
                amountOptions === null || amountOptions === void 0 ? void 0 : amountOptions.setValue(0);
            }
            if (!!(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.inArrearsAmount) &&
                (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.inArrearsAmount) !== '0' &&
                !!(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.nextRepaymentAmount)) {
                amountOptions === null || amountOptions === void 0 ? void 0 : amountOptions.setValue(1);
            }
        }
    });
    subscriptions.push(changesSubscription);
};
const initiatorAdvanceInitHook = ({ component }) => {
    const selectedId = selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.id;
    component.options.mapItems = (accounts) => !!selectedId
        ? accounts.filter((account) => {
            if (account.id === selectedId) {
                component.selectItem(account);
            }
            return account.id === selectedId;
        })
        : accounts;
};
const counterpartyInitAdvanceHook = (params) => {
    params.component.options.mapItems = (accounts) => {
        const currency = selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.currencyCode;
        return !!currency ? accounts.filter((account) => account.currency === currency) : accounts;
    };
    selectAccountDefaultSettlement(params);
};
const initiatorInitHook = ({ component }) => {
    component.options.mapItems = (accounts) => !!(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.id)
        ? accounts.filter((account) => {
            if (account.id === (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.defaultSettlementAccountId) &&
                account.currency === (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.currencyCode)) {
                component.selectItem(account);
            }
            return account.currency === (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.currencyCode);
        })
        : accounts;
};
const selectAccountDefaultSettlement = ({ component }) => {
    const defaultSettlementId = selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.defaultSettlementAccountId;
    if (defaultSettlementId) {
        const subscription = component.options.items$
            .pipe(tap((accounts) => {
            const account = accounts.find((internalAccount) => internalAccount.id === defaultSettlementId);
            component.selectItem(account);
        }))
            .subscribe();
        subscriptions.push(subscription);
    }
};
const destroyHook = () => {
    subscriptions.forEach((subscription) => subscription.unsubscribe());
};
const cutAmount = (val) => (val ? val.split('.')[0] + '.' + val.split('.')[1].slice(0, 2) : '');

const initiatorPayment = {
    name: PaymentBaseFields.initiator,
    fields: [
        {
            type: PaymentComponents.internalAccountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                label: 'From',
                placeholder: 'Select an account',
                cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                showCurrencySymbol: false,
                productKinds: [
                    {
                        productKind: ProductKinds.savingsAccount,
                        balance: { apiField: AccountBalances.available, label: 'Available Balance' },
                    },
                    {
                        productKind: ProductKinds.currentAccount,
                        balance: { apiField: AccountBalances.current, label: 'Current Balance' },
                    },
                ],
                connectedAccounts: false,
                connectedAccountsSubHeader: 'Connected Accounts',
            },
            hooks: {
                onInit: initiatorInitHook,
            },
        },
    ],
};
const counterParty = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            type: PaymentComponents.internalAccountSelector,
            name: CounterPartyFields.counterPartyAccountGroup,
            options: {
                label: 'To',
                placeholder: 'Select an account',
                cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                productKinds: [{ productKind: ProductKinds.loanAccount, balance: { label: 'Current Balance' } }],
                connectedAccountsSubHeader: 'Connected Accounts',
                connectedAccounts: false,
                showCurrencySymbol: false,
                preselect: true,
                dependants: [
                    {
                        parent: PaymentBaseFields.remittanceInfo,
                        items: [RemittanceInfoFields.amountOptions],
                    },
                ],
                activateDependantsOn: () => {
                    return [
                        {
                            parent: PaymentBaseFields.remittanceInfo,
                            items: [RemittanceInfoFields.amountOptions],
                        },
                    ];
                },
                validationMessages: [
                    {
                        name: 'required',
                        message: 'Please select an account from the list to transfer to',
                    },
                ],
            },
            hooks: {
                onInit: counterPartyPaymentInitHook,
            },
        },
    ],
};
const remittanceInfo = {
    name: PaymentBaseFields.remittanceInfo,
    fields: [
        {
            type: PaymentComponents.header,
            name: PaymentComponents.header,
            options: {
                cssClasses: ['col-12', 'pb-0', 'pt-2', 'bb-fieldset__heading'],
                heading: 'Payment details ',
                headingType: 'h2',
                headingClasses: ['mb-0'],
                separatorLine: true,
            },
        },
        {
            type: PaymentComponents.internalAmountOptions,
            name: RemittanceInfoFields.amountOptions,
            hidden: true,
            options: {
                cssClasses: ['col-12', 'pb-0'],
                isConditionalMandatory: true,
                noBalanceText: 'You don’t have any amount due on this credit card account.',
                amountInputClassName: 'bb-amount-input__field--large',
                autoDecimal: true,
                showCurrencySymbol: false,
                mapCurrency: false,
                amountOptions: {
                    cssClasses: ['pl-2'],
                    loan: [
                        {
                            label: 'Additional payment',
                            description: 'This is on top of your existing schedule',
                            amountApiField: 'nextRepaymentAmount',
                            scheduleFrequency: [{ label: 'Once', value: Frequencies.ONCE }],
                        },
                        {
                            label: 'Different amount',
                            description: 'Choose what you wish to repay',
                            scheduleFrequency: scheduleFrequencyForAmountOption,
                        },
                    ],
                },
                validationMessages: [
                    {
                        name: 'invalidAmount',
                        message: 'Please select an amount to transfer',
                    },
                    {
                        name: 'required',
                        message: 'Please add amount of this transfer',
                    },
                ],
                currencies: ['USD'],
                dependants: [
                    RemittanceInfoFields.amountCurrencyGroup,
                    RemittanceInfoFields.purposeOfPayment,
                    ScheduleFields.frequency,
                ],
                activateDependantsOn: (value) => {
                    return value === 1 || value === '0'
                        ? [
                            RemittanceInfoFields.amountCurrencyGroup,
                            RemittanceInfoFields.purposeOfPayment,
                            ScheduleFields.frequency,
                        ]
                        : [ScheduleFields.frequency];
                },
            },
            hooks: {
                onInit: internalAmountOptionsInitHook,
            },
        },
        {
            type: PaymentComponents.amount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            hidden: true,
            options: {
                label: 'Amount',
                cssClasses: [
                    'bb-amount-input__field--medium',
                    'bb-block',
                    'bb-block--lg',
                    'col-md-7',
                    'bb-loans-remittance-info__section',
                ],
                autoDecimal: true,
                keepValueOnHidden: true,
                currencies: ['USD'],
                validationMessages: [
                    {
                        name: 'invalidAmount',
                        message: 'Please add amount of this transfer',
                    },
                ],
            },
            hooks: {
                onInit: amountCurrencyGroupInitHook,
                onDestroy: amountCurrencyGroupDestroyHook,
            },
        },
        {
            type: PaymentComponents.select,
            name: RemittanceInfoFields.purposeOfPayment,
            hidden: true,
            options: {
                label: 'Payment towards (optional)',
                options: [
                    { label: '', value: '' },
                    { label: 'Interest only', value: 'Interest only' },
                    { label: 'Principal only', value: 'Principal only' },
                    { label: 'Principal and interest', value: 'Principal and interest' },
                ],
                preselect: true,
                cssClasses: ['d-block', 'col-md-6', 'align-top', 'bb-loans-remittance-info__section'],
            },
        },
    ],
};
const schedule = {
    name: PaymentBaseFields.schedule,
    fields: [
        {
            type: PaymentComponents.scheduleHeader,
            name: PaymentComponents.scheduleHeader,
            options: {
                cssClasses: ['pb-0', 'bb-schedule-header__relative-text'],
                label: 'Schedule',
            },
        },
        {
            type: PaymentComponents.select,
            name: ScheduleFields.frequency,
            options: {
                label: 'Frequency',
                validators: [Validators.required],
                options: scheduleFrequencyForAmountOption,
                defaultValue: Frequencies.ONCE,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                dependants: [ScheduleFields.endType],
                activateDependantsOn: scheduleFrequencyToggleDependants,
            },
            hooks: {
                onInit: frequencySelectInitHook,
                onDestroy: frequencySelectDestroyHook,
            },
        },
        {
            type: PaymentComponents.date,
            name: ScheduleFields.startDate,
            options: {
                label: 'Execution date',
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                validators: [Validators.required, pastDateValidator],
                defaultValue: new Date().toISOString(),
                validationMessages: [{ name: 'pastDate', message: 'Start date cannot be in the past' }],
                description: 'You selected a date after the due date, this transfer will incur a late fee',
            },
            hooks: {
                onInit: internalTransScheduleStartDateOnInitHook,
                onDestroy: scheduleStartDateOnDestroyHook,
            },
        },
        {
            type: PaymentComponents.radio,
            name: ScheduleFields.endType,
            options: {
                label: 'End',
                preselect: true,
                isConditionalMandatory: true,
                cssClasses: ['d-inline-block', 'col-md-2', 'align-top', 'bb-schedule__end-type'],
                defaultValue: ScheduleEndType.NEVER,
                options: [
                    { label: 'Never', value: ScheduleEndType.NEVER },
                    { label: 'On date', value: ScheduleEndType.ON },
                    { label: 'After', value: ScheduleEndType.AFTER },
                ],
                dependants: [ScheduleFields.endDate, ScheduleFields.repeat],
                activateDependantsOn: scheduleEndTypeToggleDependants,
            },
        },
        {
            type: PaymentComponents.date,
            name: ScheduleFields.endDate,
            options: {
                cssClasses: ['d-inline-block', 'col-md-10', 'align-top', 'bb-schedule__end-date'],
                validators: [endDateAfterStartDateValidator],
                validationMessages: [
                    { name: 'required', message: 'End date is required' },
                    { name: 'lessThanStartDate', message: 'End date cannot be before start date' },
                ],
                isConditionalMandatory: true,
            },
            hooks: {
                onInit: scheduleEndDateOnInitHook,
            },
        },
        {
            type: PaymentComponents.number,
            name: ScheduleFields.repeat,
            options: {
                isConditionalMandatory: true,
                description: 'occurrences',
                min: 2,
                max: 200,
                defaultValue: 2,
                validators: [minValueTwoValidator, maxValueTwoHundredValidator],
                validationMessages: [
                    { name: 'required', message: 'Value is required' },
                    { name: 'min', message: 'Value is below the minimum allowed occurrences (2)' },
                    { name: 'max', message: 'Value exceeds maximum allowed occurrences (200)' },
                ],
                cssClasses: ['d-inline-block', 'col-md-9', 'align-top', 'px-0', 'bb-schedule__repeat'],
            },
        },
    ],
};
const remittanceInfoZeroOptions = {
    name: PaymentBaseFields.remittanceInfo,
    fields: [
        {
            type: PaymentComponents.header,
            name: PaymentComponents.header,
            options: {
                cssClasses: ['col-12', 'pb-0', 'pt-2', 'bb-fieldset__heading'],
                heading: 'Payment details ',
                headingType: 'h2',
                headingClasses: ['mb-0'],
                separatorLine: true,
            },
        },
        {
            type: PaymentComponents.amount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: 'Amount',
                cssClasses: ['bb-amount-input__field--medium', 'bb-block', 'bb-block--lg', 'col-md-7'],
                autoDecimal: true,
                keepValueOnHidden: true,
                currencies: ['USD'],
                validationMessages: [
                    {
                        name: 'invalidAmount',
                        message: 'Please add amount of this transfer',
                    },
                ],
            },
            hooks: {
                onInit: amountInputCounterPartyInitHook,
            },
        },
        {
            type: PaymentComponents.select,
            name: RemittanceInfoFields.purposeOfPayment,
            options: {
                label: 'Payment towards (optional)',
                options: [
                    { label: '', value: '' },
                    { label: 'Interest only', value: 'Interest only' },
                    { label: 'Principal only', value: 'Principal only' },
                    { label: 'Principal and interest', value: 'Principal and interest' },
                ],
                preselect: true,
                cssClasses: ['d-block', 'col-md-6', 'align-top'],
            },
        },
    ],
};
/**
 * This is the copy of the INTERNAL_TRANSFER as it fits in the best way for the loans configs
 */
const LOANS_PAYMENT = {
    fields: [initiatorPayment, counterParty, remittanceInfo, schedule],
    name: 'Loans Payment',
    paymentType: 'LOAN_PAYMENT',
    businessFunction: 'Loans Payment',
    options: {
        disabledCombinations: [{ from: ProductKinds.loanAccount, to: ProductKinds.loanAccount }],
    },
};
function changeFields(loan) {
    if (!(loan === null || loan === void 0 ? void 0 : loan.nextRepaymentAmount) || (loan === null || loan === void 0 ? void 0 : loan.nextRepaymentAmount) === '0') {
        LOANS_PAYMENT.fields[2] = remittanceInfoZeroOptions;
    }
    else {
        LOANS_PAYMENT.fields[2] = remittanceInfo;
    }
}

const initiatorAdvance = {
    name: PaymentBaseFields.initiator,
    title: 'Draw Amount',
    fields: [
        {
            type: PaymentComponents.internalAccountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                label: 'From',
                placeholder: 'Select an account',
                cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                productKinds: [{ productKind: ProductKinds.loanAccount, balance: { label: 'Current Balance' } }],
                connectedAccounts: false,
                connectedAccountsSubHeader: 'Connected Accounts',
                showCurrencySymbol: false,
            },
            hooks: {
                onInit: initiatorAdvanceInitHook,
            },
        },
    ],
};
const counterPartyAdvance = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            type: PaymentComponents.internalAccountSelector,
            name: CounterPartyFields.counterPartyAccountGroup,
            options: {
                label: 'To',
                placeholder: 'Select an account',
                cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                productKinds: [
                    {
                        productKind: ProductKinds.savingsAccount,
                        balance: { apiField: AccountBalances.available, label: 'Available Balance' },
                    },
                    {
                        productKind: ProductKinds.currentAccount,
                        balance: { apiField: AccountBalances.current, label: 'Current Balance' },
                    },
                ],
                connectedAccountsSubHeader: 'Connected Accounts',
                connectedAccounts: false,
                validationMessages: [
                    {
                        name: 'required',
                        message: 'Please select an account from the list to transfer to',
                    },
                ],
                showCurrencySymbol: false,
            },
            hooks: {
                onInit: counterpartyInitAdvanceHook,
            },
        },
    ],
};
const remittanceInfoAdvance = {
    name: PaymentBaseFields.remittanceInfo,
    fields: [
        {
            type: PaymentComponents.amount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: 'Amount',
                cssClasses: ['bb-amount-input__field--medium', 'bb-block', 'bb-block--lg', 'col-md-7'],
                autoDecimal: true,
                keepValueOnHidden: true,
                currencies: ['EUR'],
                validationMessages: [
                    {
                        name: 'invalidAmount',
                        message: 'Please add amount of this transfer',
                    },
                ],
            },
            hooks: {
                onInit: amountInputInitHook,
            },
        },
    ],
};
const scheduleAdvance = {
    name: PaymentBaseFields.schedule,
    fields: [
        {
            type: PaymentComponents.date,
            name: ScheduleFields.startDate,
            options: {
                label: 'Execution date',
                cssClasses: ['d-block', 'col-md-6', 'align-top'],
                validators: [Validators.required, pastDateValidator],
                defaultValue: new Date().toISOString(),
                validationMessages: [{ name: 'pastDate', message: 'Start date cannot be in the past' }],
                description: 'You selected a date after the due date, this transfer will incur a late fee',
            },
            hooks: {
                onInit: internalTransScheduleStartDateOnInitHook,
                onDestroy: scheduleStartDateOnDestroyHook,
            },
        },
        {
            type: PaymentComponents.select,
            name: ScheduleFields.frequency,
            hidden: true,
            options: {
                label: 'Frequency',
                validators: [Validators.required],
                options: [{ label: 'Once', value: Frequencies.ONCE }],
                defaultValue: Frequencies.ONCE,
                cssClasses: ['d-block', 'col-md-6', 'align-top'],
                dependants: [ScheduleFields.endType],
                activateDependantsOn: scheduleFrequencyToggleDependants,
            },
        },
    ],
};
const LOANS_ADVANCE = {
    fields: [initiatorAdvance, counterPartyAdvance, remittanceInfoAdvance, scheduleAdvance],
    name: 'Loans Advance',
    paymentType: 'LOAN_ADVANCE',
    businessFunction: 'Loans Advance',
    options: {
        disabledCombinations: [
            { from: ProductKinds.loanAccount, to: ProductKinds.loanAccount },
            { from: ProductKinds.creditCard, to: ProductKinds.creditCard },
        ],
    },
    hooks: {
        onDestroy: destroyHook,
    },
};

const newLoansOptions = {
    defaultScheme: 'BBAN',
    enableApprovals: true,
    enablePaymentTemplateSelector: false,
    enableSavePaymentAsTemplate: false,
    defaultCountry: 'US',
    paymentMode: PaymentMode.CREATE_PAYMENT,
    isErrorTitleDisplayed: true,
    checkClosedPaymentsAccess: false,
    isModalView: true,
    successEventName: '',
    isEditPaymentModal: false,
    isOneOffToRecurrentAllowed: false,
    isRecurrentToOneOffAllowed: false,
    pageSize: 1000,
};

/**
 * Generated bundle index. Do not edit.
 */

export { LOANS_ADVANCE, LOANS_PAYMENT, destroyHook, newLoansOptions, setLoan };
//# sourceMappingURL=backbase-loans-payment-config-ang.js.map
