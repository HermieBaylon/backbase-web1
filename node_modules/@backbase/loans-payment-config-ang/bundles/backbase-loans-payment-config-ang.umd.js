(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/forms'), require('@backbase/payment-orders-ang'), require('rxjs/operators'), require('@backbase/loans-collection-ui-ang')) :
    typeof define === 'function' && define.amd ? define('@backbase/loans-payment-config-ang', ['exports', '@angular/forms', '@backbase/payment-orders-ang', 'rxjs/operators', '@backbase/loans-collection-ui-ang'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["loans-payment-config-ang"] = {}), global.ng.forms, global.paymentOrdersAng, global.rxjs.operators, global.loansCollectionUiAng));
})(this, (function (exports, forms, paymentOrdersAng, operators, loansCollectionUiAng) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var subscriptions = [];
    var isEditMode = false;
    var amountOptionsSubscription;
    var frequencySelectSubscription;
    var getAccountForm = function (group, name) { var _a; return (_a = group === null || group === void 0 ? void 0 : group.parent) === null || _a === void 0 ? void 0 : _a.get(name); };
    var selectedLoan;
    var scheduleFrequencyForAmountOption = [
        { label: 'Once', value: paymentOrdersAng.Frequencies.ONCE },
        { label: 'Daily', value: paymentOrdersAng.Frequencies.DAILY },
        { label: 'Weekly', value: paymentOrdersAng.Frequencies.WEEKLY },
        { label: 'Biweekly', value: paymentOrdersAng.Frequencies.BIWEEKLY },
        { label: 'Monthly', value: paymentOrdersAng.Frequencies.MONTHLY },
        { label: 'Quarterly', value: paymentOrdersAng.Frequencies.QUARTERLY },
        { label: 'Annually', value: paymentOrdersAng.Frequencies.YEARLY },
    ];
    var setLoan = function (loan) {
        selectedLoan = loan;
        if (loan) {
            changeFields(loan);
        }
    };
    var frequencySelectInitHook = function (params) {
        paymentOrdersAng.internalTransferScheduleFreqOnInitHook(params);
        frequencySelectSubscription = params.control.valueChanges.subscribe(function () {
            params.component.toggleDependants();
        });
    };
    var frequencySelectDestroyHook = function () {
        frequencySelectSubscription === null || frequencySelectSubscription === void 0 ? void 0 : frequencySelectSubscription.unsubscribe();
    };
    var amountCurrencyGroupInitHook = function (params) {
        var _a;
        amountInputCounterPartyInitHook(params);
        var remittanceInfoControl = params.group;
        var amountGroup = remittanceInfoControl === null || remittanceInfoControl === void 0 ? void 0 : remittanceInfoControl.get('amountGroup');
        var scheduleFrequency = remittanceInfoControl.get('scheduleFrequency');
        amountOptionsSubscription = (_a = remittanceInfoControl === null || remittanceInfoControl === void 0 ? void 0 : remittanceInfoControl.get('amountOptions')) === null || _a === void 0 ? void 0 : _a.valueChanges.pipe(operators.startWith(remittanceInfoControl.value), operators.pairwise()).subscribe(function (_b) {
            var _c = __read(_b, 2), prev = _c[0], next = _c[1];
            if (prev !== next) {
                if (next === 1) {
                    amountGroup === null || amountGroup === void 0 ? void 0 : amountGroup.patchValue({
                        currency: selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.currencyCode,
                        amount: cutAmount(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.inArrearsAmount),
                    });
                    scheduleFrequency === null || scheduleFrequency === void 0 ? void 0 : scheduleFrequency.patchValue(scheduleFrequencyForAmountOption);
                }
                if (next === 0) {
                    scheduleFrequency === null || scheduleFrequency === void 0 ? void 0 : scheduleFrequency.patchValue(scheduleFrequencyForAmountOption);
                }
            }
        });
    };
    var amountCurrencyGroupDestroyHook = function () {
        amountOptionsSubscription === null || amountOptionsSubscription === void 0 ? void 0 : amountOptionsSubscription.unsubscribe();
    };
    var internalAmountOptionsInitHook = function (params) {
        isEditMode = params.component.stateService.paymentStateSubject.value === 'EDIT';
    };
    var amountInputInitHook = function (form) {
        var initiatorControl = getAccountForm(form.group, 'initiator');
        initiatorControl === null || initiatorControl === void 0 ? void 0 : initiatorControl.valueChanges.subscribe(function (data) {
            form.component.options.currencies = [data.currency];
        });
    };
    var amountInputCounterPartyInitHook = function (_b) {
        var component = _b.component, group = _b.group;
        var amountGroup = group === null || group === void 0 ? void 0 : group.get('amountGroup');
        if ((selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.inArrearsAmount) && !(amountGroup === null || amountGroup === void 0 ? void 0 : amountGroup.value.amount)) {
            amountGroup === null || amountGroup === void 0 ? void 0 : amountGroup.patchValue({
                currency: selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.currencyCode,
                amount: cutAmount(selectedLoan.inArrearsAmount),
            });
        }
        var counterpartyControl = getAccountForm(group, 'counterparty');
        counterpartyControl === null || counterpartyControl === void 0 ? void 0 : counterpartyControl.valueChanges.subscribe(function (data) {
            component.options.currencies = [data.currency];
        });
    };
    var counterPartyPaymentInitHook = function (_b) {
        var component = _b.component, group = _b.group;
        component.options.mapItems = function (accounts) { return !!(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.id)
            ? accounts.filter(function (account) {
                if (account.id === (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.id)) {
                    component.selectItem(account);
                    if (account.defaultRecord) {
                        var defaultRecord = account.defaultRecord;
                        defaultRecord.nextRepaymentAmount = selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.nextRepaymentAmount;
                        defaultRecord.inArrearsAmount = cutAmount(selectedLoan.inArrearsAmount);
                    }
                }
                return account.id === (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.id);
            })
            : accounts; };
        var remittanceInfoControl = getAccountForm(group, 'remittanceInfo');
        var changesSubscription = group.valueChanges.subscribe(function (value) {
            if (value.productKindName === 'Loan') {
                group.patchValue({ role: loansCollectionUiAng.AccountRole.DEBTOR }, { onlySelf: true, emitEvent: false });
            }
            else {
                group.patchValue({ role: loansCollectionUiAng.AccountRole.CREDITOR }, { onlySelf: true, emitEvent: false });
            }
            var amountOptions = remittanceInfoControl === null || remittanceInfoControl === void 0 ? void 0 : remittanceInfoControl.get('amountOptions');
            if ((amountOptions === null || amountOptions === void 0 ? void 0 : amountOptions.value) !== 0 && (amountOptions === null || amountOptions === void 0 ? void 0 : amountOptions.value) !== 1 && !isEditMode) {
                if ((!(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.inArrearsAmount) || (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.inArrearsAmount) === '0') &&
                    !!(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.nextRepaymentAmount)) {
                    amountOptions === null || amountOptions === void 0 ? void 0 : amountOptions.setValue(0);
                }
                if (!!(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.inArrearsAmount) &&
                    (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.inArrearsAmount) !== '0' &&
                    !!(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.nextRepaymentAmount)) {
                    amountOptions === null || amountOptions === void 0 ? void 0 : amountOptions.setValue(1);
                }
            }
        });
        subscriptions.push(changesSubscription);
    };
    var initiatorAdvanceInitHook = function (_b) {
        var component = _b.component;
        var selectedId = selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.id;
        component.options.mapItems = function (accounts) { return !!selectedId
            ? accounts.filter(function (account) {
                if (account.id === selectedId) {
                    component.selectItem(account);
                }
                return account.id === selectedId;
            })
            : accounts; };
    };
    var counterpartyInitAdvanceHook = function (params) {
        params.component.options.mapItems = function (accounts) {
            var currency = selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.currencyCode;
            return !!currency ? accounts.filter(function (account) { return account.currency === currency; }) : accounts;
        };
        selectAccountDefaultSettlement(params);
    };
    var initiatorInitHook = function (_b) {
        var component = _b.component;
        component.options.mapItems = function (accounts) { return !!(selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.id)
            ? accounts.filter(function (account) {
                if (account.id === (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.defaultSettlementAccountId) &&
                    account.currency === (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.currencyCode)) {
                    component.selectItem(account);
                }
                return account.currency === (selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.currencyCode);
            })
            : accounts; };
    };
    var selectAccountDefaultSettlement = function (_b) {
        var component = _b.component;
        var defaultSettlementId = selectedLoan === null || selectedLoan === void 0 ? void 0 : selectedLoan.defaultSettlementAccountId;
        if (defaultSettlementId) {
            var subscription = component.options.items$
                .pipe(operators.tap(function (accounts) {
                var account = accounts.find(function (internalAccount) { return internalAccount.id === defaultSettlementId; });
                component.selectItem(account);
            }))
                .subscribe();
            subscriptions.push(subscription);
        }
    };
    var destroyHook = function () {
        subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
    };
    var cutAmount = function (val) { return (val ? val.split('.')[0] + '.' + val.split('.')[1].slice(0, 2) : ''); };

    var initiatorPayment = {
        name: paymentOrdersAng.PaymentBaseFields.initiator,
        fields: [
            {
                type: paymentOrdersAng.PaymentComponents.internalAccountSelector,
                name: paymentOrdersAng.InitiatorFields.initiatorAccountGroup,
                options: {
                    label: 'From',
                    placeholder: 'Select an account',
                    cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                    showCurrencySymbol: false,
                    productKinds: [
                        {
                            productKind: paymentOrdersAng.ProductKinds.savingsAccount,
                            balance: { apiField: paymentOrdersAng.AccountBalances.available, label: 'Available Balance' },
                        },
                        {
                            productKind: paymentOrdersAng.ProductKinds.currentAccount,
                            balance: { apiField: paymentOrdersAng.AccountBalances.current, label: 'Current Balance' },
                        },
                    ],
                    connectedAccounts: false,
                    connectedAccountsSubHeader: 'Connected Accounts',
                },
                hooks: {
                    onInit: initiatorInitHook,
                },
            },
        ],
    };
    var counterParty = {
        name: paymentOrdersAng.PaymentBaseFields.counterparty,
        fields: [
            {
                type: paymentOrdersAng.PaymentComponents.internalAccountSelector,
                name: paymentOrdersAng.CounterPartyFields.counterPartyAccountGroup,
                options: {
                    label: 'To',
                    placeholder: 'Select an account',
                    cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                    productKinds: [{ productKind: paymentOrdersAng.ProductKinds.loanAccount, balance: { label: 'Current Balance' } }],
                    connectedAccountsSubHeader: 'Connected Accounts',
                    connectedAccounts: false,
                    showCurrencySymbol: false,
                    preselect: true,
                    dependants: [
                        {
                            parent: paymentOrdersAng.PaymentBaseFields.remittanceInfo,
                            items: [paymentOrdersAng.RemittanceInfoFields.amountOptions],
                        },
                    ],
                    activateDependantsOn: function () {
                        return [
                            {
                                parent: paymentOrdersAng.PaymentBaseFields.remittanceInfo,
                                items: [paymentOrdersAng.RemittanceInfoFields.amountOptions],
                            },
                        ];
                    },
                    validationMessages: [
                        {
                            name: 'required',
                            message: 'Please select an account from the list to transfer to',
                        },
                    ],
                },
                hooks: {
                    onInit: counterPartyPaymentInitHook,
                },
            },
        ],
    };
    var remittanceInfo = {
        name: paymentOrdersAng.PaymentBaseFields.remittanceInfo,
        fields: [
            {
                type: paymentOrdersAng.PaymentComponents.header,
                name: paymentOrdersAng.PaymentComponents.header,
                options: {
                    cssClasses: ['col-12', 'pb-0', 'pt-2', 'bb-fieldset__heading'],
                    heading: 'Payment details ',
                    headingType: 'h2',
                    headingClasses: ['mb-0'],
                    separatorLine: true,
                },
            },
            {
                type: paymentOrdersAng.PaymentComponents.internalAmountOptions,
                name: paymentOrdersAng.RemittanceInfoFields.amountOptions,
                hidden: true,
                options: {
                    cssClasses: ['col-12', 'pb-0'],
                    isConditionalMandatory: true,
                    noBalanceText: 'You don’t have any amount due on this credit card account.',
                    amountInputClassName: 'bb-amount-input__field--large',
                    autoDecimal: true,
                    showCurrencySymbol: false,
                    mapCurrency: false,
                    amountOptions: {
                        cssClasses: ['pl-2'],
                        loan: [
                            {
                                label: 'Additional payment',
                                description: 'This is on top of your existing schedule',
                                amountApiField: 'nextRepaymentAmount',
                                scheduleFrequency: [{ label: 'Once', value: paymentOrdersAng.Frequencies.ONCE }],
                            },
                            {
                                label: 'Different amount',
                                description: 'Choose what you wish to repay',
                                scheduleFrequency: scheduleFrequencyForAmountOption,
                            },
                        ],
                    },
                    validationMessages: [
                        {
                            name: 'invalidAmount',
                            message: 'Please select an amount to transfer',
                        },
                        {
                            name: 'required',
                            message: 'Please add amount of this transfer',
                        },
                    ],
                    currencies: ['USD'],
                    dependants: [
                        paymentOrdersAng.RemittanceInfoFields.amountCurrencyGroup,
                        paymentOrdersAng.RemittanceInfoFields.purposeOfPayment,
                        paymentOrdersAng.ScheduleFields.frequency,
                    ],
                    activateDependantsOn: function (value) {
                        return value === 1 || value === '0'
                            ? [
                                paymentOrdersAng.RemittanceInfoFields.amountCurrencyGroup,
                                paymentOrdersAng.RemittanceInfoFields.purposeOfPayment,
                                paymentOrdersAng.ScheduleFields.frequency,
                            ]
                            : [paymentOrdersAng.ScheduleFields.frequency];
                    },
                },
                hooks: {
                    onInit: internalAmountOptionsInitHook,
                },
            },
            {
                type: paymentOrdersAng.PaymentComponents.amount,
                name: paymentOrdersAng.RemittanceInfoFields.amountCurrencyGroup,
                hidden: true,
                options: {
                    label: 'Amount',
                    cssClasses: [
                        'bb-amount-input__field--medium',
                        'bb-block',
                        'bb-block--lg',
                        'col-md-7',
                        'bb-loans-remittance-info__section',
                    ],
                    autoDecimal: true,
                    keepValueOnHidden: true,
                    currencies: ['USD'],
                    validationMessages: [
                        {
                            name: 'invalidAmount',
                            message: 'Please add amount of this transfer',
                        },
                    ],
                },
                hooks: {
                    onInit: amountCurrencyGroupInitHook,
                    onDestroy: amountCurrencyGroupDestroyHook,
                },
            },
            {
                type: paymentOrdersAng.PaymentComponents.select,
                name: paymentOrdersAng.RemittanceInfoFields.purposeOfPayment,
                hidden: true,
                options: {
                    label: 'Payment towards (optional)',
                    options: [
                        { label: '', value: '' },
                        { label: 'Interest only', value: 'Interest only' },
                        { label: 'Principal only', value: 'Principal only' },
                        { label: 'Principal and interest', value: 'Principal and interest' },
                    ],
                    preselect: true,
                    cssClasses: ['d-block', 'col-md-6', 'align-top', 'bb-loans-remittance-info__section'],
                },
            },
        ],
    };
    var schedule = {
        name: paymentOrdersAng.PaymentBaseFields.schedule,
        fields: [
            {
                type: paymentOrdersAng.PaymentComponents.scheduleHeader,
                name: paymentOrdersAng.PaymentComponents.scheduleHeader,
                options: {
                    cssClasses: ['pb-0', 'bb-schedule-header__relative-text'],
                    label: 'Schedule',
                },
            },
            {
                type: paymentOrdersAng.PaymentComponents.select,
                name: paymentOrdersAng.ScheduleFields.frequency,
                options: {
                    label: 'Frequency',
                    validators: [forms.Validators.required],
                    options: scheduleFrequencyForAmountOption,
                    defaultValue: paymentOrdersAng.Frequencies.ONCE,
                    cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    dependants: [paymentOrdersAng.ScheduleFields.endType],
                    activateDependantsOn: paymentOrdersAng.scheduleFrequencyToggleDependants,
                },
                hooks: {
                    onInit: frequencySelectInitHook,
                    onDestroy: frequencySelectDestroyHook,
                },
            },
            {
                type: paymentOrdersAng.PaymentComponents.date,
                name: paymentOrdersAng.ScheduleFields.startDate,
                options: {
                    label: 'Execution date',
                    cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    validators: [forms.Validators.required, paymentOrdersAng.pastDateValidator],
                    defaultValue: new Date().toISOString(),
                    validationMessages: [{ name: 'pastDate', message: 'Start date cannot be in the past' }],
                    description: 'You selected a date after the due date, this transfer will incur a late fee',
                },
                hooks: {
                    onInit: paymentOrdersAng.internalTransScheduleStartDateOnInitHook,
                    onDestroy: paymentOrdersAng.scheduleStartDateOnDestroyHook,
                },
            },
            {
                type: paymentOrdersAng.PaymentComponents.radio,
                name: paymentOrdersAng.ScheduleFields.endType,
                options: {
                    label: 'End',
                    preselect: true,
                    isConditionalMandatory: true,
                    cssClasses: ['d-inline-block', 'col-md-2', 'align-top', 'bb-schedule__end-type'],
                    defaultValue: paymentOrdersAng.ScheduleEndType.NEVER,
                    options: [
                        { label: 'Never', value: paymentOrdersAng.ScheduleEndType.NEVER },
                        { label: 'On date', value: paymentOrdersAng.ScheduleEndType.ON },
                        { label: 'After', value: paymentOrdersAng.ScheduleEndType.AFTER },
                    ],
                    dependants: [paymentOrdersAng.ScheduleFields.endDate, paymentOrdersAng.ScheduleFields.repeat],
                    activateDependantsOn: paymentOrdersAng.scheduleEndTypeToggleDependants,
                },
            },
            {
                type: paymentOrdersAng.PaymentComponents.date,
                name: paymentOrdersAng.ScheduleFields.endDate,
                options: {
                    cssClasses: ['d-inline-block', 'col-md-10', 'align-top', 'bb-schedule__end-date'],
                    validators: [paymentOrdersAng.endDateAfterStartDateValidator],
                    validationMessages: [
                        { name: 'required', message: 'End date is required' },
                        { name: 'lessThanStartDate', message: 'End date cannot be before start date' },
                    ],
                    isConditionalMandatory: true,
                },
                hooks: {
                    onInit: paymentOrdersAng.scheduleEndDateOnInitHook,
                },
            },
            {
                type: paymentOrdersAng.PaymentComponents.number,
                name: paymentOrdersAng.ScheduleFields.repeat,
                options: {
                    isConditionalMandatory: true,
                    description: 'occurrences',
                    min: 2,
                    max: 200,
                    defaultValue: 2,
                    validators: [paymentOrdersAng.minValueTwoValidator, paymentOrdersAng.maxValueTwoHundredValidator],
                    validationMessages: [
                        { name: 'required', message: 'Value is required' },
                        { name: 'min', message: 'Value is below the minimum allowed occurrences (2)' },
                        { name: 'max', message: 'Value exceeds maximum allowed occurrences (200)' },
                    ],
                    cssClasses: ['d-inline-block', 'col-md-9', 'align-top', 'px-0', 'bb-schedule__repeat'],
                },
            },
        ],
    };
    var remittanceInfoZeroOptions = {
        name: paymentOrdersAng.PaymentBaseFields.remittanceInfo,
        fields: [
            {
                type: paymentOrdersAng.PaymentComponents.header,
                name: paymentOrdersAng.PaymentComponents.header,
                options: {
                    cssClasses: ['col-12', 'pb-0', 'pt-2', 'bb-fieldset__heading'],
                    heading: 'Payment details ',
                    headingType: 'h2',
                    headingClasses: ['mb-0'],
                    separatorLine: true,
                },
            },
            {
                type: paymentOrdersAng.PaymentComponents.amount,
                name: paymentOrdersAng.RemittanceInfoFields.amountCurrencyGroup,
                options: {
                    label: 'Amount',
                    cssClasses: ['bb-amount-input__field--medium', 'bb-block', 'bb-block--lg', 'col-md-7'],
                    autoDecimal: true,
                    keepValueOnHidden: true,
                    currencies: ['USD'],
                    validationMessages: [
                        {
                            name: 'invalidAmount',
                            message: 'Please add amount of this transfer',
                        },
                    ],
                },
                hooks: {
                    onInit: amountInputCounterPartyInitHook,
                },
            },
            {
                type: paymentOrdersAng.PaymentComponents.select,
                name: paymentOrdersAng.RemittanceInfoFields.purposeOfPayment,
                options: {
                    label: 'Payment towards (optional)',
                    options: [
                        { label: '', value: '' },
                        { label: 'Interest only', value: 'Interest only' },
                        { label: 'Principal only', value: 'Principal only' },
                        { label: 'Principal and interest', value: 'Principal and interest' },
                    ],
                    preselect: true,
                    cssClasses: ['d-block', 'col-md-6', 'align-top'],
                },
            },
        ],
    };
    /**
     * This is the copy of the INTERNAL_TRANSFER as it fits in the best way for the loans configs
     */
    var LOANS_PAYMENT = {
        fields: [initiatorPayment, counterParty, remittanceInfo, schedule],
        name: 'Loans Payment',
        paymentType: 'LOAN_PAYMENT',
        businessFunction: 'Loans Payment',
        options: {
            disabledCombinations: [{ from: paymentOrdersAng.ProductKinds.loanAccount, to: paymentOrdersAng.ProductKinds.loanAccount }],
        },
    };
    function changeFields(loan) {
        if (!(loan === null || loan === void 0 ? void 0 : loan.nextRepaymentAmount) || (loan === null || loan === void 0 ? void 0 : loan.nextRepaymentAmount) === '0') {
            LOANS_PAYMENT.fields[2] = remittanceInfoZeroOptions;
        }
        else {
            LOANS_PAYMENT.fields[2] = remittanceInfo;
        }
    }

    var initiatorAdvance = {
        name: paymentOrdersAng.PaymentBaseFields.initiator,
        title: 'Draw Amount',
        fields: [
            {
                type: paymentOrdersAng.PaymentComponents.internalAccountSelector,
                name: paymentOrdersAng.InitiatorFields.initiatorAccountGroup,
                options: {
                    label: 'From',
                    placeholder: 'Select an account',
                    cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                    productKinds: [{ productKind: paymentOrdersAng.ProductKinds.loanAccount, balance: { label: 'Current Balance' } }],
                    connectedAccounts: false,
                    connectedAccountsSubHeader: 'Connected Accounts',
                    showCurrencySymbol: false,
                },
                hooks: {
                    onInit: initiatorAdvanceInitHook,
                },
            },
        ],
    };
    var counterPartyAdvance = {
        name: paymentOrdersAng.PaymentBaseFields.counterparty,
        fields: [
            {
                type: paymentOrdersAng.PaymentComponents.internalAccountSelector,
                name: paymentOrdersAng.CounterPartyFields.counterPartyAccountGroup,
                options: {
                    label: 'To',
                    placeholder: 'Select an account',
                    cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                    productKinds: [
                        {
                            productKind: paymentOrdersAng.ProductKinds.savingsAccount,
                            balance: { apiField: paymentOrdersAng.AccountBalances.available, label: 'Available Balance' },
                        },
                        {
                            productKind: paymentOrdersAng.ProductKinds.currentAccount,
                            balance: { apiField: paymentOrdersAng.AccountBalances.current, label: 'Current Balance' },
                        },
                    ],
                    connectedAccountsSubHeader: 'Connected Accounts',
                    connectedAccounts: false,
                    validationMessages: [
                        {
                            name: 'required',
                            message: 'Please select an account from the list to transfer to',
                        },
                    ],
                    showCurrencySymbol: false,
                },
                hooks: {
                    onInit: counterpartyInitAdvanceHook,
                },
            },
        ],
    };
    var remittanceInfoAdvance = {
        name: paymentOrdersAng.PaymentBaseFields.remittanceInfo,
        fields: [
            {
                type: paymentOrdersAng.PaymentComponents.amount,
                name: paymentOrdersAng.RemittanceInfoFields.amountCurrencyGroup,
                options: {
                    label: 'Amount',
                    cssClasses: ['bb-amount-input__field--medium', 'bb-block', 'bb-block--lg', 'col-md-7'],
                    autoDecimal: true,
                    keepValueOnHidden: true,
                    currencies: ['EUR'],
                    validationMessages: [
                        {
                            name: 'invalidAmount',
                            message: 'Please add amount of this transfer',
                        },
                    ],
                },
                hooks: {
                    onInit: amountInputInitHook,
                },
            },
        ],
    };
    var scheduleAdvance = {
        name: paymentOrdersAng.PaymentBaseFields.schedule,
        fields: [
            {
                type: paymentOrdersAng.PaymentComponents.date,
                name: paymentOrdersAng.ScheduleFields.startDate,
                options: {
                    label: 'Execution date',
                    cssClasses: ['d-block', 'col-md-6', 'align-top'],
                    validators: [forms.Validators.required, paymentOrdersAng.pastDateValidator],
                    defaultValue: new Date().toISOString(),
                    validationMessages: [{ name: 'pastDate', message: 'Start date cannot be in the past' }],
                    description: 'You selected a date after the due date, this transfer will incur a late fee',
                },
                hooks: {
                    onInit: paymentOrdersAng.internalTransScheduleStartDateOnInitHook,
                    onDestroy: paymentOrdersAng.scheduleStartDateOnDestroyHook,
                },
            },
            {
                type: paymentOrdersAng.PaymentComponents.select,
                name: paymentOrdersAng.ScheduleFields.frequency,
                hidden: true,
                options: {
                    label: 'Frequency',
                    validators: [forms.Validators.required],
                    options: [{ label: 'Once', value: paymentOrdersAng.Frequencies.ONCE }],
                    defaultValue: paymentOrdersAng.Frequencies.ONCE,
                    cssClasses: ['d-block', 'col-md-6', 'align-top'],
                    dependants: [paymentOrdersAng.ScheduleFields.endType],
                    activateDependantsOn: paymentOrdersAng.scheduleFrequencyToggleDependants,
                },
            },
        ],
    };
    var LOANS_ADVANCE = {
        fields: [initiatorAdvance, counterPartyAdvance, remittanceInfoAdvance, scheduleAdvance],
        name: 'Loans Advance',
        paymentType: 'LOAN_ADVANCE',
        businessFunction: 'Loans Advance',
        options: {
            disabledCombinations: [
                { from: paymentOrdersAng.ProductKinds.loanAccount, to: paymentOrdersAng.ProductKinds.loanAccount },
                { from: paymentOrdersAng.ProductKinds.creditCard, to: paymentOrdersAng.ProductKinds.creditCard },
            ],
        },
        hooks: {
            onDestroy: destroyHook,
        },
    };

    var newLoansOptions = {
        defaultScheme: 'BBAN',
        enableApprovals: true,
        enablePaymentTemplateSelector: false,
        enableSavePaymentAsTemplate: false,
        defaultCountry: 'US',
        paymentMode: paymentOrdersAng.PaymentMode.CREATE_PAYMENT,
        isErrorTitleDisplayed: true,
        checkClosedPaymentsAccess: false,
        isModalView: true,
        successEventName: '',
        isEditPaymentModal: false,
        isOneOffToRecurrentAllowed: false,
        isRecurrentToOneOffAllowed: false,
        pageSize: 1000,
    };

    /**
     * Generated bundle index. Do not edit.
     */

    exports.LOANS_ADVANCE = LOANS_ADVANCE;
    exports.LOANS_PAYMENT = LOANS_PAYMENT;
    exports.destroyHook = destroyHook;
    exports.newLoansOptions = newLoansOptions;
    exports.setLoan = setLoan;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-loans-payment-config-ang.umd.js.map
