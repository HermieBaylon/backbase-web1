import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { MESSAGES_BASE_PATH } from '../variables';
import { MessagesConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class EmployeeHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new MessagesConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    canConsumeForm(consumes) {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteConversationAssignment(requestParameters, observe = 'body', reportProgress = false, options) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteConversationAssignment.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v5/employee/messages/assignment`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteConversationAssignmentUrl(requestParameters) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteConversationAssignment.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/employee/messages/assignment${queryString ? `?${queryString}` : ''}`;
    }
    deleteMessageAttachmentsEmployee(requestParameters, observe = 'body', reportProgress = false, options) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteMessageAttachmentsEmployee.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v5/employee/attachments`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteMessageAttachmentsEmployeeUrl(requestParameters) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteMessageAttachmentsEmployee.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/employee/attachments${queryString ? `?${queryString}` : ''}`;
    }
    deleteSubscription(requestParameters, observe = 'body', reportProgress = false, options) {
        const _subscriptionId = requestParameters["subscriptionId"];
        if (_subscriptionId === null || _subscriptionId === undefined) {
            throw new Error('Required parameter subscriptionId was null or undefined when calling deleteSubscription.');
        }
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling deleteSubscription.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}/subscriptions/${encodeURIComponent(String(_subscriptionId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteSubscriptionUrl(requestParameters) {
        const _subscriptionId = requestParameters["subscriptionId"];
        if (_subscriptionId === null || _subscriptionId === undefined) {
            throw new Error('Required parameter subscriptionId was null or undefined when calling deleteSubscription.');
        }
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling deleteSubscription.');
        }
        return `${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}/subscriptions/${encodeURIComponent(String(_subscriptionId))}`;
    }
    deleteTopic(requestParameters, observe = 'body', reportProgress = false, options) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling deleteTopic.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteTopicUrl(requestParameters) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling deleteTopic.');
        }
        return `${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}`;
    }
    getConversationThreadsEmployee(requestParameters, observe = 'body', reportProgress = false, options) {
        const _mailboxType = requestParameters["mailboxType"];
        const _viewType = requestParameters["viewType"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_mailboxType !== undefined && _mailboxType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _mailboxType, 'mailboxType');
        }
        if (_viewType !== undefined && _viewType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _viewType, 'viewType');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/conversations`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getConversationThreadsEmployeeUrl(requestParameters) {
        const _mailboxType = requestParameters["mailboxType"];
        const _viewType = requestParameters["viewType"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_mailboxType !== undefined && _mailboxType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _mailboxType, 'mailboxType');
        }
        if (_viewType !== undefined && _viewType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _viewType, 'viewType');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/employee/conversations${queryString ? `?${queryString}` : ''}`;
    }
    getConversationsCounter(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/conversations/counters`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getConversationsCounterUrl() {
        return `${this.configuration.basePath}/client-api/v5/employee/conversations/counters`;
    }
    getConversationsReport(requestParameters, observe = 'body', reportProgress = false, options) {
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _clientId = requestParameters["clientId"];
        const _clientFullName = requestParameters["clientFullName"];
        const _category = requestParameters["category"];
        const _status = requestParameters["status"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_clientId !== undefined && _clientId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _clientId, 'clientId');
        }
        if (_clientFullName !== undefined && _clientFullName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _clientFullName, 'clientFullName');
        }
        if (_category !== undefined && _category !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _category, 'category');
        }
        if (_status !== undefined && _status !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _status, 'status');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/conversations/report`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getConversationsReportUrl(requestParameters) {
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _clientId = requestParameters["clientId"];
        const _clientFullName = requestParameters["clientFullName"];
        const _category = requestParameters["category"];
        const _status = requestParameters["status"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_clientId !== undefined && _clientId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _clientId, 'clientId');
        }
        if (_clientFullName !== undefined && _clientFullName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _clientFullName, 'clientFullName');
        }
        if (_category !== undefined && _category !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _category, 'category');
        }
        if (_status !== undefined && _status !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _status, 'status');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/employee/conversations/report${queryString ? `?${queryString}` : ''}`;
    }
    getEmployeeMessageThread(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling getEmployeeMessageThread.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/conversation`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getEmployeeMessageThreadUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling getEmployeeMessageThread.');
        }
        return `${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/conversation`;
    }
    getMessageAttachmentEmployee(requestParameters, observe = 'body', reportProgress = false, options) {
        const _attachmentId = requestParameters["attachmentId"];
        if (_attachmentId === null || _attachmentId === undefined) {
            throw new Error('Required parameter attachmentId was null or undefined when calling getMessageAttachmentEmployee.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/octet-stream',
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/attachments/${encodeURIComponent(String(_attachmentId))}`, {
            responseType: "blob",
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getMessageAttachmentEmployeeUrl(requestParameters) {
        const _attachmentId = requestParameters["attachmentId"];
        if (_attachmentId === null || _attachmentId === undefined) {
            throw new Error('Required parameter attachmentId was null or undefined when calling getMessageAttachmentEmployee.');
        }
        return `${this.configuration.basePath}/client-api/v5/employee/attachments/${encodeURIComponent(String(_attachmentId))}`;
    }
    getSearchConversations(requestParameters, observe = 'body', reportProgress = false, options) {
        const _userId = requestParameters["userId"];
        const _topicId = requestParameters["topicId"];
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_userId !== undefined && _userId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
        }
        if (_topicId !== undefined && _topicId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _topicId, 'topicId');
        }
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/conversations/search`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getSearchConversationsUrl(requestParameters) {
        const _userId = requestParameters["userId"];
        const _topicId = requestParameters["topicId"];
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_userId !== undefined && _userId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
        }
        if (_topicId !== undefined && _topicId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _topicId, 'topicId');
        }
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/employee/conversations/search${queryString ? `?${queryString}` : ''}`;
    }
    getSubscriptions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling getSubscriptions.');
        }
        const _subscriberName = requestParameters["subscriberName"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_subscriberName !== undefined && _subscriberName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _subscriberName, 'subscriberName');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}/subscriptions`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getSubscriptionsUrl(requestParameters) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling getSubscriptions.');
        }
        const _subscriberName = requestParameters["subscriberName"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_subscriberName !== undefined && _subscriberName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _subscriberName, 'subscriberName');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}/subscriptions${queryString ? `?${queryString}` : ''}`;
    }
    getTopic(requestParameters, observe = 'body', reportProgress = false, options) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling getTopic.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getTopicUrl(requestParameters) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling getTopic.');
        }
        return `${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}`;
    }
    getTopicsEmployee(requestParameters, observe = 'body', reportProgress = false, options) {
        const _subscribed = requestParameters["subscribed"];
        const _deleted = requestParameters["deleted"];
        const _topicType = requestParameters["topicType"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_subscribed !== undefined && _subscribed !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _subscribed, 'subscribed');
        }
        if (_deleted !== undefined && _deleted !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _deleted, 'deleted');
        }
        if (_topicType !== undefined && _topicType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _topicType, 'topicType');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/topics`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getTopicsEmployeeUrl(requestParameters) {
        const _subscribed = requestParameters["subscribed"];
        const _deleted = requestParameters["deleted"];
        const _topicType = requestParameters["topicType"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_subscribed !== undefined && _subscribed !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _subscribed, 'subscribed');
        }
        if (_deleted !== undefined && _deleted !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _deleted, 'deleted');
        }
        if (_topicType !== undefined && _topicType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _topicType, 'topicType');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/employee/topics${queryString ? `?${queryString}` : ''}`;
    }
    postMessageAttachmentsEmployee(requestParameters, observe = 'body', reportProgress = false, options) {
        const _attachment = requestParameters["attachment"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'multipart/form-data'
        ];
        const canConsumeForm = this.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        let convertFormParamsToString = false;
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new HttpParams({ encoder: this.encoder });
        }
        if (_attachment !== undefined) {
            formParams = formParams.append('attachment', _attachment) || formParams;
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/employee/attachments`, convertFormParamsToString ? formParams.toString() : formParams, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postMessageAttachmentsEmployeeUrl(requestParameters) {
        const _attachment = requestParameters["attachment"];
        return `${this.configuration.basePath}/client-api/v5/employee/attachments`;
    }
    postMessageReplyEmployee(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling postMessageReplyEmployee.');
        }
        const _messageReplyPostRequestBody = requestParameters["messageReplyPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/reply`, _messageReplyPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postMessageReplyEmployeeUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling postMessageReplyEmployee.');
        }
        const _messageReplyPostRequestBody = requestParameters["messageReplyPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/reply`;
    }
    postMessagesEmployee(requestParameters, observe = 'body', reportProgress = false, options) {
        const _presentationMessageEmployeePostRequestBody = requestParameters["presentationMessageEmployeePostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/employee/messages`, _presentationMessageEmployeePostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postMessagesEmployeeUrl(requestParameters) {
        const _presentationMessageEmployeePostRequestBody = requestParameters["presentationMessageEmployeePostRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/messages`;
    }
    postSubscribers(requestParameters, observe = 'body', reportProgress = false, options) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling postSubscribers.');
        }
        const _subscribersPostRequestBody = requestParameters["subscribersPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}/subscribers`, _subscribersPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postSubscribersUrl(requestParameters) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling postSubscribers.');
        }
        const _subscribersPostRequestBody = requestParameters["subscribersPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}/subscribers`;
    }
    postSubscriptions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling postSubscriptions.');
        }
        const _subscriptionsPostRequestBody = requestParameters["subscriptionsPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}/subscriptions`, _subscriptionsPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postSubscriptionsUrl(requestParameters) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling postSubscriptions.');
        }
        const _subscriptionsPostRequestBody = requestParameters["subscriptionsPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}/subscriptions`;
    }
    postTopics(requestParameters, observe = 'body', reportProgress = false, options) {
        const _topicsPostRequestBody = requestParameters["topicsPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/employee/topics`, _topicsPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postTopicsUrl(requestParameters) {
        const _topicsPostRequestBody = requestParameters["topicsPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/topics`;
    }
    putAssignConversation(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling putAssignConversation.');
        }
        const _messageThreadAssignmentRequestBody = requestParameters["messageThreadAssignmentRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/assign`, _messageThreadAssignmentRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putAssignConversationUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling putAssignConversation.');
        }
        const _messageThreadAssignmentRequestBody = requestParameters["messageThreadAssignmentRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/assign`;
    }
    putConversationAssignment(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageThreadBulkAssignmentRequestBody = requestParameters["messageThreadBulkAssignmentRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v5/employee/messages/assignment`, _messageThreadBulkAssignmentRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putConversationAssignmentUrl(requestParameters) {
        const _messageThreadBulkAssignmentRequestBody = requestParameters["messageThreadBulkAssignmentRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/messages/assignment`;
    }
    putConversationResolution(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling putConversationResolution.');
        }
        const _messageThreadResolutionRequestBody = requestParameters["messageThreadResolutionRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/resolution`, _messageThreadResolutionRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putConversationResolutionUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling putConversationResolution.');
        }
        const _messageThreadResolutionRequestBody = requestParameters["messageThreadResolutionRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/resolution`;
    }
    putConversationResolutionEmployee(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageThreadBulkResolutionRequestBody = requestParameters["messageThreadBulkResolutionRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v5/employee/messages/resolution`, _messageThreadBulkResolutionRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putConversationResolutionEmployeeUrl(requestParameters) {
        const _messageThreadBulkResolutionRequestBody = requestParameters["messageThreadBulkResolutionRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/messages/resolution`;
    }
    putMarkAsReadUnreadEmployee(requestParameters, observe = 'body', reportProgress = false, options) {
        const _markAsReadUnreadPutRequestBody = requestParameters["markAsReadUnreadPutRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v5/employee/conversations/read`, _markAsReadUnreadPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putMarkAsReadUnreadEmployeeUrl(requestParameters) {
        const _markAsReadUnreadPutRequestBody = requestParameters["markAsReadUnreadPutRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/conversations/read`;
    }
    putMessageThreadTopic(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling putMessageThreadTopic.');
        }
        const _updateMessageTopicRequestBody = requestParameters["updateMessageTopicRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/topic`, _updateMessageTopicRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putMessageThreadTopicUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling putMessageThreadTopic.');
        }
        const _updateMessageTopicRequestBody = requestParameters["updateMessageTopicRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/topic`;
    }
    putTopic(requestParameters, observe = 'body', reportProgress = false, options) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling putTopic.');
        }
        const _xBBSVCRequestId = requestParameters["xBBSVCRequestId"];
        const _topicPutRequestBody = requestParameters["topicPutRequestBody"];
        let headers = this.defaultHeaders;
        if (_xBBSVCRequestId !== undefined && _xBBSVCRequestId !== null) {
            headers = headers.set('X-BBSVC-Request-Id', String(_xBBSVCRequestId));
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}`, _topicPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putTopicUrl(requestParameters) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling putTopic.');
        }
        const _xBBSVCRequestId = requestParameters["xBBSVCRequestId"];
        const _topicPutRequestBody = requestParameters["topicPutRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}`;
    }
}
EmployeeHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EmployeeHttpService, deps: [{ token: i1.HttpClient }, { token: MESSAGES_BASE_PATH, optional: true }, { token: i2.MessagesConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
EmployeeHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EmployeeHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EmployeeHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MESSAGES_BASE_PATH]
                }] }, { type: i2.MessagesConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,