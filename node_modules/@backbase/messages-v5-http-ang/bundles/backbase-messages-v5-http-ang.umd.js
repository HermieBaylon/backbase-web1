(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/messages-v5-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["messages-v5-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var MailoutStatus = {
        CREATED: 'CREATED',
        PREPARING: 'PREPARING',
        READY: 'READY',
        PROCESSING: 'PROCESSING',
        DONE: 'DONE',
        ERROR: 'ERROR',
        CANCELLATIONINPROCESS: 'CANCELLATION_IN_PROCESS',
        CANCELLED: 'CANCELLED'
    };

    exports.MarkAsReadUnreadPutRequestBody = void 0;
    (function (MarkAsReadUnreadPutRequestBody) {
        MarkAsReadUnreadPutRequestBody.StatusEnum = {
            READ: 'READ',
            UNREAD: 'UNREAD'
        };
    })(exports.MarkAsReadUnreadPutRequestBody || (exports.MarkAsReadUnreadPutRequestBody = {}));

    var WorkflowStatus = {
        NEW: 'NEW',
        INPROGRESS: 'IN_PROGRESS',
        RESOLVED: 'RESOLVED'
    };

    var MESSAGES_BASE_PATH = new i0.InjectionToken('MESSAGES_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var MessagesConfiguration = /** @class */ (function () {
        function MessagesConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        MessagesConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        MessagesConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        MessagesConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        MessagesConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return MessagesConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module MessagesConfiguration');

    var MessagesApiModule = /** @class */ (function () {
        function MessagesApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('MessagesApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        MessagesApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: MessagesApiModule,
                providers: [{ provide: MessagesConfiguration, useFactory: configurationFactory }]
            };
        };
        return MessagesApiModule;
    }());
    MessagesApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: MessagesApiModule, deps: [{ token: MessagesApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: MessagesConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MessagesApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: MessagesApiModule });
    MessagesApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: MessagesApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: MessagesApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: MessagesApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: MessagesConfiguration }];
        } });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var EmployeeHttpService = /** @class */ (function () {
        function EmployeeHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new MessagesConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        EmployeeHttpService.prototype.canConsumeForm = function (consumes) {
            var e_1, _a;
            var form = 'multipart/form-data';
            try {
                for (var consumes_1 = __values(consumes), consumes_1_1 = consumes_1.next(); !consumes_1_1.done; consumes_1_1 = consumes_1.next()) {
                    var consume = consumes_1_1.value;
                    if (form === consume) {
                        return true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (consumes_1_1 && !consumes_1_1.done && (_a = consumes_1.return)) _a.call(consumes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return false;
        };
        EmployeeHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        EmployeeHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        EmployeeHttpService.prototype.deleteConversationAssignment = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _ids = requestParameters["ids"];
            if (_ids === null || _ids === undefined) {
                throw new Error('Required parameter ids was null or undefined when calling deleteConversationAssignment.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_ids) {
                _ids.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'ids');
                });
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v5/employee/messages/assignment", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.deleteConversationAssignmentUrl = function (requestParameters) {
            var _this = this;
            var _ids = requestParameters["ids"];
            if (_ids === null || _ids === undefined) {
                throw new Error('Required parameter ids was null or undefined when calling deleteConversationAssignment.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_ids) {
                _ids.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'ids');
                });
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v5/employee/messages/assignment" + (queryString ? "?" + queryString : '');
        };
        EmployeeHttpService.prototype.deleteMessageAttachmentsEmployee = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _ids = requestParameters["ids"];
            if (_ids === null || _ids === undefined) {
                throw new Error('Required parameter ids was null or undefined when calling deleteMessageAttachmentsEmployee.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_ids) {
                _ids.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'ids');
                });
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v5/employee/attachments", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.deleteMessageAttachmentsEmployeeUrl = function (requestParameters) {
            var _this = this;
            var _ids = requestParameters["ids"];
            if (_ids === null || _ids === undefined) {
                throw new Error('Required parameter ids was null or undefined when calling deleteMessageAttachmentsEmployee.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_ids) {
                _ids.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'ids');
                });
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v5/employee/attachments" + (queryString ? "?" + queryString : '');
        };
        EmployeeHttpService.prototype.deleteSubscription = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _subscriptionId = requestParameters["subscriptionId"];
            if (_subscriptionId === null || _subscriptionId === undefined) {
                throw new Error('Required parameter subscriptionId was null or undefined when calling deleteSubscription.');
            }
            var _topicId = requestParameters["topicId"];
            if (_topicId === null || _topicId === undefined) {
                throw new Error('Required parameter topicId was null or undefined when calling deleteSubscription.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v5/employee/topics/" + encodeURIComponent(String(_topicId)) + "/subscriptions/" + encodeURIComponent(String(_subscriptionId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.deleteSubscriptionUrl = function (requestParameters) {
            var _subscriptionId = requestParameters["subscriptionId"];
            if (_subscriptionId === null || _subscriptionId === undefined) {
                throw new Error('Required parameter subscriptionId was null or undefined when calling deleteSubscription.');
            }
            var _topicId = requestParameters["topicId"];
            if (_topicId === null || _topicId === undefined) {
                throw new Error('Required parameter topicId was null or undefined when calling deleteSubscription.');
            }
            return this.configuration.basePath + "/client-api/v5/employee/topics/" + encodeURIComponent(String(_topicId)) + "/subscriptions/" + encodeURIComponent(String(_subscriptionId));
        };
        EmployeeHttpService.prototype.deleteTopic = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _topicId = requestParameters["topicId"];
            if (_topicId === null || _topicId === undefined) {
                throw new Error('Required parameter topicId was null or undefined when calling deleteTopic.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v5/employee/topics/" + encodeURIComponent(String(_topicId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.deleteTopicUrl = function (requestParameters) {
            var _topicId = requestParameters["topicId"];
            if (_topicId === null || _topicId === undefined) {
                throw new Error('Required parameter topicId was null or undefined when calling deleteTopic.');
            }
            return this.configuration.basePath + "/client-api/v5/employee/topics/" + encodeURIComponent(String(_topicId));
        };
        EmployeeHttpService.prototype.getConversationThreadsEmployee = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _mailboxType = requestParameters["mailboxType"];
            var _viewType = requestParameters["viewType"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _orderBy = requestParameters["orderBy"];
            var _direction = requestParameters["direction"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_mailboxType !== undefined && _mailboxType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _mailboxType, 'mailboxType');
            }
            if (_viewType !== undefined && _viewType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _viewType, 'viewType');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_orderBy !== undefined && _orderBy !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
            }
            if (_direction !== undefined && _direction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v5/employee/conversations", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.getConversationThreadsEmployeeUrl = function (requestParameters) {
            var _mailboxType = requestParameters["mailboxType"];
            var _viewType = requestParameters["viewType"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _orderBy = requestParameters["orderBy"];
            var _direction = requestParameters["direction"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_mailboxType !== undefined && _mailboxType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _mailboxType, 'mailboxType');
            }
            if (_viewType !== undefined && _viewType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _viewType, 'viewType');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_orderBy !== undefined && _orderBy !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
            }
            if (_direction !== undefined && _direction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v5/employee/conversations" + (queryString ? "?" + queryString : '');
        };
        EmployeeHttpService.prototype.getConversationsCounter = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v5/employee/conversations/counters", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.getConversationsCounterUrl = function () {
            return this.configuration.basePath + "/client-api/v5/employee/conversations/counters";
        };
        EmployeeHttpService.prototype.getConversationsReport = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _startDate = requestParameters["startDate"];
            var _endDate = requestParameters["endDate"];
            var _clientId = requestParameters["clientId"];
            var _clientFullName = requestParameters["clientFullName"];
            var _category = requestParameters["category"];
            var _status = requestParameters["status"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_startDate !== undefined && _startDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
            }
            if (_endDate !== undefined && _endDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
            }
            if (_clientId !== undefined && _clientId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _clientId, 'clientId');
            }
            if (_clientFullName !== undefined && _clientFullName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _clientFullName, 'clientFullName');
            }
            if (_category !== undefined && _category !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _category, 'category');
            }
            if (_status !== undefined && _status !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _status, 'status');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v5/employee/conversations/report", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.getConversationsReportUrl = function (requestParameters) {
            var _startDate = requestParameters["startDate"];
            var _endDate = requestParameters["endDate"];
            var _clientId = requestParameters["clientId"];
            var _clientFullName = requestParameters["clientFullName"];
            var _category = requestParameters["category"];
            var _status = requestParameters["status"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_startDate !== undefined && _startDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
            }
            if (_endDate !== undefined && _endDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
            }
            if (_clientId !== undefined && _clientId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _clientId, 'clientId');
            }
            if (_clientFullName !== undefined && _clientFullName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _clientFullName, 'clientFullName');
            }
            if (_category !== undefined && _category !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _category, 'category');
            }
            if (_status !== undefined && _status !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _status, 'status');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v5/employee/conversations/report" + (queryString ? "?" + queryString : '');
        };
        EmployeeHttpService.prototype.getEmployeeMessageThread = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _messageId = requestParameters["messageId"];
            if (_messageId === null || _messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling getEmployeeMessageThread.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v5/employee/messages/" + encodeURIComponent(String(_messageId)) + "/conversation", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.getEmployeeMessageThreadUrl = function (requestParameters) {
            var _messageId = requestParameters["messageId"];
            if (_messageId === null || _messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling getEmployeeMessageThread.');
            }
            return this.configuration.basePath + "/client-api/v5/employee/messages/" + encodeURIComponent(String(_messageId)) + "/conversation";
        };
        EmployeeHttpService.prototype.getMessageAttachmentEmployee = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _attachmentId = requestParameters["attachmentId"];
            if (_attachmentId === null || _attachmentId === undefined) {
                throw new Error('Required parameter attachmentId was null or undefined when calling getMessageAttachmentEmployee.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/octet-stream',
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v5/employee/attachments/" + encodeURIComponent(String(_attachmentId)), {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.getMessageAttachmentEmployeeUrl = function (requestParameters) {
            var _attachmentId = requestParameters["attachmentId"];
            if (_attachmentId === null || _attachmentId === undefined) {
                throw new Error('Required parameter attachmentId was null or undefined when calling getMessageAttachmentEmployee.');
            }
            return this.configuration.basePath + "/client-api/v5/employee/attachments/" + encodeURIComponent(String(_attachmentId));
        };
        EmployeeHttpService.prototype.getSearchConversations = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _userId = requestParameters["userId"];
            var _topicId = requestParameters["topicId"];
            var _startDate = requestParameters["startDate"];
            var _endDate = requestParameters["endDate"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_userId !== undefined && _userId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
            }
            if (_topicId !== undefined && _topicId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _topicId, 'topicId');
            }
            if (_startDate !== undefined && _startDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
            }
            if (_endDate !== undefined && _endDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v5/employee/conversations/search", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.getSearchConversationsUrl = function (requestParameters) {
            var _userId = requestParameters["userId"];
            var _topicId = requestParameters["topicId"];
            var _startDate = requestParameters["startDate"];
            var _endDate = requestParameters["endDate"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_userId !== undefined && _userId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
            }
            if (_topicId !== undefined && _topicId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _topicId, 'topicId');
            }
            if (_startDate !== undefined && _startDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
            }
            if (_endDate !== undefined && _endDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v5/employee/conversations/search" + (queryString ? "?" + queryString : '');
        };
        EmployeeHttpService.prototype.getSubscriptions = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _topicId = requestParameters["topicId"];
            if (_topicId === null || _topicId === undefined) {
                throw new Error('Required parameter topicId was null or undefined when calling getSubscriptions.');
            }
            var _subscriberName = requestParameters["subscriberName"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_subscriberName !== undefined && _subscriberName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _subscriberName, 'subscriberName');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v5/employee/topics/" + encodeURIComponent(String(_topicId)) + "/subscriptions", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.getSubscriptionsUrl = function (requestParameters) {
            var _topicId = requestParameters["topicId"];
            if (_topicId === null || _topicId === undefined) {
                throw new Error('Required parameter topicId was null or undefined when calling getSubscriptions.');
            }
            var _subscriberName = requestParameters["subscriberName"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_subscriberName !== undefined && _subscriberName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _subscriberName, 'subscriberName');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v5/employee/topics/" + encodeURIComponent(String(_topicId)) + "/subscriptions" + (queryString ? "?" + queryString : '');
        };
        EmployeeHttpService.prototype.getTopic = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _topicId = requestParameters["topicId"];
            if (_topicId === null || _topicId === undefined) {
                throw new Error('Required parameter topicId was null or undefined when calling getTopic.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v5/employee/topics/" + encodeURIComponent(String(_topicId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.getTopicUrl = function (requestParameters) {
            var _topicId = requestParameters["topicId"];
            if (_topicId === null || _topicId === undefined) {
                throw new Error('Required parameter topicId was null or undefined when calling getTopic.');
            }
            return this.configuration.basePath + "/client-api/v5/employee/topics/" + encodeURIComponent(String(_topicId));
        };
        EmployeeHttpService.prototype.getTopicsEmployee = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _subscribed = requestParameters["subscribed"];
            var _deleted = requestParameters["deleted"];
            var _topicType = requestParameters["topicType"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_subscribed !== undefined && _subscribed !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _subscribed, 'subscribed');
            }
            if (_deleted !== undefined && _deleted !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _deleted, 'deleted');
            }
            if (_topicType !== undefined && _topicType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _topicType, 'topicType');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v5/employee/topics", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.getTopicsEmployeeUrl = function (requestParameters) {
            var _subscribed = requestParameters["subscribed"];
            var _deleted = requestParameters["deleted"];
            var _topicType = requestParameters["topicType"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_subscribed !== undefined && _subscribed !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _subscribed, 'subscribed');
            }
            if (_deleted !== undefined && _deleted !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _deleted, 'deleted');
            }
            if (_topicType !== undefined && _topicType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _topicType, 'topicType');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v5/employee/topics" + (queryString ? "?" + queryString : '');
        };
        EmployeeHttpService.prototype.postMessageAttachmentsEmployee = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _attachment = requestParameters["attachment"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'multipart/form-data'
            ];
            var canConsumeForm = this.canConsumeForm(consumes);
            var formParams;
            var useForm = false;
            var convertFormParamsToString = false;
            useForm = canConsumeForm;
            if (useForm) {
                formParams = new FormData();
            }
            else {
                formParams = new i1.HttpParams({ encoder: this.encoder });
            }
            if (_attachment !== undefined) {
                formParams = formParams.append('attachment', _attachment) || formParams;
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v5/employee/attachments", convertFormParamsToString ? formParams.toString() : formParams, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.postMessageAttachmentsEmployeeUrl = function (requestParameters) {
            var _attachment = requestParameters["attachment"];
            return this.configuration.basePath + "/client-api/v5/employee/attachments";
        };
        EmployeeHttpService.prototype.postMessageReplyEmployee = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _messageId = requestParameters["messageId"];
            if (_messageId === null || _messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling postMessageReplyEmployee.');
            }
            var _messageReplyPostRequestBody = requestParameters["messageReplyPostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v5/employee/messages/" + encodeURIComponent(String(_messageId)) + "/reply", _messageReplyPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.postMessageReplyEmployeeUrl = function (requestParameters) {
            var _messageId = requestParameters["messageId"];
            if (_messageId === null || _messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling postMessageReplyEmployee.');
            }
            var _messageReplyPostRequestBody = requestParameters["messageReplyPostRequestBody"];
            return this.configuration.basePath + "/client-api/v5/employee/messages/" + encodeURIComponent(String(_messageId)) + "/reply";
        };
        EmployeeHttpService.prototype.postMessagesEmployee = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _presentationMessageEmployeePostRequestBody = requestParameters["presentationMessageEmployeePostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v5/employee/messages", _presentationMessageEmployeePostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.postMessagesEmployeeUrl = function (requestParameters) {
            var _presentationMessageEmployeePostRequestBody = requestParameters["presentationMessageEmployeePostRequestBody"];
            return this.configuration.basePath + "/client-api/v5/employee/messages";
        };
        EmployeeHttpService.prototype.postSubscribers = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _topicId = requestParameters["topicId"];
            if (_topicId === null || _topicId === undefined) {
                throw new Error('Required parameter topicId was null or undefined when calling postSubscribers.');
            }
            var _subscribersPostRequestBody = requestParameters["subscribersPostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v5/employee/topics/" + encodeURIComponent(String(_topicId)) + "/subscribers", _subscribersPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.postSubscribersUrl = function (requestParameters) {
            var _topicId = requestParameters["topicId"];
            if (_topicId === null || _topicId === undefined) {
                throw new Error('Required parameter topicId was null or undefined when calling postSubscribers.');
            }
            var _subscribersPostRequestBody = requestParameters["subscribersPostRequestBody"];
            return this.configuration.basePath + "/client-api/v5/employee/topics/" + encodeURIComponent(String(_topicId)) + "/subscribers";
        };
        EmployeeHttpService.prototype.postSubscriptions = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _topicId = requestParameters["topicId"];
            if (_topicId === null || _topicId === undefined) {
                throw new Error('Required parameter topicId was null or undefined when calling postSubscriptions.');
            }
            var _subscriptionsPostRequestBody = requestParameters["subscriptionsPostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v5/employee/topics/" + encodeURIComponent(String(_topicId)) + "/subscriptions", _subscriptionsPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.postSubscriptionsUrl = function (requestParameters) {
            var _topicId = requestParameters["topicId"];
            if (_topicId === null || _topicId === undefined) {
                throw new Error('Required parameter topicId was null or undefined when calling postSubscriptions.');
            }
            var _subscriptionsPostRequestBody = requestParameters["subscriptionsPostRequestBody"];
            return this.configuration.basePath + "/client-api/v5/employee/topics/" + encodeURIComponent(String(_topicId)) + "/subscriptions";
        };
        EmployeeHttpService.prototype.postTopics = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _topicsPostRequestBody = requestParameters["topicsPostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v5/employee/topics", _topicsPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.postTopicsUrl = function (requestParameters) {
            var _topicsPostRequestBody = requestParameters["topicsPostRequestBody"];
            return this.configuration.basePath + "/client-api/v5/employee/topics";
        };
        EmployeeHttpService.prototype.putAssignConversation = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _messageId = requestParameters["messageId"];
            if (_messageId === null || _messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling putAssignConversation.');
            }
            var _messageThreadAssignmentRequestBody = requestParameters["messageThreadAssignmentRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v5/employee/messages/" + encodeURIComponent(String(_messageId)) + "/assign", _messageThreadAssignmentRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.putAssignConversationUrl = function (requestParameters) {
            var _messageId = requestParameters["messageId"];
            if (_messageId === null || _messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling putAssignConversation.');
            }
            var _messageThreadAssignmentRequestBody = requestParameters["messageThreadAssignmentRequestBody"];
            return this.configuration.basePath + "/client-api/v5/employee/messages/" + encodeURIComponent(String(_messageId)) + "/assign";
        };
        EmployeeHttpService.prototype.putConversationAssignment = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _messageThreadBulkAssignmentRequestBody = requestParameters["messageThreadBulkAssignmentRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v5/employee/messages/assignment", _messageThreadBulkAssignmentRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.putConversationAssignmentUrl = function (requestParameters) {
            var _messageThreadBulkAssignmentRequestBody = requestParameters["messageThreadBulkAssignmentRequestBody"];
            return this.configuration.basePath + "/client-api/v5/employee/messages/assignment";
        };
        EmployeeHttpService.prototype.putConversationResolution = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _messageId = requestParameters["messageId"];
            if (_messageId === null || _messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling putConversationResolution.');
            }
            var _messageThreadResolutionRequestBody = requestParameters["messageThreadResolutionRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v5/employee/messages/" + encodeURIComponent(String(_messageId)) + "/resolution", _messageThreadResolutionRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.putConversationResolutionUrl = function (requestParameters) {
            var _messageId = requestParameters["messageId"];
            if (_messageId === null || _messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling putConversationResolution.');
            }
            var _messageThreadResolutionRequestBody = requestParameters["messageThreadResolutionRequestBody"];
            return this.configuration.basePath + "/client-api/v5/employee/messages/" + encodeURIComponent(String(_messageId)) + "/resolution";
        };
        EmployeeHttpService.prototype.putConversationResolutionEmployee = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _messageThreadBulkResolutionRequestBody = requestParameters["messageThreadBulkResolutionRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v5/employee/messages/resolution", _messageThreadBulkResolutionRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.putConversationResolutionEmployeeUrl = function (requestParameters) {
            var _messageThreadBulkResolutionRequestBody = requestParameters["messageThreadBulkResolutionRequestBody"];
            return this.configuration.basePath + "/client-api/v5/employee/messages/resolution";
        };
        EmployeeHttpService.prototype.putMarkAsReadUnreadEmployee = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _markAsReadUnreadPutRequestBody = requestParameters["markAsReadUnreadPutRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v5/employee/conversations/read", _markAsReadUnreadPutRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.putMarkAsReadUnreadEmployeeUrl = function (requestParameters) {
            var _markAsReadUnreadPutRequestBody = requestParameters["markAsReadUnreadPutRequestBody"];
            return this.configuration.basePath + "/client-api/v5/employee/conversations/read";
        };
        EmployeeHttpService.prototype.putMessageThreadTopic = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _messageId = requestParameters["messageId"];
            if (_messageId === null || _messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling putMessageThreadTopic.');
            }
            var _updateMessageTopicRequestBody = requestParameters["updateMessageTopicRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v5/employee/messages/" + encodeURIComponent(String(_messageId)) + "/topic", _updateMessageTopicRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.putMessageThreadTopicUrl = function (requestParameters) {
            var _messageId = requestParameters["messageId"];
            if (_messageId === null || _messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling putMessageThreadTopic.');
            }
            var _updateMessageTopicRequestBody = requestParameters["updateMessageTopicRequestBody"];
            return this.configuration.basePath + "/client-api/v5/employee/messages/" + encodeURIComponent(String(_messageId)) + "/topic";
        };
        EmployeeHttpService.prototype.putTopic = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _topicId = requestParameters["topicId"];
            if (_topicId === null || _topicId === undefined) {
                throw new Error('Required parameter topicId was null or undefined when calling putTopic.');
            }
            var _xBBSVCRequestId = requestParameters["xBBSVCRequestId"];
            var _topicPutRequestBody = requestParameters["topicPutRequestBody"];
            var headers = this.defaultHeaders;
            if (_xBBSVCRequestId !== undefined && _xBBSVCRequestId !== null) {
                headers = headers.set('X-BBSVC-Request-Id', String(_xBBSVCRequestId));
            }
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v5/employee/topics/" + encodeURIComponent(String(_topicId)), _topicPutRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EmployeeHttpService.prototype.putTopicUrl = function (requestParameters) {
            var _topicId = requestParameters["topicId"];
            if (_topicId === null || _topicId === undefined) {
                throw new Error('Required parameter topicId was null or undefined when calling putTopic.');
            }
            var _xBBSVCRequestId = requestParameters["xBBSVCRequestId"];
            var _topicPutRequestBody = requestParameters["topicPutRequestBody"];
            return this.configuration.basePath + "/client-api/v5/employee/topics/" + encodeURIComponent(String(_topicId));
        };
        return EmployeeHttpService;
    }());
    EmployeeHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: EmployeeHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: MESSAGES_BASE_PATH, optional: true }, { token: MessagesConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    EmployeeHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: EmployeeHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: EmployeeHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [MESSAGES_BASE_PATH]
                        }] }, { type: MessagesConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var EmployeeHttpServiceDeleteConversationAssignmentMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/messages/assignment",
            method: "DELETE",
            responses: [
                {
                    status: 200,
                    body: {
                        "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"],
                        "unassignedItems": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServiceDeleteMessageAttachmentsEmployeeMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/attachments",
            method: "DELETE",
            responses: [
                {
                    status: 200,
                    body: {
                        "deleted": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                        "failed": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                    }
                },
                {
                    status: 200,
                    body: {
                        "deleted": ["deleted", "deleted"],
                        "additions": {
                            "key": "additions"
                        },
                        "failed": ["failed", "failed"]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServiceDeleteSubscriptionMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/topics/{topicId}/subscriptions/{subscriptionId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: {}
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServiceDeleteTopicMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/topics/{topicId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: {}
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServiceGetConversationThreadsEmployeeMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/conversations",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "assignee": {
                                "fullName": "John Snow",
                                "internalId": "1234-5678-9012-3456",
                                "isRequester": true
                            },
                            "client": {
                                "fullName": "John Doe",
                                "internalId": "97234tyi23rfiy325r3i7r"
                            },
                            "deletable": true,
                            "hasAttachments": true,
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                            "important": false,
                            "read": false,
                            "read-only": false,
                            "sender": {
                                "deleted": false,
                                "id": "97234tyi23rfiy325r3i7r",
                                "name": "John Doe"
                            },
                            "subject": "Application Rejected",
                            "timestamp": "2017-10-02T10:51:30.275+0000",
                            "topic": {
                                "deleted": false,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                                "name": "Savings"
                            }
                        }, {
                            "assignee": {
                                "fullName": "Ned Stark",
                                "internalId": "0987-6543-2109-8765",
                                "isRequester": false
                            },
                            "client": {
                                "fullName": "John Doe",
                                "internalId": "97234tyi23rfiy325r3i7r"
                            },
                            "deletable": true,
                            "hasAttachments": false,
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9",
                            "important": false,
                            "read": true,
                            "read-only": false,
                            "sender": {
                                "deleted": false,
                                "id": "97234tyi23rfiy325r3i8o",
                                "name": "John Snow"
                            },
                            "subject": "Loan Rejected",
                            "timestamp": "2019-01-02T10:51:30.000+0000",
                            "topic": {
                                "deleted": true,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064b7",
                                "name": "Loan rejected"
                            }
                        }, {
                            "assignee": {
                                "fullName": "John Snow",
                                "internalId": "1234-5678-9012-3456",
                                "isRequester": true
                            },
                            "client": {
                                "fullName": "John Doe",
                                "internalId": "97234tyi23rfiy325r3i7r"
                            },
                            "deletable": true,
                            "hasAttachments": false,
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                            "important": true,
                            "read": false,
                            "read-only": false,
                            "sender": {
                                "deleted": false,
                                "id": "97234tyi23rfiy325r3i7r",
                                "name": "John Doe"
                            },
                            "subject": "Important Application",
                            "timestamp": "2017-10-02T10:51:30.000+0000",
                            "topic": {
                                "deleted": false,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                                "name": "Savings"
                            }
                        }]
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServiceGetConversationsCounterMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/conversations/counters",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "unassigned": 2,
                        "unreadAssigned": 5
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServiceGetConversationsReportMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/conversations/report",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "clientUserFullName": "Ned Stark",
                            "clientUserId": "417a289c-5011-4dbc-a3ee-c00ed914f5fe",
                            "rootMessageSentDate": "2021-09-28T12:47:40.000+0000",
                            "lastMessageSentDate": "2021-09-29T13:50:40.000+0000",
                            "status": "NEW",
                            "topic": {
                                "deleted": false,
                                "id": "8e368e8f-f99c-4edb-8edb-b935b97faa60",
                                "name": "Living social deals"
                            },
                            "subject": "Important Application",
                            "bankAssigneeId": "43ca9de8-ac20-43bd-9c7d-bfa9e4ce16f8",
                            "bankAssigneeFullName": "John Snow"
                        }, {
                            "clientUserFullName": "Robert Johnson",
                            "clientUserId": "417a289c-5011-4dbc-a3ee-c00ed914f5fe",
                            "rootMessageSentDate": "2021-10-11T18:24:17.000+0000",
                            "lastMessageSentDate": "2021-10-11T20:27:19.000+0000",
                            "status": "IN_PROGRESS",
                            "topic": {
                                "deleted": false,
                                "id": "96aeb836-d5c1-4303-826c-5424012ba09f",
                                "name": "Prize"
                            },
                            "subject": "Vacation on Mars",
                            "bankAssigneeId": "bc32371a-2c5a-4fd9-b78e-ffe5c95e1a42",
                            "bankAssigneeFullName": "Maria Flores"
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServiceGetEmployeeMessageThreadMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/messages/{messageId}/conversation",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "assignee": {
                            "fullName": "John Snow",
                            "internalId": "1234-5678-9012-3456",
                            "isRequester": true
                        },
                        "attachments": [{
                                "createdAt": "2017-10-02T10:51:50.000+0000",
                                "filename": "message-attachment-filename.pdf",
                                "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                                "size": 2592836
                            }, {
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "filename": "another-message-attachment-filename.pdf",
                                "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                                "size": 15982836
                            }],
                        "deletable": true,
                        "important": true,
                        "messages": [{
                                "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                                "isMyMessage": true,
                                "sender": {
                                    "id": "97234tyi23rfiy325r3i7r",
                                    "name": "John Doe"
                                }
                            }, {
                                "body": "PGRpdj48b2w+PGxpPkNhc3RsZXMgaW4gR3JlYXQgQnJpdGFpbiBhbmQgSXJlbGFuZDxicj48L2xpPjxsaT5MaXN0IG9mIGNhc3RsZXMgaW4gV2FsZXM8YnI+PC9saT48bGk+TGlzdCBvZiBnYXJkZW5zIGluIFdhbGVzPGJyPjwvbGk+PC9vbD48L2Rpdj4=",
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e1",
                                "isMyMessage": false,
                                "sender": {
                                    "id": "97234tyi23rfiy325r3i72",
                                    "name": "John Doe 2"
                                }
                            }, {
                                "attachments": [{
                                        "createdAt": "2017-10-02T10:51:30.000+0000",
                                        "filename": "another-message-attachment-filename.pdf",
                                        "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                                        "size": 15982836
                                    }],
                                "body": "PGRpdj48b2w+PGxpPiA8Yj4iQ2hpcmsgQ2FzdGxlLCBDaGlyayI8L2I+LiBCcml0aXNoIExpc3RlZCBidWlsZGluZ3MuIFJldHJpZXZlZCAyMyBKdWx5IDIwMTUuPGJyPjwvbGk+PGxpPiA8Yj4iQ2hpcmsgQ2FzdGxlIOKAkyBPZmZpY2lhbCBHdWlkZWJvb2siLjwvYj4gQ2FzdGxlIFdhbGVzLjxicj48L2xpPjxsaT4gPGI+IkNoaXJrIENhc3RsZSIuPC9iPiBOYXRpb25hbCBUcnVzdC48YnI+PC9saT48bGk+IDxiPiJUaGUgT2FrIGF0IHRoZSBHYXRlIG9mIHRoZSBEZWFkIjwvYj4uIFBlb3BsZSdzIENvbGxlY3Rpb24gV2FsZXMuIFJldHJpZXZlZCAxIE1hcmNoIDIwMTguPGJyPjwvbGk+PC9vbD48L2Rpdj4=",
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e2",
                                "isMyMessage": true,
                                "sender": {
                                    "id": "97234tyi23rfiy325r3i73",
                                    "name": "John Doe 3"
                                }
                            }, {
                                "attachments": [{
                                        "createdAt": "2017-10-02T10:51:50.000+0000",
                                        "filename": "message-attachment-filename.pdf",
                                        "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                                        "size": 2592836
                                    }],
                                "body": "VGhlIGNhc3RsZSB3YXMgdXNlZCBhcyBhIHNwZWNpYWwgc3RhZ2UgaW4gdGhlIDxiPjIwMTM8L2I+IFdhbGVzIFJhbGx5IEdCLiA8ZGl2PjxpPjxiPjx1Pjxicj48L3U+PC9iPjwvaT48L2Rpdj48ZGl2PjxpPjxiPjx1PlRoZSBPYWsgYXQgdGhlIEdhdGUgb2YgdGhlIERlYWQ8L3U+PC9iPjwvaT4gbGllcyAzMDBtIGZyb20gPGI+Q2hpcmsgQ2FzdGxlPC9iPiBhbmQgbWFya3MgdGhlIHNpdGUgb2YgdGhlIDExNjUgPGI+QmF0dGxlIG9mIENyb2dlbjwvYj4uPC9kaXY+",
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e3",
                                "isMyMessage": false,
                                "sender": {
                                    "id": "97234tyi23rfiy325r3i74",
                                    "name": "John Doe 4"
                                }
                            }],
                        "read": false,
                        "read-only": false,
                        "rootMessageId": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                        "subject": "Application Rejected (your efforts are futile)",
                        "topic": {
                            "deleted": false,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Savings"
                        },
                        "workflowStatus": "NEW"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServiceGetMessageAttachmentEmployeeMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/attachments/{attachmentId}",
            method: "GET",
            responses: [
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServiceGetSearchConversationsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/conversations/search",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "assignee": {
                                "fullName": "John Snow",
                                "internalId": "1234-5678-9012-3456",
                                "isRequester": true
                            },
                            "client": {
                                "fullName": "John Doe",
                                "internalId": "97234tyi23rfiy325r3i7r"
                            },
                            "deletable": true,
                            "hasAttachments": true,
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                            "important": false,
                            "read": false,
                            "read-only": false,
                            "sender": {
                                "deleted": false,
                                "id": "97234tyi23rfiy325r3i7r",
                                "name": "John Doe"
                            },
                            "subject": "Application Rejected",
                            "timestamp": "2017-10-02T10:51:30.275+0000",
                            "topic": {
                                "deleted": false,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                                "name": "Savings"
                            }
                        }, {
                            "assignee": {
                                "fullName": "Ned Stark",
                                "internalId": "0987-6543-2109-8765",
                                "isRequester": false
                            },
                            "client": {
                                "fullName": "John Doe",
                                "internalId": "97234tyi23rfiy325r3i7r"
                            },
                            "deletable": true,
                            "hasAttachments": false,
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9",
                            "important": false,
                            "read": true,
                            "read-only": false,
                            "sender": {
                                "deleted": false,
                                "id": "97234tyi23rfiy325r3i8o",
                                "name": "John Snow"
                            },
                            "subject": "Loan Rejected",
                            "timestamp": "2019-01-02T10:51:30.000+0000",
                            "topic": {
                                "deleted": true,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064b7",
                                "name": "Loan rejected"
                            }
                        }, {
                            "assignee": {
                                "fullName": "John Snow",
                                "internalId": "1234-5678-9012-3456",
                                "isRequester": true
                            },
                            "client": {
                                "fullName": "John Doe",
                                "internalId": "97234tyi23rfiy325r3i7r"
                            },
                            "deletable": true,
                            "hasAttachments": false,
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                            "important": true,
                            "read": false,
                            "read-only": false,
                            "sender": {
                                "deleted": false,
                                "id": "97234tyi23rfiy325r3i7r",
                                "name": "John Doe"
                            },
                            "subject": "Important Application",
                            "timestamp": "2017-10-02T10:51:30.000+0000",
                            "topic": {
                                "deleted": false,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                                "name": "Savings"
                            }
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServiceGetSubscriptionsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/topics/{topicId}/subscriptions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "08ee5037-8dce-43ab-b734-e2b90a189b82",
                            "internalUserId": "03185355-649e-4ab5-97c8-a02555c7a4b2",
                            "subscriberName": "Britney Spears",
                            "subscriptionDate": "2017-08-22T11:07:27.000+0000"
                        }, {
                            "id": "58ee5037-8dce-43ab-b734-e2b90a189b81",
                            "internalUserId": "d462caa4-edfb-4776-a4b4-9f7e5834d2ae",
                            "subscriberName": "Lady Gaga",
                            "subscriptionDate": "2017-08-22T11:07:27.000+0000"
                        }]
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServiceGetTopicMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/topics/{topicId}",
            method: "GET",
            responses: [
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServiceGetTopicsEmployeeMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/topics",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "code": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                            "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                            "mailoutTopic": true,
                            "name": "Mortgage application",
                            "subscribersCount": 21
                        }, {
                            "code": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "mailoutTopic": true,
                            "name": "Loans",
                            "subscribersCount": 102
                        }, {
                            "code": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                            "id": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                            "mailoutTopic": false,
                            "name": "Problems with making a payment",
                            "subscribersCount": 4
                        }]
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServicePostMessageAttachmentsEmployeeMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/attachments",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "createdAt": "2000-01-23T04:56:07.000+00:00",
                        "filename": "filename",
                        "size": 0.8008281904610115,
                        "additions": {
                            "key": "additions"
                        },
                        "id": "id"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var EmployeeHttpServicePostMessageReplyEmployeeMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/messages/{messageId}/reply",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "2ca7990f-bcda-4eba-8763-03bf7c66cf3f"
                    }
                },
                {
                    status: 201,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "id": "id"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServicePostMessagesEmployeeMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/messages",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "2ca7990f-bcda-4eba-8763-03bf7c66cf3f"
                    }
                },
                {
                    status: 201,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "id": "id"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServicePostSubscribersMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/topics/{topicId}/subscribers",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: [{
                            "isSubscribed": true,
                            "subscriberId": "08ee5037-8dce-43ab-b734-e2b90a189b82"
                        }, {
                            "isSubscribed": false,
                            "subscriberId": "58ee5037-8dce-43ab-b734-e2b90a189b81"
                        }]
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServicePostSubscriptionsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/topics/{topicId}/subscriptions",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "79754562-57f6-4cf7-81dc-ec757e4d4c04"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServicePostTopicsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/topics",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "failedSubscriberIds": ["nonExistentId"],
                        "id": "79754562-57f6-4cf7-81dc-ec757e4d4c04",
                        "name": "New topic",
                        "subscribers": ["d462caa4-edfb-4776-a4b4-9f7e5834d2ae", "03185355-649e-4ab5-97c8-a02555c7a4b2"]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServicePutAssignConversationMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/messages/{messageId}/assign",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "fullName": "John Smith",
                        "internalId": "5123-1123-12322",
                        "isRequester": true
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServicePutConversationAssignmentMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/messages/assignment",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "assignedItems": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                        "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"],
                        "fullName": "John Smith",
                        "internalId": "5123-1123-12322",
                        "isRequester": true
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServicePutConversationResolutionMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/messages/{messageId}/resolution",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "resolutionStatus": "RESOLVED"
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServicePutConversationResolutionEmployeeMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/messages/resolution",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"],
                        "resolutionStatus": "RESOLVED",
                        "successfulItems": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServicePutMarkAsReadUnreadEmployeeMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/conversations/read",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "changedItems": ["changedItems", "changedItems"],
                        "failedItems": ["failedItems", "failedItems"]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServicePutMessageThreadTopicMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/messages/{messageId}/topic",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {}
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServicePutTopicMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/topics/{topicId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "code": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                        "id": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                        "name": "Problems with making a payment"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var EmployeeHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v5/employee/messages/assignment",
            method: "DELETE",
            responses: [
                {
                    status: 200,
                    body: {
                        "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"],
                        "unassignedItems": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/attachments",
            method: "DELETE",
            responses: [
                {
                    status: 200,
                    body: {
                        "deleted": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                        "failed": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                    }
                },
                {
                    status: 200,
                    body: {
                        "deleted": ["deleted", "deleted"],
                        "additions": {
                            "key": "additions"
                        },
                        "failed": ["failed", "failed"]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/topics/{topicId}/subscriptions/{subscriptionId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: {}
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/topics/{topicId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: {}
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/conversations",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "assignee": {
                                "fullName": "John Snow",
                                "internalId": "1234-5678-9012-3456",
                                "isRequester": true
                            },
                            "client": {
                                "fullName": "John Doe",
                                "internalId": "97234tyi23rfiy325r3i7r"
                            },
                            "deletable": true,
                            "hasAttachments": true,
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                            "important": false,
                            "read": false,
                            "read-only": false,
                            "sender": {
                                "deleted": false,
                                "id": "97234tyi23rfiy325r3i7r",
                                "name": "John Doe"
                            },
                            "subject": "Application Rejected",
                            "timestamp": "2017-10-02T10:51:30.275+0000",
                            "topic": {
                                "deleted": false,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                                "name": "Savings"
                            }
                        }, {
                            "assignee": {
                                "fullName": "Ned Stark",
                                "internalId": "0987-6543-2109-8765",
                                "isRequester": false
                            },
                            "client": {
                                "fullName": "John Doe",
                                "internalId": "97234tyi23rfiy325r3i7r"
                            },
                            "deletable": true,
                            "hasAttachments": false,
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9",
                            "important": false,
                            "read": true,
                            "read-only": false,
                            "sender": {
                                "deleted": false,
                                "id": "97234tyi23rfiy325r3i8o",
                                "name": "John Snow"
                            },
                            "subject": "Loan Rejected",
                            "timestamp": "2019-01-02T10:51:30.000+0000",
                            "topic": {
                                "deleted": true,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064b7",
                                "name": "Loan rejected"
                            }
                        }, {
                            "assignee": {
                                "fullName": "John Snow",
                                "internalId": "1234-5678-9012-3456",
                                "isRequester": true
                            },
                            "client": {
                                "fullName": "John Doe",
                                "internalId": "97234tyi23rfiy325r3i7r"
                            },
                            "deletable": true,
                            "hasAttachments": false,
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                            "important": true,
                            "read": false,
                            "read-only": false,
                            "sender": {
                                "deleted": false,
                                "id": "97234tyi23rfiy325r3i7r",
                                "name": "John Doe"
                            },
                            "subject": "Important Application",
                            "timestamp": "2017-10-02T10:51:30.000+0000",
                            "topic": {
                                "deleted": false,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                                "name": "Savings"
                            }
                        }]
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/conversations/counters",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "unassigned": 2,
                        "unreadAssigned": 5
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/conversations/report",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "clientUserFullName": "Ned Stark",
                            "clientUserId": "417a289c-5011-4dbc-a3ee-c00ed914f5fe",
                            "rootMessageSentDate": "2021-09-28T12:47:40.000+0000",
                            "lastMessageSentDate": "2021-09-29T13:50:40.000+0000",
                            "status": "NEW",
                            "topic": {
                                "deleted": false,
                                "id": "8e368e8f-f99c-4edb-8edb-b935b97faa60",
                                "name": "Living social deals"
                            },
                            "subject": "Important Application",
                            "bankAssigneeId": "43ca9de8-ac20-43bd-9c7d-bfa9e4ce16f8",
                            "bankAssigneeFullName": "John Snow"
                        }, {
                            "clientUserFullName": "Robert Johnson",
                            "clientUserId": "417a289c-5011-4dbc-a3ee-c00ed914f5fe",
                            "rootMessageSentDate": "2021-10-11T18:24:17.000+0000",
                            "lastMessageSentDate": "2021-10-11T20:27:19.000+0000",
                            "status": "IN_PROGRESS",
                            "topic": {
                                "deleted": false,
                                "id": "96aeb836-d5c1-4303-826c-5424012ba09f",
                                "name": "Prize"
                            },
                            "subject": "Vacation on Mars",
                            "bankAssigneeId": "bc32371a-2c5a-4fd9-b78e-ffe5c95e1a42",
                            "bankAssigneeFullName": "Maria Flores"
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/messages/{messageId}/conversation",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "assignee": {
                            "fullName": "John Snow",
                            "internalId": "1234-5678-9012-3456",
                            "isRequester": true
                        },
                        "attachments": [{
                                "createdAt": "2017-10-02T10:51:50.000+0000",
                                "filename": "message-attachment-filename.pdf",
                                "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                                "size": 2592836
                            }, {
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "filename": "another-message-attachment-filename.pdf",
                                "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                                "size": 15982836
                            }],
                        "deletable": true,
                        "important": true,
                        "messages": [{
                                "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                                "isMyMessage": true,
                                "sender": {
                                    "id": "97234tyi23rfiy325r3i7r",
                                    "name": "John Doe"
                                }
                            }, {
                                "body": "PGRpdj48b2w+PGxpPkNhc3RsZXMgaW4gR3JlYXQgQnJpdGFpbiBhbmQgSXJlbGFuZDxicj48L2xpPjxsaT5MaXN0IG9mIGNhc3RsZXMgaW4gV2FsZXM8YnI+PC9saT48bGk+TGlzdCBvZiBnYXJkZW5zIGluIFdhbGVzPGJyPjwvbGk+PC9vbD48L2Rpdj4=",
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e1",
                                "isMyMessage": false,
                                "sender": {
                                    "id": "97234tyi23rfiy325r3i72",
                                    "name": "John Doe 2"
                                }
                            }, {
                                "attachments": [{
                                        "createdAt": "2017-10-02T10:51:30.000+0000",
                                        "filename": "another-message-attachment-filename.pdf",
                                        "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                                        "size": 15982836
                                    }],
                                "body": "PGRpdj48b2w+PGxpPiA8Yj4iQ2hpcmsgQ2FzdGxlLCBDaGlyayI8L2I+LiBCcml0aXNoIExpc3RlZCBidWlsZGluZ3MuIFJldHJpZXZlZCAyMyBKdWx5IDIwMTUuPGJyPjwvbGk+PGxpPiA8Yj4iQ2hpcmsgQ2FzdGxlIOKAkyBPZmZpY2lhbCBHdWlkZWJvb2siLjwvYj4gQ2FzdGxlIFdhbGVzLjxicj48L2xpPjxsaT4gPGI+IkNoaXJrIENhc3RsZSIuPC9iPiBOYXRpb25hbCBUcnVzdC48YnI+PC9saT48bGk+IDxiPiJUaGUgT2FrIGF0IHRoZSBHYXRlIG9mIHRoZSBEZWFkIjwvYj4uIFBlb3BsZSdzIENvbGxlY3Rpb24gV2FsZXMuIFJldHJpZXZlZCAxIE1hcmNoIDIwMTguPGJyPjwvbGk+PC9vbD48L2Rpdj4=",
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e2",
                                "isMyMessage": true,
                                "sender": {
                                    "id": "97234tyi23rfiy325r3i73",
                                    "name": "John Doe 3"
                                }
                            }, {
                                "attachments": [{
                                        "createdAt": "2017-10-02T10:51:50.000+0000",
                                        "filename": "message-attachment-filename.pdf",
                                        "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                                        "size": 2592836
                                    }],
                                "body": "VGhlIGNhc3RsZSB3YXMgdXNlZCBhcyBhIHNwZWNpYWwgc3RhZ2UgaW4gdGhlIDxiPjIwMTM8L2I+IFdhbGVzIFJhbGx5IEdCLiA8ZGl2PjxpPjxiPjx1Pjxicj48L3U+PC9iPjwvaT48L2Rpdj48ZGl2PjxpPjxiPjx1PlRoZSBPYWsgYXQgdGhlIEdhdGUgb2YgdGhlIERlYWQ8L3U+PC9iPjwvaT4gbGllcyAzMDBtIGZyb20gPGI+Q2hpcmsgQ2FzdGxlPC9iPiBhbmQgbWFya3MgdGhlIHNpdGUgb2YgdGhlIDExNjUgPGI+QmF0dGxlIG9mIENyb2dlbjwvYj4uPC9kaXY+",
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e3",
                                "isMyMessage": false,
                                "sender": {
                                    "id": "97234tyi23rfiy325r3i74",
                                    "name": "John Doe 4"
                                }
                            }],
                        "read": false,
                        "read-only": false,
                        "rootMessageId": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                        "subject": "Application Rejected (your efforts are futile)",
                        "topic": {
                            "deleted": false,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Savings"
                        },
                        "workflowStatus": "NEW"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/attachments/{attachmentId}",
            method: "GET",
            responses: [
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/conversations/search",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "assignee": {
                                "fullName": "John Snow",
                                "internalId": "1234-5678-9012-3456",
                                "isRequester": true
                            },
                            "client": {
                                "fullName": "John Doe",
                                "internalId": "97234tyi23rfiy325r3i7r"
                            },
                            "deletable": true,
                            "hasAttachments": true,
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                            "important": false,
                            "read": false,
                            "read-only": false,
                            "sender": {
                                "deleted": false,
                                "id": "97234tyi23rfiy325r3i7r",
                                "name": "John Doe"
                            },
                            "subject": "Application Rejected",
                            "timestamp": "2017-10-02T10:51:30.275+0000",
                            "topic": {
                                "deleted": false,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                                "name": "Savings"
                            }
                        }, {
                            "assignee": {
                                "fullName": "Ned Stark",
                                "internalId": "0987-6543-2109-8765",
                                "isRequester": false
                            },
                            "client": {
                                "fullName": "John Doe",
                                "internalId": "97234tyi23rfiy325r3i7r"
                            },
                            "deletable": true,
                            "hasAttachments": false,
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9",
                            "important": false,
                            "read": true,
                            "read-only": false,
                            "sender": {
                                "deleted": false,
                                "id": "97234tyi23rfiy325r3i8o",
                                "name": "John Snow"
                            },
                            "subject": "Loan Rejected",
                            "timestamp": "2019-01-02T10:51:30.000+0000",
                            "topic": {
                                "deleted": true,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064b7",
                                "name": "Loan rejected"
                            }
                        }, {
                            "assignee": {
                                "fullName": "John Snow",
                                "internalId": "1234-5678-9012-3456",
                                "isRequester": true
                            },
                            "client": {
                                "fullName": "John Doe",
                                "internalId": "97234tyi23rfiy325r3i7r"
                            },
                            "deletable": true,
                            "hasAttachments": false,
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                            "important": true,
                            "read": false,
                            "read-only": false,
                            "sender": {
                                "deleted": false,
                                "id": "97234tyi23rfiy325r3i7r",
                                "name": "John Doe"
                            },
                            "subject": "Important Application",
                            "timestamp": "2017-10-02T10:51:30.000+0000",
                            "topic": {
                                "deleted": false,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                                "name": "Savings"
                            }
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/topics/{topicId}/subscriptions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "08ee5037-8dce-43ab-b734-e2b90a189b82",
                            "internalUserId": "03185355-649e-4ab5-97c8-a02555c7a4b2",
                            "subscriberName": "Britney Spears",
                            "subscriptionDate": "2017-08-22T11:07:27.000+0000"
                        }, {
                            "id": "58ee5037-8dce-43ab-b734-e2b90a189b81",
                            "internalUserId": "d462caa4-edfb-4776-a4b4-9f7e5834d2ae",
                            "subscriberName": "Lady Gaga",
                            "subscriptionDate": "2017-08-22T11:07:27.000+0000"
                        }]
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/topics/{topicId}",
            method: "GET",
            responses: [
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/topics",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "code": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                            "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                            "mailoutTopic": true,
                            "name": "Mortgage application",
                            "subscribersCount": 21
                        }, {
                            "code": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "mailoutTopic": true,
                            "name": "Loans",
                            "subscribersCount": 102
                        }, {
                            "code": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                            "id": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                            "mailoutTopic": false,
                            "name": "Problems with making a payment",
                            "subscribersCount": 4
                        }]
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/attachments",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "createdAt": "2000-01-23T04:56:07.000+00:00",
                        "filename": "filename",
                        "size": 0.8008281904610115,
                        "additions": {
                            "key": "additions"
                        },
                        "id": "id"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/messages/{messageId}/reply",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "2ca7990f-bcda-4eba-8763-03bf7c66cf3f"
                    }
                },
                {
                    status: 201,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "id": "id"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/messages",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "2ca7990f-bcda-4eba-8763-03bf7c66cf3f"
                    }
                },
                {
                    status: 201,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "id": "id"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/topics/{topicId}/subscribers",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: [{
                            "isSubscribed": true,
                            "subscriberId": "08ee5037-8dce-43ab-b734-e2b90a189b82"
                        }, {
                            "isSubscribed": false,
                            "subscriberId": "58ee5037-8dce-43ab-b734-e2b90a189b81"
                        }]
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/topics/{topicId}/subscriptions",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "79754562-57f6-4cf7-81dc-ec757e4d4c04"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/topics",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "failedSubscriberIds": ["nonExistentId"],
                        "id": "79754562-57f6-4cf7-81dc-ec757e4d4c04",
                        "name": "New topic",
                        "subscribers": ["d462caa4-edfb-4776-a4b4-9f7e5834d2ae", "03185355-649e-4ab5-97c8-a02555c7a4b2"]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/messages/{messageId}/assign",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "fullName": "John Smith",
                        "internalId": "5123-1123-12322",
                        "isRequester": true
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/messages/assignment",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "assignedItems": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                        "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"],
                        "fullName": "John Smith",
                        "internalId": "5123-1123-12322",
                        "isRequester": true
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/messages/{messageId}/resolution",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "resolutionStatus": "RESOLVED"
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/messages/resolution",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"],
                        "resolutionStatus": "RESOLVED",
                        "successfulItems": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/conversations/read",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "changedItems": ["changedItems", "changedItems"],
                        "failedItems": ["failedItems", "failedItems"]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/messages/{messageId}/topic",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {}
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/topics/{topicId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "code": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                        "id": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                        "name": "Problems with making a payment"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    var MailoutHttpService = /** @class */ (function () {
        function MailoutHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new MessagesConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        MailoutHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        MailoutHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        MailoutHttpService.prototype.deleteMailout = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _mailoutId = requestParameters["mailoutId"];
            if (_mailoutId === null || _mailoutId === undefined) {
                throw new Error('Required parameter mailoutId was null or undefined when calling deleteMailout.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v5/employee/mailouts/" + encodeURIComponent(String(_mailoutId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MailoutHttpService.prototype.deleteMailoutUrl = function (requestParameters) {
            var _mailoutId = requestParameters["mailoutId"];
            if (_mailoutId === null || _mailoutId === undefined) {
                throw new Error('Required parameter mailoutId was null or undefined when calling deleteMailout.');
            }
            return this.configuration.basePath + "/client-api/v5/employee/mailouts/" + encodeURIComponent(String(_mailoutId));
        };
        MailoutHttpService.prototype.getMailout = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _mailoutId = requestParameters["mailoutId"];
            if (_mailoutId === null || _mailoutId === undefined) {
                throw new Error('Required parameter mailoutId was null or undefined when calling getMailout.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v5/employee/mailouts/" + encodeURIComponent(String(_mailoutId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MailoutHttpService.prototype.getMailoutUrl = function (requestParameters) {
            var _mailoutId = requestParameters["mailoutId"];
            if (_mailoutId === null || _mailoutId === undefined) {
                throw new Error('Required parameter mailoutId was null or undefined when calling getMailout.');
            }
            return this.configuration.basePath + "/client-api/v5/employee/mailouts/" + encodeURIComponent(String(_mailoutId));
        };
        MailoutHttpService.prototype.getMailouts = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v5/employee/mailouts", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MailoutHttpService.prototype.getMailoutsUrl = function (requestParameters) {
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v5/employee/mailouts" + (queryString ? "?" + queryString : '');
        };
        MailoutHttpService.prototype.postMailout = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _mailoutPostRequestBody = requestParameters["mailoutPostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v5/employee/mailouts", _mailoutPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MailoutHttpService.prototype.postMailoutUrl = function (requestParameters) {
            var _mailoutPostRequestBody = requestParameters["mailoutPostRequestBody"];
            return this.configuration.basePath + "/client-api/v5/employee/mailouts";
        };
        MailoutHttpService.prototype.postMailoutPreview = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _mailoutPreviewRequestBody = requestParameters["mailoutPreviewRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v5/employee/mailouts/preview", _mailoutPreviewRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MailoutHttpService.prototype.postMailoutPreviewUrl = function (requestParameters) {
            var _mailoutPreviewRequestBody = requestParameters["mailoutPreviewRequestBody"];
            return this.configuration.basePath + "/client-api/v5/employee/mailouts/preview";
        };
        return MailoutHttpService;
    }());
    MailoutHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: MailoutHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: MESSAGES_BASE_PATH, optional: true }, { token: MessagesConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MailoutHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: MailoutHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: MailoutHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [MESSAGES_BASE_PATH]
                        }] }, { type: MessagesConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var MailoutHttpServiceDeleteMailoutMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/mailouts/{mailoutId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: {}
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MailoutHttpServiceGetMailoutMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/mailouts/{mailoutId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "attachments": [{
                                "createdAt": "2017-10-02T10:51:50.000+0000",
                                "filename": "message-attachment-filename.pdf",
                                "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                                "size": 2592836
                            }, {
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "filename": "another-message-attachment-filename.pdf",
                                "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                                "size": 15982836
                            }],
                        "body": "PHRhYmxlIHdpZHRoPSIxMDAlIiBib3JkZXI9IjAiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMCI+CiAgPHRyPgogICAgPHRkIGFsaWduPSJjZW50ZXIiIHZhbGlnbj0ibWlkZGxlIiBzdHlsZT0iZm9udC1mYW1pbHk6J0dlb3JnaWEnLCAnVGltZXMgTmV3IFJvbWFuJywgJ1RpbWVzJywgc2VyaWY7IGNvbG9yOiMwMDAwMDA7IGZvbnQtc2l6ZToyNHB4OyBwYWRkaW5nLWJvdHRvbTo1cHgiPgogICAgICA8aT5XZWxjb21lICAke3VzZXJ9CiAgICAgIDwvaT4KICA8dHI+CiAgICA8dGQgYWxpZ249ImxlZnQiIHZhbGlnbj0ibWlkZGxlIiBzdHlsZT0iZm9udC1mYW1pbHk6J0dlb3JnaWEnLCAnVGltZXMgTmV3IFJvbWFuJywgJ1RpbWVzJywgc2VyaWY7IGNvbG9yOiMwMDAwMDA7IGZvbnQtc2l6ZToxNXB4Ij4KICAgICAgdG8gdGhlICR7d29ybGR9IFdvcmxkCiAgICAgIFRoaXMgaXMgb3VyIHdpc2ggZm9yIHlvdS4uLiAke3dpc2h9CiAgPHRyPgo8L3RhYmxlPg==",
                        "deletable": true,
                        "deliveredMessagesNumber": 493,
                        "id": "20a52c18-c4b1-4c1e-8f27-9e0998ff3ef7",
                        "important": false,
                        "initiationDate": "2020-03-04T10:51:30.275+0000",
                        "isBodyHtml": true,
                        "mailoutName": "Happy b-day to users",
                        "readMessagesNumber": 42,
                        "sender": {
                            "id": "3d72a290-00f8-4f65-a16d-65d8f0b29b5a",
                            "name": "John Snow"
                        },
                        "senderDisplayName": "The bank you love",
                        "status": "PROCESSING",
                        "subject": "Happy Birthday!",
                        "topic": {
                            "deleted": false,
                            "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                            "name": "News"
                        },
                        "totalRecipientsCount": 500
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MailoutHttpServiceGetMailoutsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/mailouts",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "20a52c18-c4b1-4c1e-8f27-9e0998ff3ef7",
                            "initiationDate": "2020-03-04T10:51:30.275+0000",
                            "mailoutName": "Happy b-day to users",
                            "senderDisplayName": "The bank you love",
                            "status": "READY",
                            "subject": "Happy Birthday!",
                            "topic": {
                                "deleted": false,
                                "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                                "name": "News"
                            }
                        }, {
                            "id": "122ca40f-1671-4d1d-9925-ca4df3d34617",
                            "initiationDate": "2020-03-02T12:40:30+0000",
                            "senderDisplayName": "The bank you love",
                            "status": "DONE",
                            "subject": "Special proposal",
                            "topic": {
                                "deleted": false,
                                "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                                "name": "News"
                            }
                        }, {
                            "id": "2738c5dd-88fa-436e-abd3-140f53c5cc08",
                            "initiationDate": "2020-03-02T18:30:10+0000",
                            "senderDisplayName": "The bank you love",
                            "status": "ERROR",
                            "subject": "Extended credit limit",
                            "topic": {
                                "deleted": false,
                                "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                                "name": "News"
                            }
                        }, {
                            "id": "6ad3b1f0-d1e8-4c9e-9231-870bac707f21",
                            "initiationDate": "2020-03-01T11:25:30+0000",
                            "senderDisplayName": "The bank you love",
                            "status": "CANCELLED",
                            "subject": "New terms of deposits",
                            "topic": {
                                "deleted": false,
                                "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                                "name": "News"
                            }
                        }, {
                            "id": "0c5bcdee-f76e-4737-b0d1-3c8fc696c86f",
                            "initiationDate": "2020-03-01T11:25:30+0000",
                            "senderDisplayName": "The bank you love",
                            "status": "CANCELLATION_IN_PROCESS",
                            "subject": "New terms of deposits",
                            "topic": {
                                "deleted": false,
                                "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                                "name": "News"
                            }
                        }]
                },
            ]
        }]);
    var MailoutHttpServicePostMailoutMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/mailouts",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "3d72a290-00f8-4f65-a16d-65d8f0b29b5a"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MailoutHttpServicePostMailoutPreviewMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/employee/mailouts/preview",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "body": "PHRhYmxlIHdpZHRoPSIxMDAlIiBib3JkZXI9IjAiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMCI+PHRib2R5Pjx0cj48dGQgYWxpZ249ImNlbnRlciIgdmFsaWduPSJtaWRkbGUiIHN0eWxlPSJmb250LWZhbWlseTomIzM5O2dlb3JnaWEmIzM5OyAsICYjMzk7dGltZXMgbmV3IHJvbWFuJiMzOTsgLCAmIzM5O3RpbWVzJiMzOTsgLCBzZXJpZjtjb2xvcjojMDAwMDAwO2ZvbnQtc2l6ZToyNHB4O3BhZGRpbmctYm90dG9tOjVweCI+CiAgPGk+V2VsY29tZSAgJHt1c2VyfQogIDwvaT4KPC90ZD48L3RyPjx0cj48dGQgYWxpZ249ImxlZnQiIHZhbGlnbj0ibWlkZGxlIiBzdHlsZT0iZm9udC1mYW1pbHk6JiMzOTtnZW9yZ2lhJiMzOTsgLCAmIzM5O3RpbWVzIG5ldyByb21hbiYjMzk7ICwgJiMzOTt0aW1lcyYjMzk7ICwgc2VyaWY7Y29sb3I6IzAwMDAwMDtmb250LXNpemU6MTVweCI+CiAgPHA+dG8gdGhlICR7d29ybGR9IFdvcmxkCiAgICBUaGlzIGlzIG91ciB3aXNoIGZvciB5b3UuLi4gJHt3aXNofQogIDwvcD4KPC90ZD48L3RyPjwvdGJvZHk+PC90YWJsZT4="
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MailoutHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v5/employee/mailouts/{mailoutId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: {}
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/mailouts/{mailoutId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "attachments": [{
                                "createdAt": "2017-10-02T10:51:50.000+0000",
                                "filename": "message-attachment-filename.pdf",
                                "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                                "size": 2592836
                            }, {
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "filename": "another-message-attachment-filename.pdf",
                                "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                                "size": 15982836
                            }],
                        "body": "PHRhYmxlIHdpZHRoPSIxMDAlIiBib3JkZXI9IjAiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMCI+CiAgPHRyPgogICAgPHRkIGFsaWduPSJjZW50ZXIiIHZhbGlnbj0ibWlkZGxlIiBzdHlsZT0iZm9udC1mYW1pbHk6J0dlb3JnaWEnLCAnVGltZXMgTmV3IFJvbWFuJywgJ1RpbWVzJywgc2VyaWY7IGNvbG9yOiMwMDAwMDA7IGZvbnQtc2l6ZToyNHB4OyBwYWRkaW5nLWJvdHRvbTo1cHgiPgogICAgICA8aT5XZWxjb21lICAke3VzZXJ9CiAgICAgIDwvaT4KICA8dHI+CiAgICA8dGQgYWxpZ249ImxlZnQiIHZhbGlnbj0ibWlkZGxlIiBzdHlsZT0iZm9udC1mYW1pbHk6J0dlb3JnaWEnLCAnVGltZXMgTmV3IFJvbWFuJywgJ1RpbWVzJywgc2VyaWY7IGNvbG9yOiMwMDAwMDA7IGZvbnQtc2l6ZToxNXB4Ij4KICAgICAgdG8gdGhlICR7d29ybGR9IFdvcmxkCiAgICAgIFRoaXMgaXMgb3VyIHdpc2ggZm9yIHlvdS4uLiAke3dpc2h9CiAgPHRyPgo8L3RhYmxlPg==",
                        "deletable": true,
                        "deliveredMessagesNumber": 493,
                        "id": "20a52c18-c4b1-4c1e-8f27-9e0998ff3ef7",
                        "important": false,
                        "initiationDate": "2020-03-04T10:51:30.275+0000",
                        "isBodyHtml": true,
                        "mailoutName": "Happy b-day to users",
                        "readMessagesNumber": 42,
                        "sender": {
                            "id": "3d72a290-00f8-4f65-a16d-65d8f0b29b5a",
                            "name": "John Snow"
                        },
                        "senderDisplayName": "The bank you love",
                        "status": "PROCESSING",
                        "subject": "Happy Birthday!",
                        "topic": {
                            "deleted": false,
                            "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                            "name": "News"
                        },
                        "totalRecipientsCount": 500
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/mailouts",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "20a52c18-c4b1-4c1e-8f27-9e0998ff3ef7",
                            "initiationDate": "2020-03-04T10:51:30.275+0000",
                            "mailoutName": "Happy b-day to users",
                            "senderDisplayName": "The bank you love",
                            "status": "READY",
                            "subject": "Happy Birthday!",
                            "topic": {
                                "deleted": false,
                                "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                                "name": "News"
                            }
                        }, {
                            "id": "122ca40f-1671-4d1d-9925-ca4df3d34617",
                            "initiationDate": "2020-03-02T12:40:30+0000",
                            "senderDisplayName": "The bank you love",
                            "status": "DONE",
                            "subject": "Special proposal",
                            "topic": {
                                "deleted": false,
                                "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                                "name": "News"
                            }
                        }, {
                            "id": "2738c5dd-88fa-436e-abd3-140f53c5cc08",
                            "initiationDate": "2020-03-02T18:30:10+0000",
                            "senderDisplayName": "The bank you love",
                            "status": "ERROR",
                            "subject": "Extended credit limit",
                            "topic": {
                                "deleted": false,
                                "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                                "name": "News"
                            }
                        }, {
                            "id": "6ad3b1f0-d1e8-4c9e-9231-870bac707f21",
                            "initiationDate": "2020-03-01T11:25:30+0000",
                            "senderDisplayName": "The bank you love",
                            "status": "CANCELLED",
                            "subject": "New terms of deposits",
                            "topic": {
                                "deleted": false,
                                "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                                "name": "News"
                            }
                        }, {
                            "id": "0c5bcdee-f76e-4737-b0d1-3c8fc696c86f",
                            "initiationDate": "2020-03-01T11:25:30+0000",
                            "senderDisplayName": "The bank you love",
                            "status": "CANCELLATION_IN_PROCESS",
                            "subject": "New terms of deposits",
                            "topic": {
                                "deleted": false,
                                "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                                "name": "News"
                            }
                        }]
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/mailouts",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "3d72a290-00f8-4f65-a16d-65d8f0b29b5a"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/employee/mailouts/preview",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "body": "PHRhYmxlIHdpZHRoPSIxMDAlIiBib3JkZXI9IjAiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMCI+PHRib2R5Pjx0cj48dGQgYWxpZ249ImNlbnRlciIgdmFsaWduPSJtaWRkbGUiIHN0eWxlPSJmb250LWZhbWlseTomIzM5O2dlb3JnaWEmIzM5OyAsICYjMzk7dGltZXMgbmV3IHJvbWFuJiMzOTsgLCAmIzM5O3RpbWVzJiMzOTsgLCBzZXJpZjtjb2xvcjojMDAwMDAwO2ZvbnQtc2l6ZToyNHB4O3BhZGRpbmctYm90dG9tOjVweCI+CiAgPGk+V2VsY29tZSAgJHt1c2VyfQogIDwvaT4KPC90ZD48L3RyPjx0cj48dGQgYWxpZ249ImxlZnQiIHZhbGlnbj0ibWlkZGxlIiBzdHlsZT0iZm9udC1mYW1pbHk6JiMzOTtnZW9yZ2lhJiMzOTsgLCAmIzM5O3RpbWVzIG5ldyByb21hbiYjMzk7ICwgJiMzOTt0aW1lcyYjMzk7ICwgc2VyaWY7Y29sb3I6IzAwMDAwMDtmb250LXNpemU6MTVweCI+CiAgPHA+dG8gdGhlICR7d29ybGR9IFdvcmxkCiAgICBUaGlzIGlzIG91ciB3aXNoIGZvciB5b3UuLi4gJHt3aXNofQogIDwvcD4KPC90ZD48L3RyPjwvdGJvZHk+PC90YWJsZT4="
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    var MessagecenterHttpService = /** @class */ (function () {
        function MessagecenterHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new MessagesConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        MessagecenterHttpService.prototype.canConsumeForm = function (consumes) {
            var e_1, _a;
            var form = 'multipart/form-data';
            try {
                for (var consumes_1 = __values(consumes), consumes_1_1 = consumes_1.next(); !consumes_1_1.done; consumes_1_1 = consumes_1.next()) {
                    var consume = consumes_1_1.value;
                    if (form === consume) {
                        return true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (consumes_1_1 && !consumes_1_1.done && (_a = consumes_1.return)) _a.call(consumes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return false;
        };
        MessagecenterHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        MessagecenterHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        MessagecenterHttpService.prototype.deleteConversationThreads = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _ids = requestParameters["ids"];
            if (_ids === null || _ids === undefined) {
                throw new Error('Required parameter ids was null or undefined when calling deleteConversationThreads.');
            }
            var _xBBSVCRequestId = requestParameters["xBBSVCRequestId"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_ids) {
                _ids.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'ids');
                });
            }
            var headers = this.defaultHeaders;
            if (_xBBSVCRequestId !== undefined && _xBBSVCRequestId !== null) {
                headers = headers.set('X-BBSVC-Request-Id', String(_xBBSVCRequestId));
            }
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v5/message-center/messages/conversations", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MessagecenterHttpService.prototype.deleteConversationThreadsUrl = function (requestParameters) {
            var _this = this;
            var _ids = requestParameters["ids"];
            if (_ids === null || _ids === undefined) {
                throw new Error('Required parameter ids was null or undefined when calling deleteConversationThreads.');
            }
            var _xBBSVCRequestId = requestParameters["xBBSVCRequestId"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_ids) {
                _ids.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'ids');
                });
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v5/message-center/messages/conversations" + (queryString ? "?" + queryString : '');
        };
        MessagecenterHttpService.prototype.deleteMessageAttachments = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _ids = requestParameters["ids"];
            if (_ids === null || _ids === undefined) {
                throw new Error('Required parameter ids was null or undefined when calling deleteMessageAttachments.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_ids) {
                _ids.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'ids');
                });
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v5/message-center/attachments", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MessagecenterHttpService.prototype.deleteMessageAttachmentsUrl = function (requestParameters) {
            var _this = this;
            var _ids = requestParameters["ids"];
            if (_ids === null || _ids === undefined) {
                throw new Error('Required parameter ids was null or undefined when calling deleteMessageAttachments.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_ids) {
                _ids.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'ids');
                });
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v5/message-center/attachments" + (queryString ? "?" + queryString : '');
        };
        MessagecenterHttpService.prototype.deleteMessageDrafts = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _ids = requestParameters["ids"];
            if (_ids === null || _ids === undefined) {
                throw new Error('Required parameter ids was null or undefined when calling deleteMessageDrafts.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_ids) {
                _ids.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'ids');
                });
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v5/message-center/messages/drafts", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MessagecenterHttpService.prototype.deleteMessageDraftsUrl = function (requestParameters) {
            var _this = this;
            var _ids = requestParameters["ids"];
            if (_ids === null || _ids === undefined) {
                throw new Error('Required parameter ids was null or undefined when calling deleteMessageDrafts.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_ids) {
                _ids.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'ids');
                });
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v5/message-center/messages/drafts" + (queryString ? "?" + queryString : '');
        };
        MessagecenterHttpService.prototype.getConversationThreads = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _mailboxType = requestParameters["mailboxType"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _orderBy = requestParameters["orderBy"];
            var _direction = requestParameters["direction"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_mailboxType !== undefined && _mailboxType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _mailboxType, 'mailboxType');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_orderBy !== undefined && _orderBy !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
            }
            if (_direction !== undefined && _direction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v5/message-center/messages/conversations", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MessagecenterHttpService.prototype.getConversationThreadsUrl = function (requestParameters) {
            var _mailboxType = requestParameters["mailboxType"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _orderBy = requestParameters["orderBy"];
            var _direction = requestParameters["direction"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_mailboxType !== undefined && _mailboxType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _mailboxType, 'mailboxType');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_orderBy !== undefined && _orderBy !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
            }
            if (_direction !== undefined && _direction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v5/message-center/messages/conversations" + (queryString ? "?" + queryString : '');
        };
        MessagecenterHttpService.prototype.getMessageAttachment = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _attachmentId = requestParameters["attachmentId"];
            if (_attachmentId === null || _attachmentId === undefined) {
                throw new Error('Required parameter attachmentId was null or undefined when calling getMessageAttachment.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/octet-stream',
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v5/message-center/attachments/" + encodeURIComponent(String(_attachmentId)), {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MessagecenterHttpService.prototype.getMessageAttachmentUrl = function (requestParameters) {
            var _attachmentId = requestParameters["attachmentId"];
            if (_attachmentId === null || _attachmentId === undefined) {
                throw new Error('Required parameter attachmentId was null or undefined when calling getMessageAttachment.');
            }
            return this.configuration.basePath + "/client-api/v5/message-center/attachments/" + encodeURIComponent(String(_attachmentId));
        };
        MessagecenterHttpService.prototype.getMessageDraft = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _draftId = requestParameters["draftId"];
            if (_draftId === null || _draftId === undefined) {
                throw new Error('Required parameter draftId was null or undefined when calling getMessageDraft.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v5/message-center/messages/drafts/" + encodeURIComponent(String(_draftId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MessagecenterHttpService.prototype.getMessageDraftUrl = function (requestParameters) {
            var _draftId = requestParameters["draftId"];
            if (_draftId === null || _draftId === undefined) {
                throw new Error('Required parameter draftId was null or undefined when calling getMessageDraft.');
            }
            return this.configuration.basePath + "/client-api/v5/message-center/messages/drafts/" + encodeURIComponent(String(_draftId));
        };
        MessagecenterHttpService.prototype.getMessageDrafts = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v5/message-center/messages/drafts", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MessagecenterHttpService.prototype.getMessageDraftsUrl = function (requestParameters) {
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v5/message-center/messages/drafts" + (queryString ? "?" + queryString : '');
        };
        MessagecenterHttpService.prototype.getMessageThread = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _messageId = requestParameters["messageId"];
            if (_messageId === null || _messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling getMessageThread.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v5/message-center/messages/" + encodeURIComponent(String(_messageId)) + "/conversation", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MessagecenterHttpService.prototype.getMessageThreadUrl = function (requestParameters) {
            var _messageId = requestParameters["messageId"];
            if (_messageId === null || _messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling getMessageThread.');
            }
            return this.configuration.basePath + "/client-api/v5/message-center/messages/" + encodeURIComponent(String(_messageId)) + "/conversation";
        };
        MessagecenterHttpService.prototype.getTopics = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v5/message-center/topics", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MessagecenterHttpService.prototype.getTopicsUrl = function () {
            return this.configuration.basePath + "/client-api/v5/message-center/topics";
        };
        MessagecenterHttpService.prototype.getUnreadConversationsCount = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v5/message-center/messages/unread-conversation-count", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MessagecenterHttpService.prototype.getUnreadConversationsCountUrl = function () {
            return this.configuration.basePath + "/client-api/v5/message-center/messages/unread-conversation-count";
        };
        MessagecenterHttpService.prototype.postConversationMessageDraft = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _messageId = requestParameters["messageId"];
            if (_messageId === null || _messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling postConversationMessageDraft.');
            }
            var _conversationMessageDraftPostRequestBody = requestParameters["conversationMessageDraftPostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v5/message-center/messages/" + encodeURIComponent(String(_messageId)) + "/conversation/drafts", _conversationMessageDraftPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MessagecenterHttpService.prototype.postConversationMessageDraftUrl = function (requestParameters) {
            var _messageId = requestParameters["messageId"];
            if (_messageId === null || _messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling postConversationMessageDraft.');
            }
            var _conversationMessageDraftPostRequestBody = requestParameters["conversationMessageDraftPostRequestBody"];
            return this.configuration.basePath + "/client-api/v5/message-center/messages/" + encodeURIComponent(String(_messageId)) + "/conversation/drafts";
        };
        MessagecenterHttpService.prototype.postMessageAttachments = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _messageId = requestParameters["messageId"];
            var _attachment = requestParameters["attachment"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_messageId !== undefined && _messageId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _messageId, 'messageId');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'multipart/form-data'
            ];
            var canConsumeForm = this.canConsumeForm(consumes);
            var formParams;
            var useForm = false;
            var convertFormParamsToString = false;
            useForm = canConsumeForm;
            if (useForm) {
                formParams = new FormData();
            }
            else {
                formParams = new i1.HttpParams({ encoder: this.encoder });
            }
            if (_attachment !== undefined) {
                formParams = formParams.append('attachment', _attachment) || formParams;
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v5/message-center/attachments", convertFormParamsToString ? formParams.toString() : formParams, {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MessagecenterHttpService.prototype.postMessageAttachmentsUrl = function (requestParameters) {
            var _messageId = requestParameters["messageId"];
            var _attachment = requestParameters["attachment"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_messageId !== undefined && _messageId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _messageId, 'messageId');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v5/message-center/attachments" + (queryString ? "?" + queryString : '');
        };
        MessagecenterHttpService.prototype.postMessageDrafts = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _messageDraftsPostRequestBody = requestParameters["messageDraftsPostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v5/message-center/messages/drafts", _messageDraftsPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MessagecenterHttpService.prototype.postMessageDraftsUrl = function (requestParameters) {
            var _messageDraftsPostRequestBody = requestParameters["messageDraftsPostRequestBody"];
            return this.configuration.basePath + "/client-api/v5/message-center/messages/drafts";
        };
        MessagecenterHttpService.prototype.postMessageReply = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _messageId = requestParameters["messageId"];
            if (_messageId === null || _messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling postMessageReply.');
            }
            var _messageReplyPostRequestBody = requestParameters["messageReplyPostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v5/message-center/messages/" + encodeURIComponent(String(_messageId)) + "/reply", _messageReplyPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MessagecenterHttpService.prototype.postMessageReplyUrl = function (requestParameters) {
            var _messageId = requestParameters["messageId"];
            if (_messageId === null || _messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling postMessageReply.');
            }
            var _messageReplyPostRequestBody = requestParameters["messageReplyPostRequestBody"];
            return this.configuration.basePath + "/client-api/v5/message-center/messages/" + encodeURIComponent(String(_messageId)) + "/reply";
        };
        MessagecenterHttpService.prototype.postMessages = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _presentationMessagePostRequestBody = requestParameters["presentationMessagePostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v5/message-center/messages", _presentationMessagePostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MessagecenterHttpService.prototype.postMessagesUrl = function (requestParameters) {
            var _presentationMessagePostRequestBody = requestParameters["presentationMessagePostRequestBody"];
            return this.configuration.basePath + "/client-api/v5/message-center/messages";
        };
        MessagecenterHttpService.prototype.putConversationMessageDraft = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _messageId = requestParameters["messageId"];
            if (_messageId === null || _messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling putConversationMessageDraft.');
            }
            var _conversationMessageDraftPutRequestBody = requestParameters["conversationMessageDraftPutRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v5/message-center/messages/" + encodeURIComponent(String(_messageId)) + "/conversation/drafts", _conversationMessageDraftPutRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MessagecenterHttpService.prototype.putConversationMessageDraftUrl = function (requestParameters) {
            var _messageId = requestParameters["messageId"];
            if (_messageId === null || _messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling putConversationMessageDraft.');
            }
            var _conversationMessageDraftPutRequestBody = requestParameters["conversationMessageDraftPutRequestBody"];
            return this.configuration.basePath + "/client-api/v5/message-center/messages/" + encodeURIComponent(String(_messageId)) + "/conversation/drafts";
        };
        MessagecenterHttpService.prototype.putMarkAsReadUnread = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _markAsReadUnreadPutRequestBody = requestParameters["markAsReadUnreadPutRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v5/message-center/messages/conversations/read", _markAsReadUnreadPutRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MessagecenterHttpService.prototype.putMarkAsReadUnreadUrl = function (requestParameters) {
            var _markAsReadUnreadPutRequestBody = requestParameters["markAsReadUnreadPutRequestBody"];
            return this.configuration.basePath + "/client-api/v5/message-center/messages/conversations/read";
        };
        MessagecenterHttpService.prototype.putMessageDraft = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _draftId = requestParameters["draftId"];
            if (_draftId === null || _draftId === undefined) {
                throw new Error('Required parameter draftId was null or undefined when calling putMessageDraft.');
            }
            var _messageDraftPutRequestBody = requestParameters["messageDraftPutRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v5/message-center/messages/drafts/" + encodeURIComponent(String(_draftId)), _messageDraftPutRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        MessagecenterHttpService.prototype.putMessageDraftUrl = function (requestParameters) {
            var _draftId = requestParameters["draftId"];
            if (_draftId === null || _draftId === undefined) {
                throw new Error('Required parameter draftId was null or undefined when calling putMessageDraft.');
            }
            var _messageDraftPutRequestBody = requestParameters["messageDraftPutRequestBody"];
            return this.configuration.basePath + "/client-api/v5/message-center/messages/drafts/" + encodeURIComponent(String(_draftId));
        };
        return MessagecenterHttpService;
    }());
    MessagecenterHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: MessagecenterHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: MESSAGES_BASE_PATH, optional: true }, { token: MessagesConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MessagecenterHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: MessagecenterHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: MessagecenterHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [MESSAGES_BASE_PATH]
                        }] }, { type: MessagesConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var MessagecenterHttpServiceDeleteConversationThreadsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/message-center/messages/conversations",
            method: "DELETE",
            responses: [
                {
                    status: 200,
                    body: {
                        "deletedItems": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                        "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MessagecenterHttpServiceDeleteMessageAttachmentsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/message-center/attachments",
            method: "DELETE",
            responses: [
                {
                    status: 200,
                    body: {
                        "deleted": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                        "failed": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MessagecenterHttpServiceDeleteMessageDraftsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/message-center/messages/drafts",
            method: "DELETE",
            responses: [
                {
                    status: 200,
                    body: {
                        "deleted": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                        "failed": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                    }
                },
            ]
        }]);
    var MessagecenterHttpServiceGetConversationThreadsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/message-center/messages/conversations",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "deletable": true,
                            "hasAttachments": true,
                            "hasDraft": true,
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                            "important": false,
                            "read": false,
                            "read-only": false,
                            "sender": {
                                "deleted": false,
                                "id": "97234tyi23rfiy325r3i7r",
                                "name": "John Doe"
                            },
                            "subject": "Application Rejected",
                            "timestamp": "2017-10-02T10:51:30.000+0000",
                            "topic": {
                                "deleted": false,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                                "name": "Savings"
                            }
                        }, {
                            "deletable": true,
                            "hasAttachments": false,
                            "hasDraft": false,
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9",
                            "important": false,
                            "read": true,
                            "read-only": false,
                            "sender": {
                                "deleted": false,
                                "id": "97234tyi23rfiy325r3i8o",
                                "name": "John Snow"
                            },
                            "subject": "Loan Rejected",
                            "timestamp": "2019-01-02T10:51:30.000+0000",
                            "topic": {
                                "deleted": true,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064b7",
                                "name": "Loan rejected"
                            }
                        }, {
                            "deletable": true,
                            "hasAttachments": true,
                            "hasDraft": false,
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395b7",
                            "important": true,
                            "read": false,
                            "read-only": false,
                            "sender": {
                                "deleted": false,
                                "id": "97234tyi23rfiy325r3i7r",
                                "name": "John Doe"
                            },
                            "subject": "Application Rejected",
                            "timestamp": "2017-10-02T10:51:30.000+0000",
                            "topic": {
                                "deleted": false,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                                "name": "Savings"
                            }
                        }]
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MessagecenterHttpServiceGetMessageAttachmentMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/message-center/attachments/{attachmentId}",
            method: "GET",
            responses: [
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MessagecenterHttpServiceGetMessageDraftMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/message-center/messages/drafts/{draftId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "attachments": [{
                                "createdAt": "2017-10-02T10:51:50.000+0000",
                                "filename": "message-attachment-filename.pdf",
                                "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                                "size": 2592836
                            }, {
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "filename": "another-message-attachment-filename.pdf",
                                "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                                "size": 15982836
                            }],
                        "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                        "id": "754cd7fd-a9dd-489e-9933-4f0ef556a5cd",
                        "subject": "Draft subject",
                        "timestamp": "2019-11-18T10:51:50.000+0000",
                        "topic": {
                            "deleted": false,
                            "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                            "name": "Mortgage application"
                        }
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MessagecenterHttpServiceGetMessageDraftsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/message-center/messages/drafts",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                            "conversationId": "f57684de-2a63-4646-ace3-bf83b3ef74ct",
                            "hasAttachments": false,
                            "id": "7da6b793-bb3b-411d-b10e-21c0ca205cb2",
                            "subject": "Conversation with draft",
                            "timestamp": "2019-11-18T11:23:50.000+0000",
                            "topic": {
                                "deleted": false,
                                "id": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                                "name": "Problems with making a payment"
                            }
                        }, {
                            "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                            "hasAttachments": true,
                            "id": "754cd7fd-a9dd-489e-9933-4f0ef556a5cd",
                            "subject": "Draft subject",
                            "timestamp": "2019-11-17T10:51:50.000+0000",
                            "topic": {
                                "deleted": false,
                                "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                                "name": "Mortgage application"
                            }
                        }, {
                            "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                            "hasAttachments": false,
                            "id": "f57684de-2a63-4646-ace3-bf83b3ef74cc",
                            "subject": "Draft 2 subject",
                            "timestamp": "2019-11-18T11:23:50.000+0000",
                            "topic": {
                                "deleted": false,
                                "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                                "name": "Mortgage application"
                            }
                        }, {
                            "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                            "conversationId": "f57684de-2a63-4646-ace3-bf83b3ef74ce",
                            "hasAttachments": true,
                            "id": "f29d7a93-337b-4bb4-856d-5a65ba4d1038",
                            "subject": "Conversation with draft 2",
                            "timestamp": "2019-11-18T11:23:50.000+0000",
                            "topic": {
                                "deleted": false,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                                "name": "Loans"
                            }
                        }]
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MessagecenterHttpServiceGetMessageThreadMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/message-center/messages/{messageId}/conversation",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "attachments": [{
                                "createdAt": "2017-10-02T10:51:50.000+0000",
                                "filename": "message-attachment-filename.pdf",
                                "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                                "size": 2592836
                            }, {
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "filename": "another-message-attachment-filename.pdf",
                                "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                                "size": 15982836
                            }],
                        "deletable": true,
                        "draft": {
                            "attachments": [{
                                    "createdAt": "2017-10-10T17:21:30.000+0000",
                                    "filename": "draft-message-attachment-filename.pdf",
                                    "id": "1b4e4fa5-51b7-4907-b130-ea4f26e36a3d",
                                    "size": 15982836
                                }],
                            "body": "VGhlIGNhc3RsZSB3YXMgdXNlZCBhcyBhIHNwZWNpYWwgc3RhZ2UgaW4gdGhlIDxiPjIwMTM8L2I+IFdhbGVzIFJhbGx5IEdCLiA8ZGl2PjxpPjxiPjx1Pjxicj48L3U+PC9iPjwvaT48L2Rpdj48ZGl2PjxpPjxiPjx1PlRoZSBPYWsgYXQgdGhlIEdhdGUgb2YgdGhlIERlYWQ8L3U+PC9iPjwvaT4gbGllcyAzMDBtIGZyb20gPGI+Q2hpcmsgQ2FzdGxlPC9iPiBhbmQgbWFya3MgdGhlIHNpdGUgb2YgdGhlIDExNjUgPGI+QmF0dGxlIG9mIENyb2dlbjwvYj4uPC9kaXY+",
                            "createdAt": "2017-10-10T17:51:35.000+0000",
                            "id": "jfg94kf-f4ed-4a6e-bc19-6ennt17395e3"
                        },
                        "important": true,
                        "messages": [{
                                "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                                "isMyMessage": true,
                                "sender": {
                                    "id": "97234tyi23rfiy325r3i7r",
                                    "name": "John Doe"
                                }
                            }, {
                                "body": "PGRpdj48b2w+PGxpPkNhc3RsZXMgaW4gR3JlYXQgQnJpdGFpbiBhbmQgSXJlbGFuZDxicj48L2xpPjxsaT5MaXN0IG9mIGNhc3RsZXMgaW4gV2FsZXM8YnI+PC9saT48bGk+TGlzdCBvZiBnYXJkZW5zIGluIFdhbGVzPGJyPjwvbGk+PC9vbD48L2Rpdj4=",
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e1",
                                "isMyMessage": false,
                                "sender": {
                                    "id": "97234tyi23rfiy325r3i72",
                                    "name": "John Doe 2"
                                }
                            }, {
                                "attachments": [{
                                        "createdAt": "2017-10-02T10:51:50.000+0000",
                                        "filename": "message-attachment-filename.pdf",
                                        "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                                        "size": 2592836
                                    }],
                                "body": "PGRpdj48b2w+PGxpPiA8Yj4iQ2hpcmsgQ2FzdGxlLCBDaGlyayI8L2I+LiBCcml0aXNoIExpc3RlZCBidWlsZGluZ3MuIFJldHJpZXZlZCAyMyBKdWx5IDIwMTUuPGJyPjwvbGk+PGxpPiA8Yj4iQ2hpcmsgQ2FzdGxlIOKAkyBPZmZpY2lhbCBHdWlkZWJvb2siLjwvYj4gQ2FzdGxlIFdhbGVzLjxicj48L2xpPjxsaT4gPGI+IkNoaXJrIENhc3RsZSIuPC9iPiBOYXRpb25hbCBUcnVzdC48YnI+PC9saT48bGk+IDxiPiJUaGUgT2FrIGF0IHRoZSBHYXRlIG9mIHRoZSBEZWFkIjwvYj4uIFBlb3BsZSdzIENvbGxlY3Rpb24gV2FsZXMuIFJldHJpZXZlZCAxIE1hcmNoIDIwMTguPGJyPjwvbGk+PC9vbD48L2Rpdj4=",
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e2",
                                "isMyMessage": true,
                                "sender": {
                                    "id": "97234tyi23rfiy325r3i73",
                                    "name": "John Doe 3"
                                }
                            }, {
                                "attachments": [{
                                        "createdAt": "2017-10-02T10:51:30.000+0000",
                                        "filename": "another-message-attachment-filename.pdf",
                                        "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                                        "size": 15982836
                                    }],
                                "body": "VGhlIGNhc3RsZSB3YXMgdXNlZCBhcyBhIHNwZWNpYWwgc3RhZ2UgaW4gdGhlIDxiPjIwMTM8L2I+IFdhbGVzIFJhbGx5IEdCLiA8ZGl2PjxpPjxiPjx1Pjxicj48L3U+PC9iPjwvaT48L2Rpdj48ZGl2PjxpPjxiPjx1PlRoZSBPYWsgYXQgdGhlIEdhdGUgb2YgdGhlIERlYWQ8L3U+PC9iPjwvaT4gbGllcyAzMDBtIGZyb20gPGI+Q2hpcmsgQ2FzdGxlPC9iPiBhbmQgbWFya3MgdGhlIHNpdGUgb2YgdGhlIDExNjUgPGI+QmF0dGxlIG9mIENyb2dlbjwvYj4uPC9kaXY+",
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e3",
                                "isMyMessage": false,
                                "sender": {
                                    "id": "97234tyi23rfiy325r3i74",
                                    "name": "John Doe 4"
                                }
                            }],
                        "read": false,
                        "read-only": false,
                        "rootMessageId": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                        "subject": "Application Rejected (your efforts are futile)",
                        "topic": {
                            "deleted": false,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Savings"
                        }
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MessagecenterHttpServiceGetTopicsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/message-center/topics",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "code": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                            "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                            "name": "Mortgage application"
                        }, {
                            "code": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Loans"
                        }, {
                            "code": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                            "id": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                            "name": "Problems with making a payment"
                        }]
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MessagecenterHttpServiceGetUnreadConversationsCountMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/message-center/messages/unread-conversation-count",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "unreadCount": 5
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MessagecenterHttpServicePostConversationMessageDraftMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/message-center/messages/{messageId}/conversation/drafts",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "754cd7fd-a9dd-489e-9933-4f0ef556a5cd"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MessagecenterHttpServicePostMessageAttachmentsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/message-center/attachments",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "createdAt": "2017-10-02T10:51:30.000+0000",
                        "filename": "message-attachment-filename.pdf",
                        "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                        "size": 15982836
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var MessagecenterHttpServicePostMessageDraftsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/message-center/messages/drafts",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "754cd7fd-a9dd-489e-9933-4f0ef556a5cd"
                    }
                },
                {
                    status: 201,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "id": "id"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MessagecenterHttpServicePostMessageReplyMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/message-center/messages/{messageId}/reply",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "2ca7990f-bcda-4eba-8763-03bf7c66cf3f"
                    }
                },
                {
                    status: 201,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "id": "id"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MessagecenterHttpServicePostMessagesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/message-center/messages",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "2ca7990f-bcda-4eba-8763-03bf7c66cf3f"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MessagecenterHttpServicePutConversationMessageDraftMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/message-center/messages/{messageId}/conversation/drafts",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {}
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MessagecenterHttpServicePutMarkAsReadUnreadMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/message-center/messages/conversations/read",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "changedItems": ["ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395b7"],
                        "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MessagecenterHttpServicePutMessageDraftMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v5/message-center/messages/drafts/{draftId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {}
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var MessagecenterHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v5/message-center/messages/conversations",
            method: "DELETE",
            responses: [
                {
                    status: 200,
                    body: {
                        "deletedItems": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                        "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/message-center/attachments",
            method: "DELETE",
            responses: [
                {
                    status: 200,
                    body: {
                        "deleted": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                        "failed": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/message-center/messages/drafts",
            method: "DELETE",
            responses: [
                {
                    status: 200,
                    body: {
                        "deleted": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                        "failed": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/message-center/messages/conversations",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "deletable": true,
                            "hasAttachments": true,
                            "hasDraft": true,
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                            "important": false,
                            "read": false,
                            "read-only": false,
                            "sender": {
                                "deleted": false,
                                "id": "97234tyi23rfiy325r3i7r",
                                "name": "John Doe"
                            },
                            "subject": "Application Rejected",
                            "timestamp": "2017-10-02T10:51:30.000+0000",
                            "topic": {
                                "deleted": false,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                                "name": "Savings"
                            }
                        }, {
                            "deletable": true,
                            "hasAttachments": false,
                            "hasDraft": false,
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9",
                            "important": false,
                            "read": true,
                            "read-only": false,
                            "sender": {
                                "deleted": false,
                                "id": "97234tyi23rfiy325r3i8o",
                                "name": "John Snow"
                            },
                            "subject": "Loan Rejected",
                            "timestamp": "2019-01-02T10:51:30.000+0000",
                            "topic": {
                                "deleted": true,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064b7",
                                "name": "Loan rejected"
                            }
                        }, {
                            "deletable": true,
                            "hasAttachments": true,
                            "hasDraft": false,
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395b7",
                            "important": true,
                            "read": false,
                            "read-only": false,
                            "sender": {
                                "deleted": false,
                                "id": "97234tyi23rfiy325r3i7r",
                                "name": "John Doe"
                            },
                            "subject": "Application Rejected",
                            "timestamp": "2017-10-02T10:51:30.000+0000",
                            "topic": {
                                "deleted": false,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                                "name": "Savings"
                            }
                        }]
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/message-center/attachments/{attachmentId}",
            method: "GET",
            responses: [
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/message-center/messages/drafts/{draftId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "attachments": [{
                                "createdAt": "2017-10-02T10:51:50.000+0000",
                                "filename": "message-attachment-filename.pdf",
                                "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                                "size": 2592836
                            }, {
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "filename": "another-message-attachment-filename.pdf",
                                "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                                "size": 15982836
                            }],
                        "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                        "id": "754cd7fd-a9dd-489e-9933-4f0ef556a5cd",
                        "subject": "Draft subject",
                        "timestamp": "2019-11-18T10:51:50.000+0000",
                        "topic": {
                            "deleted": false,
                            "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                            "name": "Mortgage application"
                        }
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/message-center/messages/drafts",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                            "conversationId": "f57684de-2a63-4646-ace3-bf83b3ef74ct",
                            "hasAttachments": false,
                            "id": "7da6b793-bb3b-411d-b10e-21c0ca205cb2",
                            "subject": "Conversation with draft",
                            "timestamp": "2019-11-18T11:23:50.000+0000",
                            "topic": {
                                "deleted": false,
                                "id": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                                "name": "Problems with making a payment"
                            }
                        }, {
                            "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                            "hasAttachments": true,
                            "id": "754cd7fd-a9dd-489e-9933-4f0ef556a5cd",
                            "subject": "Draft subject",
                            "timestamp": "2019-11-17T10:51:50.000+0000",
                            "topic": {
                                "deleted": false,
                                "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                                "name": "Mortgage application"
                            }
                        }, {
                            "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                            "hasAttachments": false,
                            "id": "f57684de-2a63-4646-ace3-bf83b3ef74cc",
                            "subject": "Draft 2 subject",
                            "timestamp": "2019-11-18T11:23:50.000+0000",
                            "topic": {
                                "deleted": false,
                                "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                                "name": "Mortgage application"
                            }
                        }, {
                            "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                            "conversationId": "f57684de-2a63-4646-ace3-bf83b3ef74ce",
                            "hasAttachments": true,
                            "id": "f29d7a93-337b-4bb4-856d-5a65ba4d1038",
                            "subject": "Conversation with draft 2",
                            "timestamp": "2019-11-18T11:23:50.000+0000",
                            "topic": {
                                "deleted": false,
                                "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                                "name": "Loans"
                            }
                        }]
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/message-center/messages/{messageId}/conversation",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "attachments": [{
                                "createdAt": "2017-10-02T10:51:50.000+0000",
                                "filename": "message-attachment-filename.pdf",
                                "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                                "size": 2592836
                            }, {
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "filename": "another-message-attachment-filename.pdf",
                                "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                                "size": 15982836
                            }],
                        "deletable": true,
                        "draft": {
                            "attachments": [{
                                    "createdAt": "2017-10-10T17:21:30.000+0000",
                                    "filename": "draft-message-attachment-filename.pdf",
                                    "id": "1b4e4fa5-51b7-4907-b130-ea4f26e36a3d",
                                    "size": 15982836
                                }],
                            "body": "VGhlIGNhc3RsZSB3YXMgdXNlZCBhcyBhIHNwZWNpYWwgc3RhZ2UgaW4gdGhlIDxiPjIwMTM8L2I+IFdhbGVzIFJhbGx5IEdCLiA8ZGl2PjxpPjxiPjx1Pjxicj48L3U+PC9iPjwvaT48L2Rpdj48ZGl2PjxpPjxiPjx1PlRoZSBPYWsgYXQgdGhlIEdhdGUgb2YgdGhlIERlYWQ8L3U+PC9iPjwvaT4gbGllcyAzMDBtIGZyb20gPGI+Q2hpcmsgQ2FzdGxlPC9iPiBhbmQgbWFya3MgdGhlIHNpdGUgb2YgdGhlIDExNjUgPGI+QmF0dGxlIG9mIENyb2dlbjwvYj4uPC9kaXY+",
                            "createdAt": "2017-10-10T17:51:35.000+0000",
                            "id": "jfg94kf-f4ed-4a6e-bc19-6ennt17395e3"
                        },
                        "important": true,
                        "messages": [{
                                "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                                "isMyMessage": true,
                                "sender": {
                                    "id": "97234tyi23rfiy325r3i7r",
                                    "name": "John Doe"
                                }
                            }, {
                                "body": "PGRpdj48b2w+PGxpPkNhc3RsZXMgaW4gR3JlYXQgQnJpdGFpbiBhbmQgSXJlbGFuZDxicj48L2xpPjxsaT5MaXN0IG9mIGNhc3RsZXMgaW4gV2FsZXM8YnI+PC9saT48bGk+TGlzdCBvZiBnYXJkZW5zIGluIFdhbGVzPGJyPjwvbGk+PC9vbD48L2Rpdj4=",
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e1",
                                "isMyMessage": false,
                                "sender": {
                                    "id": "97234tyi23rfiy325r3i72",
                                    "name": "John Doe 2"
                                }
                            }, {
                                "attachments": [{
                                        "createdAt": "2017-10-02T10:51:50.000+0000",
                                        "filename": "message-attachment-filename.pdf",
                                        "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                                        "size": 2592836
                                    }],
                                "body": "PGRpdj48b2w+PGxpPiA8Yj4iQ2hpcmsgQ2FzdGxlLCBDaGlyayI8L2I+LiBCcml0aXNoIExpc3RlZCBidWlsZGluZ3MuIFJldHJpZXZlZCAyMyBKdWx5IDIwMTUuPGJyPjwvbGk+PGxpPiA8Yj4iQ2hpcmsgQ2FzdGxlIOKAkyBPZmZpY2lhbCBHdWlkZWJvb2siLjwvYj4gQ2FzdGxlIFdhbGVzLjxicj48L2xpPjxsaT4gPGI+IkNoaXJrIENhc3RsZSIuPC9iPiBOYXRpb25hbCBUcnVzdC48YnI+PC9saT48bGk+IDxiPiJUaGUgT2FrIGF0IHRoZSBHYXRlIG9mIHRoZSBEZWFkIjwvYj4uIFBlb3BsZSdzIENvbGxlY3Rpb24gV2FsZXMuIFJldHJpZXZlZCAxIE1hcmNoIDIwMTguPGJyPjwvbGk+PC9vbD48L2Rpdj4=",
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e2",
                                "isMyMessage": true,
                                "sender": {
                                    "id": "97234tyi23rfiy325r3i73",
                                    "name": "John Doe 3"
                                }
                            }, {
                                "attachments": [{
                                        "createdAt": "2017-10-02T10:51:30.000+0000",
                                        "filename": "another-message-attachment-filename.pdf",
                                        "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                                        "size": 15982836
                                    }],
                                "body": "VGhlIGNhc3RsZSB3YXMgdXNlZCBhcyBhIHNwZWNpYWwgc3RhZ2UgaW4gdGhlIDxiPjIwMTM8L2I+IFdhbGVzIFJhbGx5IEdCLiA8ZGl2PjxpPjxiPjx1Pjxicj48L3U+PC9iPjwvaT48L2Rpdj48ZGl2PjxpPjxiPjx1PlRoZSBPYWsgYXQgdGhlIEdhdGUgb2YgdGhlIERlYWQ8L3U+PC9iPjwvaT4gbGllcyAzMDBtIGZyb20gPGI+Q2hpcmsgQ2FzdGxlPC9iPiBhbmQgbWFya3MgdGhlIHNpdGUgb2YgdGhlIDExNjUgPGI+QmF0dGxlIG9mIENyb2dlbjwvYj4uPC9kaXY+",
                                "createdAt": "2017-10-02T10:51:30.000+0000",
                                "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e3",
                                "isMyMessage": false,
                                "sender": {
                                    "id": "97234tyi23rfiy325r3i74",
                                    "name": "John Doe 4"
                                }
                            }],
                        "read": false,
                        "read-only": false,
                        "rootMessageId": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                        "subject": "Application Rejected (your efforts are futile)",
                        "topic": {
                            "deleted": false,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Savings"
                        }
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/message-center/topics",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "code": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                            "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                            "name": "Mortgage application"
                        }, {
                            "code": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Loans"
                        }, {
                            "code": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                            "id": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                            "name": "Problems with making a payment"
                        }]
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/message-center/messages/unread-conversation-count",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "unreadCount": 5
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/message-center/messages/{messageId}/conversation/drafts",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "754cd7fd-a9dd-489e-9933-4f0ef556a5cd"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/message-center/attachments",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "createdAt": "2017-10-02T10:51:30.000+0000",
                        "filename": "message-attachment-filename.pdf",
                        "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                        "size": 15982836
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/message-center/messages/drafts",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "754cd7fd-a9dd-489e-9933-4f0ef556a5cd"
                    }
                },
                {
                    status: 201,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "id": "id"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/message-center/messages/{messageId}/reply",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "2ca7990f-bcda-4eba-8763-03bf7c66cf3f"
                    }
                },
                {
                    status: 201,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "id": "id"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/message-center/messages",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "2ca7990f-bcda-4eba-8763-03bf7c66cf3f"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/message-center/messages/{messageId}/conversation/drafts",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {}
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/message-center/messages/conversations/read",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "changedItems": ["ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395b7"],
                        "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v5/message-center/messages/drafts/{draftId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {}
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.EmployeeHttpService = EmployeeHttpService;
    exports.EmployeeHttpServiceDeleteConversationAssignmentMocksProvider = EmployeeHttpServiceDeleteConversationAssignmentMocksProvider;
    exports.EmployeeHttpServiceDeleteMessageAttachmentsEmployeeMocksProvider = EmployeeHttpServiceDeleteMessageAttachmentsEmployeeMocksProvider;
    exports.EmployeeHttpServiceDeleteSubscriptionMocksProvider = EmployeeHttpServiceDeleteSubscriptionMocksProvider;
    exports.EmployeeHttpServiceDeleteTopicMocksProvider = EmployeeHttpServiceDeleteTopicMocksProvider;
    exports.EmployeeHttpServiceGetConversationThreadsEmployeeMocksProvider = EmployeeHttpServiceGetConversationThreadsEmployeeMocksProvider;
    exports.EmployeeHttpServiceGetConversationsCounterMocksProvider = EmployeeHttpServiceGetConversationsCounterMocksProvider;
    exports.EmployeeHttpServiceGetConversationsReportMocksProvider = EmployeeHttpServiceGetConversationsReportMocksProvider;
    exports.EmployeeHttpServiceGetEmployeeMessageThreadMocksProvider = EmployeeHttpServiceGetEmployeeMessageThreadMocksProvider;
    exports.EmployeeHttpServiceGetMessageAttachmentEmployeeMocksProvider = EmployeeHttpServiceGetMessageAttachmentEmployeeMocksProvider;
    exports.EmployeeHttpServiceGetSearchConversationsMocksProvider = EmployeeHttpServiceGetSearchConversationsMocksProvider;
    exports.EmployeeHttpServiceGetSubscriptionsMocksProvider = EmployeeHttpServiceGetSubscriptionsMocksProvider;
    exports.EmployeeHttpServiceGetTopicMocksProvider = EmployeeHttpServiceGetTopicMocksProvider;
    exports.EmployeeHttpServiceGetTopicsEmployeeMocksProvider = EmployeeHttpServiceGetTopicsEmployeeMocksProvider;
    exports.EmployeeHttpServiceMocksProvider = EmployeeHttpServiceMocksProvider;
    exports.EmployeeHttpServicePostMessageAttachmentsEmployeeMocksProvider = EmployeeHttpServicePostMessageAttachmentsEmployeeMocksProvider;
    exports.EmployeeHttpServicePostMessageReplyEmployeeMocksProvider = EmployeeHttpServicePostMessageReplyEmployeeMocksProvider;
    exports.EmployeeHttpServicePostMessagesEmployeeMocksProvider = EmployeeHttpServicePostMessagesEmployeeMocksProvider;
    exports.EmployeeHttpServicePostSubscribersMocksProvider = EmployeeHttpServicePostSubscribersMocksProvider;
    exports.EmployeeHttpServicePostSubscriptionsMocksProvider = EmployeeHttpServicePostSubscriptionsMocksProvider;
    exports.EmployeeHttpServicePostTopicsMocksProvider = EmployeeHttpServicePostTopicsMocksProvider;
    exports.EmployeeHttpServicePutAssignConversationMocksProvider = EmployeeHttpServicePutAssignConversationMocksProvider;
    exports.EmployeeHttpServicePutConversationAssignmentMocksProvider = EmployeeHttpServicePutConversationAssignmentMocksProvider;
    exports.EmployeeHttpServicePutConversationResolutionEmployeeMocksProvider = EmployeeHttpServicePutConversationResolutionEmployeeMocksProvider;
    exports.EmployeeHttpServicePutConversationResolutionMocksProvider = EmployeeHttpServicePutConversationResolutionMocksProvider;
    exports.EmployeeHttpServicePutMarkAsReadUnreadEmployeeMocksProvider = EmployeeHttpServicePutMarkAsReadUnreadEmployeeMocksProvider;
    exports.EmployeeHttpServicePutMessageThreadTopicMocksProvider = EmployeeHttpServicePutMessageThreadTopicMocksProvider;
    exports.EmployeeHttpServicePutTopicMocksProvider = EmployeeHttpServicePutTopicMocksProvider;
    exports.MESSAGES_BASE_PATH = MESSAGES_BASE_PATH;
    exports.MailoutHttpService = MailoutHttpService;
    exports.MailoutHttpServiceDeleteMailoutMocksProvider = MailoutHttpServiceDeleteMailoutMocksProvider;
    exports.MailoutHttpServiceGetMailoutMocksProvider = MailoutHttpServiceGetMailoutMocksProvider;
    exports.MailoutHttpServiceGetMailoutsMocksProvider = MailoutHttpServiceGetMailoutsMocksProvider;
    exports.MailoutHttpServiceMocksProvider = MailoutHttpServiceMocksProvider;
    exports.MailoutHttpServicePostMailoutMocksProvider = MailoutHttpServicePostMailoutMocksProvider;
    exports.MailoutHttpServicePostMailoutPreviewMocksProvider = MailoutHttpServicePostMailoutPreviewMocksProvider;
    exports.MailoutStatus = MailoutStatus;
    exports.MessagecenterHttpService = MessagecenterHttpService;
    exports.MessagecenterHttpServiceDeleteConversationThreadsMocksProvider = MessagecenterHttpServiceDeleteConversationThreadsMocksProvider;
    exports.MessagecenterHttpServiceDeleteMessageAttachmentsMocksProvider = MessagecenterHttpServiceDeleteMessageAttachmentsMocksProvider;
    exports.MessagecenterHttpServiceDeleteMessageDraftsMocksProvider = MessagecenterHttpServiceDeleteMessageDraftsMocksProvider;
    exports.MessagecenterHttpServiceGetConversationThreadsMocksProvider = MessagecenterHttpServiceGetConversationThreadsMocksProvider;
    exports.MessagecenterHttpServiceGetMessageAttachmentMocksProvider = MessagecenterHttpServiceGetMessageAttachmentMocksProvider;
    exports.MessagecenterHttpServiceGetMessageDraftMocksProvider = MessagecenterHttpServiceGetMessageDraftMocksProvider;
    exports.MessagecenterHttpServiceGetMessageDraftsMocksProvider = MessagecenterHttpServiceGetMessageDraftsMocksProvider;
    exports.MessagecenterHttpServiceGetMessageThreadMocksProvider = MessagecenterHttpServiceGetMessageThreadMocksProvider;
    exports.MessagecenterHttpServiceGetTopicsMocksProvider = MessagecenterHttpServiceGetTopicsMocksProvider;
    exports.MessagecenterHttpServiceGetUnreadConversationsCountMocksProvider = MessagecenterHttpServiceGetUnreadConversationsCountMocksProvider;
    exports.MessagecenterHttpServiceMocksProvider = MessagecenterHttpServiceMocksProvider;
    exports.MessagecenterHttpServicePostConversationMessageDraftMocksProvider = MessagecenterHttpServicePostConversationMessageDraftMocksProvider;
    exports.MessagecenterHttpServicePostMessageAttachmentsMocksProvider = MessagecenterHttpServicePostMessageAttachmentsMocksProvider;
    exports.MessagecenterHttpServicePostMessageDraftsMocksProvider = MessagecenterHttpServicePostMessageDraftsMocksProvider;
    exports.MessagecenterHttpServicePostMessageReplyMocksProvider = MessagecenterHttpServicePostMessageReplyMocksProvider;
    exports.MessagecenterHttpServicePostMessagesMocksProvider = MessagecenterHttpServicePostMessagesMocksProvider;
    exports.MessagecenterHttpServicePutConversationMessageDraftMocksProvider = MessagecenterHttpServicePutConversationMessageDraftMocksProvider;
    exports.MessagecenterHttpServicePutMarkAsReadUnreadMocksProvider = MessagecenterHttpServicePutMarkAsReadUnreadMocksProvider;
    exports.MessagecenterHttpServicePutMessageDraftMocksProvider = MessagecenterHttpServicePutMessageDraftMocksProvider;
    exports.MessagesApiModule = MessagesApiModule;
    exports.MessagesConfiguration = MessagesConfiguration;
    exports.WorkflowStatus = WorkflowStatus;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-messages-v5-http-ang.umd.js.map
