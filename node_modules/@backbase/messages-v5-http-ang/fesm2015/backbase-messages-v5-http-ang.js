import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const MailoutStatus = {
    CREATED: 'CREATED',
    PREPARING: 'PREPARING',
    READY: 'READY',
    PROCESSING: 'PROCESSING',
    DONE: 'DONE',
    ERROR: 'ERROR',
    CANCELLATIONINPROCESS: 'CANCELLATION_IN_PROCESS',
    CANCELLED: 'CANCELLED'
};

var MarkAsReadUnreadPutRequestBody;
(function (MarkAsReadUnreadPutRequestBody) {
    MarkAsReadUnreadPutRequestBody.StatusEnum = {
        READ: 'READ',
        UNREAD: 'UNREAD'
    };
})(MarkAsReadUnreadPutRequestBody || (MarkAsReadUnreadPutRequestBody = {}));

const WorkflowStatus = {
    NEW: 'NEW',
    INPROGRESS: 'IN_PROGRESS',
    RESOLVED: 'RESOLVED'
};

const MESSAGES_BASE_PATH = new InjectionToken('MESSAGES_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class MessagesConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module MessagesConfiguration');

class MessagesApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('MessagesApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: MessagesApiModule,
            providers: [{ provide: MessagesConfiguration, useFactory: configurationFactory }]
        };
    }
}
MessagesApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: MessagesApiModule, deps: [{ token: MessagesApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: MessagesConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
MessagesApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: MessagesApiModule });
MessagesApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: MessagesApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: MessagesApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: MessagesApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: MessagesConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class EmployeeHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new MessagesConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    canConsumeForm(consumes) {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteConversationAssignment(requestParameters, observe = 'body', reportProgress = false, options) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteConversationAssignment.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v5/employee/messages/assignment`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteConversationAssignmentUrl(requestParameters) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteConversationAssignment.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/employee/messages/assignment${queryString ? `?${queryString}` : ''}`;
    }
    deleteMessageAttachmentsEmployee(requestParameters, observe = 'body', reportProgress = false, options) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteMessageAttachmentsEmployee.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v5/employee/attachments`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteMessageAttachmentsEmployeeUrl(requestParameters) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteMessageAttachmentsEmployee.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/employee/attachments${queryString ? `?${queryString}` : ''}`;
    }
    deleteSubscription(requestParameters, observe = 'body', reportProgress = false, options) {
        const _subscriptionId = requestParameters["subscriptionId"];
        if (_subscriptionId === null || _subscriptionId === undefined) {
            throw new Error('Required parameter subscriptionId was null or undefined when calling deleteSubscription.');
        }
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling deleteSubscription.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}/subscriptions/${encodeURIComponent(String(_subscriptionId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteSubscriptionUrl(requestParameters) {
        const _subscriptionId = requestParameters["subscriptionId"];
        if (_subscriptionId === null || _subscriptionId === undefined) {
            throw new Error('Required parameter subscriptionId was null or undefined when calling deleteSubscription.');
        }
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling deleteSubscription.');
        }
        return `${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}/subscriptions/${encodeURIComponent(String(_subscriptionId))}`;
    }
    deleteTopic(requestParameters, observe = 'body', reportProgress = false, options) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling deleteTopic.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteTopicUrl(requestParameters) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling deleteTopic.');
        }
        return `${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}`;
    }
    getConversationThreadsEmployee(requestParameters, observe = 'body', reportProgress = false, options) {
        const _mailboxType = requestParameters["mailboxType"];
        const _viewType = requestParameters["viewType"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_mailboxType !== undefined && _mailboxType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _mailboxType, 'mailboxType');
        }
        if (_viewType !== undefined && _viewType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _viewType, 'viewType');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/conversations`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getConversationThreadsEmployeeUrl(requestParameters) {
        const _mailboxType = requestParameters["mailboxType"];
        const _viewType = requestParameters["viewType"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_mailboxType !== undefined && _mailboxType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _mailboxType, 'mailboxType');
        }
        if (_viewType !== undefined && _viewType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _viewType, 'viewType');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/employee/conversations${queryString ? `?${queryString}` : ''}`;
    }
    getConversationsCounter(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/conversations/counters`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getConversationsCounterUrl() {
        return `${this.configuration.basePath}/client-api/v5/employee/conversations/counters`;
    }
    getConversationsReport(requestParameters, observe = 'body', reportProgress = false, options) {
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _clientId = requestParameters["clientId"];
        const _clientFullName = requestParameters["clientFullName"];
        const _category = requestParameters["category"];
        const _status = requestParameters["status"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_clientId !== undefined && _clientId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _clientId, 'clientId');
        }
        if (_clientFullName !== undefined && _clientFullName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _clientFullName, 'clientFullName');
        }
        if (_category !== undefined && _category !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _category, 'category');
        }
        if (_status !== undefined && _status !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _status, 'status');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/conversations/report`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getConversationsReportUrl(requestParameters) {
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _clientId = requestParameters["clientId"];
        const _clientFullName = requestParameters["clientFullName"];
        const _category = requestParameters["category"];
        const _status = requestParameters["status"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_clientId !== undefined && _clientId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _clientId, 'clientId');
        }
        if (_clientFullName !== undefined && _clientFullName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _clientFullName, 'clientFullName');
        }
        if (_category !== undefined && _category !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _category, 'category');
        }
        if (_status !== undefined && _status !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _status, 'status');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/employee/conversations/report${queryString ? `?${queryString}` : ''}`;
    }
    getEmployeeMessageThread(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling getEmployeeMessageThread.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/conversation`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getEmployeeMessageThreadUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling getEmployeeMessageThread.');
        }
        return `${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/conversation`;
    }
    getMessageAttachmentEmployee(requestParameters, observe = 'body', reportProgress = false, options) {
        const _attachmentId = requestParameters["attachmentId"];
        if (_attachmentId === null || _attachmentId === undefined) {
            throw new Error('Required parameter attachmentId was null or undefined when calling getMessageAttachmentEmployee.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/octet-stream',
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/attachments/${encodeURIComponent(String(_attachmentId))}`, {
            responseType: "blob",
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getMessageAttachmentEmployeeUrl(requestParameters) {
        const _attachmentId = requestParameters["attachmentId"];
        if (_attachmentId === null || _attachmentId === undefined) {
            throw new Error('Required parameter attachmentId was null or undefined when calling getMessageAttachmentEmployee.');
        }
        return `${this.configuration.basePath}/client-api/v5/employee/attachments/${encodeURIComponent(String(_attachmentId))}`;
    }
    getSearchConversations(requestParameters, observe = 'body', reportProgress = false, options) {
        const _userId = requestParameters["userId"];
        const _topicId = requestParameters["topicId"];
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_userId !== undefined && _userId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
        }
        if (_topicId !== undefined && _topicId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _topicId, 'topicId');
        }
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/conversations/search`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getSearchConversationsUrl(requestParameters) {
        const _userId = requestParameters["userId"];
        const _topicId = requestParameters["topicId"];
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_userId !== undefined && _userId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
        }
        if (_topicId !== undefined && _topicId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _topicId, 'topicId');
        }
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/employee/conversations/search${queryString ? `?${queryString}` : ''}`;
    }
    getSubscriptions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling getSubscriptions.');
        }
        const _subscriberName = requestParameters["subscriberName"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_subscriberName !== undefined && _subscriberName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _subscriberName, 'subscriberName');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}/subscriptions`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getSubscriptionsUrl(requestParameters) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling getSubscriptions.');
        }
        const _subscriberName = requestParameters["subscriberName"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_subscriberName !== undefined && _subscriberName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _subscriberName, 'subscriberName');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}/subscriptions${queryString ? `?${queryString}` : ''}`;
    }
    getTopic(requestParameters, observe = 'body', reportProgress = false, options) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling getTopic.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getTopicUrl(requestParameters) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling getTopic.');
        }
        return `${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}`;
    }
    getTopicsEmployee(requestParameters, observe = 'body', reportProgress = false, options) {
        const _subscribed = requestParameters["subscribed"];
        const _deleted = requestParameters["deleted"];
        const _topicType = requestParameters["topicType"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_subscribed !== undefined && _subscribed !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _subscribed, 'subscribed');
        }
        if (_deleted !== undefined && _deleted !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _deleted, 'deleted');
        }
        if (_topicType !== undefined && _topicType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _topicType, 'topicType');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/topics`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getTopicsEmployeeUrl(requestParameters) {
        const _subscribed = requestParameters["subscribed"];
        const _deleted = requestParameters["deleted"];
        const _topicType = requestParameters["topicType"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_subscribed !== undefined && _subscribed !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _subscribed, 'subscribed');
        }
        if (_deleted !== undefined && _deleted !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _deleted, 'deleted');
        }
        if (_topicType !== undefined && _topicType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _topicType, 'topicType');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/employee/topics${queryString ? `?${queryString}` : ''}`;
    }
    postMessageAttachmentsEmployee(requestParameters, observe = 'body', reportProgress = false, options) {
        const _attachment = requestParameters["attachment"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'multipart/form-data'
        ];
        const canConsumeForm = this.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        let convertFormParamsToString = false;
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new HttpParams({ encoder: this.encoder });
        }
        if (_attachment !== undefined) {
            formParams = formParams.append('attachment', _attachment) || formParams;
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/employee/attachments`, convertFormParamsToString ? formParams.toString() : formParams, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postMessageAttachmentsEmployeeUrl(requestParameters) {
        const _attachment = requestParameters["attachment"];
        return `${this.configuration.basePath}/client-api/v5/employee/attachments`;
    }
    postMessageReplyEmployee(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling postMessageReplyEmployee.');
        }
        const _messageReplyPostRequestBody = requestParameters["messageReplyPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/reply`, _messageReplyPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postMessageReplyEmployeeUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling postMessageReplyEmployee.');
        }
        const _messageReplyPostRequestBody = requestParameters["messageReplyPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/reply`;
    }
    postMessagesEmployee(requestParameters, observe = 'body', reportProgress = false, options) {
        const _presentationMessageEmployeePostRequestBody = requestParameters["presentationMessageEmployeePostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/employee/messages`, _presentationMessageEmployeePostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postMessagesEmployeeUrl(requestParameters) {
        const _presentationMessageEmployeePostRequestBody = requestParameters["presentationMessageEmployeePostRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/messages`;
    }
    postSubscribers(requestParameters, observe = 'body', reportProgress = false, options) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling postSubscribers.');
        }
        const _subscribersPostRequestBody = requestParameters["subscribersPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}/subscribers`, _subscribersPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postSubscribersUrl(requestParameters) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling postSubscribers.');
        }
        const _subscribersPostRequestBody = requestParameters["subscribersPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}/subscribers`;
    }
    postSubscriptions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling postSubscriptions.');
        }
        const _subscriptionsPostRequestBody = requestParameters["subscriptionsPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}/subscriptions`, _subscriptionsPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postSubscriptionsUrl(requestParameters) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling postSubscriptions.');
        }
        const _subscriptionsPostRequestBody = requestParameters["subscriptionsPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}/subscriptions`;
    }
    postTopics(requestParameters, observe = 'body', reportProgress = false, options) {
        const _topicsPostRequestBody = requestParameters["topicsPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/employee/topics`, _topicsPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postTopicsUrl(requestParameters) {
        const _topicsPostRequestBody = requestParameters["topicsPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/topics`;
    }
    putAssignConversation(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling putAssignConversation.');
        }
        const _messageThreadAssignmentRequestBody = requestParameters["messageThreadAssignmentRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/assign`, _messageThreadAssignmentRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putAssignConversationUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling putAssignConversation.');
        }
        const _messageThreadAssignmentRequestBody = requestParameters["messageThreadAssignmentRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/assign`;
    }
    putConversationAssignment(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageThreadBulkAssignmentRequestBody = requestParameters["messageThreadBulkAssignmentRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v5/employee/messages/assignment`, _messageThreadBulkAssignmentRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putConversationAssignmentUrl(requestParameters) {
        const _messageThreadBulkAssignmentRequestBody = requestParameters["messageThreadBulkAssignmentRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/messages/assignment`;
    }
    putConversationResolution(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling putConversationResolution.');
        }
        const _messageThreadResolutionRequestBody = requestParameters["messageThreadResolutionRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/resolution`, _messageThreadResolutionRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putConversationResolutionUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling putConversationResolution.');
        }
        const _messageThreadResolutionRequestBody = requestParameters["messageThreadResolutionRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/resolution`;
    }
    putConversationResolutionEmployee(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageThreadBulkResolutionRequestBody = requestParameters["messageThreadBulkResolutionRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v5/employee/messages/resolution`, _messageThreadBulkResolutionRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putConversationResolutionEmployeeUrl(requestParameters) {
        const _messageThreadBulkResolutionRequestBody = requestParameters["messageThreadBulkResolutionRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/messages/resolution`;
    }
    putMarkAsReadUnreadEmployee(requestParameters, observe = 'body', reportProgress = false, options) {
        const _markAsReadUnreadPutRequestBody = requestParameters["markAsReadUnreadPutRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v5/employee/conversations/read`, _markAsReadUnreadPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putMarkAsReadUnreadEmployeeUrl(requestParameters) {
        const _markAsReadUnreadPutRequestBody = requestParameters["markAsReadUnreadPutRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/conversations/read`;
    }
    putMessageThreadTopic(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling putMessageThreadTopic.');
        }
        const _updateMessageTopicRequestBody = requestParameters["updateMessageTopicRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/topic`, _updateMessageTopicRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putMessageThreadTopicUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling putMessageThreadTopic.');
        }
        const _updateMessageTopicRequestBody = requestParameters["updateMessageTopicRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/messages/${encodeURIComponent(String(_messageId))}/topic`;
    }
    putTopic(requestParameters, observe = 'body', reportProgress = false, options) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling putTopic.');
        }
        const _xBBSVCRequestId = requestParameters["xBBSVCRequestId"];
        const _topicPutRequestBody = requestParameters["topicPutRequestBody"];
        let headers = this.defaultHeaders;
        if (_xBBSVCRequestId !== undefined && _xBBSVCRequestId !== null) {
            headers = headers.set('X-BBSVC-Request-Id', String(_xBBSVCRequestId));
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}`, _topicPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putTopicUrl(requestParameters) {
        const _topicId = requestParameters["topicId"];
        if (_topicId === null || _topicId === undefined) {
            throw new Error('Required parameter topicId was null or undefined when calling putTopic.');
        }
        const _xBBSVCRequestId = requestParameters["xBBSVCRequestId"];
        const _topicPutRequestBody = requestParameters["topicPutRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/topics/${encodeURIComponent(String(_topicId))}`;
    }
}
EmployeeHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EmployeeHttpService, deps: [{ token: i1.HttpClient }, { token: MESSAGES_BASE_PATH, optional: true }, { token: MessagesConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
EmployeeHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EmployeeHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EmployeeHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MESSAGES_BASE_PATH]
                }] }, { type: MessagesConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const EmployeeHttpServiceDeleteConversationAssignmentMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/messages/assignment",
        method: "DELETE",
        responses: [
            {
                status: 200,
                body: {
                    "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"],
                    "unassignedItems": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServiceDeleteMessageAttachmentsEmployeeMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/attachments",
        method: "DELETE",
        responses: [
            {
                status: 200,
                body: {
                    "deleted": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                    "failed": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                }
            },
            {
                status: 200,
                body: {
                    "deleted": ["deleted", "deleted"],
                    "additions": {
                        "key": "additions"
                    },
                    "failed": ["failed", "failed"]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServiceDeleteSubscriptionMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/topics/{topicId}/subscriptions/{subscriptionId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: {}
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServiceDeleteTopicMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/topics/{topicId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: {}
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServiceGetConversationThreadsEmployeeMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/conversations",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "assignee": {
                            "fullName": "John Snow",
                            "internalId": "1234-5678-9012-3456",
                            "isRequester": true
                        },
                        "client": {
                            "fullName": "John Doe",
                            "internalId": "97234tyi23rfiy325r3i7r"
                        },
                        "deletable": true,
                        "hasAttachments": true,
                        "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                        "important": false,
                        "read": false,
                        "read-only": false,
                        "sender": {
                            "deleted": false,
                            "id": "97234tyi23rfiy325r3i7r",
                            "name": "John Doe"
                        },
                        "subject": "Application Rejected",
                        "timestamp": "2017-10-02T10:51:30.275+0000",
                        "topic": {
                            "deleted": false,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Savings"
                        }
                    }, {
                        "assignee": {
                            "fullName": "Ned Stark",
                            "internalId": "0987-6543-2109-8765",
                            "isRequester": false
                        },
                        "client": {
                            "fullName": "John Doe",
                            "internalId": "97234tyi23rfiy325r3i7r"
                        },
                        "deletable": true,
                        "hasAttachments": false,
                        "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9",
                        "important": false,
                        "read": true,
                        "read-only": false,
                        "sender": {
                            "deleted": false,
                            "id": "97234tyi23rfiy325r3i8o",
                            "name": "John Snow"
                        },
                        "subject": "Loan Rejected",
                        "timestamp": "2019-01-02T10:51:30.000+0000",
                        "topic": {
                            "deleted": true,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064b7",
                            "name": "Loan rejected"
                        }
                    }, {
                        "assignee": {
                            "fullName": "John Snow",
                            "internalId": "1234-5678-9012-3456",
                            "isRequester": true
                        },
                        "client": {
                            "fullName": "John Doe",
                            "internalId": "97234tyi23rfiy325r3i7r"
                        },
                        "deletable": true,
                        "hasAttachments": false,
                        "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                        "important": true,
                        "read": false,
                        "read-only": false,
                        "sender": {
                            "deleted": false,
                            "id": "97234tyi23rfiy325r3i7r",
                            "name": "John Doe"
                        },
                        "subject": "Important Application",
                        "timestamp": "2017-10-02T10:51:30.000+0000",
                        "topic": {
                            "deleted": false,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Savings"
                        }
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServiceGetConversationsCounterMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/conversations/counters",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "unassigned": 2,
                    "unreadAssigned": 5
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServiceGetConversationsReportMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/conversations/report",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "clientUserFullName": "Ned Stark",
                        "clientUserId": "417a289c-5011-4dbc-a3ee-c00ed914f5fe",
                        "rootMessageSentDate": "2021-09-28T12:47:40.000+0000",
                        "lastMessageSentDate": "2021-09-29T13:50:40.000+0000",
                        "status": "NEW",
                        "topic": {
                            "deleted": false,
                            "id": "8e368e8f-f99c-4edb-8edb-b935b97faa60",
                            "name": "Living social deals"
                        },
                        "subject": "Important Application",
                        "bankAssigneeId": "43ca9de8-ac20-43bd-9c7d-bfa9e4ce16f8",
                        "bankAssigneeFullName": "John Snow"
                    }, {
                        "clientUserFullName": "Robert Johnson",
                        "clientUserId": "417a289c-5011-4dbc-a3ee-c00ed914f5fe",
                        "rootMessageSentDate": "2021-10-11T18:24:17.000+0000",
                        "lastMessageSentDate": "2021-10-11T20:27:19.000+0000",
                        "status": "IN_PROGRESS",
                        "topic": {
                            "deleted": false,
                            "id": "96aeb836-d5c1-4303-826c-5424012ba09f",
                            "name": "Prize"
                        },
                        "subject": "Vacation on Mars",
                        "bankAssigneeId": "bc32371a-2c5a-4fd9-b78e-ffe5c95e1a42",
                        "bankAssigneeFullName": "Maria Flores"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServiceGetEmployeeMessageThreadMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/messages/{messageId}/conversation",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "assignee": {
                        "fullName": "John Snow",
                        "internalId": "1234-5678-9012-3456",
                        "isRequester": true
                    },
                    "attachments": [{
                            "createdAt": "2017-10-02T10:51:50.000+0000",
                            "filename": "message-attachment-filename.pdf",
                            "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                            "size": 2592836
                        }, {
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "filename": "another-message-attachment-filename.pdf",
                            "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                            "size": 15982836
                        }],
                    "deletable": true,
                    "important": true,
                    "messages": [{
                            "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                            "isMyMessage": true,
                            "sender": {
                                "id": "97234tyi23rfiy325r3i7r",
                                "name": "John Doe"
                            }
                        }, {
                            "body": "PGRpdj48b2w+PGxpPkNhc3RsZXMgaW4gR3JlYXQgQnJpdGFpbiBhbmQgSXJlbGFuZDxicj48L2xpPjxsaT5MaXN0IG9mIGNhc3RsZXMgaW4gV2FsZXM8YnI+PC9saT48bGk+TGlzdCBvZiBnYXJkZW5zIGluIFdhbGVzPGJyPjwvbGk+PC9vbD48L2Rpdj4=",
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e1",
                            "isMyMessage": false,
                            "sender": {
                                "id": "97234tyi23rfiy325r3i72",
                                "name": "John Doe 2"
                            }
                        }, {
                            "attachments": [{
                                    "createdAt": "2017-10-02T10:51:30.000+0000",
                                    "filename": "another-message-attachment-filename.pdf",
                                    "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                                    "size": 15982836
                                }],
                            "body": "PGRpdj48b2w+PGxpPiA8Yj4iQ2hpcmsgQ2FzdGxlLCBDaGlyayI8L2I+LiBCcml0aXNoIExpc3RlZCBidWlsZGluZ3MuIFJldHJpZXZlZCAyMyBKdWx5IDIwMTUuPGJyPjwvbGk+PGxpPiA8Yj4iQ2hpcmsgQ2FzdGxlIOKAkyBPZmZpY2lhbCBHdWlkZWJvb2siLjwvYj4gQ2FzdGxlIFdhbGVzLjxicj48L2xpPjxsaT4gPGI+IkNoaXJrIENhc3RsZSIuPC9iPiBOYXRpb25hbCBUcnVzdC48YnI+PC9saT48bGk+IDxiPiJUaGUgT2FrIGF0IHRoZSBHYXRlIG9mIHRoZSBEZWFkIjwvYj4uIFBlb3BsZSdzIENvbGxlY3Rpb24gV2FsZXMuIFJldHJpZXZlZCAxIE1hcmNoIDIwMTguPGJyPjwvbGk+PC9vbD48L2Rpdj4=",
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e2",
                            "isMyMessage": true,
                            "sender": {
                                "id": "97234tyi23rfiy325r3i73",
                                "name": "John Doe 3"
                            }
                        }, {
                            "attachments": [{
                                    "createdAt": "2017-10-02T10:51:50.000+0000",
                                    "filename": "message-attachment-filename.pdf",
                                    "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                                    "size": 2592836
                                }],
                            "body": "VGhlIGNhc3RsZSB3YXMgdXNlZCBhcyBhIHNwZWNpYWwgc3RhZ2UgaW4gdGhlIDxiPjIwMTM8L2I+IFdhbGVzIFJhbGx5IEdCLiA8ZGl2PjxpPjxiPjx1Pjxicj48L3U+PC9iPjwvaT48L2Rpdj48ZGl2PjxpPjxiPjx1PlRoZSBPYWsgYXQgdGhlIEdhdGUgb2YgdGhlIERlYWQ8L3U+PC9iPjwvaT4gbGllcyAzMDBtIGZyb20gPGI+Q2hpcmsgQ2FzdGxlPC9iPiBhbmQgbWFya3MgdGhlIHNpdGUgb2YgdGhlIDExNjUgPGI+QmF0dGxlIG9mIENyb2dlbjwvYj4uPC9kaXY+",
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e3",
                            "isMyMessage": false,
                            "sender": {
                                "id": "97234tyi23rfiy325r3i74",
                                "name": "John Doe 4"
                            }
                        }],
                    "read": false,
                    "read-only": false,
                    "rootMessageId": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                    "subject": "Application Rejected (your efforts are futile)",
                    "topic": {
                        "deleted": false,
                        "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                        "name": "Savings"
                    },
                    "workflowStatus": "NEW"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServiceGetMessageAttachmentEmployeeMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/attachments/{attachmentId}",
        method: "GET",
        responses: [
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServiceGetSearchConversationsMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/conversations/search",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "assignee": {
                            "fullName": "John Snow",
                            "internalId": "1234-5678-9012-3456",
                            "isRequester": true
                        },
                        "client": {
                            "fullName": "John Doe",
                            "internalId": "97234tyi23rfiy325r3i7r"
                        },
                        "deletable": true,
                        "hasAttachments": true,
                        "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                        "important": false,
                        "read": false,
                        "read-only": false,
                        "sender": {
                            "deleted": false,
                            "id": "97234tyi23rfiy325r3i7r",
                            "name": "John Doe"
                        },
                        "subject": "Application Rejected",
                        "timestamp": "2017-10-02T10:51:30.275+0000",
                        "topic": {
                            "deleted": false,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Savings"
                        }
                    }, {
                        "assignee": {
                            "fullName": "Ned Stark",
                            "internalId": "0987-6543-2109-8765",
                            "isRequester": false
                        },
                        "client": {
                            "fullName": "John Doe",
                            "internalId": "97234tyi23rfiy325r3i7r"
                        },
                        "deletable": true,
                        "hasAttachments": false,
                        "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9",
                        "important": false,
                        "read": true,
                        "read-only": false,
                        "sender": {
                            "deleted": false,
                            "id": "97234tyi23rfiy325r3i8o",
                            "name": "John Snow"
                        },
                        "subject": "Loan Rejected",
                        "timestamp": "2019-01-02T10:51:30.000+0000",
                        "topic": {
                            "deleted": true,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064b7",
                            "name": "Loan rejected"
                        }
                    }, {
                        "assignee": {
                            "fullName": "John Snow",
                            "internalId": "1234-5678-9012-3456",
                            "isRequester": true
                        },
                        "client": {
                            "fullName": "John Doe",
                            "internalId": "97234tyi23rfiy325r3i7r"
                        },
                        "deletable": true,
                        "hasAttachments": false,
                        "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                        "important": true,
                        "read": false,
                        "read-only": false,
                        "sender": {
                            "deleted": false,
                            "id": "97234tyi23rfiy325r3i7r",
                            "name": "John Doe"
                        },
                        "subject": "Important Application",
                        "timestamp": "2017-10-02T10:51:30.000+0000",
                        "topic": {
                            "deleted": false,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Savings"
                        }
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServiceGetSubscriptionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/topics/{topicId}/subscriptions",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "08ee5037-8dce-43ab-b734-e2b90a189b82",
                        "internalUserId": "03185355-649e-4ab5-97c8-a02555c7a4b2",
                        "subscriberName": "Britney Spears",
                        "subscriptionDate": "2017-08-22T11:07:27.000+0000"
                    }, {
                        "id": "58ee5037-8dce-43ab-b734-e2b90a189b81",
                        "internalUserId": "d462caa4-edfb-4776-a4b4-9f7e5834d2ae",
                        "subscriberName": "Lady Gaga",
                        "subscriptionDate": "2017-08-22T11:07:27.000+0000"
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServiceGetTopicMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/topics/{topicId}",
        method: "GET",
        responses: [
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServiceGetTopicsEmployeeMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/topics",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "code": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                        "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                        "mailoutTopic": true,
                        "name": "Mortgage application",
                        "subscribersCount": 21
                    }, {
                        "code": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                        "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                        "mailoutTopic": true,
                        "name": "Loans",
                        "subscribersCount": 102
                    }, {
                        "code": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                        "id": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                        "mailoutTopic": false,
                        "name": "Problems with making a payment",
                        "subscribersCount": 4
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServicePostMessageAttachmentsEmployeeMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/attachments",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "createdAt": "2000-01-23T04:56:07.000+00:00",
                    "filename": "filename",
                    "size": 0.8008281904610115,
                    "additions": {
                        "key": "additions"
                    },
                    "id": "id"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const EmployeeHttpServicePostMessageReplyEmployeeMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/messages/{messageId}/reply",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "2ca7990f-bcda-4eba-8763-03bf7c66cf3f"
                }
            },
            {
                status: 201,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "id": "id"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServicePostMessagesEmployeeMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/messages",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "2ca7990f-bcda-4eba-8763-03bf7c66cf3f"
                }
            },
            {
                status: 201,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "id": "id"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServicePostSubscribersMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/topics/{topicId}/subscribers",
        method: "POST",
        responses: [
            {
                status: 201,
                body: [{
                        "isSubscribed": true,
                        "subscriberId": "08ee5037-8dce-43ab-b734-e2b90a189b82"
                    }, {
                        "isSubscribed": false,
                        "subscriberId": "58ee5037-8dce-43ab-b734-e2b90a189b81"
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServicePostSubscriptionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/topics/{topicId}/subscriptions",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "79754562-57f6-4cf7-81dc-ec757e4d4c04"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServicePostTopicsMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/topics",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "failedSubscriberIds": ["nonExistentId"],
                    "id": "79754562-57f6-4cf7-81dc-ec757e4d4c04",
                    "name": "New topic",
                    "subscribers": ["d462caa4-edfb-4776-a4b4-9f7e5834d2ae", "03185355-649e-4ab5-97c8-a02555c7a4b2"]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServicePutAssignConversationMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/messages/{messageId}/assign",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "fullName": "John Smith",
                    "internalId": "5123-1123-12322",
                    "isRequester": true
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServicePutConversationAssignmentMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/messages/assignment",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "assignedItems": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                    "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"],
                    "fullName": "John Smith",
                    "internalId": "5123-1123-12322",
                    "isRequester": true
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServicePutConversationResolutionMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/messages/{messageId}/resolution",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "resolutionStatus": "RESOLVED"
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServicePutConversationResolutionEmployeeMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/messages/resolution",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"],
                    "resolutionStatus": "RESOLVED",
                    "successfulItems": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServicePutMarkAsReadUnreadEmployeeMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/conversations/read",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "changedItems": ["changedItems", "changedItems"],
                    "failedItems": ["failedItems", "failedItems"]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServicePutMessageThreadTopicMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/messages/{messageId}/topic",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {}
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServicePutTopicMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/topics/{topicId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "code": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                    "id": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                    "name": "Problems with making a payment"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const EmployeeHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v5/employee/messages/assignment",
        method: "DELETE",
        responses: [
            {
                status: 200,
                body: {
                    "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"],
                    "unassignedItems": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/attachments",
        method: "DELETE",
        responses: [
            {
                status: 200,
                body: {
                    "deleted": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                    "failed": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                }
            },
            {
                status: 200,
                body: {
                    "deleted": ["deleted", "deleted"],
                    "additions": {
                        "key": "additions"
                    },
                    "failed": ["failed", "failed"]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/topics/{topicId}/subscriptions/{subscriptionId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: {}
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/topics/{topicId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: {}
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/conversations",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "assignee": {
                            "fullName": "John Snow",
                            "internalId": "1234-5678-9012-3456",
                            "isRequester": true
                        },
                        "client": {
                            "fullName": "John Doe",
                            "internalId": "97234tyi23rfiy325r3i7r"
                        },
                        "deletable": true,
                        "hasAttachments": true,
                        "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                        "important": false,
                        "read": false,
                        "read-only": false,
                        "sender": {
                            "deleted": false,
                            "id": "97234tyi23rfiy325r3i7r",
                            "name": "John Doe"
                        },
                        "subject": "Application Rejected",
                        "timestamp": "2017-10-02T10:51:30.275+0000",
                        "topic": {
                            "deleted": false,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Savings"
                        }
                    }, {
                        "assignee": {
                            "fullName": "Ned Stark",
                            "internalId": "0987-6543-2109-8765",
                            "isRequester": false
                        },
                        "client": {
                            "fullName": "John Doe",
                            "internalId": "97234tyi23rfiy325r3i7r"
                        },
                        "deletable": true,
                        "hasAttachments": false,
                        "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9",
                        "important": false,
                        "read": true,
                        "read-only": false,
                        "sender": {
                            "deleted": false,
                            "id": "97234tyi23rfiy325r3i8o",
                            "name": "John Snow"
                        },
                        "subject": "Loan Rejected",
                        "timestamp": "2019-01-02T10:51:30.000+0000",
                        "topic": {
                            "deleted": true,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064b7",
                            "name": "Loan rejected"
                        }
                    }, {
                        "assignee": {
                            "fullName": "John Snow",
                            "internalId": "1234-5678-9012-3456",
                            "isRequester": true
                        },
                        "client": {
                            "fullName": "John Doe",
                            "internalId": "97234tyi23rfiy325r3i7r"
                        },
                        "deletable": true,
                        "hasAttachments": false,
                        "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                        "important": true,
                        "read": false,
                        "read-only": false,
                        "sender": {
                            "deleted": false,
                            "id": "97234tyi23rfiy325r3i7r",
                            "name": "John Doe"
                        },
                        "subject": "Important Application",
                        "timestamp": "2017-10-02T10:51:30.000+0000",
                        "topic": {
                            "deleted": false,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Savings"
                        }
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/conversations/counters",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "unassigned": 2,
                    "unreadAssigned": 5
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/conversations/report",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "clientUserFullName": "Ned Stark",
                        "clientUserId": "417a289c-5011-4dbc-a3ee-c00ed914f5fe",
                        "rootMessageSentDate": "2021-09-28T12:47:40.000+0000",
                        "lastMessageSentDate": "2021-09-29T13:50:40.000+0000",
                        "status": "NEW",
                        "topic": {
                            "deleted": false,
                            "id": "8e368e8f-f99c-4edb-8edb-b935b97faa60",
                            "name": "Living social deals"
                        },
                        "subject": "Important Application",
                        "bankAssigneeId": "43ca9de8-ac20-43bd-9c7d-bfa9e4ce16f8",
                        "bankAssigneeFullName": "John Snow"
                    }, {
                        "clientUserFullName": "Robert Johnson",
                        "clientUserId": "417a289c-5011-4dbc-a3ee-c00ed914f5fe",
                        "rootMessageSentDate": "2021-10-11T18:24:17.000+0000",
                        "lastMessageSentDate": "2021-10-11T20:27:19.000+0000",
                        "status": "IN_PROGRESS",
                        "topic": {
                            "deleted": false,
                            "id": "96aeb836-d5c1-4303-826c-5424012ba09f",
                            "name": "Prize"
                        },
                        "subject": "Vacation on Mars",
                        "bankAssigneeId": "bc32371a-2c5a-4fd9-b78e-ffe5c95e1a42",
                        "bankAssigneeFullName": "Maria Flores"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/messages/{messageId}/conversation",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "assignee": {
                        "fullName": "John Snow",
                        "internalId": "1234-5678-9012-3456",
                        "isRequester": true
                    },
                    "attachments": [{
                            "createdAt": "2017-10-02T10:51:50.000+0000",
                            "filename": "message-attachment-filename.pdf",
                            "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                            "size": 2592836
                        }, {
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "filename": "another-message-attachment-filename.pdf",
                            "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                            "size": 15982836
                        }],
                    "deletable": true,
                    "important": true,
                    "messages": [{
                            "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                            "isMyMessage": true,
                            "sender": {
                                "id": "97234tyi23rfiy325r3i7r",
                                "name": "John Doe"
                            }
                        }, {
                            "body": "PGRpdj48b2w+PGxpPkNhc3RsZXMgaW4gR3JlYXQgQnJpdGFpbiBhbmQgSXJlbGFuZDxicj48L2xpPjxsaT5MaXN0IG9mIGNhc3RsZXMgaW4gV2FsZXM8YnI+PC9saT48bGk+TGlzdCBvZiBnYXJkZW5zIGluIFdhbGVzPGJyPjwvbGk+PC9vbD48L2Rpdj4=",
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e1",
                            "isMyMessage": false,
                            "sender": {
                                "id": "97234tyi23rfiy325r3i72",
                                "name": "John Doe 2"
                            }
                        }, {
                            "attachments": [{
                                    "createdAt": "2017-10-02T10:51:30.000+0000",
                                    "filename": "another-message-attachment-filename.pdf",
                                    "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                                    "size": 15982836
                                }],
                            "body": "PGRpdj48b2w+PGxpPiA8Yj4iQ2hpcmsgQ2FzdGxlLCBDaGlyayI8L2I+LiBCcml0aXNoIExpc3RlZCBidWlsZGluZ3MuIFJldHJpZXZlZCAyMyBKdWx5IDIwMTUuPGJyPjwvbGk+PGxpPiA8Yj4iQ2hpcmsgQ2FzdGxlIOKAkyBPZmZpY2lhbCBHdWlkZWJvb2siLjwvYj4gQ2FzdGxlIFdhbGVzLjxicj48L2xpPjxsaT4gPGI+IkNoaXJrIENhc3RsZSIuPC9iPiBOYXRpb25hbCBUcnVzdC48YnI+PC9saT48bGk+IDxiPiJUaGUgT2FrIGF0IHRoZSBHYXRlIG9mIHRoZSBEZWFkIjwvYj4uIFBlb3BsZSdzIENvbGxlY3Rpb24gV2FsZXMuIFJldHJpZXZlZCAxIE1hcmNoIDIwMTguPGJyPjwvbGk+PC9vbD48L2Rpdj4=",
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e2",
                            "isMyMessage": true,
                            "sender": {
                                "id": "97234tyi23rfiy325r3i73",
                                "name": "John Doe 3"
                            }
                        }, {
                            "attachments": [{
                                    "createdAt": "2017-10-02T10:51:50.000+0000",
                                    "filename": "message-attachment-filename.pdf",
                                    "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                                    "size": 2592836
                                }],
                            "body": "VGhlIGNhc3RsZSB3YXMgdXNlZCBhcyBhIHNwZWNpYWwgc3RhZ2UgaW4gdGhlIDxiPjIwMTM8L2I+IFdhbGVzIFJhbGx5IEdCLiA8ZGl2PjxpPjxiPjx1Pjxicj48L3U+PC9iPjwvaT48L2Rpdj48ZGl2PjxpPjxiPjx1PlRoZSBPYWsgYXQgdGhlIEdhdGUgb2YgdGhlIERlYWQ8L3U+PC9iPjwvaT4gbGllcyAzMDBtIGZyb20gPGI+Q2hpcmsgQ2FzdGxlPC9iPiBhbmQgbWFya3MgdGhlIHNpdGUgb2YgdGhlIDExNjUgPGI+QmF0dGxlIG9mIENyb2dlbjwvYj4uPC9kaXY+",
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e3",
                            "isMyMessage": false,
                            "sender": {
                                "id": "97234tyi23rfiy325r3i74",
                                "name": "John Doe 4"
                            }
                        }],
                    "read": false,
                    "read-only": false,
                    "rootMessageId": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                    "subject": "Application Rejected (your efforts are futile)",
                    "topic": {
                        "deleted": false,
                        "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                        "name": "Savings"
                    },
                    "workflowStatus": "NEW"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/attachments/{attachmentId}",
        method: "GET",
        responses: [
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/conversations/search",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "assignee": {
                            "fullName": "John Snow",
                            "internalId": "1234-5678-9012-3456",
                            "isRequester": true
                        },
                        "client": {
                            "fullName": "John Doe",
                            "internalId": "97234tyi23rfiy325r3i7r"
                        },
                        "deletable": true,
                        "hasAttachments": true,
                        "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                        "important": false,
                        "read": false,
                        "read-only": false,
                        "sender": {
                            "deleted": false,
                            "id": "97234tyi23rfiy325r3i7r",
                            "name": "John Doe"
                        },
                        "subject": "Application Rejected",
                        "timestamp": "2017-10-02T10:51:30.275+0000",
                        "topic": {
                            "deleted": false,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Savings"
                        }
                    }, {
                        "assignee": {
                            "fullName": "Ned Stark",
                            "internalId": "0987-6543-2109-8765",
                            "isRequester": false
                        },
                        "client": {
                            "fullName": "John Doe",
                            "internalId": "97234tyi23rfiy325r3i7r"
                        },
                        "deletable": true,
                        "hasAttachments": false,
                        "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9",
                        "important": false,
                        "read": true,
                        "read-only": false,
                        "sender": {
                            "deleted": false,
                            "id": "97234tyi23rfiy325r3i8o",
                            "name": "John Snow"
                        },
                        "subject": "Loan Rejected",
                        "timestamp": "2019-01-02T10:51:30.000+0000",
                        "topic": {
                            "deleted": true,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064b7",
                            "name": "Loan rejected"
                        }
                    }, {
                        "assignee": {
                            "fullName": "John Snow",
                            "internalId": "1234-5678-9012-3456",
                            "isRequester": true
                        },
                        "client": {
                            "fullName": "John Doe",
                            "internalId": "97234tyi23rfiy325r3i7r"
                        },
                        "deletable": true,
                        "hasAttachments": false,
                        "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                        "important": true,
                        "read": false,
                        "read-only": false,
                        "sender": {
                            "deleted": false,
                            "id": "97234tyi23rfiy325r3i7r",
                            "name": "John Doe"
                        },
                        "subject": "Important Application",
                        "timestamp": "2017-10-02T10:51:30.000+0000",
                        "topic": {
                            "deleted": false,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Savings"
                        }
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/topics/{topicId}/subscriptions",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "08ee5037-8dce-43ab-b734-e2b90a189b82",
                        "internalUserId": "03185355-649e-4ab5-97c8-a02555c7a4b2",
                        "subscriberName": "Britney Spears",
                        "subscriptionDate": "2017-08-22T11:07:27.000+0000"
                    }, {
                        "id": "58ee5037-8dce-43ab-b734-e2b90a189b81",
                        "internalUserId": "d462caa4-edfb-4776-a4b4-9f7e5834d2ae",
                        "subscriberName": "Lady Gaga",
                        "subscriptionDate": "2017-08-22T11:07:27.000+0000"
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/topics/{topicId}",
        method: "GET",
        responses: [
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/topics",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "code": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                        "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                        "mailoutTopic": true,
                        "name": "Mortgage application",
                        "subscribersCount": 21
                    }, {
                        "code": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                        "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                        "mailoutTopic": true,
                        "name": "Loans",
                        "subscribersCount": 102
                    }, {
                        "code": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                        "id": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                        "mailoutTopic": false,
                        "name": "Problems with making a payment",
                        "subscribersCount": 4
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/attachments",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "createdAt": "2000-01-23T04:56:07.000+00:00",
                    "filename": "filename",
                    "size": 0.8008281904610115,
                    "additions": {
                        "key": "additions"
                    },
                    "id": "id"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/messages/{messageId}/reply",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "2ca7990f-bcda-4eba-8763-03bf7c66cf3f"
                }
            },
            {
                status: 201,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "id": "id"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/messages",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "2ca7990f-bcda-4eba-8763-03bf7c66cf3f"
                }
            },
            {
                status: 201,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "id": "id"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/topics/{topicId}/subscribers",
        method: "POST",
        responses: [
            {
                status: 201,
                body: [{
                        "isSubscribed": true,
                        "subscriberId": "08ee5037-8dce-43ab-b734-e2b90a189b82"
                    }, {
                        "isSubscribed": false,
                        "subscriberId": "58ee5037-8dce-43ab-b734-e2b90a189b81"
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/topics/{topicId}/subscriptions",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "79754562-57f6-4cf7-81dc-ec757e4d4c04"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/topics",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "failedSubscriberIds": ["nonExistentId"],
                    "id": "79754562-57f6-4cf7-81dc-ec757e4d4c04",
                    "name": "New topic",
                    "subscribers": ["d462caa4-edfb-4776-a4b4-9f7e5834d2ae", "03185355-649e-4ab5-97c8-a02555c7a4b2"]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/messages/{messageId}/assign",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "fullName": "John Smith",
                    "internalId": "5123-1123-12322",
                    "isRequester": true
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/messages/assignment",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "assignedItems": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                    "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"],
                    "fullName": "John Smith",
                    "internalId": "5123-1123-12322",
                    "isRequester": true
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/messages/{messageId}/resolution",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "resolutionStatus": "RESOLVED"
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/messages/resolution",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"],
                    "resolutionStatus": "RESOLVED",
                    "successfulItems": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/conversations/read",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "changedItems": ["changedItems", "changedItems"],
                    "failedItems": ["failedItems", "failedItems"]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/messages/{messageId}/topic",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {}
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/topics/{topicId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "code": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                    "id": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                    "name": "Problems with making a payment"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);

class MailoutHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new MessagesConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteMailout(requestParameters, observe = 'body', reportProgress = false, options) {
        const _mailoutId = requestParameters["mailoutId"];
        if (_mailoutId === null || _mailoutId === undefined) {
            throw new Error('Required parameter mailoutId was null or undefined when calling deleteMailout.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v5/employee/mailouts/${encodeURIComponent(String(_mailoutId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteMailoutUrl(requestParameters) {
        const _mailoutId = requestParameters["mailoutId"];
        if (_mailoutId === null || _mailoutId === undefined) {
            throw new Error('Required parameter mailoutId was null or undefined when calling deleteMailout.');
        }
        return `${this.configuration.basePath}/client-api/v5/employee/mailouts/${encodeURIComponent(String(_mailoutId))}`;
    }
    getMailout(requestParameters, observe = 'body', reportProgress = false, options) {
        const _mailoutId = requestParameters["mailoutId"];
        if (_mailoutId === null || _mailoutId === undefined) {
            throw new Error('Required parameter mailoutId was null or undefined when calling getMailout.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/mailouts/${encodeURIComponent(String(_mailoutId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getMailoutUrl(requestParameters) {
        const _mailoutId = requestParameters["mailoutId"];
        if (_mailoutId === null || _mailoutId === undefined) {
            throw new Error('Required parameter mailoutId was null or undefined when calling getMailout.');
        }
        return `${this.configuration.basePath}/client-api/v5/employee/mailouts/${encodeURIComponent(String(_mailoutId))}`;
    }
    getMailouts(requestParameters, observe = 'body', reportProgress = false, options) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/employee/mailouts`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getMailoutsUrl(requestParameters) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/employee/mailouts${queryString ? `?${queryString}` : ''}`;
    }
    postMailout(requestParameters, observe = 'body', reportProgress = false, options) {
        const _mailoutPostRequestBody = requestParameters["mailoutPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/employee/mailouts`, _mailoutPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postMailoutUrl(requestParameters) {
        const _mailoutPostRequestBody = requestParameters["mailoutPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/mailouts`;
    }
    postMailoutPreview(requestParameters, observe = 'body', reportProgress = false, options) {
        const _mailoutPreviewRequestBody = requestParameters["mailoutPreviewRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/employee/mailouts/preview`, _mailoutPreviewRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postMailoutPreviewUrl(requestParameters) {
        const _mailoutPreviewRequestBody = requestParameters["mailoutPreviewRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/employee/mailouts/preview`;
    }
}
MailoutHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: MailoutHttpService, deps: [{ token: i1.HttpClient }, { token: MESSAGES_BASE_PATH, optional: true }, { token: MessagesConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
MailoutHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: MailoutHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: MailoutHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MESSAGES_BASE_PATH]
                }] }, { type: MessagesConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const MailoutHttpServiceDeleteMailoutMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/mailouts/{mailoutId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: {}
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const MailoutHttpServiceGetMailoutMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/mailouts/{mailoutId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "attachments": [{
                            "createdAt": "2017-10-02T10:51:50.000+0000",
                            "filename": "message-attachment-filename.pdf",
                            "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                            "size": 2592836
                        }, {
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "filename": "another-message-attachment-filename.pdf",
                            "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                            "size": 15982836
                        }],
                    "body": "PHRhYmxlIHdpZHRoPSIxMDAlIiBib3JkZXI9IjAiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMCI+CiAgPHRyPgogICAgPHRkIGFsaWduPSJjZW50ZXIiIHZhbGlnbj0ibWlkZGxlIiBzdHlsZT0iZm9udC1mYW1pbHk6J0dlb3JnaWEnLCAnVGltZXMgTmV3IFJvbWFuJywgJ1RpbWVzJywgc2VyaWY7IGNvbG9yOiMwMDAwMDA7IGZvbnQtc2l6ZToyNHB4OyBwYWRkaW5nLWJvdHRvbTo1cHgiPgogICAgICA8aT5XZWxjb21lICAke3VzZXJ9CiAgICAgIDwvaT4KICA8dHI+CiAgICA8dGQgYWxpZ249ImxlZnQiIHZhbGlnbj0ibWlkZGxlIiBzdHlsZT0iZm9udC1mYW1pbHk6J0dlb3JnaWEnLCAnVGltZXMgTmV3IFJvbWFuJywgJ1RpbWVzJywgc2VyaWY7IGNvbG9yOiMwMDAwMDA7IGZvbnQtc2l6ZToxNXB4Ij4KICAgICAgdG8gdGhlICR7d29ybGR9IFdvcmxkCiAgICAgIFRoaXMgaXMgb3VyIHdpc2ggZm9yIHlvdS4uLiAke3dpc2h9CiAgPHRyPgo8L3RhYmxlPg==",
                    "deletable": true,
                    "deliveredMessagesNumber": 493,
                    "id": "20a52c18-c4b1-4c1e-8f27-9e0998ff3ef7",
                    "important": false,
                    "initiationDate": "2020-03-04T10:51:30.275+0000",
                    "isBodyHtml": true,
                    "mailoutName": "Happy b-day to users",
                    "readMessagesNumber": 42,
                    "sender": {
                        "id": "3d72a290-00f8-4f65-a16d-65d8f0b29b5a",
                        "name": "John Snow"
                    },
                    "senderDisplayName": "The bank you love",
                    "status": "PROCESSING",
                    "subject": "Happy Birthday!",
                    "topic": {
                        "deleted": false,
                        "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                        "name": "News"
                    },
                    "totalRecipientsCount": 500
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const MailoutHttpServiceGetMailoutsMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/mailouts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "20a52c18-c4b1-4c1e-8f27-9e0998ff3ef7",
                        "initiationDate": "2020-03-04T10:51:30.275+0000",
                        "mailoutName": "Happy b-day to users",
                        "senderDisplayName": "The bank you love",
                        "status": "READY",
                        "subject": "Happy Birthday!",
                        "topic": {
                            "deleted": false,
                            "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                            "name": "News"
                        }
                    }, {
                        "id": "122ca40f-1671-4d1d-9925-ca4df3d34617",
                        "initiationDate": "2020-03-02T12:40:30+0000",
                        "senderDisplayName": "The bank you love",
                        "status": "DONE",
                        "subject": "Special proposal",
                        "topic": {
                            "deleted": false,
                            "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                            "name": "News"
                        }
                    }, {
                        "id": "2738c5dd-88fa-436e-abd3-140f53c5cc08",
                        "initiationDate": "2020-03-02T18:30:10+0000",
                        "senderDisplayName": "The bank you love",
                        "status": "ERROR",
                        "subject": "Extended credit limit",
                        "topic": {
                            "deleted": false,
                            "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                            "name": "News"
                        }
                    }, {
                        "id": "6ad3b1f0-d1e8-4c9e-9231-870bac707f21",
                        "initiationDate": "2020-03-01T11:25:30+0000",
                        "senderDisplayName": "The bank you love",
                        "status": "CANCELLED",
                        "subject": "New terms of deposits",
                        "topic": {
                            "deleted": false,
                            "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                            "name": "News"
                        }
                    }, {
                        "id": "0c5bcdee-f76e-4737-b0d1-3c8fc696c86f",
                        "initiationDate": "2020-03-01T11:25:30+0000",
                        "senderDisplayName": "The bank you love",
                        "status": "CANCELLATION_IN_PROCESS",
                        "subject": "New terms of deposits",
                        "topic": {
                            "deleted": false,
                            "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                            "name": "News"
                        }
                    }]
            },
        ]
    }]);
const MailoutHttpServicePostMailoutMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/mailouts",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "3d72a290-00f8-4f65-a16d-65d8f0b29b5a"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    }]);
const MailoutHttpServicePostMailoutPreviewMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/employee/mailouts/preview",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "body": "PHRhYmxlIHdpZHRoPSIxMDAlIiBib3JkZXI9IjAiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMCI+PHRib2R5Pjx0cj48dGQgYWxpZ249ImNlbnRlciIgdmFsaWduPSJtaWRkbGUiIHN0eWxlPSJmb250LWZhbWlseTomIzM5O2dlb3JnaWEmIzM5OyAsICYjMzk7dGltZXMgbmV3IHJvbWFuJiMzOTsgLCAmIzM5O3RpbWVzJiMzOTsgLCBzZXJpZjtjb2xvcjojMDAwMDAwO2ZvbnQtc2l6ZToyNHB4O3BhZGRpbmctYm90dG9tOjVweCI+CiAgPGk+V2VsY29tZSAgJHt1c2VyfQogIDwvaT4KPC90ZD48L3RyPjx0cj48dGQgYWxpZ249ImxlZnQiIHZhbGlnbj0ibWlkZGxlIiBzdHlsZT0iZm9udC1mYW1pbHk6JiMzOTtnZW9yZ2lhJiMzOTsgLCAmIzM5O3RpbWVzIG5ldyByb21hbiYjMzk7ICwgJiMzOTt0aW1lcyYjMzk7ICwgc2VyaWY7Y29sb3I6IzAwMDAwMDtmb250LXNpemU6MTVweCI+CiAgPHA+dG8gdGhlICR7d29ybGR9IFdvcmxkCiAgICBUaGlzIGlzIG91ciB3aXNoIGZvciB5b3UuLi4gJHt3aXNofQogIDwvcD4KPC90ZD48L3RyPjwvdGJvZHk+PC90YWJsZT4="
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    }]);
const MailoutHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v5/employee/mailouts/{mailoutId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: {}
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/mailouts/{mailoutId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "attachments": [{
                            "createdAt": "2017-10-02T10:51:50.000+0000",
                            "filename": "message-attachment-filename.pdf",
                            "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                            "size": 2592836
                        }, {
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "filename": "another-message-attachment-filename.pdf",
                            "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                            "size": 15982836
                        }],
                    "body": "PHRhYmxlIHdpZHRoPSIxMDAlIiBib3JkZXI9IjAiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMCI+CiAgPHRyPgogICAgPHRkIGFsaWduPSJjZW50ZXIiIHZhbGlnbj0ibWlkZGxlIiBzdHlsZT0iZm9udC1mYW1pbHk6J0dlb3JnaWEnLCAnVGltZXMgTmV3IFJvbWFuJywgJ1RpbWVzJywgc2VyaWY7IGNvbG9yOiMwMDAwMDA7IGZvbnQtc2l6ZToyNHB4OyBwYWRkaW5nLWJvdHRvbTo1cHgiPgogICAgICA8aT5XZWxjb21lICAke3VzZXJ9CiAgICAgIDwvaT4KICA8dHI+CiAgICA8dGQgYWxpZ249ImxlZnQiIHZhbGlnbj0ibWlkZGxlIiBzdHlsZT0iZm9udC1mYW1pbHk6J0dlb3JnaWEnLCAnVGltZXMgTmV3IFJvbWFuJywgJ1RpbWVzJywgc2VyaWY7IGNvbG9yOiMwMDAwMDA7IGZvbnQtc2l6ZToxNXB4Ij4KICAgICAgdG8gdGhlICR7d29ybGR9IFdvcmxkCiAgICAgIFRoaXMgaXMgb3VyIHdpc2ggZm9yIHlvdS4uLiAke3dpc2h9CiAgPHRyPgo8L3RhYmxlPg==",
                    "deletable": true,
                    "deliveredMessagesNumber": 493,
                    "id": "20a52c18-c4b1-4c1e-8f27-9e0998ff3ef7",
                    "important": false,
                    "initiationDate": "2020-03-04T10:51:30.275+0000",
                    "isBodyHtml": true,
                    "mailoutName": "Happy b-day to users",
                    "readMessagesNumber": 42,
                    "sender": {
                        "id": "3d72a290-00f8-4f65-a16d-65d8f0b29b5a",
                        "name": "John Snow"
                    },
                    "senderDisplayName": "The bank you love",
                    "status": "PROCESSING",
                    "subject": "Happy Birthday!",
                    "topic": {
                        "deleted": false,
                        "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                        "name": "News"
                    },
                    "totalRecipientsCount": 500
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/mailouts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "20a52c18-c4b1-4c1e-8f27-9e0998ff3ef7",
                        "initiationDate": "2020-03-04T10:51:30.275+0000",
                        "mailoutName": "Happy b-day to users",
                        "senderDisplayName": "The bank you love",
                        "status": "READY",
                        "subject": "Happy Birthday!",
                        "topic": {
                            "deleted": false,
                            "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                            "name": "News"
                        }
                    }, {
                        "id": "122ca40f-1671-4d1d-9925-ca4df3d34617",
                        "initiationDate": "2020-03-02T12:40:30+0000",
                        "senderDisplayName": "The bank you love",
                        "status": "DONE",
                        "subject": "Special proposal",
                        "topic": {
                            "deleted": false,
                            "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                            "name": "News"
                        }
                    }, {
                        "id": "2738c5dd-88fa-436e-abd3-140f53c5cc08",
                        "initiationDate": "2020-03-02T18:30:10+0000",
                        "senderDisplayName": "The bank you love",
                        "status": "ERROR",
                        "subject": "Extended credit limit",
                        "topic": {
                            "deleted": false,
                            "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                            "name": "News"
                        }
                    }, {
                        "id": "6ad3b1f0-d1e8-4c9e-9231-870bac707f21",
                        "initiationDate": "2020-03-01T11:25:30+0000",
                        "senderDisplayName": "The bank you love",
                        "status": "CANCELLED",
                        "subject": "New terms of deposits",
                        "topic": {
                            "deleted": false,
                            "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                            "name": "News"
                        }
                    }, {
                        "id": "0c5bcdee-f76e-4737-b0d1-3c8fc696c86f",
                        "initiationDate": "2020-03-01T11:25:30+0000",
                        "senderDisplayName": "The bank you love",
                        "status": "CANCELLATION_IN_PROCESS",
                        "subject": "New terms of deposits",
                        "topic": {
                            "deleted": false,
                            "id": "ea151612-e2f9-403e-825d-9169afa0d2ac",
                            "name": "News"
                        }
                    }]
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/mailouts",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "3d72a290-00f8-4f65-a16d-65d8f0b29b5a"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/employee/mailouts/preview",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "body": "PHRhYmxlIHdpZHRoPSIxMDAlIiBib3JkZXI9IjAiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMCI+PHRib2R5Pjx0cj48dGQgYWxpZ249ImNlbnRlciIgdmFsaWduPSJtaWRkbGUiIHN0eWxlPSJmb250LWZhbWlseTomIzM5O2dlb3JnaWEmIzM5OyAsICYjMzk7dGltZXMgbmV3IHJvbWFuJiMzOTsgLCAmIzM5O3RpbWVzJiMzOTsgLCBzZXJpZjtjb2xvcjojMDAwMDAwO2ZvbnQtc2l6ZToyNHB4O3BhZGRpbmctYm90dG9tOjVweCI+CiAgPGk+V2VsY29tZSAgJHt1c2VyfQogIDwvaT4KPC90ZD48L3RyPjx0cj48dGQgYWxpZ249ImxlZnQiIHZhbGlnbj0ibWlkZGxlIiBzdHlsZT0iZm9udC1mYW1pbHk6JiMzOTtnZW9yZ2lhJiMzOTsgLCAmIzM5O3RpbWVzIG5ldyByb21hbiYjMzk7ICwgJiMzOTt0aW1lcyYjMzk7ICwgc2VyaWY7Y29sb3I6IzAwMDAwMDtmb250LXNpemU6MTVweCI+CiAgPHA+dG8gdGhlICR7d29ybGR9IFdvcmxkCiAgICBUaGlzIGlzIG91ciB3aXNoIGZvciB5b3UuLi4gJHt3aXNofQogIDwvcD4KPC90ZD48L3RyPjwvdGJvZHk+PC90YWJsZT4="
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    },
]);

class MessagecenterHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new MessagesConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    canConsumeForm(consumes) {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteConversationThreads(requestParameters, observe = 'body', reportProgress = false, options) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteConversationThreads.');
        }
        const _xBBSVCRequestId = requestParameters["xBBSVCRequestId"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        let headers = this.defaultHeaders;
        if (_xBBSVCRequestId !== undefined && _xBBSVCRequestId !== null) {
            headers = headers.set('X-BBSVC-Request-Id', String(_xBBSVCRequestId));
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v5/message-center/messages/conversations`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteConversationThreadsUrl(requestParameters) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteConversationThreads.');
        }
        const _xBBSVCRequestId = requestParameters["xBBSVCRequestId"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/message-center/messages/conversations${queryString ? `?${queryString}` : ''}`;
    }
    deleteMessageAttachments(requestParameters, observe = 'body', reportProgress = false, options) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteMessageAttachments.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v5/message-center/attachments`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteMessageAttachmentsUrl(requestParameters) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteMessageAttachments.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/message-center/attachments${queryString ? `?${queryString}` : ''}`;
    }
    deleteMessageDrafts(requestParameters, observe = 'body', reportProgress = false, options) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteMessageDrafts.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v5/message-center/messages/drafts`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteMessageDraftsUrl(requestParameters) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteMessageDrafts.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/message-center/messages/drafts${queryString ? `?${queryString}` : ''}`;
    }
    getConversationThreads(requestParameters, observe = 'body', reportProgress = false, options) {
        const _mailboxType = requestParameters["mailboxType"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_mailboxType !== undefined && _mailboxType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _mailboxType, 'mailboxType');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/message-center/messages/conversations`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getConversationThreadsUrl(requestParameters) {
        const _mailboxType = requestParameters["mailboxType"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_mailboxType !== undefined && _mailboxType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _mailboxType, 'mailboxType');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/message-center/messages/conversations${queryString ? `?${queryString}` : ''}`;
    }
    getMessageAttachment(requestParameters, observe = 'body', reportProgress = false, options) {
        const _attachmentId = requestParameters["attachmentId"];
        if (_attachmentId === null || _attachmentId === undefined) {
            throw new Error('Required parameter attachmentId was null or undefined when calling getMessageAttachment.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/octet-stream',
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/message-center/attachments/${encodeURIComponent(String(_attachmentId))}`, {
            responseType: "blob",
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getMessageAttachmentUrl(requestParameters) {
        const _attachmentId = requestParameters["attachmentId"];
        if (_attachmentId === null || _attachmentId === undefined) {
            throw new Error('Required parameter attachmentId was null or undefined when calling getMessageAttachment.');
        }
        return `${this.configuration.basePath}/client-api/v5/message-center/attachments/${encodeURIComponent(String(_attachmentId))}`;
    }
    getMessageDraft(requestParameters, observe = 'body', reportProgress = false, options) {
        const _draftId = requestParameters["draftId"];
        if (_draftId === null || _draftId === undefined) {
            throw new Error('Required parameter draftId was null or undefined when calling getMessageDraft.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/message-center/messages/drafts/${encodeURIComponent(String(_draftId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getMessageDraftUrl(requestParameters) {
        const _draftId = requestParameters["draftId"];
        if (_draftId === null || _draftId === undefined) {
            throw new Error('Required parameter draftId was null or undefined when calling getMessageDraft.');
        }
        return `${this.configuration.basePath}/client-api/v5/message-center/messages/drafts/${encodeURIComponent(String(_draftId))}`;
    }
    getMessageDrafts(requestParameters, observe = 'body', reportProgress = false, options) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/message-center/messages/drafts`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getMessageDraftsUrl(requestParameters) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/message-center/messages/drafts${queryString ? `?${queryString}` : ''}`;
    }
    getMessageThread(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling getMessageThread.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/message-center/messages/${encodeURIComponent(String(_messageId))}/conversation`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getMessageThreadUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling getMessageThread.');
        }
        return `${this.configuration.basePath}/client-api/v5/message-center/messages/${encodeURIComponent(String(_messageId))}/conversation`;
    }
    getTopics(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/message-center/topics`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getTopicsUrl() {
        return `${this.configuration.basePath}/client-api/v5/message-center/topics`;
    }
    getUnreadConversationsCount(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v5/message-center/messages/unread-conversation-count`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUnreadConversationsCountUrl() {
        return `${this.configuration.basePath}/client-api/v5/message-center/messages/unread-conversation-count`;
    }
    postConversationMessageDraft(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling postConversationMessageDraft.');
        }
        const _conversationMessageDraftPostRequestBody = requestParameters["conversationMessageDraftPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/message-center/messages/${encodeURIComponent(String(_messageId))}/conversation/drafts`, _conversationMessageDraftPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postConversationMessageDraftUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling postConversationMessageDraft.');
        }
        const _conversationMessageDraftPostRequestBody = requestParameters["conversationMessageDraftPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/message-center/messages/${encodeURIComponent(String(_messageId))}/conversation/drafts`;
    }
    postMessageAttachments(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        const _attachment = requestParameters["attachment"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_messageId !== undefined && _messageId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _messageId, 'messageId');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'multipart/form-data'
        ];
        const canConsumeForm = this.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        let convertFormParamsToString = false;
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new HttpParams({ encoder: this.encoder });
        }
        if (_attachment !== undefined) {
            formParams = formParams.append('attachment', _attachment) || formParams;
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/message-center/attachments`, convertFormParamsToString ? formParams.toString() : formParams, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postMessageAttachmentsUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        const _attachment = requestParameters["attachment"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_messageId !== undefined && _messageId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _messageId, 'messageId');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v5/message-center/attachments${queryString ? `?${queryString}` : ''}`;
    }
    postMessageDrafts(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageDraftsPostRequestBody = requestParameters["messageDraftsPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/message-center/messages/drafts`, _messageDraftsPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postMessageDraftsUrl(requestParameters) {
        const _messageDraftsPostRequestBody = requestParameters["messageDraftsPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/message-center/messages/drafts`;
    }
    postMessageReply(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling postMessageReply.');
        }
        const _messageReplyPostRequestBody = requestParameters["messageReplyPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/message-center/messages/${encodeURIComponent(String(_messageId))}/reply`, _messageReplyPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postMessageReplyUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling postMessageReply.');
        }
        const _messageReplyPostRequestBody = requestParameters["messageReplyPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/message-center/messages/${encodeURIComponent(String(_messageId))}/reply`;
    }
    postMessages(requestParameters, observe = 'body', reportProgress = false, options) {
        const _presentationMessagePostRequestBody = requestParameters["presentationMessagePostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v5/message-center/messages`, _presentationMessagePostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postMessagesUrl(requestParameters) {
        const _presentationMessagePostRequestBody = requestParameters["presentationMessagePostRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/message-center/messages`;
    }
    putConversationMessageDraft(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling putConversationMessageDraft.');
        }
        const _conversationMessageDraftPutRequestBody = requestParameters["conversationMessageDraftPutRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v5/message-center/messages/${encodeURIComponent(String(_messageId))}/conversation/drafts`, _conversationMessageDraftPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putConversationMessageDraftUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling putConversationMessageDraft.');
        }
        const _conversationMessageDraftPutRequestBody = requestParameters["conversationMessageDraftPutRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/message-center/messages/${encodeURIComponent(String(_messageId))}/conversation/drafts`;
    }
    putMarkAsReadUnread(requestParameters, observe = 'body', reportProgress = false, options) {
        const _markAsReadUnreadPutRequestBody = requestParameters["markAsReadUnreadPutRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v5/message-center/messages/conversations/read`, _markAsReadUnreadPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putMarkAsReadUnreadUrl(requestParameters) {
        const _markAsReadUnreadPutRequestBody = requestParameters["markAsReadUnreadPutRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/message-center/messages/conversations/read`;
    }
    putMessageDraft(requestParameters, observe = 'body', reportProgress = false, options) {
        const _draftId = requestParameters["draftId"];
        if (_draftId === null || _draftId === undefined) {
            throw new Error('Required parameter draftId was null or undefined when calling putMessageDraft.');
        }
        const _messageDraftPutRequestBody = requestParameters["messageDraftPutRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v5/message-center/messages/drafts/${encodeURIComponent(String(_draftId))}`, _messageDraftPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putMessageDraftUrl(requestParameters) {
        const _draftId = requestParameters["draftId"];
        if (_draftId === null || _draftId === undefined) {
            throw new Error('Required parameter draftId was null or undefined when calling putMessageDraft.');
        }
        const _messageDraftPutRequestBody = requestParameters["messageDraftPutRequestBody"];
        return `${this.configuration.basePath}/client-api/v5/message-center/messages/drafts/${encodeURIComponent(String(_draftId))}`;
    }
}
MessagecenterHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: MessagecenterHttpService, deps: [{ token: i1.HttpClient }, { token: MESSAGES_BASE_PATH, optional: true }, { token: MessagesConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
MessagecenterHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: MessagecenterHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: MessagecenterHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MESSAGES_BASE_PATH]
                }] }, { type: MessagesConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const MessagecenterHttpServiceDeleteConversationThreadsMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/message-center/messages/conversations",
        method: "DELETE",
        responses: [
            {
                status: 200,
                body: {
                    "deletedItems": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                    "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    }]);
const MessagecenterHttpServiceDeleteMessageAttachmentsMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/message-center/attachments",
        method: "DELETE",
        responses: [
            {
                status: 200,
                body: {
                    "deleted": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                    "failed": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const MessagecenterHttpServiceDeleteMessageDraftsMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/message-center/messages/drafts",
        method: "DELETE",
        responses: [
            {
                status: 200,
                body: {
                    "deleted": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                    "failed": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                }
            },
        ]
    }]);
const MessagecenterHttpServiceGetConversationThreadsMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/message-center/messages/conversations",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "deletable": true,
                        "hasAttachments": true,
                        "hasDraft": true,
                        "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                        "important": false,
                        "read": false,
                        "read-only": false,
                        "sender": {
                            "deleted": false,
                            "id": "97234tyi23rfiy325r3i7r",
                            "name": "John Doe"
                        },
                        "subject": "Application Rejected",
                        "timestamp": "2017-10-02T10:51:30.000+0000",
                        "topic": {
                            "deleted": false,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Savings"
                        }
                    }, {
                        "deletable": true,
                        "hasAttachments": false,
                        "hasDraft": false,
                        "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9",
                        "important": false,
                        "read": true,
                        "read-only": false,
                        "sender": {
                            "deleted": false,
                            "id": "97234tyi23rfiy325r3i8o",
                            "name": "John Snow"
                        },
                        "subject": "Loan Rejected",
                        "timestamp": "2019-01-02T10:51:30.000+0000",
                        "topic": {
                            "deleted": true,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064b7",
                            "name": "Loan rejected"
                        }
                    }, {
                        "deletable": true,
                        "hasAttachments": true,
                        "hasDraft": false,
                        "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395b7",
                        "important": true,
                        "read": false,
                        "read-only": false,
                        "sender": {
                            "deleted": false,
                            "id": "97234tyi23rfiy325r3i7r",
                            "name": "John Doe"
                        },
                        "subject": "Application Rejected",
                        "timestamp": "2017-10-02T10:51:30.000+0000",
                        "topic": {
                            "deleted": false,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Savings"
                        }
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    }]);
const MessagecenterHttpServiceGetMessageAttachmentMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/message-center/attachments/{attachmentId}",
        method: "GET",
        responses: [
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const MessagecenterHttpServiceGetMessageDraftMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/message-center/messages/drafts/{draftId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "attachments": [{
                            "createdAt": "2017-10-02T10:51:50.000+0000",
                            "filename": "message-attachment-filename.pdf",
                            "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                            "size": 2592836
                        }, {
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "filename": "another-message-attachment-filename.pdf",
                            "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                            "size": 15982836
                        }],
                    "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                    "id": "754cd7fd-a9dd-489e-9933-4f0ef556a5cd",
                    "subject": "Draft subject",
                    "timestamp": "2019-11-18T10:51:50.000+0000",
                    "topic": {
                        "deleted": false,
                        "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                        "name": "Mortgage application"
                    }
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const MessagecenterHttpServiceGetMessageDraftsMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/message-center/messages/drafts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                        "conversationId": "f57684de-2a63-4646-ace3-bf83b3ef74ct",
                        "hasAttachments": false,
                        "id": "7da6b793-bb3b-411d-b10e-21c0ca205cb2",
                        "subject": "Conversation with draft",
                        "timestamp": "2019-11-18T11:23:50.000+0000",
                        "topic": {
                            "deleted": false,
                            "id": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                            "name": "Problems with making a payment"
                        }
                    }, {
                        "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                        "hasAttachments": true,
                        "id": "754cd7fd-a9dd-489e-9933-4f0ef556a5cd",
                        "subject": "Draft subject",
                        "timestamp": "2019-11-17T10:51:50.000+0000",
                        "topic": {
                            "deleted": false,
                            "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                            "name": "Mortgage application"
                        }
                    }, {
                        "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                        "hasAttachments": false,
                        "id": "f57684de-2a63-4646-ace3-bf83b3ef74cc",
                        "subject": "Draft 2 subject",
                        "timestamp": "2019-11-18T11:23:50.000+0000",
                        "topic": {
                            "deleted": false,
                            "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                            "name": "Mortgage application"
                        }
                    }, {
                        "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                        "conversationId": "f57684de-2a63-4646-ace3-bf83b3ef74ce",
                        "hasAttachments": true,
                        "id": "f29d7a93-337b-4bb4-856d-5a65ba4d1038",
                        "subject": "Conversation with draft 2",
                        "timestamp": "2019-11-18T11:23:50.000+0000",
                        "topic": {
                            "deleted": false,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Loans"
                        }
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    }]);
const MessagecenterHttpServiceGetMessageThreadMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/message-center/messages/{messageId}/conversation",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "attachments": [{
                            "createdAt": "2017-10-02T10:51:50.000+0000",
                            "filename": "message-attachment-filename.pdf",
                            "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                            "size": 2592836
                        }, {
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "filename": "another-message-attachment-filename.pdf",
                            "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                            "size": 15982836
                        }],
                    "deletable": true,
                    "draft": {
                        "attachments": [{
                                "createdAt": "2017-10-10T17:21:30.000+0000",
                                "filename": "draft-message-attachment-filename.pdf",
                                "id": "1b4e4fa5-51b7-4907-b130-ea4f26e36a3d",
                                "size": 15982836
                            }],
                        "body": "VGhlIGNhc3RsZSB3YXMgdXNlZCBhcyBhIHNwZWNpYWwgc3RhZ2UgaW4gdGhlIDxiPjIwMTM8L2I+IFdhbGVzIFJhbGx5IEdCLiA8ZGl2PjxpPjxiPjx1Pjxicj48L3U+PC9iPjwvaT48L2Rpdj48ZGl2PjxpPjxiPjx1PlRoZSBPYWsgYXQgdGhlIEdhdGUgb2YgdGhlIERlYWQ8L3U+PC9iPjwvaT4gbGllcyAzMDBtIGZyb20gPGI+Q2hpcmsgQ2FzdGxlPC9iPiBhbmQgbWFya3MgdGhlIHNpdGUgb2YgdGhlIDExNjUgPGI+QmF0dGxlIG9mIENyb2dlbjwvYj4uPC9kaXY+",
                        "createdAt": "2017-10-10T17:51:35.000+0000",
                        "id": "jfg94kf-f4ed-4a6e-bc19-6ennt17395e3"
                    },
                    "important": true,
                    "messages": [{
                            "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                            "isMyMessage": true,
                            "sender": {
                                "id": "97234tyi23rfiy325r3i7r",
                                "name": "John Doe"
                            }
                        }, {
                            "body": "PGRpdj48b2w+PGxpPkNhc3RsZXMgaW4gR3JlYXQgQnJpdGFpbiBhbmQgSXJlbGFuZDxicj48L2xpPjxsaT5MaXN0IG9mIGNhc3RsZXMgaW4gV2FsZXM8YnI+PC9saT48bGk+TGlzdCBvZiBnYXJkZW5zIGluIFdhbGVzPGJyPjwvbGk+PC9vbD48L2Rpdj4=",
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e1",
                            "isMyMessage": false,
                            "sender": {
                                "id": "97234tyi23rfiy325r3i72",
                                "name": "John Doe 2"
                            }
                        }, {
                            "attachments": [{
                                    "createdAt": "2017-10-02T10:51:50.000+0000",
                                    "filename": "message-attachment-filename.pdf",
                                    "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                                    "size": 2592836
                                }],
                            "body": "PGRpdj48b2w+PGxpPiA8Yj4iQ2hpcmsgQ2FzdGxlLCBDaGlyayI8L2I+LiBCcml0aXNoIExpc3RlZCBidWlsZGluZ3MuIFJldHJpZXZlZCAyMyBKdWx5IDIwMTUuPGJyPjwvbGk+PGxpPiA8Yj4iQ2hpcmsgQ2FzdGxlIOKAkyBPZmZpY2lhbCBHdWlkZWJvb2siLjwvYj4gQ2FzdGxlIFdhbGVzLjxicj48L2xpPjxsaT4gPGI+IkNoaXJrIENhc3RsZSIuPC9iPiBOYXRpb25hbCBUcnVzdC48YnI+PC9saT48bGk+IDxiPiJUaGUgT2FrIGF0IHRoZSBHYXRlIG9mIHRoZSBEZWFkIjwvYj4uIFBlb3BsZSdzIENvbGxlY3Rpb24gV2FsZXMuIFJldHJpZXZlZCAxIE1hcmNoIDIwMTguPGJyPjwvbGk+PC9vbD48L2Rpdj4=",
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e2",
                            "isMyMessage": true,
                            "sender": {
                                "id": "97234tyi23rfiy325r3i73",
                                "name": "John Doe 3"
                            }
                        }, {
                            "attachments": [{
                                    "createdAt": "2017-10-02T10:51:30.000+0000",
                                    "filename": "another-message-attachment-filename.pdf",
                                    "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                                    "size": 15982836
                                }],
                            "body": "VGhlIGNhc3RsZSB3YXMgdXNlZCBhcyBhIHNwZWNpYWwgc3RhZ2UgaW4gdGhlIDxiPjIwMTM8L2I+IFdhbGVzIFJhbGx5IEdCLiA8ZGl2PjxpPjxiPjx1Pjxicj48L3U+PC9iPjwvaT48L2Rpdj48ZGl2PjxpPjxiPjx1PlRoZSBPYWsgYXQgdGhlIEdhdGUgb2YgdGhlIERlYWQ8L3U+PC9iPjwvaT4gbGllcyAzMDBtIGZyb20gPGI+Q2hpcmsgQ2FzdGxlPC9iPiBhbmQgbWFya3MgdGhlIHNpdGUgb2YgdGhlIDExNjUgPGI+QmF0dGxlIG9mIENyb2dlbjwvYj4uPC9kaXY+",
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e3",
                            "isMyMessage": false,
                            "sender": {
                                "id": "97234tyi23rfiy325r3i74",
                                "name": "John Doe 4"
                            }
                        }],
                    "read": false,
                    "read-only": false,
                    "rootMessageId": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                    "subject": "Application Rejected (your efforts are futile)",
                    "topic": {
                        "deleted": false,
                        "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                        "name": "Savings"
                    }
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const MessagecenterHttpServiceGetTopicsMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/message-center/topics",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "code": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                        "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                        "name": "Mortgage application"
                    }, {
                        "code": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                        "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                        "name": "Loans"
                    }, {
                        "code": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                        "id": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                        "name": "Problems with making a payment"
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    }]);
const MessagecenterHttpServiceGetUnreadConversationsCountMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/message-center/messages/unread-conversation-count",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "unreadCount": 5
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    }]);
const MessagecenterHttpServicePostConversationMessageDraftMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/message-center/messages/{messageId}/conversation/drafts",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "754cd7fd-a9dd-489e-9933-4f0ef556a5cd"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const MessagecenterHttpServicePostMessageAttachmentsMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/message-center/attachments",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "createdAt": "2017-10-02T10:51:30.000+0000",
                    "filename": "message-attachment-filename.pdf",
                    "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                    "size": 15982836
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const MessagecenterHttpServicePostMessageDraftsMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/message-center/messages/drafts",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "754cd7fd-a9dd-489e-9933-4f0ef556a5cd"
                }
            },
            {
                status: 201,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "id": "id"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    }]);
const MessagecenterHttpServicePostMessageReplyMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/message-center/messages/{messageId}/reply",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "2ca7990f-bcda-4eba-8763-03bf7c66cf3f"
                }
            },
            {
                status: 201,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "id": "id"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const MessagecenterHttpServicePostMessagesMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/message-center/messages",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "2ca7990f-bcda-4eba-8763-03bf7c66cf3f"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const MessagecenterHttpServicePutConversationMessageDraftMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/message-center/messages/{messageId}/conversation/drafts",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {}
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const MessagecenterHttpServicePutMarkAsReadUnreadMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/message-center/messages/conversations/read",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "changedItems": ["ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395b7"],
                    "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const MessagecenterHttpServicePutMessageDraftMocksProvider = createMocks([{
        urlPattern: "/client-api/v5/message-center/messages/drafts/{draftId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {}
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const MessagecenterHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v5/message-center/messages/conversations",
        method: "DELETE",
        responses: [
            {
                status: 200,
                body: {
                    "deletedItems": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                    "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/message-center/attachments",
        method: "DELETE",
        responses: [
            {
                status: 200,
                body: {
                    "deleted": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                    "failed": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/message-center/messages/drafts",
        method: "DELETE",
        responses: [
            {
                status: 200,
                body: {
                    "deleted": ["e92bbe7d-10cf-4d7c-b7b5-eadb7632812a", "58ee5037-8dce-43ab-b734-e2b90a189b81"],
                    "failed": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/message-center/messages/conversations",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "deletable": true,
                        "hasAttachments": true,
                        "hasDraft": true,
                        "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                        "important": false,
                        "read": false,
                        "read-only": false,
                        "sender": {
                            "deleted": false,
                            "id": "97234tyi23rfiy325r3i7r",
                            "name": "John Doe"
                        },
                        "subject": "Application Rejected",
                        "timestamp": "2017-10-02T10:51:30.000+0000",
                        "topic": {
                            "deleted": false,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Savings"
                        }
                    }, {
                        "deletable": true,
                        "hasAttachments": false,
                        "hasDraft": false,
                        "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9",
                        "important": false,
                        "read": true,
                        "read-only": false,
                        "sender": {
                            "deleted": false,
                            "id": "97234tyi23rfiy325r3i8o",
                            "name": "John Snow"
                        },
                        "subject": "Loan Rejected",
                        "timestamp": "2019-01-02T10:51:30.000+0000",
                        "topic": {
                            "deleted": true,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064b7",
                            "name": "Loan rejected"
                        }
                    }, {
                        "deletable": true,
                        "hasAttachments": true,
                        "hasDraft": false,
                        "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395b7",
                        "important": true,
                        "read": false,
                        "read-only": false,
                        "sender": {
                            "deleted": false,
                            "id": "97234tyi23rfiy325r3i7r",
                            "name": "John Doe"
                        },
                        "subject": "Application Rejected",
                        "timestamp": "2017-10-02T10:51:30.000+0000",
                        "topic": {
                            "deleted": false,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Savings"
                        }
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/message-center/attachments/{attachmentId}",
        method: "GET",
        responses: [
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/message-center/messages/drafts/{draftId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "attachments": [{
                            "createdAt": "2017-10-02T10:51:50.000+0000",
                            "filename": "message-attachment-filename.pdf",
                            "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                            "size": 2592836
                        }, {
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "filename": "another-message-attachment-filename.pdf",
                            "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                            "size": 15982836
                        }],
                    "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                    "id": "754cd7fd-a9dd-489e-9933-4f0ef556a5cd",
                    "subject": "Draft subject",
                    "timestamp": "2019-11-18T10:51:50.000+0000",
                    "topic": {
                        "deleted": false,
                        "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                        "name": "Mortgage application"
                    }
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/message-center/messages/drafts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                        "conversationId": "f57684de-2a63-4646-ace3-bf83b3ef74ct",
                        "hasAttachments": false,
                        "id": "7da6b793-bb3b-411d-b10e-21c0ca205cb2",
                        "subject": "Conversation with draft",
                        "timestamp": "2019-11-18T11:23:50.000+0000",
                        "topic": {
                            "deleted": false,
                            "id": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                            "name": "Problems with making a payment"
                        }
                    }, {
                        "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                        "hasAttachments": true,
                        "id": "754cd7fd-a9dd-489e-9933-4f0ef556a5cd",
                        "subject": "Draft subject",
                        "timestamp": "2019-11-17T10:51:50.000+0000",
                        "topic": {
                            "deleted": false,
                            "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                            "name": "Mortgage application"
                        }
                    }, {
                        "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                        "hasAttachments": false,
                        "id": "f57684de-2a63-4646-ace3-bf83b3ef74cc",
                        "subject": "Draft 2 subject",
                        "timestamp": "2019-11-18T11:23:50.000+0000",
                        "topic": {
                            "deleted": false,
                            "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                            "name": "Mortgage application"
                        }
                    }, {
                        "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                        "conversationId": "f57684de-2a63-4646-ace3-bf83b3ef74ce",
                        "hasAttachments": true,
                        "id": "f29d7a93-337b-4bb4-856d-5a65ba4d1038",
                        "subject": "Conversation with draft 2",
                        "timestamp": "2019-11-18T11:23:50.000+0000",
                        "topic": {
                            "deleted": false,
                            "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                            "name": "Loans"
                        }
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/message-center/messages/{messageId}/conversation",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "attachments": [{
                            "createdAt": "2017-10-02T10:51:50.000+0000",
                            "filename": "message-attachment-filename.pdf",
                            "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                            "size": 2592836
                        }, {
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "filename": "another-message-attachment-filename.pdf",
                            "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                            "size": 15982836
                        }],
                    "deletable": true,
                    "draft": {
                        "attachments": [{
                                "createdAt": "2017-10-10T17:21:30.000+0000",
                                "filename": "draft-message-attachment-filename.pdf",
                                "id": "1b4e4fa5-51b7-4907-b130-ea4f26e36a3d",
                                "size": 15982836
                            }],
                        "body": "VGhlIGNhc3RsZSB3YXMgdXNlZCBhcyBhIHNwZWNpYWwgc3RhZ2UgaW4gdGhlIDxiPjIwMTM8L2I+IFdhbGVzIFJhbGx5IEdCLiA8ZGl2PjxpPjxiPjx1Pjxicj48L3U+PC9iPjwvaT48L2Rpdj48ZGl2PjxpPjxiPjx1PlRoZSBPYWsgYXQgdGhlIEdhdGUgb2YgdGhlIERlYWQ8L3U+PC9iPjwvaT4gbGllcyAzMDBtIGZyb20gPGI+Q2hpcmsgQ2FzdGxlPC9iPiBhbmQgbWFya3MgdGhlIHNpdGUgb2YgdGhlIDExNjUgPGI+QmF0dGxlIG9mIENyb2dlbjwvYj4uPC9kaXY+",
                        "createdAt": "2017-10-10T17:51:35.000+0000",
                        "id": "jfg94kf-f4ed-4a6e-bc19-6ennt17395e3"
                    },
                    "important": true,
                    "messages": [{
                            "body": "VGhlIGNhc3RsZSB3YXMgYnVpbHQgaW4gPGI+MTI5NTwvYj4gYnkgPHU+Um9nZXIgTW9ydGltZXIgZGUgQ2hpcms8L3U+LCB1bmNsZSBvZiA8dT5Sb2dlciBNb3J0aW1lcjwvdT4sIDFzdCBFYXJsIG9mIE1hcmNoIGFzIHBhcnQgb2YgS2luZyBFZHdhcmQgSSdzIGNoYWluIG9mIGZvcnRyZXNzZXMgYWNyb3NzIHRoZSBub3J0aCBvZiBXYWxlcy4gPGRpdj5JdCBndWFyZHMgdGhlIGVudHJhbmNlIHRvIHRoZSA8dT5DZWlyaW9nIFZhbGxleTwvdT4uIDxkaXY+SXQgd2FzIHRoZSBhZG1pbmlzdHJhdGl2ZSBjZW50cmUgZm9yIHRoZSA8dT5NYXJjaGVyIExvcmRzaGlwIG9mIENoaXJrbGFuZDwvdT4uPC9kaXY+PC9kaXY+",
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                            "isMyMessage": true,
                            "sender": {
                                "id": "97234tyi23rfiy325r3i7r",
                                "name": "John Doe"
                            }
                        }, {
                            "body": "PGRpdj48b2w+PGxpPkNhc3RsZXMgaW4gR3JlYXQgQnJpdGFpbiBhbmQgSXJlbGFuZDxicj48L2xpPjxsaT5MaXN0IG9mIGNhc3RsZXMgaW4gV2FsZXM8YnI+PC9saT48bGk+TGlzdCBvZiBnYXJkZW5zIGluIFdhbGVzPGJyPjwvbGk+PC9vbD48L2Rpdj4=",
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e1",
                            "isMyMessage": false,
                            "sender": {
                                "id": "97234tyi23rfiy325r3i72",
                                "name": "John Doe 2"
                            }
                        }, {
                            "attachments": [{
                                    "createdAt": "2017-10-02T10:51:50.000+0000",
                                    "filename": "message-attachment-filename.pdf",
                                    "id": "5d869ea0-d3a3-4b83-888f-767bdcdcd565",
                                    "size": 2592836
                                }],
                            "body": "PGRpdj48b2w+PGxpPiA8Yj4iQ2hpcmsgQ2FzdGxlLCBDaGlyayI8L2I+LiBCcml0aXNoIExpc3RlZCBidWlsZGluZ3MuIFJldHJpZXZlZCAyMyBKdWx5IDIwMTUuPGJyPjwvbGk+PGxpPiA8Yj4iQ2hpcmsgQ2FzdGxlIOKAkyBPZmZpY2lhbCBHdWlkZWJvb2siLjwvYj4gQ2FzdGxlIFdhbGVzLjxicj48L2xpPjxsaT4gPGI+IkNoaXJrIENhc3RsZSIuPC9iPiBOYXRpb25hbCBUcnVzdC48YnI+PC9saT48bGk+IDxiPiJUaGUgT2FrIGF0IHRoZSBHYXRlIG9mIHRoZSBEZWFkIjwvYj4uIFBlb3BsZSdzIENvbGxlY3Rpb24gV2FsZXMuIFJldHJpZXZlZCAxIE1hcmNoIDIwMTguPGJyPjwvbGk+PC9vbD48L2Rpdj4=",
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e2",
                            "isMyMessage": true,
                            "sender": {
                                "id": "97234tyi23rfiy325r3i73",
                                "name": "John Doe 3"
                            }
                        }, {
                            "attachments": [{
                                    "createdAt": "2017-10-02T10:51:30.000+0000",
                                    "filename": "another-message-attachment-filename.pdf",
                                    "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                                    "size": 15982836
                                }],
                            "body": "VGhlIGNhc3RsZSB3YXMgdXNlZCBhcyBhIHNwZWNpYWwgc3RhZ2UgaW4gdGhlIDxiPjIwMTM8L2I+IFdhbGVzIFJhbGx5IEdCLiA8ZGl2PjxpPjxiPjx1Pjxicj48L3U+PC9iPjwvaT48L2Rpdj48ZGl2PjxpPjxiPjx1PlRoZSBPYWsgYXQgdGhlIEdhdGUgb2YgdGhlIERlYWQ8L3U+PC9iPjwvaT4gbGllcyAzMDBtIGZyb20gPGI+Q2hpcmsgQ2FzdGxlPC9iPiBhbmQgbWFya3MgdGhlIHNpdGUgb2YgdGhlIDExNjUgPGI+QmF0dGxlIG9mIENyb2dlbjwvYj4uPC9kaXY+",
                            "createdAt": "2017-10-02T10:51:30.000+0000",
                            "id": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e3",
                            "isMyMessage": false,
                            "sender": {
                                "id": "97234tyi23rfiy325r3i74",
                                "name": "John Doe 4"
                            }
                        }],
                    "read": false,
                    "read-only": false,
                    "rootMessageId": "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7",
                    "subject": "Application Rejected (your efforts are futile)",
                    "topic": {
                        "deleted": false,
                        "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                        "name": "Savings"
                    }
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/message-center/topics",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "code": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                        "id": "40219526-aa79-4a81-a0a5-ffd12ffed8a3",
                        "name": "Mortgage application"
                    }, {
                        "code": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                        "id": "b0069a89-3dcb-4bdc-b7da-fc65643064a6",
                        "name": "Loans"
                    }, {
                        "code": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                        "id": "4fb026ec-62e5-41c8-aa28-149d7544b704",
                        "name": "Problems with making a payment"
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/message-center/messages/unread-conversation-count",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "unreadCount": 5
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/message-center/messages/{messageId}/conversation/drafts",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "754cd7fd-a9dd-489e-9933-4f0ef556a5cd"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/message-center/attachments",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "createdAt": "2017-10-02T10:51:30.000+0000",
                    "filename": "message-attachment-filename.pdf",
                    "id": "ae4658a4-073c-4d8b-ab5d-55e9238d3ff0",
                    "size": 15982836
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/message-center/messages/drafts",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "754cd7fd-a9dd-489e-9933-4f0ef556a5cd"
                }
            },
            {
                status: 201,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "id": "id"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/message-center/messages/{messageId}/reply",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "2ca7990f-bcda-4eba-8763-03bf7c66cf3f"
                }
            },
            {
                status: 201,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "id": "id"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/message-center/messages",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "2ca7990f-bcda-4eba-8763-03bf7c66cf3f"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/message-center/messages/{messageId}/conversation/drafts",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {}
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/message-center/messages/conversations/read",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "changedItems": ["ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395e7", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395b7"],
                    "failedItems": ["b0069a89-3dcb-4bdc-b7da-fc65643064a6", "ae9f9fdd-f4ed-4a6e-bc19-9eeeb17395c9"]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v5/message-center/messages/drafts/{draftId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {}
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);

export { COLLECTION_FORMATS, CONFIG_TOKEN, EmployeeHttpService, EmployeeHttpServiceDeleteConversationAssignmentMocksProvider, EmployeeHttpServiceDeleteMessageAttachmentsEmployeeMocksProvider, EmployeeHttpServiceDeleteSubscriptionMocksProvider, EmployeeHttpServiceDeleteTopicMocksProvider, EmployeeHttpServiceGetConversationThreadsEmployeeMocksProvider, EmployeeHttpServiceGetConversationsCounterMocksProvider, EmployeeHttpServiceGetConversationsReportMocksProvider, EmployeeHttpServiceGetEmployeeMessageThreadMocksProvider, EmployeeHttpServiceGetMessageAttachmentEmployeeMocksProvider, EmployeeHttpServiceGetSearchConversationsMocksProvider, EmployeeHttpServiceGetSubscriptionsMocksProvider, EmployeeHttpServiceGetTopicMocksProvider, EmployeeHttpServiceGetTopicsEmployeeMocksProvider, EmployeeHttpServiceMocksProvider, EmployeeHttpServicePostMessageAttachmentsEmployeeMocksProvider, EmployeeHttpServicePostMessageReplyEmployeeMocksProvider, EmployeeHttpServicePostMessagesEmployeeMocksProvider, EmployeeHttpServicePostSubscribersMocksProvider, EmployeeHttpServicePostSubscriptionsMocksProvider, EmployeeHttpServicePostTopicsMocksProvider, EmployeeHttpServicePutAssignConversationMocksProvider, EmployeeHttpServicePutConversationAssignmentMocksProvider, EmployeeHttpServicePutConversationResolutionEmployeeMocksProvider, EmployeeHttpServicePutConversationResolutionMocksProvider, EmployeeHttpServicePutMarkAsReadUnreadEmployeeMocksProvider, EmployeeHttpServicePutMessageThreadTopicMocksProvider, EmployeeHttpServicePutTopicMocksProvider, MESSAGES_BASE_PATH, MailoutHttpService, MailoutHttpServiceDeleteMailoutMocksProvider, MailoutHttpServiceGetMailoutMocksProvider, MailoutHttpServiceGetMailoutsMocksProvider, MailoutHttpServiceMocksProvider, MailoutHttpServicePostMailoutMocksProvider, MailoutHttpServicePostMailoutPreviewMocksProvider, MailoutStatus, MarkAsReadUnreadPutRequestBody, MessagecenterHttpService, MessagecenterHttpServiceDeleteConversationThreadsMocksProvider, MessagecenterHttpServiceDeleteMessageAttachmentsMocksProvider, MessagecenterHttpServiceDeleteMessageDraftsMocksProvider, MessagecenterHttpServiceGetConversationThreadsMocksProvider, MessagecenterHttpServiceGetMessageAttachmentMocksProvider, MessagecenterHttpServiceGetMessageDraftMocksProvider, MessagecenterHttpServiceGetMessageDraftsMocksProvider, MessagecenterHttpServiceGetMessageThreadMocksProvider, MessagecenterHttpServiceGetTopicsMocksProvider, MessagecenterHttpServiceGetUnreadConversationsCountMocksProvider, MessagecenterHttpServiceMocksProvider, MessagecenterHttpServicePostConversationMessageDraftMocksProvider, MessagecenterHttpServicePostMessageAttachmentsMocksProvider, MessagecenterHttpServicePostMessageDraftsMocksProvider, MessagecenterHttpServicePostMessageReplyMocksProvider, MessagecenterHttpServicePostMessagesMocksProvider, MessagecenterHttpServicePutConversationMessageDraftMocksProvider, MessagecenterHttpServicePutMarkAsReadUnreadMocksProvider, MessagecenterHttpServicePutMessageDraftMocksProvider, MessagesApiModule, MessagesConfiguration, WorkflowStatus };
//# sourceMappingURL=backbase-messages-v5-http-ang.js.map
