import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { MailoutBase } from '../model/models';
import { MailoutGetResponseBody } from '../model/models';
import { MailoutPostRequestBody } from '../model/models';
import { MailoutPostResponseBody } from '../model/models';
import { MailoutPreviewRequestBody } from '../model/models';
import { MailoutPreviewResponseBody } from '../model/models';
import { MessagesConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteMailoutRequestParams {
    ["mailoutId"]: string;
}
export interface GetMailoutRequestParams {
    ["mailoutId"]: string;
}
export interface GetMailoutsRequestParams {
    ["from"]?: number;
    ["size"]?: number;
}
export interface PostMailoutRequestParams {
    ["mailoutPostRequestBody"]?: MailoutPostRequestBody;
}
export interface PostMailoutPreviewRequestParams {
    ["mailoutPreviewRequestBody"]?: MailoutPreviewRequestBody;
}
export declare class MailoutHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: MessagesConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: MessagesConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deleteMailout(requestParameters: DeleteMailoutRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteMailout(requestParameters: DeleteMailoutRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteMailout(requestParameters: DeleteMailoutRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteMailoutUrl(requestParameters: DeleteMailoutRequestParams): string;
    getMailout(requestParameters: GetMailoutRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<MailoutGetResponseBody>;
    getMailout(requestParameters: GetMailoutRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<MailoutGetResponseBody>>;
    getMailout(requestParameters: GetMailoutRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<MailoutGetResponseBody>>;
    getMailoutUrl(requestParameters: GetMailoutRequestParams): string;
    getMailouts(requestParameters: GetMailoutsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<MailoutBase>>;
    getMailouts(requestParameters: GetMailoutsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<MailoutBase>>>;
    getMailouts(requestParameters: GetMailoutsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<MailoutBase>>>;
    getMailoutsUrl(requestParameters: GetMailoutsRequestParams): string;
    postMailout(requestParameters: PostMailoutRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<MailoutPostResponseBody>;
    postMailout(requestParameters: PostMailoutRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<MailoutPostResponseBody>>;
    postMailout(requestParameters: PostMailoutRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<MailoutPostResponseBody>>;
    postMailoutUrl(requestParameters: PostMailoutRequestParams): string;
    postMailoutPreview(requestParameters: PostMailoutPreviewRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<MailoutPreviewResponseBody>;
    postMailoutPreview(requestParameters: PostMailoutPreviewRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<MailoutPreviewResponseBody>>;
    postMailoutPreview(requestParameters: PostMailoutPreviewRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<MailoutPreviewResponseBody>>;
    postMailoutPreviewUrl(requestParameters: PostMailoutPreviewRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<MailoutHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MailoutHttpService>;
}
