import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ConversationAssignmentDeleteResponseBody } from '../model/models';
import { ConversationCounterResponseBody } from '../model/models';
import { ConversationsThread } from '../model/models';
import { DeleteResponseBody } from '../model/models';
import { EmployeeConversationThread } from '../model/models';
import { ExtendedTopicsPostResponseBody } from '../model/models';
import { MarkAsReadUnreadPutRequestBody } from '../model/models';
import { MarkAsReadUnreadPutResponseBody } from '../model/models';
import { MessageReplyPostRequestBody } from '../model/models';
import { MessageThreadAssignmentRequestBody } from '../model/models';
import { MessageThreadAssignmentResponseBody } from '../model/models';
import { MessageThreadBulkAssignmentRequestBody } from '../model/models';
import { MessageThreadBulkAssignmentResponseBody } from '../model/models';
import { MessageThreadBulkResolutionRequestBody } from '../model/models';
import { MessageThreadBulkResolutionResponseBody } from '../model/models';
import { MessageThreadResolutionRequestBody } from '../model/models';
import { MessageThreadResolutionResponseBody } from '../model/models';
import { MessageThreadsReport } from '../model/models';
import { Metadata } from '../model/models';
import { PresentationMessageEmployeePostRequestBody } from '../model/models';
import { PresentationMessagePostResponseBody } from '../model/models';
import { SubscribersPostRequestBody } from '../model/models';
import { SubscribersPostResponseBody } from '../model/models';
import { SubscriptionsGetResponseBody } from '../model/models';
import { SubscriptionsPostRequestBody } from '../model/models';
import { SubscriptionsPostResponseBody } from '../model/models';
import { TopicGetResponseBody } from '../model/models';
import { TopicPutRequestBody } from '../model/models';
import { TopicPutResponseBody } from '../model/models';
import { TopicsGetEmployeeResponseBody } from '../model/models';
import { TopicsPostRequestBody } from '../model/models';
import { UpdateMessageTopicRequestBody } from '../model/models';
import { WorkflowStatus } from '../model/models';
import { MessagesConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteConversationAssignmentRequestParams {
    ["ids"]: Array<string>;
}
export interface DeleteMessageAttachmentsEmployeeRequestParams {
    ["ids"]: Array<string>;
}
export interface DeleteSubscriptionRequestParams {
    ["subscriptionId"]: string;
    ["topicId"]: string;
}
export interface DeleteTopicRequestParams {
    ["topicId"]: string;
}
export interface GetConversationThreadsEmployeeRequestParams {
    ["mailboxType"]?: string;
    ["viewType"]?: string;
    ["from"]?: number;
    ["size"]?: number;
    ["orderBy"]?: string;
    ["direction"]?: 'ASC' | 'DESC';
}
export interface GetConversationsReportRequestParams {
    ["startDate"]?: string;
    ["endDate"]?: string;
    ["clientId"]?: string;
    ["clientFullName"]?: string;
    ["category"]?: string;
    ["status"]?: WorkflowStatus;
    ["from"]?: number;
    ["size"]?: number;
}
export interface GetEmployeeMessageThreadRequestParams {
    ["messageId"]: string;
}
export interface GetMessageAttachmentEmployeeRequestParams {
    ["attachmentId"]: string;
}
export interface GetSearchConversationsRequestParams {
    ["userId"]?: string;
    ["topicId"]?: string;
    ["startDate"]?: string;
    ["endDate"]?: string;
    ["from"]?: number;
    ["size"]?: number;
}
export interface GetSubscriptionsRequestParams {
    ["topicId"]: string;
    ["subscriberName"]?: string;
    ["from"]?: number;
    ["size"]?: number;
}
export interface GetTopicRequestParams {
    ["topicId"]: string;
}
export interface GetTopicsEmployeeRequestParams {
    ["subscribed"]?: boolean;
    ["deleted"]?: boolean;
    ["topicType"]?: string;
    ["from"]?: number;
    ["size"]?: number;
}
export interface PostMessageAttachmentsEmployeeRequestParams {
    ["attachment"]?: Blob;
}
export interface PostMessageReplyEmployeeRequestParams {
    ["messageId"]: string;
    ["messageReplyPostRequestBody"]?: MessageReplyPostRequestBody;
}
export interface PostMessagesEmployeeRequestParams {
    ["presentationMessageEmployeePostRequestBody"]?: PresentationMessageEmployeePostRequestBody;
}
export interface PostSubscribersRequestParams {
    ["topicId"]: string;
    ["subscribersPostRequestBody"]?: SubscribersPostRequestBody;
}
export interface PostSubscriptionsRequestParams {
    ["topicId"]: string;
    ["subscriptionsPostRequestBody"]?: SubscriptionsPostRequestBody;
}
export interface PostTopicsRequestParams {
    ["topicsPostRequestBody"]?: TopicsPostRequestBody;
}
export interface PutAssignConversationRequestParams {
    ["messageId"]: string;
    ["messageThreadAssignmentRequestBody"]?: MessageThreadAssignmentRequestBody;
}
export interface PutConversationAssignmentRequestParams {
    ["messageThreadBulkAssignmentRequestBody"]?: MessageThreadBulkAssignmentRequestBody;
}
export interface PutConversationResolutionRequestParams {
    ["messageId"]: string;
    ["messageThreadResolutionRequestBody"]?: MessageThreadResolutionRequestBody;
}
export interface PutConversationResolutionEmployeeRequestParams {
    ["messageThreadBulkResolutionRequestBody"]?: MessageThreadBulkResolutionRequestBody;
}
export interface PutMarkAsReadUnreadEmployeeRequestParams {
    ["markAsReadUnreadPutRequestBody"]?: MarkAsReadUnreadPutRequestBody;
}
export interface PutMessageThreadTopicRequestParams {
    ["messageId"]: string;
    ["updateMessageTopicRequestBody"]?: UpdateMessageTopicRequestBody;
}
export interface PutTopicRequestParams {
    ["topicId"]: string;
    ["xBBSVCRequestId"]?: string;
    ["topicPutRequestBody"]?: TopicPutRequestBody;
}
export declare class EmployeeHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: MessagesConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: MessagesConfiguration);
    private canConsumeForm;
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deleteConversationAssignment(requestParameters: DeleteConversationAssignmentRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ConversationAssignmentDeleteResponseBody>;
    deleteConversationAssignment(requestParameters: DeleteConversationAssignmentRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ConversationAssignmentDeleteResponseBody>>;
    deleteConversationAssignment(requestParameters: DeleteConversationAssignmentRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ConversationAssignmentDeleteResponseBody>>;
    deleteConversationAssignmentUrl(requestParameters: DeleteConversationAssignmentRequestParams): string;
    deleteMessageAttachmentsEmployee(requestParameters: DeleteMessageAttachmentsEmployeeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<DeleteResponseBody>;
    deleteMessageAttachmentsEmployee(requestParameters: DeleteMessageAttachmentsEmployeeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<DeleteResponseBody>>;
    deleteMessageAttachmentsEmployee(requestParameters: DeleteMessageAttachmentsEmployeeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<DeleteResponseBody>>;
    deleteMessageAttachmentsEmployeeUrl(requestParameters: DeleteMessageAttachmentsEmployeeRequestParams): string;
    deleteSubscription(requestParameters: DeleteSubscriptionRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteSubscription(requestParameters: DeleteSubscriptionRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteSubscription(requestParameters: DeleteSubscriptionRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteSubscriptionUrl(requestParameters: DeleteSubscriptionRequestParams): string;
    deleteTopic(requestParameters: DeleteTopicRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteTopic(requestParameters: DeleteTopicRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteTopic(requestParameters: DeleteTopicRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteTopicUrl(requestParameters: DeleteTopicRequestParams): string;
    getConversationThreadsEmployee(requestParameters: GetConversationThreadsEmployeeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<EmployeeConversationThread>>;
    getConversationThreadsEmployee(requestParameters: GetConversationThreadsEmployeeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<EmployeeConversationThread>>>;
    getConversationThreadsEmployee(requestParameters: GetConversationThreadsEmployeeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<EmployeeConversationThread>>>;
    getConversationThreadsEmployeeUrl(requestParameters: GetConversationThreadsEmployeeRequestParams): string;
    getConversationsCounter(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ConversationCounterResponseBody>;
    getConversationsCounter(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ConversationCounterResponseBody>>;
    getConversationsCounter(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ConversationCounterResponseBody>>;
    getConversationsCounterUrl(): string;
    getConversationsReport(requestParameters: GetConversationsReportRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<MessageThreadsReport>>;
    getConversationsReport(requestParameters: GetConversationsReportRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<MessageThreadsReport>>>;
    getConversationsReport(requestParameters: GetConversationsReportRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<MessageThreadsReport>>>;
    getConversationsReportUrl(requestParameters: GetConversationsReportRequestParams): string;
    getEmployeeMessageThread(requestParameters: GetEmployeeMessageThreadRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ConversationsThread>;
    getEmployeeMessageThread(requestParameters: GetEmployeeMessageThreadRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ConversationsThread>>;
    getEmployeeMessageThread(requestParameters: GetEmployeeMessageThreadRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ConversationsThread>>;
    getEmployeeMessageThreadUrl(requestParameters: GetEmployeeMessageThreadRequestParams): string;
    getMessageAttachmentEmployee(requestParameters: GetMessageAttachmentEmployeeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/octet-stream';
    }): Observable<Blob>;
    getMessageAttachmentEmployee(requestParameters: GetMessageAttachmentEmployeeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/octet-stream';
    }): Observable<HttpResponse<Blob>>;
    getMessageAttachmentEmployee(requestParameters: GetMessageAttachmentEmployeeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/octet-stream';
    }): Observable<HttpEvent<Blob>>;
    getMessageAttachmentEmployee(requestParameters: GetMessageAttachmentEmployeeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Blob>;
    getMessageAttachmentEmployee(requestParameters: GetMessageAttachmentEmployeeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Blob>>;
    getMessageAttachmentEmployee(requestParameters: GetMessageAttachmentEmployeeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Blob>>;
    getMessageAttachmentEmployeeUrl(requestParameters: GetMessageAttachmentEmployeeRequestParams): string;
    getSearchConversations(requestParameters: GetSearchConversationsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<EmployeeConversationThread>>;
    getSearchConversations(requestParameters: GetSearchConversationsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<EmployeeConversationThread>>>;
    getSearchConversations(requestParameters: GetSearchConversationsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<EmployeeConversationThread>>>;
    getSearchConversationsUrl(requestParameters: GetSearchConversationsRequestParams): string;
    getSubscriptions(requestParameters: GetSubscriptionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<SubscriptionsGetResponseBody>>;
    getSubscriptions(requestParameters: GetSubscriptionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<SubscriptionsGetResponseBody>>>;
    getSubscriptions(requestParameters: GetSubscriptionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<SubscriptionsGetResponseBody>>>;
    getSubscriptionsUrl(requestParameters: GetSubscriptionsRequestParams): string;
    getTopic(requestParameters: GetTopicRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<TopicGetResponseBody>;
    getTopic(requestParameters: GetTopicRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<TopicGetResponseBody>>;
    getTopic(requestParameters: GetTopicRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<TopicGetResponseBody>>;
    getTopicUrl(requestParameters: GetTopicRequestParams): string;
    getTopicsEmployee(requestParameters: GetTopicsEmployeeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<TopicsGetEmployeeResponseBody>>;
    getTopicsEmployee(requestParameters: GetTopicsEmployeeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<TopicsGetEmployeeResponseBody>>>;
    getTopicsEmployee(requestParameters: GetTopicsEmployeeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<TopicsGetEmployeeResponseBody>>>;
    getTopicsEmployeeUrl(requestParameters: GetTopicsEmployeeRequestParams): string;
    postMessageAttachmentsEmployee(requestParameters: PostMessageAttachmentsEmployeeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Metadata>;
    postMessageAttachmentsEmployee(requestParameters: PostMessageAttachmentsEmployeeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Metadata>>;
    postMessageAttachmentsEmployee(requestParameters: PostMessageAttachmentsEmployeeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Metadata>>;
    postMessageAttachmentsEmployeeUrl(requestParameters: PostMessageAttachmentsEmployeeRequestParams): string;
    postMessageReplyEmployee(requestParameters: PostMessageReplyEmployeeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationMessagePostResponseBody>;
    postMessageReplyEmployee(requestParameters: PostMessageReplyEmployeeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationMessagePostResponseBody>>;
    postMessageReplyEmployee(requestParameters: PostMessageReplyEmployeeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationMessagePostResponseBody>>;
    postMessageReplyEmployeeUrl(requestParameters: PostMessageReplyEmployeeRequestParams): string;
    postMessagesEmployee(requestParameters: PostMessagesEmployeeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationMessagePostResponseBody>;
    postMessagesEmployee(requestParameters: PostMessagesEmployeeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationMessagePostResponseBody>>;
    postMessagesEmployee(requestParameters: PostMessagesEmployeeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationMessagePostResponseBody>>;
    postMessagesEmployeeUrl(requestParameters: PostMessagesEmployeeRequestParams): string;
    postSubscribers(requestParameters: PostSubscribersRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<SubscribersPostResponseBody>>;
    postSubscribers(requestParameters: PostSubscribersRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<SubscribersPostResponseBody>>>;
    postSubscribers(requestParameters: PostSubscribersRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<SubscribersPostResponseBody>>>;
    postSubscribersUrl(requestParameters: PostSubscribersRequestParams): string;
    postSubscriptions(requestParameters: PostSubscriptionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<SubscriptionsPostResponseBody>;
    postSubscriptions(requestParameters: PostSubscriptionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<SubscriptionsPostResponseBody>>;
    postSubscriptions(requestParameters: PostSubscriptionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<SubscriptionsPostResponseBody>>;
    postSubscriptionsUrl(requestParameters: PostSubscriptionsRequestParams): string;
    postTopics(requestParameters: PostTopicsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ExtendedTopicsPostResponseBody>;
    postTopics(requestParameters: PostTopicsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ExtendedTopicsPostResponseBody>>;
    postTopics(requestParameters: PostTopicsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ExtendedTopicsPostResponseBody>>;
    postTopicsUrl(requestParameters: PostTopicsRequestParams): string;
    putAssignConversation(requestParameters: PutAssignConversationRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<MessageThreadAssignmentResponseBody>;
    putAssignConversation(requestParameters: PutAssignConversationRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<MessageThreadAssignmentResponseBody>>;
    putAssignConversation(requestParameters: PutAssignConversationRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<MessageThreadAssignmentResponseBody>>;
    putAssignConversationUrl(requestParameters: PutAssignConversationRequestParams): string;
    putConversationAssignment(requestParameters: PutConversationAssignmentRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<MessageThreadBulkAssignmentResponseBody>;
    putConversationAssignment(requestParameters: PutConversationAssignmentRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<MessageThreadBulkAssignmentResponseBody>>;
    putConversationAssignment(requestParameters: PutConversationAssignmentRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<MessageThreadBulkAssignmentResponseBody>>;
    putConversationAssignmentUrl(requestParameters: PutConversationAssignmentRequestParams): string;
    putConversationResolution(requestParameters: PutConversationResolutionRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<MessageThreadResolutionResponseBody>;
    putConversationResolution(requestParameters: PutConversationResolutionRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<MessageThreadResolutionResponseBody>>;
    putConversationResolution(requestParameters: PutConversationResolutionRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<MessageThreadResolutionResponseBody>>;
    putConversationResolutionUrl(requestParameters: PutConversationResolutionRequestParams): string;
    putConversationResolutionEmployee(requestParameters: PutConversationResolutionEmployeeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<MessageThreadBulkResolutionResponseBody>;
    putConversationResolutionEmployee(requestParameters: PutConversationResolutionEmployeeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<MessageThreadBulkResolutionResponseBody>>;
    putConversationResolutionEmployee(requestParameters: PutConversationResolutionEmployeeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<MessageThreadBulkResolutionResponseBody>>;
    putConversationResolutionEmployeeUrl(requestParameters: PutConversationResolutionEmployeeRequestParams): string;
    putMarkAsReadUnreadEmployee(requestParameters: PutMarkAsReadUnreadEmployeeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<MarkAsReadUnreadPutResponseBody>;
    putMarkAsReadUnreadEmployee(requestParameters: PutMarkAsReadUnreadEmployeeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<MarkAsReadUnreadPutResponseBody>>;
    putMarkAsReadUnreadEmployee(requestParameters: PutMarkAsReadUnreadEmployeeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<MarkAsReadUnreadPutResponseBody>>;
    putMarkAsReadUnreadEmployeeUrl(requestParameters: PutMarkAsReadUnreadEmployeeRequestParams): string;
    putMessageThreadTopic(requestParameters: PutMessageThreadTopicRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    putMessageThreadTopic(requestParameters: PutMessageThreadTopicRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    putMessageThreadTopic(requestParameters: PutMessageThreadTopicRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    putMessageThreadTopicUrl(requestParameters: PutMessageThreadTopicRequestParams): string;
    putTopic(requestParameters: PutTopicRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<TopicPutResponseBody>;
    putTopic(requestParameters: PutTopicRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<TopicPutResponseBody>>;
    putTopic(requestParameters: PutTopicRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<TopicPutResponseBody>>;
    putTopicUrl(requestParameters: PutTopicRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<EmployeeHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<EmployeeHttpService>;
}
