import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const BillOfLadingIssuanceType = {
    OrderOfShipper: 'To the order of shipper',
    OrderOf: 'To the order of',
    Party: 'To the party'
};

const CertificateOfOriginIssuer = {
    Beneficiary: 'Beneficiary',
    ChamberOfCommerce: 'Chamber of commerce',
    OfficialAuthority: 'Official authority',
    Other: 'Other'
};

const ConfirmingBankPresence = {
    PRESENT: 'PRESENT',
    NOTPRESENT: 'NOT_PRESENT',
    MAYBEADDEDBYISSUINGBANK: 'MAY_BE_ADDED_BY_ISSUING_BANK'
};

const DeliveryConditions = {
    _2000: 'Incoterms 2000',
    _2010: 'Incoterms 2010',
    _2020: 'Incoterms 2020'
};

const DocumentPresentationCondition = {
    Sight: 'Sight',
    ShipmentDate: 'Shipment date',
    InvoiceDate: 'Invoice date',
    Other: 'Other'
};

const Drawee = {
    ISSUINGBANK: 'ISSUING_BANK',
    ADVISINGBANK: 'ADVISING_BANK',
    APPLICANT: 'APPLICANT',
    OTHER: 'OTHER'
};

const FeePayingParty = {
    Me: 'Me',
    Beneficiary: 'Beneficiary'
};

const FeePayingStrategy = {
    IPayAllFees: 'I pay all fees',
    FeesSplitBetweenMeAndBeneficiary: 'Fees split between me and beneficiary',
    BeneficiaryPaysAllFees: 'Beneficiary pays all fees'
};

const FileType = {
    ApplicationPdf: 'application/pdf',
    ImagePng: 'image/png',
    ImageJpeg: 'image/jpeg'
};

const FreightMark = {
    Prepaid: 'Prepaid',
    Collect: 'Collect'
};

const ImportTransactionType = {
    ImportLC: 'Import LC'
};

const Incoterms2000 = {
    EXW: 'EXW',
    FCA: 'FCA',
    FAS: 'FAS',
    FOB: 'FOB',
    CFR: 'CFR',
    CIF: 'CIF',
    CPT: 'CPT',
    CIP: 'CIP',
    DAF: 'DAF',
    DES: 'DES',
    DEQ: 'DEQ',
    DDU: 'DDU',
    DDP: 'DDP'
};

const Incoterms2010 = {
    EXW: 'EXW',
    FCA: 'FCA',
    FAS: 'FAS',
    FOB: 'FOB',
    CFR: 'CFR',
    CIF: 'CIF',
    CIP: 'CIP',
    CPT: 'CPT',
    DAT: 'DAT',
    DAP: 'DAP',
    DDP: 'DDP'
};

const Incoterms2020 = {
    EXW: 'EXW',
    FCA: 'FCA',
    FAS: 'FAS',
    FOB: 'FOB',
    CFR: 'CFR',
    CIF: 'CIF',
    CPT: 'CPT',
    CIP: 'CIP',
    DAP: 'DAP',
    DPU: 'DPU',
    DDP: 'DDP'
};

var LetterOfCreditActions;
(function (LetterOfCreditActions) {
    LetterOfCreditActions.ActionsEnum = {
        VIEW: 'VIEW',
        MODIFY: 'MODIFY',
        CANCEL: 'CANCEL'
    };
})(LetterOfCreditActions || (LetterOfCreditActions = {}));

var LetterOfCreditRequest;
(function (LetterOfCreditRequest) {
    LetterOfCreditRequest.SortOrderEnum = {
        ASC: 'ASC',
        DESC: 'DESC'
    };
})(LetterOfCreditRequest || (LetterOfCreditRequest = {}));

const LetterOfCreditStatus = {
    Draft: 'Draft',
    Unauthorized: 'Unauthorized',
    Review: 'Review',
    Authorized: 'Authorized',
    BankReview: 'Bank review',
    Unapproved: 'Unapproved',
    Issued: 'Issued',
    Rejected: 'Rejected',
    Expired: 'Expired',
    Closed: 'Closed'
};

const LetterOfCreditType = {
    Irrevocable: 'Irrevocable',
    IrrevocableTransferable: 'Irrevocable Transferable',
    Straight: 'Straight',
    Negotiable: 'Negotiable',
    Restricted: 'Restricted'
};

const NotifyPartyType = {
    Applicant: 'Applicant',
    Other: 'Other'
};

const PartialShipment = {
    Yes: 'Yes',
    No: 'No',
    Conditional: 'Conditional'
};

const SeaTransportDocumentType = {
    BillOfLading: 'Bill of Lading',
    MultimodalTransportDocument: 'Multimodal Transport Document',
    CharterPartyBillOfLading: 'Charter party Bill of Lading',
    NonNegotiableSeaWayBill: 'Non-negotiable Sea Way Bill'
};

const SettlementAvailability = {
    AdvisingBank: 'Advising Bank',
    ConfirmingBank: 'Confirming Bank',
    AnyBank: 'Any Bank',
    AdviseThroughBank: 'Advise Through Bank',
    IssuingBank: 'Issuing Bank',
    ReimbursingBank: 'Reimbursing Bank',
    Other: 'Other'
};

const SettlementType = {
    UsanceAcceptance: 'Usance - Acceptance',
    UsanceDeferredPayment: 'Usance - Deferred payment',
    UsanceNegotiation: 'Usance - Negotiation',
    SightSightPayment: 'Sight - Sight payment',
    SightNegotiation: 'Sight - Negotiation',
    OtherMixedPayment: 'Other - Mixed payment'
};

const TenorFromDate = {
    Sight: 'Sight',
    ShipmentDate: 'Shipment date',
    InvoiceDate: 'Invoice date',
    Other: 'Other'
};

const TransportMethod = {
    SeaTransport: 'Sea transport',
    AirTransport: 'Air transport',
    RoadTransport: 'Road transport',
    RailTransport: 'Rail transport',
    OtherTransport: 'Other transport'
};

const Transshipment = {
    Yes: 'Yes',
    No: 'No',
    Conditional: 'Conditional'
};

const LETTER_OF_CREDIT_BASE_PATH = new InjectionToken('LETTER_OF_CREDIT_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class LetterOfCreditConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module LetterOfCreditConfiguration');

class LetterOfCreditApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('LetterOfCreditApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: LetterOfCreditApiModule,
            providers: [{ provide: LetterOfCreditConfiguration, useFactory: configurationFactory }]
        };
    }
}
LetterOfCreditApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LetterOfCreditApiModule, deps: [{ token: LetterOfCreditApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: LetterOfCreditConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
LetterOfCreditApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LetterOfCreditApiModule });
LetterOfCreditApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LetterOfCreditApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LetterOfCreditApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: LetterOfCreditApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: LetterOfCreditConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class LetterOfCreditClientService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/api/letter-of-credit';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new LetterOfCreditConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getLettersOfCredit(requestParameters, observe = 'body', reportProgress = false, options) {
        const _filterParams = requestParameters["filterParams"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_filterParams !== undefined && _filterParams !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _filterParams, 'filterParams');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/letters-of-credit`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getLettersOfCreditUrl(requestParameters) {
        const _filterParams = requestParameters["filterParams"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_filterParams !== undefined && _filterParams !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _filterParams, 'filterParams');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/letters-of-credit${queryString ? `?${queryString}` : ''}`;
    }
    getLettersOfCreditActions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling getLettersOfCreditActions.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            queryParameters = this.addToHttpParams(queryParameters, _ids.join(COLLECTION_FORMATS['csv']), 'ids');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/letters-of-credit/actions`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getLettersOfCreditActionsUrl(requestParameters) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling getLettersOfCreditActions.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            queryParameters = this.addToHttpParams(queryParameters, _ids.join(COLLECTION_FORMATS['csv']), 'ids');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/letters-of-credit/actions${queryString ? `?${queryString}` : ''}`;
    }
    getLettersOfCreditApprovals(requestParameters, observe = 'body', reportProgress = false, options) {
        const _filterParams = requestParameters["filterParams"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_filterParams !== undefined && _filterParams !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _filterParams, 'filterParams');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/letters-of-credit/approvals`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getLettersOfCreditApprovalsUrl(requestParameters) {
        const _filterParams = requestParameters["filterParams"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_filterParams !== undefined && _filterParams !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _filterParams, 'filterParams');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/letters-of-credit/approvals${queryString ? `?${queryString}` : ''}`;
    }
}
LetterOfCreditClientService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LetterOfCreditClientService, deps: [{ token: i1.HttpClient }, { token: LETTER_OF_CREDIT_BASE_PATH, optional: true }, { token: LetterOfCreditConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
LetterOfCreditClientService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LetterOfCreditClientService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LetterOfCreditClientService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LETTER_OF_CREDIT_BASE_PATH]
                }] }, { type: LetterOfCreditConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const LetterOfCreditClientServiceGetLettersOfCreditMocksProvider = createMocks([{
        urlPattern: "/api/letter-of-credit/client-api/v1/letters-of-credit",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "uuid": "1234-asdf-4567-qwert",
                        "caseKey": "1234-asdf-4567-qwert",
                        "referenceNumber": "GA-123456789",
                        "internalReferenceNumber": "int-ref-test",
                        "creationDate": "2020-10-10T12:12:12.000Z",
                        "type": "Irrevocable",
                        "status": "Unauthorized",
                        "expiryDate": "2020-12-10",
                        "expirationCity": "Amsterdam",
                        "expirationCountry": "The Netherlands",
                        "currencyCode": "EUR",
                        "totalAmount": "50000.00",
                        "amountTolerance": {
                            "positive": "2.5",
                            "negative": "2.5"
                        },
                        "additionalAmountCovered": "Additional charges - 1100 EUR",
                        "applicant": {
                            "legalEntityId": "1234567-12312-123123",
                            "legalName": "Importazioni italiane LLC",
                            "email": "test@export.com",
                            "legalAddress": {
                                "addressLine1": "Via Rutto, 23",
                                "city": "Roma",
                                "postalCode": "00187",
                                "country": "Italy"
                            }
                        },
                        "beneficiary": {
                            "legalEntityId": "1234567-12312-1475aaa",
                            "legalName": "Umbrella Netherlands BV",
                            "email": "test@umbrella.com",
                            "legalAddress": {
                                "addressLine1": "Herengraht, 21",
                                "city": "Amsterdam",
                                "postalCode": "1008DG",
                                "country": "The Netherlands"
                            }
                        },
                        "issuingBank": {
                            "legalEntityId": "b2cd61c2-23b7-4817-5a45",
                            "legalName": "Banco emisor",
                            "businessIdentifierCode": "MIDLXXGB22",
                            "email": "test@emisor.com",
                            "legalAddress": {
                                "addressLine1": "Av. de Cantabia",
                                "city": "Boadilla del Monte",
                                "postalCode": "28660",
                                "country": "Spain"
                            }
                        },
                        "advisingBank": {
                            "legalEntityId": "e2as61c2-12b5-1111-5a47",
                            "legalName": "Consigliare la Banca",
                            "businessIdentifierCode": "456789123",
                            "email": "test@consigliare.com",
                            "legalAddress": {
                                "addressLine1": "Via Irnerio, 14",
                                "city": "Bologna",
                                "postalCode": "40121",
                                "country": "Italy"
                            }
                        },
                        "confirmingBankPresence": "PRESENT",
                        "confirmingBank": {
                            "legalEntityId": "d76s6ac2-12b5-000f-5a12",
                            "legalName": "Confermando la Banca",
                            "businessIdentifierCode": "789123456",
                            "email": "test@confermando.com",
                            "legalAddress": {
                                "addressLine1": "Via Del Cestello, 46",
                                "city": "Bologna",
                                "postalCode": "40124",
                                "country": "Italy"
                            }
                        },
                        "attachments": [{
                                "uuid": "550e8400-e29b-41d4-a716-446655440000",
                                "type": "PDF",
                                "name": "invoice",
                                "size": 130
                            }],
                        "settlement": {
                            "settlementBy": "Other - Mixed payment",
                            "mixedPaymentDetails": "50 percent of the total lc value payable at sight",
                            "availableWith": "Advising Bank",
                            "tenorDays": "30",
                            "tenorFromDate": "Shipment date",
                            "requiresDraft": "true",
                            "drawee": "OTHER",
                            "draweeName": "Confirming bank"
                        },
                        "shipment": {
                            "shippedFrom": "Utrecht, The Netherlands",
                            "shippedTo": "Kyiv, Ukraine",
                            "shippingPort": "Port of Rotterdam",
                            "destinationPort": "Odessa",
                            "partialShipment": "Conditional",
                            "partialShipmentCondition": "Only if cargo doesn't suit standard 20ft",
                            "transshipment": "Yes",
                            "transshipmentCondition": "Transshipment is fulfilled in Valencia",
                            "latestShipmentDate": "2021-05-23",
                            "productDescription": "Carrot",
                            "deliveryConditions": "Incoterms 2000",
                            "termOfDelivery": "DDU",
                            "deliveryPlace": "Kyiv"
                        },
                        "requestedDocuments": {
                            "commercialInvoice": {
                                "numberOfOriginals": 3,
                                "numberOfCopies": 3
                            },
                            "transportDocument": {
                                "transportMethod": "Sea transport",
                                "seaTransportDocumentDetails": {
                                    "documentType": "Bill of Lading",
                                    "freightMark": "Prepaid",
                                    "billOfLadingIssuanceDetails": {
                                        "issuanceType": "To the order of",
                                        "issuanceDetails": "Consignee"
                                    }
                                },
                                "notifyParty": {
                                    "notifyPartyType": "Other",
                                    "notifyPartyName": "Alice"
                                }
                            },
                            "packingListEnabled": true,
                            "packingList": {
                                "numberOfOriginals": 3,
                                "numberOfCopies": 3
                            },
                            "certificateOfOriginEnabled": true,
                            "certificateOfOrigin": {
                                "countryOfOrigin": "Ukraine",
                                "issuer": "Other",
                                "issuerName": "Consignee",
                                "numberOfOriginals": 3,
                                "numberOfCopies": 3
                            },
                            "inspectionCertificateEnabled": true,
                            "insuranceCertificateEnabled": true,
                            "insuranceCertificate": {
                                "coverage": 100,
                                "riskCoverageDetails": "Full coverage"
                            },
                            "phytosanitaryCertificateEnabled": true,
                            "legalisedCommercialDocumentsEnabled": true,
                            "billOfExchangeEnabled": true,
                            "additionalDocuments": [{
                                    "name": "Commercial contract",
                                    "comment": "Supplement commercial contract"
                                }, {
                                    "name": "Addendum",
                                    "comment": "Addendum to the commercial contract, 2 copies"
                                }],
                            "documentConditions": {
                                "presentationPeriod": 30,
                                "presentationCondition": "Other",
                                "presentationConditionDetails": "Only originals are considered valid",
                                "additionalConditions": [{
                                        "condition": "Documents should be sent by the carrier"
                                    }, {
                                        "condition": "Shipping insurance at the shipper's expense"
                                    }]
                            }
                        },
                        "feesDetails": {
                            "feePayingStrategy": "Fees split between me and beneficiary",
                            "insuranceFeePayingParty": "Beneficiary",
                            "confirmingFeePayingParty": "Me",
                            "otherFeePayingParty": "Me",
                            "bankAccount": {
                                "arrangementId": "b2ab66c1-11b7-480f-5a17",
                                "accountName": "Corporate CDU Account",
                                "bankAccountNumber": "****4784",
                                "amount": "8459.05",
                                "currencyCode": "EUR"
                            }
                        }
                    }, {
                        "uuid": "7523-asdf-7523-qwert",
                        "caseKey": "7523-asdf-7523-qwert",
                        "referenceNumber": "GA-123456780",
                        "internalReferenceNumber": "int-ref-test-2",
                        "creationDate": "2020-10-10T12:12:12.000Z",
                        "type": "Irrevocable",
                        "status": "Unauthorized",
                        "expiryDate": "2020-12-10",
                        "expirationCity": "Amsterdam",
                        "expirationCountry": "The Netherlands",
                        "currencyCode": "EUR",
                        "totalAmount": "10000.00",
                        "amountTolerance": {
                            "positive": "2.5",
                            "negative": "2.5"
                        },
                        "additionalAmountCovered": "Additional charges - 1100 EUR",
                        "applicant": {
                            "legalEntityId": "1234567-12312-123123",
                            "legalName": "Importazioni italiane LLC",
                            "email": "test@export.com",
                            "legalAddress": {
                                "addressLine1": "Via Rutto, 23",
                                "city": "Roma",
                                "postalCode": "00187",
                                "country": "Italy"
                            }
                        },
                        "beneficiary": {
                            "legalEntityId": "1234567-12312-1475aaa",
                            "legalName": "Umbrella Netherlands BV",
                            "email": "test@umbrella.com",
                            "legalAddress": {
                                "addressLine1": "Herengraht, 21",
                                "city": "Amsterdam",
                                "postalCode": "1008DG",
                                "country": "The Netherlands"
                            }
                        },
                        "issuingBank": {
                            "legalEntityId": "b2cd61c2-23b7-4817-5a45",
                            "legalName": "Banco emisor",
                            "businessIdentifierCode": "MIDLXXGB22",
                            "email": "test@emisor.com",
                            "legalAddress": {
                                "addressLine1": "Av. de Cantabia",
                                "city": "Boadilla del Monte",
                                "postalCode": "28660",
                                "country": "Spain"
                            }
                        },
                        "advisingBank": {
                            "legalEntityId": "e2as61c2-12b5-1111-5a47",
                            "legalName": "Consigliare la Banca",
                            "businessIdentifierCode": "456789123",
                            "email": "test@consigliare.com",
                            "legalAddress": {
                                "addressLine1": "Via Irnerio, 14",
                                "city": "Bologna",
                                "postalCode": "40121",
                                "country": "Italy"
                            }
                        },
                        "confirmingBankPresence": "PRESENT",
                        "confirmingBank": {
                            "legalEntityId": "d76s6ac2-12b5-000f-5a12",
                            "legalName": "Confermando la Banca",
                            "businessIdentifierCode": "789123456",
                            "email": "test@confermando.com",
                            "legalAddress": {
                                "addressLine1": "Via Del Cestello, 46",
                                "city": "Bologna",
                                "postalCode": "40124",
                                "country": "Italy"
                            }
                        },
                        "attachments": [{
                                "uuid": "550e8400-e29b-41d4-a716-446655440001",
                                "type": "PDF",
                                "name": "invoice",
                                "size": 130
                            }],
                        "settlement": {
                            "settlementBy": "Other - Mixed payment",
                            "mixedPaymentDetails": "50 percent of the total lc value payable at sight",
                            "availableWith": "Advising Bank",
                            "tenorDays": "30",
                            "tenorFromDate": "Shipment date",
                            "requiresDraft": "true",
                            "drawee": "OTHER",
                            "draweeName": "Confirming bank"
                        },
                        "shipment": {
                            "shippedFrom": "Utrecht, The Netherlands",
                            "shippedTo": "Kyiv, Ukraine",
                            "shippingPort": "Port of Rotterdam",
                            "destinationPort": "Odessa",
                            "partialShipment": "Conditional",
                            "partialShipmentCondition": "Only if cargo doesn't suit standard 20ft",
                            "transshipment": "Yes",
                            "transshipmentCondition": "Transshipment is fulfilled in Valencia",
                            "latestShipmentDate": "2021-05-23",
                            "productDescription": "Carrot",
                            "deliveryConditions": "Incoterms 2000",
                            "termOfDelivery": "DDU",
                            "deliveryPlace": "Kyiv"
                        },
                        "requestedDocuments": {
                            "commercialInvoice": {
                                "numberOfOriginals": 3,
                                "numberOfCopies": 3
                            },
                            "transportDocument": {
                                "transportMethod": "Sea transport",
                                "seaTransportDocumentDetails": {
                                    "documentType": "Bill of Lading",
                                    "freightMark": "Prepaid",
                                    "billOfLadingIssuanceDetails": {
                                        "issuanceType": "To the order of",
                                        "issuanceDetails": "Consignee"
                                    }
                                },
                                "notifyParty": {
                                    "notifyPartyType": "Other",
                                    "notifyPartyName": "Alice"
                                }
                            },
                            "packingListEnabled": true,
                            "packingList": {
                                "numberOfOriginals": 3,
                                "numberOfCopies": 3
                            },
                            "certificateOfOriginEnabled": true,
                            "certificateOfOrigin": {
                                "countryOfOrigin": "Ukraine",
                                "issuer": "Other",
                                "issuerName": "Consignee",
                                "numberOfOriginals": 3,
                                "numberOfCopies": 3
                            },
                            "inspectionCertificateEnabled": true,
                            "insuranceCertificateEnabled": true,
                            "insuranceCertificate": {
                                "coverage": 100,
                                "riskCoverageDetails": "Full coverage"
                            },
                            "phytosanitaryCertificateEnabled": true,
                            "legalisedCommercialDocumentsEnabled": true,
                            "billOfExchangeEnabled": true,
                            "additionalDocuments": [{
                                    "name": "Commercial contract",
                                    "comment": "Supplement commercial contract"
                                }, {
                                    "name": "Addendum",
                                    "comment": "Addendum to the commercial contract, 2 copies"
                                }],
                            "documentConditions": {
                                "presentationPeriod": 30,
                                "presentationCondition": "Other",
                                "presentationConditionDetails": "Only originals are considered valid",
                                "additionalConditions": [{
                                        "condition": "Documents should be sent by the carrier"
                                    }, {
                                        "condition": "Shipping insurance at the shipper's expense"
                                    }]
                            }
                        },
                        "feesDetails": {
                            "feePayingStrategy": "Fees split between me and beneficiary",
                            "insuranceFeePayingParty": "Beneficiary",
                            "confirmingFeePayingParty": "Me",
                            "otherFeePayingParty": "Me",
                            "bankAccount": {
                                "arrangementId": "b2ab66c1-11b7-480f-5a17",
                                "accountName": "Corporate CDU Account",
                                "bankAccountNumber": "****4784",
                                "amount": "8459.05",
                                "currencyCode": "EUR"
                            }
                        }
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LetterOfCreditClientServiceGetLettersOfCreditActionsMocksProvider = createMocks([{
        urlPattern: "/api/letter-of-credit/client-api/v1/letters-of-credit/actions",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "letterOfCreditId": "1234-asdf-4567-qwert",
                        "actions": ["VIEW", "MODIFY"]
                    }, {
                        "letterOfCreditId": "7523-asdf-7523-qwert",
                        "actions": ["VIEW", "MODIFY", "CANCEL"]
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LetterOfCreditClientServiceGetLettersOfCreditApprovalsMocksProvider = createMocks([{
        urlPattern: "/api/letter-of-credit/client-api/v1/letters-of-credit/approvals",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "approvalId": "1234-asdf-4567-qwert",
                        "letterOfCreditId": "1234-asdf-4567-qwert",
                        "canApprove": false,
                        "canReject": true
                    }, {
                        "approvalId": "1006-asdf-4567-AAAss",
                        "letterOfCreditId": "7523-asdf-7523-qwert",
                        "canApprove": true,
                        "canReject": true
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const LetterOfCreditClientServiceMocksProvider = createMocks([
    {
        urlPattern: "/api/letter-of-credit/client-api/v1/letters-of-credit",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "uuid": "1234-asdf-4567-qwert",
                        "caseKey": "1234-asdf-4567-qwert",
                        "referenceNumber": "GA-123456789",
                        "internalReferenceNumber": "int-ref-test",
                        "creationDate": "2020-10-10T12:12:12.000Z",
                        "type": "Irrevocable",
                        "status": "Unauthorized",
                        "expiryDate": "2020-12-10",
                        "expirationCity": "Amsterdam",
                        "expirationCountry": "The Netherlands",
                        "currencyCode": "EUR",
                        "totalAmount": "50000.00",
                        "amountTolerance": {
                            "positive": "2.5",
                            "negative": "2.5"
                        },
                        "additionalAmountCovered": "Additional charges - 1100 EUR",
                        "applicant": {
                            "legalEntityId": "1234567-12312-123123",
                            "legalName": "Importazioni italiane LLC",
                            "email": "test@export.com",
                            "legalAddress": {
                                "addressLine1": "Via Rutto, 23",
                                "city": "Roma",
                                "postalCode": "00187",
                                "country": "Italy"
                            }
                        },
                        "beneficiary": {
                            "legalEntityId": "1234567-12312-1475aaa",
                            "legalName": "Umbrella Netherlands BV",
                            "email": "test@umbrella.com",
                            "legalAddress": {
                                "addressLine1": "Herengraht, 21",
                                "city": "Amsterdam",
                                "postalCode": "1008DG",
                                "country": "The Netherlands"
                            }
                        },
                        "issuingBank": {
                            "legalEntityId": "b2cd61c2-23b7-4817-5a45",
                            "legalName": "Banco emisor",
                            "businessIdentifierCode": "MIDLXXGB22",
                            "email": "test@emisor.com",
                            "legalAddress": {
                                "addressLine1": "Av. de Cantabia",
                                "city": "Boadilla del Monte",
                                "postalCode": "28660",
                                "country": "Spain"
                            }
                        },
                        "advisingBank": {
                            "legalEntityId": "e2as61c2-12b5-1111-5a47",
                            "legalName": "Consigliare la Banca",
                            "businessIdentifierCode": "456789123",
                            "email": "test@consigliare.com",
                            "legalAddress": {
                                "addressLine1": "Via Irnerio, 14",
                                "city": "Bologna",
                                "postalCode": "40121",
                                "country": "Italy"
                            }
                        },
                        "confirmingBankPresence": "PRESENT",
                        "confirmingBank": {
                            "legalEntityId": "d76s6ac2-12b5-000f-5a12",
                            "legalName": "Confermando la Banca",
                            "businessIdentifierCode": "789123456",
                            "email": "test@confermando.com",
                            "legalAddress": {
                                "addressLine1": "Via Del Cestello, 46",
                                "city": "Bologna",
                                "postalCode": "40124",
                                "country": "Italy"
                            }
                        },
                        "attachments": [{
                                "uuid": "550e8400-e29b-41d4-a716-446655440000",
                                "type": "PDF",
                                "name": "invoice",
                                "size": 130
                            }],
                        "settlement": {
                            "settlementBy": "Other - Mixed payment",
                            "mixedPaymentDetails": "50 percent of the total lc value payable at sight",
                            "availableWith": "Advising Bank",
                            "tenorDays": "30",
                            "tenorFromDate": "Shipment date",
                            "requiresDraft": "true",
                            "drawee": "OTHER",
                            "draweeName": "Confirming bank"
                        },
                        "shipment": {
                            "shippedFrom": "Utrecht, The Netherlands",
                            "shippedTo": "Kyiv, Ukraine",
                            "shippingPort": "Port of Rotterdam",
                            "destinationPort": "Odessa",
                            "partialShipment": "Conditional",
                            "partialShipmentCondition": "Only if cargo doesn't suit standard 20ft",
                            "transshipment": "Yes",
                            "transshipmentCondition": "Transshipment is fulfilled in Valencia",
                            "latestShipmentDate": "2021-05-23",
                            "productDescription": "Carrot",
                            "deliveryConditions": "Incoterms 2000",
                            "termOfDelivery": "DDU",
                            "deliveryPlace": "Kyiv"
                        },
                        "requestedDocuments": {
                            "commercialInvoice": {
                                "numberOfOriginals": 3,
                                "numberOfCopies": 3
                            },
                            "transportDocument": {
                                "transportMethod": "Sea transport",
                                "seaTransportDocumentDetails": {
                                    "documentType": "Bill of Lading",
                                    "freightMark": "Prepaid",
                                    "billOfLadingIssuanceDetails": {
                                        "issuanceType": "To the order of",
                                        "issuanceDetails": "Consignee"
                                    }
                                },
                                "notifyParty": {
                                    "notifyPartyType": "Other",
                                    "notifyPartyName": "Alice"
                                }
                            },
                            "packingListEnabled": true,
                            "packingList": {
                                "numberOfOriginals": 3,
                                "numberOfCopies": 3
                            },
                            "certificateOfOriginEnabled": true,
                            "certificateOfOrigin": {
                                "countryOfOrigin": "Ukraine",
                                "issuer": "Other",
                                "issuerName": "Consignee",
                                "numberOfOriginals": 3,
                                "numberOfCopies": 3
                            },
                            "inspectionCertificateEnabled": true,
                            "insuranceCertificateEnabled": true,
                            "insuranceCertificate": {
                                "coverage": 100,
                                "riskCoverageDetails": "Full coverage"
                            },
                            "phytosanitaryCertificateEnabled": true,
                            "legalisedCommercialDocumentsEnabled": true,
                            "billOfExchangeEnabled": true,
                            "additionalDocuments": [{
                                    "name": "Commercial contract",
                                    "comment": "Supplement commercial contract"
                                }, {
                                    "name": "Addendum",
                                    "comment": "Addendum to the commercial contract, 2 copies"
                                }],
                            "documentConditions": {
                                "presentationPeriod": 30,
                                "presentationCondition": "Other",
                                "presentationConditionDetails": "Only originals are considered valid",
                                "additionalConditions": [{
                                        "condition": "Documents should be sent by the carrier"
                                    }, {
                                        "condition": "Shipping insurance at the shipper's expense"
                                    }]
                            }
                        },
                        "feesDetails": {
                            "feePayingStrategy": "Fees split between me and beneficiary",
                            "insuranceFeePayingParty": "Beneficiary",
                            "confirmingFeePayingParty": "Me",
                            "otherFeePayingParty": "Me",
                            "bankAccount": {
                                "arrangementId": "b2ab66c1-11b7-480f-5a17",
                                "accountName": "Corporate CDU Account",
                                "bankAccountNumber": "****4784",
                                "amount": "8459.05",
                                "currencyCode": "EUR"
                            }
                        }
                    }, {
                        "uuid": "7523-asdf-7523-qwert",
                        "caseKey": "7523-asdf-7523-qwert",
                        "referenceNumber": "GA-123456780",
                        "internalReferenceNumber": "int-ref-test-2",
                        "creationDate": "2020-10-10T12:12:12.000Z",
                        "type": "Irrevocable",
                        "status": "Unauthorized",
                        "expiryDate": "2020-12-10",
                        "expirationCity": "Amsterdam",
                        "expirationCountry": "The Netherlands",
                        "currencyCode": "EUR",
                        "totalAmount": "10000.00",
                        "amountTolerance": {
                            "positive": "2.5",
                            "negative": "2.5"
                        },
                        "additionalAmountCovered": "Additional charges - 1100 EUR",
                        "applicant": {
                            "legalEntityId": "1234567-12312-123123",
                            "legalName": "Importazioni italiane LLC",
                            "email": "test@export.com",
                            "legalAddress": {
                                "addressLine1": "Via Rutto, 23",
                                "city": "Roma",
                                "postalCode": "00187",
                                "country": "Italy"
                            }
                        },
                        "beneficiary": {
                            "legalEntityId": "1234567-12312-1475aaa",
                            "legalName": "Umbrella Netherlands BV",
                            "email": "test@umbrella.com",
                            "legalAddress": {
                                "addressLine1": "Herengraht, 21",
                                "city": "Amsterdam",
                                "postalCode": "1008DG",
                                "country": "The Netherlands"
                            }
                        },
                        "issuingBank": {
                            "legalEntityId": "b2cd61c2-23b7-4817-5a45",
                            "legalName": "Banco emisor",
                            "businessIdentifierCode": "MIDLXXGB22",
                            "email": "test@emisor.com",
                            "legalAddress": {
                                "addressLine1": "Av. de Cantabia",
                                "city": "Boadilla del Monte",
                                "postalCode": "28660",
                                "country": "Spain"
                            }
                        },
                        "advisingBank": {
                            "legalEntityId": "e2as61c2-12b5-1111-5a47",
                            "legalName": "Consigliare la Banca",
                            "businessIdentifierCode": "456789123",
                            "email": "test@consigliare.com",
                            "legalAddress": {
                                "addressLine1": "Via Irnerio, 14",
                                "city": "Bologna",
                                "postalCode": "40121",
                                "country": "Italy"
                            }
                        },
                        "confirmingBankPresence": "PRESENT",
                        "confirmingBank": {
                            "legalEntityId": "d76s6ac2-12b5-000f-5a12",
                            "legalName": "Confermando la Banca",
                            "businessIdentifierCode": "789123456",
                            "email": "test@confermando.com",
                            "legalAddress": {
                                "addressLine1": "Via Del Cestello, 46",
                                "city": "Bologna",
                                "postalCode": "40124",
                                "country": "Italy"
                            }
                        },
                        "attachments": [{
                                "uuid": "550e8400-e29b-41d4-a716-446655440001",
                                "type": "PDF",
                                "name": "invoice",
                                "size": 130
                            }],
                        "settlement": {
                            "settlementBy": "Other - Mixed payment",
                            "mixedPaymentDetails": "50 percent of the total lc value payable at sight",
                            "availableWith": "Advising Bank",
                            "tenorDays": "30",
                            "tenorFromDate": "Shipment date",
                            "requiresDraft": "true",
                            "drawee": "OTHER",
                            "draweeName": "Confirming bank"
                        },
                        "shipment": {
                            "shippedFrom": "Utrecht, The Netherlands",
                            "shippedTo": "Kyiv, Ukraine",
                            "shippingPort": "Port of Rotterdam",
                            "destinationPort": "Odessa",
                            "partialShipment": "Conditional",
                            "partialShipmentCondition": "Only if cargo doesn't suit standard 20ft",
                            "transshipment": "Yes",
                            "transshipmentCondition": "Transshipment is fulfilled in Valencia",
                            "latestShipmentDate": "2021-05-23",
                            "productDescription": "Carrot",
                            "deliveryConditions": "Incoterms 2000",
                            "termOfDelivery": "DDU",
                            "deliveryPlace": "Kyiv"
                        },
                        "requestedDocuments": {
                            "commercialInvoice": {
                                "numberOfOriginals": 3,
                                "numberOfCopies": 3
                            },
                            "transportDocument": {
                                "transportMethod": "Sea transport",
                                "seaTransportDocumentDetails": {
                                    "documentType": "Bill of Lading",
                                    "freightMark": "Prepaid",
                                    "billOfLadingIssuanceDetails": {
                                        "issuanceType": "To the order of",
                                        "issuanceDetails": "Consignee"
                                    }
                                },
                                "notifyParty": {
                                    "notifyPartyType": "Other",
                                    "notifyPartyName": "Alice"
                                }
                            },
                            "packingListEnabled": true,
                            "packingList": {
                                "numberOfOriginals": 3,
                                "numberOfCopies": 3
                            },
                            "certificateOfOriginEnabled": true,
                            "certificateOfOrigin": {
                                "countryOfOrigin": "Ukraine",
                                "issuer": "Other",
                                "issuerName": "Consignee",
                                "numberOfOriginals": 3,
                                "numberOfCopies": 3
                            },
                            "inspectionCertificateEnabled": true,
                            "insuranceCertificateEnabled": true,
                            "insuranceCertificate": {
                                "coverage": 100,
                                "riskCoverageDetails": "Full coverage"
                            },
                            "phytosanitaryCertificateEnabled": true,
                            "legalisedCommercialDocumentsEnabled": true,
                            "billOfExchangeEnabled": true,
                            "additionalDocuments": [{
                                    "name": "Commercial contract",
                                    "comment": "Supplement commercial contract"
                                }, {
                                    "name": "Addendum",
                                    "comment": "Addendum to the commercial contract, 2 copies"
                                }],
                            "documentConditions": {
                                "presentationPeriod": 30,
                                "presentationCondition": "Other",
                                "presentationConditionDetails": "Only originals are considered valid",
                                "additionalConditions": [{
                                        "condition": "Documents should be sent by the carrier"
                                    }, {
                                        "condition": "Shipping insurance at the shipper's expense"
                                    }]
                            }
                        },
                        "feesDetails": {
                            "feePayingStrategy": "Fees split between me and beneficiary",
                            "insuranceFeePayingParty": "Beneficiary",
                            "confirmingFeePayingParty": "Me",
                            "otherFeePayingParty": "Me",
                            "bankAccount": {
                                "arrangementId": "b2ab66c1-11b7-480f-5a17",
                                "accountName": "Corporate CDU Account",
                                "bankAccountNumber": "****4784",
                                "amount": "8459.05",
                                "currencyCode": "EUR"
                            }
                        }
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/api/letter-of-credit/client-api/v1/letters-of-credit/actions",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "letterOfCreditId": "1234-asdf-4567-qwert",
                        "actions": ["VIEW", "MODIFY"]
                    }, {
                        "letterOfCreditId": "7523-asdf-7523-qwert",
                        "actions": ["VIEW", "MODIFY", "CANCEL"]
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/api/letter-of-credit/client-api/v1/letters-of-credit/approvals",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "approvalId": "1234-asdf-4567-qwert",
                        "letterOfCreditId": "1234-asdf-4567-qwert",
                        "canApprove": false,
                        "canReject": true
                    }, {
                        "approvalId": "1006-asdf-4567-AAAss",
                        "letterOfCreditId": "7523-asdf-7523-qwert",
                        "canApprove": true,
                        "canReject": true
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

export { BillOfLadingIssuanceType, COLLECTION_FORMATS, CONFIG_TOKEN, CertificateOfOriginIssuer, ConfirmingBankPresence, DeliveryConditions, DocumentPresentationCondition, Drawee, FeePayingParty, FeePayingStrategy, FileType, FreightMark, ImportTransactionType, Incoterms2000, Incoterms2010, Incoterms2020, LETTER_OF_CREDIT_BASE_PATH, LetterOfCreditActions, LetterOfCreditApiModule, LetterOfCreditClientService, LetterOfCreditClientServiceGetLettersOfCreditActionsMocksProvider, LetterOfCreditClientServiceGetLettersOfCreditApprovalsMocksProvider, LetterOfCreditClientServiceGetLettersOfCreditMocksProvider, LetterOfCreditClientServiceMocksProvider, LetterOfCreditConfiguration, LetterOfCreditRequest, LetterOfCreditStatus, LetterOfCreditType, NotifyPartyType, PartialShipment, SeaTransportDocumentType, SettlementAvailability, SettlementType, TenorFromDate, TransportMethod, Transshipment };
//# sourceMappingURL=backbase-letter-of-credit-http-ang.js.map
