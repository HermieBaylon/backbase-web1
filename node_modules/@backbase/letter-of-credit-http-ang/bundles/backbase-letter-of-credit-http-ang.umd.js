(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/letter-of-credit-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["letter-of-credit-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var BillOfLadingIssuanceType = {
        OrderOfShipper: 'To the order of shipper',
        OrderOf: 'To the order of',
        Party: 'To the party'
    };

    var CertificateOfOriginIssuer = {
        Beneficiary: 'Beneficiary',
        ChamberOfCommerce: 'Chamber of commerce',
        OfficialAuthority: 'Official authority',
        Other: 'Other'
    };

    var ConfirmingBankPresence = {
        PRESENT: 'PRESENT',
        NOTPRESENT: 'NOT_PRESENT',
        MAYBEADDEDBYISSUINGBANK: 'MAY_BE_ADDED_BY_ISSUING_BANK'
    };

    var DeliveryConditions = {
        _2000: 'Incoterms 2000',
        _2010: 'Incoterms 2010',
        _2020: 'Incoterms 2020'
    };

    var DocumentPresentationCondition = {
        Sight: 'Sight',
        ShipmentDate: 'Shipment date',
        InvoiceDate: 'Invoice date',
        Other: 'Other'
    };

    var Drawee = {
        ISSUINGBANK: 'ISSUING_BANK',
        ADVISINGBANK: 'ADVISING_BANK',
        APPLICANT: 'APPLICANT',
        OTHER: 'OTHER'
    };

    var FeePayingParty = {
        Me: 'Me',
        Beneficiary: 'Beneficiary'
    };

    var FeePayingStrategy = {
        IPayAllFees: 'I pay all fees',
        FeesSplitBetweenMeAndBeneficiary: 'Fees split between me and beneficiary',
        BeneficiaryPaysAllFees: 'Beneficiary pays all fees'
    };

    var FileType = {
        ApplicationPdf: 'application/pdf',
        ImagePng: 'image/png',
        ImageJpeg: 'image/jpeg'
    };

    var FreightMark = {
        Prepaid: 'Prepaid',
        Collect: 'Collect'
    };

    var ImportTransactionType = {
        ImportLC: 'Import LC'
    };

    var Incoterms2000 = {
        EXW: 'EXW',
        FCA: 'FCA',
        FAS: 'FAS',
        FOB: 'FOB',
        CFR: 'CFR',
        CIF: 'CIF',
        CPT: 'CPT',
        CIP: 'CIP',
        DAF: 'DAF',
        DES: 'DES',
        DEQ: 'DEQ',
        DDU: 'DDU',
        DDP: 'DDP'
    };

    var Incoterms2010 = {
        EXW: 'EXW',
        FCA: 'FCA',
        FAS: 'FAS',
        FOB: 'FOB',
        CFR: 'CFR',
        CIF: 'CIF',
        CIP: 'CIP',
        CPT: 'CPT',
        DAT: 'DAT',
        DAP: 'DAP',
        DDP: 'DDP'
    };

    var Incoterms2020 = {
        EXW: 'EXW',
        FCA: 'FCA',
        FAS: 'FAS',
        FOB: 'FOB',
        CFR: 'CFR',
        CIF: 'CIF',
        CPT: 'CPT',
        CIP: 'CIP',
        DAP: 'DAP',
        DPU: 'DPU',
        DDP: 'DDP'
    };

    exports.LetterOfCreditActions = void 0;
    (function (LetterOfCreditActions) {
        LetterOfCreditActions.ActionsEnum = {
            VIEW: 'VIEW',
            MODIFY: 'MODIFY',
            CANCEL: 'CANCEL'
        };
    })(exports.LetterOfCreditActions || (exports.LetterOfCreditActions = {}));

    exports.LetterOfCreditRequest = void 0;
    (function (LetterOfCreditRequest) {
        LetterOfCreditRequest.SortOrderEnum = {
            ASC: 'ASC',
            DESC: 'DESC'
        };
    })(exports.LetterOfCreditRequest || (exports.LetterOfCreditRequest = {}));

    var LetterOfCreditStatus = {
        Draft: 'Draft',
        Unauthorized: 'Unauthorized',
        Review: 'Review',
        Authorized: 'Authorized',
        BankReview: 'Bank review',
        Unapproved: 'Unapproved',
        Issued: 'Issued',
        Rejected: 'Rejected',
        Expired: 'Expired',
        Closed: 'Closed'
    };

    var LetterOfCreditType = {
        Irrevocable: 'Irrevocable',
        IrrevocableTransferable: 'Irrevocable Transferable',
        Straight: 'Straight',
        Negotiable: 'Negotiable',
        Restricted: 'Restricted'
    };

    var NotifyPartyType = {
        Applicant: 'Applicant',
        Other: 'Other'
    };

    var PartialShipment = {
        Yes: 'Yes',
        No: 'No',
        Conditional: 'Conditional'
    };

    var SeaTransportDocumentType = {
        BillOfLading: 'Bill of Lading',
        MultimodalTransportDocument: 'Multimodal Transport Document',
        CharterPartyBillOfLading: 'Charter party Bill of Lading',
        NonNegotiableSeaWayBill: 'Non-negotiable Sea Way Bill'
    };

    var SettlementAvailability = {
        AdvisingBank: 'Advising Bank',
        ConfirmingBank: 'Confirming Bank',
        AnyBank: 'Any Bank',
        AdviseThroughBank: 'Advise Through Bank',
        IssuingBank: 'Issuing Bank',
        ReimbursingBank: 'Reimbursing Bank',
        Other: 'Other'
    };

    var SettlementType = {
        UsanceAcceptance: 'Usance - Acceptance',
        UsanceDeferredPayment: 'Usance - Deferred payment',
        UsanceNegotiation: 'Usance - Negotiation',
        SightSightPayment: 'Sight - Sight payment',
        SightNegotiation: 'Sight - Negotiation',
        OtherMixedPayment: 'Other - Mixed payment'
    };

    var TenorFromDate = {
        Sight: 'Sight',
        ShipmentDate: 'Shipment date',
        InvoiceDate: 'Invoice date',
        Other: 'Other'
    };

    var TransportMethod = {
        SeaTransport: 'Sea transport',
        AirTransport: 'Air transport',
        RoadTransport: 'Road transport',
        RailTransport: 'Rail transport',
        OtherTransport: 'Other transport'
    };

    var Transshipment = {
        Yes: 'Yes',
        No: 'No',
        Conditional: 'Conditional'
    };

    var LETTER_OF_CREDIT_BASE_PATH = new i0.InjectionToken('LETTER_OF_CREDIT_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var LetterOfCreditConfiguration = /** @class */ (function () {
        function LetterOfCreditConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        LetterOfCreditConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        LetterOfCreditConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        LetterOfCreditConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        LetterOfCreditConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return LetterOfCreditConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module LetterOfCreditConfiguration');

    var LetterOfCreditApiModule = /** @class */ (function () {
        function LetterOfCreditApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('LetterOfCreditApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        LetterOfCreditApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: LetterOfCreditApiModule,
                providers: [{ provide: LetterOfCreditConfiguration, useFactory: configurationFactory }]
            };
        };
        return LetterOfCreditApiModule;
    }());
    LetterOfCreditApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LetterOfCreditApiModule, deps: [{ token: LetterOfCreditApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: LetterOfCreditConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    LetterOfCreditApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LetterOfCreditApiModule });
    LetterOfCreditApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LetterOfCreditApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LetterOfCreditApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: LetterOfCreditApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: LetterOfCreditConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var LetterOfCreditClientService = /** @class */ (function () {
        function LetterOfCreditClientService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/api/letter-of-credit';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new LetterOfCreditConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        LetterOfCreditClientService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        LetterOfCreditClientService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        LetterOfCreditClientService.prototype.getLettersOfCredit = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _filterParams = requestParameters["filterParams"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_filterParams !== undefined && _filterParams !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _filterParams, 'filterParams');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/letters-of-credit", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LetterOfCreditClientService.prototype.getLettersOfCreditUrl = function (requestParameters) {
            var _filterParams = requestParameters["filterParams"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_filterParams !== undefined && _filterParams !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _filterParams, 'filterParams');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/letters-of-credit" + (queryString ? "?" + queryString : '');
        };
        LetterOfCreditClientService.prototype.getLettersOfCreditActions = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _ids = requestParameters["ids"];
            if (_ids === null || _ids === undefined) {
                throw new Error('Required parameter ids was null or undefined when calling getLettersOfCreditActions.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_ids) {
                queryParameters = this.addToHttpParams(queryParameters, _ids.join(COLLECTION_FORMATS['csv']), 'ids');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/letters-of-credit/actions", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LetterOfCreditClientService.prototype.getLettersOfCreditActionsUrl = function (requestParameters) {
            var _ids = requestParameters["ids"];
            if (_ids === null || _ids === undefined) {
                throw new Error('Required parameter ids was null or undefined when calling getLettersOfCreditActions.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_ids) {
                queryParameters = this.addToHttpParams(queryParameters, _ids.join(COLLECTION_FORMATS['csv']), 'ids');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/letters-of-credit/actions" + (queryString ? "?" + queryString : '');
        };
        LetterOfCreditClientService.prototype.getLettersOfCreditApprovals = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _filterParams = requestParameters["filterParams"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_filterParams !== undefined && _filterParams !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _filterParams, 'filterParams');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/letters-of-credit/approvals", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LetterOfCreditClientService.prototype.getLettersOfCreditApprovalsUrl = function (requestParameters) {
            var _filterParams = requestParameters["filterParams"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_filterParams !== undefined && _filterParams !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _filterParams, 'filterParams');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/letters-of-credit/approvals" + (queryString ? "?" + queryString : '');
        };
        return LetterOfCreditClientService;
    }());
    LetterOfCreditClientService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LetterOfCreditClientService, deps: [{ token: i1__namespace.HttpClient }, { token: LETTER_OF_CREDIT_BASE_PATH, optional: true }, { token: LetterOfCreditConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    LetterOfCreditClientService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LetterOfCreditClientService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LetterOfCreditClientService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [LETTER_OF_CREDIT_BASE_PATH]
                        }] }, { type: LetterOfCreditConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var LetterOfCreditClientServiceGetLettersOfCreditMocksProvider = i2.createMocks([{
            urlPattern: "/api/letter-of-credit/client-api/v1/letters-of-credit",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "uuid": "1234-asdf-4567-qwert",
                            "caseKey": "1234-asdf-4567-qwert",
                            "referenceNumber": "GA-123456789",
                            "internalReferenceNumber": "int-ref-test",
                            "creationDate": "2020-10-10T12:12:12.000Z",
                            "type": "Irrevocable",
                            "status": "Unauthorized",
                            "expiryDate": "2020-12-10",
                            "expirationCity": "Amsterdam",
                            "expirationCountry": "The Netherlands",
                            "currencyCode": "EUR",
                            "totalAmount": "50000.00",
                            "amountTolerance": {
                                "positive": "2.5",
                                "negative": "2.5"
                            },
                            "additionalAmountCovered": "Additional charges - 1100 EUR",
                            "applicant": {
                                "legalEntityId": "1234567-12312-123123",
                                "legalName": "Importazioni italiane LLC",
                                "email": "test@export.com",
                                "legalAddress": {
                                    "addressLine1": "Via Rutto, 23",
                                    "city": "Roma",
                                    "postalCode": "00187",
                                    "country": "Italy"
                                }
                            },
                            "beneficiary": {
                                "legalEntityId": "1234567-12312-1475aaa",
                                "legalName": "Umbrella Netherlands BV",
                                "email": "test@umbrella.com",
                                "legalAddress": {
                                    "addressLine1": "Herengraht, 21",
                                    "city": "Amsterdam",
                                    "postalCode": "1008DG",
                                    "country": "The Netherlands"
                                }
                            },
                            "issuingBank": {
                                "legalEntityId": "b2cd61c2-23b7-4817-5a45",
                                "legalName": "Banco emisor",
                                "businessIdentifierCode": "MIDLXXGB22",
                                "email": "test@emisor.com",
                                "legalAddress": {
                                    "addressLine1": "Av. de Cantabia",
                                    "city": "Boadilla del Monte",
                                    "postalCode": "28660",
                                    "country": "Spain"
                                }
                            },
                            "advisingBank": {
                                "legalEntityId": "e2as61c2-12b5-1111-5a47",
                                "legalName": "Consigliare la Banca",
                                "businessIdentifierCode": "456789123",
                                "email": "test@consigliare.com",
                                "legalAddress": {
                                    "addressLine1": "Via Irnerio, 14",
                                    "city": "Bologna",
                                    "postalCode": "40121",
                                    "country": "Italy"
                                }
                            },
                            "confirmingBankPresence": "PRESENT",
                            "confirmingBank": {
                                "legalEntityId": "d76s6ac2-12b5-000f-5a12",
                                "legalName": "Confermando la Banca",
                                "businessIdentifierCode": "789123456",
                                "email": "test@confermando.com",
                                "legalAddress": {
                                    "addressLine1": "Via Del Cestello, 46",
                                    "city": "Bologna",
                                    "postalCode": "40124",
                                    "country": "Italy"
                                }
                            },
                            "attachments": [{
                                    "uuid": "550e8400-e29b-41d4-a716-446655440000",
                                    "type": "PDF",
                                    "name": "invoice",
                                    "size": 130
                                }],
                            "settlement": {
                                "settlementBy": "Other - Mixed payment",
                                "mixedPaymentDetails": "50 percent of the total lc value payable at sight",
                                "availableWith": "Advising Bank",
                                "tenorDays": "30",
                                "tenorFromDate": "Shipment date",
                                "requiresDraft": "true",
                                "drawee": "OTHER",
                                "draweeName": "Confirming bank"
                            },
                            "shipment": {
                                "shippedFrom": "Utrecht, The Netherlands",
                                "shippedTo": "Kyiv, Ukraine",
                                "shippingPort": "Port of Rotterdam",
                                "destinationPort": "Odessa",
                                "partialShipment": "Conditional",
                                "partialShipmentCondition": "Only if cargo doesn't suit standard 20ft",
                                "transshipment": "Yes",
                                "transshipmentCondition": "Transshipment is fulfilled in Valencia",
                                "latestShipmentDate": "2021-05-23",
                                "productDescription": "Carrot",
                                "deliveryConditions": "Incoterms 2000",
                                "termOfDelivery": "DDU",
                                "deliveryPlace": "Kyiv"
                            },
                            "requestedDocuments": {
                                "commercialInvoice": {
                                    "numberOfOriginals": 3,
                                    "numberOfCopies": 3
                                },
                                "transportDocument": {
                                    "transportMethod": "Sea transport",
                                    "seaTransportDocumentDetails": {
                                        "documentType": "Bill of Lading",
                                        "freightMark": "Prepaid",
                                        "billOfLadingIssuanceDetails": {
                                            "issuanceType": "To the order of",
                                            "issuanceDetails": "Consignee"
                                        }
                                    },
                                    "notifyParty": {
                                        "notifyPartyType": "Other",
                                        "notifyPartyName": "Alice"
                                    }
                                },
                                "packingListEnabled": true,
                                "packingList": {
                                    "numberOfOriginals": 3,
                                    "numberOfCopies": 3
                                },
                                "certificateOfOriginEnabled": true,
                                "certificateOfOrigin": {
                                    "countryOfOrigin": "Ukraine",
                                    "issuer": "Other",
                                    "issuerName": "Consignee",
                                    "numberOfOriginals": 3,
                                    "numberOfCopies": 3
                                },
                                "inspectionCertificateEnabled": true,
                                "insuranceCertificateEnabled": true,
                                "insuranceCertificate": {
                                    "coverage": 100,
                                    "riskCoverageDetails": "Full coverage"
                                },
                                "phytosanitaryCertificateEnabled": true,
                                "legalisedCommercialDocumentsEnabled": true,
                                "billOfExchangeEnabled": true,
                                "additionalDocuments": [{
                                        "name": "Commercial contract",
                                        "comment": "Supplement commercial contract"
                                    }, {
                                        "name": "Addendum",
                                        "comment": "Addendum to the commercial contract, 2 copies"
                                    }],
                                "documentConditions": {
                                    "presentationPeriod": 30,
                                    "presentationCondition": "Other",
                                    "presentationConditionDetails": "Only originals are considered valid",
                                    "additionalConditions": [{
                                            "condition": "Documents should be sent by the carrier"
                                        }, {
                                            "condition": "Shipping insurance at the shipper's expense"
                                        }]
                                }
                            },
                            "feesDetails": {
                                "feePayingStrategy": "Fees split between me and beneficiary",
                                "insuranceFeePayingParty": "Beneficiary",
                                "confirmingFeePayingParty": "Me",
                                "otherFeePayingParty": "Me",
                                "bankAccount": {
                                    "arrangementId": "b2ab66c1-11b7-480f-5a17",
                                    "accountName": "Corporate CDU Account",
                                    "bankAccountNumber": "****4784",
                                    "amount": "8459.05",
                                    "currencyCode": "EUR"
                                }
                            }
                        }, {
                            "uuid": "7523-asdf-7523-qwert",
                            "caseKey": "7523-asdf-7523-qwert",
                            "referenceNumber": "GA-123456780",
                            "internalReferenceNumber": "int-ref-test-2",
                            "creationDate": "2020-10-10T12:12:12.000Z",
                            "type": "Irrevocable",
                            "status": "Unauthorized",
                            "expiryDate": "2020-12-10",
                            "expirationCity": "Amsterdam",
                            "expirationCountry": "The Netherlands",
                            "currencyCode": "EUR",
                            "totalAmount": "10000.00",
                            "amountTolerance": {
                                "positive": "2.5",
                                "negative": "2.5"
                            },
                            "additionalAmountCovered": "Additional charges - 1100 EUR",
                            "applicant": {
                                "legalEntityId": "1234567-12312-123123",
                                "legalName": "Importazioni italiane LLC",
                                "email": "test@export.com",
                                "legalAddress": {
                                    "addressLine1": "Via Rutto, 23",
                                    "city": "Roma",
                                    "postalCode": "00187",
                                    "country": "Italy"
                                }
                            },
                            "beneficiary": {
                                "legalEntityId": "1234567-12312-1475aaa",
                                "legalName": "Umbrella Netherlands BV",
                                "email": "test@umbrella.com",
                                "legalAddress": {
                                    "addressLine1": "Herengraht, 21",
                                    "city": "Amsterdam",
                                    "postalCode": "1008DG",
                                    "country": "The Netherlands"
                                }
                            },
                            "issuingBank": {
                                "legalEntityId": "b2cd61c2-23b7-4817-5a45",
                                "legalName": "Banco emisor",
                                "businessIdentifierCode": "MIDLXXGB22",
                                "email": "test@emisor.com",
                                "legalAddress": {
                                    "addressLine1": "Av. de Cantabia",
                                    "city": "Boadilla del Monte",
                                    "postalCode": "28660",
                                    "country": "Spain"
                                }
                            },
                            "advisingBank": {
                                "legalEntityId": "e2as61c2-12b5-1111-5a47",
                                "legalName": "Consigliare la Banca",
                                "businessIdentifierCode": "456789123",
                                "email": "test@consigliare.com",
                                "legalAddress": {
                                    "addressLine1": "Via Irnerio, 14",
                                    "city": "Bologna",
                                    "postalCode": "40121",
                                    "country": "Italy"
                                }
                            },
                            "confirmingBankPresence": "PRESENT",
                            "confirmingBank": {
                                "legalEntityId": "d76s6ac2-12b5-000f-5a12",
                                "legalName": "Confermando la Banca",
                                "businessIdentifierCode": "789123456",
                                "email": "test@confermando.com",
                                "legalAddress": {
                                    "addressLine1": "Via Del Cestello, 46",
                                    "city": "Bologna",
                                    "postalCode": "40124",
                                    "country": "Italy"
                                }
                            },
                            "attachments": [{
                                    "uuid": "550e8400-e29b-41d4-a716-446655440001",
                                    "type": "PDF",
                                    "name": "invoice",
                                    "size": 130
                                }],
                            "settlement": {
                                "settlementBy": "Other - Mixed payment",
                                "mixedPaymentDetails": "50 percent of the total lc value payable at sight",
                                "availableWith": "Advising Bank",
                                "tenorDays": "30",
                                "tenorFromDate": "Shipment date",
                                "requiresDraft": "true",
                                "drawee": "OTHER",
                                "draweeName": "Confirming bank"
                            },
                            "shipment": {
                                "shippedFrom": "Utrecht, The Netherlands",
                                "shippedTo": "Kyiv, Ukraine",
                                "shippingPort": "Port of Rotterdam",
                                "destinationPort": "Odessa",
                                "partialShipment": "Conditional",
                                "partialShipmentCondition": "Only if cargo doesn't suit standard 20ft",
                                "transshipment": "Yes",
                                "transshipmentCondition": "Transshipment is fulfilled in Valencia",
                                "latestShipmentDate": "2021-05-23",
                                "productDescription": "Carrot",
                                "deliveryConditions": "Incoterms 2000",
                                "termOfDelivery": "DDU",
                                "deliveryPlace": "Kyiv"
                            },
                            "requestedDocuments": {
                                "commercialInvoice": {
                                    "numberOfOriginals": 3,
                                    "numberOfCopies": 3
                                },
                                "transportDocument": {
                                    "transportMethod": "Sea transport",
                                    "seaTransportDocumentDetails": {
                                        "documentType": "Bill of Lading",
                                        "freightMark": "Prepaid",
                                        "billOfLadingIssuanceDetails": {
                                            "issuanceType": "To the order of",
                                            "issuanceDetails": "Consignee"
                                        }
                                    },
                                    "notifyParty": {
                                        "notifyPartyType": "Other",
                                        "notifyPartyName": "Alice"
                                    }
                                },
                                "packingListEnabled": true,
                                "packingList": {
                                    "numberOfOriginals": 3,
                                    "numberOfCopies": 3
                                },
                                "certificateOfOriginEnabled": true,
                                "certificateOfOrigin": {
                                    "countryOfOrigin": "Ukraine",
                                    "issuer": "Other",
                                    "issuerName": "Consignee",
                                    "numberOfOriginals": 3,
                                    "numberOfCopies": 3
                                },
                                "inspectionCertificateEnabled": true,
                                "insuranceCertificateEnabled": true,
                                "insuranceCertificate": {
                                    "coverage": 100,
                                    "riskCoverageDetails": "Full coverage"
                                },
                                "phytosanitaryCertificateEnabled": true,
                                "legalisedCommercialDocumentsEnabled": true,
                                "billOfExchangeEnabled": true,
                                "additionalDocuments": [{
                                        "name": "Commercial contract",
                                        "comment": "Supplement commercial contract"
                                    }, {
                                        "name": "Addendum",
                                        "comment": "Addendum to the commercial contract, 2 copies"
                                    }],
                                "documentConditions": {
                                    "presentationPeriod": 30,
                                    "presentationCondition": "Other",
                                    "presentationConditionDetails": "Only originals are considered valid",
                                    "additionalConditions": [{
                                            "condition": "Documents should be sent by the carrier"
                                        }, {
                                            "condition": "Shipping insurance at the shipper's expense"
                                        }]
                                }
                            },
                            "feesDetails": {
                                "feePayingStrategy": "Fees split between me and beneficiary",
                                "insuranceFeePayingParty": "Beneficiary",
                                "confirmingFeePayingParty": "Me",
                                "otherFeePayingParty": "Me",
                                "bankAccount": {
                                    "arrangementId": "b2ab66c1-11b7-480f-5a17",
                                    "accountName": "Corporate CDU Account",
                                    "bankAccountNumber": "****4784",
                                    "amount": "8459.05",
                                    "currencyCode": "EUR"
                                }
                            }
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LetterOfCreditClientServiceGetLettersOfCreditActionsMocksProvider = i2.createMocks([{
            urlPattern: "/api/letter-of-credit/client-api/v1/letters-of-credit/actions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "letterOfCreditId": "1234-asdf-4567-qwert",
                            "actions": ["VIEW", "MODIFY"]
                        }, {
                            "letterOfCreditId": "7523-asdf-7523-qwert",
                            "actions": ["VIEW", "MODIFY", "CANCEL"]
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LetterOfCreditClientServiceGetLettersOfCreditApprovalsMocksProvider = i2.createMocks([{
            urlPattern: "/api/letter-of-credit/client-api/v1/letters-of-credit/approvals",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "approvalId": "1234-asdf-4567-qwert",
                            "letterOfCreditId": "1234-asdf-4567-qwert",
                            "canApprove": false,
                            "canReject": true
                        }, {
                            "approvalId": "1006-asdf-4567-AAAss",
                            "letterOfCreditId": "7523-asdf-7523-qwert",
                            "canApprove": true,
                            "canReject": true
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var LetterOfCreditClientServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/api/letter-of-credit/client-api/v1/letters-of-credit",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "uuid": "1234-asdf-4567-qwert",
                            "caseKey": "1234-asdf-4567-qwert",
                            "referenceNumber": "GA-123456789",
                            "internalReferenceNumber": "int-ref-test",
                            "creationDate": "2020-10-10T12:12:12.000Z",
                            "type": "Irrevocable",
                            "status": "Unauthorized",
                            "expiryDate": "2020-12-10",
                            "expirationCity": "Amsterdam",
                            "expirationCountry": "The Netherlands",
                            "currencyCode": "EUR",
                            "totalAmount": "50000.00",
                            "amountTolerance": {
                                "positive": "2.5",
                                "negative": "2.5"
                            },
                            "additionalAmountCovered": "Additional charges - 1100 EUR",
                            "applicant": {
                                "legalEntityId": "1234567-12312-123123",
                                "legalName": "Importazioni italiane LLC",
                                "email": "test@export.com",
                                "legalAddress": {
                                    "addressLine1": "Via Rutto, 23",
                                    "city": "Roma",
                                    "postalCode": "00187",
                                    "country": "Italy"
                                }
                            },
                            "beneficiary": {
                                "legalEntityId": "1234567-12312-1475aaa",
                                "legalName": "Umbrella Netherlands BV",
                                "email": "test@umbrella.com",
                                "legalAddress": {
                                    "addressLine1": "Herengraht, 21",
                                    "city": "Amsterdam",
                                    "postalCode": "1008DG",
                                    "country": "The Netherlands"
                                }
                            },
                            "issuingBank": {
                                "legalEntityId": "b2cd61c2-23b7-4817-5a45",
                                "legalName": "Banco emisor",
                                "businessIdentifierCode": "MIDLXXGB22",
                                "email": "test@emisor.com",
                                "legalAddress": {
                                    "addressLine1": "Av. de Cantabia",
                                    "city": "Boadilla del Monte",
                                    "postalCode": "28660",
                                    "country": "Spain"
                                }
                            },
                            "advisingBank": {
                                "legalEntityId": "e2as61c2-12b5-1111-5a47",
                                "legalName": "Consigliare la Banca",
                                "businessIdentifierCode": "456789123",
                                "email": "test@consigliare.com",
                                "legalAddress": {
                                    "addressLine1": "Via Irnerio, 14",
                                    "city": "Bologna",
                                    "postalCode": "40121",
                                    "country": "Italy"
                                }
                            },
                            "confirmingBankPresence": "PRESENT",
                            "confirmingBank": {
                                "legalEntityId": "d76s6ac2-12b5-000f-5a12",
                                "legalName": "Confermando la Banca",
                                "businessIdentifierCode": "789123456",
                                "email": "test@confermando.com",
                                "legalAddress": {
                                    "addressLine1": "Via Del Cestello, 46",
                                    "city": "Bologna",
                                    "postalCode": "40124",
                                    "country": "Italy"
                                }
                            },
                            "attachments": [{
                                    "uuid": "550e8400-e29b-41d4-a716-446655440000",
                                    "type": "PDF",
                                    "name": "invoice",
                                    "size": 130
                                }],
                            "settlement": {
                                "settlementBy": "Other - Mixed payment",
                                "mixedPaymentDetails": "50 percent of the total lc value payable at sight",
                                "availableWith": "Advising Bank",
                                "tenorDays": "30",
                                "tenorFromDate": "Shipment date",
                                "requiresDraft": "true",
                                "drawee": "OTHER",
                                "draweeName": "Confirming bank"
                            },
                            "shipment": {
                                "shippedFrom": "Utrecht, The Netherlands",
                                "shippedTo": "Kyiv, Ukraine",
                                "shippingPort": "Port of Rotterdam",
                                "destinationPort": "Odessa",
                                "partialShipment": "Conditional",
                                "partialShipmentCondition": "Only if cargo doesn't suit standard 20ft",
                                "transshipment": "Yes",
                                "transshipmentCondition": "Transshipment is fulfilled in Valencia",
                                "latestShipmentDate": "2021-05-23",
                                "productDescription": "Carrot",
                                "deliveryConditions": "Incoterms 2000",
                                "termOfDelivery": "DDU",
                                "deliveryPlace": "Kyiv"
                            },
                            "requestedDocuments": {
                                "commercialInvoice": {
                                    "numberOfOriginals": 3,
                                    "numberOfCopies": 3
                                },
                                "transportDocument": {
                                    "transportMethod": "Sea transport",
                                    "seaTransportDocumentDetails": {
                                        "documentType": "Bill of Lading",
                                        "freightMark": "Prepaid",
                                        "billOfLadingIssuanceDetails": {
                                            "issuanceType": "To the order of",
                                            "issuanceDetails": "Consignee"
                                        }
                                    },
                                    "notifyParty": {
                                        "notifyPartyType": "Other",
                                        "notifyPartyName": "Alice"
                                    }
                                },
                                "packingListEnabled": true,
                                "packingList": {
                                    "numberOfOriginals": 3,
                                    "numberOfCopies": 3
                                },
                                "certificateOfOriginEnabled": true,
                                "certificateOfOrigin": {
                                    "countryOfOrigin": "Ukraine",
                                    "issuer": "Other",
                                    "issuerName": "Consignee",
                                    "numberOfOriginals": 3,
                                    "numberOfCopies": 3
                                },
                                "inspectionCertificateEnabled": true,
                                "insuranceCertificateEnabled": true,
                                "insuranceCertificate": {
                                    "coverage": 100,
                                    "riskCoverageDetails": "Full coverage"
                                },
                                "phytosanitaryCertificateEnabled": true,
                                "legalisedCommercialDocumentsEnabled": true,
                                "billOfExchangeEnabled": true,
                                "additionalDocuments": [{
                                        "name": "Commercial contract",
                                        "comment": "Supplement commercial contract"
                                    }, {
                                        "name": "Addendum",
                                        "comment": "Addendum to the commercial contract, 2 copies"
                                    }],
                                "documentConditions": {
                                    "presentationPeriod": 30,
                                    "presentationCondition": "Other",
                                    "presentationConditionDetails": "Only originals are considered valid",
                                    "additionalConditions": [{
                                            "condition": "Documents should be sent by the carrier"
                                        }, {
                                            "condition": "Shipping insurance at the shipper's expense"
                                        }]
                                }
                            },
                            "feesDetails": {
                                "feePayingStrategy": "Fees split between me and beneficiary",
                                "insuranceFeePayingParty": "Beneficiary",
                                "confirmingFeePayingParty": "Me",
                                "otherFeePayingParty": "Me",
                                "bankAccount": {
                                    "arrangementId": "b2ab66c1-11b7-480f-5a17",
                                    "accountName": "Corporate CDU Account",
                                    "bankAccountNumber": "****4784",
                                    "amount": "8459.05",
                                    "currencyCode": "EUR"
                                }
                            }
                        }, {
                            "uuid": "7523-asdf-7523-qwert",
                            "caseKey": "7523-asdf-7523-qwert",
                            "referenceNumber": "GA-123456780",
                            "internalReferenceNumber": "int-ref-test-2",
                            "creationDate": "2020-10-10T12:12:12.000Z",
                            "type": "Irrevocable",
                            "status": "Unauthorized",
                            "expiryDate": "2020-12-10",
                            "expirationCity": "Amsterdam",
                            "expirationCountry": "The Netherlands",
                            "currencyCode": "EUR",
                            "totalAmount": "10000.00",
                            "amountTolerance": {
                                "positive": "2.5",
                                "negative": "2.5"
                            },
                            "additionalAmountCovered": "Additional charges - 1100 EUR",
                            "applicant": {
                                "legalEntityId": "1234567-12312-123123",
                                "legalName": "Importazioni italiane LLC",
                                "email": "test@export.com",
                                "legalAddress": {
                                    "addressLine1": "Via Rutto, 23",
                                    "city": "Roma",
                                    "postalCode": "00187",
                                    "country": "Italy"
                                }
                            },
                            "beneficiary": {
                                "legalEntityId": "1234567-12312-1475aaa",
                                "legalName": "Umbrella Netherlands BV",
                                "email": "test@umbrella.com",
                                "legalAddress": {
                                    "addressLine1": "Herengraht, 21",
                                    "city": "Amsterdam",
                                    "postalCode": "1008DG",
                                    "country": "The Netherlands"
                                }
                            },
                            "issuingBank": {
                                "legalEntityId": "b2cd61c2-23b7-4817-5a45",
                                "legalName": "Banco emisor",
                                "businessIdentifierCode": "MIDLXXGB22",
                                "email": "test@emisor.com",
                                "legalAddress": {
                                    "addressLine1": "Av. de Cantabia",
                                    "city": "Boadilla del Monte",
                                    "postalCode": "28660",
                                    "country": "Spain"
                                }
                            },
                            "advisingBank": {
                                "legalEntityId": "e2as61c2-12b5-1111-5a47",
                                "legalName": "Consigliare la Banca",
                                "businessIdentifierCode": "456789123",
                                "email": "test@consigliare.com",
                                "legalAddress": {
                                    "addressLine1": "Via Irnerio, 14",
                                    "city": "Bologna",
                                    "postalCode": "40121",
                                    "country": "Italy"
                                }
                            },
                            "confirmingBankPresence": "PRESENT",
                            "confirmingBank": {
                                "legalEntityId": "d76s6ac2-12b5-000f-5a12",
                                "legalName": "Confermando la Banca",
                                "businessIdentifierCode": "789123456",
                                "email": "test@confermando.com",
                                "legalAddress": {
                                    "addressLine1": "Via Del Cestello, 46",
                                    "city": "Bologna",
                                    "postalCode": "40124",
                                    "country": "Italy"
                                }
                            },
                            "attachments": [{
                                    "uuid": "550e8400-e29b-41d4-a716-446655440001",
                                    "type": "PDF",
                                    "name": "invoice",
                                    "size": 130
                                }],
                            "settlement": {
                                "settlementBy": "Other - Mixed payment",
                                "mixedPaymentDetails": "50 percent of the total lc value payable at sight",
                                "availableWith": "Advising Bank",
                                "tenorDays": "30",
                                "tenorFromDate": "Shipment date",
                                "requiresDraft": "true",
                                "drawee": "OTHER",
                                "draweeName": "Confirming bank"
                            },
                            "shipment": {
                                "shippedFrom": "Utrecht, The Netherlands",
                                "shippedTo": "Kyiv, Ukraine",
                                "shippingPort": "Port of Rotterdam",
                                "destinationPort": "Odessa",
                                "partialShipment": "Conditional",
                                "partialShipmentCondition": "Only if cargo doesn't suit standard 20ft",
                                "transshipment": "Yes",
                                "transshipmentCondition": "Transshipment is fulfilled in Valencia",
                                "latestShipmentDate": "2021-05-23",
                                "productDescription": "Carrot",
                                "deliveryConditions": "Incoterms 2000",
                                "termOfDelivery": "DDU",
                                "deliveryPlace": "Kyiv"
                            },
                            "requestedDocuments": {
                                "commercialInvoice": {
                                    "numberOfOriginals": 3,
                                    "numberOfCopies": 3
                                },
                                "transportDocument": {
                                    "transportMethod": "Sea transport",
                                    "seaTransportDocumentDetails": {
                                        "documentType": "Bill of Lading",
                                        "freightMark": "Prepaid",
                                        "billOfLadingIssuanceDetails": {
                                            "issuanceType": "To the order of",
                                            "issuanceDetails": "Consignee"
                                        }
                                    },
                                    "notifyParty": {
                                        "notifyPartyType": "Other",
                                        "notifyPartyName": "Alice"
                                    }
                                },
                                "packingListEnabled": true,
                                "packingList": {
                                    "numberOfOriginals": 3,
                                    "numberOfCopies": 3
                                },
                                "certificateOfOriginEnabled": true,
                                "certificateOfOrigin": {
                                    "countryOfOrigin": "Ukraine",
                                    "issuer": "Other",
                                    "issuerName": "Consignee",
                                    "numberOfOriginals": 3,
                                    "numberOfCopies": 3
                                },
                                "inspectionCertificateEnabled": true,
                                "insuranceCertificateEnabled": true,
                                "insuranceCertificate": {
                                    "coverage": 100,
                                    "riskCoverageDetails": "Full coverage"
                                },
                                "phytosanitaryCertificateEnabled": true,
                                "legalisedCommercialDocumentsEnabled": true,
                                "billOfExchangeEnabled": true,
                                "additionalDocuments": [{
                                        "name": "Commercial contract",
                                        "comment": "Supplement commercial contract"
                                    }, {
                                        "name": "Addendum",
                                        "comment": "Addendum to the commercial contract, 2 copies"
                                    }],
                                "documentConditions": {
                                    "presentationPeriod": 30,
                                    "presentationCondition": "Other",
                                    "presentationConditionDetails": "Only originals are considered valid",
                                    "additionalConditions": [{
                                            "condition": "Documents should be sent by the carrier"
                                        }, {
                                            "condition": "Shipping insurance at the shipper's expense"
                                        }]
                                }
                            },
                            "feesDetails": {
                                "feePayingStrategy": "Fees split between me and beneficiary",
                                "insuranceFeePayingParty": "Beneficiary",
                                "confirmingFeePayingParty": "Me",
                                "otherFeePayingParty": "Me",
                                "bankAccount": {
                                    "arrangementId": "b2ab66c1-11b7-480f-5a17",
                                    "accountName": "Corporate CDU Account",
                                    "bankAccountNumber": "****4784",
                                    "amount": "8459.05",
                                    "currencyCode": "EUR"
                                }
                            }
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/api/letter-of-credit/client-api/v1/letters-of-credit/actions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "letterOfCreditId": "1234-asdf-4567-qwert",
                            "actions": ["VIEW", "MODIFY"]
                        }, {
                            "letterOfCreditId": "7523-asdf-7523-qwert",
                            "actions": ["VIEW", "MODIFY", "CANCEL"]
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/api/letter-of-credit/client-api/v1/letters-of-credit/approvals",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "approvalId": "1234-asdf-4567-qwert",
                            "letterOfCreditId": "1234-asdf-4567-qwert",
                            "canApprove": false,
                            "canReject": true
                        }, {
                            "approvalId": "1006-asdf-4567-AAAss",
                            "letterOfCreditId": "7523-asdf-7523-qwert",
                            "canApprove": true,
                            "canReject": true
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    exports.BillOfLadingIssuanceType = BillOfLadingIssuanceType;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.CertificateOfOriginIssuer = CertificateOfOriginIssuer;
    exports.ConfirmingBankPresence = ConfirmingBankPresence;
    exports.DeliveryConditions = DeliveryConditions;
    exports.DocumentPresentationCondition = DocumentPresentationCondition;
    exports.Drawee = Drawee;
    exports.FeePayingParty = FeePayingParty;
    exports.FeePayingStrategy = FeePayingStrategy;
    exports.FileType = FileType;
    exports.FreightMark = FreightMark;
    exports.ImportTransactionType = ImportTransactionType;
    exports.Incoterms2000 = Incoterms2000;
    exports.Incoterms2010 = Incoterms2010;
    exports.Incoterms2020 = Incoterms2020;
    exports.LETTER_OF_CREDIT_BASE_PATH = LETTER_OF_CREDIT_BASE_PATH;
    exports.LetterOfCreditApiModule = LetterOfCreditApiModule;
    exports.LetterOfCreditClientService = LetterOfCreditClientService;
    exports.LetterOfCreditClientServiceGetLettersOfCreditActionsMocksProvider = LetterOfCreditClientServiceGetLettersOfCreditActionsMocksProvider;
    exports.LetterOfCreditClientServiceGetLettersOfCreditApprovalsMocksProvider = LetterOfCreditClientServiceGetLettersOfCreditApprovalsMocksProvider;
    exports.LetterOfCreditClientServiceGetLettersOfCreditMocksProvider = LetterOfCreditClientServiceGetLettersOfCreditMocksProvider;
    exports.LetterOfCreditClientServiceMocksProvider = LetterOfCreditClientServiceMocksProvider;
    exports.LetterOfCreditConfiguration = LetterOfCreditConfiguration;
    exports.LetterOfCreditStatus = LetterOfCreditStatus;
    exports.LetterOfCreditType = LetterOfCreditType;
    exports.NotifyPartyType = NotifyPartyType;
    exports.PartialShipment = PartialShipment;
    exports.SeaTransportDocumentType = SeaTransportDocumentType;
    exports.SettlementAvailability = SettlementAvailability;
    exports.SettlementType = SettlementType;
    exports.TenorFromDate = TenorFromDate;
    exports.TransportMethod = TransportMethod;
    exports.Transshipment = Transshipment;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-letter-of-credit-http-ang.umd.js.map
