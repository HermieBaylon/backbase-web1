import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { NotificationPreference } from '../model/models';
import { NotificationPreferencePostRequest } from '../model/models';
import { NotificationPreferencePutRequest } from '../model/models';
import { NotificationsPreferencesGet } from '../model/models';
import { EngagementConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface CreateNotificationPreferenceRequestParams {
    ["notificationPreferencePostRequest"]: NotificationPreferencePostRequest;
}
export interface GetNotificationPreferencesRequestParams {
    ["generalNotificationId"]?: string;
    ["active"]?: boolean;
    ["entityId"]?: string;
    ["entityType"]?: string;
}
export interface UpdateNotificationPreferenceRequestParams {
    ["id"]: string;
    ["notificationPreferencePutRequest"]: NotificationPreferencePutRequest;
}
export declare class NotificationPreferenceService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: EngagementConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: EngagementConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    createNotificationPreference(requestParameters: CreateNotificationPreferenceRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<NotificationPreference>;
    createNotificationPreference(requestParameters: CreateNotificationPreferenceRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<NotificationPreference>>;
    createNotificationPreference(requestParameters: CreateNotificationPreferenceRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<NotificationPreference>>;
    createNotificationPreferenceUrl(requestParameters: CreateNotificationPreferenceRequestParams): string;
    getNotificationPreferences(requestParameters: GetNotificationPreferencesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<NotificationsPreferencesGet>;
    getNotificationPreferences(requestParameters: GetNotificationPreferencesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<NotificationsPreferencesGet>>;
    getNotificationPreferences(requestParameters: GetNotificationPreferencesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<NotificationsPreferencesGet>>;
    getNotificationPreferencesUrl(requestParameters: GetNotificationPreferencesRequestParams): string;
    updateNotificationPreference(requestParameters: UpdateNotificationPreferenceRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<NotificationPreference>;
    updateNotificationPreference(requestParameters: UpdateNotificationPreferenceRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<NotificationPreference>>;
    updateNotificationPreference(requestParameters: UpdateNotificationPreferenceRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<NotificationPreference>>;
    updateNotificationPreferenceUrl(requestParameters: UpdateNotificationPreferenceRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<NotificationPreferenceService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NotificationPreferenceService>;
}
