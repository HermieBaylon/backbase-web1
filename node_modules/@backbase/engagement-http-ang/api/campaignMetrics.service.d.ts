import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { MetricsResource } from '../model/models';
import { EngagementConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetCampaignMetricsRequestParams {
    ["campaignId"]: string;
    ["channelId"]: string;
}
export interface RedirectCampaignRequestParams {
    ["utmContent"]: string;
    ["utmBanner"]: string;
    ["key"]: string;
}
export declare class CampaignMetricsService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: EngagementConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: EngagementConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getCampaignMetrics(requestParameters: GetCampaignMetricsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<MetricsResource>;
    getCampaignMetrics(requestParameters: GetCampaignMetricsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<MetricsResource>>;
    getCampaignMetrics(requestParameters: GetCampaignMetricsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<MetricsResource>>;
    getCampaignMetricsUrl(requestParameters: GetCampaignMetricsRequestParams): string;
    redirectCampaign(requestParameters: RedirectCampaignRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    redirectCampaign(requestParameters: RedirectCampaignRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    redirectCampaign(requestParameters: RedirectCampaignRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    redirectCampaignUrl(requestParameters: RedirectCampaignRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<CampaignMetricsService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CampaignMetricsService>;
}
