import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CampaignRequestResource } from '../model/models';
import { CampaignResource } from '../model/models';
import { CampaignToDisplayResource } from '../model/models';
import { EngagementConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface CreateCampaignRequestParams {
    ["campaignRequestResource"]: CampaignRequestResource;
}
export interface DeleteCampaignRequestParams {
    ["campaignId"]: string;
}
export interface DisableCampaignRequestParams {
    ["campaignId"]: string;
}
export interface EnableCampaignRequestParams {
    ["campaignId"]: string;
}
export interface FinalizeCampaignRequestParams {
    ["campaignId"]: string;
}
export interface GetCampaignByCampaignIdRequestParams {
    ["campaignId"]: string;
    ["status"]?: Array<string>;
    ["version"]?: number;
}
export interface GetCampaignsRequestParams {
    ["from"]?: number;
    ["size"]?: number;
    ["endDateAfter"]?: string;
    ["endDateBefore"]?: string;
}
export interface UpdateCampaignRequestParams {
    ["campaignId"]: string;
    ["campaignRequestResource"]?: CampaignRequestResource;
}
export declare class CampaignService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: EngagementConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: EngagementConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    createCampaign(requestParameters: CreateCampaignRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CampaignResource>;
    createCampaign(requestParameters: CreateCampaignRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CampaignResource>>;
    createCampaign(requestParameters: CreateCampaignRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CampaignResource>>;
    createCampaignUrl(requestParameters: CreateCampaignRequestParams): string;
    deleteCampaign(requestParameters: DeleteCampaignRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteCampaign(requestParameters: DeleteCampaignRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteCampaign(requestParameters: DeleteCampaignRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteCampaignUrl(requestParameters: DeleteCampaignRequestParams): string;
    disableCampaign(requestParameters: DisableCampaignRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CampaignResource>;
    disableCampaign(requestParameters: DisableCampaignRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CampaignResource>>;
    disableCampaign(requestParameters: DisableCampaignRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CampaignResource>>;
    disableCampaignUrl(requestParameters: DisableCampaignRequestParams): string;
    enableCampaign(requestParameters: EnableCampaignRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CampaignResource>;
    enableCampaign(requestParameters: EnableCampaignRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CampaignResource>>;
    enableCampaign(requestParameters: EnableCampaignRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CampaignResource>>;
    enableCampaignUrl(requestParameters: EnableCampaignRequestParams): string;
    finalizeCampaign(requestParameters: FinalizeCampaignRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CampaignResource>;
    finalizeCampaign(requestParameters: FinalizeCampaignRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CampaignResource>>;
    finalizeCampaign(requestParameters: FinalizeCampaignRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CampaignResource>>;
    finalizeCampaignUrl(requestParameters: FinalizeCampaignRequestParams): string;
    getCampaignByCampaignId(requestParameters: GetCampaignByCampaignIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CampaignResource>;
    getCampaignByCampaignId(requestParameters: GetCampaignByCampaignIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CampaignResource>>;
    getCampaignByCampaignId(requestParameters: GetCampaignByCampaignIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CampaignResource>>;
    getCampaignByCampaignIdUrl(requestParameters: GetCampaignByCampaignIdRequestParams): string;
    getCampaigns(requestParameters: GetCampaignsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<CampaignToDisplayResource>>;
    getCampaigns(requestParameters: GetCampaignsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<CampaignToDisplayResource>>>;
    getCampaigns(requestParameters: GetCampaignsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<CampaignToDisplayResource>>>;
    getCampaignsUrl(requestParameters: GetCampaignsRequestParams): string;
    updateCampaign(requestParameters: UpdateCampaignRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CampaignResource>;
    updateCampaign(requestParameters: UpdateCampaignRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CampaignResource>>;
    updateCampaign(requestParameters: UpdateCampaignRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CampaignResource>>;
    updateCampaignUrl(requestParameters: UpdateCampaignRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<CampaignService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CampaignService>;
}
