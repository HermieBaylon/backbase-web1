(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/engagement-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["engagement-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var AudienceType = {
        None: 'none',
        Id: 'id',
        All: 'all'
    };

    exports.BannerChannel = void 0;
    (function (BannerChannel) {
        BannerChannel.PriorityEnum = {
            Low: 'low',
            Medium: 'medium',
            High: 'high'
        };
    })(exports.BannerChannel || (exports.BannerChannel = {}));

    exports.BannerChannelAllOf = void 0;
    (function (BannerChannelAllOf) {
        BannerChannelAllOf.PriorityEnum = {
            Low: 'low',
            Medium: 'medium',
            High: 'high'
        };
    })(exports.BannerChannelAllOf || (exports.BannerChannelAllOf = {}));

    var CampaignChannelType = {
        Banner: 'banner',
        MessageCenter: 'message-center'
    };

    var CampaignStatus = {
        Draft: 'draft',
        Final: 'final',
        Superseded: 'superseded',
        Archived: 'archived',
        Paused: 'paused'
    };

    var SeverityLevel = {
        ALERT: 'ALERT',
        WARNING: 'WARNING',
        SUCCESS: 'SUCCESS',
        INFO: 'INFO'
    };

    var TargetUrlDisplayModeResource = {
        Self: 'self',
        Blank: 'blank'
    };

    var ENGAGEMENT_BASE_PATH = new i0.InjectionToken('ENGAGEMENT_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var EngagementConfiguration = /** @class */ (function () {
        function EngagementConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        EngagementConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        EngagementConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        EngagementConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        EngagementConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return EngagementConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module EngagementConfiguration');

    var EngagementApiModule = /** @class */ (function () {
        function EngagementApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('EngagementApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        EngagementApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: EngagementApiModule,
                providers: [{ provide: EngagementConfiguration, useFactory: configurationFactory }]
            };
        };
        return EngagementApiModule;
    }());
    EngagementApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: EngagementApiModule, deps: [{ token: EngagementApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: EngagementConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    EngagementApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: EngagementApiModule });
    EngagementApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: EngagementApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: EngagementApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: EngagementApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: EngagementConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var CampaignService = /** @class */ (function () {
        function CampaignService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/engagements';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new EngagementConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        CampaignService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        CampaignService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        CampaignService.prototype.createCampaign = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _campaignRequestResource = requestParameters["campaignRequestResource"];
            if (_campaignRequestResource === null || _campaignRequestResource === undefined) {
                throw new Error('Required parameter campaignRequestResource was null or undefined when calling createCampaign.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/engagements/custom", _campaignRequestResource, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CampaignService.prototype.createCampaignUrl = function (requestParameters) {
            var _campaignRequestResource = requestParameters["campaignRequestResource"];
            if (_campaignRequestResource === null || _campaignRequestResource === undefined) {
                throw new Error('Required parameter campaignRequestResource was null or undefined when calling createCampaign.');
            }
            return this.configuration.basePath + "/client-api/v1/engagements/custom";
        };
        CampaignService.prototype.deleteCampaign = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _campaignId = requestParameters["campaignId"];
            if (_campaignId === null || _campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling deleteCampaign.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v1/engagements/custom/" + encodeURIComponent(String(_campaignId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CampaignService.prototype.deleteCampaignUrl = function (requestParameters) {
            var _campaignId = requestParameters["campaignId"];
            if (_campaignId === null || _campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling deleteCampaign.');
            }
            return this.configuration.basePath + "/client-api/v1/engagements/custom/" + encodeURIComponent(String(_campaignId));
        };
        CampaignService.prototype.disableCampaign = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _campaignId = requestParameters["campaignId"];
            if (_campaignId === null || _campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling disableCampaign.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v1/engagements/custom/" + encodeURIComponent(String(_campaignId)) + "/disable", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CampaignService.prototype.disableCampaignUrl = function (requestParameters) {
            var _campaignId = requestParameters["campaignId"];
            if (_campaignId === null || _campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling disableCampaign.');
            }
            return this.configuration.basePath + "/client-api/v1/engagements/custom/" + encodeURIComponent(String(_campaignId)) + "/disable";
        };
        CampaignService.prototype.enableCampaign = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _campaignId = requestParameters["campaignId"];
            if (_campaignId === null || _campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling enableCampaign.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v1/engagements/custom/" + encodeURIComponent(String(_campaignId)) + "/enable", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CampaignService.prototype.enableCampaignUrl = function (requestParameters) {
            var _campaignId = requestParameters["campaignId"];
            if (_campaignId === null || _campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling enableCampaign.');
            }
            return this.configuration.basePath + "/client-api/v1/engagements/custom/" + encodeURIComponent(String(_campaignId)) + "/enable";
        };
        CampaignService.prototype.finalizeCampaign = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _campaignId = requestParameters["campaignId"];
            if (_campaignId === null || _campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling finalizeCampaign.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v1/engagements/custom/" + encodeURIComponent(String(_campaignId)) + "/final", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CampaignService.prototype.finalizeCampaignUrl = function (requestParameters) {
            var _campaignId = requestParameters["campaignId"];
            if (_campaignId === null || _campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling finalizeCampaign.');
            }
            return this.configuration.basePath + "/client-api/v1/engagements/custom/" + encodeURIComponent(String(_campaignId)) + "/final";
        };
        CampaignService.prototype.getCampaignByCampaignId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _campaignId = requestParameters["campaignId"];
            if (_campaignId === null || _campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling getCampaignByCampaignId.');
            }
            var _status = requestParameters["status"];
            var _version = requestParameters["version"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_status) {
                queryParameters = this.addToHttpParams(queryParameters, _status.join(COLLECTION_FORMATS['csv']), 'status');
            }
            if (_version !== undefined && _version !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _version, 'version');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/engagements/custom/" + encodeURIComponent(String(_campaignId)), {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CampaignService.prototype.getCampaignByCampaignIdUrl = function (requestParameters) {
            var _campaignId = requestParameters["campaignId"];
            if (_campaignId === null || _campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling getCampaignByCampaignId.');
            }
            var _status = requestParameters["status"];
            var _version = requestParameters["version"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_status) {
                queryParameters = this.addToHttpParams(queryParameters, _status.join(COLLECTION_FORMATS['csv']), 'status');
            }
            if (_version !== undefined && _version !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _version, 'version');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/engagements/custom/" + encodeURIComponent(String(_campaignId)) + (queryString ? "?" + queryString : '');
        };
        CampaignService.prototype.getCampaigns = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _endDateAfter = requestParameters["endDateAfter"];
            var _endDateBefore = requestParameters["endDateBefore"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_endDateAfter !== undefined && _endDateAfter !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _endDateAfter, 'endDateAfter');
            }
            if (_endDateBefore !== undefined && _endDateBefore !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _endDateBefore, 'endDateBefore');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/engagements/custom", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CampaignService.prototype.getCampaignsUrl = function (requestParameters) {
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _endDateAfter = requestParameters["endDateAfter"];
            var _endDateBefore = requestParameters["endDateBefore"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_endDateAfter !== undefined && _endDateAfter !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _endDateAfter, 'endDateAfter');
            }
            if (_endDateBefore !== undefined && _endDateBefore !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _endDateBefore, 'endDateBefore');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/engagements/custom" + (queryString ? "?" + queryString : '');
        };
        CampaignService.prototype.updateCampaign = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _campaignId = requestParameters["campaignId"];
            if (_campaignId === null || _campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling updateCampaign.');
            }
            var _campaignRequestResource = requestParameters["campaignRequestResource"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v1/engagements/custom/" + encodeURIComponent(String(_campaignId)), _campaignRequestResource, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CampaignService.prototype.updateCampaignUrl = function (requestParameters) {
            var _campaignId = requestParameters["campaignId"];
            if (_campaignId === null || _campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling updateCampaign.');
            }
            var _campaignRequestResource = requestParameters["campaignRequestResource"];
            return this.configuration.basePath + "/client-api/v1/engagements/custom/" + encodeURIComponent(String(_campaignId));
        };
        return CampaignService;
    }());
    CampaignService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CampaignService, deps: [{ token: i1__namespace.HttpClient }, { token: ENGAGEMENT_BASE_PATH, optional: true }, { token: EngagementConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CampaignService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CampaignService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CampaignService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ENGAGEMENT_BASE_PATH]
                        }] }, { type: EngagementConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var CampaignServiceCreateCampaignMocksProvider = i2.createMocks([{
            urlPattern: "/engagements/client-api/v1/engagements/custom",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        }]);
    var CampaignServiceDeleteCampaignMocksProvider = i2.createMocks([{
            urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}",
            method: "DELETE",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var CampaignServiceDisableCampaignMocksProvider = i2.createMocks([{
            urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}/disable",
            method: "PUT",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var CampaignServiceEnableCampaignMocksProvider = i2.createMocks([{
            urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}/enable",
            method: "PUT",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var CampaignServiceFinalizeCampaignMocksProvider = i2.createMocks([{
            urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}/final",
            method: "PUT",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var CampaignServiceGetCampaignByCampaignIdMocksProvider = i2.createMocks([{
            urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}",
            method: "GET",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var CampaignServiceGetCampaignsMocksProvider = i2.createMocks([{
            urlPattern: "/engagements/client-api/v1/engagements/custom",
            method: "GET",
            responses: [
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        }]);
    var CampaignServiceUpdateCampaignMocksProvider = i2.createMocks([{
            urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}",
            method: "PUT",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        }]);
    var CampaignServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/engagements/client-api/v1/engagements/custom",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}",
            method: "DELETE",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}/disable",
            method: "PUT",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}/enable",
            method: "PUT",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}/final",
            method: "PUT",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}",
            method: "GET",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/engagements/client-api/v1/engagements/custom",
            method: "GET",
            responses: [
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}",
            method: "PUT",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    var CampaignMetricsService = /** @class */ (function () {
        function CampaignMetricsService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/engagements';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new EngagementConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        CampaignMetricsService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        CampaignMetricsService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        CampaignMetricsService.prototype.getCampaignMetrics = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _campaignId = requestParameters["campaignId"];
            if (_campaignId === null || _campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling getCampaignMetrics.');
            }
            var _channelId = requestParameters["channelId"];
            if (_channelId === null || _channelId === undefined) {
                throw new Error('Required parameter channelId was null or undefined when calling getCampaignMetrics.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/engagements/custom/" + encodeURIComponent(String(_campaignId)) + "/channels/" + encodeURIComponent(String(_channelId)) + "/metrics", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CampaignMetricsService.prototype.getCampaignMetricsUrl = function (requestParameters) {
            var _campaignId = requestParameters["campaignId"];
            if (_campaignId === null || _campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling getCampaignMetrics.');
            }
            var _channelId = requestParameters["channelId"];
            if (_channelId === null || _channelId === undefined) {
                throw new Error('Required parameter channelId was null or undefined when calling getCampaignMetrics.');
            }
            return this.configuration.basePath + "/client-api/v1/engagements/custom/" + encodeURIComponent(String(_campaignId)) + "/channels/" + encodeURIComponent(String(_channelId)) + "/metrics";
        };
        CampaignMetricsService.prototype.redirectCampaign = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _utmContent = requestParameters["utmContent"];
            if (_utmContent === null || _utmContent === undefined) {
                throw new Error('Required parameter utmContent was null or undefined when calling redirectCampaign.');
            }
            var _utmBanner = requestParameters["utmBanner"];
            if (_utmBanner === null || _utmBanner === undefined) {
                throw new Error('Required parameter utmBanner was null or undefined when calling redirectCampaign.');
            }
            var _key = requestParameters["key"];
            if (_key === null || _key === undefined) {
                throw new Error('Required parameter key was null or undefined when calling redirectCampaign.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_utmContent !== undefined && _utmContent !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _utmContent, 'utm_content');
            }
            if (_utmBanner !== undefined && _utmBanner !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _utmBanner, 'utm_banner');
            }
            if (_key !== undefined && _key !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _key, 'key');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/banner/redirect", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CampaignMetricsService.prototype.redirectCampaignUrl = function (requestParameters) {
            var _utmContent = requestParameters["utmContent"];
            if (_utmContent === null || _utmContent === undefined) {
                throw new Error('Required parameter utmContent was null or undefined when calling redirectCampaign.');
            }
            var _utmBanner = requestParameters["utmBanner"];
            if (_utmBanner === null || _utmBanner === undefined) {
                throw new Error('Required parameter utmBanner was null or undefined when calling redirectCampaign.');
            }
            var _key = requestParameters["key"];
            if (_key === null || _key === undefined) {
                throw new Error('Required parameter key was null or undefined when calling redirectCampaign.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_utmContent !== undefined && _utmContent !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _utmContent, 'utm_content');
            }
            if (_utmBanner !== undefined && _utmBanner !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _utmBanner, 'utm_banner');
            }
            if (_key !== undefined && _key !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _key, 'key');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/banner/redirect" + (queryString ? "?" + queryString : '');
        };
        return CampaignMetricsService;
    }());
    CampaignMetricsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CampaignMetricsService, deps: [{ token: i1__namespace.HttpClient }, { token: ENGAGEMENT_BASE_PATH, optional: true }, { token: EngagementConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CampaignMetricsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CampaignMetricsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CampaignMetricsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ENGAGEMENT_BASE_PATH]
                        }] }, { type: EngagementConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var CampaignMetricsServiceGetCampaignMetricsMocksProvider = i2.createMocks([{
            urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}/channels/{channelId}/metrics",
            method: "GET",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var CampaignMetricsServiceRedirectCampaignMocksProvider = i2.createMocks([{
            urlPattern: "/engagements/client-api/v1/banner/redirect",
            method: "GET",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var CampaignMetricsServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}/channels/{channelId}/metrics",
            method: "GET",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/engagements/client-api/v1/banner/redirect",
            method: "GET",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    var GeneralNotificationService = /** @class */ (function () {
        function GeneralNotificationService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/engagements';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new EngagementConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        GeneralNotificationService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        GeneralNotificationService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        GeneralNotificationService.prototype.getGeneralNotificationById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getGeneralNotificationById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/general-notifications/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        GeneralNotificationService.prototype.getGeneralNotificationByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getGeneralNotificationById.');
            }
            return this.configuration.basePath + "/client-api/v1/general-notifications/" + encodeURIComponent(String(_id));
        };
        GeneralNotificationService.prototype.getGeneralNotifications = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/general-notifications", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        GeneralNotificationService.prototype.getGeneralNotificationsUrl = function (requestParameters) {
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/general-notifications" + (queryString ? "?" + queryString : '');
        };
        return GeneralNotificationService;
    }());
    GeneralNotificationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: GeneralNotificationService, deps: [{ token: i1__namespace.HttpClient }, { token: ENGAGEMENT_BASE_PATH, optional: true }, { token: EngagementConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    GeneralNotificationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: GeneralNotificationService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: GeneralNotificationService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ENGAGEMENT_BASE_PATH]
                        }] }, { type: EngagementConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var GeneralNotificationServiceGetGeneralNotificationByIdMocksProvider = i2.createMocks([{
            urlPattern: "/engagements/client-api/v1/general-notifications/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "$ref": "#/components/examples/GeneralNotificationExample/value"
                        }]
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var GeneralNotificationServiceGetGeneralNotificationsMocksProvider = i2.createMocks([{
            urlPattern: "/engagements/client-api/v1/general-notifications",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "value": [{
                                "$ref": "#/components/examples/GeneralNotificationSummaryExample1/value"
                            }, {
                                "$ref": "#/components/examples/GeneralNotificationSummaryExample2/value"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var GeneralNotificationServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/engagements/client-api/v1/general-notifications/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "$ref": "#/components/examples/GeneralNotificationExample/value"
                        }]
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/engagements/client-api/v1/general-notifications",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "value": [{
                                "$ref": "#/components/examples/GeneralNotificationSummaryExample1/value"
                            }, {
                                "$ref": "#/components/examples/GeneralNotificationSummaryExample2/value"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    var NotificationPreferenceService = /** @class */ (function () {
        function NotificationPreferenceService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/engagements';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new EngagementConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        NotificationPreferenceService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        NotificationPreferenceService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        NotificationPreferenceService.prototype.createNotificationPreference = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _notificationPreferencePostRequest = requestParameters["notificationPreferencePostRequest"];
            if (_notificationPreferencePostRequest === null || _notificationPreferencePostRequest === undefined) {
                throw new Error('Required parameter notificationPreferencePostRequest was null or undefined when calling createNotificationPreference.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/notification-preferences", _notificationPreferencePostRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        NotificationPreferenceService.prototype.createNotificationPreferenceUrl = function (requestParameters) {
            var _notificationPreferencePostRequest = requestParameters["notificationPreferencePostRequest"];
            if (_notificationPreferencePostRequest === null || _notificationPreferencePostRequest === undefined) {
                throw new Error('Required parameter notificationPreferencePostRequest was null or undefined when calling createNotificationPreference.');
            }
            return this.configuration.basePath + "/client-api/v1/notification-preferences";
        };
        NotificationPreferenceService.prototype.getNotificationPreferences = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _generalNotificationId = requestParameters["generalNotificationId"];
            var _active = requestParameters["active"];
            var _entityId = requestParameters["entityId"];
            var _entityType = requestParameters["entityType"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_generalNotificationId !== undefined && _generalNotificationId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _generalNotificationId, 'generalNotificationId');
            }
            if (_active !== undefined && _active !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _active, 'active');
            }
            if (_entityId !== undefined && _entityId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _entityId, 'entityId');
            }
            if (_entityType !== undefined && _entityType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _entityType, 'entityType');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/notification-preferences", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        NotificationPreferenceService.prototype.getNotificationPreferencesUrl = function (requestParameters) {
            var _generalNotificationId = requestParameters["generalNotificationId"];
            var _active = requestParameters["active"];
            var _entityId = requestParameters["entityId"];
            var _entityType = requestParameters["entityType"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_generalNotificationId !== undefined && _generalNotificationId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _generalNotificationId, 'generalNotificationId');
            }
            if (_active !== undefined && _active !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _active, 'active');
            }
            if (_entityId !== undefined && _entityId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _entityId, 'entityId');
            }
            if (_entityType !== undefined && _entityType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _entityType, 'entityType');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/notification-preferences" + (queryString ? "?" + queryString : '');
        };
        NotificationPreferenceService.prototype.updateNotificationPreference = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateNotificationPreference.');
            }
            var _notificationPreferencePutRequest = requestParameters["notificationPreferencePutRequest"];
            if (_notificationPreferencePutRequest === null || _notificationPreferencePutRequest === undefined) {
                throw new Error('Required parameter notificationPreferencePutRequest was null or undefined when calling updateNotificationPreference.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v1/notification-preferences/" + encodeURIComponent(String(_id)), _notificationPreferencePutRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        NotificationPreferenceService.prototype.updateNotificationPreferenceUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateNotificationPreference.');
            }
            var _notificationPreferencePutRequest = requestParameters["notificationPreferencePutRequest"];
            if (_notificationPreferencePutRequest === null || _notificationPreferencePutRequest === undefined) {
                throw new Error('Required parameter notificationPreferencePutRequest was null or undefined when calling updateNotificationPreference.');
            }
            return this.configuration.basePath + "/client-api/v1/notification-preferences/" + encodeURIComponent(String(_id));
        };
        return NotificationPreferenceService;
    }());
    NotificationPreferenceService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: NotificationPreferenceService, deps: [{ token: i1__namespace.HttpClient }, { token: ENGAGEMENT_BASE_PATH, optional: true }, { token: EngagementConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    NotificationPreferenceService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: NotificationPreferenceService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: NotificationPreferenceService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ENGAGEMENT_BASE_PATH]
                        }] }, { type: EngagementConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var NotificationPreferenceServiceCreateNotificationPreferenceMocksProvider = i2.createMocks([{
            urlPattern: "/engagements/client-api/v1/notification-preferences",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "$ref": "#/components/examples/NotificationPreferenceResponseExample/value"
                    }
                },
                {
                    status: 201,
                    body: {
                        "channels": [{
                                "userCanChange": true,
                                "channel": "email",
                                "enabled": true
                            }, {
                                "userCanChange": true,
                                "channel": "email",
                                "enabled": true
                            }],
                        "lastUpdatedAt": "2000-01-23T04:56:07.000+00:00",
                        "generalNotificationId": "generalNotificationId",
                        "active": true,
                        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                        "createdOn": "2000-01-23T04:56:07.000+00:00",
                        "userConditions": {
                            "eRef": "6be7c465-37a7-4f1e-98b7-15d6c636c566",
                            "eType": "arrangement",
                            "conditions": {
                                "amount": 100
                            }
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var NotificationPreferenceServiceGetNotificationPreferencesMocksProvider = i2.createMocks([{
            urlPattern: "/engagements/client-api/v1/notification-preferences",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "value": {
                            "totalCount": 2,
                            "notificationPreferences": [{
                                    "$ref": "#/components/examples/NotificationPreferenceGetExample2/value"
                                }, {
                                    "$ref": "#/components/examples/NotificationPreferenceGetExample3/value"
                                }]
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "value": {
                            "totalCount": 2,
                            "notificationPreferences": [{
                                    "$ref": "#/components/examples/NotificationPreferenceGetExample1/value"
                                }, {
                                    "$ref": "#/components/examples/NotificationPreferenceGetExample2/value"
                                }]
                        }
                    }
                },
            ]
        }]);
    var NotificationPreferenceServiceUpdateNotificationPreferenceMocksProvider = i2.createMocks([{
            urlPattern: "/engagements/client-api/v1/notification-preferences/{id}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "$ref": "#/components/examples/NotificationPreferenceResponseExample/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "channels": [{
                                "userCanChange": true,
                                "channel": "email",
                                "enabled": true
                            }, {
                                "userCanChange": true,
                                "channel": "email",
                                "enabled": true
                            }],
                        "lastUpdatedAt": "2000-01-23T04:56:07.000+00:00",
                        "generalNotificationId": "generalNotificationId",
                        "active": true,
                        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                        "createdOn": "2000-01-23T04:56:07.000+00:00",
                        "userConditions": {
                            "eRef": "6be7c465-37a7-4f1e-98b7-15d6c636c566",
                            "eType": "arrangement",
                            "conditions": {
                                "amount": 100
                            }
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var NotificationPreferenceServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/engagements/client-api/v1/notification-preferences",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "$ref": "#/components/examples/NotificationPreferenceResponseExample/value"
                    }
                },
                {
                    status: 201,
                    body: {
                        "channels": [{
                                "userCanChange": true,
                                "channel": "email",
                                "enabled": true
                            }, {
                                "userCanChange": true,
                                "channel": "email",
                                "enabled": true
                            }],
                        "lastUpdatedAt": "2000-01-23T04:56:07.000+00:00",
                        "generalNotificationId": "generalNotificationId",
                        "active": true,
                        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                        "createdOn": "2000-01-23T04:56:07.000+00:00",
                        "userConditions": {
                            "eRef": "6be7c465-37a7-4f1e-98b7-15d6c636c566",
                            "eType": "arrangement",
                            "conditions": {
                                "amount": 100
                            }
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/engagements/client-api/v1/notification-preferences",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "value": {
                            "totalCount": 2,
                            "notificationPreferences": [{
                                    "$ref": "#/components/examples/NotificationPreferenceGetExample2/value"
                                }, {
                                    "$ref": "#/components/examples/NotificationPreferenceGetExample3/value"
                                }]
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "value": {
                            "totalCount": 2,
                            "notificationPreferences": [{
                                    "$ref": "#/components/examples/NotificationPreferenceGetExample1/value"
                                }, {
                                    "$ref": "#/components/examples/NotificationPreferenceGetExample2/value"
                                }]
                        }
                    }
                },
            ]
        },
        {
            urlPattern: "/engagements/client-api/v1/notification-preferences/{id}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "$ref": "#/components/examples/NotificationPreferenceResponseExample/value"
                    }
                },
                {
                    status: 200,
                    body: {
                        "channels": [{
                                "userCanChange": true,
                                "channel": "email",
                                "enabled": true
                            }, {
                                "userCanChange": true,
                                "channel": "email",
                                "enabled": true
                            }],
                        "lastUpdatedAt": "2000-01-23T04:56:07.000+00:00",
                        "generalNotificationId": "generalNotificationId",
                        "active": true,
                        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                        "createdOn": "2000-01-23T04:56:07.000+00:00",
                        "userConditions": {
                            "eRef": "6be7c465-37a7-4f1e-98b7-15d6c636c566",
                            "eType": "arrangement",
                            "conditions": {
                                "amount": 100
                            }
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    var SelectCampaignService = /** @class */ (function () {
        function SelectCampaignService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/engagements';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new EngagementConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        SelectCampaignService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        SelectCampaignService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        SelectCampaignService.prototype.selectCampaign = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _spaceId = requestParameters["spaceId"];
            if (_spaceId === null || _spaceId === undefined) {
                throw new Error('Required parameter spaceId was null or undefined when calling selectCampaign.');
            }
            var _dimensions = requestParameters["dimensions"];
            if (_dimensions === null || _dimensions === undefined) {
                throw new Error('Required parameter dimensions was null or undefined when calling selectCampaign.');
            }
            var _locale = requestParameters["locale"];
            if (_locale === null || _locale === undefined) {
                throw new Error('Required parameter locale was null or undefined when calling selectCampaign.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_spaceId !== undefined && _spaceId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _spaceId, 'spaceId');
            }
            if (_dimensions !== undefined && _dimensions !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _dimensions, 'dimensions');
            }
            if (_locale !== undefined && _locale !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _locale, 'locale');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/banner", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        SelectCampaignService.prototype.selectCampaignUrl = function (requestParameters) {
            var _spaceId = requestParameters["spaceId"];
            if (_spaceId === null || _spaceId === undefined) {
                throw new Error('Required parameter spaceId was null or undefined when calling selectCampaign.');
            }
            var _dimensions = requestParameters["dimensions"];
            if (_dimensions === null || _dimensions === undefined) {
                throw new Error('Required parameter dimensions was null or undefined when calling selectCampaign.');
            }
            var _locale = requestParameters["locale"];
            if (_locale === null || _locale === undefined) {
                throw new Error('Required parameter locale was null or undefined when calling selectCampaign.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_spaceId !== undefined && _spaceId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _spaceId, 'spaceId');
            }
            if (_dimensions !== undefined && _dimensions !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _dimensions, 'dimensions');
            }
            if (_locale !== undefined && _locale !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _locale, 'locale');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/banner" + (queryString ? "?" + queryString : '');
        };
        return SelectCampaignService;
    }());
    SelectCampaignService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SelectCampaignService, deps: [{ token: i1__namespace.HttpClient }, { token: ENGAGEMENT_BASE_PATH, optional: true }, { token: EngagementConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    SelectCampaignService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SelectCampaignService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SelectCampaignService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ENGAGEMENT_BASE_PATH]
                        }] }, { type: EngagementConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var SelectCampaignServiceSelectCampaignMocksProvider = i2.createMocks([{
            urlPattern: "/engagements/client-api/v1/banner",
            method: "GET",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        }]);
    var SelectCampaignServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/engagements/client-api/v1/banner",
            method: "GET",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    exports.AudienceType = AudienceType;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.CampaignChannelType = CampaignChannelType;
    exports.CampaignMetricsService = CampaignMetricsService;
    exports.CampaignMetricsServiceGetCampaignMetricsMocksProvider = CampaignMetricsServiceGetCampaignMetricsMocksProvider;
    exports.CampaignMetricsServiceMocksProvider = CampaignMetricsServiceMocksProvider;
    exports.CampaignMetricsServiceRedirectCampaignMocksProvider = CampaignMetricsServiceRedirectCampaignMocksProvider;
    exports.CampaignService = CampaignService;
    exports.CampaignServiceCreateCampaignMocksProvider = CampaignServiceCreateCampaignMocksProvider;
    exports.CampaignServiceDeleteCampaignMocksProvider = CampaignServiceDeleteCampaignMocksProvider;
    exports.CampaignServiceDisableCampaignMocksProvider = CampaignServiceDisableCampaignMocksProvider;
    exports.CampaignServiceEnableCampaignMocksProvider = CampaignServiceEnableCampaignMocksProvider;
    exports.CampaignServiceFinalizeCampaignMocksProvider = CampaignServiceFinalizeCampaignMocksProvider;
    exports.CampaignServiceGetCampaignByCampaignIdMocksProvider = CampaignServiceGetCampaignByCampaignIdMocksProvider;
    exports.CampaignServiceGetCampaignsMocksProvider = CampaignServiceGetCampaignsMocksProvider;
    exports.CampaignServiceMocksProvider = CampaignServiceMocksProvider;
    exports.CampaignServiceUpdateCampaignMocksProvider = CampaignServiceUpdateCampaignMocksProvider;
    exports.CampaignStatus = CampaignStatus;
    exports.ENGAGEMENT_BASE_PATH = ENGAGEMENT_BASE_PATH;
    exports.EngagementApiModule = EngagementApiModule;
    exports.EngagementConfiguration = EngagementConfiguration;
    exports.GeneralNotificationService = GeneralNotificationService;
    exports.GeneralNotificationServiceGetGeneralNotificationByIdMocksProvider = GeneralNotificationServiceGetGeneralNotificationByIdMocksProvider;
    exports.GeneralNotificationServiceGetGeneralNotificationsMocksProvider = GeneralNotificationServiceGetGeneralNotificationsMocksProvider;
    exports.GeneralNotificationServiceMocksProvider = GeneralNotificationServiceMocksProvider;
    exports.NotificationPreferenceService = NotificationPreferenceService;
    exports.NotificationPreferenceServiceCreateNotificationPreferenceMocksProvider = NotificationPreferenceServiceCreateNotificationPreferenceMocksProvider;
    exports.NotificationPreferenceServiceGetNotificationPreferencesMocksProvider = NotificationPreferenceServiceGetNotificationPreferencesMocksProvider;
    exports.NotificationPreferenceServiceMocksProvider = NotificationPreferenceServiceMocksProvider;
    exports.NotificationPreferenceServiceUpdateNotificationPreferenceMocksProvider = NotificationPreferenceServiceUpdateNotificationPreferenceMocksProvider;
    exports.SelectCampaignService = SelectCampaignService;
    exports.SelectCampaignServiceMocksProvider = SelectCampaignServiceMocksProvider;
    exports.SelectCampaignServiceSelectCampaignMocksProvider = SelectCampaignServiceSelectCampaignMocksProvider;
    exports.SeverityLevel = SeverityLevel;
    exports.TargetUrlDisplayModeResource = TargetUrlDisplayModeResource;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-engagement-http-ang.umd.js.map
