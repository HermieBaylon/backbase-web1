import { createMocks } from '@backbase/foundation-ang/data-http';
export const NotificationPreferenceServiceCreateNotificationPreferenceMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/notification-preferences",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "$ref": "#/components/examples/NotificationPreferenceResponseExample/value"
                }
            },
            {
                status: 201,
                body: {
                    "channels": [{
                            "userCanChange": true,
                            "channel": "email",
                            "enabled": true
                        }, {
                            "userCanChange": true,
                            "channel": "email",
                            "enabled": true
                        }],
                    "lastUpdatedAt": "2000-01-23T04:56:07.000+00:00",
                    "generalNotificationId": "generalNotificationId",
                    "active": true,
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                    "createdOn": "2000-01-23T04:56:07.000+00:00",
                    "userConditions": {
                        "eRef": "6be7c465-37a7-4f1e-98b7-15d6c636c566",
                        "eType": "arrangement",
                        "conditions": {
                            "amount": 100
                        }
                    }
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
export const NotificationPreferenceServiceGetNotificationPreferencesMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/notification-preferences",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "value": {
                        "totalCount": 2,
                        "notificationPreferences": [{
                                "$ref": "#/components/examples/NotificationPreferenceGetExample2/value"
                            }, {
                                "$ref": "#/components/examples/NotificationPreferenceGetExample3/value"
                            }]
                    }
                }
            },
            {
                status: 200,
                body: {
                    "value": {
                        "totalCount": 2,
                        "notificationPreferences": [{
                                "$ref": "#/components/examples/NotificationPreferenceGetExample1/value"
                            }, {
                                "$ref": "#/components/examples/NotificationPreferenceGetExample2/value"
                            }]
                    }
                }
            },
        ]
    }]);
export const NotificationPreferenceServiceUpdateNotificationPreferenceMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/notification-preferences/{id}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "$ref": "#/components/examples/NotificationPreferenceResponseExample/value"
                }
            },
            {
                status: 200,
                body: {
                    "channels": [{
                            "userCanChange": true,
                            "channel": "email",
                            "enabled": true
                        }, {
                            "userCanChange": true,
                            "channel": "email",
                            "enabled": true
                        }],
                    "lastUpdatedAt": "2000-01-23T04:56:07.000+00:00",
                    "generalNotificationId": "generalNotificationId",
                    "active": true,
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                    "createdOn": "2000-01-23T04:56:07.000+00:00",
                    "userConditions": {
                        "eRef": "6be7c465-37a7-4f1e-98b7-15d6c636c566",
                        "eType": "arrangement",
                        "conditions": {
                            "amount": 100
                        }
                    }
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
export const NotificationPreferenceServiceMocksProvider = createMocks([
    {
        urlPattern: "/engagements/client-api/v1/notification-preferences",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "$ref": "#/components/examples/NotificationPreferenceResponseExample/value"
                }
            },
            {
                status: 201,
                body: {
                    "channels": [{
                            "userCanChange": true,
                            "channel": "email",
                            "enabled": true
                        }, {
                            "userCanChange": true,
                            "channel": "email",
                            "enabled": true
                        }],
                    "lastUpdatedAt": "2000-01-23T04:56:07.000+00:00",
                    "generalNotificationId": "generalNotificationId",
                    "active": true,
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                    "createdOn": "2000-01-23T04:56:07.000+00:00",
                    "userConditions": {
                        "eRef": "6be7c465-37a7-4f1e-98b7-15d6c636c566",
                        "eType": "arrangement",
                        "conditions": {
                            "amount": 100
                        }
                    }
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/engagements/client-api/v1/notification-preferences",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "value": {
                        "totalCount": 2,
                        "notificationPreferences": [{
                                "$ref": "#/components/examples/NotificationPreferenceGetExample2/value"
                            }, {
                                "$ref": "#/components/examples/NotificationPreferenceGetExample3/value"
                            }]
                    }
                }
            },
            {
                status: 200,
                body: {
                    "value": {
                        "totalCount": 2,
                        "notificationPreferences": [{
                                "$ref": "#/components/examples/NotificationPreferenceGetExample1/value"
                            }, {
                                "$ref": "#/components/examples/NotificationPreferenceGetExample2/value"
                            }]
                    }
                }
            },
        ]
    },
    {
        urlPattern: "/engagements/client-api/v1/notification-preferences/{id}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "$ref": "#/components/examples/NotificationPreferenceResponseExample/value"
                }
            },
            {
                status: 200,
                body: {
                    "channels": [{
                            "userCanChange": true,
                            "channel": "email",
                            "enabled": true
                        }, {
                            "userCanChange": true,
                            "channel": "email",
                            "enabled": true
                        }],
                    "lastUpdatedAt": "2000-01-23T04:56:07.000+00:00",
                    "generalNotificationId": "generalNotificationId",
                    "active": true,
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                    "createdOn": "2000-01-23T04:56:07.000+00:00",
                    "userConditions": {
                        "eRef": "6be7c465-37a7-4f1e-98b7-15d6c636c566",
                        "eType": "arrangement",
                        "conditions": {
                            "amount": 100
                        }
                    }
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uUHJlZmVyZW5jZS5zZXJ2aWNlLm1vY2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vYXBpL25vdGlmaWNhdGlvblByZWZlcmVuY2Uuc2VydmljZS5tb2Nrcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFNakUsTUFBTSxDQUFDLE1BQU0sc0VBQXNFLEdBQWEsV0FBVyxDQUFDLENBQUM7UUFDckcsVUFBVSxFQUFFLHFEQUFxRDtRQUNqRSxNQUFNLEVBQUUsTUFBTTtRQUNkLFNBQVMsRUFBRTtZQUNIO2dCQUNJLE1BQU0sRUFBRSxHQUFHO2dCQUNYLElBQUksRUFBRTtvQkFDeEIsTUFBTSxFQUFHLG1FQUFtRTtpQkFDN0U7YUFDZ0I7WUFDRDtnQkFDSSxNQUFNLEVBQUUsR0FBRztnQkFDWCxJQUFJLEVBQUU7b0JBQ3hCLFVBQVUsRUFBRyxDQUFFOzRCQUNiLGVBQWUsRUFBRyxJQUFJOzRCQUN0QixTQUFTLEVBQUcsT0FBTzs0QkFDbkIsU0FBUyxFQUFHLElBQUk7eUJBQ2pCLEVBQUU7NEJBQ0QsZUFBZSxFQUFHLElBQUk7NEJBQ3RCLFNBQVMsRUFBRyxPQUFPOzRCQUNuQixTQUFTLEVBQUcsSUFBSTt5QkFDakIsQ0FBRTtvQkFDSCxlQUFlLEVBQUcsK0JBQStCO29CQUNqRCx1QkFBdUIsRUFBRyx1QkFBdUI7b0JBQ2pELFFBQVEsRUFBRyxJQUFJO29CQUNmLElBQUksRUFBRyxzQ0FBc0M7b0JBQzdDLFdBQVcsRUFBRywrQkFBK0I7b0JBQzdDLGdCQUFnQixFQUFHO3dCQUNqQixNQUFNLEVBQUcsc0NBQXNDO3dCQUMvQyxPQUFPLEVBQUcsYUFBYTt3QkFDdkIsWUFBWSxFQUFHOzRCQUNiLFFBQVEsRUFBRyxHQUFHO3lCQUNmO3FCQUNGO2lCQUNGO2FBQ2dCO1lBQ0Q7Z0JBQ0ksTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsSUFBSSxFQUFF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SjtDQUNBLENBQ0EsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZU1vY2tzIH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2RhdGEtaHR0cCc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiogTW9ja3MgcHJvdmlkZXIgZm9yIC9lbmdhZ2VtZW50cy9jbGllbnQtYXBpL3YxL25vdGlmaWNhdGlvbi1wcmVmZXJlbmNlcyBVUkwgcGF0dGVyblxuKi9cbmV4cG9ydCBjb25zdCBOb3RpZmljYXRpb25QcmVmZXJlbmNlU2VydmljZUNyZWF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VNb2Nrc1Byb3ZpZGVyOiBQcm92aWRlciA9IGNyZWF0ZU1vY2tzKFt7XG4gICAgICAgIHVybFBhdHRlcm46IFwiL2VuZ2FnZW1lbnRzL2NsaWVudC1hcGkvdjEvbm90aWZpY2F0aW9uLXByZWZlcmVuY2VzXCIsXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIHJlc3BvbnNlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAyMDEsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgXCIkcmVmXCIgOiBcIiMvY29tcG9uZW50cy9leGFtcGxlcy9Ob3RpZmljYXRpb25QcmVmZXJlbmNlUmVzcG9uc2VFeGFtcGxlL3ZhbHVlXCJcbn1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAyMDEsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgXCJjaGFubmVsc1wiIDogWyB7XG4gICAgXCJ1c2VyQ2FuQ2hhbmdlXCIgOiB0cnVlLFxuICAgIFwiY2hhbm5lbFwiIDogXCJlbWFpbFwiLFxuICAgIFwiZW5hYmxlZFwiIDogdHJ1ZVxuICB9LCB7XG4gICAgXCJ1c2VyQ2FuQ2hhbmdlXCIgOiB0cnVlLFxuICAgIFwiY2hhbm5lbFwiIDogXCJlbWFpbFwiLFxuICAgIFwiZW5hYmxlZFwiIDogdHJ1ZVxuICB9IF0sXG4gIFwibGFzdFVwZGF0ZWRBdFwiIDogXCIyMDAwLTAxLTIzVDA0OjU2OjA3LjAwMCswMDowMFwiLFxuICBcImdlbmVyYWxOb3RpZmljYXRpb25JZFwiIDogXCJnZW5lcmFsTm90aWZpY2F0aW9uSWRcIixcbiAgXCJhY3RpdmVcIiA6IHRydWUsXG4gIFwiaWRcIiA6IFwiMDQ2YjZjN2YtMGI4YS00M2I5LWIzNWQtNjQ4OWU2ZGFlZTkxXCIsXG4gIFwiY3JlYXRlZE9uXCIgOiBcIjIwMDAtMDEtMjNUMDQ6NTY6MDcuMDAwKzAwOjAwXCIsXG4gIFwidXNlckNvbmRpdGlvbnNcIiA6IHtcbiAgICBcImVSZWZcIiA6IFwiNmJlN2M0NjUtMzdhNy00ZjFlLTk4YjctMTVkNmM2MzZjNTY2XCIsXG4gICAgXCJlVHlwZVwiIDogXCJhcnJhbmdlbWVudFwiLFxuICAgIFwiY29uZGl0aW9uc1wiIDoge1xuICAgICAgXCJhbW91bnRcIiA6IDEwMFxuICAgIH1cbiAgfVxufVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgICAgICAgICAgICAgYm9keToge1xuICBcIm1lc3NhZ2VcIiA6IFwiUmVzb3VyY2Ugbm90IGZvdW5kLlwiLFxuICBcImVycm9yc1wiIDogWyB7XG4gICAgXCJtZXNzYWdlXCIgOiBcIlVuYWJsZSB0byBmaW5kIHRoZSByZXNvdXJjZSByZXF1ZXN0ZWQgcmVzb3VyY2U6IHtyZXNvdXJjZX0uXCIsXG4gICAgXCJrZXlcIiA6IFwiY29tbW9uLmFwaS5yZXNvdXJjZVwiLFxuICAgIFwiY29udGV4dFwiIDoge1xuICAgICAgXCJyZXNvdXJjZVwiIDogXCJhUmVzb3VyY2VcIlxuICAgIH1cbiAgfSBdXG59XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7XG4gIFwibWVzc2FnZVwiIDogXCJCYWQgUmVxdWVzdFwiLFxuICBcImVycm9yc1wiIDogWyB7XG4gICAgXCJtZXNzYWdlXCIgOiBcIlZhbHVlIEV4Y2VlZGVkLiBNdXN0IGJlIGJldHdlZW4ge21pbn0gYW5kIHttYXh9LlwiLFxuICAgIFwia2V5XCIgOiBcImNvbW1vbi5hcGkuc2hvZXNpemVcIixcbiAgICBcImNvbnRleHRcIiA6IHtcbiAgICAgIFwibWF4XCIgOiBcIjUwXCIsXG4gICAgICBcIm1pblwiIDogXCIxXCJcbiAgICB9XG4gIH0gXVxufVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgICAgICAgICAgICAgYm9keToge1xuICBcIm1lc3NhZ2VcIiA6IFwiQWNjZXNzIHRvIHJlcXVlc3RlZCByZXNvdXJjZSBkZW5pZWQuXCIsXG4gIFwiZXJyb3JzXCIgOiBbIHtcbiAgICBcIm1lc3NhZ2VcIiA6IFwiUmVzb3VyY2UgYWNjZXNzIGRlbmllZCBkdWUgdG8gYW4gaW5zdWZmaWNpZW50IHVzZXIgcXVvdGEgb2Yge3F1b3RhfS5cIixcbiAgICBcImtleVwiIDogXCJjb21tb24uYXBpLnF1b3RhXCIsXG4gICAgXCJjb250ZXh0XCIgOiB7XG4gICAgICBcInF1b3RhXCIgOiBcInNvbWVRdW90YVwiXG4gICAgfVxuICB9IF1cbn1cbiAgICAgICAgICAgICAgICB9LFxuICAgIF1cbn1dKTtcbi8qKlxuKiBNb2NrcyBwcm92aWRlciBmb3IgL2VuZ2FnZW1lbnRzL2NsaWVudC1hcGkvdjEvbm90aWZpY2F0aW9uLXByZWZlcmVuY2VzIFVSTCBwYXR0ZXJuXG4qL1xuZXhwb3J0IGNvbnN0IE5vdGlmaWNhdGlvblByZWZlcmVuY2VTZXJ2aWNlR2V0Tm90aWZpY2F0aW9uUHJlZmVyZW5jZXNNb2Nrc1Byb3ZpZGVyOiBQcm92aWRlciA9IGNyZWF0ZU1vY2tzKFt7XG4gICAgICAgIHVybFBhdHRlcm46IFwiL2VuZ2FnZW1lbnRzL2NsaWVudC1hcGkvdjEvbm90aWZpY2F0aW9uLXByZWZlcmVuY2VzXCIsXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgcmVzcG9uc2VzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgICAgICAgICAgICAgYm9keToge1xuICBcInZhbHVlXCIgOiB7XG4gICAgXCJ0b3RhbENvdW50XCIgOiAyLFxuICAgIFwibm90aWZpY2F0aW9uUHJlZmVyZW5jZXNcIiA6IFsge1xuICAgICAgXCIkcmVmXCIgOiBcIiMvY29tcG9uZW50cy9leGFtcGxlcy9Ob3RpZmljYXRpb25QcmVmZXJlbmNlR2V0RXhhbXBsZTIvdmFsdWVcIlxuICAgIH0sIHtcbiAgICAgIFwiJHJlZlwiIDogXCIjL2NvbXBvbmVudHMvZXhhbXBsZXMvTm90aWZpY2F0aW9uUHJlZmVyZW5jZUdldEV4YW1wbGUzL3ZhbHVlXCJcbiAgICB9IF1cbiAgfVxufVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgICAgICAgICAgICAgYm9keToge1xuICBcInZhbHVlXCIgOiB7XG4gICAgXCJ0b3RhbENvdW50XCIgOiAyLFxuICAgIFwibm90aWZpY2F0aW9uUHJlZmVyZW5jZXNcIiA6IFsge1xuICAgICAgXCIkcmVmXCIgOiBcIiMvY29tcG9uZW50cy9leGFtcGxlcy9Ob3RpZmljYXRpb25QcmVmZXJlbmNlR2V0RXhhbXBsZTEvdmFsdWVcIlxuICAgIH0sIHtcbiAgICAgIFwiJHJlZlwiIDogXCIjL2NvbXBvbmVudHMvZXhhbXBsZXMvTm90aWZpY2F0aW9uUHJlZmVyZW5jZUdldEV4YW1wbGUyL3ZhbHVlXCJcbiAgICB9IF1cbiAgfVxufVxuICAgICAgICAgICAgICAgIH0sXG4gICAgXVxufV0pO1xuLyoqXG4qIE1vY2tzIHByb3ZpZGVyIGZvciAvZW5nYWdlbWVudHMvY2xpZW50LWFwaS92MS9ub3RpZmljYXRpb24tcHJlZmVyZW5jZXMve2lkfSBVUkwgcGF0dGVyblxuKi9cbmV4cG9ydCBjb25zdCBOb3RpZmljYXRpb25QcmVmZXJlbmNlU2VydmljZVVwZGF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VNb2Nrc1Byb3ZpZGVyOiBQcm92aWRlciA9IGNyZWF0ZU1vY2tzKFt7XG4gICAgICAgIHVybFBhdHRlcm46IFwiL2VuZ2FnZW1lbnRzL2NsaWVudC1hcGkvdjEvbm90aWZpY2F0aW9uLXByZWZlcmVuY2VzL3tpZH1cIixcbiAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgICByZXNwb25zZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7XG4gIFwiJHJlZlwiIDogXCIjL2NvbXBvbmVudHMvZXhhbXBsZXMvTm90aWZpY2F0aW9uUHJlZmVyZW5jZVJlc3BvbnNlRXhhbXBsZS92YWx1ZVwiXG59XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7XG4gIFwiY2hhbm5lbHNcIiA6IFsge1xuICAgIFwidXNlckNhbkNoYW5nZVwiIDogdHJ1ZSxcbiAgICBcImNoYW5uZWxcIiA6IFwiZW1haWxcIixcbiAgICBcImVuYWJsZWRcIiA6IHRydWVcbiAgfSwge1xuICAgIFwidXNlckNhbkNoYW5nZVwiIDogdHJ1ZSxcbiAgICBcImNoYW5uZWxcIiA6IFwiZW1haWxcIixcbiAgICBcImVuYWJsZWRcIiA6IHRydWVcbiAgfSBdLFxuICBcImxhc3RVcGRhdGVkQXRcIiA6IFwiMjAwMC0wMS0yM1QwNDo1NjowNy4wMDArMDA6MDBcIixcbiAgXCJnZW5lcmFsTm90aWZpY2F0aW9uSWRcIiA6IFwiZ2VuZXJhbE5vdGlmaWNhdGlvbklkXCIsXG4gIFwiYWN0aXZlXCIgOiB0cnVlLFxuICBcImlkXCIgOiBcIjA0NmI2YzdmLTBiOGEtNDNiOS1iMzVkLTY0ODllNmRhZWU5MVwiLFxuICBcImNyZWF0ZWRPblwiIDogXCIyMDAwLTAxLTIzVDA0OjU2OjA3LjAwMCswMDowMFwiLFxuICBcInVzZXJDb25kaXRpb25zXCIgOiB7XG4gICAgXCJlUmVmXCIgOiBcIjZiZTdjNDY1LTM3YTctNGYxZS05OGI3LTE1ZDZjNjM2YzU2NlwiLFxuICAgIFwiZVR5cGVcIiA6IFwiYXJyYW5nZW1lbnRcIixcbiAgICBcImNvbmRpdGlvbnNcIiA6IHtcbiAgICAgIFwiYW1vdW50XCIgOiAxMDBcbiAgICB9XG4gIH1cbn1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgXCJtZXNzYWdlXCIgOiBcIlJlc291cmNlIG5vdCBmb3VuZC5cIixcbiAgXCJlcnJvcnNcIiA6IFsge1xuICAgIFwibWVzc2FnZVwiIDogXCJVbmFibGUgdG8gZmluZCB0aGUgcmVzb3VyY2UgcmVxdWVzdGVkIHJlc291cmNlOiB7cmVzb3VyY2V9LlwiLFxuICAgIFwia2V5XCIgOiBcImNvbW1vbi5hcGkucmVzb3VyY2VcIixcbiAgICBcImNvbnRleHRcIiA6IHtcbiAgICAgIFwicmVzb3VyY2VcIiA6IFwiYVJlc291cmNlXCJcbiAgICB9XG4gIH0gXVxufVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgICAgICAgICAgICAgYm9keToge1xuICBcIm1lc3NhZ2VcIiA6IFwiQmFkIFJlcXVlc3RcIixcbiAgXCJlcnJvcnNcIiA6IFsge1xuICAgIFwibWVzc2FnZVwiIDogXCJWYWx1ZSBFeGNlZWRlZC4gTXVzdCBiZSBiZXR3ZWVuIHttaW59IGFuZCB7bWF4fS5cIixcbiAgICBcImtleVwiIDogXCJjb21tb24uYXBpLnNob2VzaXplXCIsXG4gICAgXCJjb250ZXh0XCIgOiB7XG4gICAgICBcIm1heFwiIDogXCI1MFwiLFxuICAgICAgXCJtaW5cIiA6IFwiMVwiXG4gICAgfVxuICB9IF1cbn1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgXCJtZXNzYWdlXCIgOiBcIkFjY2VzcyB0byByZXF1ZXN0ZWQgcmVzb3VyY2UgZGVuaWVkLlwiLFxuICBcImVycm9yc1wiIDogWyB7XG4gICAgXCJtZXNzYWdlXCIgOiBcIlJlc291cmNlIGFjY2VzcyBkZW5pZWQgZHVlIHRvIGFuIGluc3VmZmljaWVudCB1c2VyIHF1b3RhIG9mIHtxdW90YX0uXCIsXG4gICAgXCJrZXlcIiA6IFwiY29tbW9uLmFwaS5xdW90YVwiLFxuICAgIFwiY29udGV4dFwiIDoge1xuICAgICAgXCJxdW90YVwiIDogXCJzb21lUXVvdGFcIlxuICAgIH1cbiAgfSBdXG59XG4gICAgICAgICAgICAgICAgfSxcbiAgICBdXG59XSk7XG5cbmV4cG9ydCBjb25zdCBOb3RpZmljYXRpb25QcmVmZXJlbmNlU2VydmljZU1vY2tzUHJvdmlkZXI6IFByb3ZpZGVyID0gY3JlYXRlTW9ja3MoXG4gICAgW1xuICAgIHtcbiAgICAgICAgdXJsUGF0dGVybjogXCIvZW5nYWdlbWVudHMvY2xpZW50LWFwaS92MS9ub3RpZmljYXRpb24tcHJlZmVyZW5jZXNcIixcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgcmVzcG9uc2VzOiBbXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IDIwMSxcbiAgICAgICAgICAgICAgICBib2R5OiB7XG4gIFwiJHJlZlwiIDogXCIjL2NvbXBvbmVudHMvZXhhbXBsZXMvTm90aWZpY2F0aW9uUHJlZmVyZW5jZVJlc3BvbnNlRXhhbXBsZS92YWx1ZVwiXG59XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXR1czogMjAxLFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgXCJjaGFubmVsc1wiIDogWyB7XG4gICAgXCJ1c2VyQ2FuQ2hhbmdlXCIgOiB0cnVlLFxuICAgIFwiY2hhbm5lbFwiIDogXCJlbWFpbFwiLFxuICAgIFwiZW5hYmxlZFwiIDogdHJ1ZVxuICB9LCB7XG4gICAgXCJ1c2VyQ2FuQ2hhbmdlXCIgOiB0cnVlLFxuICAgIFwiY2hhbm5lbFwiIDogXCJlbWFpbFwiLFxuICAgIFwiZW5hYmxlZFwiIDogdHJ1ZVxuICB9IF0sXG4gIFwibGFzdFVwZGF0ZWRBdFwiIDogXCIyMDAwLTAxLTIzVDA0OjU2OjA3LjAwMCswMDowMFwiLFxuICBcImdlbmVyYWxOb3RpZmljYXRpb25JZFwiIDogXCJnZW5lcmFsTm90aWZpY2F0aW9uSWRcIixcbiAgXCJhY3RpdmVcIiA6IHRydWUsXG4gIFwiaWRcIiA6IFwiMDQ2YjZjN2YtMGI4YS00M2I5LWIzNWQtNjQ4OWU2ZGFlZTkxXCIsXG4gIFwiY3JlYXRlZE9uXCIgOiBcIjIwMDAtMDEtMjNUMDQ6NTY6MDcuMDAwKzAwOjAwXCIsXG4gIFwidXNlckNvbmRpdGlvbnNcIiA6IHtcbiAgICBcImVSZWZcIiA6IFwiNmJlN2M0NjUtMzdhNy00ZjFlLTk4YjctMTVkNmM2MzZjNTY2XCIsXG4gICAgXCJlVHlwZVwiIDogXCJhcnJhbmdlbWVudFwiLFxuICAgIFwiY29uZGl0aW9uc1wiIDoge1xuICAgICAgXCJhbW91bnRcIiA6IDEwMFxuICAgIH1cbiAgfVxufVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgXCJtZXNzYWdlXCIgOiBcIlJlc291cmNlIG5vdCBmb3VuZC5cIixcbiAgXCJlcnJvcnNcIiA6IFsge1xuICAgIFwibWVzc2FnZVwiIDogXCJVbmFibGUgdG8gZmluZCB0aGUgcmVzb3VyY2UgcmVxdWVzdGVkIHJlc291cmNlOiB7cmVzb3VyY2V9LlwiLFxuICAgIFwia2V5XCIgOiBcImNvbW1vbi5hcGkucmVzb3VyY2VcIixcbiAgICBcImNvbnRleHRcIiA6IHtcbiAgICAgIFwicmVzb3VyY2VcIiA6IFwiYVJlc291cmNlXCJcbiAgICB9XG4gIH0gXVxufVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgXCJtZXNzYWdlXCIgOiBcIkJhZCBSZXF1ZXN0XCIsXG4gIFwiZXJyb3JzXCIgOiBbIHtcbiAgICBcIm1lc3NhZ2VcIiA6IFwiVmFsdWUgRXhjZWVkZWQuIE11c3QgYmUgYmV0d2VlbiB7bWlufSBhbmQge21heH0uXCIsXG4gICAgXCJrZXlcIiA6IFwiY29tbW9uLmFwaS5zaG9lc2l6ZVwiLFxuICAgIFwiY29udGV4dFwiIDoge1xuICAgICAgXCJtYXhcIiA6IFwiNTBcIixcbiAgICAgIFwibWluXCIgOiBcIjFcIlxuICAgIH1cbiAgfSBdXG59XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgICAgICAgICAgYm9keToge1xuICBcIm1lc3NhZ2VcIiA6IFwiQWNjZXNzIHRvIHJlcXVlc3RlZCByZXNvdXJjZSBkZW5pZWQuXCIsXG4gIFwiZXJyb3JzXCIgOiBbIHtcbiAgICBcIm1lc3NhZ2VcIiA6IFwiUmVzb3VyY2UgYWNjZXNzIGRlbmllZCBkdWUgdG8gYW4gaW5zdWZmaWNpZW50IHVzZXIgcXVvdGEgb2Yge3F1b3RhfS5cIixcbiAgICBcImtleVwiIDogXCJjb21tb24uYXBpLnF1b3RhXCIsXG4gICAgXCJjb250ZXh0XCIgOiB7XG4gICAgICBcInF1b3RhXCIgOiBcInNvbWVRdW90YVwiXG4gICAgfVxuICB9IF1cbn1cbiAgICAgICAgICAgIH0sXG4gICAgXVxufSxcbiAgICB7XG4gICAgICAgIHVybFBhdHRlcm46IFwiL2VuZ2FnZW1lbnRzL2NsaWVudC1hcGkvdjEvbm90aWZpY2F0aW9uLXByZWZlcmVuY2VzXCIsXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgcmVzcG9uc2VzOiBbXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgICAgICAgICBib2R5OiB7XG4gIFwidmFsdWVcIiA6IHtcbiAgICBcInRvdGFsQ291bnRcIiA6IDIsXG4gICAgXCJub3RpZmljYXRpb25QcmVmZXJlbmNlc1wiIDogWyB7XG4gICAgICBcIiRyZWZcIiA6IFwiIy9jb21wb25lbnRzL2V4YW1wbGVzL05vdGlmaWNhdGlvblByZWZlcmVuY2VHZXRFeGFtcGxlMi92YWx1ZVwiXG4gICAgfSwge1xuICAgICAgXCIkcmVmXCIgOiBcIiMvY29tcG9uZW50cy9leGFtcGxlcy9Ob3RpZmljYXRpb25QcmVmZXJlbmNlR2V0RXhhbXBsZTMvdmFsdWVcIlxuICAgIH0gXVxuICB9XG59XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgXCJ2YWx1ZVwiIDoge1xuICAgIFwidG90YWxDb3VudFwiIDogMixcbiAgICBcIm5vdGlmaWNhdGlvblByZWZlcmVuY2VzXCIgOiBbIHtcbiAgICAgIFwiJHJlZlwiIDogXCIjL2NvbXBvbmVudHMvZXhhbXBsZXMvTm90aWZpY2F0aW9uUHJlZmVyZW5jZUdldEV4YW1wbGUxL3ZhbHVlXCJcbiAgICB9LCB7XG4gICAgICBcIiRyZWZcIiA6IFwiIy9jb21wb25lbnRzL2V4YW1wbGVzL05vdGlmaWNhdGlvblByZWZlcmVuY2VHZXRFeGFtcGxlMi92YWx1ZVwiXG4gICAgfSBdXG4gIH1cbn1cbiAgICAgICAgICAgIH0sXG4gICAgXVxufSxcbiAgICB7XG4gICAgICAgIHVybFBhdHRlcm46IFwiL2VuZ2FnZW1lbnRzL2NsaWVudC1hcGkvdjEvbm90aWZpY2F0aW9uLXByZWZlcmVuY2VzL3tpZH1cIixcbiAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgICByZXNwb25zZXM6IFtcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgXCIkcmVmXCIgOiBcIiMvY29tcG9uZW50cy9leGFtcGxlcy9Ob3RpZmljYXRpb25QcmVmZXJlbmNlUmVzcG9uc2VFeGFtcGxlL3ZhbHVlXCJcbn1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgICAgICAgICAgYm9keToge1xuICBcImNoYW5uZWxzXCIgOiBbIHtcbiAgICBcInVzZXJDYW5DaGFuZ2VcIiA6IHRydWUsXG4gICAgXCJjaGFubmVsXCIgOiBcImVtYWlsXCIsXG4gICAgXCJlbmFibGVkXCIgOiB0cnVlXG4gIH0sIHtcbiAgICBcInVzZXJDYW5DaGFuZ2VcIiA6IHRydWUsXG4gICAgXCJjaGFubmVsXCIgOiBcImVtYWlsXCIsXG4gICAgXCJlbmFibGVkXCIgOiB0cnVlXG4gIH0gXSxcbiAgXCJsYXN0VXBkYXRlZEF0XCIgOiBcIjIwMDAtMDEtMjNUMDQ6NTY6MDcuMDAwKzAwOjAwXCIsXG4gIFwiZ2VuZXJhbE5vdGlmaWNhdGlvbklkXCIgOiBcImdlbmVyYWxOb3RpZmljYXRpb25JZFwiLFxuICBcImFjdGl2ZVwiIDogdHJ1ZSxcbiAgXCJpZFwiIDogXCIwNDZiNmM3Zi0wYjhhLTQzYjktYjM1ZC02NDg5ZTZkYWVlOTFcIixcbiAgXCJjcmVhdGVkT25cIiA6IFwiMjAwMC0wMS0yM1QwNDo1NjowNy4wMDArMDA6MDBcIixcbiAgXCJ1c2VyQ29uZGl0aW9uc1wiIDoge1xuICAgIFwiZVJlZlwiIDogXCI2YmU3YzQ2NS0zN2E3LTRmMWUtOThiNy0xNWQ2YzYzNmM1NjZcIixcbiAgICBcImVUeXBlXCIgOiBcImFycmFuZ2VtZW50XCIsXG4gICAgXCJjb25kaXRpb25zXCIgOiB7XG4gICAgICBcImFtb3VudFwiIDogMTAwXG4gICAgfVxuICB9XG59XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgICAgICAgICAgYm9keToge1xuICBcIm1lc3NhZ2VcIiA6IFwiUmVzb3VyY2Ugbm90IGZvdW5kLlwiLFxuICBcImVycm9yc1wiIDogWyB7XG4gICAgXCJtZXNzYWdlXCIgOiBcIlVuYWJsZSB0byBmaW5kIHRoZSByZXNvdXJjZSByZXF1ZXN0ZWQgcmVzb3VyY2U6IHtyZXNvdXJjZX0uXCIsXG4gICAgXCJrZXlcIiA6IFwiY29tbW9uLmFwaS5yZXNvdXJjZVwiLFxuICAgIFwiY29udGV4dFwiIDoge1xuICAgICAgXCJyZXNvdXJjZVwiIDogXCJhUmVzb3VyY2VcIlxuICAgIH1cbiAgfSBdXG59XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgICAgICAgICAgYm9keToge1xuICBcIm1lc3NhZ2VcIiA6IFwiQmFkIFJlcXVlc3RcIixcbiAgXCJlcnJvcnNcIiA6IFsge1xuICAgIFwibWVzc2FnZVwiIDogXCJWYWx1ZSBFeGNlZWRlZC4gTXVzdCBiZSBiZXR3ZWVuIHttaW59IGFuZCB7bWF4fS5cIixcbiAgICBcImtleVwiIDogXCJjb21tb24uYXBpLnNob2VzaXplXCIsXG4gICAgXCJjb250ZXh0XCIgOiB7XG4gICAgICBcIm1heFwiIDogXCI1MFwiLFxuICAgICAgXCJtaW5cIiA6IFwiMVwiXG4gICAgfVxuICB9IF1cbn1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgICAgICAgICBib2R5OiB7XG4gIFwibWVzc2FnZVwiIDogXCJBY2Nlc3MgdG8gcmVxdWVzdGVkIHJlc291cmNlIGRlbmllZC5cIixcbiAgXCJlcnJvcnNcIiA6IFsge1xuICAgIFwibWVzc2FnZVwiIDogXCJSZXNvdXJjZSBhY2Nlc3MgZGVuaWVkIGR1ZSB0byBhbiBpbnN1ZmZpY2llbnQgdXNlciBxdW90YSBvZiB7cXVvdGF9LlwiLFxuICAgIFwia2V5XCIgOiBcImNvbW1vbi5hcGkucXVvdGFcIixcbiAgICBcImNvbnRleHRcIiA6IHtcbiAgICAgIFwicXVvdGFcIiA6IFwic29tZVF1b3RhXCJcbiAgICB9XG4gIH0gXVxufVxuICAgICAgICAgICAgfSxcbiAgICBdXG59LFxuXVxuKTtcblxuXG4iXX0=