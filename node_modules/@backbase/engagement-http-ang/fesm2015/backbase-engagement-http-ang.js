import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const AudienceType = {
    None: 'none',
    Id: 'id',
    All: 'all'
};

var BannerChannel;
(function (BannerChannel) {
    BannerChannel.PriorityEnum = {
        Low: 'low',
        Medium: 'medium',
        High: 'high'
    };
})(BannerChannel || (BannerChannel = {}));

var BannerChannelAllOf;
(function (BannerChannelAllOf) {
    BannerChannelAllOf.PriorityEnum = {
        Low: 'low',
        Medium: 'medium',
        High: 'high'
    };
})(BannerChannelAllOf || (BannerChannelAllOf = {}));

const CampaignChannelType = {
    Banner: 'banner',
    MessageCenter: 'message-center'
};

const CampaignStatus = {
    Draft: 'draft',
    Final: 'final',
    Superseded: 'superseded',
    Archived: 'archived',
    Paused: 'paused'
};

const SeverityLevel = {
    ALERT: 'ALERT',
    WARNING: 'WARNING',
    SUCCESS: 'SUCCESS',
    INFO: 'INFO'
};

const TargetUrlDisplayModeResource = {
    Self: 'self',
    Blank: 'blank'
};

const ENGAGEMENT_BASE_PATH = new InjectionToken('ENGAGEMENT_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class EngagementConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module EngagementConfiguration');

class EngagementApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('EngagementApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: EngagementApiModule,
            providers: [{ provide: EngagementConfiguration, useFactory: configurationFactory }]
        };
    }
}
EngagementApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EngagementApiModule, deps: [{ token: EngagementApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: EngagementConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
EngagementApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EngagementApiModule });
EngagementApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EngagementApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EngagementApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: EngagementApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: EngagementConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class CampaignService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/engagements';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new EngagementConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    createCampaign(requestParameters, observe = 'body', reportProgress = false, options) {
        const _campaignRequestResource = requestParameters["campaignRequestResource"];
        if (_campaignRequestResource === null || _campaignRequestResource === undefined) {
            throw new Error('Required parameter campaignRequestResource was null or undefined when calling createCampaign.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/engagements/custom`, _campaignRequestResource, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    createCampaignUrl(requestParameters) {
        const _campaignRequestResource = requestParameters["campaignRequestResource"];
        if (_campaignRequestResource === null || _campaignRequestResource === undefined) {
            throw new Error('Required parameter campaignRequestResource was null or undefined when calling createCampaign.');
        }
        return `${this.configuration.basePath}/client-api/v1/engagements/custom`;
    }
    deleteCampaign(requestParameters, observe = 'body', reportProgress = false, options) {
        const _campaignId = requestParameters["campaignId"];
        if (_campaignId === null || _campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling deleteCampaign.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteCampaignUrl(requestParameters) {
        const _campaignId = requestParameters["campaignId"];
        if (_campaignId === null || _campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling deleteCampaign.');
        }
        return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}`;
    }
    disableCampaign(requestParameters, observe = 'body', reportProgress = false, options) {
        const _campaignId = requestParameters["campaignId"];
        if (_campaignId === null || _campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling disableCampaign.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/disable`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    disableCampaignUrl(requestParameters) {
        const _campaignId = requestParameters["campaignId"];
        if (_campaignId === null || _campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling disableCampaign.');
        }
        return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/disable`;
    }
    enableCampaign(requestParameters, observe = 'body', reportProgress = false, options) {
        const _campaignId = requestParameters["campaignId"];
        if (_campaignId === null || _campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling enableCampaign.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/enable`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    enableCampaignUrl(requestParameters) {
        const _campaignId = requestParameters["campaignId"];
        if (_campaignId === null || _campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling enableCampaign.');
        }
        return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/enable`;
    }
    finalizeCampaign(requestParameters, observe = 'body', reportProgress = false, options) {
        const _campaignId = requestParameters["campaignId"];
        if (_campaignId === null || _campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling finalizeCampaign.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/final`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    finalizeCampaignUrl(requestParameters) {
        const _campaignId = requestParameters["campaignId"];
        if (_campaignId === null || _campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling finalizeCampaign.');
        }
        return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/final`;
    }
    getCampaignByCampaignId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _campaignId = requestParameters["campaignId"];
        if (_campaignId === null || _campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling getCampaignByCampaignId.');
        }
        const _status = requestParameters["status"];
        const _version = requestParameters["version"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_status) {
            queryParameters = this.addToHttpParams(queryParameters, _status.join(COLLECTION_FORMATS['csv']), 'status');
        }
        if (_version !== undefined && _version !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _version, 'version');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getCampaignByCampaignIdUrl(requestParameters) {
        const _campaignId = requestParameters["campaignId"];
        if (_campaignId === null || _campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling getCampaignByCampaignId.');
        }
        const _status = requestParameters["status"];
        const _version = requestParameters["version"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_status) {
            queryParameters = this.addToHttpParams(queryParameters, _status.join(COLLECTION_FORMATS['csv']), 'status');
        }
        if (_version !== undefined && _version !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _version, 'version');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}${queryString ? `?${queryString}` : ''}`;
    }
    getCampaigns(requestParameters, observe = 'body', reportProgress = false, options) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _endDateAfter = requestParameters["endDateAfter"];
        const _endDateBefore = requestParameters["endDateBefore"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_endDateAfter !== undefined && _endDateAfter !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDateAfter, 'endDateAfter');
        }
        if (_endDateBefore !== undefined && _endDateBefore !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDateBefore, 'endDateBefore');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/engagements/custom`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getCampaignsUrl(requestParameters) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _endDateAfter = requestParameters["endDateAfter"];
        const _endDateBefore = requestParameters["endDateBefore"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_endDateAfter !== undefined && _endDateAfter !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDateAfter, 'endDateAfter');
        }
        if (_endDateBefore !== undefined && _endDateBefore !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDateBefore, 'endDateBefore');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/engagements/custom${queryString ? `?${queryString}` : ''}`;
    }
    updateCampaign(requestParameters, observe = 'body', reportProgress = false, options) {
        const _campaignId = requestParameters["campaignId"];
        if (_campaignId === null || _campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling updateCampaign.');
        }
        const _campaignRequestResource = requestParameters["campaignRequestResource"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}`, _campaignRequestResource, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateCampaignUrl(requestParameters) {
        const _campaignId = requestParameters["campaignId"];
        if (_campaignId === null || _campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling updateCampaign.');
        }
        const _campaignRequestResource = requestParameters["campaignRequestResource"];
        return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}`;
    }
}
CampaignService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CampaignService, deps: [{ token: i1.HttpClient }, { token: ENGAGEMENT_BASE_PATH, optional: true }, { token: EngagementConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
CampaignService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CampaignService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CampaignService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ENGAGEMENT_BASE_PATH]
                }] }, { type: EngagementConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const CampaignServiceCreateCampaignMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/engagements/custom",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    }]);
const CampaignServiceDeleteCampaignMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}",
        method: "DELETE",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const CampaignServiceDisableCampaignMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}/disable",
        method: "PUT",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const CampaignServiceEnableCampaignMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}/enable",
        method: "PUT",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const CampaignServiceFinalizeCampaignMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}/final",
        method: "PUT",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const CampaignServiceGetCampaignByCampaignIdMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}",
        method: "GET",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const CampaignServiceGetCampaignsMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/engagements/custom",
        method: "GET",
        responses: [
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    }]);
const CampaignServiceUpdateCampaignMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}",
        method: "PUT",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    }]);
const CampaignServiceMocksProvider = createMocks([
    {
        urlPattern: "/engagements/client-api/v1/engagements/custom",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}",
        method: "DELETE",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}/disable",
        method: "PUT",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}/enable",
        method: "PUT",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}/final",
        method: "PUT",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}",
        method: "GET",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/engagements/client-api/v1/engagements/custom",
        method: "GET",
        responses: [
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}",
        method: "PUT",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    },
]);

class CampaignMetricsService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/engagements';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new EngagementConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getCampaignMetrics(requestParameters, observe = 'body', reportProgress = false, options) {
        const _campaignId = requestParameters["campaignId"];
        if (_campaignId === null || _campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling getCampaignMetrics.');
        }
        const _channelId = requestParameters["channelId"];
        if (_channelId === null || _channelId === undefined) {
            throw new Error('Required parameter channelId was null or undefined when calling getCampaignMetrics.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/channels/${encodeURIComponent(String(_channelId))}/metrics`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getCampaignMetricsUrl(requestParameters) {
        const _campaignId = requestParameters["campaignId"];
        if (_campaignId === null || _campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling getCampaignMetrics.');
        }
        const _channelId = requestParameters["channelId"];
        if (_channelId === null || _channelId === undefined) {
            throw new Error('Required parameter channelId was null or undefined when calling getCampaignMetrics.');
        }
        return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/channels/${encodeURIComponent(String(_channelId))}/metrics`;
    }
    redirectCampaign(requestParameters, observe = 'body', reportProgress = false, options) {
        const _utmContent = requestParameters["utmContent"];
        if (_utmContent === null || _utmContent === undefined) {
            throw new Error('Required parameter utmContent was null or undefined when calling redirectCampaign.');
        }
        const _utmBanner = requestParameters["utmBanner"];
        if (_utmBanner === null || _utmBanner === undefined) {
            throw new Error('Required parameter utmBanner was null or undefined when calling redirectCampaign.');
        }
        const _key = requestParameters["key"];
        if (_key === null || _key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling redirectCampaign.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_utmContent !== undefined && _utmContent !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _utmContent, 'utm_content');
        }
        if (_utmBanner !== undefined && _utmBanner !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _utmBanner, 'utm_banner');
        }
        if (_key !== undefined && _key !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _key, 'key');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/banner/redirect`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    redirectCampaignUrl(requestParameters) {
        const _utmContent = requestParameters["utmContent"];
        if (_utmContent === null || _utmContent === undefined) {
            throw new Error('Required parameter utmContent was null or undefined when calling redirectCampaign.');
        }
        const _utmBanner = requestParameters["utmBanner"];
        if (_utmBanner === null || _utmBanner === undefined) {
            throw new Error('Required parameter utmBanner was null or undefined when calling redirectCampaign.');
        }
        const _key = requestParameters["key"];
        if (_key === null || _key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling redirectCampaign.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_utmContent !== undefined && _utmContent !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _utmContent, 'utm_content');
        }
        if (_utmBanner !== undefined && _utmBanner !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _utmBanner, 'utm_banner');
        }
        if (_key !== undefined && _key !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _key, 'key');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/banner/redirect${queryString ? `?${queryString}` : ''}`;
    }
}
CampaignMetricsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CampaignMetricsService, deps: [{ token: i1.HttpClient }, { token: ENGAGEMENT_BASE_PATH, optional: true }, { token: EngagementConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
CampaignMetricsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CampaignMetricsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CampaignMetricsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ENGAGEMENT_BASE_PATH]
                }] }, { type: EngagementConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const CampaignMetricsServiceGetCampaignMetricsMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}/channels/{channelId}/metrics",
        method: "GET",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const CampaignMetricsServiceRedirectCampaignMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/banner/redirect",
        method: "GET",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const CampaignMetricsServiceMocksProvider = createMocks([
    {
        urlPattern: "/engagements/client-api/v1/engagements/custom/{campaignId}/channels/{channelId}/metrics",
        method: "GET",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/engagements/client-api/v1/banner/redirect",
        method: "GET",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);

class GeneralNotificationService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/engagements';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new EngagementConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getGeneralNotificationById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getGeneralNotificationById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/general-notifications/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getGeneralNotificationByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getGeneralNotificationById.');
        }
        return `${this.configuration.basePath}/client-api/v1/general-notifications/${encodeURIComponent(String(_id))}`;
    }
    getGeneralNotifications(requestParameters, observe = 'body', reportProgress = false, options) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/general-notifications`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getGeneralNotificationsUrl(requestParameters) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/general-notifications${queryString ? `?${queryString}` : ''}`;
    }
}
GeneralNotificationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: GeneralNotificationService, deps: [{ token: i1.HttpClient }, { token: ENGAGEMENT_BASE_PATH, optional: true }, { token: EngagementConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
GeneralNotificationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: GeneralNotificationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: GeneralNotificationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ENGAGEMENT_BASE_PATH]
                }] }, { type: EngagementConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const GeneralNotificationServiceGetGeneralNotificationByIdMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/general-notifications/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "$ref": "#/components/examples/GeneralNotificationExample/value"
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const GeneralNotificationServiceGetGeneralNotificationsMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/general-notifications",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "value": [{
                            "$ref": "#/components/examples/GeneralNotificationSummaryExample1/value"
                        }, {
                            "$ref": "#/components/examples/GeneralNotificationSummaryExample2/value"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const GeneralNotificationServiceMocksProvider = createMocks([
    {
        urlPattern: "/engagements/client-api/v1/general-notifications/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "$ref": "#/components/examples/GeneralNotificationExample/value"
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/engagements/client-api/v1/general-notifications",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "value": [{
                            "$ref": "#/components/examples/GeneralNotificationSummaryExample1/value"
                        }, {
                            "$ref": "#/components/examples/GeneralNotificationSummaryExample2/value"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
]);

class NotificationPreferenceService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/engagements';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new EngagementConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    createNotificationPreference(requestParameters, observe = 'body', reportProgress = false, options) {
        const _notificationPreferencePostRequest = requestParameters["notificationPreferencePostRequest"];
        if (_notificationPreferencePostRequest === null || _notificationPreferencePostRequest === undefined) {
            throw new Error('Required parameter notificationPreferencePostRequest was null or undefined when calling createNotificationPreference.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/notification-preferences`, _notificationPreferencePostRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    createNotificationPreferenceUrl(requestParameters) {
        const _notificationPreferencePostRequest = requestParameters["notificationPreferencePostRequest"];
        if (_notificationPreferencePostRequest === null || _notificationPreferencePostRequest === undefined) {
            throw new Error('Required parameter notificationPreferencePostRequest was null or undefined when calling createNotificationPreference.');
        }
        return `${this.configuration.basePath}/client-api/v1/notification-preferences`;
    }
    getNotificationPreferences(requestParameters, observe = 'body', reportProgress = false, options) {
        const _generalNotificationId = requestParameters["generalNotificationId"];
        const _active = requestParameters["active"];
        const _entityId = requestParameters["entityId"];
        const _entityType = requestParameters["entityType"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_generalNotificationId !== undefined && _generalNotificationId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _generalNotificationId, 'generalNotificationId');
        }
        if (_active !== undefined && _active !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _active, 'active');
        }
        if (_entityId !== undefined && _entityId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _entityId, 'entityId');
        }
        if (_entityType !== undefined && _entityType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _entityType, 'entityType');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/notification-preferences`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getNotificationPreferencesUrl(requestParameters) {
        const _generalNotificationId = requestParameters["generalNotificationId"];
        const _active = requestParameters["active"];
        const _entityId = requestParameters["entityId"];
        const _entityType = requestParameters["entityType"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_generalNotificationId !== undefined && _generalNotificationId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _generalNotificationId, 'generalNotificationId');
        }
        if (_active !== undefined && _active !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _active, 'active');
        }
        if (_entityId !== undefined && _entityId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _entityId, 'entityId');
        }
        if (_entityType !== undefined && _entityType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _entityType, 'entityType');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/notification-preferences${queryString ? `?${queryString}` : ''}`;
    }
    updateNotificationPreference(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateNotificationPreference.');
        }
        const _notificationPreferencePutRequest = requestParameters["notificationPreferencePutRequest"];
        if (_notificationPreferencePutRequest === null || _notificationPreferencePutRequest === undefined) {
            throw new Error('Required parameter notificationPreferencePutRequest was null or undefined when calling updateNotificationPreference.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/notification-preferences/${encodeURIComponent(String(_id))}`, _notificationPreferencePutRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateNotificationPreferenceUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateNotificationPreference.');
        }
        const _notificationPreferencePutRequest = requestParameters["notificationPreferencePutRequest"];
        if (_notificationPreferencePutRequest === null || _notificationPreferencePutRequest === undefined) {
            throw new Error('Required parameter notificationPreferencePutRequest was null or undefined when calling updateNotificationPreference.');
        }
        return `${this.configuration.basePath}/client-api/v1/notification-preferences/${encodeURIComponent(String(_id))}`;
    }
}
NotificationPreferenceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NotificationPreferenceService, deps: [{ token: i1.HttpClient }, { token: ENGAGEMENT_BASE_PATH, optional: true }, { token: EngagementConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
NotificationPreferenceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NotificationPreferenceService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NotificationPreferenceService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ENGAGEMENT_BASE_PATH]
                }] }, { type: EngagementConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const NotificationPreferenceServiceCreateNotificationPreferenceMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/notification-preferences",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "$ref": "#/components/examples/NotificationPreferenceResponseExample/value"
                }
            },
            {
                status: 201,
                body: {
                    "channels": [{
                            "userCanChange": true,
                            "channel": "email",
                            "enabled": true
                        }, {
                            "userCanChange": true,
                            "channel": "email",
                            "enabled": true
                        }],
                    "lastUpdatedAt": "2000-01-23T04:56:07.000+00:00",
                    "generalNotificationId": "generalNotificationId",
                    "active": true,
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                    "createdOn": "2000-01-23T04:56:07.000+00:00",
                    "userConditions": {
                        "eRef": "6be7c465-37a7-4f1e-98b7-15d6c636c566",
                        "eType": "arrangement",
                        "conditions": {
                            "amount": 100
                        }
                    }
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const NotificationPreferenceServiceGetNotificationPreferencesMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/notification-preferences",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "value": {
                        "totalCount": 2,
                        "notificationPreferences": [{
                                "$ref": "#/components/examples/NotificationPreferenceGetExample2/value"
                            }, {
                                "$ref": "#/components/examples/NotificationPreferenceGetExample3/value"
                            }]
                    }
                }
            },
            {
                status: 200,
                body: {
                    "value": {
                        "totalCount": 2,
                        "notificationPreferences": [{
                                "$ref": "#/components/examples/NotificationPreferenceGetExample1/value"
                            }, {
                                "$ref": "#/components/examples/NotificationPreferenceGetExample2/value"
                            }]
                    }
                }
            },
        ]
    }]);
const NotificationPreferenceServiceUpdateNotificationPreferenceMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/notification-preferences/{id}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "$ref": "#/components/examples/NotificationPreferenceResponseExample/value"
                }
            },
            {
                status: 200,
                body: {
                    "channels": [{
                            "userCanChange": true,
                            "channel": "email",
                            "enabled": true
                        }, {
                            "userCanChange": true,
                            "channel": "email",
                            "enabled": true
                        }],
                    "lastUpdatedAt": "2000-01-23T04:56:07.000+00:00",
                    "generalNotificationId": "generalNotificationId",
                    "active": true,
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                    "createdOn": "2000-01-23T04:56:07.000+00:00",
                    "userConditions": {
                        "eRef": "6be7c465-37a7-4f1e-98b7-15d6c636c566",
                        "eType": "arrangement",
                        "conditions": {
                            "amount": 100
                        }
                    }
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const NotificationPreferenceServiceMocksProvider = createMocks([
    {
        urlPattern: "/engagements/client-api/v1/notification-preferences",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "$ref": "#/components/examples/NotificationPreferenceResponseExample/value"
                }
            },
            {
                status: 201,
                body: {
                    "channels": [{
                            "userCanChange": true,
                            "channel": "email",
                            "enabled": true
                        }, {
                            "userCanChange": true,
                            "channel": "email",
                            "enabled": true
                        }],
                    "lastUpdatedAt": "2000-01-23T04:56:07.000+00:00",
                    "generalNotificationId": "generalNotificationId",
                    "active": true,
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                    "createdOn": "2000-01-23T04:56:07.000+00:00",
                    "userConditions": {
                        "eRef": "6be7c465-37a7-4f1e-98b7-15d6c636c566",
                        "eType": "arrangement",
                        "conditions": {
                            "amount": 100
                        }
                    }
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/engagements/client-api/v1/notification-preferences",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "value": {
                        "totalCount": 2,
                        "notificationPreferences": [{
                                "$ref": "#/components/examples/NotificationPreferenceGetExample2/value"
                            }, {
                                "$ref": "#/components/examples/NotificationPreferenceGetExample3/value"
                            }]
                    }
                }
            },
            {
                status: 200,
                body: {
                    "value": {
                        "totalCount": 2,
                        "notificationPreferences": [{
                                "$ref": "#/components/examples/NotificationPreferenceGetExample1/value"
                            }, {
                                "$ref": "#/components/examples/NotificationPreferenceGetExample2/value"
                            }]
                    }
                }
            },
        ]
    },
    {
        urlPattern: "/engagements/client-api/v1/notification-preferences/{id}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "$ref": "#/components/examples/NotificationPreferenceResponseExample/value"
                }
            },
            {
                status: 200,
                body: {
                    "channels": [{
                            "userCanChange": true,
                            "channel": "email",
                            "enabled": true
                        }, {
                            "userCanChange": true,
                            "channel": "email",
                            "enabled": true
                        }],
                    "lastUpdatedAt": "2000-01-23T04:56:07.000+00:00",
                    "generalNotificationId": "generalNotificationId",
                    "active": true,
                    "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                    "createdOn": "2000-01-23T04:56:07.000+00:00",
                    "userConditions": {
                        "eRef": "6be7c465-37a7-4f1e-98b7-15d6c636c566",
                        "eType": "arrangement",
                        "conditions": {
                            "amount": 100
                        }
                    }
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
]);

class SelectCampaignService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/engagements';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new EngagementConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    selectCampaign(requestParameters, observe = 'body', reportProgress = false, options) {
        const _spaceId = requestParameters["spaceId"];
        if (_spaceId === null || _spaceId === undefined) {
            throw new Error('Required parameter spaceId was null or undefined when calling selectCampaign.');
        }
        const _dimensions = requestParameters["dimensions"];
        if (_dimensions === null || _dimensions === undefined) {
            throw new Error('Required parameter dimensions was null or undefined when calling selectCampaign.');
        }
        const _locale = requestParameters["locale"];
        if (_locale === null || _locale === undefined) {
            throw new Error('Required parameter locale was null or undefined when calling selectCampaign.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_spaceId !== undefined && _spaceId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _spaceId, 'spaceId');
        }
        if (_dimensions !== undefined && _dimensions !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dimensions, 'dimensions');
        }
        if (_locale !== undefined && _locale !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _locale, 'locale');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/banner`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    selectCampaignUrl(requestParameters) {
        const _spaceId = requestParameters["spaceId"];
        if (_spaceId === null || _spaceId === undefined) {
            throw new Error('Required parameter spaceId was null or undefined when calling selectCampaign.');
        }
        const _dimensions = requestParameters["dimensions"];
        if (_dimensions === null || _dimensions === undefined) {
            throw new Error('Required parameter dimensions was null or undefined when calling selectCampaign.');
        }
        const _locale = requestParameters["locale"];
        if (_locale === null || _locale === undefined) {
            throw new Error('Required parameter locale was null or undefined when calling selectCampaign.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_spaceId !== undefined && _spaceId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _spaceId, 'spaceId');
        }
        if (_dimensions !== undefined && _dimensions !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dimensions, 'dimensions');
        }
        if (_locale !== undefined && _locale !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _locale, 'locale');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/banner${queryString ? `?${queryString}` : ''}`;
    }
}
SelectCampaignService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SelectCampaignService, deps: [{ token: i1.HttpClient }, { token: ENGAGEMENT_BASE_PATH, optional: true }, { token: EngagementConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
SelectCampaignService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SelectCampaignService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SelectCampaignService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ENGAGEMENT_BASE_PATH]
                }] }, { type: EngagementConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const SelectCampaignServiceSelectCampaignMocksProvider = createMocks([{
        urlPattern: "/engagements/client-api/v1/banner",
        method: "GET",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    }]);
const SelectCampaignServiceMocksProvider = createMocks([
    {
        urlPattern: "/engagements/client-api/v1/banner",
        method: "GET",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    },
]);

export { AudienceType, BannerChannel, BannerChannelAllOf, COLLECTION_FORMATS, CONFIG_TOKEN, CampaignChannelType, CampaignMetricsService, CampaignMetricsServiceGetCampaignMetricsMocksProvider, CampaignMetricsServiceMocksProvider, CampaignMetricsServiceRedirectCampaignMocksProvider, CampaignService, CampaignServiceCreateCampaignMocksProvider, CampaignServiceDeleteCampaignMocksProvider, CampaignServiceDisableCampaignMocksProvider, CampaignServiceEnableCampaignMocksProvider, CampaignServiceFinalizeCampaignMocksProvider, CampaignServiceGetCampaignByCampaignIdMocksProvider, CampaignServiceGetCampaignsMocksProvider, CampaignServiceMocksProvider, CampaignServiceUpdateCampaignMocksProvider, CampaignStatus, ENGAGEMENT_BASE_PATH, EngagementApiModule, EngagementConfiguration, GeneralNotificationService, GeneralNotificationServiceGetGeneralNotificationByIdMocksProvider, GeneralNotificationServiceGetGeneralNotificationsMocksProvider, GeneralNotificationServiceMocksProvider, NotificationPreferenceService, NotificationPreferenceServiceCreateNotificationPreferenceMocksProvider, NotificationPreferenceServiceGetNotificationPreferencesMocksProvider, NotificationPreferenceServiceMocksProvider, NotificationPreferenceServiceUpdateNotificationPreferenceMocksProvider, SelectCampaignService, SelectCampaignServiceMocksProvider, SelectCampaignServiceSelectCampaignMocksProvider, SeverityLevel, TargetUrlDisplayModeResource };
//# sourceMappingURL=backbase-engagement-http-ang.js.map
