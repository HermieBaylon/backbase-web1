{"version":3,"file":"widget-properties.service.js","sourceRoot":"","sources":["../../../../../../libs/notifications-badge-widget-ang/src/lib/services/widget-properties.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Optional } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\nimport {\n  getPropertyValue,\n  modelItemToBoolean,\n  secondsToMilliseconds,\n  BaseWidgetPropertiesService,\n  shareReplayOnce,\n} from '@backbase/notifications-common-ang';\nimport { ItemModel } from '@backbase/foundation-ang/core';\n\nexport interface WidgetProperties {\n  displayRelativeTime: boolean;\n  allowedRoutes: string[];\n  displaySettingsButton: boolean;\n  notificationsMessageLineAmount: number;\n  displayShowMoreButtonInBadge: boolean;\n  pageSize: number;\n  origins: string[];\n  severityLevels: string[];\n  unreadCountUpdateInterval: number;\n}\n\nexport const DefaultWidgetProperties: WidgetProperties = {\n  displayRelativeTime: false,\n  allowedRoutes: [],\n  displaySettingsButton: true,\n  notificationsMessageLineAmount: 2,\n  displayShowMoreButtonInBadge: false,\n  pageSize: 5,\n  origins: [],\n  severityLevels: [],\n  unreadCountUpdateInterval: 15,\n};\n\n@Injectable()\nexport class WidgetPropertiesService extends BaseWidgetPropertiesService {\n  constructor(@Optional() protected readonly itemModel?: ItemModel) {\n    super(itemModel);\n  }\n\n  private readonly displayRelativeTime$$ = new BehaviorSubject<boolean | undefined>(undefined);\n  private readonly displaySettingsButton$$ = new BehaviorSubject<boolean | undefined>(undefined);\n  private readonly notificationsMessageLineAmount$$ = new BehaviorSubject<number | undefined>(undefined);\n  private readonly displayShowMoreButtonInBadge$$ = new BehaviorSubject<boolean | undefined>(undefined);\n  private readonly pageSize$$ = new BehaviorSubject<number | undefined>(undefined);\n  private readonly unreadCountUpdateInterval$$ = new BehaviorSubject<number | undefined>(undefined);\n\n  readonly displayRelativeTime$ = getPropertyValue(this.displayRelativeTime$$, this.displayRelativeTime);\n  readonly displaySettingsButton$ = getPropertyValue(this.displaySettingsButton$$, this.displaySettingsButton);\n  readonly notificationsMessageLineAmount$ = getPropertyValue(\n    this.notificationsMessageLineAmount$$,\n    this.notificationsMessageLineAmount,\n  );\n  readonly displayShowMoreButtonInBadge$ = getPropertyValue(\n    this.displayShowMoreButtonInBadge$$,\n    this.displayShowMoreButtonInBadge,\n  );\n  readonly pageSize$ = getPropertyValue(this.pageSize$$, this.pageSize);\n  readonly unreadCountUpdateInterval$ = getPropertyValue(\n    this.unreadCountUpdateInterval$$,\n    this.unreadCountUpdateInterval,\n  );\n\n  private get displayRelativeTime(): Observable<boolean> {\n    if (!this.itemModel) {\n      return this.defaultModelObservable(DefaultWidgetProperties.displayRelativeTime);\n    }\n\n    return this.itemModel\n      .property('displayRelativeTime', DefaultWidgetProperties.displayRelativeTime)\n      .pipe(map(modelItemToBoolean), first());\n  }\n\n  private get displaySettingsButton(): Observable<boolean> {\n    if (!this.itemModel) {\n      return this.defaultModelObservable(DefaultWidgetProperties.displaySettingsButton);\n    }\n\n    return this.itemModel\n      .property('displaySettingsButton', DefaultWidgetProperties.displaySettingsButton)\n      .pipe(map(modelItemToBoolean), first());\n  }\n\n  private get notificationsMessageLineAmount(): Observable<number> {\n    if (!this.itemModel) {\n      return this.defaultModelObservable(DefaultWidgetProperties.notificationsMessageLineAmount);\n    }\n\n    return this.itemModel\n      .property('notificationsMessageLineAmount', DefaultWidgetProperties.notificationsMessageLineAmount)\n      .pipe(map(Number), first());\n  }\n\n  private get displayShowMoreButtonInBadge(): Observable<boolean> {\n    if (!this.itemModel) {\n      return this.defaultModelObservable(DefaultWidgetProperties.displayShowMoreButtonInBadge);\n    }\n\n    return this.itemModel\n      .property('displayShowMoreButtonInBadge', DefaultWidgetProperties.displayShowMoreButtonInBadge)\n      .pipe(map(modelItemToBoolean), first());\n  }\n\n  private get pageSize(): Observable<number> {\n    if (!this.itemModel) {\n      return this.defaultModelObservable(DefaultWidgetProperties.pageSize);\n    }\n\n    return this.itemModel.property('pageSize', DefaultWidgetProperties.pageSize).pipe(map(Number), shareReplayOnce());\n  }\n\n  private get unreadCountUpdateInterval(): Observable<number> {\n    if (!this.itemModel) {\n      return this.defaultModelObservable(DefaultWidgetProperties.unreadCountUpdateInterval * 1000);\n    }\n\n    return this.itemModel.property('unreadCountUpdateInterval', DefaultWidgetProperties.unreadCountUpdateInterval).pipe(\n      map(Number),\n      map(n => n * 1000),\n      shareReplayOnce(),\n    );\n  }\n\n  setDisplayRelativeTime(value: string | boolean): void {\n    this.displayRelativeTime$$.next(modelItemToBoolean(value));\n  }\n\n  setDisplaySettingsButton(value: string | boolean): void {\n    this.displaySettingsButton$$.next(modelItemToBoolean(value));\n  }\n\n  setNotificationsMessageLineAmount(value: string | number): void {\n    this.notificationsMessageLineAmount$$.next(Number(value));\n  }\n\n  setDisplayShowMoreButtonInBadge(value: string | boolean): void {\n    this.displayShowMoreButtonInBadge$$.next(modelItemToBoolean(value));\n  }\n\n  setPageSize(value: string | number): void {\n    this.pageSize$$.next(Number(value));\n  }\n\n  setUnreadCountUpdateInterval(value: string | number): void {\n    const updateInterval = Number(value);\n    if (!isNaN(updateInterval) && updateInterval > 0) {\n      this.unreadCountUpdateInterval$$.next(secondsToMilliseconds(updateInterval));\n    }\n  }\n}\n"]}