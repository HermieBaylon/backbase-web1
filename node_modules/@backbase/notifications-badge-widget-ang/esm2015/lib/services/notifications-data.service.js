import { Injectable } from '@angular/core';
import { NotificationsHttpService } from '@backbase/data-ang/notifications';
import { BehaviorSubject, EMPTY } from 'rxjs';
import { tap, catchError, finalize } from 'rxjs/operators';
import { NotificationsPollingService } from './notifications-polling.service';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/notifications";
import * as i2 from "./notifications-polling.service";
export class NotificationsDataService {
    constructor(notificationHttpService, notificationsPollingService) {
        this.notificationHttpService = notificationHttpService;
        this.notificationsPollingService = notificationsPollingService;
        this.markAllNotificationAsReadErrorSubject = new BehaviorSubject(false);
        /**
         * Mark all notification as read error subject
         */
        this.markAllNotificationAsReadError = this.markAllNotificationAsReadErrorSubject
            .asObservable()
            .pipe(finalize(() => this.markAllNotificationAsReadErrorSubject.next(false)));
    }
    /**
     *
     * Method to mark a notification as read by its id
     *
     * @param notificationId Notification
     * @returns  Mark as read stream
     */
    markNotificationAsRead(notificationId) {
        return this.notificationHttpService
            .putMarkAsRead({ id: notificationId, markAsReadPutRequestBody: { read: true } })
            .pipe(tap(() => {
            this.notificationsPollingService.forceUpdateCounters();
        }));
    }
    /**
     * Mark all notifications as read
     *
     * @returns Mark all notifications as read stream
     */
    markAllNotificationAsRead() {
        return this.notificationHttpService.putRead(undefined).pipe(catchError(() => {
            this.markAllNotificationAsReadErrorSubject.next(true);
            return EMPTY;
        }), tap(() => {
            this.markAllNotificationAsReadErrorSubject.next(false);
            this.notificationsPollingService.forceUpdateCounters();
        }));
    }
    /**
     * @param id Delete notification by id
     * @returns Notification delete stream
     */
    deleteNotification(id) {
        return this.notificationHttpService.deleteNotification({ id });
    }
}
/** @nocollapse */ NotificationsDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationsDataService, deps: [{ token: i1.NotificationsHttpService }, { token: i2.NotificationsPollingService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ NotificationsDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationsDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationsDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.NotificationsHttpService }, { type: i2.NotificationsPollingService }]; } });
//# sourceMappingURL=notifications-data.service.js.map