{"version":3,"file":"notifications-data.service.js","sourceRoot":"","sources":["../../../../../../libs/notifications-badge-widget-ang/src/lib/services/notifications-data.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,wBAAwB,EAAE,MAAM,kCAAkC,CAAC;AAC5E,OAAO,EAAc,eAAe,EAAE,KAAK,EAAE,MAAM,MAAM,CAAC;AAC1D,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAE3D,OAAO,EAAE,2BAA2B,EAAE,MAAM,iCAAiC,CAAC;;;;AAG9E,MAAM,OAAO,wBAAwB;IACnC,YACmB,uBAAiD,EACjD,2BAAwD;QADxD,4BAAuB,GAAvB,uBAAuB,CAA0B;QACjD,gCAA2B,GAA3B,2BAA2B,CAA6B;QAG1D,0CAAqC,GAAG,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;QAEpF;;WAEG;QACM,mCAA8B,GAAG,IAAI,CAAC,qCAAqC;aACjF,YAAY,EAAE;aACd,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,qCAAqC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAT7E,CAAC;IAWJ;;;;;;OAMG;IACH,sBAAsB,CAAC,cAAsB;QAC3C,OAAO,IAAI,CAAC,uBAAuB;aAChC,aAAa,CAAC,EAAE,EAAE,EAAE,cAAc,EAAE,wBAAwB,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC;aAC/E,IAAI,CACH,GAAG,CAAC,GAAG,EAAE;YACP,IAAI,CAAC,2BAA2B,CAAC,mBAAmB,EAAE,CAAC;QACzD,CAAC,CAAC,CACH,CAAC;IACN,CAAC;IAED;;;;OAIG;IACH,yBAAyB;QACvB,OAAO,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CACzD,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,qCAAqC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEtD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,EACF,GAAG,CAAC,GAAG,EAAE;YACP,IAAI,CAAC,qCAAqC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvD,IAAI,CAAC,2BAA2B,CAAC,mBAAmB,EAAE,CAAC;QACzD,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,kBAAkB,CAAC,EAAU;QAC3B,OAAO,IAAI,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACjE,CAAC;;yIAzDU,wBAAwB;6IAAxB,wBAAwB;4FAAxB,wBAAwB;kBADpC,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { NotificationsHttpService } from '@backbase/data-ang/notifications';\nimport { Observable, BehaviorSubject, EMPTY } from 'rxjs';\nimport { tap, catchError, finalize } from 'rxjs/operators';\n\nimport { NotificationsPollingService } from './notifications-polling.service';\n\n@Injectable()\nexport class NotificationsDataService {\n  constructor(\n    private readonly notificationHttpService: NotificationsHttpService,\n    private readonly notificationsPollingService: NotificationsPollingService,\n  ) {}\n\n  private readonly markAllNotificationAsReadErrorSubject = new BehaviorSubject(false);\n\n  /**\n   * Mark all notification as read error subject\n   */\n  readonly markAllNotificationAsReadError = this.markAllNotificationAsReadErrorSubject\n    .asObservable()\n    .pipe(finalize(() => this.markAllNotificationAsReadErrorSubject.next(false)));\n\n  /**\n   *\n   * Method to mark a notification as read by its id\n   *\n   * @param notificationId Notification\n   * @returns  Mark as read stream\n   */\n  markNotificationAsRead(notificationId: string): Observable<unknown> {\n    return this.notificationHttpService\n      .putMarkAsRead({ id: notificationId, markAsReadPutRequestBody: { read: true } })\n      .pipe(\n        tap(() => {\n          this.notificationsPollingService.forceUpdateCounters();\n        }),\n      );\n  }\n\n  /**\n   * Mark all notifications as read\n   *\n   * @returns Mark all notifications as read stream\n   */\n  markAllNotificationAsRead(): Observable<unknown> {\n    return this.notificationHttpService.putRead(undefined).pipe(\n      catchError(() => {\n        this.markAllNotificationAsReadErrorSubject.next(true);\n\n        return EMPTY;\n      }),\n      tap(() => {\n        this.markAllNotificationAsReadErrorSubject.next(false);\n        this.notificationsPollingService.forceUpdateCounters();\n      }),\n    );\n  }\n\n  /**\n   * @param id Delete notification by id\n   * @returns Notification delete stream\n   */\n  deleteNotification(id: string): Observable<unknown> {\n    return this.notificationHttpService.deleteNotification({ id });\n  }\n}\n"]}