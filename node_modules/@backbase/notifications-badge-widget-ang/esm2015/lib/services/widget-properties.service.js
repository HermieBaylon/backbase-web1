import { Injectable, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { first, map } from 'rxjs/operators';
import { getPropertyValue, modelItemToBoolean, secondsToMilliseconds, BaseWidgetPropertiesService, shareReplayOnce, } from '@backbase/notifications-common-ang';
import { ItemModel } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
export const DefaultWidgetProperties = {
    displayRelativeTime: false,
    allowedRoutes: [],
    displaySettingsButton: true,
    notificationsMessageLineAmount: 2,
    displayShowMoreButtonInBadge: false,
    pageSize: 5,
    origins: [],
    severityLevels: [],
    unreadCountUpdateInterval: 15,
};
export class WidgetPropertiesService extends BaseWidgetPropertiesService {
    constructor(itemModel) {
        super(itemModel);
        this.itemModel = itemModel;
        this.displayRelativeTime$$ = new BehaviorSubject(undefined);
        this.displaySettingsButton$$ = new BehaviorSubject(undefined);
        this.notificationsMessageLineAmount$$ = new BehaviorSubject(undefined);
        this.displayShowMoreButtonInBadge$$ = new BehaviorSubject(undefined);
        this.pageSize$$ = new BehaviorSubject(undefined);
        this.unreadCountUpdateInterval$$ = new BehaviorSubject(undefined);
        this.displayRelativeTime$ = getPropertyValue(this.displayRelativeTime$$, this.displayRelativeTime);
        this.displaySettingsButton$ = getPropertyValue(this.displaySettingsButton$$, this.displaySettingsButton);
        this.notificationsMessageLineAmount$ = getPropertyValue(this.notificationsMessageLineAmount$$, this.notificationsMessageLineAmount);
        this.displayShowMoreButtonInBadge$ = getPropertyValue(this.displayShowMoreButtonInBadge$$, this.displayShowMoreButtonInBadge);
        this.pageSize$ = getPropertyValue(this.pageSize$$, this.pageSize);
        this.unreadCountUpdateInterval$ = getPropertyValue(this.unreadCountUpdateInterval$$, this.unreadCountUpdateInterval);
    }
    get displayRelativeTime() {
        if (!this.itemModel) {
            return this.defaultModelObservable(DefaultWidgetProperties.displayRelativeTime);
        }
        return this.itemModel
            .property('displayRelativeTime', DefaultWidgetProperties.displayRelativeTime)
            .pipe(map(modelItemToBoolean), first());
    }
    get displaySettingsButton() {
        if (!this.itemModel) {
            return this.defaultModelObservable(DefaultWidgetProperties.displaySettingsButton);
        }
        return this.itemModel
            .property('displaySettingsButton', DefaultWidgetProperties.displaySettingsButton)
            .pipe(map(modelItemToBoolean), first());
    }
    get notificationsMessageLineAmount() {
        if (!this.itemModel) {
            return this.defaultModelObservable(DefaultWidgetProperties.notificationsMessageLineAmount);
        }
        return this.itemModel
            .property('notificationsMessageLineAmount', DefaultWidgetProperties.notificationsMessageLineAmount)
            .pipe(map(Number), first());
    }
    get displayShowMoreButtonInBadge() {
        if (!this.itemModel) {
            return this.defaultModelObservable(DefaultWidgetProperties.displayShowMoreButtonInBadge);
        }
        return this.itemModel
            .property('displayShowMoreButtonInBadge', DefaultWidgetProperties.displayShowMoreButtonInBadge)
            .pipe(map(modelItemToBoolean), first());
    }
    get pageSize() {
        if (!this.itemModel) {
            return this.defaultModelObservable(DefaultWidgetProperties.pageSize);
        }
        return this.itemModel.property('pageSize', DefaultWidgetProperties.pageSize).pipe(map(Number), shareReplayOnce());
    }
    get unreadCountUpdateInterval() {
        if (!this.itemModel) {
            return this.defaultModelObservable(DefaultWidgetProperties.unreadCountUpdateInterval * 1000);
        }
        return this.itemModel.property('unreadCountUpdateInterval', DefaultWidgetProperties.unreadCountUpdateInterval).pipe(map(Number), map(n => n * 1000), shareReplayOnce());
    }
    setDisplayRelativeTime(value) {
        this.displayRelativeTime$$.next(modelItemToBoolean(value));
    }
    setDisplaySettingsButton(value) {
        this.displaySettingsButton$$.next(modelItemToBoolean(value));
    }
    setNotificationsMessageLineAmount(value) {
        this.notificationsMessageLineAmount$$.next(Number(value));
    }
    setDisplayShowMoreButtonInBadge(value) {
        this.displayShowMoreButtonInBadge$$.next(modelItemToBoolean(value));
    }
    setPageSize(value) {
        this.pageSize$$.next(Number(value));
    }
    setUnreadCountUpdateInterval(value) {
        const updateInterval = Number(value);
        if (!isNaN(updateInterval) && updateInterval > 0) {
            this.unreadCountUpdateInterval$$.next(secondsToMilliseconds(updateInterval));
        }
    }
}
/** @nocollapse */ WidgetPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: WidgetPropertiesService, deps: [{ token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ WidgetPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: WidgetPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: WidgetPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=widget-properties.service.js.map