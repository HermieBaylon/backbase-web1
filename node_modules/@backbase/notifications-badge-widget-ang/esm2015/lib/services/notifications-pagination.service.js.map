{"version":3,"file":"notifications-pagination.service.js","sourceRoot":"","sources":["../../../../../../libs/notifications-badge-widget-ang/src/lib/services/notifications-pagination.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport {\n  catchError,\n  distinctUntilChanged,\n  finalize,\n  map,\n  scan,\n  share,\n  switchMap,\n  tap,\n  withLatestFrom,\n  startWith,\n  filter,\n} from 'rxjs/operators';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject, zip } from 'rxjs';\n\nimport { NotificationsHttpService } from '@backbase/data-ang/notifications';\nimport { toISOExtendedFormat, NotificationItem } from '@backbase/notifications-common-ang';\nimport { WidgetPropertiesService } from './widget-properties.service';\n\ninterface RequestOptionsForNotificationsPage {\n  from: number;\n  createdOn?: string;\n  append: boolean;\n}\n\n@Injectable()\nexport class NotificationsPaginationService {\n  constructor(\n    private readonly notificationHttpService: NotificationsHttpService,\n    private readonly properties: WidgetPropertiesService,\n  ) {}\n\n  /**\n   * Stream with page size\n   */\n  readonly sizeProperty$ = this.properties.pageSize$;\n\n  private readonly pageSubject = new Subject<RequestOptionsForNotificationsPage>();\n  private readonly page$: Observable<RequestOptionsForNotificationsPage> = this.pageSubject.asObservable();\n  /**\n   * Stream with current page number (work with loadPage method)\n   */\n  readonly pageFrom$ = this.page$.pipe(map(p => p.from));\n\n  private readonly isLoadingSubject = new BehaviorSubject(false);\n\n  /**\n   * Stream with loading flag\n   */\n  readonly isLoading$ = this.isLoadingSubject.asObservable();\n\n  // eslint-disable-next-line\n  private readonly totalCountSubject = new Subject<number>();\n\n  /**\n   * Stream with total count of notifications\n   */\n  readonly totalCount$ = this.totalCountSubject.asObservable();\n\n  private readonly origins$ = this.properties.origins$;\n  private readonly severityLevels$ = this.properties.severityLevels$;\n\n  private readonly notificationsRequest$ = combineLatest([\n    this.page$,\n    this.sizeProperty$,\n    this.origins$,\n    this.severityLevels$,\n  ]).pipe(\n    switchMap(([page, size, origins, levels]) => {\n      this.isLoadingSubject.next(true);\n\n      return this.notificationHttpService\n        .getNotifications(\n          {\n            toDate:\n              page.createdOn && new Date(toISOExtendedFormat(page.createdOn)).toISOString().replace(/\\.\\d+Z/, 'Z'),\n            from: page.from,\n            size,\n            ...(origins.length && { origins }),\n            ...(levels.length && { levels }),\n          },\n          'response',\n        )\n        .pipe(\n          tap(res => {\n            this.totalCountSubject.next(Number(res.headers.get('x-total-count') || '0'));\n          }),\n          map(({ body, headers }) => ({ data: body || [], headers, error: undefined })),\n          catchError(error => of({ data: [] as NotificationItem[], headers: undefined, error })),\n          finalize(() => {\n            this.isLoadingSubject.next(false);\n          }),\n        );\n    }),\n    share(),\n  );\n\n  private readonly notificationsPage$ = this.notificationsRequest$.pipe(map(({ data }) => data));\n\n  private readonly markAllNotificationsAsRead = new BehaviorSubject(false);\n\n  /**\n   * Stream of notifications\n   */\n  readonly notifications$: Observable<NotificationItem[]> = combineLatest([\n    zip(this.page$, this.notificationsPage$).pipe(\n      // reset accumulator for every first page in Append mode or for every page in regular mode\n      scan(\n        (\n          allNotifications: NotificationItem[],\n          [page, notifications]: [RequestOptionsForNotificationsPage, NotificationItem[]],\n        ) => (!page.append || page.from === 0 ? [] : allNotifications).concat(notifications),\n        [],\n      ),\n    ),\n    this.markAllNotificationsAsRead.pipe(startWith(true), filter(Boolean)),\n  ]).pipe(\n    withLatestFrom(this.markAllNotificationsAsRead),\n    // eslint-disable-next-line arrow-body-style\n    map(([[notifications], allAsRead]) => {\n      return allAsRead ? notifications.map(item => (!item.read && { ...item, read: true }) || item) : notifications;\n    }),\n  );\n\n  /**\n   * Stream of errors\n   */\n  readonly error$ = this.notificationsRequest$.pipe(\n    map(({ error }) => error),\n    distinctUntilChanged(),\n  );\n\n  private loadPageData(page: number, append = false, createdOn?: string) {\n    this.pageSubject.next({ from: page, append, createdOn: createdOn });\n  }\n\n  /**\n   * Method to load notifications of specified page\n   *\n   * @param page Page number\n   */\n  loadPage(page: number) {\n    this.loadPageData(page);\n  }\n\n  /**\n   * Method to load next page of notifications\n   *\n   * @param page Page number\n   * @param createdOn Created on notification date\n   */\n  loadMore(page: number, createdOn?: string) {\n    this.loadPageData(page, true, createdOn);\n  }\n\n  /**\n   * Mark all notifications as read\n   *\n   * @param read Is read flag\n   */\n  markAllAsRead(read: boolean) {\n    this.markAllNotificationsAsRead.next(read);\n  }\n}\n"]}