{"version":3,"file":"notifications-polling.service.js","sourceRoot":"","sources":["../../../../../../libs/notifications-badge-widget-ang/src/lib/services/notifications-polling.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\nimport { NotificationsHttpService } from '@backbase/data-ang/notifications';\nimport { asyncScheduler, BehaviorSubject, combineLatest, merge, Observable, of, ReplaySubject, Subject } from 'rxjs';\nimport { catchError, delay, filter, first, map, observeOn, pairwise, switchMap, tap } from 'rxjs/operators';\nimport { enterZone, leaveZone, shareReplayOnce } from '@backbase/notifications-common-ang';\nimport { WidgetPropertiesService } from './widget-properties.service';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Injectable()\nexport class NotificationsPollingService {\n  private readonly forceUpdateCountersSubject = new Subject();\n\n  private readonly requestsInterval$ = this.properties.unreadCountUpdateInterval$;\n\n  private readonly repeat$ = new ReplaySubject(1);\n  private readonly load$ = merge(\n    of(''),\n    this.forceUpdateCountersSubject,\n    merge(this.forceUpdateCountersSubject, this.repeat$).pipe(\n      switchMap(() => this.requestsInterval$),\n      switchMap(interval => of('').pipe(delay(interval, leaveZone(this.ngZone, asyncScheduler)))),\n      observeOn(enterZone(this.ngZone, asyncScheduler)),\n    ),\n  );\n\n  private readonly updateCountersErrorSubject$$ = new BehaviorSubject<HttpErrorResponse | undefined>(undefined);\n\n  /**\n   * Stream with update counters request errors\n   */\n  readonly updateCountersError$ = this.updateCountersErrorSubject$$.asObservable();\n\n  /**\n   * Stream with unread notifications count\n   */\n  readonly unreadNotificationsCount$ = this.load$.pipe(\n    switchMap(() => this.requestCount()),\n    tap(() => this.repeat$.next()),\n    filter(count => typeof count !== 'undefined'),\n    shareReplayOnce(),\n  );\n\n  /**\n   * Stream with flag of new available notifications\n   */\n  readonly newNotificationsAvailable$: Observable<boolean> = this.unreadNotificationsCount$.pipe(\n    pairwise(),\n    map(([prev, cur]) => {\n      if (prev === null || prev === undefined) {\n        return false;\n      }\n      if (cur === null || cur === undefined) {\n        return false;\n      }\n\n      return cur - prev > 0;\n    }),\n    filter<boolean>(Boolean),\n  );\n\n  private requestCount() {\n    const origins$ = this.properties.origins$;\n\n    const severityLevels$ = this.properties.severityLevels$;\n\n    return combineLatest([origins$, severityLevels$]).pipe(\n      first(),\n      switchMap(([origins, levels]) =>\n        this.notificationHttpService.getUnreadCount({\n          ...(origins.length && { origins }),\n          ...(levels.length && { levels }),\n        }),\n      ),\n      map(body => {\n        this.updateCountersErrorSubject$$.next(undefined);\n\n        return body?.unread;\n      }),\n      catchError((error: HttpErrorResponse) => {\n        this.updateCountersErrorSubject$$.next(error);\n\n        return of(undefined);\n      }),\n    );\n  }\n\n  constructor(\n    private readonly notificationHttpService: NotificationsHttpService,\n    private readonly properties: WidgetPropertiesService,\n    private readonly ngZone: NgZone,\n  ) {}\n\n  /**\n   * Method to trigger force update on unread notifications counter\n   */\n  forceUpdateCounters() {\n    this.forceUpdateCountersSubject.next();\n  }\n}\n"]}