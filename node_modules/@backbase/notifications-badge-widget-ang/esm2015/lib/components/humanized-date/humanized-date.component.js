import { Component, Directive, Input } from '@angular/core';
import { toISOExtendedFormat } from '@backbase/notifications-common-ang';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@backbase/ui-ang/date-pipe";
const DEFAULT_FORMAT_FOR_DATE_IN_PAST = 'MM/dd/yy';
export class HumanizedDateComponent {
    constructor() {
        this._isWithinHour = false;
        this._isToday = false;
        this._isYesterday = false;
        /**
         * Flag that defines if we should display relative time for today.
         */
        this.displayRelativeTime = false;
        this.today = new Date();
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        this.yesterday = yesterday;
    }
    /**
     * Notification date.
     */
    set date(value) {
        const date = this.parseDate(value);
        if (date) {
            this._date = date;
            this.setDateFlags();
        }
        else {
            this.resetStateToDefaults();
        }
    }
    get dateFormatForPast() {
        return this.dateFormat || DEFAULT_FORMAT_FOR_DATE_IN_PAST;
    }
    /**
     * Date getter.
     */
    // eslint-disable-next-line @typescript-eslint/adjacent-overload-signatures
    get date() {
        return this._date;
    }
    /**
     *
     * Is date within an hour from now flag getter.
     */
    get isWithinHour() {
        return this._isWithinHour;
    }
    /**
     * Is date within the current day flag getter.
     */
    get isToday() {
        return this._isToday;
    }
    /**
     * Is date within the yesterday date flag getter.
     */
    get isYesterday() {
        return this._isYesterday;
    }
    /**
     * How many minutes from now is the date getter.
     */
    get minutesFromNow() {
        return this._minutesFromNow;
    }
    setDateFlags() {
        this._minutesFromNow = this.getMinutesFromNow(this._date, this.today);
        this._isToday = this.isSameDay(this._date, this.today);
        this._isYesterday = this.isSameDay(this._date, this.yesterday);
        this._isWithinHour = Number(this.minutesFromNow) < 60;
    }
    resetStateToDefaults() {
        this._date = undefined;
        this._minutesFromNow = undefined;
        this._isWithinHour = false;
        this._isToday = false;
        this._isYesterday = false;
    }
    parseDate(value) {
        if (typeof value === 'undefined' || value instanceof Date)
            return value;
        return new Date(toISOExtendedFormat(value)).valueOf() ? new Date(toISOExtendedFormat(value)) : undefined;
    }
    isSameDay(date1, date2) {
        if (!date1 || !date2) {
            return false;
        }
        return date1.toDateString() === date2.toDateString();
    }
    getMinutesFromNow(dateTime, currentDateTime) {
        const minutesFromNow = Math.floor((currentDateTime.getTime() - dateTime.getTime()) / 60000);
        return minutesFromNow > 0 ? minutesFromNow : 0;
    }
}
/** @nocollapse */ HumanizedDateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HumanizedDateComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ HumanizedDateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: HumanizedDateComponent, selector: "bb-humanized-date", inputs: { dateFormat: "dateFormat", displayRelativeTime: "displayRelativeTime", date: "date" }, ngImport: i0, template: "<ng-container bbHumanizedDateCustomizable [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbHumanizedDateCustomizable let-hostRef>\n  <div class=\"sr-only\" i18n=\"Humanized date title@@humanized.date.title\">,Date:</div>\n  <ng-container *ngIf=\"hostRef.date as date\">\n    <time *ngIf=\"hostRef.isToday\" class=\"bb-subheader bb-subheader--regular bb-text-nowrap\">\n      <ng-container *ngIf=\"hostRef.displayRelativeTime; else today\">\n        <ng-container\n          *ngIf=\"hostRef.isWithinHour; else moreThanHourAgo\"\n          i18n=\"Notifications time less than an hour ago date@@notifications.humanized-date.less-than-an-hour-ago\"\n        >\n          { hostRef.minutesFromNow, plural, =0 {now} other {{{hostRef.minutesFromNow}} min ago} }\n        </ng-container>\n\n        <ng-template #moreThanHourAgo>\n          {{ date | bbDate: 'shortTime' }}\n        </ng-template>\n      </ng-container>\n\n      <ng-template #today i18n=\"Notifications today date@@notifications.humanized-date.today\"> today </ng-template>\n    </time>\n\n    <time\n      *ngIf=\"hostRef.isYesterday\"\n      class=\"bb-subheader bb-subheader--regular\"\n      i18n=\"Notifications yesterday date@@notifications.humanized-date.yesterday\"\n    >\n      yesterday\n    </time>\n    <time\n      *ngIf=\"!hostRef.isToday && !hostRef.isYesterday\"\n      class=\"bb-subheader bb-subheader--regular\"\n      [attr.aria-label]=\"date | bbDate: 'mediumDate'\"\n    >\n      {{ date | bbDate: dateFormatForPast }}\n    </time>\n  </ng-container>\n</ng-template>\n", directives: [{ type: i0.forwardRef(function () { return HumanizedDateCustomizableDirective; }), selector: "[bbHumanizedDateCustomizable]" }, { type: i0.forwardRef(function () { return i1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "bbDate": i0.forwardRef(function () { return i2.BbDatePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HumanizedDateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-humanized-date',
                    templateUrl: './humanized-date.component.html',
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { dateFormat: [{
                type: Input
            }], displayRelativeTime: [{
                type: Input
            }], date: [{
                type: Input
            }] } });
export class HumanizedDateCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ HumanizedDateCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HumanizedDateCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ HumanizedDateCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: HumanizedDateCustomizableDirective, selector: "[bbHumanizedDateCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HumanizedDateCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbHumanizedDateCustomizable]',
                }]
        }] });
//# sourceMappingURL=humanized-date.component.js.map