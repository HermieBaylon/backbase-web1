{"version":3,"file":"notifications-list.component.js","sourceRoot":"","sources":["../../../../../../../libs/notifications-badge-widget-ang/src/lib/components/notifications-list/notifications-list.component.ts","../../../../../../../libs/notifications-badge-widget-ang/src/lib/components/notifications-list/notifications-list.component.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { BbTemplate } from '@backbase/foundation-ang/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { asyncScheduler, BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  mapTo,\n  observeOn,\n  pairwise,\n  skip,\n  skipUntil,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n} from 'rxjs/operators';\nimport { NotificationItem, NotificationStreamItem, shareReplayOnce } from '@backbase/notifications-common-ang';\nimport { NotificationService } from '@backbase/ui-ang/notification';\nimport { Pubsub, PUBSUB } from '@backbase/foundation-ang/web-sdk';\n\nimport { NotificationsPaginationService } from '../../services/notifications-pagination.service';\nimport { NotificationsPollingService } from '../../services/notifications-polling.service';\nimport { NotificationsDataService } from '../../services/notifications-data.service';\nimport { NotificationsRouterService } from '../../services/notifications-router.service';\nimport { WidgetPropertiesService } from '../../services/widget-properties.service';\n\nexport const NOTIFICATIONS_BADGE_RELOAD_ON_NAVIGATE_EVENT = 'bb.event.notifications-badge.reload-on-navigate';\n\n@Component({\n  selector: 'bb-notifications-list',\n  templateUrl: './notifications-list.component.html',\n})\nexport class NotificationsListComponent implements OnInit, OnDestroy {\n  /**\n   * Navigation event.\n   */\n  @Output() navigation = new EventEmitter<void>();\n\n  /**\n   * Preselected notification\n   */\n  @Input() set preselectedNotification(notification: NotificationItem | undefined) {\n    this.selectedNotification = notification;\n  }\n\n  /**\n   * Format to display date in past\n   */\n  @Input() dateFormat: string | undefined;\n\n  private readonly componentDestroyed$ = new Subject<void>();\n\n  /**\n   * Stream of routes available for navigation.\n   */\n  readonly allowedRoutes$: Observable<string[]> = this.properties.allowedRoutes$;\n\n  /**\n   * Stream of a flag that defines if we should display settings button.\n   */\n  readonly displaySettingsButton$: Observable<boolean> = this.properties.displaySettingsButton$;\n\n  constructor(\n    private readonly routerService: NotificationsRouterService,\n    private readonly notificationsPaginationService: NotificationsPaginationService,\n    private readonly notificationsPollingService: NotificationsPollingService,\n    private readonly notificationService: NotificationsDataService,\n    private readonly showNotificationService: NotificationService,\n    private readonly element: ElementRef,\n    private readonly properties: WidgetPropertiesService,\n    @Inject(PUBSUB) private readonly pubSub: Pubsub,\n  ) {}\n\n  /**\n   * Stream with notifications items.\n   */\n  readonly notifications$: Observable<NotificationStreamItem[]> =\n    this.notificationsPaginationService.notifications$.pipe(takeUntil(this.componentDestroyed$), shareReplayOnce());\n\n  /**\n   * Stream with error while loading of notifications.\n   */\n  readonly error$ = this.notificationsPaginationService.error$;\n\n  /**\n   * Stream with error while loading of notifications.\n   */\n  readonly updateCountersError$ = this.notificationsPollingService.updateCountersError$;\n\n  /**\n   * Mark as read request error stream which shows if request has failed.\n   */\n  readonly markAllAsReadError$ = this.notificationService.markAllNotificationAsReadError;\n\n  /**\n   * Stream with flag if notifications is loading now or no.\n   */\n  readonly isLoading$ = this.notificationsPaginationService.isLoading$;\n\n  private readonly firstNewNotificationId$ = this.notifications$.pipe(\n    pairwise(),\n    map(([prevNotifications, newNotifications]) => {\n      let firstNewNotification = newNotifications[prevNotifications.length];\n\n      // reset notification to the first page scenario\n      if (prevNotifications.length >= newNotifications.length) {\n        firstNewNotification = newNotifications[0];\n      }\n\n      return firstNewNotification && firstNewNotification.id;\n    }),\n  );\n\n  private readonly notificationWasReadSubject = new Subject<boolean>();\n  private readonly notificationWasRead$ = this.notificationWasReadSubject.asObservable();\n\n  private readonly newNotificationsAvailableSubject = new BehaviorSubject<boolean>(false);\n  private readonly updateCounters$ = this.newNotificationsAvailableSubject.pipe(\n    startWith(false),\n    filter(i => !i),\n    mapTo(true),\n    shareReplayOnce(),\n  );\n\n  /**\n   * Stream with total count of notifications.\n   */\n  readonly totalCount$ = this.updateCounters$.pipe(switchMap(() => this.notificationsPaginationService.totalCount$));\n\n  /**\n   * Stream with notifications about new notification available\n   */\n  readonly newNotificationsAvailable$ = this.newNotificationsAvailableSubject.asObservable();\n\n  /**\n   * Stream with page size.\n   */\n  readonly pageSize$ = this.notificationsPaginationService.sizeProperty$;\n\n  /**\n   * Stream with unread notifications count\n   */\n  readonly unreadCount$ = this.updateCounters$.pipe(\n    switchMap(() =>\n      this.notificationsPollingService.unreadNotificationsCount$.pipe(\n        switchMap(counter =>\n          this.notificationWasRead$.pipe(\n            startWith(false),\n            map(read => {\n              if (!read || !counter) {\n                return counter;\n              }\n\n              return --counter;\n            }),\n          ),\n        ),\n      ),\n    ),\n  );\n\n  private lastSelectedNotificationItemButton: HTMLElement | undefined;\n\n  /**\n   * Steam with the starting page number.\n   */\n  readonly pageFrom$ = this.notificationsPaginationService.pageFrom$;\n\n  /**\n   * Notification item that is shown in notification details now.\n   */\n  selectedNotification: NotificationItem | undefined;\n\n  ngOnInit() {\n    this.firstNewNotificationId$\n      .pipe(\n        filter(Boolean),\n        map(id => `.bb-nt-${id}`),\n        observeOn(asyncScheduler),\n        map(elemClass => this.element.nativeElement.querySelector(elemClass) as HTMLElement),\n        filter<HTMLElement>(Boolean),\n        takeUntil(this.componentDestroyed$),\n      )\n      .subscribe((elemScrollTo: HTMLElement) => {\n        (elemScrollTo.firstChild as HTMLElement)?.focus();\n        elemScrollTo.scrollIntoView({ behavior: 'smooth' });\n      });\n\n    this.notificationsPollingService.newNotificationsAvailable$\n      .pipe(takeUntil(this.componentDestroyed$))\n      .subscribe(value => {\n        this.newNotificationsAvailableSubject.next(value);\n      });\n\n    this.onLoadNewNotifications();\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed$.next();\n    this.componentDestroyed$.complete();\n  }\n\n  /**\n   * Method to mark all notifications as read.\n   */\n  onReadAllNotifications() {\n    this.notificationService.markAllNotificationAsRead().subscribe(() => {\n      this.notificationsPaginationService.markAllAsRead(true);\n    });\n  }\n\n  /**\n   * Method to load new notifications by reloading of the first page.\n   */\n  onLoadNewNotifications() {\n    this.notificationsPollingService.unreadNotificationsCount$\n      .pipe(\n        skip(1), // skip stored value to wait for unread notifications count load occurred\n        first(),\n      )\n      .subscribe(() => {\n        this.newNotificationsAvailableSubject.next(false);\n        this.notificationsPaginationService.markAllAsRead(false);\n        this.notificationsPaginationService.loadPage(0);\n      });\n    this.notificationsPollingService.forceUpdateCounters();\n  }\n\n  /**\n   * Method to load next notifications page.\n   */\n  onLoadMore(totalCount: number, $event: { from: number }) {\n    const asyncNotifications$ = this.notifications$.pipe(\n      skipUntil(of(undefined).pipe(observeOn(asyncScheduler))), // wait for new asynchronously loaded notifications\n    );\n\n    const lastNotification$ = this.notifications$.pipe(\n      first(),\n      map(notifications => notifications[notifications.length - 1]),\n      map(({ id }) => `.bb-nt-${id} [data-role=\"notifications-list-item\"]`),\n      observeOn(asyncScheduler),\n      map(selector => this.element.nativeElement.querySelector(selector)),\n    );\n\n    this.notifications$.pipe(first()).subscribe(data => {\n      const createdOn = data[0].createdOn;\n      this.notificationsPaginationService.loadMore($event.from, createdOn);\n    });\n\n    combineLatest([asyncNotifications$, of(totalCount)])\n      .pipe(\n        take(1),\n        filter(([notifications, total]) => notifications.length >= total),\n        switchMap(() => lastNotification$),\n      )\n      .subscribe(lastNotification => lastNotification.focus());\n  }\n\n  /**\n   * Method to open notification settings.\n   */\n  onNotificationsSettingsOpen() {\n    this.routerService.emitSettingsOpenedNavigation();\n    this.navigation.emit();\n  }\n\n  /**\n   * Method to show notification details view or to navigate to the notification routing URL if routing is enabled.\n   */\n  selectNotification(clickEvent: Event, notification: NotificationItem, openDetailsView?: boolean) {\n    clickEvent.preventDefault();\n    this.allowedRoutes$.subscribe(routes => {\n      const route = notification.routing && notification.routing['where-to'];\n\n      if (!openDetailsView && notification.routing && routes.some(allowedRoute => route === allowedRoute)) {\n        this.pubSub.publish(NOTIFICATIONS_BADGE_RELOAD_ON_NAVIGATE_EVENT, undefined);\n        this.routerService.emitNotificationRouting(notification.routing);\n        this.navigation.emit();\n      } else {\n        this.selectedNotification = notification;\n        this.saveRefToNotification(clickEvent);\n      }\n    });\n\n    if (!notification.read) {\n      this.notificationService.markNotificationAsRead(notification.id).subscribe(() => {\n        notification.read = true;\n        this.notificationWasReadSubject.next(true);\n      });\n    }\n  }\n\n  /**\n   * Method to delete notification.\n   */\n  deleteNotification() {\n    if (this.selectedNotification) {\n      this.notificationService\n        .deleteNotification(this.selectedNotification.id)\n        .pipe(\n          take(1),\n          tap(() => this.notificationsPaginationService.loadPage(0)),\n        )\n        .subscribe(\n          () => {\n            this.selectedNotification = undefined;\n          },\n          error => {\n            this.showNotificationService.showNotification({\n              header: this.getErrorMessage(error),\n              modifier: 'error',\n              message: '',\n            });\n          },\n        );\n    }\n  }\n\n  /**\n   * Method to unselect notification and return back focus position.\n   */\n  unselectNotification() {\n    this.selectedNotification = undefined;\n    this.restoreFocusOnNotification();\n  }\n\n  /**\n   * Method to differentiate notifications by IDs.\n   *\n   * @param _index List item index\n   * @param notification Notification list item\n   * @returns Notification id\n   */\n  trackById(_index: number, notification: NotificationItem): string {\n    return notification.id;\n  }\n\n  private saveRefToNotification(notificationClickEvent: any) {\n    this.lastSelectedNotificationItemButton = notificationClickEvent.target.closest(\n      '[data-role=\"notifications-list-item\"]',\n    );\n  }\n\n  private restoreFocusOnNotification() {\n    setTimeout(() => {\n      if (!this.lastSelectedNotificationItemButton) {\n        return;\n      }\n\n      this.lastSelectedNotificationItemButton.focus();\n    }, 0);\n  }\n\n  private getErrorMessage(error: HttpErrorResponse | Error | string): string {\n    return typeof error !== 'string'\n      ? (error as HttpErrorResponse)?.error?.message || error.message || 'Unknown Error'\n      : error;\n  }\n}\n\n@Directive({\n  selector: '[bbNotificationsListCustomizable]',\n})\nexport class NotificationsListCustomizableDirective extends BbTemplate<\n  NotificationsListComponent,\n  {\n    notifications: NotificationItem[];\n    error: any;\n    updateCountersError: HttpErrorResponse | undefined;\n    isLoading: boolean;\n    totalCount: number;\n    pageSize: number;\n    newNotificationsAvailable: boolean;\n    unreadCount: number;\n    markAllAsReadError: boolean;\n  }\n> {}\n","<ng-container\n  bbNotificationsListCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    notifications: notifications$ | async,\n    error: error$ | async,\n    updateCountersError: updateCountersError$ | async,\n    isLoading: isLoading$ | async,\n    totalCount: totalCount$ | async,\n    pageSize: pageSize$ | async,\n    newNotificationsAvailable: newNotificationsAvailable$ | async,\n    unreadCount: unreadCount$ | async,\n    markAllAsReadError: markAllAsReadError$ | async,\n    pageFrom: pageFrom$ | async\n  }\"\n>\n</ng-container>\n\n<ng-template\n  bbNotificationsListCustomizable\n  let-hostRef\n  let-notifications=\"context.notifications\"\n  let-error=\"context.error\"\n  let-updateCountersError=\"context.updateCountersError\"\n  let-isLoading=\"context.isLoading\"\n  let-totalCount=\"context.totalCount\"\n  let-pageSize=\"context.pageSize\"\n  let-newNotificationsAvailable=\"context.newNotificationsAvailable\"\n  let-unreadCount=\"context.unreadCount\"\n  let-markAllAsReadError=\"context.markAllAsReadError\"\n  let-pageFrom=\"context.pageFrom\"\n>\n  <ng-container *ngIf=\"!hostRef.selectedNotification\">\n    <header data-role=\"notifications-list-header\" class=\"bb-card__header bb-stack\">\n      <span class=\"bb-stack__item\">\n        <span class=\"bb-heading-3\" i18n=\"Notifications modal label@@notifications.modalLabel\">Notifications</span>\n      </span>\n      <button\n        bbButton\n        *ngIf=\"hostRef.displaySettingsButton$ | async\"\n        class=\"bb-stack__item bb-stack__item--push-right\"\n        data-role=\"settings-button\"\n        color=\"link\"\n        circle=\"true\"\n        aria-label=\"Redirect to notification settings\"\n        i18n-aria-label=\"Aria-label for settings button@@notifications.notification-settings.aria-label\"\n        (click)=\"hostRef.onNotificationsSettingsOpen()\"\n      >\n        <bb-icon-ui class=\"text-dark\" name=\"settings\" size=\"md\"></bb-icon-ui>\n      </button>\n    </header>\n    <button\n      bbButton\n      *ngIf=\"newNotificationsAvailable\"\n      role=\"status\"\n      color=\"primary\"\n      [block]=\"true\"\n      i18n=\"Label for new notifications loading button@@notifications.new-notifications-available.button\"\n      aria-label=\"New Notification available. Click to refresh\"\n      i18n-aria-label=\"\n        Aria-label for new notifications loading button@@notifications.new-notifications-available.aria-label\"\n      class=\"bb-notifications-badge-widget__load-new-button\"\n      data-role=\"notifications-load-new-btn\"\n      (click)=\"hostRef.onLoadNewNotifications()\"\n    >\n      <span>New Notification available. Click to refresh</span>\n      <bb-icon-ui name=\"loading\" size=\"md\" cropped=\"true\"></bb-icon-ui>\n    </button>\n    <bb-alert-ui\n      *ngIf=\"markAllAsReadError\"\n      class=\"bb-notifications-badge-widget__alert\"\n      data-role=\"mark-all-read-error-alert\"\n      title=\"Error! Couldn’t mark all as read.\"\n      i18n-title=\"Label for mark all as read error@@notifications.mark-all-read.alert.title\"\n      aria-label=\"Error! Couldn’t mark all as read.\"\n      i18n-aria-label=\"Aria-label for mark all as read error@@notifications.mark-all-read.alert.aria-label\"\n      modifier=\"error\"\n      [dismissible]=\"false\"\n    >\n    </bb-alert-ui>\n    <div class=\"bb-notifications-badge-widget__all-read-button\" *ngIf=\"unreadCount > 0\">\n      <button\n        bbButton\n        data-role=\"mark-all-read-button\"\n        class=\"bb-subtitle\"\n        color=\"link-text\"\n        aria-label=\"Mark all notifcations as read\"\n        i18n-aria-label=\"Aria-label for mark all as read button@@notifications.mark-all-read.aria-label\"\n        (click)=\"hostRef.onReadAllNotifications()\"\n      >\n        <bb-icon-ui name=\"playlist-add-check\" size=\"md\" cropped=\"true\"></bb-icon-ui>\n        <span i18n=\"Label for mark all as read button@@notifications.mark-all-read.label\">Mark all as read</span>\n      </button>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"!error && !updateCountersError; else errorState\">\n    <ng-container *ngIf=\"notifications?.length; else emptyState\">\n      <div data-role=\"notifications-list-inner-wrapper\" [ngClass]=\"hostRef.selectedNotification ? 'd-none' : null\">\n        <p\n          aria-live=\"polite\"\n          class=\"sr-only\"\n          i18n=\"Label for new loaded notifications available@@notifications.new-loaded-notifications-available\"\n        >\n          { notifications.length, plural, =1 {new notification of {{ totalCount }}available} other {\n          {{ notifications.length }} new notifications of {{ totalCount }}available } }\n        </p>\n        <ul\n          tabindex=\"-1\"\n          class=\"bb-notifications-badge-widget__list bb-list bb-list--flush-lg\"\n          data-role=\"notifications-list-body\"\n        >\n          <li class=\"bb-list__item\" *ngFor=\"let notification of notifications; trackBy: hostRef.trackById\">\n            <bb-notifications-list-item\n              [notification]=\"notification\"\n              class=\"bb-nt-{{ notification.id }}\"\n              (keydown.enter)=\"hostRef.selectNotification($event, notification)\"\n              (keyup.space)=\"hostRef.selectNotification($event, notification)\"\n              (click)=\"hostRef.selectNotification($event, notification)\"\n              (openDetails)=\"hostRef.selectNotification($event, notification, true)\"\n              [dateFormat]=\"dateFormat\"\n            >\n            </bb-notifications-list-item>\n          </li>\n        </ul>\n\n        <footer class=\"bb-card__footer\">\n          <ng-container *ngIf=\"totalCount > pageSize\">\n            <div\n              *ngIf=\"notifications.length < totalCount; else LoadMoreDisabled\"\n              class=\"bb-button-bar bb-button-bar--center\"\n            >\n              <bb-load-button-ui\n                i18n=\"Load more button@@notifications.notification-list.load-more\"\n                class=\"bb-button-bar__button\"\n                color=\"link\"\n                [size]=\"pageSize\"\n                [from]=\"pageFrom\"\n                [totalCount]=\"totalCount\"\n                [isLoading]=\"isLoading\"\n                [block]=\"false\"\n                (paramChange)=\"hostRef.onLoadMore(totalCount, $event)\"\n              >\n                Load More\n              </bb-load-button-ui>\n            </div>\n            <ng-template #LoadMoreDisabled>\n              <div\n                data-role=\"notification-list-load-more-disabled-text\"\n                class=\"bb-subtitle bb-text-support bb-text-align-center\"\n                i18n=\"Load more disabled text@@notifications.notification-list.load-more-disabled\"\n              >\n                You’ve reached the end of the list.\n              </div>\n            </ng-template>\n          </ng-container>\n        </footer>\n      </div>\n\n      <bb-notification-details\n        *ngIf=\"hostRef.selectedNotification\"\n        [notification]=\"hostRef.selectedNotification\"\n        (navigateBack)=\"hostRef.unselectNotification()\"\n        (delete)=\"hostRef.deleteNotification()\"\n        [dateFormat]=\"dateFormat\"\n      ></bb-notification-details>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #emptyState>\n    <div role=\"alert\" *ngIf=\"notifications && notifications.length === 0; else loadingState\">\n      <div class=\"bb-card__body\">\n        <bb-empty-state-ui\n          data-role=\"notifications-badge-empty-state\"\n          class=\"bb-state-container\"\n          i18n-title=\"Notifications empty state message title@@notifications.state.no-notifications.title\"\n          title=\"No Notifications\"\n          iconModifier=\"notifications-off\"\n          iconSize=\"xxl\"\n          i18n-subtitle=\"Notifications empty state message@@notifications.state.no-notifications.subtitle\"\n          subtitle=\"You don't have any notifications to be displayed\"\n        ></bb-empty-state-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #errorState>\n    <div role=\"alert\">\n      <div class=\"bb-card__body\">\n        <bb-empty-state-ui\n          data-role=\"notifications-badge-error-state\"\n          class=\"bb-state-container\"\n          iconSize=\"xxl\"\n          iconModifier=\"error-outline\"\n          title=\"Notifications couldn’t load\"\n          i18n-title=\"Notifications are not loading title@@notifications.error-state.title\"\n          subtitle=\"Try to reload the page or contact the system administrator.\"\n          i18n-subtitle=\"Notifications are not loading subtitle@@notifications.error-state.subtitle\"\n        >\n        </bb-empty-state-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #loadingState>\n    <bb-loading-indicator-ui\n      loaderSize=\"md\"\n      text=\"Loading...\"\n      i18n-test=\"Loading title@@notifications.state.loading.title\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n</ng-template>\n"]}