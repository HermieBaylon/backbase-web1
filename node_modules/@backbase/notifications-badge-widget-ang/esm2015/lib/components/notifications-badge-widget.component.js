import { Component, Directive, EventEmitter, Inject, Input, Output, ViewChild } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { NotificationsPollingService } from '../services/notifications-polling.service';
import { NotificationsPaginationService } from '../services/notifications-pagination.service';
import { NotificationsDataService } from '../services/notifications-data.service';
import { NotificationsRouterService } from '../services/notifications-router.service';
import { combineLatest, Subject, BehaviorSubject } from 'rxjs';
import { debounceTime, first, map, takeUntil } from 'rxjs/operators';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
import { NOTIFICATIONS_BADGE_FORCE_UPDATE_EVENT, } from '@backbase/notifications-common-ang';
import { DOCUMENT } from '@angular/common';
import { MediaQueryService } from '@backbase/ui-ang/media-query-lib';
import { WidgetPropertiesService } from '../services/widget-properties.service';
import * as i0 from "@angular/core";
import * as i1 from "../services/notifications-polling.service";
import * as i2 from "../services/notifications-router.service";
import * as i3 from "@backbase/ui-ang/media-query-lib";
import * as i4 from "../services/widget-properties.service";
import * as i5 from "@backbase/ui-ang/icon";
import * as i6 from "@backbase/ui-ang/badge-counter";
import * as i7 from "./notifications-list/notifications-list.component";
import * as i8 from "@ng-bootstrap/ng-bootstrap";
import * as i9 from "@backbase/ui-ang/button";
import * as i10 from "@angular/common";
export const BADGE_FORCE_UPDATE_DEBOUNCE_TIME = 800;
/** @dynamic */
export class NotificationsBadgeWidgetComponent {
    constructor(notificationsPollingService, routerService, mediaQService, properties, pubSub, document) {
        this.notificationsPollingService = notificationsPollingService;
        this.routerService = routerService;
        this.mediaQService = mediaQService;
        this.properties = properties;
        this.pubSub = pubSub;
        this.document = document;
        this.preselectedNotification$$ = new BehaviorSubject(undefined);
        /**
         * Stream of preselected notification.
         */
        this.preselectedNotification$ = this.preselectedNotification$$.asObservable();
        /**
         * Redirect to Notification Preferences on Settings button click emitter.
         */
        this.notificationsSettingsOpened = new EventEmitter();
        /**
         * Navigation data emitter.
         */
        this.notificationRouting = new EventEmitter();
        /**
         * Unique id html property for each component instance
         */
        this.id = `bb-notifications-badge-widget-${NotificationsBadgeWidgetComponent.idCounter++}`;
        this.destroy$ = new Subject();
        /**
         * Stream with count of unread notifications.
         */
        this.unreadCount$ = this.notificationsPollingService.unreadNotificationsCount$;
        /**
         * Stream that adjusts the layout to the screen size by applying different translateX values.
         */
        this.listTransform$ = this.mediaQService.isMediaBreakpointMatches('max-width', 'sm').pipe(map(isMobileView => {
            if (isMobileView) {
                const badge = this.document.querySelector('.bb-notifications-badge-widget');
                if (badge) {
                    const { width: badgeWidth, left } = badge.getBoundingClientRect();
                    const { width: bodyWidth } = this.document.body.getBoundingClientRect();
                    return `translateX(${bodyWidth - left - badgeWidth}px)`;
                }
            }
            return undefined;
        }));
        this.origins$ = this.properties.origins$;
        this.severityLevels$ = this.properties.severityLevels$;
    }
    /**
     * Preselected notification.
     */
    set preselectedNotification(notification) {
        if (!this.popover)
            return;
        this.preselectedNotification$$.next(notification);
        if (!this.popover.isOpen() && notification) {
            this.popover.open();
        }
    }
    /**
     * Number of displayed lines in notification message.
     */
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set notificationsMessageLineAmountValue(value) {
        if (value !== undefined) {
            this.properties.setNotificationsMessageLineAmount(value);
        }
    }
    /**
     * Display time for today relative to the current point in time (time display format).
     */
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set displayRelativeTimeValue(value) {
        if (value !== undefined) {
            this.properties.setDisplayRelativeTime(value);
        }
    }
    /**
     * Display See More button.
     */
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set displayShowMoreButtonInBadgeValue(value) {
        if (value !== undefined) {
            this.properties.setDisplayShowMoreButtonInBadge(value);
        }
    }
    /**
     * String of allowed routes for navigation (conversation-view, arrangement-view, transaction-view, party-view, etc.).
     */
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set allowedRoutesValue(value) {
        if (value !== undefined) {
            this.properties.setAllowedRoutes(value);
        }
    }
    /**
     * Display Settings button (button with the Gear icon that opens Notification Preferences).
     */
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set displaySettingsButtonValue(value) {
        if (value !== undefined) {
            this.properties.setDisplaySettingsButton(value);
        }
    }
    /**
     * Limit of notifications per paginated request.
     */
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set pageSizeValue(value) {
        if (value !== undefined) {
            this.properties.setPageSize(value);
        }
    }
    /**
     * Comma-separated list of notifications origins to process (empty for all).
     */
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set originsValue(value) {
        if (value !== undefined) {
            this.properties.setOrigins(value);
        }
    }
    /**
     * Comma-separated list of notifications severity levels to process (empty for all).
     */
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set severityLevelsValue(value) {
        if (value !== undefined) {
            this.properties.setSeverityLevels(value);
        }
    }
    /**
     * Interval to poll server for unread count (in seconds).
     */
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set unreadCountUpdateIntervalValue(value) {
        if (value !== undefined) {
            this.properties.setUnreadCountUpdateInterval(value);
        }
    }
    ngOnInit() {
        this.setupNavigationSubscriptions();
        this.setupBadgeUpdateSubscriptions();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * The method to clear the preselected notification value.
     *
     * @param isOpen Is notification badge open flag
     */
    onOpenChange(isOpen) {
        if (!isOpen) {
            this.preselectedNotification$$.next(undefined);
        }
    }
    setupNavigationSubscriptions() {
        this.routerService.settingsOpenedNavigation$
            .pipe(takeUntil(this.destroy$))
            .subscribe(this.notificationsSettingsOpened);
        this.routerService.notificationRouting$.pipe(takeUntil(this.destroy$)).subscribe(this.notificationRouting);
    }
    setupBadgeUpdateSubscriptions() {
        let forceUpdateCounterHandler;
        const forceUpdateCounters$ = new Subject();
        forceUpdateCounters$
            .pipe(debounceTime(BADGE_FORCE_UPDATE_DEBOUNCE_TIME), takeUntil(this.destroy$))
            .subscribe(() => this.notificationsPollingService.forceUpdateCounters());
        combineLatest([this.origins$, this.severityLevels$])
            .pipe(first())
            .subscribe(([origins, levels]) => {
            forceUpdateCounterHandler = payload => {
                if (payload &&
                    (origins.length === 0 || (payload.origin && origins.includes(payload.origin))) &&
                    (levels.length === 0 || levels.includes(payload.level))) {
                    forceUpdateCounters$.next();
                }
            };
            this.pubSub.subscribe(NOTIFICATIONS_BADGE_FORCE_UPDATE_EVENT, forceUpdateCounterHandler);
        });
        this.destroy$.subscribe(() => {
            this.pubSub.unsubscribe(NOTIFICATIONS_BADGE_FORCE_UPDATE_EVENT, forceUpdateCounterHandler);
        });
    }
}
NotificationsBadgeWidgetComponent.idCounter = 0;
/** @nocollapse */ NotificationsBadgeWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationsBadgeWidgetComponent, deps: [{ token: i1.NotificationsPollingService }, { token: i2.NotificationsRouterService }, { token: i3.MediaQueryService }, { token: i4.WidgetPropertiesService }, { token: PUBSUB }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ NotificationsBadgeWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: NotificationsBadgeWidgetComponent, selector: "bb-notifications-badge-widget", inputs: { preselectedNotification: "preselectedNotification", notificationsMessageLineAmountValue: ["notificationsMessageLineAmount", "notificationsMessageLineAmountValue"], displayRelativeTimeValue: ["displayRelativeTime", "displayRelativeTimeValue"], displayShowMoreButtonInBadgeValue: ["displayShowMoreButtonInBadge", "displayShowMoreButtonInBadgeValue"], allowedRoutesValue: ["allowedRoutes", "allowedRoutesValue"], displaySettingsButtonValue: ["displaySettingsButton", "displaySettingsButtonValue"], pageSizeValue: ["pageSize", "pageSizeValue"], originsValue: ["origins", "originsValue"], severityLevelsValue: ["severityLevels", "severityLevelsValue"], unreadCountUpdateIntervalValue: ["unreadCountUpdateInterval", "unreadCountUpdateIntervalValue"], dateFormat: "dateFormat" }, outputs: { notificationsSettingsOpened: "notificationsSettingsOpened", notificationRouting: "notificationRouting" }, providers: [
        NotificationsPaginationService,
        NotificationsDataService,
        NotificationsPollingService,
        NotificationsRouterService,
        WidgetPropertiesService,
        NotificationsPaginationService,
    ], viewQueries: [{ propertyName: "popover", first: true, predicate: ["popover"], descendants: true }], ngImport: i0, template: "<ng-container\n  bbNotificationsBadgeCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    unreadCount: unreadCount$ | async,\n    listTransform: listTransform$ | async\n  }\"\n>\n</ng-container>\n<ng-template\n  bbNotificationsBadgeCustomizable\n  let-hostRef\n  let-unreadCount=\"context.unreadCount\"\n  let-listTransform=\"context.listTransform\"\n>\n  <div class=\"bb-notifications-badge-widget\">\n    <div #popover=\"ngbDropdown\" ngbDropdown placement=\"bottom-right\" (openChange)=\"hostRef.onOpenChange($event)\">\n      <button\n        bbButton\n        [attr.aria-labelledby]=\"'notifications-badge-label' + hostRef.id\"\n        color=\"transparent\"\n        class=\"bb-notifications-badge-widget__dropdown-button\"\n        ngbDropdownToggle\n      >\n        <bb-icon-ui name=\"notifications\" color=\"secondary\" data-role=\"notifications-icon\" size=\"lg\"></bb-icon-ui>\n        <bb-badge-counter-ui\n          class=\"bb-notifications-badge-widget__dropdown-button-counter\"\n          [count]=\"unreadCount\"\n          maxCount=\"99\"\n          color=\"danger\"\n          data-role=\"notifications-unread-count\"\n        ></bb-badge-counter-ui>\n      </button>\n      <div\n        ngbDropdownMenu\n        class=\"bb-notifications-badge-widget__dropdown-menu dropdown-menu-unstyled\"\n        data-role=\"notifications-list-wrapper\"\n      >\n        <div\n          class=\"bb-notifications-badge-widget__dropdown-menu-list\"\n          data-role=\"notifications-dropdown-menu-list\"\n          [style.transform]=\"listTransform\"\n        >\n          <div class=\"bb-card bb-notifications-badge-widget__list-wrapper\">\n            <bb-notifications-list\n              *ngIf=\"popover.isOpen()\"\n              (navigation)=\"popover.close()\"\n              [preselectedNotification]=\"hostRef.preselectedNotification$ | async\"\n              [dateFormat]=\"dateFormat\"\n            ></bb-notifications-list>\n          </div>\n        </div>\n      </div>\n      <span\n        i18n=\"Notifications badge aria label@notifications.badge.aria-label\"\n        [attr.id]=\"'notifications-badge-label' + hostRef.id\"\n        aria-live=\"polite\"\n        aria-relevant=\"text\"\n        class=\"sr-only\"\n      >\n        { unreadCount || 0, plural, =0 { no new notifications } =1 { {{ unreadCount }} new notification} other {\n        {{ unreadCount }} new notifications } }\n      </span>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i5.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i6.BadgeCounterComponent; }), selector: "bb-badge-counter-ui", inputs: ["color", "count", "maxCount"] }, { type: i0.forwardRef(function () { return i7.NotificationsListComponent; }), selector: "bb-notifications-list", inputs: ["preselectedNotification", "dateFormat"], outputs: ["navigation"] }], directives: [{ type: i0.forwardRef(function () { return NotificationsBadgeWidgetCustomizableDirective; }), selector: "[bbNotificationsBadgeCustomizable]" }, { type: i0.forwardRef(function () { return i8.NgbDropdown; }), selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i0.forwardRef(function () { return i9.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i8.NgbDropdownToggle; }), selector: "[ngbDropdownToggle]" }, { type: i0.forwardRef(function () { return i8.NgbDropdownMenu; }), selector: "[ngbDropdownMenu]" }, { type: i0.forwardRef(function () { return i10.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i0.forwardRef(function () { return i10.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationsBadgeWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-notifications-badge-widget',
                    templateUrl: './notifications-badge-widget.component.html',
                    providers: [
                        NotificationsPaginationService,
                        NotificationsDataService,
                        NotificationsPollingService,
                        NotificationsRouterService,
                        WidgetPropertiesService,
                        NotificationsPaginationService,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.NotificationsPollingService }, { type: i2.NotificationsRouterService }, { type: i3.MediaQueryService }, { type: i4.WidgetPropertiesService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { preselectedNotification: [{
                type: Input
            }], notificationsMessageLineAmountValue: [{
                type: Input,
                args: ['notificationsMessageLineAmount']
            }], displayRelativeTimeValue: [{
                type: Input,
                args: ['displayRelativeTime']
            }], displayShowMoreButtonInBadgeValue: [{
                type: Input,
                args: ['displayShowMoreButtonInBadge']
            }], allowedRoutesValue: [{
                type: Input,
                args: ['allowedRoutes']
            }], displaySettingsButtonValue: [{
                type: Input,
                args: ['displaySettingsButton']
            }], pageSizeValue: [{
                type: Input,
                args: ['pageSize']
            }], originsValue: [{
                type: Input,
                args: ['origins']
            }], severityLevelsValue: [{
                type: Input,
                args: ['severityLevels']
            }], unreadCountUpdateIntervalValue: [{
                type: Input,
                args: ['unreadCountUpdateInterval']
            }], dateFormat: [{
                type: Input
            }], notificationsSettingsOpened: [{
                type: Output
            }], notificationRouting: [{
                type: Output
            }], popover: [{
                type: ViewChild,
                args: ['popover']
            }] } });
export class NotificationsBadgeWidgetCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ NotificationsBadgeWidgetCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationsBadgeWidgetCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ NotificationsBadgeWidgetCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: NotificationsBadgeWidgetCustomizableDirective, selector: "[bbNotificationsBadgeCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationsBadgeWidgetCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbNotificationsBadgeCustomizable]',
                }]
        }] });
//# sourceMappingURL=notifications-badge-widget.component.js.map