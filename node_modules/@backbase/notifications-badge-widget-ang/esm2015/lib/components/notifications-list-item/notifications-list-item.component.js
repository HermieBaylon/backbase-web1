import { Component, Directive, EventEmitter, Input, Output } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { severityLevelIconMap } from '../../models/severity-level-icon-map';
import { WidgetPropertiesService } from '../../services/widget-properties.service';
import * as i0 from "@angular/core";
import * as i1 from "../../services/widget-properties.service";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/ui-ang/ellipsis";
import * as i4 from "../humanized-date/humanized-date.component";
import * as i5 from "@backbase/notifications-common-ang";
import * as i6 from "@angular/common";
export class NotificationsListItemComponent {
    constructor(properties) {
        this.properties = properties;
        /**
         * The unique ID HTML property for each component instance.
         */
        this.id = `bb-notifications-badge-list-item-${NotificationsListItemComponent.idCounter++}`;
        /**
         * Event to open notification details.
         */
        this.openDetails = new EventEmitter();
        /**
         * Stream of widget property with the number of lines to show as a notification message.
         */
        this.notificationsMessageLineAmount$ = this.properties.notificationsMessageLineAmount$;
        /**
         * Stream of widget property with a flag that defines if we should display relative time for today.
         */
        this.displayRelativeTime$ = this.properties.displayRelativeTime$;
        /*
         * Stream of widget property with a flag that defines if we should display relative time for today.
         */
        this.displayShowMoreButtonInBadge$ = this.properties.displayShowMoreButtonInBadge$;
        /**
         * Notifications severity map
         */
        this.levelMap = severityLevelIconMap;
    }
    /**
     * Getter for icon name from severity level icon map due to level of notification.
     */
    get icon() {
        return this.levelMap[this.notification.level].icon;
    }
    /**
     * Getter for icon color from severity level icon map due to level of notification.
     */
    get color() {
        return this.levelMap[this.notification.level].color;
    }
    /**
     * Method to open notification details from the parent component.
     *
     * @param event Click event
     */
    openNotificationDetails(event) {
        event.stopPropagation();
        this.openDetails.emit(event);
    }
}
NotificationsListItemComponent.idCounter = 0;
/** @nocollapse */ NotificationsListItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationsListItemComponent, deps: [{ token: i1.WidgetPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ NotificationsListItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: NotificationsListItemComponent, selector: "bb-notifications-list-item", inputs: { notification: "notification", dateFormat: "dateFormat" }, outputs: { openDetails: "openDetails" }, ngImport: i0, template: "<ng-container\n  bbNotificationsListItemCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    notificationsMessageLineAmount: notificationsMessageLineAmount$ | async\n  }\"\n></ng-container>\n\n<ng-template\n  bbNotificationsListItemCustomizable\n  let-hostRef\n  let-notificationsMessageLineAmount=\"context.notificationsMessageLineAmount\"\n>\n  <div\n    tabindex=\"0\"\n    class=\"bb-notifications-badge-list-item bb-notification bb-notification--flush\"\n    data-role=\"notifications-list-item\"\n    [class.bb-notifications-badge-list-item--unread]=\"!hostRef.notification.read\"\n  >\n    <span\n      class=\"sr-only\"\n      i18n=\"Notification item read/unread status@@notifications.list.notification-details.read-unread-status\"\n    >\n      { hostRef.notification.read, select, true { viewed } false { new } } notification,\n    </span>\n    <span\n      class=\"sr-only\"\n      i18n=\"Notification item severity level@@notifications.list.notification-details.read-unread-status\"\n    >\n      { hostRef.notification.level, select, ALERT { Alert } INFO { Info } SUCCESS { Success } WARNING { Warning } },\n    </span>\n    <bb-icon-ui\n      [name]=\"hostRef.icon\"\n      [color]=\"hostRef.color\"\n      class=\"bb-notification__icon\"\n      data-role=\"notifications-list-item-severity-level-icon\"\n    ></bb-icon-ui>\n    <div class=\"bb-notifications-badge-list-item__body bb-notification__body\">\n      <div\n        class=\"bb-notifications-badge-list-item__header bb-notification__title bb-stack\"\n        data-role=\"notification-heading\"\n      >\n        <bb-ellipsis-ui\n          class=\"bb-notifications-badge-list-item__title bb-stack__item bb-text-align-left\"\n          data-role=\"notifications-list-item-title\"\n        >\n          <span [innerHTML]=\"hostRef.notification | notificationLocalization: 'title'\"></span>\n        </bb-ellipsis-ui>\n        <bb-humanized-date\n          class=\"bb-stack__item bb-stack__item--push-right\"\n          [date]=\"hostRef.notification.createdOn\"\n          [displayRelativeTime]=\"hostRef.displayRelativeTime$ | async\"\n          data-role=\"notification-list-item-creation-date\"\n          [dateFormat]=\"dateFormat\"\n        ></bb-humanized-date>\n      </div>\n      <bb-ellipsis-ui\n        data-role=\"notifications-list-item-content\"\n        aria-hidden=\"true\"\n        class=\"bb-notifications-badge-list-item__content bb-text-align-left bb-stack bb-block bb-block--sm\"\n        [tooltipTriggers]=\"''\"\n        [lineClamp]=\"notificationsMessageLineAmount\"\n      >\n        <div\n          #notificationMessage\n          [innerHTML]=\"\n            hostRef.notification | notificationLocalization: 'message' | interpolateLink: hostRef.notification:false\n          \"\n        ></div>\n      </bb-ellipsis-ui>\n      <button\n        type=\"button\"\n        data-role=\"notifications-list-item-show-more-button\"\n        *ngIf=\"hostRef.displayShowMoreButtonInBadge$ | async\"\n        class=\"btn-link-text bb-text-bold bb-block bb-block--sm\"\n        (click)=\"hostRef.openNotificationDetails($event)\"\n        aria-label=\"See more notification details\"\n        i18n=\"Notification badge See more button@@notifications.list.see-more.button\"\n        i18n-aria-label=\"Aria-label for See more button@@notifications.list.see-more.button.aria-label\"\n      >\n        <span>See more</span>\n      </button>\n      <bb-notifications-capability-icon\n        aria-hidden=\"true\"\n        [origin]=\"hostRef.notification?.origin\"\n      ></bb-notifications-capability-icon>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i3.EllipsisComponent; }), selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }, { type: i0.forwardRef(function () { return i4.HumanizedDateComponent; }), selector: "bb-humanized-date", inputs: ["dateFormat", "displayRelativeTime", "date"] }, { type: i0.forwardRef(function () { return i5.NotificationsCapabilityIconComponent; }), selector: "bb-notifications-capability-icon", inputs: ["origin"] }], directives: [{ type: i0.forwardRef(function () { return NotificationListItemCustomizableDirective; }), selector: "[bbNotificationsListItemCustomizable]" }, { type: i0.forwardRef(function () { return i6.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i0.forwardRef(function () { return i6.AsyncPipe; }), "notificationLocalization": i0.forwardRef(function () { return i5.ӨNotificationLocalizationPipe; }), "interpolateLink": i0.forwardRef(function () { return i5.ӨInterpolateLinkPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationsListItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-notifications-list-item',
                    templateUrl: './notifications-list-item.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.WidgetPropertiesService }]; }, propDecorators: { notification: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], openDetails: [{
                type: Output
            }] } });
export class NotificationListItemCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ NotificationListItemCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationListItemCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ NotificationListItemCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: NotificationListItemCustomizableDirective, selector: "[bbNotificationsListItemCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationListItemCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbNotificationsListItemCustomizable]',
                }]
        }] });
//# sourceMappingURL=notifications-list-item.component.js.map