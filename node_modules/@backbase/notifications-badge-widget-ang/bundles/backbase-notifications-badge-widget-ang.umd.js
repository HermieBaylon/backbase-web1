(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@backbase/foundation-ang/core'), require('@ng-bootstrap/ng-bootstrap'), require('rxjs'), require('rxjs/operators'), require('@backbase/notifications-common-ang'), require('@backbase/data-ang/notifications'), require('@backbase/foundation-ang/web-sdk'), require('@backbase/ui-ang/media-query-lib'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/badge-counter'), require('@backbase/ui-ang/notification'), require('@backbase/ui-ang/alert'), require('@backbase/ui-ang/ellipsis'), require('@backbase/ui-ang/date-pipe'), require('@backbase/ui-ang/load-button'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/focus'), require('@backbase/ui-ang/tooltip-directive'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/common-error-state'), require('@backbase/ui-ang/badge')) :
    typeof define === 'function' && define.amd ? define('@backbase/notifications-badge-widget-ang', ['exports', '@angular/core', '@angular/common', '@backbase/foundation-ang/core', '@ng-bootstrap/ng-bootstrap', 'rxjs', 'rxjs/operators', '@backbase/notifications-common-ang', '@backbase/data-ang/notifications', '@backbase/foundation-ang/web-sdk', '@backbase/ui-ang/media-query-lib', '@backbase/ui-ang/icon', '@backbase/ui-ang/badge-counter', '@backbase/ui-ang/notification', '@backbase/ui-ang/alert', '@backbase/ui-ang/ellipsis', '@backbase/ui-ang/date-pipe', '@backbase/ui-ang/load-button', '@backbase/ui-ang/button', '@backbase/ui-ang/focus', '@backbase/ui-ang/tooltip-directive', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/common-error-state', '@backbase/ui-ang/badge'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["notifications-badge-widget-ang"] = {}), global.ng.core, global.ng.common, global.i1, global.i8$1, global.rxjs, global.rxjs.operators, global.i5, global.i1$1, global.webSdk, global.i3$2, global.i2$1, global.i6, global.i5$2, global.i8, global.i3, global.i2, global.i10, global.i3$1, global.i4, global.i5$1, global.i12, global.i13, global.commonErrorState, global.badge));
})(this, (function (exports, i0, i14, i1, i8$1, rxjs, operators, i5, i1$1, webSdk, i3$2, i2$1, i6, i5$2, i8, i3, i2, i10, i3$1, i4, i5$1, i12, i13, commonErrorState, badge) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i14__namespace = /*#__PURE__*/_interopNamespace(i14);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i8__namespace$1 = /*#__PURE__*/_interopNamespace(i8$1);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i3__namespace$2 = /*#__PURE__*/_interopNamespace(i3$2);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i5__namespace$2 = /*#__PURE__*/_interopNamespace(i5$2);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i12__namespace = /*#__PURE__*/_interopNamespace(i12);
    var i13__namespace = /*#__PURE__*/_interopNamespace(i13);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var DefaultWidgetProperties = {
        displayRelativeTime: false,
        allowedRoutes: [],
        displaySettingsButton: true,
        notificationsMessageLineAmount: 2,
        displayShowMoreButtonInBadge: false,
        pageSize: 5,
        origins: [],
        severityLevels: [],
        unreadCountUpdateInterval: 15,
    };
    var WidgetPropertiesService = /** @class */ (function (_super) {
        __extends(WidgetPropertiesService, _super);
        function WidgetPropertiesService(itemModel) {
            var _this = _super.call(this, itemModel) || this;
            _this.itemModel = itemModel;
            _this.displayRelativeTime$$ = new rxjs.BehaviorSubject(undefined);
            _this.displaySettingsButton$$ = new rxjs.BehaviorSubject(undefined);
            _this.notificationsMessageLineAmount$$ = new rxjs.BehaviorSubject(undefined);
            _this.displayShowMoreButtonInBadge$$ = new rxjs.BehaviorSubject(undefined);
            _this.pageSize$$ = new rxjs.BehaviorSubject(undefined);
            _this.unreadCountUpdateInterval$$ = new rxjs.BehaviorSubject(undefined);
            _this.displayRelativeTime$ = i5.getPropertyValue(_this.displayRelativeTime$$, _this.displayRelativeTime);
            _this.displaySettingsButton$ = i5.getPropertyValue(_this.displaySettingsButton$$, _this.displaySettingsButton);
            _this.notificationsMessageLineAmount$ = i5.getPropertyValue(_this.notificationsMessageLineAmount$$, _this.notificationsMessageLineAmount);
            _this.displayShowMoreButtonInBadge$ = i5.getPropertyValue(_this.displayShowMoreButtonInBadge$$, _this.displayShowMoreButtonInBadge);
            _this.pageSize$ = i5.getPropertyValue(_this.pageSize$$, _this.pageSize);
            _this.unreadCountUpdateInterval$ = i5.getPropertyValue(_this.unreadCountUpdateInterval$$, _this.unreadCountUpdateInterval);
            return _this;
        }
        Object.defineProperty(WidgetPropertiesService.prototype, "displayRelativeTime", {
            get: function () {
                if (!this.itemModel) {
                    return this.defaultModelObservable(DefaultWidgetProperties.displayRelativeTime);
                }
                return this.itemModel
                    .property('displayRelativeTime', DefaultWidgetProperties.displayRelativeTime)
                    .pipe(operators.map(i5.modelItemToBoolean), operators.first());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "displaySettingsButton", {
            get: function () {
                if (!this.itemModel) {
                    return this.defaultModelObservable(DefaultWidgetProperties.displaySettingsButton);
                }
                return this.itemModel
                    .property('displaySettingsButton', DefaultWidgetProperties.displaySettingsButton)
                    .pipe(operators.map(i5.modelItemToBoolean), operators.first());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "notificationsMessageLineAmount", {
            get: function () {
                if (!this.itemModel) {
                    return this.defaultModelObservable(DefaultWidgetProperties.notificationsMessageLineAmount);
                }
                return this.itemModel
                    .property('notificationsMessageLineAmount', DefaultWidgetProperties.notificationsMessageLineAmount)
                    .pipe(operators.map(Number), operators.first());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "displayShowMoreButtonInBadge", {
            get: function () {
                if (!this.itemModel) {
                    return this.defaultModelObservable(DefaultWidgetProperties.displayShowMoreButtonInBadge);
                }
                return this.itemModel
                    .property('displayShowMoreButtonInBadge', DefaultWidgetProperties.displayShowMoreButtonInBadge)
                    .pipe(operators.map(i5.modelItemToBoolean), operators.first());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "pageSize", {
            get: function () {
                if (!this.itemModel) {
                    return this.defaultModelObservable(DefaultWidgetProperties.pageSize);
                }
                return this.itemModel.property('pageSize', DefaultWidgetProperties.pageSize).pipe(operators.map(Number), i5.shareReplayOnce());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "unreadCountUpdateInterval", {
            get: function () {
                if (!this.itemModel) {
                    return this.defaultModelObservable(DefaultWidgetProperties.unreadCountUpdateInterval * 1000);
                }
                return this.itemModel.property('unreadCountUpdateInterval', DefaultWidgetProperties.unreadCountUpdateInterval).pipe(operators.map(Number), operators.map(function (n) { return n * 1000; }), i5.shareReplayOnce());
            },
            enumerable: false,
            configurable: true
        });
        WidgetPropertiesService.prototype.setDisplayRelativeTime = function (value) {
            this.displayRelativeTime$$.next(i5.modelItemToBoolean(value));
        };
        WidgetPropertiesService.prototype.setDisplaySettingsButton = function (value) {
            this.displaySettingsButton$$.next(i5.modelItemToBoolean(value));
        };
        WidgetPropertiesService.prototype.setNotificationsMessageLineAmount = function (value) {
            this.notificationsMessageLineAmount$$.next(Number(value));
        };
        WidgetPropertiesService.prototype.setDisplayShowMoreButtonInBadge = function (value) {
            this.displayShowMoreButtonInBadge$$.next(i5.modelItemToBoolean(value));
        };
        WidgetPropertiesService.prototype.setPageSize = function (value) {
            this.pageSize$$.next(Number(value));
        };
        WidgetPropertiesService.prototype.setUnreadCountUpdateInterval = function (value) {
            var updateInterval = Number(value);
            if (!isNaN(updateInterval) && updateInterval > 0) {
                this.unreadCountUpdateInterval$$.next(i5.secondsToMilliseconds(updateInterval));
            }
        };
        return WidgetPropertiesService;
    }(i5.BaseWidgetPropertiesService));
    /** @nocollapse */ WidgetPropertiesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: WidgetPropertiesService, deps: [{ token: i1__namespace.ItemModel, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ WidgetPropertiesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: WidgetPropertiesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: WidgetPropertiesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace.ItemModel, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var NotificationsPollingService = /** @class */ (function () {
        function NotificationsPollingService(notificationHttpService, properties, ngZone) {
            var _this = this;
            this.notificationHttpService = notificationHttpService;
            this.properties = properties;
            this.ngZone = ngZone;
            this.forceUpdateCountersSubject = new rxjs.Subject();
            this.requestsInterval$ = this.properties.unreadCountUpdateInterval$;
            this.repeat$ = new rxjs.ReplaySubject(1);
            this.load$ = rxjs.merge(rxjs.of(''), this.forceUpdateCountersSubject, rxjs.merge(this.forceUpdateCountersSubject, this.repeat$).pipe(operators.switchMap(function () { return _this.requestsInterval$; }), operators.switchMap(function (interval) { return rxjs.of('').pipe(operators.delay(interval, i5.leaveZone(_this.ngZone, rxjs.asyncScheduler))); }), operators.observeOn(i5.enterZone(this.ngZone, rxjs.asyncScheduler))));
            this.updateCountersErrorSubject$$ = new rxjs.BehaviorSubject(undefined);
            /**
             * Stream with update counters request errors
             */
            this.updateCountersError$ = this.updateCountersErrorSubject$$.asObservable();
            /**
             * Stream with unread notifications count
             */
            this.unreadNotificationsCount$ = this.load$.pipe(operators.switchMap(function () { return _this.requestCount(); }), operators.tap(function () { return _this.repeat$.next(); }), operators.filter(function (count) { return typeof count !== 'undefined'; }), i5.shareReplayOnce());
            /**
             * Stream with flag of new available notifications
             */
            this.newNotificationsAvailable$ = this.unreadNotificationsCount$.pipe(operators.pairwise(), operators.map(function (_a) {
                var _b = __read(_a, 2), prev = _b[0], cur = _b[1];
                if (prev === null || prev === undefined) {
                    return false;
                }
                if (cur === null || cur === undefined) {
                    return false;
                }
                return cur - prev > 0;
            }), operators.filter(Boolean));
        }
        NotificationsPollingService.prototype.requestCount = function () {
            var _this = this;
            var origins$ = this.properties.origins$;
            var severityLevels$ = this.properties.severityLevels$;
            return rxjs.combineLatest([origins$, severityLevels$]).pipe(operators.first(), operators.switchMap(function (_a) {
                var _b = __read(_a, 2), origins = _b[0], levels = _b[1];
                return _this.notificationHttpService.getUnreadCount(Object.assign(Object.assign({}, (origins.length && { origins: origins })), (levels.length && { levels: levels })));
            }), operators.map(function (body) {
                _this.updateCountersErrorSubject$$.next(undefined);
                return body === null || body === void 0 ? void 0 : body.unread;
            }), operators.catchError(function (error) {
                _this.updateCountersErrorSubject$$.next(error);
                return rxjs.of(undefined);
            }));
        };
        /**
         * Method to trigger force update on unread notifications counter
         */
        NotificationsPollingService.prototype.forceUpdateCounters = function () {
            this.forceUpdateCountersSubject.next();
        };
        return NotificationsPollingService;
    }());
    /** @nocollapse */ NotificationsPollingService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsPollingService, deps: [{ token: i1__namespace$1.NotificationsHttpService }, { token: WidgetPropertiesService }, { token: i0__namespace.NgZone }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ NotificationsPollingService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsPollingService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsPollingService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.NotificationsHttpService }, { type: WidgetPropertiesService }, { type: i0__namespace.NgZone }]; } });

    var NotificationsPaginationService = /** @class */ (function () {
        function NotificationsPaginationService(notificationHttpService, properties) {
            var _this = this;
            this.notificationHttpService = notificationHttpService;
            this.properties = properties;
            /**
             * Stream with page size
             */
            this.sizeProperty$ = this.properties.pageSize$;
            this.pageSubject = new rxjs.Subject();
            this.page$ = this.pageSubject.asObservable();
            /**
             * Stream with current page number (work with loadPage method)
             */
            this.pageFrom$ = this.page$.pipe(operators.map(function (p) { return p.from; }));
            this.isLoadingSubject = new rxjs.BehaviorSubject(false);
            /**
             * Stream with loading flag
             */
            this.isLoading$ = this.isLoadingSubject.asObservable();
            // eslint-disable-next-line
            this.totalCountSubject = new rxjs.Subject();
            /**
             * Stream with total count of notifications
             */
            this.totalCount$ = this.totalCountSubject.asObservable();
            this.origins$ = this.properties.origins$;
            this.severityLevels$ = this.properties.severityLevels$;
            this.notificationsRequest$ = rxjs.combineLatest([
                this.page$,
                this.sizeProperty$,
                this.origins$,
                this.severityLevels$,
            ]).pipe(operators.switchMap(function (_a) {
                var _b = __read(_a, 4), page = _b[0], size = _b[1], origins = _b[2], levels = _b[3];
                _this.isLoadingSubject.next(true);
                return _this.notificationHttpService
                    .getNotifications(Object.assign(Object.assign({ toDate: page.createdOn && new Date(i5.toISOExtendedFormat(page.createdOn)).toISOString().replace(/\.\d+Z/, 'Z'), from: page.from, size: size }, (origins.length && { origins: origins })), (levels.length && { levels: levels })), 'response')
                    .pipe(operators.tap(function (res) {
                    _this.totalCountSubject.next(Number(res.headers.get('x-total-count') || '0'));
                }), operators.map(function (_a) {
                    var body = _a.body, headers = _a.headers;
                    return ({ data: body || [], headers: headers, error: undefined });
                }), operators.catchError(function (error) { return rxjs.of({ data: [], headers: undefined, error: error }); }), operators.finalize(function () {
                    _this.isLoadingSubject.next(false);
                }));
            }), operators.share());
            this.notificationsPage$ = this.notificationsRequest$.pipe(operators.map(function (_a) {
                var data = _a.data;
                return data;
            }));
            this.markAllNotificationsAsRead = new rxjs.BehaviorSubject(false);
            /**
             * Stream of notifications
             */
            this.notifications$ = rxjs.combineLatest([
                rxjs.zip(this.page$, this.notificationsPage$).pipe(
                // reset accumulator for every first page in Append mode or for every page in regular mode
                operators.scan(function (allNotifications, _a) {
                    var _b = __read(_a, 2), page = _b[0], notifications = _b[1];
                    return (!page.append || page.from === 0 ? [] : allNotifications).concat(notifications);
                }, [])),
                this.markAllNotificationsAsRead.pipe(operators.startWith(true), operators.filter(Boolean)),
            ]).pipe(operators.withLatestFrom(this.markAllNotificationsAsRead), 
            // eslint-disable-next-line arrow-body-style
            operators.map(function (_a) {
                var _b = __read(_a, 2), _c = __read(_b[0], 1), notifications = _c[0], allAsRead = _b[1];
                return allAsRead ? notifications.map(function (item) { return (!item.read && Object.assign(Object.assign({}, item), { read: true })) || item; }) : notifications;
            }));
            /**
             * Stream of errors
             */
            this.error$ = this.notificationsRequest$.pipe(operators.map(function (_a) {
                var error = _a.error;
                return error;
            }), operators.distinctUntilChanged());
        }
        NotificationsPaginationService.prototype.loadPageData = function (page, append, createdOn) {
            if (append === void 0) { append = false; }
            this.pageSubject.next({ from: page, append: append, createdOn: createdOn });
        };
        /**
         * Method to load notifications of specified page
         *
         * @param page Page number
         */
        NotificationsPaginationService.prototype.loadPage = function (page) {
            this.loadPageData(page);
        };
        /**
         * Method to load next page of notifications
         *
         * @param page Page number
         * @param createdOn Created on notification date
         */
        NotificationsPaginationService.prototype.loadMore = function (page, createdOn) {
            this.loadPageData(page, true, createdOn);
        };
        /**
         * Mark all notifications as read
         *
         * @param read Is read flag
         */
        NotificationsPaginationService.prototype.markAllAsRead = function (read) {
            this.markAllNotificationsAsRead.next(read);
        };
        return NotificationsPaginationService;
    }());
    /** @nocollapse */ NotificationsPaginationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsPaginationService, deps: [{ token: i1__namespace$1.NotificationsHttpService }, { token: WidgetPropertiesService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ NotificationsPaginationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsPaginationService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsPaginationService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.NotificationsHttpService }, { type: WidgetPropertiesService }]; } });

    var NotificationsDataService = /** @class */ (function () {
        function NotificationsDataService(notificationHttpService, notificationsPollingService) {
            var _this = this;
            this.notificationHttpService = notificationHttpService;
            this.notificationsPollingService = notificationsPollingService;
            this.markAllNotificationAsReadErrorSubject = new rxjs.BehaviorSubject(false);
            /**
             * Mark all notification as read error subject
             */
            this.markAllNotificationAsReadError = this.markAllNotificationAsReadErrorSubject
                .asObservable()
                .pipe(operators.finalize(function () { return _this.markAllNotificationAsReadErrorSubject.next(false); }));
        }
        /**
         *
         * Method to mark a notification as read by its id
         *
         * @param notificationId Notification
         * @returns  Mark as read stream
         */
        NotificationsDataService.prototype.markNotificationAsRead = function (notificationId) {
            var _this = this;
            return this.notificationHttpService
                .putMarkAsRead({ id: notificationId, markAsReadPutRequestBody: { read: true } })
                .pipe(operators.tap(function () {
                _this.notificationsPollingService.forceUpdateCounters();
            }));
        };
        /**
         * Mark all notifications as read
         *
         * @returns Mark all notifications as read stream
         */
        NotificationsDataService.prototype.markAllNotificationAsRead = function () {
            var _this = this;
            return this.notificationHttpService.putRead(undefined).pipe(operators.catchError(function () {
                _this.markAllNotificationAsReadErrorSubject.next(true);
                return rxjs.EMPTY;
            }), operators.tap(function () {
                _this.markAllNotificationAsReadErrorSubject.next(false);
                _this.notificationsPollingService.forceUpdateCounters();
            }));
        };
        /**
         * @param id Delete notification by id
         * @returns Notification delete stream
         */
        NotificationsDataService.prototype.deleteNotification = function (id) {
            return this.notificationHttpService.deleteNotification({ id: id });
        };
        return NotificationsDataService;
    }());
    /** @nocollapse */ NotificationsDataService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsDataService, deps: [{ token: i1__namespace$1.NotificationsHttpService }, { token: NotificationsPollingService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ NotificationsDataService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsDataService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsDataService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.NotificationsHttpService }, { type: NotificationsPollingService }]; } });

    var NotificationsRouterService = /** @class */ (function () {
        function NotificationsRouterService() {
            this.notificationsSettingsOpenedSubject = new rxjs.Subject();
            /**
             * Settings opened navigation subject
             */
            this.settingsOpenedNavigation$ = this.notificationsSettingsOpenedSubject.asObservable();
            this.notificationRoutingSubject = new rxjs.Subject();
            /**
             * Notification routing subject
             */
            this.notificationRouting$ = this.notificationRoutingSubject.asObservable();
        }
        /**
         * Emit notification settings navigation
         */
        NotificationsRouterService.prototype.emitSettingsOpenedNavigation = function () {
            this.notificationsSettingsOpenedSubject.next();
        };
        /**
         * Emit notification routing
         *
         * @param routing Routing subject
         */
        NotificationsRouterService.prototype.emitNotificationRouting = function (routing) {
            this.notificationRoutingSubject.next(routing);
        };
        return NotificationsRouterService;
    }());
    /** @nocollapse */ NotificationsRouterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsRouterService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ NotificationsRouterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsRouterService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsRouterService, decorators: [{
                type: i0.Injectable
            }] });

    var NotificationSeverity;
    (function (NotificationSeverity) {
        NotificationSeverity["Alert"] = "ALERT";
        NotificationSeverity["Warning"] = "WARNING";
        NotificationSeverity["Info"] = "INFO";
        NotificationSeverity["Success"] = "SUCCESS";
    })(NotificationSeverity || (NotificationSeverity = {}));

    var _a;
    var severityLevelIconMap = (_a = {},
        _a[NotificationSeverity.Success] = {
            icon: 'success',
            color: 'success',
        },
        _a[NotificationSeverity.Info] = {
            icon: 'info',
            color: 'primary',
        },
        _a[NotificationSeverity.Alert] = {
            icon: 'info',
            color: 'danger',
        },
        _a[NotificationSeverity.Warning] = {
            icon: 'warning',
            color: 'warning',
        },
        _a);

    var DEFAULT_FORMAT_FOR_DATE_IN_PAST = 'MM/dd/yy';
    var HumanizedDateComponent = /** @class */ (function () {
        function HumanizedDateComponent() {
            this._isWithinHour = false;
            this._isToday = false;
            this._isYesterday = false;
            /**
             * Flag that defines if we should display relative time for today.
             */
            this.displayRelativeTime = false;
            this.today = new Date();
            var yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            this.yesterday = yesterday;
        }
        Object.defineProperty(HumanizedDateComponent.prototype, "date", {
            /**
             * Date getter.
             */
            // eslint-disable-next-line @typescript-eslint/adjacent-overload-signatures
            get: function () {
                return this._date;
            },
            /**
             * Notification date.
             */
            set: function (value) {
                var date = this.parseDate(value);
                if (date) {
                    this._date = date;
                    this.setDateFlags();
                }
                else {
                    this.resetStateToDefaults();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HumanizedDateComponent.prototype, "dateFormatForPast", {
            get: function () {
                return this.dateFormat || DEFAULT_FORMAT_FOR_DATE_IN_PAST;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HumanizedDateComponent.prototype, "isWithinHour", {
            /**
             *
             * Is date within an hour from now flag getter.
             */
            get: function () {
                return this._isWithinHour;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HumanizedDateComponent.prototype, "isToday", {
            /**
             * Is date within the current day flag getter.
             */
            get: function () {
                return this._isToday;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HumanizedDateComponent.prototype, "isYesterday", {
            /**
             * Is date within the yesterday date flag getter.
             */
            get: function () {
                return this._isYesterday;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HumanizedDateComponent.prototype, "minutesFromNow", {
            /**
             * How many minutes from now is the date getter.
             */
            get: function () {
                return this._minutesFromNow;
            },
            enumerable: false,
            configurable: true
        });
        HumanizedDateComponent.prototype.setDateFlags = function () {
            this._minutesFromNow = this.getMinutesFromNow(this._date, this.today);
            this._isToday = this.isSameDay(this._date, this.today);
            this._isYesterday = this.isSameDay(this._date, this.yesterday);
            this._isWithinHour = Number(this.minutesFromNow) < 60;
        };
        HumanizedDateComponent.prototype.resetStateToDefaults = function () {
            this._date = undefined;
            this._minutesFromNow = undefined;
            this._isWithinHour = false;
            this._isToday = false;
            this._isYesterday = false;
        };
        HumanizedDateComponent.prototype.parseDate = function (value) {
            if (typeof value === 'undefined' || value instanceof Date)
                return value;
            return new Date(i5.toISOExtendedFormat(value)).valueOf() ? new Date(i5.toISOExtendedFormat(value)) : undefined;
        };
        HumanizedDateComponent.prototype.isSameDay = function (date1, date2) {
            if (!date1 || !date2) {
                return false;
            }
            return date1.toDateString() === date2.toDateString();
        };
        HumanizedDateComponent.prototype.getMinutesFromNow = function (dateTime, currentDateTime) {
            var minutesFromNow = Math.floor((currentDateTime.getTime() - dateTime.getTime()) / 60000);
            return minutesFromNow > 0 ? minutesFromNow : 0;
        };
        return HumanizedDateComponent;
    }());
    /** @nocollapse */ HumanizedDateComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HumanizedDateComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ HumanizedDateComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: HumanizedDateComponent, selector: "bb-humanized-date", inputs: { dateFormat: "dateFormat", displayRelativeTime: "displayRelativeTime", date: "date" }, ngImport: i0__namespace, template: "<ng-container bbHumanizedDateCustomizable [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbHumanizedDateCustomizable let-hostRef>\n  <div class=\"sr-only\" i18n=\"Humanized date title@@humanized.date.title\">,Date:</div>\n  <ng-container *ngIf=\"hostRef.date as date\">\n    <time *ngIf=\"hostRef.isToday\" class=\"bb-subheader bb-subheader--regular bb-text-nowrap\">\n      <ng-container *ngIf=\"hostRef.displayRelativeTime; else today\">\n        <ng-container\n          *ngIf=\"hostRef.isWithinHour; else moreThanHourAgo\"\n          i18n=\"Notifications time less than an hour ago date@@notifications.humanized-date.less-than-an-hour-ago\"\n        >\n          { hostRef.minutesFromNow, plural, =0 {now} other {{{hostRef.minutesFromNow}} min ago} }\n        </ng-container>\n\n        <ng-template #moreThanHourAgo>\n          {{ date | bbDate: 'shortTime' }}\n        </ng-template>\n      </ng-container>\n\n      <ng-template #today i18n=\"Notifications today date@@notifications.humanized-date.today\"> today </ng-template>\n    </time>\n\n    <time\n      *ngIf=\"hostRef.isYesterday\"\n      class=\"bb-subheader bb-subheader--regular\"\n      i18n=\"Notifications yesterday date@@notifications.humanized-date.yesterday\"\n    >\n      yesterday\n    </time>\n    <time\n      *ngIf=\"!hostRef.isToday && !hostRef.isYesterday\"\n      class=\"bb-subheader bb-subheader--regular\"\n      [attr.aria-label]=\"date | bbDate: 'mediumDate'\"\n    >\n      {{ date | bbDate: dateFormatForPast }}\n    </time>\n  </ng-container>\n</ng-template>\n", directives: [{ type: i0__namespace.forwardRef(function () { return HumanizedDateCustomizableDirective; }), selector: "[bbHumanizedDateCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i14__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "bbDate": i0__namespace.forwardRef(function () { return i2__namespace.BbDatePipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HumanizedDateComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-humanized-date',
                        templateUrl: './humanized-date.component.html',
                    }]
            }], ctorParameters: function () { return []; }, propDecorators: { dateFormat: [{
                    type: i0.Input
                }], displayRelativeTime: [{
                    type: i0.Input
                }], date: [{
                    type: i0.Input
                }] } });
    var HumanizedDateCustomizableDirective = /** @class */ (function (_super) {
        __extends(HumanizedDateCustomizableDirective, _super);
        function HumanizedDateCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return HumanizedDateCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ HumanizedDateCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HumanizedDateCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ HumanizedDateCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: HumanizedDateCustomizableDirective, selector: "[bbHumanizedDateCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HumanizedDateCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbHumanizedDateCustomizable]',
                    }]
            }] });

    var NotificationsListItemComponent = /** @class */ (function () {
        function NotificationsListItemComponent(properties) {
            this.properties = properties;
            /**
             * The unique ID HTML property for each component instance.
             */
            this.id = "bb-notifications-badge-list-item-" + NotificationsListItemComponent.idCounter++;
            /**
             * Event to open notification details.
             */
            this.openDetails = new i0.EventEmitter();
            /**
             * Stream of widget property with the number of lines to show as a notification message.
             */
            this.notificationsMessageLineAmount$ = this.properties.notificationsMessageLineAmount$;
            /**
             * Stream of widget property with a flag that defines if we should display relative time for today.
             */
            this.displayRelativeTime$ = this.properties.displayRelativeTime$;
            /*
             * Stream of widget property with a flag that defines if we should display relative time for today.
             */
            this.displayShowMoreButtonInBadge$ = this.properties.displayShowMoreButtonInBadge$;
            /**
             * Notifications severity map
             */
            this.levelMap = severityLevelIconMap;
        }
        Object.defineProperty(NotificationsListItemComponent.prototype, "icon", {
            /**
             * Getter for icon name from severity level icon map due to level of notification.
             */
            get: function () {
                return this.levelMap[this.notification.level].icon;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NotificationsListItemComponent.prototype, "color", {
            /**
             * Getter for icon color from severity level icon map due to level of notification.
             */
            get: function () {
                return this.levelMap[this.notification.level].color;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Method to open notification details from the parent component.
         *
         * @param event Click event
         */
        NotificationsListItemComponent.prototype.openNotificationDetails = function (event) {
            event.stopPropagation();
            this.openDetails.emit(event);
        };
        return NotificationsListItemComponent;
    }());
    NotificationsListItemComponent.idCounter = 0;
    /** @nocollapse */ NotificationsListItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsListItemComponent, deps: [{ token: WidgetPropertiesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ NotificationsListItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: NotificationsListItemComponent, selector: "bb-notifications-list-item", inputs: { notification: "notification", dateFormat: "dateFormat" }, outputs: { openDetails: "openDetails" }, ngImport: i0__namespace, template: "<ng-container\n  bbNotificationsListItemCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    notificationsMessageLineAmount: notificationsMessageLineAmount$ | async\n  }\"\n></ng-container>\n\n<ng-template\n  bbNotificationsListItemCustomizable\n  let-hostRef\n  let-notificationsMessageLineAmount=\"context.notificationsMessageLineAmount\"\n>\n  <div\n    tabindex=\"0\"\n    class=\"bb-notifications-badge-list-item bb-notification bb-notification--flush\"\n    data-role=\"notifications-list-item\"\n    [class.bb-notifications-badge-list-item--unread]=\"!hostRef.notification.read\"\n  >\n    <span\n      class=\"sr-only\"\n      i18n=\"Notification item read/unread status@@notifications.list.notification-details.read-unread-status\"\n    >\n      { hostRef.notification.read, select, true { viewed } false { new } } notification,\n    </span>\n    <span\n      class=\"sr-only\"\n      i18n=\"Notification item severity level@@notifications.list.notification-details.read-unread-status\"\n    >\n      { hostRef.notification.level, select, ALERT { Alert } INFO { Info } SUCCESS { Success } WARNING { Warning } },\n    </span>\n    <bb-icon-ui\n      [name]=\"hostRef.icon\"\n      [color]=\"hostRef.color\"\n      class=\"bb-notification__icon\"\n      data-role=\"notifications-list-item-severity-level-icon\"\n    ></bb-icon-ui>\n    <div class=\"bb-notifications-badge-list-item__body bb-notification__body\">\n      <div\n        class=\"bb-notifications-badge-list-item__header bb-notification__title bb-stack\"\n        data-role=\"notification-heading\"\n      >\n        <bb-ellipsis-ui\n          class=\"bb-notifications-badge-list-item__title bb-stack__item bb-text-align-left\"\n          data-role=\"notifications-list-item-title\"\n        >\n          <span [innerHTML]=\"hostRef.notification | notificationLocalization: 'title'\"></span>\n        </bb-ellipsis-ui>\n        <bb-humanized-date\n          class=\"bb-stack__item bb-stack__item--push-right\"\n          [date]=\"hostRef.notification.createdOn\"\n          [displayRelativeTime]=\"hostRef.displayRelativeTime$ | async\"\n          data-role=\"notification-list-item-creation-date\"\n          [dateFormat]=\"dateFormat\"\n        ></bb-humanized-date>\n      </div>\n      <bb-ellipsis-ui\n        data-role=\"notifications-list-item-content\"\n        aria-hidden=\"true\"\n        class=\"bb-notifications-badge-list-item__content bb-text-align-left bb-stack bb-block bb-block--sm\"\n        [tooltipTriggers]=\"''\"\n        [lineClamp]=\"notificationsMessageLineAmount\"\n      >\n        <div\n          #notificationMessage\n          [innerHTML]=\"\n            hostRef.notification | notificationLocalization: 'message' | interpolateLink: hostRef.notification:false\n          \"\n        ></div>\n      </bb-ellipsis-ui>\n      <button\n        type=\"button\"\n        data-role=\"notifications-list-item-show-more-button\"\n        *ngIf=\"hostRef.displayShowMoreButtonInBadge$ | async\"\n        class=\"btn-link-text bb-text-bold bb-block bb-block--sm\"\n        (click)=\"hostRef.openNotificationDetails($event)\"\n        aria-label=\"See more notification details\"\n        i18n=\"Notification badge See more button@@notifications.list.see-more.button\"\n        i18n-aria-label=\"Aria-label for See more button@@notifications.list.see-more.button.aria-label\"\n      >\n        <span>See more</span>\n      </button>\n      <bb-notifications-capability-icon\n        aria-hidden=\"true\"\n        [origin]=\"hostRef.notification?.origin\"\n      ></bb-notifications-capability-icon>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace$1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace.EllipsisComponent; }), selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }, { type: i0__namespace.forwardRef(function () { return HumanizedDateComponent; }), selector: "bb-humanized-date", inputs: ["dateFormat", "displayRelativeTime", "date"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.NotificationsCapabilityIconComponent; }), selector: "bb-notifications-capability-icon", inputs: ["origin"] }], directives: [{ type: i0__namespace.forwardRef(function () { return NotificationListItemCustomizableDirective; }), selector: "[bbNotificationsListItemCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i14__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i14__namespace.AsyncPipe; }), "notificationLocalization": i0__namespace.forwardRef(function () { return i5__namespace.ӨNotificationLocalizationPipe; }), "interpolateLink": i0__namespace.forwardRef(function () { return i5__namespace.ӨInterpolateLinkPipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsListItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-notifications-list-item',
                        templateUrl: './notifications-list-item.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: WidgetPropertiesService }]; }, propDecorators: { notification: [{
                    type: i0.Input
                }], dateFormat: [{
                    type: i0.Input
                }], openDetails: [{
                    type: i0.Output
                }] } });
    var NotificationListItemCustomizableDirective = /** @class */ (function (_super) {
        __extends(NotificationListItemCustomizableDirective, _super);
        function NotificationListItemCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NotificationListItemCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ NotificationListItemCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationListItemCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ NotificationListItemCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: NotificationListItemCustomizableDirective, selector: "[bbNotificationsListItemCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationListItemCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbNotificationsListItemCustomizable]',
                    }]
            }] });

    var NotificationDetailsItemComponent = /** @class */ (function () {
        function NotificationDetailsItemComponent(properties) {
            this.properties = properties;
            /**
             * Notifications severity map
             */
            this.levelMap = severityLevelIconMap;
            /**
             * Stream of a flag that defines if we should display relative time for today.
             */
            this.displayRelativeTime$ = this.properties.displayRelativeTime$;
        }
        Object.defineProperty(NotificationDetailsItemComponent.prototype, "icon", {
            /**
             * Getter for icon name from severity level icon map due to level of notification.
             */
            get: function () {
                return this.levelMap[this.notification.level].icon;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NotificationDetailsItemComponent.prototype, "color", {
            /**
             * Getter for icon color from severity level icon map due to level of notification.
             */
            get: function () {
                return this.levelMap[this.notification.level].color;
            },
            enumerable: false,
            configurable: true
        });
        return NotificationDetailsItemComponent;
    }());
    /** @nocollapse */ NotificationDetailsItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationDetailsItemComponent, deps: [{ token: WidgetPropertiesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ NotificationDetailsItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: NotificationDetailsItemComponent, selector: "bb-notification-details-item", inputs: { notification: "notification", dateFormat: "dateFormat" }, ngImport: i0__namespace, template: "<ng-container bbNotificationDetailsItemCustomizable [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbNotificationDetailsItemCustomizable let-hostRef>\n  <div class=\"bb-notification bb-notification--flush\">\n    <bb-icon-ui\n      class=\"bb-notification__icon\"\n      [name]=\"hostRef.icon\"\n      [color]=\"hostRef.color\"\n      data-role=\"notification-details-icon\"\n    ></bb-icon-ui>\n    <div class=\"bb-notification__body\">\n      <div class=\"bb-notification__title bb-stack\">\n        <span\n          class=\"bb-stack__item break-word bb-text-default\"\n          data-role=\"notification-details-title\"\n          [innerHTML]=\"hostRef.notification | notificationLocalization: 'title'\"\n        ></span>\n        <bb-humanized-date\n          class=\"bb-stack__item bb-stack__item--push-right\"\n          [date]=\"hostRef.notification.createdOn\"\n          [displayRelativeTime]=\"hostRef.displayRelativeTime$ | async\"\n          [dateFormat]=\"dateFormat\"\n          data-role=\"notification-details-message\"\n        ></bb-humanized-date>\n      </div>\n      <div class=\"bb-stack bb-block bb-block--sm\">\n        <div\n          data-role=\"notification-details-message-text\"\n          class=\"break-word bb-text-align-left\"\n          [innerHTML]=\"\n            hostRef.notification | notificationLocalization: 'message' | interpolateLink: hostRef.notification\n          \"\n        ></div>\n      </div>\n      <bb-notifications-capability-icon [origin]=\"hostRef.notification?.origin\"></bb-notifications-capability-icon>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace$1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return HumanizedDateComponent; }), selector: "bb-humanized-date", inputs: ["dateFormat", "displayRelativeTime", "date"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.NotificationsCapabilityIconComponent; }), selector: "bb-notifications-capability-icon", inputs: ["origin"] }], directives: [{ type: i0__namespace.forwardRef(function () { return NotificationDetailsItemCustomizableDirective; }), selector: "[bbNotificationDetailsItemCustomizable]" }], pipes: { "notificationLocalization": i0__namespace.forwardRef(function () { return i5__namespace.ӨNotificationLocalizationPipe; }), "async": i0__namespace.forwardRef(function () { return i14__namespace.AsyncPipe; }), "interpolateLink": i0__namespace.forwardRef(function () { return i5__namespace.ӨInterpolateLinkPipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationDetailsItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-notification-details-item',
                        templateUrl: './notification-details-item.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: WidgetPropertiesService }]; }, propDecorators: { notification: [{
                    type: i0.Input
                }], dateFormat: [{
                    type: i0.Input
                }] } });
    var NotificationDetailsItemCustomizableDirective = /** @class */ (function (_super) {
        __extends(NotificationDetailsItemCustomizableDirective, _super);
        function NotificationDetailsItemCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NotificationDetailsItemCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ NotificationDetailsItemCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationDetailsItemCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ NotificationDetailsItemCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: NotificationDetailsItemCustomizableDirective, selector: "[bbNotificationDetailsItemCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationDetailsItemCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbNotificationDetailsItemCustomizable]',
                    }]
            }] });

    var NotificationDetailsComponent = /** @class */ (function () {
        function NotificationDetailsComponent() {
            /**
             * Event to navigate back to notifications list.
             */
            this.navigateBack = new i0.EventEmitter();
            /**
             * Event to delete notification.
             */
            this.delete = new i0.EventEmitter();
        }
        /**
         * Method to emit delete notification event.
         */
        NotificationDetailsComponent.prototype.deleteNotification = function () {
            this.delete.emit();
        };
        return NotificationDetailsComponent;
    }());
    /** @nocollapse */ NotificationDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationDetailsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ NotificationDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: NotificationDetailsComponent, selector: "bb-notification-details", inputs: { notification: "notification", dateFormat: "dateFormat" }, outputs: { navigateBack: "navigateBack", delete: "delete" }, ngImport: i0__namespace, template: "<ng-container bbNotificationDetailsCustomizable [bbHostRef]=\"this\"> </ng-container>\n\n<ng-template bbNotificationDetailsCustomizable let-hostRef>\n  <div role=\"dialog\" aria-modal=\"false\">\n    <div class=\"bb-card__header\">\n      <div class=\"bb-notifications-badge-widget__back-button bb-stack\">\n        <button\n          bbFocus\n          bbButton\n          color=\"link-text\"\n          class=\"bb-stack__item--push-left\"\n          data-role=\"notification-details-go-back-btn\"\n          (click)=\"hostRef.navigateBack.emit()\"\n        >\n          <bb-icon-ui name=\"arrow-back\" color=\"info\"></bb-icon-ui>\n          <span i18n=\"Notifications details Go back button@@notifications.details.go-back-button\">\n            Back to notifications\n          </span>\n        </button>\n        <button\n          bbButton\n          class=\"bb-stack__item--push-right\"\n          color=\"link\"\n          circle=\"true\"\n          aria-label=\"delete\"\n          i18n-aria-label=\"delete aria-label@@notifications.details.delete-button-aria-label\"\n          bbTooltip=\"Delete\"\n          container=\"body\"\n          i18n-bbTooltip=\"Delete|Button text to delete notification@@notifications.details.delete-button\"\n          triggers=\"hover\"\n          placement=\"top\"\n          data-role=\"notification-details-delete-btn\"\n          (click)=\"hostRef.deleteNotification()\"\n        >\n          <bb-icon-ui name=\"delete\" class=\"bb-text-support\"></bb-icon-ui>\n        </button>\n      </div>\n    </div>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-notification-details-item\n        [notification]=\"hostRef.notification\"\n        [dateFormat]=\"dateFormat\"\n      ></bb-notification-details-item>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace$1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return NotificationDetailsItemComponent; }), selector: "bb-notification-details-item", inputs: ["notification", "dateFormat"] }], directives: [{ type: i0__namespace.forwardRef(function () { return NotificationDetailsCustomizableDirective; }), selector: "[bbNotificationDetailsCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.FocusDirective; }), selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace$1.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-notification-details',
                        templateUrl: './notification-details.component.html',
                    }]
            }], propDecorators: { notification: [{
                    type: i0.Input
                }], dateFormat: [{
                    type: i0.Input
                }], navigateBack: [{
                    type: i0.Output
                }], delete: [{
                    type: i0.Output
                }] } });
    var NotificationDetailsCustomizableDirective = /** @class */ (function (_super) {
        __extends(NotificationDetailsCustomizableDirective, _super);
        function NotificationDetailsCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NotificationDetailsCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ NotificationDetailsCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationDetailsCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ NotificationDetailsCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: NotificationDetailsCustomizableDirective, selector: "[bbNotificationDetailsCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationDetailsCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbNotificationDetailsCustomizable]',
                    }]
            }] });

    var NOTIFICATIONS_BADGE_RELOAD_ON_NAVIGATE_EVENT = 'bb.event.notifications-badge.reload-on-navigate';
    var NotificationsListComponent = /** @class */ (function () {
        function NotificationsListComponent(routerService, notificationsPaginationService, notificationsPollingService, notificationService, showNotificationService, element, properties, pubSub) {
            var _this = this;
            this.routerService = routerService;
            this.notificationsPaginationService = notificationsPaginationService;
            this.notificationsPollingService = notificationsPollingService;
            this.notificationService = notificationService;
            this.showNotificationService = showNotificationService;
            this.element = element;
            this.properties = properties;
            this.pubSub = pubSub;
            /**
             * Navigation event.
             */
            this.navigation = new i0.EventEmitter();
            this.componentDestroyed$ = new rxjs.Subject();
            /**
             * Stream of routes available for navigation.
             */
            this.allowedRoutes$ = this.properties.allowedRoutes$;
            /**
             * Stream of a flag that defines if we should display settings button.
             */
            this.displaySettingsButton$ = this.properties.displaySettingsButton$;
            /**
             * Stream with notifications items.
             */
            this.notifications$ = this.notificationsPaginationService.notifications$.pipe(operators.takeUntil(this.componentDestroyed$), i5.shareReplayOnce());
            /**
             * Stream with error while loading of notifications.
             */
            this.error$ = this.notificationsPaginationService.error$;
            /**
             * Stream with error while loading of notifications.
             */
            this.updateCountersError$ = this.notificationsPollingService.updateCountersError$;
            /**
             * Mark as read request error stream which shows if request has failed.
             */
            this.markAllAsReadError$ = this.notificationService.markAllNotificationAsReadError;
            /**
             * Stream with flag if notifications is loading now or no.
             */
            this.isLoading$ = this.notificationsPaginationService.isLoading$;
            this.firstNewNotificationId$ = this.notifications$.pipe(operators.pairwise(), operators.map(function (_c) {
                var _d = __read(_c, 2), prevNotifications = _d[0], newNotifications = _d[1];
                var firstNewNotification = newNotifications[prevNotifications.length];
                // reset notification to the first page scenario
                if (prevNotifications.length >= newNotifications.length) {
                    firstNewNotification = newNotifications[0];
                }
                return firstNewNotification && firstNewNotification.id;
            }));
            this.notificationWasReadSubject = new rxjs.Subject();
            this.notificationWasRead$ = this.notificationWasReadSubject.asObservable();
            this.newNotificationsAvailableSubject = new rxjs.BehaviorSubject(false);
            this.updateCounters$ = this.newNotificationsAvailableSubject.pipe(operators.startWith(false), operators.filter(function (i) { return !i; }), operators.mapTo(true), i5.shareReplayOnce());
            /**
             * Stream with total count of notifications.
             */
            this.totalCount$ = this.updateCounters$.pipe(operators.switchMap(function () { return _this.notificationsPaginationService.totalCount$; }));
            /**
             * Stream with notifications about new notification available
             */
            this.newNotificationsAvailable$ = this.newNotificationsAvailableSubject.asObservable();
            /**
             * Stream with page size.
             */
            this.pageSize$ = this.notificationsPaginationService.sizeProperty$;
            /**
             * Stream with unread notifications count
             */
            this.unreadCount$ = this.updateCounters$.pipe(operators.switchMap(function () { return _this.notificationsPollingService.unreadNotificationsCount$.pipe(operators.switchMap(function (counter) { return _this.notificationWasRead$.pipe(operators.startWith(false), operators.map(function (read) {
                if (!read || !counter) {
                    return counter;
                }
                return --counter;
            })); })); }));
            /**
             * Steam with the starting page number.
             */
            this.pageFrom$ = this.notificationsPaginationService.pageFrom$;
        }
        Object.defineProperty(NotificationsListComponent.prototype, "preselectedNotification", {
            /**
             * Preselected notification
             */
            set: function (notification) {
                this.selectedNotification = notification;
            },
            enumerable: false,
            configurable: true
        });
        NotificationsListComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.firstNewNotificationId$
                .pipe(operators.filter(Boolean), operators.map(function (id) { return ".bb-nt-" + id; }), operators.observeOn(rxjs.asyncScheduler), operators.map(function (elemClass) { return _this.element.nativeElement.querySelector(elemClass); }), operators.filter(Boolean), operators.takeUntil(this.componentDestroyed$))
                .subscribe(function (elemScrollTo) {
                var _a;
                (_a = elemScrollTo.firstChild) === null || _a === void 0 ? void 0 : _a.focus();
                elemScrollTo.scrollIntoView({ behavior: 'smooth' });
            });
            this.notificationsPollingService.newNotificationsAvailable$
                .pipe(operators.takeUntil(this.componentDestroyed$))
                .subscribe(function (value) {
                _this.newNotificationsAvailableSubject.next(value);
            });
            this.onLoadNewNotifications();
        };
        NotificationsListComponent.prototype.ngOnDestroy = function () {
            this.componentDestroyed$.next();
            this.componentDestroyed$.complete();
        };
        /**
         * Method to mark all notifications as read.
         */
        NotificationsListComponent.prototype.onReadAllNotifications = function () {
            var _this = this;
            this.notificationService.markAllNotificationAsRead().subscribe(function () {
                _this.notificationsPaginationService.markAllAsRead(true);
            });
        };
        /**
         * Method to load new notifications by reloading of the first page.
         */
        NotificationsListComponent.prototype.onLoadNewNotifications = function () {
            var _this = this;
            this.notificationsPollingService.unreadNotificationsCount$
                .pipe(operators.skip(1), // skip stored value to wait for unread notifications count load occurred
            operators.first())
                .subscribe(function () {
                _this.newNotificationsAvailableSubject.next(false);
                _this.notificationsPaginationService.markAllAsRead(false);
                _this.notificationsPaginationService.loadPage(0);
            });
            this.notificationsPollingService.forceUpdateCounters();
        };
        /**
         * Method to load next notifications page.
         */
        NotificationsListComponent.prototype.onLoadMore = function (totalCount, $event) {
            var _this = this;
            var asyncNotifications$ = this.notifications$.pipe(operators.skipUntil(rxjs.of(undefined).pipe(operators.observeOn(rxjs.asyncScheduler))));
            var lastNotification$ = this.notifications$.pipe(operators.first(), operators.map(function (notifications) { return notifications[notifications.length - 1]; }), operators.map(function (_c) {
                var id = _c.id;
                return ".bb-nt-" + id + " [data-role=\"notifications-list-item\"]";
            }), operators.observeOn(rxjs.asyncScheduler), operators.map(function (selector) { return _this.element.nativeElement.querySelector(selector); }));
            this.notifications$.pipe(operators.first()).subscribe(function (data) {
                var createdOn = data[0].createdOn;
                _this.notificationsPaginationService.loadMore($event.from, createdOn);
            });
            rxjs.combineLatest([asyncNotifications$, rxjs.of(totalCount)])
                .pipe(operators.take(1), operators.filter(function (_c) {
                var _d = __read(_c, 2), notifications = _d[0], total = _d[1];
                return notifications.length >= total;
            }), operators.switchMap(function () { return lastNotification$; }))
                .subscribe(function (lastNotification) { return lastNotification.focus(); });
        };
        /**
         * Method to open notification settings.
         */
        NotificationsListComponent.prototype.onNotificationsSettingsOpen = function () {
            this.routerService.emitSettingsOpenedNavigation();
            this.navigation.emit();
        };
        /**
         * Method to show notification details view or to navigate to the notification routing URL if routing is enabled.
         */
        NotificationsListComponent.prototype.selectNotification = function (clickEvent, notification, openDetailsView) {
            var _this = this;
            clickEvent.preventDefault();
            this.allowedRoutes$.subscribe(function (routes) {
                var route = notification.routing && notification.routing['where-to'];
                if (!openDetailsView && notification.routing && routes.some(function (allowedRoute) { return route === allowedRoute; })) {
                    _this.pubSub.publish(NOTIFICATIONS_BADGE_RELOAD_ON_NAVIGATE_EVENT, undefined);
                    _this.routerService.emitNotificationRouting(notification.routing);
                    _this.navigation.emit();
                }
                else {
                    _this.selectedNotification = notification;
                    _this.saveRefToNotification(clickEvent);
                }
            });
            if (!notification.read) {
                this.notificationService.markNotificationAsRead(notification.id).subscribe(function () {
                    notification.read = true;
                    _this.notificationWasReadSubject.next(true);
                });
            }
        };
        /**
         * Method to delete notification.
         */
        NotificationsListComponent.prototype.deleteNotification = function () {
            var _this = this;
            if (this.selectedNotification) {
                this.notificationService
                    .deleteNotification(this.selectedNotification.id)
                    .pipe(operators.take(1), operators.tap(function () { return _this.notificationsPaginationService.loadPage(0); }))
                    .subscribe(function () {
                    _this.selectedNotification = undefined;
                }, function (error) {
                    _this.showNotificationService.showNotification({
                        header: _this.getErrorMessage(error),
                        modifier: 'error',
                        message: '',
                    });
                });
            }
        };
        /**
         * Method to unselect notification and return back focus position.
         */
        NotificationsListComponent.prototype.unselectNotification = function () {
            this.selectedNotification = undefined;
            this.restoreFocusOnNotification();
        };
        /**
         * Method to differentiate notifications by IDs.
         *
         * @param _index List item index
         * @param notification Notification list item
         * @returns Notification id
         */
        NotificationsListComponent.prototype.trackById = function (_index, notification) {
            return notification.id;
        };
        NotificationsListComponent.prototype.saveRefToNotification = function (notificationClickEvent) {
            this.lastSelectedNotificationItemButton = notificationClickEvent.target.closest('[data-role="notifications-list-item"]');
        };
        NotificationsListComponent.prototype.restoreFocusOnNotification = function () {
            var _this = this;
            setTimeout(function () {
                if (!_this.lastSelectedNotificationItemButton) {
                    return;
                }
                _this.lastSelectedNotificationItemButton.focus();
            }, 0);
        };
        NotificationsListComponent.prototype.getErrorMessage = function (error) {
            var _a, _b;
            return typeof error !== 'string'
                ? ((_b = (_a = error) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.message) || error.message || 'Unknown Error'
                : error;
        };
        return NotificationsListComponent;
    }());
    /** @nocollapse */ NotificationsListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsListComponent, deps: [{ token: NotificationsRouterService }, { token: NotificationsPaginationService }, { token: NotificationsPollingService }, { token: NotificationsDataService }, { token: i5__namespace$2.NotificationService }, { token: i0__namespace.ElementRef }, { token: WidgetPropertiesService }, { token: webSdk.PUBSUB }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ NotificationsListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: NotificationsListComponent, selector: "bb-notifications-list", inputs: { preselectedNotification: "preselectedNotification", dateFormat: "dateFormat" }, outputs: { navigation: "navigation" }, ngImport: i0__namespace, template: "<ng-container\n  bbNotificationsListCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    notifications: notifications$ | async,\n    error: error$ | async,\n    updateCountersError: updateCountersError$ | async,\n    isLoading: isLoading$ | async,\n    totalCount: totalCount$ | async,\n    pageSize: pageSize$ | async,\n    newNotificationsAvailable: newNotificationsAvailable$ | async,\n    unreadCount: unreadCount$ | async,\n    markAllAsReadError: markAllAsReadError$ | async,\n    pageFrom: pageFrom$ | async\n  }\"\n>\n</ng-container>\n\n<ng-template\n  bbNotificationsListCustomizable\n  let-hostRef\n  let-notifications=\"context.notifications\"\n  let-error=\"context.error\"\n  let-updateCountersError=\"context.updateCountersError\"\n  let-isLoading=\"context.isLoading\"\n  let-totalCount=\"context.totalCount\"\n  let-pageSize=\"context.pageSize\"\n  let-newNotificationsAvailable=\"context.newNotificationsAvailable\"\n  let-unreadCount=\"context.unreadCount\"\n  let-markAllAsReadError=\"context.markAllAsReadError\"\n  let-pageFrom=\"context.pageFrom\"\n>\n  <ng-container *ngIf=\"!hostRef.selectedNotification\">\n    <header data-role=\"notifications-list-header\" class=\"bb-card__header bb-stack\">\n      <span class=\"bb-stack__item\">\n        <span class=\"bb-heading-3\" i18n=\"Notifications modal label@@notifications.modalLabel\">Notifications</span>\n      </span>\n      <button\n        bbButton\n        *ngIf=\"hostRef.displaySettingsButton$ | async\"\n        class=\"bb-stack__item bb-stack__item--push-right\"\n        data-role=\"settings-button\"\n        color=\"link\"\n        circle=\"true\"\n        aria-label=\"Redirect to notification settings\"\n        i18n-aria-label=\"Aria-label for settings button@@notifications.notification-settings.aria-label\"\n        (click)=\"hostRef.onNotificationsSettingsOpen()\"\n      >\n        <bb-icon-ui class=\"text-dark\" name=\"settings\" size=\"md\"></bb-icon-ui>\n      </button>\n    </header>\n    <button\n      bbButton\n      *ngIf=\"newNotificationsAvailable\"\n      role=\"status\"\n      color=\"primary\"\n      [block]=\"true\"\n      i18n=\"Label for new notifications loading button@@notifications.new-notifications-available.button\"\n      aria-label=\"New Notification available. Click to refresh\"\n      i18n-aria-label=\"\n        Aria-label for new notifications loading button@@notifications.new-notifications-available.aria-label\"\n      class=\"bb-notifications-badge-widget__load-new-button\"\n      data-role=\"notifications-load-new-btn\"\n      (click)=\"hostRef.onLoadNewNotifications()\"\n    >\n      <span>New Notification available. Click to refresh</span>\n      <bb-icon-ui name=\"loading\" size=\"md\" cropped=\"true\"></bb-icon-ui>\n    </button>\n    <bb-alert-ui\n      *ngIf=\"markAllAsReadError\"\n      class=\"bb-notifications-badge-widget__alert\"\n      data-role=\"mark-all-read-error-alert\"\n      title=\"Error! Couldn\u2019t mark all as read.\"\n      i18n-title=\"Label for mark all as read error@@notifications.mark-all-read.alert.title\"\n      aria-label=\"Error! Couldn\u2019t mark all as read.\"\n      i18n-aria-label=\"Aria-label for mark all as read error@@notifications.mark-all-read.alert.aria-label\"\n      modifier=\"error\"\n      [dismissible]=\"false\"\n    >\n    </bb-alert-ui>\n    <div class=\"bb-notifications-badge-widget__all-read-button\" *ngIf=\"unreadCount > 0\">\n      <button\n        bbButton\n        data-role=\"mark-all-read-button\"\n        class=\"bb-subtitle\"\n        color=\"link-text\"\n        aria-label=\"Mark all notifcations as read\"\n        i18n-aria-label=\"Aria-label for mark all as read button@@notifications.mark-all-read.aria-label\"\n        (click)=\"hostRef.onReadAllNotifications()\"\n      >\n        <bb-icon-ui name=\"playlist-add-check\" size=\"md\" cropped=\"true\"></bb-icon-ui>\n        <span i18n=\"Label for mark all as read button@@notifications.mark-all-read.label\">Mark all as read</span>\n      </button>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"!error && !updateCountersError; else errorState\">\n    <ng-container *ngIf=\"notifications?.length; else emptyState\">\n      <div data-role=\"notifications-list-inner-wrapper\" [ngClass]=\"hostRef.selectedNotification ? 'd-none' : null\">\n        <p\n          aria-live=\"polite\"\n          class=\"sr-only\"\n          i18n=\"Label for new loaded notifications available@@notifications.new-loaded-notifications-available\"\n        >\n          { notifications.length, plural, =1 {new notification of {{ totalCount }}available} other {\n          {{ notifications.length }} new notifications of {{ totalCount }}available } }\n        </p>\n        <ul\n          tabindex=\"-1\"\n          class=\"bb-notifications-badge-widget__list bb-list bb-list--flush-lg\"\n          data-role=\"notifications-list-body\"\n        >\n          <li class=\"bb-list__item\" *ngFor=\"let notification of notifications; trackBy: hostRef.trackById\">\n            <bb-notifications-list-item\n              [notification]=\"notification\"\n              class=\"bb-nt-{{ notification.id }}\"\n              (keydown.enter)=\"hostRef.selectNotification($event, notification)\"\n              (keyup.space)=\"hostRef.selectNotification($event, notification)\"\n              (click)=\"hostRef.selectNotification($event, notification)\"\n              (openDetails)=\"hostRef.selectNotification($event, notification, true)\"\n              [dateFormat]=\"dateFormat\"\n            >\n            </bb-notifications-list-item>\n          </li>\n        </ul>\n\n        <footer class=\"bb-card__footer\">\n          <ng-container *ngIf=\"totalCount > pageSize\">\n            <div\n              *ngIf=\"notifications.length < totalCount; else LoadMoreDisabled\"\n              class=\"bb-button-bar bb-button-bar--center\"\n            >\n              <bb-load-button-ui\n                i18n=\"Load more button@@notifications.notification-list.load-more\"\n                class=\"bb-button-bar__button\"\n                color=\"link\"\n                [size]=\"pageSize\"\n                [from]=\"pageFrom\"\n                [totalCount]=\"totalCount\"\n                [isLoading]=\"isLoading\"\n                [block]=\"false\"\n                (paramChange)=\"hostRef.onLoadMore(totalCount, $event)\"\n              >\n                Load More\n              </bb-load-button-ui>\n            </div>\n            <ng-template #LoadMoreDisabled>\n              <div\n                data-role=\"notification-list-load-more-disabled-text\"\n                class=\"bb-subtitle bb-text-support bb-text-align-center\"\n                i18n=\"Load more disabled text@@notifications.notification-list.load-more-disabled\"\n              >\n                You\u2019ve reached the end of the list.\n              </div>\n            </ng-template>\n          </ng-container>\n        </footer>\n      </div>\n\n      <bb-notification-details\n        *ngIf=\"hostRef.selectedNotification\"\n        [notification]=\"hostRef.selectedNotification\"\n        (navigateBack)=\"hostRef.unselectNotification()\"\n        (delete)=\"hostRef.deleteNotification()\"\n        [dateFormat]=\"dateFormat\"\n      ></bb-notification-details>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #emptyState>\n    <div role=\"alert\" *ngIf=\"notifications && notifications.length === 0; else loadingState\">\n      <div class=\"bb-card__body\">\n        <bb-empty-state-ui\n          data-role=\"notifications-badge-empty-state\"\n          class=\"bb-state-container\"\n          i18n-title=\"Notifications empty state message title@@notifications.state.no-notifications.title\"\n          title=\"No Notifications\"\n          iconModifier=\"notifications-off\"\n          iconSize=\"xxl\"\n          i18n-subtitle=\"Notifications empty state message@@notifications.state.no-notifications.subtitle\"\n          subtitle=\"You don't have any notifications to be displayed\"\n        ></bb-empty-state-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #errorState>\n    <div role=\"alert\">\n      <div class=\"bb-card__body\">\n        <bb-empty-state-ui\n          data-role=\"notifications-badge-error-state\"\n          class=\"bb-state-container\"\n          iconSize=\"xxl\"\n          iconModifier=\"error-outline\"\n          title=\"Notifications couldn\u2019t load\"\n          i18n-title=\"Notifications are not loading title@@notifications.error-state.title\"\n          subtitle=\"Try to reload the page or contact the system administrator.\"\n          i18n-subtitle=\"Notifications are not loading subtitle@@notifications.error-state.subtitle\"\n        >\n        </bb-empty-state-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #loadingState>\n    <bb-loading-indicator-ui\n      loaderSize=\"md\"\n      text=\"Loading...\"\n      i18n-test=\"Loading title@@notifications.state.loading.title\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace$1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return NotificationsListItemComponent; }), selector: "bb-notifications-list-item", inputs: ["notification", "dateFormat"], outputs: ["openDetails"] }, { type: i0__namespace.forwardRef(function () { return i10__namespace.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0__namespace.forwardRef(function () { return NotificationDetailsComponent; }), selector: "bb-notification-details", inputs: ["notification", "dateFormat"], outputs: ["navigateBack", "delete"] }, { type: i0__namespace.forwardRef(function () { return i12__namespace.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0__namespace.forwardRef(function () { return i13__namespace.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0__namespace.forwardRef(function () { return NotificationsListCustomizableDirective; }), selector: "[bbNotificationsListCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i14__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i14__namespace.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0__namespace.forwardRef(function () { return i14__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i14__namespace.AsyncPipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-notifications-list',
                        templateUrl: './notifications-list.component.html',
                    }]
            }], ctorParameters: function () {
            return [{ type: NotificationsRouterService }, { type: NotificationsPaginationService }, { type: NotificationsPollingService }, { type: NotificationsDataService }, { type: i5__namespace$2.NotificationService }, { type: i0__namespace.ElementRef }, { type: WidgetPropertiesService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [webSdk.PUBSUB]
                        }] }];
        }, propDecorators: { navigation: [{
                    type: i0.Output
                }], preselectedNotification: [{
                    type: i0.Input
                }], dateFormat: [{
                    type: i0.Input
                }] } });
    var NotificationsListCustomizableDirective = /** @class */ (function (_super) {
        __extends(NotificationsListCustomizableDirective, _super);
        function NotificationsListCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NotificationsListCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ NotificationsListCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsListCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ NotificationsListCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: NotificationsListCustomizableDirective, selector: "[bbNotificationsListCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsListCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbNotificationsListCustomizable]',
                    }]
            }] });

    var BADGE_FORCE_UPDATE_DEBOUNCE_TIME = 800;
    /** @dynamic */
    var NotificationsBadgeWidgetComponent = /** @class */ (function () {
        function NotificationsBadgeWidgetComponent(notificationsPollingService, routerService, mediaQService, properties, pubSub, document) {
            var _this = this;
            this.notificationsPollingService = notificationsPollingService;
            this.routerService = routerService;
            this.mediaQService = mediaQService;
            this.properties = properties;
            this.pubSub = pubSub;
            this.document = document;
            this.preselectedNotification$$ = new rxjs.BehaviorSubject(undefined);
            /**
             * Stream of preselected notification.
             */
            this.preselectedNotification$ = this.preselectedNotification$$.asObservable();
            /**
             * Redirect to Notification Preferences on Settings button click emitter.
             */
            this.notificationsSettingsOpened = new i0.EventEmitter();
            /**
             * Navigation data emitter.
             */
            this.notificationRouting = new i0.EventEmitter();
            /**
             * Unique id html property for each component instance
             */
            this.id = "bb-notifications-badge-widget-" + NotificationsBadgeWidgetComponent.idCounter++;
            this.destroy$ = new rxjs.Subject();
            /**
             * Stream with count of unread notifications.
             */
            this.unreadCount$ = this.notificationsPollingService.unreadNotificationsCount$;
            /**
             * Stream that adjusts the layout to the screen size by applying different translateX values.
             */
            this.listTransform$ = this.mediaQService.isMediaBreakpointMatches('max-width', 'sm').pipe(operators.map(function (isMobileView) {
                if (isMobileView) {
                    var badge = _this.document.querySelector('.bb-notifications-badge-widget');
                    if (badge) {
                        var _a = badge.getBoundingClientRect(), badgeWidth = _a.width, left = _a.left;
                        var bodyWidth = _this.document.body.getBoundingClientRect().width;
                        return "translateX(" + (bodyWidth - left - badgeWidth) + "px)";
                    }
                }
                return undefined;
            }));
            this.origins$ = this.properties.origins$;
            this.severityLevels$ = this.properties.severityLevels$;
        }
        Object.defineProperty(NotificationsBadgeWidgetComponent.prototype, "preselectedNotification", {
            /**
             * Preselected notification.
             */
            set: function (notification) {
                if (!this.popover)
                    return;
                this.preselectedNotification$$.next(notification);
                if (!this.popover.isOpen() && notification) {
                    this.popover.open();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NotificationsBadgeWidgetComponent.prototype, "notificationsMessageLineAmountValue", {
            /**
             * Number of displayed lines in notification message.
             */
            // eslint-disable-next-line @angular-eslint/no-input-rename
            set: function (value) {
                if (value !== undefined) {
                    this.properties.setNotificationsMessageLineAmount(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NotificationsBadgeWidgetComponent.prototype, "displayRelativeTimeValue", {
            /**
             * Display time for today relative to the current point in time (time display format).
             */
            // eslint-disable-next-line @angular-eslint/no-input-rename
            set: function (value) {
                if (value !== undefined) {
                    this.properties.setDisplayRelativeTime(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NotificationsBadgeWidgetComponent.prototype, "displayShowMoreButtonInBadgeValue", {
            /**
             * Display See More button.
             */
            // eslint-disable-next-line @angular-eslint/no-input-rename
            set: function (value) {
                if (value !== undefined) {
                    this.properties.setDisplayShowMoreButtonInBadge(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NotificationsBadgeWidgetComponent.prototype, "allowedRoutesValue", {
            /**
             * String of allowed routes for navigation (conversation-view, arrangement-view, transaction-view, party-view, etc.).
             */
            // eslint-disable-next-line @angular-eslint/no-input-rename
            set: function (value) {
                if (value !== undefined) {
                    this.properties.setAllowedRoutes(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NotificationsBadgeWidgetComponent.prototype, "displaySettingsButtonValue", {
            /**
             * Display Settings button (button with the Gear icon that opens Notification Preferences).
             */
            // eslint-disable-next-line @angular-eslint/no-input-rename
            set: function (value) {
                if (value !== undefined) {
                    this.properties.setDisplaySettingsButton(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NotificationsBadgeWidgetComponent.prototype, "pageSizeValue", {
            /**
             * Limit of notifications per paginated request.
             */
            // eslint-disable-next-line @angular-eslint/no-input-rename
            set: function (value) {
                if (value !== undefined) {
                    this.properties.setPageSize(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NotificationsBadgeWidgetComponent.prototype, "originsValue", {
            /**
             * Comma-separated list of notifications origins to process (empty for all).
             */
            // eslint-disable-next-line @angular-eslint/no-input-rename
            set: function (value) {
                if (value !== undefined) {
                    this.properties.setOrigins(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NotificationsBadgeWidgetComponent.prototype, "severityLevelsValue", {
            /**
             * Comma-separated list of notifications severity levels to process (empty for all).
             */
            // eslint-disable-next-line @angular-eslint/no-input-rename
            set: function (value) {
                if (value !== undefined) {
                    this.properties.setSeverityLevels(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NotificationsBadgeWidgetComponent.prototype, "unreadCountUpdateIntervalValue", {
            /**
             * Interval to poll server for unread count (in seconds).
             */
            // eslint-disable-next-line @angular-eslint/no-input-rename
            set: function (value) {
                if (value !== undefined) {
                    this.properties.setUnreadCountUpdateInterval(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        NotificationsBadgeWidgetComponent.prototype.ngOnInit = function () {
            this.setupNavigationSubscriptions();
            this.setupBadgeUpdateSubscriptions();
        };
        NotificationsBadgeWidgetComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        /**
         * The method to clear the preselected notification value.
         *
         * @param isOpen Is notification badge open flag
         */
        NotificationsBadgeWidgetComponent.prototype.onOpenChange = function (isOpen) {
            if (!isOpen) {
                this.preselectedNotification$$.next(undefined);
            }
        };
        NotificationsBadgeWidgetComponent.prototype.setupNavigationSubscriptions = function () {
            this.routerService.settingsOpenedNavigation$
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(this.notificationsSettingsOpened);
            this.routerService.notificationRouting$.pipe(operators.takeUntil(this.destroy$)).subscribe(this.notificationRouting);
        };
        NotificationsBadgeWidgetComponent.prototype.setupBadgeUpdateSubscriptions = function () {
            var _this = this;
            var forceUpdateCounterHandler;
            var forceUpdateCounters$ = new rxjs.Subject();
            forceUpdateCounters$
                .pipe(operators.debounceTime(BADGE_FORCE_UPDATE_DEBOUNCE_TIME), operators.takeUntil(this.destroy$))
                .subscribe(function () { return _this.notificationsPollingService.forceUpdateCounters(); });
            rxjs.combineLatest([this.origins$, this.severityLevels$])
                .pipe(operators.first())
                .subscribe(function (_a) {
                var _b = __read(_a, 2), origins = _b[0], levels = _b[1];
                forceUpdateCounterHandler = function (payload) {
                    if (payload &&
                        (origins.length === 0 || (payload.origin && origins.includes(payload.origin))) &&
                        (levels.length === 0 || levels.includes(payload.level))) {
                        forceUpdateCounters$.next();
                    }
                };
                _this.pubSub.subscribe(i5.NOTIFICATIONS_BADGE_FORCE_UPDATE_EVENT, forceUpdateCounterHandler);
            });
            this.destroy$.subscribe(function () {
                _this.pubSub.unsubscribe(i5.NOTIFICATIONS_BADGE_FORCE_UPDATE_EVENT, forceUpdateCounterHandler);
            });
        };
        return NotificationsBadgeWidgetComponent;
    }());
    NotificationsBadgeWidgetComponent.idCounter = 0;
    /** @nocollapse */ NotificationsBadgeWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsBadgeWidgetComponent, deps: [{ token: NotificationsPollingService }, { token: NotificationsRouterService }, { token: i3__namespace$2.MediaQueryService }, { token: WidgetPropertiesService }, { token: webSdk.PUBSUB }, { token: i14.DOCUMENT }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ NotificationsBadgeWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: NotificationsBadgeWidgetComponent, selector: "bb-notifications-badge-widget", inputs: { preselectedNotification: "preselectedNotification", notificationsMessageLineAmountValue: ["notificationsMessageLineAmount", "notificationsMessageLineAmountValue"], displayRelativeTimeValue: ["displayRelativeTime", "displayRelativeTimeValue"], displayShowMoreButtonInBadgeValue: ["displayShowMoreButtonInBadge", "displayShowMoreButtonInBadgeValue"], allowedRoutesValue: ["allowedRoutes", "allowedRoutesValue"], displaySettingsButtonValue: ["displaySettingsButton", "displaySettingsButtonValue"], pageSizeValue: ["pageSize", "pageSizeValue"], originsValue: ["origins", "originsValue"], severityLevelsValue: ["severityLevels", "severityLevelsValue"], unreadCountUpdateIntervalValue: ["unreadCountUpdateInterval", "unreadCountUpdateIntervalValue"], dateFormat: "dateFormat" }, outputs: { notificationsSettingsOpened: "notificationsSettingsOpened", notificationRouting: "notificationRouting" }, providers: [
            NotificationsPaginationService,
            NotificationsDataService,
            NotificationsPollingService,
            NotificationsRouterService,
            WidgetPropertiesService,
            NotificationsPaginationService,
        ], viewQueries: [{ propertyName: "popover", first: true, predicate: ["popover"], descendants: true }], ngImport: i0__namespace, template: "<ng-container\n  bbNotificationsBadgeCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    unreadCount: unreadCount$ | async,\n    listTransform: listTransform$ | async\n  }\"\n>\n</ng-container>\n<ng-template\n  bbNotificationsBadgeCustomizable\n  let-hostRef\n  let-unreadCount=\"context.unreadCount\"\n  let-listTransform=\"context.listTransform\"\n>\n  <div class=\"bb-notifications-badge-widget\">\n    <div #popover=\"ngbDropdown\" ngbDropdown placement=\"bottom-right\" (openChange)=\"hostRef.onOpenChange($event)\">\n      <button\n        bbButton\n        [attr.aria-labelledby]=\"'notifications-badge-label' + hostRef.id\"\n        color=\"transparent\"\n        class=\"bb-notifications-badge-widget__dropdown-button\"\n        ngbDropdownToggle\n      >\n        <bb-icon-ui name=\"notifications\" color=\"secondary\" data-role=\"notifications-icon\" size=\"lg\"></bb-icon-ui>\n        <bb-badge-counter-ui\n          class=\"bb-notifications-badge-widget__dropdown-button-counter\"\n          [count]=\"unreadCount\"\n          maxCount=\"99\"\n          color=\"danger\"\n          data-role=\"notifications-unread-count\"\n        ></bb-badge-counter-ui>\n      </button>\n      <div\n        ngbDropdownMenu\n        class=\"bb-notifications-badge-widget__dropdown-menu dropdown-menu-unstyled\"\n        data-role=\"notifications-list-wrapper\"\n      >\n        <div\n          class=\"bb-notifications-badge-widget__dropdown-menu-list\"\n          data-role=\"notifications-dropdown-menu-list\"\n          [style.transform]=\"listTransform\"\n        >\n          <div class=\"bb-card bb-notifications-badge-widget__list-wrapper\">\n            <bb-notifications-list\n              *ngIf=\"popover.isOpen()\"\n              (navigation)=\"popover.close()\"\n              [preselectedNotification]=\"hostRef.preselectedNotification$ | async\"\n              [dateFormat]=\"dateFormat\"\n            ></bb-notifications-list>\n          </div>\n        </div>\n      </div>\n      <span\n        i18n=\"Notifications badge aria label@notifications.badge.aria-label\"\n        [attr.id]=\"'notifications-badge-label' + hostRef.id\"\n        aria-live=\"polite\"\n        aria-relevant=\"text\"\n        class=\"sr-only\"\n      >\n        { unreadCount || 0, plural, =0 { no new notifications } =1 { {{ unreadCount }} new notification} other {\n        {{ unreadCount }} new notifications } }\n      </span>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace$1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.BadgeCounterComponent; }), selector: "bb-badge-counter-ui", inputs: ["color", "count", "maxCount"] }, { type: i0__namespace.forwardRef(function () { return NotificationsListComponent; }), selector: "bb-notifications-list", inputs: ["preselectedNotification", "dateFormat"], outputs: ["navigation"] }], directives: [{ type: i0__namespace.forwardRef(function () { return NotificationsBadgeWidgetCustomizableDirective; }), selector: "[bbNotificationsBadgeCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.NgbDropdown; }), selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.NgbDropdownToggle; }), selector: "[ngbDropdownToggle]" }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.NgbDropdownMenu; }), selector: "[ngbDropdownMenu]" }, { type: i0__namespace.forwardRef(function () { return i14__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i14__namespace.AsyncPipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsBadgeWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-notifications-badge-widget',
                        templateUrl: './notifications-badge-widget.component.html',
                        providers: [
                            NotificationsPaginationService,
                            NotificationsDataService,
                            NotificationsPollingService,
                            NotificationsRouterService,
                            WidgetPropertiesService,
                            NotificationsPaginationService,
                        ],
                    }]
            }], ctorParameters: function () {
            return [{ type: NotificationsPollingService }, { type: NotificationsRouterService }, { type: i3__namespace$2.MediaQueryService }, { type: WidgetPropertiesService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [webSdk.PUBSUB]
                        }] }, { type: Document, decorators: [{
                            type: i0.Inject,
                            args: [i14.DOCUMENT]
                        }] }];
        }, propDecorators: { preselectedNotification: [{
                    type: i0.Input
                }], notificationsMessageLineAmountValue: [{
                    type: i0.Input,
                    args: ['notificationsMessageLineAmount']
                }], displayRelativeTimeValue: [{
                    type: i0.Input,
                    args: ['displayRelativeTime']
                }], displayShowMoreButtonInBadgeValue: [{
                    type: i0.Input,
                    args: ['displayShowMoreButtonInBadge']
                }], allowedRoutesValue: [{
                    type: i0.Input,
                    args: ['allowedRoutes']
                }], displaySettingsButtonValue: [{
                    type: i0.Input,
                    args: ['displaySettingsButton']
                }], pageSizeValue: [{
                    type: i0.Input,
                    args: ['pageSize']
                }], originsValue: [{
                    type: i0.Input,
                    args: ['origins']
                }], severityLevelsValue: [{
                    type: i0.Input,
                    args: ['severityLevels']
                }], unreadCountUpdateIntervalValue: [{
                    type: i0.Input,
                    args: ['unreadCountUpdateInterval']
                }], dateFormat: [{
                    type: i0.Input
                }], notificationsSettingsOpened: [{
                    type: i0.Output
                }], notificationRouting: [{
                    type: i0.Output
                }], popover: [{
                    type: i0.ViewChild,
                    args: ['popover']
                }] } });
    var NotificationsBadgeWidgetCustomizableDirective = /** @class */ (function (_super) {
        __extends(NotificationsBadgeWidgetCustomizableDirective, _super);
        function NotificationsBadgeWidgetCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NotificationsBadgeWidgetCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ NotificationsBadgeWidgetCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsBadgeWidgetCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ NotificationsBadgeWidgetCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: NotificationsBadgeWidgetCustomizableDirective, selector: "[bbNotificationsBadgeCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsBadgeWidgetCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbNotificationsBadgeCustomizable]',
                    }]
            }] });

    var HumanizedDateModule = /** @class */ (function () {
        function HumanizedDateModule() {
        }
        return HumanizedDateModule;
    }());
    /** @nocollapse */ HumanizedDateModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HumanizedDateModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ HumanizedDateModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HumanizedDateModule, declarations: [HumanizedDateComponent, HumanizedDateCustomizableDirective], imports: [i14.CommonModule, i2.BbDatePipeModule], exports: [HumanizedDateComponent, HumanizedDateCustomizableDirective] });
    /** @nocollapse */ HumanizedDateModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HumanizedDateModule, imports: [[i14.CommonModule, i2.BbDatePipeModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HumanizedDateModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i14.CommonModule, i2.BbDatePipeModule],
                        declarations: [HumanizedDateComponent, HumanizedDateCustomizableDirective],
                        exports: [HumanizedDateComponent, HumanizedDateCustomizableDirective],
                    }]
            }] });

    var uiModules$3 = [i2.BbDatePipeModule, i3.EllipsisModule];
    var innerModules$3 = [HumanizedDateModule];
    var components$3 = [NotificationsListItemComponent, NotificationListItemCustomizableDirective];
    var NotificationsListItemModule = /** @class */ (function () {
        function NotificationsListItemModule() {
        }
        return NotificationsListItemModule;
    }());
    /** @nocollapse */ NotificationsListItemModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsListItemModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ NotificationsListItemModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsListItemModule, declarations: [NotificationsListItemComponent, NotificationListItemCustomizableDirective], imports: [i14.CommonModule, i5.NotificationsCommonModule, i2.BbDatePipeModule, i3.EllipsisModule, HumanizedDateModule], exports: [i5.NotificationsCommonModule, i2.BbDatePipeModule, i3.EllipsisModule, HumanizedDateModule, NotificationsListItemComponent, NotificationListItemCustomizableDirective] });
    /** @nocollapse */ NotificationsListItemModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsListItemModule, imports: [__spreadArray(__spreadArray([i14.CommonModule, i5.NotificationsCommonModule], __read(uiModules$3)), __read(innerModules$3)), i5.NotificationsCommonModule, i2.BbDatePipeModule, i3.EllipsisModule, HumanizedDateModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsListItemModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray(__spreadArray([i14.CommonModule, i5.NotificationsCommonModule], __read(uiModules$3)), __read(innerModules$3)),
                        declarations: __spreadArray([], __read(components$3)),
                        exports: __spreadArray(__spreadArray(__spreadArray([i5.NotificationsCommonModule], __read(uiModules$3)), __read(innerModules$3)), __read(components$3)),
                    }]
            }] });

    var uiModules$2 = [i3$1.ButtonModule, i4.FocusModule, i3.EllipsisModule, i5$1.TooltipModule];
    var innerModules$2 = [HumanizedDateModule];
    var components$2 = [
        NotificationDetailsComponent,
        NotificationDetailsCustomizableDirective,
        NotificationDetailsItemComponent,
        NotificationDetailsItemCustomizableDirective,
    ];
    var NotificationDetailsModule = /** @class */ (function () {
        function NotificationDetailsModule() {
        }
        return NotificationDetailsModule;
    }());
    /** @nocollapse */ NotificationDetailsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationDetailsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ NotificationDetailsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationDetailsModule, declarations: [NotificationDetailsComponent,
            NotificationDetailsCustomizableDirective,
            NotificationDetailsItemComponent,
            NotificationDetailsItemCustomizableDirective], imports: [i14.CommonModule, i5.NotificationsCommonModule, i3$1.ButtonModule, i4.FocusModule, i3.EllipsisModule, i5$1.TooltipModule, HumanizedDateModule], exports: [i5.NotificationsCommonModule, i3$1.ButtonModule, i4.FocusModule, i3.EllipsisModule, i5$1.TooltipModule, HumanizedDateModule, NotificationDetailsComponent,
            NotificationDetailsCustomizableDirective,
            NotificationDetailsItemComponent,
            NotificationDetailsItemCustomizableDirective] });
    /** @nocollapse */ NotificationDetailsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationDetailsModule, imports: [__spreadArray(__spreadArray([i14.CommonModule, i5.NotificationsCommonModule], __read(uiModules$2)), __read(innerModules$2)), i5.NotificationsCommonModule, i3$1.ButtonModule, i4.FocusModule, i3.EllipsisModule, i5$1.TooltipModule, HumanizedDateModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationDetailsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray(__spreadArray([i14.CommonModule, i5.NotificationsCommonModule], __read(uiModules$2)), __read(innerModules$2)),
                        declarations: __spreadArray([], __read(components$2)),
                        exports: __spreadArray(__spreadArray(__spreadArray([i5.NotificationsCommonModule], __read(uiModules$2)), __read(innerModules$2)), __read(components$2)),
                    }]
            }] });

    var uiModules$1 = [
        i12.EmptyStateModule,
        commonErrorState.ErrorCommonStateModule,
        i10.LoadButtonModule,
        i13.LoadingIndicatorModule,
        i3$1.ButtonModule,
        i8.AlertModule,
    ];
    var innerModules$1 = [NotificationsListItemModule, NotificationDetailsModule];
    var components$1 = [NotificationsListComponent, NotificationsListCustomizableDirective];
    var NotificationsListModule = /** @class */ (function () {
        function NotificationsListModule() {
        }
        return NotificationsListModule;
    }());
    /** @nocollapse */ NotificationsListModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsListModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ NotificationsListModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsListModule, declarations: [NotificationsListComponent, NotificationsListCustomizableDirective], imports: [i14.CommonModule, i12.EmptyStateModule,
            commonErrorState.ErrorCommonStateModule,
            i10.LoadButtonModule,
            i13.LoadingIndicatorModule,
            i3$1.ButtonModule,
            i8.AlertModule, NotificationsListItemModule, NotificationDetailsModule], exports: [i12.EmptyStateModule,
            commonErrorState.ErrorCommonStateModule,
            i10.LoadButtonModule,
            i13.LoadingIndicatorModule,
            i3$1.ButtonModule,
            i8.AlertModule, NotificationsListItemModule, NotificationDetailsModule, NotificationsListComponent, NotificationsListCustomizableDirective] });
    /** @nocollapse */ NotificationsListModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsListModule, imports: [__spreadArray(__spreadArray([i14.CommonModule], __read(uiModules$1)), __read(innerModules$1)), i12.EmptyStateModule,
            commonErrorState.ErrorCommonStateModule,
            i10.LoadButtonModule,
            i13.LoadingIndicatorModule,
            i3$1.ButtonModule,
            i8.AlertModule, NotificationsListItemModule, NotificationDetailsModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsListModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray(__spreadArray([i14.CommonModule], __read(uiModules$1)), __read(innerModules$1)),
                        declarations: __spreadArray([], __read(components$1)),
                        exports: __spreadArray(__spreadArray(__spreadArray([], __read(uiModules$1)), __read(innerModules$1)), __read(components$1)),
                    }]
            }] });

    var uiModules = [badge.BadgeModule, i3$1.ButtonModule, i2$1.IconModule, i8$1.NgbDropdownModule, i6.BadgeCounterModule, i3$2.MediaQueryModule];
    var innerModules = [NotificationsListItemModule, NotificationsListModule];
    var components = [NotificationsBadgeWidgetComponent, NotificationsBadgeWidgetCustomizableDirective];
    var NotificationsBadgeWidgetModule = /** @class */ (function () {
        function NotificationsBadgeWidgetModule() {
        }
        return NotificationsBadgeWidgetModule;
    }());
    /** @nocollapse */ NotificationsBadgeWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsBadgeWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ NotificationsBadgeWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsBadgeWidgetModule, declarations: [NotificationsBadgeWidgetComponent, NotificationsBadgeWidgetCustomizableDirective], imports: [i14.CommonModule, i1__namespace.BackbaseCoreModule, badge.BadgeModule, i3$1.ButtonModule, i2$1.IconModule, i8$1.NgbDropdownModule, i6.BadgeCounterModule, i3$2.MediaQueryModule, NotificationsListItemModule, NotificationsListModule], exports: [badge.BadgeModule, i3$1.ButtonModule, i2$1.IconModule, i8$1.NgbDropdownModule, i6.BadgeCounterModule, i3$2.MediaQueryModule, NotificationsListItemModule, NotificationsListModule, NotificationsBadgeWidgetComponent, NotificationsBadgeWidgetCustomizableDirective] });
    /** @nocollapse */ NotificationsBadgeWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsBadgeWidgetModule, imports: [__spreadArray(__spreadArray([
                i14.CommonModule,
                i1.BackbaseCoreModule.withConfig({
                    classMap: { NotificationsBadgeWidgetComponent: NotificationsBadgeWidgetComponent },
                })
            ], __read(uiModules)), __read(innerModules)), badge.BadgeModule, i3$1.ButtonModule, i2$1.IconModule, i8$1.NgbDropdownModule, i6.BadgeCounterModule, i3$2.MediaQueryModule, NotificationsListItemModule, NotificationsListModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NotificationsBadgeWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray(__spreadArray([
                            i14.CommonModule,
                            i1.BackbaseCoreModule.withConfig({
                                classMap: { NotificationsBadgeWidgetComponent: NotificationsBadgeWidgetComponent },
                            })
                        ], __read(uiModules)), __read(innerModules)),
                        declarations: __spreadArray([], __read(components)),
                        exports: __spreadArray(__spreadArray(__spreadArray([], __read(uiModules)), __read(innerModules)), __read(components)),
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.BADGE_FORCE_UPDATE_DEBOUNCE_TIME = BADGE_FORCE_UPDATE_DEBOUNCE_TIME;
    exports.HumanizedDateComponent = HumanizedDateComponent;
    exports.HumanizedDateCustomizableDirective = HumanizedDateCustomizableDirective;
    exports.NOTIFICATIONS_BADGE_RELOAD_ON_NAVIGATE_EVENT = NOTIFICATIONS_BADGE_RELOAD_ON_NAVIGATE_EVENT;
    exports.NotificationDetailsComponent = NotificationDetailsComponent;
    exports.NotificationDetailsCustomizableDirective = NotificationDetailsCustomizableDirective;
    exports.NotificationDetailsItemComponent = NotificationDetailsItemComponent;
    exports.NotificationDetailsItemCustomizableDirective = NotificationDetailsItemCustomizableDirective;
    exports.NotificationListItemCustomizableDirective = NotificationListItemCustomizableDirective;
    exports.NotificationsBadgeWidgetComponent = NotificationsBadgeWidgetComponent;
    exports.NotificationsBadgeWidgetCustomizableDirective = NotificationsBadgeWidgetCustomizableDirective;
    exports.NotificationsBadgeWidgetModule = NotificationsBadgeWidgetModule;
    exports.NotificationsListComponent = NotificationsListComponent;
    exports.NotificationsListCustomizableDirective = NotificationsListCustomizableDirective;
    exports.NotificationsListItemComponent = NotificationsListItemComponent;
    exports.NotificationsPaginationService = NotificationsPaginationService;
    exports.NotificationsPollingService = NotificationsPollingService;
    exports.WidgetPropertiesService = WidgetPropertiesService;
    exports["ӨHumanizedDateModule"] = HumanizedDateModule;
    exports["ӨNotificationDetailsModule"] = NotificationDetailsModule;
    exports["ӨNotificationsListItemModule"] = NotificationsListItemModule;
    exports["ӨNotificationsListModule"] = NotificationsListModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-notifications-badge-widget-ang.umd.js.map
