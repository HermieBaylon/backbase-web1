import { NgZone } from '@angular/core';
import { NotificationsHttpService } from '@backbase/data-ang/notifications';
import { Observable } from 'rxjs';
import { WidgetPropertiesService } from './widget-properties.service';
import { HttpErrorResponse } from '@angular/common/http';
import * as i0 from "@angular/core";
export declare class NotificationsPollingService {
    private readonly notificationHttpService;
    private readonly properties;
    private readonly ngZone;
    private readonly forceUpdateCountersSubject;
    private readonly requestsInterval$;
    private readonly repeat$;
    private readonly load$;
    private readonly updateCountersErrorSubject$$;
    /**
     * Stream with update counters request errors
     */
    readonly updateCountersError$: Observable<HttpErrorResponse | undefined>;
    /**
     * Stream with unread notifications count
     */
    readonly unreadNotificationsCount$: Observable<number | undefined>;
    /**
     * Stream with flag of new available notifications
     */
    readonly newNotificationsAvailable$: Observable<boolean>;
    private requestCount;
    constructor(notificationHttpService: NotificationsHttpService, properties: WidgetPropertiesService, ngZone: NgZone);
    /**
     * Method to trigger force update on unread notifications counter
     */
    forceUpdateCounters(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NotificationsPollingService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NotificationsPollingService>;
}
