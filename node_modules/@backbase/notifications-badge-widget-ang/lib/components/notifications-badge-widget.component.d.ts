import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { NotificationsPollingService } from '../services/notifications-polling.service';
import { NotificationsRouterService } from '../services/notifications-router.service';
import { Observable } from 'rxjs';
import { Pubsub } from '@backbase/foundation-ang/web-sdk';
import { NotificationItem, NotificationRouting } from '@backbase/notifications-common-ang';
import { MediaQueryService } from '@backbase/ui-ang/media-query-lib';
import { NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { WidgetPropertiesService } from '../services/widget-properties.service';
import * as i0 from "@angular/core";
export declare const BADGE_FORCE_UPDATE_DEBOUNCE_TIME = 800;
/** @dynamic */
export declare class NotificationsBadgeWidgetComponent implements OnDestroy, OnInit {
    private readonly notificationsPollingService;
    private readonly routerService;
    private readonly mediaQService;
    private readonly properties;
    private readonly pubSub;
    private readonly document;
    static idCounter: number;
    private readonly preselectedNotification$$;
    /**
     * Stream of preselected notification.
     */
    readonly preselectedNotification$: Observable<NotificationItem | undefined>;
    /**
     * Preselected notification.
     */
    set preselectedNotification(notification: NotificationItem | undefined);
    /**
     * Number of displayed lines in notification message.
     */
    set notificationsMessageLineAmountValue(value: string | number);
    /**
     * Display time for today relative to the current point in time (time display format).
     */
    set displayRelativeTimeValue(value: string | boolean);
    /**
     * Display See More button.
     */
    set displayShowMoreButtonInBadgeValue(value: string | boolean);
    /**
     * String of allowed routes for navigation (conversation-view, arrangement-view, transaction-view, party-view, etc.).
     */
    set allowedRoutesValue(value: string);
    /**
     * Display Settings button (button with the Gear icon that opens Notification Preferences).
     */
    set displaySettingsButtonValue(value: string | boolean);
    /**
     * Limit of notifications per paginated request.
     */
    set pageSizeValue(value: string | number);
    /**
     * Comma-separated list of notifications origins to process (empty for all).
     */
    set originsValue(value: string);
    /**
     * Comma-separated list of notifications severity levels to process (empty for all).
     */
    set severityLevelsValue(value: string);
    /**
     * Interval to poll server for unread count (in seconds).
     */
    set unreadCountUpdateIntervalValue(value: string | number);
    /**
     * Format to display date in past
     */
    dateFormat: string | undefined;
    /**
     * Redirect to Notification Preferences on Settings button click emitter.
     */
    notificationsSettingsOpened: EventEmitter<void>;
    /**
     * Navigation data emitter.
     */
    notificationRouting: EventEmitter<NotificationRouting>;
    /**
     * Unique id html property for each component instance
     */
    readonly id: string;
    private readonly destroy$;
    /**
     * Stream with count of unread notifications.
     */
    readonly unreadCount$: Observable<number | undefined>;
    /**
     * Stream that adjusts the layout to the screen size by applying different translateX values.
     */
    readonly listTransform$: Observable<string | undefined>;
    private readonly origins$;
    private readonly severityLevels$;
    /**
     * Notification badge dropdown
     */
    readonly popover: NgbDropdown | undefined;
    constructor(notificationsPollingService: NotificationsPollingService, routerService: NotificationsRouterService, mediaQService: MediaQueryService, properties: WidgetPropertiesService, pubSub: Pubsub, document: Document);
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * The method to clear the preselected notification value.
     *
     * @param isOpen Is notification badge open flag
     */
    onOpenChange(isOpen: boolean): void;
    private setupNavigationSubscriptions;
    private setupBadgeUpdateSubscriptions;
    static ɵfac: i0.ɵɵFactoryDeclaration<NotificationsBadgeWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NotificationsBadgeWidgetComponent, "bb-notifications-badge-widget", never, { "preselectedNotification": "preselectedNotification"; "notificationsMessageLineAmountValue": "notificationsMessageLineAmount"; "displayRelativeTimeValue": "displayRelativeTime"; "displayShowMoreButtonInBadgeValue": "displayShowMoreButtonInBadge"; "allowedRoutesValue": "allowedRoutes"; "displaySettingsButtonValue": "displaySettingsButton"; "pageSizeValue": "pageSize"; "originsValue": "origins"; "severityLevelsValue": "severityLevels"; "unreadCountUpdateIntervalValue": "unreadCountUpdateInterval"; "dateFormat": "dateFormat"; }, { "notificationsSettingsOpened": "notificationsSettingsOpened"; "notificationRouting": "notificationRouting"; }, never, never>;
}
export declare class NotificationsBadgeWidgetCustomizableDirective extends BbTemplate<NotificationsBadgeWidgetComponent, {
    unreadCount: number;
    listTransform?: string;
}> {
    static ɵfac: i0.ɵɵFactoryDeclaration<NotificationsBadgeWidgetCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NotificationsBadgeWidgetCustomizableDirective, "[bbNotificationsBadgeCustomizable]", never, {}, {}, never>;
}
