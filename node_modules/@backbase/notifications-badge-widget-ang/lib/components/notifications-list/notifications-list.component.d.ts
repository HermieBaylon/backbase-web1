import { ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { HttpErrorResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { NotificationItem, NotificationStreamItem } from '@backbase/notifications-common-ang';
import { NotificationService } from '@backbase/ui-ang/notification';
import { Pubsub } from '@backbase/foundation-ang/web-sdk';
import { NotificationsPaginationService } from '../../services/notifications-pagination.service';
import { NotificationsPollingService } from '../../services/notifications-polling.service';
import { NotificationsDataService } from '../../services/notifications-data.service';
import { NotificationsRouterService } from '../../services/notifications-router.service';
import { WidgetPropertiesService } from '../../services/widget-properties.service';
import * as i0 from "@angular/core";
export declare const NOTIFICATIONS_BADGE_RELOAD_ON_NAVIGATE_EVENT = "bb.event.notifications-badge.reload-on-navigate";
export declare class NotificationsListComponent implements OnInit, OnDestroy {
    private readonly routerService;
    private readonly notificationsPaginationService;
    private readonly notificationsPollingService;
    private readonly notificationService;
    private readonly showNotificationService;
    private readonly element;
    private readonly properties;
    private readonly pubSub;
    /**
     * Navigation event.
     */
    navigation: EventEmitter<void>;
    /**
     * Preselected notification
     */
    set preselectedNotification(notification: NotificationItem | undefined);
    /**
     * Format to display date in past
     */
    dateFormat: string | undefined;
    private readonly componentDestroyed$;
    /**
     * Stream of routes available for navigation.
     */
    readonly allowedRoutes$: Observable<string[]>;
    /**
     * Stream of a flag that defines if we should display settings button.
     */
    readonly displaySettingsButton$: Observable<boolean>;
    constructor(routerService: NotificationsRouterService, notificationsPaginationService: NotificationsPaginationService, notificationsPollingService: NotificationsPollingService, notificationService: NotificationsDataService, showNotificationService: NotificationService, element: ElementRef, properties: WidgetPropertiesService, pubSub: Pubsub);
    /**
     * Stream with notifications items.
     */
    readonly notifications$: Observable<NotificationStreamItem[]>;
    /**
     * Stream with error while loading of notifications.
     */
    readonly error$: Observable<any>;
    /**
     * Stream with error while loading of notifications.
     */
    readonly updateCountersError$: Observable<HttpErrorResponse | undefined>;
    /**
     * Mark as read request error stream which shows if request has failed.
     */
    readonly markAllAsReadError$: Observable<boolean>;
    /**
     * Stream with flag if notifications is loading now or no.
     */
    readonly isLoading$: Observable<boolean>;
    private readonly firstNewNotificationId$;
    private readonly notificationWasReadSubject;
    private readonly notificationWasRead$;
    private readonly newNotificationsAvailableSubject;
    private readonly updateCounters$;
    /**
     * Stream with total count of notifications.
     */
    readonly totalCount$: Observable<number>;
    /**
     * Stream with notifications about new notification available
     */
    readonly newNotificationsAvailable$: Observable<boolean>;
    /**
     * Stream with page size.
     */
    readonly pageSize$: Observable<number>;
    /**
     * Stream with unread notifications count
     */
    readonly unreadCount$: Observable<number | undefined>;
    private lastSelectedNotificationItemButton;
    /**
     * Steam with the starting page number.
     */
    readonly pageFrom$: Observable<number>;
    /**
     * Notification item that is shown in notification details now.
     */
    selectedNotification: NotificationItem | undefined;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * Method to mark all notifications as read.
     */
    onReadAllNotifications(): void;
    /**
     * Method to load new notifications by reloading of the first page.
     */
    onLoadNewNotifications(): void;
    /**
     * Method to load next notifications page.
     */
    onLoadMore(totalCount: number, $event: {
        from: number;
    }): void;
    /**
     * Method to open notification settings.
     */
    onNotificationsSettingsOpen(): void;
    /**
     * Method to show notification details view or to navigate to the notification routing URL if routing is enabled.
     */
    selectNotification(clickEvent: Event, notification: NotificationItem, openDetailsView?: boolean): void;
    /**
     * Method to delete notification.
     */
    deleteNotification(): void;
    /**
     * Method to unselect notification and return back focus position.
     */
    unselectNotification(): void;
    /**
     * Method to differentiate notifications by IDs.
     *
     * @param _index List item index
     * @param notification Notification list item
     * @returns Notification id
     */
    trackById(_index: number, notification: NotificationItem): string;
    private saveRefToNotification;
    private restoreFocusOnNotification;
    private getErrorMessage;
    static ɵfac: i0.ɵɵFactoryDeclaration<NotificationsListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NotificationsListComponent, "bb-notifications-list", never, { "preselectedNotification": "preselectedNotification"; "dateFormat": "dateFormat"; }, { "navigation": "navigation"; }, never, never>;
}
export declare class NotificationsListCustomizableDirective extends BbTemplate<NotificationsListComponent, {
    notifications: NotificationItem[];
    error: any;
    updateCountersError: HttpErrorResponse | undefined;
    isLoading: boolean;
    totalCount: number;
    pageSize: number;
    newNotificationsAvailable: boolean;
    unreadCount: number;
    markAllAsReadError: boolean;
}> {
    static ɵfac: i0.ɵɵFactoryDeclaration<NotificationsListCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NotificationsListCustomizableDirective, "[bbNotificationsListCustomizable]", never, {}, {}, never>;
}
