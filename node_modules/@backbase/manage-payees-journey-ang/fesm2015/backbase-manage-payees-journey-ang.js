import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Optional, Inject, Component, Input, ViewChild, EventEmitter, Output, Directive, HostListener, ChangeDetectionStrategy, NgModule } from '@angular/core';
import * as i5$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1$7 from '@backbase/foundation-ang/core';
import { BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i1 from '@angular/router';
import { provideRoutes, RouterModule } from '@angular/router';
import * as i4 from '@backbase/billpay-journeys-common';
import { BillpayPayeeSummaryItemBaseComponent, RECURRING_PAYMENT, BillpayUtilityService, BillpayDiscardChangesModalService, BillpayJourneysCommonModule, BillpayBaseDeactivateGuardService, BillpayEnrolmentGuard, BillpayPayeeDataService } from '@backbase/billpay-journeys-common';
import { __awaiter, __rest } from 'tslib';
import { Observable, Subject, of, BehaviorSubject, EMPTY, combineLatest } from 'rxjs';
import { takeUntil, skip, switchMap, take, map, tap, catchError, shareReplay, filter, pluck, debounceTime, distinctUntilChanged } from 'rxjs/operators';
import * as i5$2 from '@backbase/ui-ang/notification';
import * as i2$1 from '@backbase/ui-ang/header';
import * as i2 from '@ng-bootstrap/ng-bootstrap';
import { NgbModule } from '@ng-bootstrap/ng-bootstrap';
import * as i4$1 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i5 from '@backbase/ui-ang/amount';
import * as i6 from '@backbase/ui-ang/dropdown-menu';
import { DropdownMenuModule } from '@backbase/ui-ang/dropdown-menu';
import * as i7 from '@backbase/ui-ang/keyboard-click-directive';
import * as i11 from '@backbase/ui-ang/button';
import * as i10 from '@backbase/ui-ang/date-pipe';
import { BbDatePipeModule } from '@backbase/ui-ang/date-pipe';
import * as i1$1 from '@backbase/ui-ang/loading-indicator';
import * as i10$1 from '@backbase/ui-ang/empty-state';
import * as i1$2 from '@backbase/data-ang/billpay';
import * as i1$3 from '@backbase/ui-ang/phone-number-format-pipe';
import { PhoneNumberPipe, PhoneNumberModule } from '@backbase/ui-ang/phone-number-format-pipe';
import * as i2$2 from '@backbase/ui-ang/collapsible';
import { CollapsibleModule } from '@backbase/ui-ang/collapsible';
import * as i2$3 from '@backbase/ui-ang/input-radio-group';
import { InputRadioGroupModule } from '@backbase/ui-ang/input-radio-group';
import * as i3 from '@backbase/ui-ang/input-validation-message';
import * as i1$4 from '@backbase/ui-ang/modal';
import * as i1$5 from '@angular/forms';
import { Validators, FormGroup, FormArray, FormControl, ReactiveFormsModule, FormsModule } from '@angular/forms';
import * as i3$1 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import * as i4$2 from '@backbase/ui-ang/input-text';
import * as i5$3 from '@backbase/ui-ang/input-password';
import { InputPasswordModule } from '@backbase/ui-ang/input-password';
import * as i1$6 from '@angular/platform-browser';
import * as i2$4 from '@backbase/ui-ang/fieldset';
import { FieldsetModule } from '@backbase/ui-ang/fieldset';
import * as i2$5 from '@backbase/ui-ang/search-box';
import { SearchBoxModule } from '@backbase/ui-ang/search-box';

const ManagePayeesJourneyConfigurationToken = new InjectionToken('ManagePayeesJourneyConfigurationToken injection token');
const configDefaults = {
    notificationDismissTime: 5000,
    multipleBillsMode: false,
};
class ManagePayeesJourneyConfigService {
    constructor(config) {
        config = config || {};
        this._config = Object.assign(Object.assign({}, configDefaults), config);
    }
    get defaults() {
        return configDefaults;
    }
    get notificationDismissTime() {
        return this._config.notificationDismissTime;
    }
    get multipleBillsMode() {
        return this._config.multipleBillsMode;
    }
}
ManagePayeesJourneyConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesJourneyConfigService, deps: [{ token: ManagePayeesJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ManagePayeesJourneyConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesJourneyConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesJourneyConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ManagePayeesJourneyConfigurationToken]
                }] }]; } });

class CommunicationService {
}

class ManagePayeesNavigationService {
    constructor(router, route, config, communicationService) {
        this.router = router;
        this.route = route;
        this.config = config;
        this.communicationService = communicationService;
        this.defaultRelative = { relativeTo: this.route };
    }
    navigateToPayeeList(extras) {
        var _a;
        if (this.config.multipleBillsMode) {
            (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToMultiplePaymentsForm();
        }
        else {
            this.router.navigate(['./'], extras || this.defaultRelative);
        }
    }
    navigateToSearch(extras) {
        this.router.navigate(['payees'], extras || this.defaultRelative);
    }
    navigateToManualPayeeForm(extras) {
        this.router.navigate(['payees/manual'], extras || this.defaultRelative);
    }
    navigateToManualPayeeReview(extras) {
        this.router.navigate(['payees/manual/review'], extras || this.defaultRelative);
    }
    navigateToEditManualPayeeForm(id, extras) {
        this.router.navigate(['payees/manual', 'edit', id], extras || this.defaultRelative);
    }
    navigateToEditManualReview(id, extras) {
        this.router.navigate(['payees/manual/edit', id, 'review'], extras || this.defaultRelative);
    }
    navigateToElectronicPayeeForm(id, extras) {
        this.router.navigate(['payees/electronic', id], Object.assign(Object.assign({}, this.defaultRelative), extras));
    }
    navigateToElectronicPayeeReview(id, extras) {
        this.router.navigate(['payees/electronic', id, 'review'], Object.assign(Object.assign({}, this.defaultRelative), extras));
    }
    navigateToEditElectronicPayeeForm(id, extras) {
        this.router.navigate(['payees/electronic', 'edit', id], extras || this.defaultRelative);
    }
    navigateToEditElectronicPayeeReview(id, extras) {
        this.router.navigate(['payees/electronic', 'edit', id, 'review'], extras || this.defaultRelative);
    }
    navigateToPayeeSummary(payeeID, extras) {
        this.router.navigate(['payee-summary', { payeeID }], extras || this.defaultRelative);
    }
    navigateToPayveris(payeeID, extras) {
        this.router.navigate(['ebills', { payeeID }], extras || this.defaultRelative);
    }
    // External Navigations
    navigateToRecurringPayment(id) {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToRecurringPayment(id);
    }
    navigateToOneOffPayment(id) {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToOneOffPayment(id);
    }
    navigateToPendingPayments() {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToPaymentsList();
    }
}
ManagePayeesNavigationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesNavigationService, deps: [{ token: i1.Router }, { token: i1.ActivatedRoute }, { token: ManagePayeesJourneyConfigService }, { token: CommunicationService, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ManagePayeesNavigationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesNavigationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesNavigationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i1.ActivatedRoute }, { type: ManagePayeesJourneyConfigService }, { type: CommunicationService, decorators: [{
                    type: Optional
                }] }]; } });

class ManagePayeesJourneyComponent {
}
ManagePayeesJourneyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesJourneyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ManagePayeesJourneyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManagePayeesJourneyComponent, selector: "bb-manage-payees-journey", providers: [ManagePayeesNavigationService], ngImport: i0, template: `<router-outlet></router-outlet>`, isInline: true, directives: [{ type: i1.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesJourneyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-payees-journey',
                    template: `<router-outlet></router-outlet>`,
                    providers: [ManagePayeesNavigationService],
                }]
        }] });

class BillpayPayeeSummaryItemComponent extends BillpayPayeeSummaryItemBaseComponent {
    constructor(payeeDataService, ngbDropdownConfig, navigationService) {
        super(payeeDataService, ngbDropdownConfig);
        this.payeeDataService = payeeDataService;
        this.ngbDropdownConfig = ngbDropdownConfig;
        this.navigationService = navigationService;
    }
    handlePayPayee(type) {
        if (!this.payeeSummary)
            return;
        if (type === RECURRING_PAYMENT) {
            this.navigationService.navigateToRecurringPayment(this.payeeSummary.id);
        }
        else {
            this.navigationService.navigateToOneOffPayment(this.payeeSummary.id);
        }
    }
    handleEditPayee() {
        var _a, _b;
        if (this.payeeSummary && !((_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.electronic)) {
            this.navigationService.navigateToEditManualPayeeForm(this.payeeSummary.id);
        }
        else if ((_b = this.payeeSummary) === null || _b === void 0 ? void 0 : _b.electronic) {
            this.navigationService.navigateToEditElectronicPayeeForm(this.payeeSummary.id);
        }
    }
    handleViewSummary() {
        if (this.payeeSummary) {
            this.navigationService.navigateToPayeeSummary(this.payeeSummary.id);
        }
    }
    handleGetEbills() {
        if (this.payeeSummary) {
            this.navigationService.navigateToPayveris(this.payeeSummary.id);
        }
    }
}
BillpayPayeeSummaryItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayeeSummaryItemComponent, deps: [{ token: i4.BillpayPayeeDataService }, { token: i2.NgbDropdownConfig }, { token: ManagePayeesNavigationService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPayeeSummaryItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayeeSummaryItemComponent, selector: "bb-billpay-payee-summary-item", providers: [ManagePayeesNavigationService], usesInheritance: true, ngImport: i0, template: "<div class=\"bb-stack bb-stack--wrap\">\n  <div class=\"bb-stack__item bb-stack__item--fill\">\n    <a\n      attr.aria-describedBy=\"{{\n        [\n          ebillRetrieveErrorId,\n          noEbillsDueId,\n          ebillsAvailableId,\n          recurringPaymentScheduledIdId,\n          ebillPaymentScheduledId,\n          ebillDueOnId,\n          ebillSupportErrorId,\n          ebillUserActionErrorId,\n          ebillUnknownErrorId,\n          payeeAmountId\n        ].join(' ')\n      }}\"\n      (bbKeyboardClick)=\"handleViewSummary()\"\n      class=\"bb-text-bold\"\n      tabindex=\"0\"\n      role=\"button\"\n      style=\"cursor: pointer\"\n      [attr.aria-label]=\"'view payee summary for ' + payeeName\"\n      data-role=\"payee-name\"\n      >{{ payeeName }}</a\n    >\n\n    <div *ngIf=\"isLatestEbillPaid\" class=\"bb-stack bb-stack--align-top\">\n      <bb-icon-ui\n        class=\"bb-stack__item bb-stack__item--spacing-none\"\n        data-role=\"ebill-payment-icon\"\n        name=\"savings-accounts\"\n        color=\"secondary\"\n      ></bb-icon-ui>\n      <span\n        id=\"{{ ebillPaymentScheduledId }}\"\n        class=\"bb-stack__item bb-text-support\"\n        data-role=\"ebill-payment-label\"\n        i18n=\"\n          eBill payment scheduled note|Text for the information that an eBill payment is\n          scheduled@@bb-billpay-payee-summary-item.note.eBill-payment-scheduled\"\n        >eBill payment scheduled</span\n      >\n    </div>\n\n    <div *ngIf=\"areEbillsDue\" class=\"bb-stack\">\n      <bb-icon-ui\n        class=\"bb-stack__item bb-stack__item--spacing-sm\"\n        data-role=\"receipt-icon\"\n        size=\"sm\"\n        name=\"receipt\"\n        color=\"secondary\"\n      ></bb-icon-ui>\n      <span\n        id=\"{{ ebillDueOnId }}\"\n        class=\"bb-stack__item bb-subtitle bb-text-support\"\n        data-role=\"due-date-label\"\n        *ngIf=\"payeeSummary?.ebill?.latestBill?.paymentDate as ebillPaymentDate\"\n        i18n=\"Ebill due note|Text for the information about the due eBill@@bb-billpay-payee-summary-item.note.ebill-due\"\n        >eBill due on {{ ebillPaymentDate | bbDate: 'MMM d' }}</span\n      >\n    </div>\n\n    <div *ngIf=\"areEbillsInErrorState\" class=\"bb-stack bb-stack--wrap bb-stack--align-top\">\n      <ng-container *ngIf=\"isEbillsErrorUpdateCredentials\">\n        <div class=\"bb-stack__item bb-stack__item--spacing-sm\">\n          <div class=\"bb-stack\">\n            <bb-icon-ui\n              class=\"bb-stack__item bb-stack__item--spacing-sm\"\n              data-role=\"ebills-error-icon\"\n              size=\"sm\"\n              name=\"error-outline\"\n              color=\"danger\"\n            ></bb-icon-ui>\n            <div\n              id=\"{{ ebillRetrieveErrorId }}\"\n              class=\"bb-stack__item bb-subtitle bb-text-danger\"\n              data-role=\"ebills-error-cannot-be-retrieved-message\"\n              i18n=\"\n                Ebills cannot be retrieved error|Error text to display when the eBills cannot be retrieved due to\n                invalid login credentials@@bb-billpay-payee-summary-item.ebill-error.ebills-cannot-be-retrieved\"\n            >\n              eBills cannot be retrieved.\n            </div>\n          </div>\n        </div>\n        <a\n          class=\"bb-stack__item\"\n          (bbKeyboardClick)=\"handleResolveEbillsErrors()\"\n          tabindex=\"0\"\n          role=\"button\"\n          class=\"bb-stack__item bb-subtitle\"\n          style=\"cursor: pointer\"\n          i18n=\"\n            Ebills update login credentials link|Button text to display for updating login credentials for the\n            payee@@bb-billpay-payee-summary-item.ebill-link.update-login-credentials\"\n          attr.aria-label=\"Update login credentials for {{ payeeName }}\"\n          i18n-attr.aria-label=\"\n            Ebills update login credentials link aria label|Aria label for updating login credentials for the\n            payee@@bb-billpay-payee-summary-item.ebill-link.aria-label.update-login-credentials\"\n          data-role=\"ebills-update-login-credentials-button\"\n          >Update login credentials\n        </a>\n      </ng-container>\n\n      <ng-container *ngIf=\"isEbillsErrorNotSupported\">\n        <div class=\"bb-stack__item bb-stack__item--spacing-sm\">\n          <div class=\"bb-stack\">\n            <bb-icon-ui\n              class=\"bb-stack__item bb-stack__item--spacing-sm\"\n              data-role=\"ebills-error-icon\"\n              size=\"sm\"\n              name=\"error-outline\"\n              color=\"danger\"\n            ></bb-icon-ui>\n            <div\n              id=\"{{ ebillSupportErrorId }}\"\n              class=\"bb-stack__item bb-subtitle bb-text-danger\"\n              data-role=\"ebills-error-no-longer-supported-message\"\n              i18n=\"\n                Biller no longer supports ebills error|Error text to display when the payee no longer supports\n                eBills@@bb-billpay-payee-summary-item.ebill-error.ebills-no-longer-available\"\n            >\n              This biller no longer supports eBills.\n            </div>\n          </div>\n        </div>\n        <a\n          (bbKeyboardClick)=\"handleResolveEbillsErrors()\"\n          tabindex=\"0\"\n          role=\"button\"\n          class=\"bb-stack__item bb-subtitle\"\n          style=\"cursor: pointer\"\n          attr.aria-label=\"Disable eBills for {{ payeeName }}\"\n          i18n-attr.aria-label=\"\n            Disable eBills link aria label|Aria label for Disable\n            eBills@@bb-billpay-payee-summary-item.ebill-link.ebills-no-longer-available\"\n          i18n=\"\n            Disable eBills for this payee link|Button text to display to disable eBills for the\n            payee@@bb-billpay-payee-summary-item.ebill-link.aria-label.ebills-no-longer-available\"\n          data-role=\"ebills-disabled-button\"\n          >Disable eBills for this payee\n        </a>\n      </ng-container>\n\n      <ng-container *ngIf=\"isEbillsErrorUserAction\">\n        <div class=\"bb-stack__item\">\n          <div class=\"bb-stack\">\n            <bb-icon-ui\n              class=\"bb-stack__item bb-stack__item--spacing-sm\"\n              data-role=\"ebills-error-icon\"\n              name=\"error-outline\"\n              size=\"sm\"\n              color=\"danger\"\n            ></bb-icon-ui>\n            <div\n              id=\"{{ ebillUserActionErrorId }}\"\n              class=\"bb-stack__item bb-subtitle bb-text-danger\"\n              data-role=\"ebills-error-login-to-biller-message\"\n              i18n=\"\n                Please log in to biller to resolve error|Error text to display when the user must log into the biller's\n                site to resolve an issue@@bb-billpay-payee-summary-item.ebill-error.log-in-to-bille-site\"\n            >\n              Please log in to the biller's site to resolve an issue and continue receiving eBills for this payee.\n            </div>\n          </div>\n        </div>\n        <a\n          (bbKeyboardClick)=\"handleResolveEbillsErrors()\"\n          tabindex=\"0\"\n          role=\"button\"\n          class=\"bb-stack__item bb-subtitle\"\n          style=\"cursor: pointer\"\n          i18n=\"\n            Refresh status for payee link|Button text to display for refreshing the status of eBills for the\n            payee@@bb-billpay-payee-summary-item.ebill-link.refresh-status\"\n          attr.aria-label=\"Refresh status for {{ payeeName }}\"\n          i18n-attr.aria-label=\"\n            Refresh status for payee link aria label|Aria label for Refresh\n            status@@bb-billpay-payee-summary-item.ebill-link.aria-label.refresh-status\"\n          data-role=\"ebills-refresh-status-button\"\n          >Refresh status\n        </a>\n      </ng-container>\n\n      <ng-container *ngIf=\"isEbillsErrorUnknown\">\n        <div class=\"bb-stack\">\n          <bb-icon-ui\n            class=\"bb-stack__item bb-stack__item--spacing-sm\"\n            data-role=\"ebills-error-icon\"\n            name=\"error-outline\"\n            size=\"sm\"\n            color=\"danger\"\n          ></bb-icon-ui>\n          <div\n            attr.id=\"{{ ebillUnknownErrorId }}\"\n            class=\"bb-stack__item bb-subtitle bb-text-danger\"\n            data-role=\"ebills-error-try-again-later-message\"\n            i18n=\"\n              Ebills cannot be retrieved error|Error text to display when eBills cannot currently be retreived for the\n              payee@@bb-billpay-payee-summary-item.ebill-error.ebills-cannot-be-retrieved\"\n          >\n            eBills cannot be retrieved, please try again later or contact support\n          </div>\n        </div>\n      </ng-container>\n    </div>\n\n    <div\n      *ngIf=\"areEbillsEnabledButNotDue\"\n      id=\"{{ noEbillsDueId }}\"\n      class=\"bb-text-support\"\n      data-role=\"no-due-date-label\"\n      i18n=\"\n        No eBill due note|Text for the information that no eBill is due@@bb-billpay-payee-summary-item.note.no-ebill-due\"\n    >\n      No eBills due\n    </div>\n\n    <div *ngIf=\"areEbillsAvailable\" class=\"bb-stack\">\n      <bb-icon-ui\n        class=\"bb-stack__item bb-stack__item--spacing-sm\"\n        data-role=\"receipt-icon\"\n        size=\"sm\"\n        name=\"receipt\"\n        color=\"secondary\"\n      ></bb-icon-ui>\n      <span\n        id=\"{{ ebillsAvailableId }}\"\n        class=\"bb-text-support bb-subtitle bb-stack__item\"\n        data-role=\"ebills-available-label\"\n        i18n=\"\n          eBills available note|Text for the information that eBills are\n          available@@bb-billpay-payee-summary-item.note.ebills-available\"\n        >eBills available</span\n      >\n    </div>\n\n    <div *ngIf=\"areRecurringPaymentsScheduled\" class=\"bb-stack bb-stack--align-top\">\n      <div class=\"bb-stack__item bb-stack__item--spacing-sm\">\n        <bb-icon-ui data-role=\"recurring-payment-icon\" size=\"sm\" name=\"repeat\" color=\"secondary\"></bb-icon-ui>\n      </div>\n      <div\n        id=\"{{ recurringPaymentScheduledIdId }}\"\n        class=\"bb-stack__item bb-subtitle bb-text-support\"\n        data-role=\"recurring-payment-label\"\n        i18n=\"\n          Recurring payments scheduled note|Text for the information that recurring payments are\n          scheduled@@bb-billpay-payee-summary-item.note.recurring-payments-scheduled\"\n      >\n        Recurring payments scheduled\n      </div>\n    </div>\n  </div>\n\n  <div class=\"bb-stack__item bb-stack__item--fill\">\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--fill bb-text-align-left bb-text-align-right--md-up\">\n        <bb-amount-ui\n          id=\"{{ payeeAmountId }}\"\n          class=\"bb-text-bold\"\n          *ngIf=\"areEbillsDue\"\n          data-role=\"amount\"\n          [amount]=\"payeeSummary?.ebill?.latestBill?.amount?.amount\"\n          [currency]=\"payeeSummary?.ebill?.latestBill?.amount?.currencyCode\"\n        >\n        </bb-amount-ui>\n      </div>\n      <div class=\"bb-stack__item\">\n        <ng-container *ngTemplateOutlet=\"payeeSummaryItemButton\"> </ng-container>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #payeeSummaryItemButton>\n  <div class=\"btn-group\" data-role=\"payee-dropdown-menu\">\n    <button\n      bbButton\n      data-role=\"pay-button\"\n      (bbKeyboardClick)=\"handlePayPayee(ONE_OFF_PAYMENT)\"\n      i18n=\"Pay payee button|Button for paying the payee@@bb-billpay-payee-summary-item.button.pay\"\n      [attr.aria-label]=\"'Pay ' + payeeName\"\n      i18n-attr.aria-label=\"\n        Pay payee aria label|Aria label for paying the payee@@bb-billpay-payee-summary-item.aria-label.pay\"\n    >\n      Pay\n    </button>\n\n    <bb-dropdown-menu-ui\n      class=\"btn-group\"\n      btnColor=\"primary\"\n      container=\"body\"\n      icon=\"caret-down\"\n      [attr.aria-label]=\"'More options for ' + payeeName\"\n      i18n-attr.aria-label=\"\n        More options for payee aria label|Aria label for more payee\n        options@@bb-billpay-payee-summary-item.aria-label.more-payee-options\"\n    >\n      <ng-template bbDropdownMenuItem>\n        <ng-container *ngIf=\"payeeSummary?.ebill?.capable\">\n          <a role=\"menuitem\" class=\"dropdown-item bb-dropdown-single-select\" *ngIf=\"ebillLink\" target=\"_blank\">\n            <span\n              i18n=\"\n                View eBill dropdown list button|Button in the dropdown list for viewing the\n                eBill@@bb-billpay-payee-summary-item.button.dropdown.view-eBill\"\n              >View eBill</span\n            >\n          </a>\n\n          <a\n            role=\"menuitem\"\n            target=\"_blank\"\n            data-role=\"stop-ebills-menu-item\"\n            class=\"dropdown-item bb-dropdown-single-select\"\n            *ngIf=\"showStopEbills\"\n            (bbKeyboardClick)=\"handleStopEbills($event)\"\n          >\n            <span\n              i18n=\"\n                Stop eBills dropdown list button|Button in the dropdown list for getting\n                eBills@@bb-billpay-payee-summary-item.button.dropdown.stop-eBills\"\n              >Stop eBills</span\n            >\n          </a>\n\n          <a\n            data-role=\"get-ebills-menu-item\"\n            class=\"dropdown-item bb-dropdown-single-select\"\n            *ngIf=\"areEbillsAvailable\"\n            role=\"menuitem\"\n            target=\"_blank\"\n            (bbKeyboardClick)=\"handleGetEbills()\"\n          >\n            <span\n              i18n=\"\n                Get eBills dropdown list button|Button in the dropdown list for getting\n                eBills@@bb-billpay-payee-summary-item.button.dropdown.get-eBills\"\n              >Get eBills</span\n            >\n          </a>\n        </ng-container>\n\n        <a\n          role=\"menuitem\"\n          data-role=\"view-payee-menu-item\"\n          class=\"dropdown-item bb-dropdown-single-select\"\n          (bbKeyboardClick)=\"handleViewSummary()\"\n        >\n          <span\n            i18n=\"\n              View payee dropdown list button|Button in the dropdown list for viewing the\n              payee@@bb-billpay-payee-summary-item.button.dropdown.view-payee\"\n            >View payee</span\n          >\n        </a>\n        <a\n          role=\"menuitem\"\n          data-role=\"edit-payee-menu-item\"\n          class=\"dropdown-item bb-dropdown-single-select\"\n          (bbKeyboardClick)=\"handleEditPayee()\"\n        >\n          <span\n            i18n=\"\n              Edit payee dropdown list button|Button in the dropdown list for editing the\n              payee@@bb-billpay-payee-summary-item.button.dropdown.edit-payee\"\n            >Edit payee</span\n          >\n        </a>\n        <a\n          role=\"menuitem\"\n          data-role=\"delete-payee-menu-item\"\n          class=\"dropdown-item bb-dropdown-single-select\"\n          (bbKeyboardClick)=\"handleDeletePayee($event)\"\n        >\n          <span\n            i18n=\"\n              Delete payee dropdown list button|Button in the dropdown list for deleting the\n              payee@@bb-billpay-payee-summary-item.button.dropdown.delete-payee\"\n            >Delete payee</span\n          >\n        </a>\n      </ng-template>\n    </bb-dropdown-menu-ui>\n  </div>\n</ng-template>\n", components: [{ type: i4$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i5.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i6.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }], directives: [{ type: i7.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }], pipes: { "bbDate": i10.BbDatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayeeSummaryItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payee-summary-item',
                    templateUrl: './billpay-payee-summary-item.component.html',
                    providers: [ManagePayeesNavigationService],
                }]
        }], ctorParameters: function () { return [{ type: i4.BillpayPayeeDataService }, { type: i2.NgbDropdownConfig }, { type: ManagePayeesNavigationService }]; } });

class BillpayPayeeSummaryListComponent {
    constructor() {
        /**
         * Array of payee summary details.
         */
        this.payeeSummaries = [];
    }
    ngForTrackByIdFn(payee) {
        return payee.id;
    }
}
BillpayPayeeSummaryListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayeeSummaryListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPayeeSummaryListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayeeSummaryListComponent, selector: "bb-billpay-payee-summary-list", inputs: { payeeSummaries: "payeeSummaries" }, ngImport: i0, template: "<ul class=\"bb-list\" data-role=\"list-group\">\n  <li *ngFor=\"let payeeSummary of payeeSummaries; trackBy: ngForTrackByIdFn\" class=\"bb-list__item\">\n    <bb-billpay-payee-summary-item [payeeSummary]=\"payeeSummary\"></bb-billpay-payee-summary-item>\n  </li>\n</ul>\n", components: [{ type: BillpayPayeeSummaryItemComponent, selector: "bb-billpay-payee-summary-item" }], directives: [{ type: i5$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayeeSummaryListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payee-summary-list',
                    templateUrl: './billpay-payee-summary-list.component.html',
                }]
        }], propDecorators: { payeeSummaries: [{
                type: Input
            }] } });

class PayeeListViewComponent {
    /** @internal */
    constructor(routerService, route, config, payeeDataService, notificationService, cdRef, billpayNotificationRoutingService) {
        this.routerService = routerService;
        this.route = route;
        this.config = config;
        this.payeeDataService = payeeDataService;
        this.notificationService = notificationService;
        this.cdRef = cdRef;
        this.billpayNotificationRoutingService = billpayNotificationRoutingService;
        this.notificationMessageTemplate = '';
        this.notificationHeaderTemplate = '';
        this.payeeSummariesByEbillObservable = new Observable();
        this.destroy$ = new Subject();
        this.isDeleteModalOpened = false;
        this.isDeleteEbillsModalOpen = false;
        this.isNavigateModalOpened = false;
        this.notificationType = '';
        this.navigationExtras = { relativeTo: this.route };
    }
    ngOnInit() {
        this.payeeSummariesByEbillObservable = this.payeeDataService.getPayees();
        this.setupNavigationSubscriptions();
        this.payeeDataService.selectedDeletePayee
            .pipe(takeUntil(this.destroy$), skip(1))
            .subscribe(payee => (payee ? (this.isDeleteModalOpened = true) : (this.isNavigateModalOpened = true)));
        this.payeeDataService.selectedDeleteEbills
            .pipe(takeUntil(this.destroy$), skip(1))
            .subscribe(payee => (payee ? (this.isDeleteEbillsModalOpen = true) : (this.isNavigateModalOpened = true)));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    deletePayee() {
        return this.payeeDataService.selectedDeletePayee.pipe(switchMap((payee) => payee ? this.payeeDataService.deletePayee(payee.id, payee.electronic) : of()));
    }
    deleteEbills() {
        return this.payeeDataService.selectedDeleteEbills.pipe(switchMap((payee) => (payee ? this.payeeDataService.deleteEbills(payee.id) : of())));
    }
    get dismissTimeout() {
        if (this.config.notificationDismissTime === undefined) {
            throw new Error('Dismiss timeout value not found');
        }
        return this.config.notificationDismissTime;
    }
    selectedDeletePayee() {
        return this.payeeDataService.selectedDeletePayee;
    }
    selectedDeleteEbills() {
        return this.payeeDataService.selectedDeleteEbills;
    }
    onNavigateToPayments(hasNavigated) {
        if (hasNavigated) {
            this.goToPaymentsList();
        }
        this.isNavigateModalOpened = false;
    }
    onDeletePayee(resolve) {
        this.isDeleteModalOpened = false;
        if (resolve) {
            this.deletePayee()
                .pipe(take(1))
                .subscribe(() => {
                this.deletionNotify('delete');
            });
        }
    }
    onDeleteEbills(resolve) {
        this.isDeleteEbillsModalOpen = false;
        if (resolve) {
            this.deleteEbills()
                .pipe(take(1))
                .subscribe(() => {
                this.deletionNotify('ebills');
            });
        }
    }
    deletionNotify(type) {
        this.payeeDataService.reloadPayees();
        this.cdRef.markForCheck();
        this.notificationType = type;
        this.notificationService.showNotification({
            header: this.notificationHeaderTemplate,
            message: this.notificationMessageTemplate,
            modifier: 'success',
            ttl: this.dismissTimeout,
        });
    }
    setupNavigationSubscriptions() {
        this.billpayNotificationRoutingService.managePayeesSubject$
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => this.goToAddPayee());
        this.billpayNotificationRoutingService.managePaymentSubject$
            .pipe(takeUntil(this.destroy$))
            .subscribe((payeeId) => __awaiter(this, void 0, void 0, function* () { var _a; return this.gotoOneOffPayment(((_a = (yield this.payeeDataService.findPayeeSummaryById(payeeId))) === null || _a === void 0 ? void 0 : _a.id) || ''); }));
        this.billpayNotificationRoutingService.upcommingPaymentsSubject$
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => this.goToPaymentsList());
    }
    areBothListsPresent(payeeSummariesByEbill) {
        return !!(payeeSummariesByEbill.ebillsEnabled &&
            payeeSummariesByEbill.ebillsEnabled.length &&
            payeeSummariesByEbill.ebillsNotEnabled &&
            payeeSummariesByEbill.ebillsNotEnabled.length);
    }
    // Get totals of the eBills, grouped by currency
    // Ideally there should only be one currency in use, but it doesn't hurt to check
    getEbillTotals(ebillPayeeSummaries = []) {
        const ebillTotalsByCurrency = ebillPayeeSummaries.reduce((currenciesTotalsObj, payeeSummary) => {
            if (!(payeeSummary.ebill && payeeSummary.ebill.latestBill && payeeSummary.ebill.latestBill.amount)) {
                return currenciesTotalsObj;
            }
            const thisCurrencyCode = payeeSummary.ebill.latestBill.amount.currencyCode;
            const thisAmount = parseFloat(payeeSummary.ebill.latestBill.amount.amount);
            if (!currenciesTotalsObj[thisCurrencyCode]) {
                currenciesTotalsObj[thisCurrencyCode] = 0;
            }
            currenciesTotalsObj[thisCurrencyCode] = currenciesTotalsObj[thisCurrencyCode] + thisAmount;
            return currenciesTotalsObj;
        }, {});
        return Object.keys(ebillTotalsByCurrency).map(currencyCode => {
            return {
                currencyCode,
                amount: ebillTotalsByCurrency[currencyCode].toString(),
            };
        });
    }
    ngForTrackByCurrencyFn(currencies) {
        return currencies.currencyCode;
    }
    get currentLoadingState() {
        return this.payeeDataService.payeesLoadingState;
    }
    get areButtonsDisabled() {
        return this.payeeDataService.areButtonsDisabled;
    }
    get numberOfPayees() {
        return this.payeeDataService.numberOfPayees;
    }
    goToAddPayee() {
        this.routerService.navigateToSearch(this.navigationExtras);
    }
    goToPaymentsList() {
        var _a;
        (_a = this.routerService) === null || _a === void 0 ? void 0 : _a.navigateToPendingPayments();
    }
    gotoOneOffPayment(id) {
        var _a;
        (_a = this.routerService) === null || _a === void 0 ? void 0 : _a.navigateToOneOffPayment(id);
    }
}
PayeeListViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayeeListViewComponent, deps: [{ token: ManagePayeesNavigationService }, { token: i1.ActivatedRoute }, { token: ManagePayeesJourneyConfigService }, { token: i4.BillpayPayeeDataService }, { token: i5$2.NotificationService }, { token: i0.ChangeDetectorRef }, { token: i4.BillpayNotificationRoutingService }], target: i0.ɵɵFactoryTarget.Component });
PayeeListViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PayeeListViewComponent, selector: "bb-billpay-payee-list-view", viewQueries: [{ propertyName: "notificationMessageTemplate", first: true, predicate: ["notificationMessage"], descendants: true }, { propertyName: "notificationHeaderTemplate", first: true, predicate: ["notificationHeader"], descendants: true }], ngImport: i0, template: "<div class=\"bb-stack bb-block bb-block--lg\">\n  <bb-header-ui\n    class=\"bb-stack__item bb-stack__item--fill\"\n    headingType=\"h1\"\n    heading=\"Pay a bill\"\n    i18n-heading=\"@@billpay-payees-journey.payee-list-view\"\n  >\n  </bb-header-ui>\n  <button\n    bbButton\n    (click)=\"goToAddPayee()\"\n    color=\"secondary\"\n    i18n=\"button label|Add payee button@@billpay-payees-journey.payee-list\"\n  >\n    Add a payee\n  </button>\n</div>\n\n<ng-container>\n  <section>\n    <ng-container *ngIf=\"currentLoadingState !== 'error'; else errorState\">\n      <ng-container *ngIf=\"payeeSummariesByEbillObservable | async as ebillGroupedData; else loadingState\">\n        <ng-container *ngIf=\"currentLoadingState !== 'loading'; else loadingState\">\n          <ng-container\n            *ngIf=\"ebillGroupedData.ebillsEnabled.length || ebillGroupedData.ebillsNotEnabled.length; else emptyState\"\n          >\n            <div\n              class=\"bb-block bb-block--lg\"\n              *ngIf=\"ebillGroupedData.ebillsEnabled.length\"\n              data-role=\"payees-with-active-e-bills-list\"\n            >\n              <div class=\"card card-lg\">\n                <div class=\"card-body\">\n                  <div class=\"bb-block bb-block--md\">\n                    <bb-header-ui\n                      headingType=\"h2\"\n                      *ngIf=\"areBothListsPresent(ebillGroupedData)\"\n                      data-role=\"sub-header\"\n                      heading=\"Payees with active eBills\"\n                      i18n-heading=\"\n                        Payees with eBills title|Title for the list of payees with eBills\n                        enabled@@bb-billpay-payee-list-widget-ang.title.payees-with-ebills\"\n                    >\n                    </bb-header-ui>\n                  </div>\n                  <ul class=\"bb-list\">\n                    <li class=\"bb-list__item\">\n                      <bb-billpay-payee-summary-list [payeeSummaries]=\"ebillGroupedData.ebillsEnabled\">\n                      </bb-billpay-payee-summary-list>\n                    </li>\n                    <li class=\"bb-list__item\">\n                      <div\n                        data-role=\"outstanding-e-bill-total\"\n                        role=\"listitem\"\n                        *ngFor=\"\n                          let ebillCurrencyTotal of getEbillTotals(ebillGroupedData.ebillsEnabled);\n                          trackBy: ngForTrackByCurrencyFn\n                        \"\n                        class=\"bb-highlight\"\n                      >\n                        <span\n                          i18n=\"\n                            Outstanding eBills total text|Text for the total of outstanding\n                            eBills@@bb-billpay-payee-list-widget-ang.ebills.total\"\n                        >\n                          Outstanding eBill total:\n                        </span>\n                        <bb-amount-ui\n                          data-role=\"total-amount\"\n                          class=\"bb-highlight\"\n                          [amount]=\"ebillCurrencyTotal.amount\"\n                          [currency]=\"ebillCurrencyTotal.currencyCode\"\n                        >\n                        </bb-amount-ui>\n                      </div>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n\n            <div\n              class=\"card card-lg\"\n              data-role=\"all-other-payees-list\"\n              *ngIf=\"ebillGroupedData.ebillsNotEnabled.length\"\n            >\n              <div class=\"card-body\">\n                <div class=\"bb-block bb-block--md\">\n                  <bb-header-ui\n                    headingType=\"h2\"\n                    *ngIf=\"areBothListsPresent(ebillGroupedData)\"\n                    data-role=\"sub-header\"\n                    heading=\"All other payees\"\n                    i18n-heading=\"\n                      Payees without eBills title|Title for the list of payees that do not have eBills\n                      enabled@@bb-billpay-payee-list-widget-ang.title.other-payees\"\n                  >\n                  </bb-header-ui>\n                </div>\n                <div class=\"bb-list\">\n                  <bb-billpay-payee-summary-list [payeeSummaries]=\"ebillGroupedData.ebillsNotEnabled\">\n                  </bb-billpay-payee-summary-list>\n                </div>\n              </div>\n            </div>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </section>\n</ng-container>\n\n<ng-template #loadingState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-loading-indicator-ui loaderSize=\"lg\"> </bb-loading-indicator-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-empty-state-ui\n        data-role=\"error-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"error-outline\"\n        subtitle=\"Try to reload the page or contact support\"\n        i18n-subtitle=\"\n          Try to reload the page or contact the support.|Payee List loading\n          subtitle@@bb-billpay-payee-list-widget-ang.loading.subtitle\"\n        title=\"Payee list is not loading\"\n        i18n-title=\"Payee list is not loading|Payee List loading title@@bb-billpay-payee-list-widget-ang.loading.title\"\n      >\n      </bb-empty-state-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #emptyState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        data-role=\"empty-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"assignment-ind\"\n        subtitle=\"Add a payee to make a bill payment\"\n        i18n-subtitle=\"\n          Add a payee to make a bill payment|Payee List no payees\n          subtitle@@bb-billpay-payee-list-widget-ang.bb-empty-state-ui.subtitle\"\n        title=\"No payees\"\n        i18n-title=\"\n          No payees state text|Payee List no payees title@@bb-billpay-payee-list-widget-ang.bb-empty-state-ui.title\"\n      >\n      </bb-empty-state-ui>\n      <div class=\"bb-state-container__footer\">\n        <button\n          bbButton\n          data-role=\"empty-state-add-payee-btn\"\n          (click)=\"addPayee()\"\n          [disabled]=\"areButtonsDisabled\"\n          i18n=\"\n            Add a payee|Payee List add payee button@@bb-billpay-payee-list-widget-ang.bb-empty-state-ui.button.add-payee\"\n        >\n          Add a payee\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<bb-billpay-payee-delete-modal\n  *ngIf=\"isDeleteModalOpened\"\n  (resolve)=\"onDeletePayee($event)\"\n></bb-billpay-payee-delete-modal>\n\n<bb-billpay-ebills-delete-modal\n  *ngIf=\"isDeleteEbillsModalOpen\"\n  (resolve)=\"onDeleteEbills($event)\"\n></bb-billpay-ebills-delete-modal>\n\n<bb-billpay-payee-navigate-modal\n  *ngIf=\"isNavigateModalOpened\"\n  (resolve)=\"onNavigateToPayments($event)\"\n></bb-billpay-payee-navigate-modal>\n\n<ng-template #notificationHeader>\n  <div [ngSwitch]=\"notificationType\">\n    <span\n      *ngSwitchCase=\"'ebills'\"\n      class=\"bb-text-bold\"\n      i18n=\"\n        eBills stopped notification header|eBills stopped confirmation success notification\n        header@@billpay-payee-list.confirm.notification.header\"\n      >eBills stopped</span\n    >\n    <span\n      *ngSwitchCase=\"'delete'\"\n      class=\"bb-text-bold\"\n      i18n=\"\n        delete payee notification header|Payee delete confirmation success notification\n        header@@billpay-payee-list.confirm.notification.header\"\n      >Payee deleted</span\n    >\n  </div>\n</ng-template>\n\n<ng-template #notificationMessage>\n  <div [ngSwitch]=\"notificationType\">\n    <ng-container *ngSwitchCase=\"'delete'\">\n      <span\n        *ngIf=\"selectedDeletePayee() | async as payee\"\n        i18n=\"\n          delete payee notification message|Payee delete confirmation success notification\n          message@@billpay-payee-list.delete-payee-confirm.notification.message\"\n        >The payee {{ payee.nickName ? payee.nickName + ' (' + payee.name + ')' : payee.name }} has been deleted\n        successfully</span\n      >\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'ebills'\">\n      <span\n        *ngIf=\"selectedDeleteEbills() | async as payee\"\n        i18n=\"\n          stop ebill notification message|Payee stop ebill confirmation success notification\n          message@@billpay-payee-list.stop-ebill-confirm.notification.message\"\n        >eBills for {{ payee.nickName ? payee.nickName + ' (' + payee.name + ')' : payee.name }} has been stopped\n        successfully</span\n      >\n    </ng-container>\n  </div>\n</ng-template>\n", components: [{ type: i2$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: BillpayPayeeSummaryListComponent, selector: "bb-billpay-payee-summary-list", inputs: ["payeeSummaries"] }, { type: i5.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i1$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i10$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i4.ӨBillpayPayeeDeleteModalComponent, selector: "bb-billpay-payee-delete-modal", outputs: ["resolve"] }, { type: i4.ӨBillpayEbillsDeleteModalComponent, selector: "bb-billpay-ebills-delete-modal", outputs: ["resolve"] }, { type: i4.ӨBillpayPayeeNavigateModalComponent, selector: "bb-billpay-payee-navigate-modal", outputs: ["resolve"] }], directives: [{ type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "async": i5$1.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayeeListViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payee-list-view',
                    templateUrl: './billpay-payee-list-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: ManagePayeesNavigationService }, { type: i1.ActivatedRoute }, { type: ManagePayeesJourneyConfigService }, { type: i4.BillpayPayeeDataService }, { type: i5$2.NotificationService }, { type: i0.ChangeDetectorRef }, { type: i4.BillpayNotificationRoutingService }]; }, propDecorators: { notificationMessageTemplate: [{
                type: ViewChild,
                args: ['notificationMessage']
            }], notificationHeaderTemplate: [{
                type: ViewChild,
                args: ['notificationHeader']
            }] } });

const defaultDeleteParams = {
    cancelPendingPayments: false,
};
class BillpayPayeeSummaryWidgetService {
    /** @internal */
    constructor(payeesSummaryData, payeesData) {
        this.payeesSummaryData = payeesSummaryData;
        this.payeesData = payeesData;
        this.currentPayeeSummaryLoadingState = new BehaviorSubject('');
    }
    getPayees() {
        this.currentPayeeSummaryLoadingState.next('loading');
        return this.payeesSummaryData.getBillPayPayeesSummary().pipe(map(this.getPayeeSummaries), tap(data => sortPayees(data)), tap(() => this.currentPayeeSummaryLoadingState.next('')), catchError(() => {
            this.currentPayeeSummaryLoadingState.next('error');
            return EMPTY;
        }));
    }
    deletePayee(id, electronic) {
        return electronic
            ? this.payeesData.deleteElectronicPayeeById(Object.assign(Object.assign({}, defaultDeleteParams), { id }))
            : this.payeesData.deletePayeeById(Object.assign(Object.assign({}, defaultDeleteParams), { id }));
    }
    getFullSummary(id) {
        return this.payeesData.getPayeeById({ id }).pipe(map(a => a.payee));
    }
    getPayeeSummaries(response) {
        // eslint-disable-next-line no-null/no-null
        if (response.payeeSummaries === null) {
            throw new Error('Response body not set');
        }
        return response.payeeSummaries ? response.payeeSummaries : [];
    }
    get payeesSummaryLoadingState() {
        return this.currentPayeeSummaryLoadingState;
    }
}
BillpayPayeeSummaryWidgetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayeeSummaryWidgetService, deps: [{ token: i1$2.BillPayPayeesSummaryService }, { token: i1$2.BillPayPayeesService }], target: i0.ɵɵFactoryTarget.Injectable });
BillpayPayeeSummaryWidgetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayeeSummaryWidgetService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayeeSummaryWidgetService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$2.BillPayPayeesSummaryService }, { type: i1$2.BillPayPayeesService }]; } });
function getPayeeDisplayName(payee) {
    return (payee.nickName || payee.name).toLowerCase();
}
function isEbillEnabled(payee) {
    return payee.ebill ? payee.ebill.enabled : false;
}
function sortPayees(data) {
    if (data) {
        data.sort(function (payee1, payee2) {
            if (isEbillEnabled(payee1) && !isEbillEnabled(payee2))
                return -1;
            if (!isEbillEnabled(payee1) && isEbillEnabled(payee2))
                return 1;
            return getPayeeDisplayName(payee1) > getPayeeDisplayName(payee2) ? 1 : -1;
        });
    }
}

class BillpayPayeeStepperComponent {
    constructor() {
        this.nextPayee = new EventEmitter();
        this.previousPayee = new EventEmitter();
    }
    handleGetPreviousPayee() {
        this.previousPayee.emit();
    }
    handleGetNextPayee() {
        this.nextPayee.emit();
    }
}
BillpayPayeeStepperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayeeStepperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPayeeStepperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayeeStepperComponent, selector: "bb-billpay-payee-stepper", inputs: { index: "index", size: "size" }, outputs: { nextPayee: "nextPayee", previousPayee: "previousPayee" }, ngImport: i0, template: "<div class=\"bb-stack\" *ngIf=\"index || index === 0\">\n  <span\n    class=\"bb-stack__item bb-stack__item--fill bb-text-support bb-subtitle\"\n    data-role=\"payee-index\"\n    i18n=\"\n      Number of payees|Text for the payee number and of total\n      payees@@bb-billpay-view-payee-full-summary.note.payee-of-payees\"\n    >Payee {{ index + 1 }} of {{ size }}</span\n  >\n  <button\n    bbButton\n    data-role=\"previous-payee-button\"\n    class=\"bb-stack__item\"\n    color=\"link\"\n    circle=\"true\"\n    aria-label=\"show previous payee\"\n    i18n-aria-label=\"\n      Show previous payee button|Aria label for show previous\n      payee@@bb-billpay-view-payee-full-summary.payee-information.show-previous-payee-button\"\n    [disabled]=\"index <= 0\"\n    (click)=\"handleGetPreviousPayee()\"\n  >\n    <bb-icon-ui name=\"angle-left\"></bb-icon-ui>\n  </button>\n  <button\n    bbButton\n    data-role=\"next-payee-button\"\n    class=\"bb-stack__item\"\n    color=\"link\"\n    circle=\"true\"\n    aria-label=\"show next payee\"\n    i18n-aria-label=\"\n      Show next payee button|Aria label for show next\n      payee@@bb-billpay-view-payee-full-summary.payee-information.show-next-payee-button\"\n    [disabled]=\"index + 1 >= size\"\n    (click)=\"handleGetNextPayee()\"\n  >\n    <bb-icon-ui name=\"angle-right\"></bb-icon-ui>\n  </button>\n</div>\n", components: [{ type: i4$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayeeStepperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payee-stepper',
                    templateUrl: './billpay-payee-stepper.component.html',
                }]
        }], propDecorators: { index: [{
                type: Input
            }], size: [{
                type: Input
            }], nextPayee: [{
                type: Output
            }], previousPayee: [{
                type: Output
            }] } });

class BillpayPayeeInformationComponent {
    /** @internal */
    constructor(phoneNumberFormatter) {
        this.phoneNumberFormatter = phoneNumberFormatter;
        this.editPayee = new EventEmitter();
        this.deletePayee = new EventEmitter();
    }
    handleEditPayee() {
        this.editPayee.emit();
    }
    handleDeletePayee() {
        this.deletePayee.emit();
    }
    get payeePhoneNumber() {
        return (this.fullPayee &&
            this.fullPayee.phoneNumber &&
            this.phoneNumberFormatter.transform(this.fullPayee.phoneNumber, 'US', true));
    }
}
BillpayPayeeInformationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayeeInformationComponent, deps: [{ token: i1$3.PhoneNumberPipe }], target: i0.ɵɵFactoryTarget.Component });
BillpayPayeeInformationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayeeInformationComponent, selector: "bb-billpay-payee-information", inputs: { payeeSummary: "payeeSummary", fullPayee: "fullPayee" }, outputs: { editPayee: "editPayee", deletePayee: "deletePayee" }, providers: [PhoneNumberPipe], ngImport: i0, template: "<bb-collapsible-ui data-role=\"full-summary-toggle\" [isOpen]=\"true\">\n  <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n    <div class=\"bb-stack bb-block bb-block--md\">\n      <bb-header-ui\n        headingType=\"h3\"\n        class=\"bb-stack__item bb-stack__item--fill\"\n        *ngIf=\"payeeSummary.nickName || payeeSummary.name\"\n        data-role=\"full-summary-toggle-heading\"\n        heading=\"Payee Information\"\n        i18n-heading=\"\n          Payee Information|Title of the payee information\n          section@@bb-billpay-view-payee-full-summary.payee-information.title\"\n      >\n      </bb-header-ui>\n      <button\n        id=\"payee-information-toggle-view\"\n        bbButton\n        class=\"bb-stack__item\"\n        (click)=\"toggle()\"\n        type=\"button\"\n        color=\"outline\"\n        role=\"switch\"\n        title=\"toggle-view\"\n        [attr.aria-checked]=\"isOpen\"\n        attr.aria-label=\"toggle to {{ isOpen ? 'hide' : 'show' }} payee information\"\n        i18n-attr.aria-label=\"\n          Payee information toggle label|Aria label for payee information\n          toggle@@bb-billpay-view-payee-full-summary.payee-information.toggle-view\"\n      >\n        <bb-icon-ui [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"></bb-icon-ui>\n      </button>\n    </div>\n  </ng-template>\n  <ng-template bbCollapsibleBody>\n    <dl>\n      <ng-container *ngIf=\"payeeSummary.name\">\n        <dt\n          i18n=\"\n            Payee name label|Label for payee name in payee\n            information@@bb-billpay-view-payee-full-summary.payee-information.payee-name-label\"\n          data-role=\"payee-name-label\"\n        >\n          Payee name\n        </dt>\n        <dd data-role=\"payee-name\">\n          {{ payeeSummary.name }}\n        </dd>\n      </ng-container>\n      <dt\n        i18n=\"\n          Payee type label|Label for payee type in payee\n          information@@bb-billpay-view-payee-full-summary.payee-information.payee-type-label\"\n        data-role=\"payee-type-label\"\n      >\n        Payee type\n      </dt>\n      <dd data-role=\"payee-type\">\n        <span\n          *ngIf=\"payeeSummary.electronic; else manualPayeeLabel\"\n          i18n=\"\n            Electronic payee|Label for electronic\n            payee@@bb-billpay-view-payee-full-summary.payee-information.electronic-payee-label\"\n          >Electronic</span\n        >\n        <ng-template #manualPayeeLabel>\n          <span\n            i18n=\"\n              Manual payee|Label for manual\n              payee@@bb-billpay-view-payee-full-summary.payee-information.manual-payee-label\"\n            >Check</span\n          >\n        </ng-template>\n      </dd>\n      <ng-container *ngIf=\"payeeSummary.accountNumber\">\n        <dt\n          i18n=\"\n            Payee account number label|Label for payee account number in payee\n            information@@bb-billpay-view-payee-full-summary.payee-information.payee-account-number-label\"\n          data-role=\"payee-account-number-label\"\n        >\n          Payee account number\n        </dt>\n        <dd data-role=\"payee-account-number\">\n          {{ payeeSummary.accountNumber }}\n        </dd>\n      </ng-container>\n      <ng-container *ngIf=\"payeeSummary.nickName\">\n        <dt\n          i18n=\"\n            Payee nickname label|Label for payee nickname in payee\n            information@@bb-billpay-view-payee-full-summary.payee-information.payee-nickname-label\"\n          data-role=\"payee-nickname-label\"\n        >\n          Payee nickname\n        </dt>\n        <dd data-role=\"payee-nickname\">\n          {{ payeeSummary.nickName }}\n        </dd>\n      </ng-container>\n      <ng-container *ngIf=\"fullPayee && fullPayee.address as address\">\n        <dt\n          i18n=\"\n            Payee address label|Label for payee address in payee\n            information@@bb-billpay-view-payee-full-summary.payee-information.payee-address-label\"\n          data-role=\"payee-address-label\"\n        >\n          Payee address\n        </dt>\n        <dd data-role=\"payee-address\">\n          <div>{{ address.address1 }}</div>\n          <div *ngIf=\"address.address2\">{{ address.address2 }}</div>\n          <div>\n            <span class=\"bb-text-nowrap\">{{ address.city }} </span>\n            <span class=\"bb-text-nowrap\">{{ address.state }} </span>\n            <span class=\"bb-text-nowrap\">{{ address.postalCode }}</span>\n          </div>\n        </dd>\n      </ng-container>\n      <ng-container *ngIf=\"payeePhoneNumber as phoneNumber\">\n        <dt\n          i18n=\"\n            Payee phone number label|Label for payee phone number in payee\n            information@@bb-billpay-view-payee-full-summary.payee-information.payee-phone-number-label\"\n          data-role=\"payee-phone-number-label\"\n        >\n          Phone number\n        </dt>\n        <dd data-role=\"payee-phone-number\">\n          {{ phoneNumber }}\n        </dd>\n      </ng-container>\n    </dl>\n    <div class=\"bb-button-bar bb-button-bar--reverse bb-block bb-block--xl\">\n      <button\n        bbButton\n        (click)=\"handleEditPayee()\"\n        data-role=\"edit-payee-button\"\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        i18n=\"Edit payee button|Text for the edit payee button@@bb-billpay-view-payee-full-summary.button.edit-payee\"\n      >\n        Edit payee\n      </button>\n      <button\n        bbButton\n        (click)=\"handleDeletePayee()\"\n        class=\"bb-button-bar__button\"\n        data-role=\"delete-payee-button\"\n        color=\"danger\"\n        i18n=\"\n          Delete payee button|Text for the delete payee button@@bb-billpay-view-payee-full-summary.button.delete-payee\"\n      >\n        Delete payee\n      </button>\n    </div>\n  </ng-template>\n</bb-collapsible-ui>\n", components: [{ type: i2$2.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i2$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2$2.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2$2.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayeeInformationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payee-information',
                    templateUrl: './billpay-payee-information.component.html',
                    providers: [PhoneNumberPipe],
                }]
        }], ctorParameters: function () { return [{ type: i1$3.PhoneNumberPipe }]; }, propDecorators: { payeeSummary: [{
                type: Input
            }], fullPayee: [{
                type: Input
            }], editPayee: [{
                type: Output
            }], deletePayee: [{
                type: Output
            }] } });

class PayeeSummaryViewComponent {
    /** @internal */
    constructor(routerService, route, config, payeeSummaryService, notificationService, cdRef) {
        this.routerService = routerService;
        this.route = route;
        this.config = config;
        this.payeeSummaryService = payeeSummaryService;
        this.notificationService = notificationService;
        this.cdRef = cdRef;
        this.selectedDeletePayeeSource = new BehaviorSubject(undefined);
        this.destroy$ = new Subject();
        this.payees$ = new Observable();
        this.isDeleteModalOpened = false;
        this.isNavigateModalOpened = false;
        this.payeeIndex = 0;
        this.notificationMessageTemplate = '';
        this.notificationHeaderTemplate = '';
        this.navigationExtras = { relativeTo: this.route.parent };
    }
    gotoPayeeList() {
        this.routerService.navigateToPayeeList(this.navigationExtras);
    }
    gotoAddPayee() {
        this.routerService.navigateToSearch(this.navigationExtras);
    }
    gotoOneOffPayment(id) {
        this.routerService.navigateToOneOffPayment(id);
    }
    gotoEditManual(id) {
        this.routerService.navigateToEditManualPayeeForm(id, this.navigationExtras);
    }
    gotoEditElectronic(id) {
        this.routerService.navigateToEditElectronicPayeeForm(id, this.navigationExtras);
    }
    gotoPaymentsList() {
        this.routerService.navigateToPendingPayments();
    }
    ngOnInit() {
        const id = this.route.snapshot.params['payeeID'] || undefined;
        this.payees$ = this.payeeSummaryService.getPayees().pipe(tap(data => this.setPayee(data, id)), tap(data => (this.payeeSummaries = data)));
    }
    setPayee(payeeSummaries, id) {
        if (!payeeSummaries || payeeSummaries.length === 0) {
            return;
        }
        else if (id === undefined) {
            this.payeeSummary = payeeSummaries[0];
        }
        else {
            const payeeIndex = payeeSummaries.findIndex(payee => payee.id === id);
            if (payeeIndex > 0) {
                this.payeeIndex = payeeIndex;
                this.payeeSummary = payeeSummaries[payeeIndex];
            }
            else {
                this.payeeSummary = payeeSummaries[0];
            }
        }
        if (!this.payeeSummary.electronic) {
            this.payeeSummaryService
                .getFullSummary(this.payeeSummary.id)
                .pipe(takeUntil(this.destroy$))
                .subscribe(payee => {
                this.fullManualPayeeSummary = payee;
                this.cdRef.detectChanges();
            });
        }
    }
    handleEditPayee() {
        if (this.payeeSummary && this.payeeSummary.electronic) {
            this.gotoEditElectronic(this.payeeSummary.id);
        }
        else if (this.payeeSummary && !this.payeeSummary.electronic) {
            this.gotoEditManual(this.payeeSummary.id);
        }
    }
    onNavigateToPayments(resolve) {
        if (resolve) {
            this.gotoPaymentsList();
        }
        this.closeNavigateModal();
    }
    selectedDeletePayee() {
        return this.selectedDeletePayeeSource.asObservable();
    }
    handleDeletePayee() {
        this.payeeSummary && !this.payeeSummary.nextPayment ? this.openDeleteModal() : this.openNavigateModal();
        this.selectedDeletePayeeSource.next(this.payeeSummary);
    }
    openNavigateModal() {
        this.isNavigateModalOpened = true;
    }
    closeNavigateModal() {
        this.isNavigateModalOpened = false;
    }
    openDeleteModal() {
        this.isDeleteModalOpened = true;
    }
    closeDeleteModal() {
        this.isDeleteModalOpened = false;
    }
    onDeletePayee(resolve) {
        this.closeDeleteModal();
        if (resolve && this.payeeSummary) {
            this.payeeSummaryService
                .deletePayee(this.payeeSummary.id, this.payeeSummary.electronic)
                .pipe(takeUntil(this.destroy$))
                .subscribe(() => {
                this.deletionNotify();
            });
            this.gotoPayeeList();
        }
    }
    deletionNotify() {
        this.notificationService.showNotification({
            header: this.notificationHeaderTemplate,
            message: this.notificationMessageTemplate,
            modifier: 'success',
            ttl: this.dismissTimeoutValue,
        });
    }
    get dismissTimeoutValue() {
        if (this.config.notificationDismissTime === undefined) {
            throw new Error('Dismiss timeout value not found');
        }
        return this.config.notificationDismissTime;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    updatePayee() {
        if (this.payeeSummaries) {
            this.payeeSummary = this.payeeSummaries[this.payeeIndex];
            if (this.payeeSummary && !this.payeeSummary.electronic) {
                this.payeeSummaryService
                    .getFullSummary(this.payeeSummary.id)
                    .pipe(takeUntil(this.destroy$))
                    .subscribe(payee => {
                    this.fullManualPayeeSummary = payee;
                    this.cdRef.detectChanges();
                });
            }
            else {
                this.fullManualPayeeSummary = undefined;
                this.cdRef.detectChanges();
            }
        }
    }
    nextPayee() {
        ++this.payeeIndex;
        this.updatePayee();
    }
    previousPayee() {
        --this.payeeIndex;
        this.updatePayee();
    }
    get currentLoadingState() {
        return this.payeeSummaryService.payeesSummaryLoadingState;
    }
}
PayeeSummaryViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayeeSummaryViewComponent, deps: [{ token: ManagePayeesNavigationService }, { token: i1.ActivatedRoute }, { token: ManagePayeesJourneyConfigService }, { token: BillpayPayeeSummaryWidgetService }, { token: i5$2.NotificationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
PayeeSummaryViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PayeeSummaryViewComponent, selector: "bb-billpay-payee-details-view", viewQueries: [{ propertyName: "notificationMessageTemplate", first: true, predicate: ["notificationMessage"], descendants: true }, { propertyName: "notificationHeaderTemplate", first: true, predicate: ["notificationHeader"], descendants: true }], ngImport: i0, template: "<div class=\"bb-block bb-block--lg\">\n  <button bbButton color=\"link\" class=\"bb-block bb-block--md pl-0\" (click)=\"gotoPayeeList()\">\n    <bb-icon-ui name=\"arrow-back\" size=\"md\"></bb-icon-ui>\n    <span i18n=\"button label|Back button@@billpay-payees-journey.payee-summary.back\">Back to Payee List</span>\n  </button>\n  <bb-header-ui headingType=\"h1\" [heading]=\"'Payee summary'\" i18n-heading=\"@@billpay-payees-journey.add-payee\">\n  </bb-header-ui>\n</div>\n\n<ng-template #notificationMessage>\n  <div>\n    <div>\n      <span\n        i18n=\"\n          delete payee notification message|Payee delete confirmation success notification\n          message@@billpay-payee-summary.delete-payee-confirm.notification.message\"\n        >The payee\n        {{ payeeSummary.nickName ? payeeSummary.nickName + ' (' + payeeSummary.name + ')' : payeeSummary.name }} has\n        been deleted successfully</span\n      >\n    </div>\n  </div>\n</ng-template>\n\n <ng-container *ngIf=\"payees$ | async as allPayees\">\n  <ng-container *ngIf=\"payeeSummary; else emptyState\">\n    <div class=\"card card-lg\">\n      <div class=\"card-body\">\n        <div class=\"bb-block bb-block--md\">\n          <bb-billpay-payee-stepper\n            [index]=\"payeeIndex\"\n            [size]=\"allPayees.length\"\n            (nextPayee)=\"nextPayee()\"\n            (previousPayee)=\"previousPayee()\"\n          >\n          </bb-billpay-payee-stepper>\n        </div>\n        <div class=\"bb-block bb-block--lg\">\n          <bb-header-ui\n            headingType=\"h2\"\n            *ngIf=\"payeeSummary.nickName || payeeSummary.name\"\n            data-role=\"full-summary-payee-name-primary\"\n            heading=\"{{ payeeSummary.nickName || payeeSummary.name }}\"\n          >\n          </bb-header-ui>\n          <div\n            class=\"bb-highlight\"\n            *ngIf=\"payeeSummary.nickName && payeeSummary.name\"\n            data-role=\"full-summary-payee-name-secondary\"\n          >\n            {{ payeeSummary.name }}\n          </div>\n        </div>\n\n        <bb-billpay-payee-information\n          [payeeSummary]=\"payeeSummary\"\n          [fullPayee]=\"fullManualPayeeSummary\"\n          (editPayee)=\"handleEditPayee()\"\n          (deletePayee)=\"handleDeletePayee()\"\n        >\n        </bb-billpay-payee-information>\n\n        <div class=\"bb-button-bar bb-button-bar--reverse\">\n          <button\n            bbButton\n            (click)=\"gotoOneOffPayment(payeeSummary)\"\n            data-role=\"make-payment-from-summary-payee-button\"\n            color=\"primary\"\n            class=\"bb-button-bar__button\"\n            i18n=\"\n              Make a payment button|Text for the make a payment vie full summary\n              button@@bb-billpay-view-payee-full-summary.button.make-payment\"\n          >\n            Make a payment\n          </button>\n        </div>\n\n        <bb-billpay-payee-delete-modal\n          *ngIf=\"isDeleteModalOpened\"\n          (resolve)=\"onDeletePayee($event)\"\n        ></bb-billpay-payee-delete-modal>\n\n        <bb-billpay-payee-navigate-modal\n          *ngIf=\"isNavigateModalOpened\"\n          (resolve)=\"onNavigateToPayments($event)\"\n        ></bb-billpay-payee-navigate-modal>\n      </div>\n    </div>\n  </ng-container>\n</ng-container> \n\n<ng-container *ngIf=\"currentLoadingState | async as currentLoadingState\">\n  <ng-container *ngIf=\"currentLoadingState === 'loading'\">\n    <div class=\"card card-lg\">\n      <div class=\"card-body\">\n        <bb-loading-indicator-ui loaderSize=\"lg\"> </bb-loading-indicator-ui>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"currentLoadingState === 'error'\">\n    <div class=\"card card-lg\">\n      <div class=\"card-body\">\n        <bb-empty-state-ui\n          data-role=\"error-state\"\n          iconSize=\"xxl\"\n          iconModifier=\"error-outline\"\n          subtitle=\"Try to reload the page or contact support\"\n          i18n-subtitle=\"\n            Try to reload the page or contact support|Payee Summary error loading\n            subtitle@@bb-billpay-payee-summary-widget-ang.loading.subtitle\"\n          title=\"Could not fetch payee details\"\n          i18n-title=\"\n            Could not fetch payee details|Payee Summary error loading\n            title@@bb-billpay-payee-summary-widget-ang.loading.title\"\n        >\n        </bb-empty-state-ui>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n\n<ng-template #emptyState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        data-role=\"empty-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"assignment-ind\"\n        subtitle=\"Add a payee to make a bill payment\"\n        i18n-subtitle=\"\n          Add a payee to make a bill payment|Payee Summary no payees\n          subtitle@@bb-billpay-payee-summary-widget-ang.bb-empty-state-ui.subtitle\"\n        title=\"No payees\"\n        i18n-title=\"\n          No payees state text|Payee Summary no payees\n          title@@bb-billpay-payee-summary-widget-ang.bb-empty-state-ui.title\"\n      >\n      </bb-empty-state-ui>\n      <div class=\"bb-state-container__footer\">\n        <button\n          bbButton\n          data-role=\"empty-state-add-payee-btn\"\n          (click)=\"gotoAddPayee()\"\n          i18n=\"\n            Add a payee|Payee Summary add payee\n            button@@bb-billpay-payee-summary-widget-ang.bb-empty-state-ui.button.add-payee\"\n        >\n          Add a payee\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #notificationHeader>\n  <div>\n    <span\n      i18n=\"\n        delete payee notification header|Payee delete confirmation success notification\n        header@@billpay-payee-summary.confirm.notification.header\"\n      >Payee deleted</span\n    >\n  </div>\n</ng-template>\n", components: [{ type: i4$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: BillpayPayeeStepperComponent, selector: "bb-billpay-payee-stepper", inputs: ["index", "size"], outputs: ["nextPayee", "previousPayee"] }, { type: BillpayPayeeInformationComponent, selector: "bb-billpay-payee-information", inputs: ["payeeSummary", "fullPayee"], outputs: ["editPayee", "deletePayee"] }, { type: i4.ӨBillpayPayeeDeleteModalComponent, selector: "bb-billpay-payee-delete-modal", outputs: ["resolve"] }, { type: i4.ӨBillpayPayeeNavigateModalComponent, selector: "bb-billpay-payee-navigate-modal", outputs: ["resolve"] }, { type: i1$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i10$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5$1.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayeeSummaryViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payee-details-view',
                    templateUrl: './billpay-payee-summary-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: ManagePayeesNavigationService }, { type: i1.ActivatedRoute }, { type: ManagePayeesJourneyConfigService }, { type: BillpayPayeeSummaryWidgetService }, { type: i5$2.NotificationService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { notificationMessageTemplate: [{
                type: ViewChild,
                args: ['notificationMessage']
            }], notificationHeaderTemplate: [{
                type: ViewChild,
                args: ['notificationHeader']
            }] } });

var PayverisEnrolmentState;
(function (PayverisEnrolmentState) {
    PayverisEnrolmentState[PayverisEnrolmentState["Initialize"] = 0] = "Initialize";
    PayverisEnrolmentState[PayverisEnrolmentState["Login"] = 1] = "Login";
    PayverisEnrolmentState[PayverisEnrolmentState["SelectBiller"] = 2] = "SelectBiller";
    PayverisEnrolmentState[PayverisEnrolmentState["OtpSelect"] = 3] = "OtpSelect";
    PayverisEnrolmentState[PayverisEnrolmentState["OtpEntry"] = 4] = "OtpEntry";
    PayverisEnrolmentState[PayverisEnrolmentState["Callback"] = 5] = "Callback";
    PayverisEnrolmentState[PayverisEnrolmentState["Captcha"] = 6] = "Captcha";
    PayverisEnrolmentState[PayverisEnrolmentState["Mfa"] = 7] = "Mfa";
    PayverisEnrolmentState[PayverisEnrolmentState["SelectAccounts"] = 8] = "SelectAccounts";
    PayverisEnrolmentState[PayverisEnrolmentState["Success"] = 9] = "Success";
    PayverisEnrolmentState[PayverisEnrolmentState["ErrorState"] = 10] = "ErrorState";
    PayverisEnrolmentState[PayverisEnrolmentState["Undefined"] = 11] = "Undefined";
})(PayverisEnrolmentState || (PayverisEnrolmentState = {}));
var PayverisEnrolmentComponentState;
(function (PayverisEnrolmentComponentState) {
    PayverisEnrolmentComponentState[PayverisEnrolmentComponentState["Undefined"] = 0] = "Undefined";
    PayverisEnrolmentComponentState[PayverisEnrolmentComponentState["Ready"] = 1] = "Ready";
    PayverisEnrolmentComponentState[PayverisEnrolmentComponentState["Checking"] = 2] = "Checking";
    PayverisEnrolmentComponentState[PayverisEnrolmentComponentState["Callback"] = 3] = "Callback";
})(PayverisEnrolmentComponentState || (PayverisEnrolmentComponentState = {}));

class BillpayManagePayeeStateService {
    constructor() {
        this.manualPayeeStateSource$ = new BehaviorSubject(undefined);
        this.manualPayeeFormState = this.manualPayeeStateSource$.asObservable();
        this.electronicPayeeStateSource = new BehaviorSubject(undefined);
        this.electronicPayeeFormState = this.electronicPayeeStateSource.asObservable();
        this.isFormProcessing = false;
    }
    setManualPayee(state) {
        this.manualPayeeStateSource$.next(state);
    }
    toManualFormState(data) {
        return Object.assign(Object.assign({ name: data.name, address: data.address, phoneNumber: data.phoneNumber || '' }, (data.accountNumber && { accountNumber: data.accountNumber })), (data.nickName && { nickName: data.nickName }));
    }
    resetManualPayee() {
        this.setManualPayee();
    }
    setElectronicPayee(state) {
        this.electronicPayeeStateSource.next(state);
    }
    resetElectronicPayee() {
        this.setElectronicPayee();
    }
    electronicGetResponseToForm(payeeResponse) {
        const { name, nickName, accountNumber } = payeeResponse.payee;
        return {
            name,
            nickName,
            accountNumber,
        };
    }
}
BillpayManagePayeeStateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManagePayeeStateService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
BillpayManagePayeeStateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManagePayeeStateService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManagePayeeStateService, decorators: [{
            type: Injectable
        }] });

class BaseElectronicPayeeReviewPageModelDirective$1 {
    /** @internal */
    constructor(route, stateService, discardModalService) {
        this.route = route;
        this.stateService = stateService;
        this.discardModalService = discardModalService;
        this.destroy$ = new Subject();
        this.payee$ = this.stateService.electronicPayeeFormState.pipe(take(1), shareReplay(1));
        this.id$ = this.route.paramMap.pipe(take(1), map(params => params.get('id') || ''));
    }
    ngOnInit() {
        this.payee$
            .pipe(filter(payee => !payee), switchMap(() => this.id$))
            .subscribe(id => {
            this.navigateBack(id);
        });
        this.payeeSubmit$.pipe(takeUntil(this.destroy$), filter(Boolean)).subscribe(payee => this.onSubmitPayee(payee));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onWindowUnload($event) {
        if (!this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    get dismissTimeout() {
        if (this.dismissTimeoutValue === undefined) {
            throw new Error('Dismiss timeout value not found');
        }
        return this.dismissTimeoutValue;
    }
    openModal() {
        return this.payeeSubmit$.pipe(switchMap(payee => (payee ? of(true) : this.discardModalService.openModal())), tap(isResolved => isResolved && this.stateService.resetElectronicPayee()));
    }
    onModalResolve(resolvedWith) {
        this.discardModalService.onModalResolve(resolvedWith);
    }
}
BaseElectronicPayeeReviewPageModelDirective$1.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BaseElectronicPayeeReviewPageModelDirective$1, deps: [{ token: i1.ActivatedRoute }, { token: BillpayManagePayeeStateService }, { token: i4.BillpayDiscardChangesModalService }], target: i0.ɵɵFactoryTarget.Directive });
BaseElectronicPayeeReviewPageModelDirective$1.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: BaseElectronicPayeeReviewPageModelDirective$1, inputs: { dismissTimeoutValue: "dismissTimeoutValue" }, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BaseElectronicPayeeReviewPageModelDirective$1, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: BillpayManagePayeeStateService }, { type: i4.BillpayDiscardChangesModalService }]; }, propDecorators: { dismissTimeoutValue: [{
                type: Input
            }], onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });

class BaseElectronicPayeePageDirective {
    /** @internal */
    constructor(route, stateService, discardModalService) {
        this.route = route;
        this.stateService = stateService;
        this.discardModalService = discardModalService;
        this.isFormTouched = false;
        this.destroy$ = new Subject();
        this.isFindPayeeModal = false;
        this.id$ = this.route.paramMap.pipe(take(1), map(params => params.get('id') || ''));
        this.payeeState$ = this.stateService.electronicPayeeFormState.pipe(take(1), shareReplay(1));
    }
    onWindowUnload($event) {
        this.payeeState$.subscribe(state => {
            if ((state || this.isFormTouched) && !this.isDiscardModalOpen) {
                $event.returnValue = true;
            }
        });
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    onFormValueChanged() {
        this.isFormTouched = true;
    }
    openModal() {
        const openModal = () => this.discardModalService
            .openModal()
            .pipe(tap(isResolved => isResolved && this.stateService.resetElectronicPayee()));
        return this.payeeState$.pipe(switchMap(payeeState => (payeeState || this.isFormTouched ? openModal() : of(true))), takeUntil(this.destroy$));
    }
    onModalResolve(resolvedWith) {
        this.isFindPayeeModal = false;
        this.discardModalService.onModalResolve(resolvedWith);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
BaseElectronicPayeePageDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BaseElectronicPayeePageDirective, deps: [{ token: i1.ActivatedRoute }, { token: BillpayManagePayeeStateService }, { token: i4.BillpayDiscardChangesModalService }], target: i0.ɵɵFactoryTarget.Directive });
BaseElectronicPayeePageDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: BaseElectronicPayeePageDirective, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BaseElectronicPayeePageDirective, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: BillpayManagePayeeStateService }, { type: i4.BillpayDiscardChangesModalService }]; }, propDecorators: { onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });

class BillpayPayverisEbillsEnrolmentWidgetService {
    /** @internal */
    constructor(payverisData, payeesData) {
        this.payverisData = payverisData;
        this.payeesData = payeesData;
        this.widgetStateSource = new Subject();
        this._currentState = PayverisEnrolmentState.Initialize;
        this._componentState = PayverisEnrolmentComponentState.Undefined;
        this._userInputFailed = false;
        this._responses = {};
        this._expectingLoginResponse = true;
        this._expectingOtpEntryResponse = false;
        this._MIN_CALLBACK_TIME = 1;
        this.widgetStateChange = this.widgetStateSource.asObservable();
        this.credentialsResponse = (value) => {
            this._responses.credentialsResponse = value;
        };
        this._payload = {
            payeeID: this._payeeId,
            credentials: [],
        };
    }
    submitPayverisRequest(payload) {
        this._componentState = PayverisEnrolmentComponentState.Checking;
        this._userInputFailed = false;
        return this.payverisData
            .postBillPayPayverisEbillsEnrolment({ billPayPayverisEbillsEnrolmentPostRequestBody: payload }, 'response')
            .pipe(catchError(err => {
            this.handleError(err);
            return new Observable();
        }));
    }
    getPayeeNameFromID(id) {
        return this.payeesData.getElectronicPayeeById({ id: id }).pipe(pluck('payee', 'name'));
    }
    onInitializeEnrolment() {
        if (this._payeeId) {
            this._payload = {
                payeeID: this._payeeId,
                credentials: [],
            };
        }
        else {
            this.handleError(undefined);
            return false;
        }
        this.submitPayverisRequest(this._payload).subscribe(response => {
            this.handleStatusResponse(response);
        });
        return true;
    }
    handleStatusResponse(response) {
        if (this.isBillersResponse(response)) {
            return this.setState(PayverisEnrolmentState.SelectBiller, response, 'billersResponse');
        }
        if (this.isSelectAccountResponse(response)) {
            return this.setState(PayverisEnrolmentState.SelectAccounts, response, 'accountsResponse');
        }
        if (this.isOtpSelectResponse(response)) {
            return this.setState(PayverisEnrolmentState.OtpSelect, response, 'otpTransportResponse');
        }
        if (this.isCaptchaResponse(response)) {
            return this.setState(PayverisEnrolmentState.Captcha, response, 'captchaResponse');
        }
        if (this.isCredentialsResponse(response)) {
            return this.handleCredentialsOnStatusResponse(response);
        }
        if (this.isCallbackResponse(response)) {
            return this.handleCallbackResponse(response);
        }
        if (this.isSuccessResponse(response)) {
            return this.setState(PayverisEnrolmentState.Success);
        }
        this.handleError(undefined);
        return false;
    }
    handleCredentialsOnStatusResponse(response) {
        if (this._expectingLoginResponse) {
            this._expectingLoginResponse = false;
            return this.setState(PayverisEnrolmentState.Login, response, 'credentialsResponse');
        }
        if (this._expectingOtpEntryResponse) {
            this._expectingOtpEntryResponse = false;
            return this.setState(PayverisEnrolmentState.OtpEntry, response, 'otpPasscodeResponse');
        }
        return this.setState(PayverisEnrolmentState.Mfa, response, 'mfaResponse');
    }
    onSubmitBillerSelection(billerSelectedIndex) {
        const billerSelected = this.billers ? this.billers[billerSelectedIndex] : {};
        this._payload = {
            payeeID: this._payeeId,
            biller: billerSelected,
            credentials: [],
        };
        this.submitPayverisRequest(this._payload).subscribe(response => {
            this.handleBillerResponse(response);
        });
    }
    handleBillerResponse(response) {
        if (this.isCredentialsResponse(response)) {
            return this.setState(PayverisEnrolmentState.Login, response, 'credentialsResponse');
        }
        if (this.isCallbackResponse(response)) {
            return this.handleCallbackResponse(response);
        }
        this.handleError(undefined);
        return false;
    }
    onSubmitPayeeLogin(login) {
        var _a;
        if (login && this.loginCredentialsArray && this.loginCredentialsArray.length >= 2) {
            const credentials = (_a = this.loginCredentialsArray) === null || _a === void 0 ? void 0 : _a.map((credentials, i) => {
                return Object.assign(Object.assign({}, credentials), { value: login[i] });
            });
            this._payload = {
                payeeID: this._payeeId,
                credentials: credentials,
            };
        }
        else {
            this.handleError(undefined);
        }
        this.submitPayverisRequest(this._payload).subscribe(response => {
            this.handleCredentialResponse(response);
        });
    }
    handleCredentialResponse(response) {
        if (this.isOtpSelectResponse(response)) {
            return this.setState(PayverisEnrolmentState.OtpSelect, response, 'otpTransportResponse');
        }
        if (this.isCaptchaResponse(response)) {
            return this.setState(PayverisEnrolmentState.Captcha, response, 'captchaResponse');
        }
        if (this.isCredentialsResponse(response)) {
            return this.setState(PayverisEnrolmentState.Mfa, response, 'mfaResponse');
        }
        if (this.isSelectAccountResponse(response)) {
            return this.setState(PayverisEnrolmentState.SelectAccounts, response, 'accountsResponse');
        }
        if (this.isCallbackResponse(response)) {
            return this.handleCallbackResponse(response);
        }
        this.handleError(undefined);
        return false;
    }
    onSubmitPayverisEbillMfa() {
        this._payload = {
            payeeID: this._payeeId,
            credentials: this.mfaArray || [],
        };
        this.submitPayverisRequest(this._payload).subscribe(response => {
            this.handleMfaResponse(response);
        });
    }
    handleMfaResponse(response) {
        if (this.isCredentialsResponse(response)) {
            return this.setState(PayverisEnrolmentState.Mfa, response, 'mfaResponse');
        }
        if (this.isSelectAccountResponse(response)) {
            return this.setState(PayverisEnrolmentState.SelectAccounts, response, 'accountsResponse');
        }
        if (this.isCallbackResponse(response)) {
            return this.handleCallbackResponse(response);
        }
        this.handleError(undefined);
        return false;
    }
    onSubmitPayverisEbillOtpTransportSelection(transportSelectedIndex) {
        this._expectingOtpEntryResponse = true;
        const transportSelected = this.otpTransports ? this.otpTransports[transportSelectedIndex] : {};
        this._otpTransportMethodSelected = transportSelected.value;
        const label = this.getLabelFromResponse(this._responses['otpTransportResponse']);
        const selection = {
            label: label,
            value: transportSelected.id,
        };
        this._payload = {
            payeeID: this._payeeId,
            credentials: [selection],
        };
        this.submitPayverisRequest(this._payload).subscribe(response => {
            this.handleOtpTransportResponse(response);
        });
    }
    handleOtpTransportResponse(response) {
        if (this.isCredentialsResponse(response)) {
            return this.setState(PayverisEnrolmentState.OtpEntry, response, 'otpPasscodeResponse');
        }
        if (this.isCallbackResponse(response)) {
            return this.handleCallbackResponse(response);
        }
        this.handleError(undefined);
        return false;
    }
    onSubmitPayverisEbillPayeeOtpPasscode(passcode) {
        this.submitVerificationStep(this._responses['otpPasscodeResponse'], passcode.passcode);
    }
    onSubmitPayverisEbillPayeeCaptcha(captcha) {
        this.submitVerificationStep(this._responses['captchaResponse'], captcha.captcha);
    }
    submitVerificationStep(previousResponse, credentialValue) {
        this._payload = this.prepareCredentialPayload(previousResponse, credentialValue);
        this.submitPayverisRequest(this._payload).subscribe(response => {
            this.handleVerificationResponse(response);
        });
    }
    prepareCredentialPayload(response, credentialValue) {
        const label = this.getLabelFromResponse(response);
        const selection = {
            label: label,
            value: credentialValue,
        };
        return {
            payeeID: this.payeeId,
            credentials: [selection],
        };
    }
    handleVerificationResponse(response) {
        if (this.isSelectAccountResponse(response)) {
            return this.setState(PayverisEnrolmentState.SelectAccounts, response, 'accountsResponse');
        }
        if (this.isCallbackResponse(response)) {
            return this.handleCallbackResponse(response);
        }
        this.handleError(undefined);
        return false;
    }
    cancelEnrolment() {
        return this.payverisData.deleteBillPayPayverisEbillsEnrolment(this._payload);
    }
    onSubmitPayverisEbillAccountSelection(accountSelectedIndex) {
        const accountSelected = this.accounts ? this.accounts[accountSelectedIndex] : undefined;
        this._payload = {
            payeeID: this._payeeId,
            account: accountSelected,
            credentials: [],
        };
        this.submitPayverisRequest(this._payload).subscribe(response => {
            this.handleAccountsResponse(response);
        });
    }
    handleAccountsResponse(response) {
        if (this.isCallbackResponse(response)) {
            return this.handleCallbackResponse(response);
        }
        if (this.isSuccessResponse(response)) {
            return this.setState(PayverisEnrolmentState.Success, response, 'successResponse');
        }
        this.handleError(undefined);
        return false;
    }
    handleCallbackResponse(response) {
        const callbackTime = BillpayUtilityService.checkForProperty('body.callBackTime', response) || 0;
        const callbackTimeInMs = Math.max(new Date(callbackTime).getTime() - new Date().getTime(), this._MIN_CALLBACK_TIME);
        this.timer = setTimeout(() => {
            this.onInitializeEnrolment();
        }, callbackTimeInMs);
        this._componentState = PayverisEnrolmentComponentState.Callback;
        this.widgetStateSource.next();
        return true;
    }
    cancelCallback() {
        if (this.timer) {
            clearTimeout(this.timer);
        }
    }
    setState(state, response, responseToSet) {
        this._currentState = state;
        this._componentState = PayverisEnrolmentComponentState.Ready;
        if (responseToSet) {
            this._responses[responseToSet] = BillpayUtilityService.checkForProperty('body', response);
        }
        this.widgetStateSource.next();
        return true;
    }
    handleError(error) {
        this._errorState = BillpayUtilityService.checkForProperty(['error', 'errors', 0, 'key'], error);
        if (this._errorState === 'billpay.api.invalidCredentials') {
            this._userInputFailed = true;
            this._componentState = PayverisEnrolmentComponentState.Ready;
            this.widgetStateSource.next();
        }
        else {
            this.setState(PayverisEnrolmentState.ErrorState);
        }
    }
    isCredentialsResponse(response) {
        return !!(response.status === 200 && BillpayUtilityService.checkForProperty('body.authentication.credentials.length', response) > 0);
    }
    isBillersResponse(response) {
        return !!(response.status === 200 && BillpayUtilityService.checkForProperty('body.billers.length', response) > 0);
    }
    isCallbackResponse(response) {
        const accounts = BillpayUtilityService.checkForProperty('body.accounts', response);
        return !!(response.status === 200 &&
            (!accounts || accounts.length === 0) &&
            BillpayUtilityService.checkForProperty('body.callBackRequired', response) &&
            BillpayUtilityService.checkForProperty('body.callBackTime', response));
    }
    isSelectAccountResponse(response) {
        return !!(response.status === 200 && BillpayUtilityService.checkForProperty('body.accounts.length', response) >= 1);
    }
    isOtpSelectResponse(response) {
        return !!(response.status === 200 &&
            BillpayUtilityService.checkForProperty('body.authentication.securityChallenge.oneTimePasscode', response));
    }
    isCaptchaResponse(response) {
        return !!(response.status === 200 &&
            BillpayUtilityService.checkForProperty('body.authentication.securityChallenge.captcha', response) &&
            BillpayUtilityService.checkForProperty('body.authentication.credentials', response));
    }
    isSuccessResponse(response) {
        return !!(response.status === 200 && BillpayUtilityService.checkForProperty('body.payeeID', response));
    }
    getLabelFromResponse(response) {
        return BillpayUtilityService.checkForProperty(['authentication', 'credentials', 0, 'label'], response);
    }
    set payeeId(value) {
        this._payeeId = value;
    }
    get payeeId() {
        return this._payeeId;
    }
    get currentState() {
        return this._currentState;
    }
    get errorState() {
        return this._errorState;
    }
    get componentState() {
        return this._componentState;
    }
    set componentState(value) {
        this._componentState = value;
    }
    get userInputFailed() {
        return this._userInputFailed;
    }
    get loginCredentialsArray() {
        return BillpayUtilityService.checkForProperty('credentialsResponse.authentication.credentials', this._responses) || [];
    }
    get mfaArray() {
        return BillpayUtilityService.checkForProperty('mfaResponse.authentication.credentials', this._responses) || [];
    }
    get billers() {
        return BillpayUtilityService.checkForProperty('billersResponse.billers', this._responses) || [];
    }
    get accounts() {
        return BillpayUtilityService.checkForProperty('accountsResponse.accounts', this._responses) || [];
    }
    get otpTransportMethodSelected() {
        return this._otpTransportMethodSelected;
    }
    checkForPropertyWrapper(propertyBranch) {
        return BillpayUtilityService.checkForProperty(propertyBranch, this._responses);
    }
    get otpTransports() {
        return this.checkForPropertyWrapper('otpTransportResponse.authentication.securityChallenge.oneTimePasscode.deliveryMethods');
    }
    get captchaImageSrc() {
        return this.checkForPropertyWrapper('captchaResponse.authentication.securityChallenge.captcha.image');
    }
    get captchaImageType() {
        return this.checkForPropertyWrapper('captchaResponse.authentication.securityChallenge.captcha.mimeType');
    }
}
BillpayPayverisEbillsEnrolmentWidgetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentWidgetService, deps: [{ token: i1$2.BillPayPayverisService }, { token: i1$2.BillPayPayeesService }], target: i0.ɵɵFactoryTarget.Injectable });
BillpayPayverisEbillsEnrolmentWidgetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentWidgetService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentWidgetService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$2.BillPayPayverisService }, { type: i1$2.BillPayPayeesService }]; } });

class BillpayPayverisEbillsEnrolmentCancelModalComponent {
    constructor() {
        this.resolve = new EventEmitter();
    }
    cancelModal() {
        this.resolve.emit(false);
    }
    confirmModal() {
        this.resolve.emit(true);
    }
}
BillpayPayverisEbillsEnrolmentCancelModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentCancelModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPayverisEbillsEnrolmentCancelModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayverisEbillsEnrolmentCancelModalComponent, selector: "bb-billpay-payveris-ebills-enrolment-cancel-modal", outputs: { resolve: "resolve" }, ngImport: i0, template: "<bb-modal-ui\n  [isOpen]=\"true\"\n  (cancel)=\"cancelModal()\"\n  (confirm)=\"confirmModal()\"\n  data-role=\"cancel-payveris-enrolment-modal\"\n>\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <bb-header-ui\n        headingType=\"h2\"\n        heading=\"Cancel eBill enrolment?\"\n        i18n-heading=\"\n          Cancel eBill enrolment modal header|Header on cancel eBill enrolment modal in payveris ebill enrolment form\n          @@bb-billpay-payveris-ebills-enrolment.modal-header.cancel-enrolment\"\n      >\n      </bb-header-ui>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <span\n        i18n=\"\n          Cancel eBill enrolment modal body|Body on cancel eBill enrolment modal in payveris ebill enrolment form\n          @@bb-billpay-payveris-ebills-enrolment.modal-body.cancel-enrolment\"\n        >Are you sure you want to cancel eBill enrolment? You will lose any details entered.</span\n      >\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui #footerRef>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          (click)=\"confirmModal()\"\n          color=\"danger\"\n          data-role=\"payveris-payee-cancel-enrollment-confirm\"\n          i18n=\"\n            Submit button text|Submit button on cancel eBill enrolment modal in payveris ebill enrolment\n            form@@bb-billpay-payveris-ebills-enrolment.button.composeMessageModal.submitButton\"\n        >\n          Cancel eBill enrolment\n        </button>\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          (click)=\"cancelModal()\"\n          color=\"secondary\"\n          data-role=\"payveris-payee-continue-enrollment-confirm\"\n          i18n=\"\n            Cancel button text|Cancel button on cancel eBill enrolment modal in payveris ebill enrolment\n            form@@bb-billpay-payveris-ebills-enrolment.button..composeMessageModal.cancelButton\"\n        >\n          Continue eBill enrolment\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1$4.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$4.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1$4.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1$4.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1$4.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1$4.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1$4.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentCancelModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payveris-ebills-enrolment-cancel-modal',
                    templateUrl: './billpay-payveris-ebills-enrolment-cancel-modal.component.html',
                }]
        }], propDecorators: { resolve: [{
                type: Output
            }] } });

class BillpayPayverisEbillsEnrolmentSelectBillerComponent {
    constructor() {
        /**
         * Array of applicable payee eBillers to pay.
         */
        this.billers = [];
        /**
         * The current state of the component. Controls loaded elements.
         */
        this.componentState = PayverisEnrolmentComponentState.Undefined;
        this.billerSelect = new EventEmitter();
        this.returnToPayeeList = new EventEmitter();
        this.submitted = false;
        this.selectingBiller = false;
        this.cancelModalOpen = false;
        this.ComponentStates = PayverisEnrolmentComponentState;
    }
    ngOnInit() {
        if (this.billers && this.billers.length === 1) {
            this.billerSelectedIndex = 0;
        }
    }
    onSelectBillerSubmit() {
        this.submitted = true;
        if (this.billerSelectedIndex !== undefined) {
            this.selectingBiller = true;
            this.billerSelect.emit(this.billerSelectedIndex);
        }
    }
    noSelectionMade() {
        return this.billerSelectedIndex === undefined;
    }
    onModalResolve(operationCancelled) {
        this.cancelModalOpen = false;
        if (operationCancelled) {
            this.handleReturnToPayeeList();
        }
    }
    handleReturnToPayeeList() {
        this.returnToPayeeList.emit();
    }
}
BillpayPayverisEbillsEnrolmentSelectBillerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentSelectBillerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPayverisEbillsEnrolmentSelectBillerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayverisEbillsEnrolmentSelectBillerComponent, selector: "bb-billpay-payveris-ebills-enrolment-select-biller", inputs: { payeeName: "payeeName", billers: "billers", componentState: "componentState" }, outputs: { billerSelect: "billerSelect", returnToPayeeList: "returnToPayeeList" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"componentState\">\n  <ng-container *ngSwitchCase=\"ComponentStates.Checking\">\n    <bb-loading-indicator-ui\n      text=\"Checking biller selection...\"\n      i18n-text=\"\n        Checking biller selection|Ebill Payveris Enrolment Widget checking biller selection\n        text@@bb-billpay-payveris-ebills-enrolment-select-biller.checking-biller.text\"\n      loaderSize=\"lg\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Callback\">\n    <bb-loading-indicator-ui\n      text=\"eBill enrolment is taking a little longer than usual, please be patient...\"\n      i18n-text=\"\n        eBill enrolment is taking a little longer than usual, please be patient......|Ebill Payveris Enrolment Widget\n        taking longer than usual text@@bb-billpay-ebills-payveris-enrolment-widget-ang.select-biller-call-back.text\"\n      loaderSize=\"lg\"\n      data-role=\"payveris-callback-info\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Ready\">\n    <div\n      id=\"bb-select-biller\"\n      i18n=\"\n        Biller select prompt|Biller select prompt for payveris ebill enrolment biller select form\n        @@bb-billpay-payveris-ebills-enrolment-select-biller.note.biller-select-prompt\"\n    >\n      Select the biller you would like to get eBills for.\n    </div>\n\n    <form name=\"selectBillerForm\" #f=\"ngForm\" (ngSubmit)=\"onSelectBillerSubmit()\">\n      <!-- lg is chosen as the last element of `bb-input-radio-ui` has 8px bottom margin totalling 32px -->\n      <div class=\"bb-block bb-block--lg\">\n        <bb-input-radio-group-ui\n          name=\"billerID\"\n          id=\"billerID\"\n          aria-labelledby=\"bb-select-biller\"\n          [preselect]=\"false\"\n          [required]=\"true\"\n          [(ngModel)]=\"billerSelectedIndex\"\n          #billerID=\"ngModel\"\n          ngDefaultControl\n        >\n          <bb-input-radio-ui *ngFor=\"let biller of billers; let i = index\" value=\"{{ i }}\" label=\"{{ biller.value }}\">\n          </bb-input-radio-ui>\n        </bb-input-radio-group-ui>\n\n        <bb-input-validation-message-ui\n          [showErrors]=\"submitted && noSelectionMade()\"\n          i18n=\"\n            Select biller warning|Warning on payveris ebill enrolment select biller form\n            @@bb-billpay-payveris-ebills-enrolment-select-biller.warning.select-biller-warning\"\n          data-role=\"payveris-payee-select-biller-multiple-no-selection-warning\"\n        >\n          You must select a biller.\n        </bb-input-validation-message-ui>\n      </div>\n\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          i18n=\"\n            Continue from biller selection|Continue from biller selection button on payveris ebill enrolment biller\n            select form @@bb-billpay-payveris-ebills-enrolment-select-biller.button.continue-from-billers\"\n          data-role=\"payveris-payee-select-biller-continue\"\n        >\n          Continue\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"link\"\n          (click)=\"cancelModalOpen = true\"\n          i18n=\"\n            Cancel enrolment multiple billers|Cancel enrolment button on payveris ebill enrolment multiple biller select\n            form @@bb-billpay-payveris-ebills-enrolment-select-biller.button.cancel-enrolment-multiple-billers\"\n        >\n          Cancel\n        </button>\n      </div>\n    </form>\n  </ng-container>\n</ng-container>\n\n<bb-billpay-payveris-ebills-enrolment-cancel-modal *ngIf=\"cancelModalOpen\" (resolve)=\"onModalResolve($event)\">\n</bb-billpay-payveris-ebills-enrolment-cancel-modal>\n", components: [{ type: i1$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i2$3.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2$3.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: BillpayPayverisEbillsEnrolmentCancelModalComponent, selector: "bb-billpay-payveris-ebills-enrolment-cancel-modal", outputs: ["resolve"] }], directives: [{ type: i5$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1$5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$5.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1$5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentSelectBillerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payveris-ebills-enrolment-select-biller',
                    templateUrl: './billpay-payveris-ebills-enrolment-select-biller.component.html',
                }]
        }], propDecorators: { payeeName: [{
                type: Input
            }], billers: [{
                type: Input
            }], componentState: [{
                type: Input
            }], billerSelect: [{
                type: Output
            }], returnToPayeeList: [{
                type: Output
            }] } });

class BillpayPayverisEbillsEnrolmentLoginComponent {
    /** @internal */
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        /**
         * The current state of the component. Controls loaded elements.
         */
        this.componentState = PayverisEnrolmentComponentState.Undefined;
        /**
         * Displays elements for a failed submission. Defaults to false.
         */
        this.credentialsFailed = false;
        this.returnToPayeeList = new EventEmitter();
        this.payeeLogin = new EventEmitter();
        this.submitted = false;
        this.cancelModalOpen = false;
        this.ComponentStates = PayverisEnrolmentComponentState;
    }
    ngOnInit() {
        var _a;
        this.credentialsArray = (_a = this.credentialsArray) === null || _a === void 0 ? void 0 : _a.map(credentials => {
            return Object.assign(Object.assign({}, credentials), { additions: Object.assign(Object.assign({}, credentials.additions), { label_text: $localize `${credentials.label}` }) });
        });
        this.loginForm = this.formBuilder.group(this.formFields());
    }
    formFields() {
        var _a;
        const group = {};
        (_a = this.credentialsArray) === null || _a === void 0 ? void 0 : _a.forEach((field, i) => {
            group[i] = [field.value || '', Validators.required];
        });
        return group;
    }
    onPayverisLoginSubmit() {
        this.submitted = true;
        if (this.loginForm.valid) {
            this.payeeLogin.emit(this.loginForm.value);
        }
    }
    onModalResolve(operationCancelled) {
        this.cancelModalOpen = false;
        if (operationCancelled) {
            this.handleReturnToPayeeList();
        }
    }
    handleReturnToPayeeList() {
        this.returnToPayeeList.emit();
    }
}
BillpayPayverisEbillsEnrolmentLoginComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentLoginComponent, deps: [{ token: i1$5.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
BillpayPayverisEbillsEnrolmentLoginComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayverisEbillsEnrolmentLoginComponent, selector: "bb-billpay-payveris-ebills-enrolment-login", inputs: { payeeName: "payeeName", credentialsArray: "credentialsArray", componentState: "componentState", credentialsFailed: "credentialsFailed" }, outputs: { returnToPayeeList: "returnToPayeeList", payeeLogin: "payeeLogin" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"componentState\">\n  <ng-container *ngSwitchCase=\"ComponentStates.Checking\">\n    <bb-loading-indicator-ui\n      text=\"Checking credentials...\"\n      i18n-text=\"\n        Ebill Payveris Enrolment Widget checking credentials\n        text@@bb-billpay-ebills-payveris-enrolment-widget-ang.checking-credentials.text\"\n      loaderSize=\"lg\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Callback\">\n    <bb-loading-indicator-ui\n      text=\"eBill enrolment is taking a little longer than usual, please be patient...\"\n      i18n-text=\"\n        Ebill Payveris Enrolment Widget taking longer than usual\n        text@@bb-billpay-ebills-payveris-enrolment-widget-ang.login-call-back.text\"\n      loaderSize=\"lg\"\n      data-role=\"payveris-callback-info\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Ready\">\n    <bb-alert-ui\n      *ngIf=\"credentialsFailed\"\n      title=\"The information you provided is incorrect. Please try again.\"\n      data-role=\"payveris-payee-login-credentials-warning\"\n      i18n-title=\"\n        Login credentials failed alert|Text for login credentials failed\n        alert@@bb-billpay-payveris-ebills-enrolment-login.login-credentials-failed-alert\"\n    >\n    </bb-alert-ui>\n\n    <div\n      class=\"bb-block bb-block--lg\"\n      i18n=\"\n        Login prompt|Login prompt for payveris ebill enrolment login form\n        @@bb-billpay-payveris-ebills-enrolment-login.note.login-prompt\"\n    >\n      Please log in with your {{ payeeName }} credentials. We will only use them to retrieve information about bills.\n    </div>\n\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onPayverisLoginSubmit()\">\n      <div class=\"bb-block bb-block--xl\">\n        <div class=\"bb-block bb-block--sm\" *ngFor=\"let field of credentialsArray; index as i\">\n          <bb-input-text-ui\n            class=\"bb-form-field bb-form-field--md\"\n            [label]=\"field.additions.label_text\"\n            [attr.data-role]=\"'payveris-payee-login-' + i\"\n            [required]=\"true\"\n            [maxLength]=\"255\"\n            [formControlName]=\"i\"\n            *ngIf=\"field.label !== 'password'\"\n            [autofocus]=\"i === 0\"\n          >\n          </bb-input-text-ui>\n\n          <bb-input-password-ui\n            class=\"bb-form-field bb-form-field--md\"\n            [label]=\"field.additions.label_text\"\n            [attr.data-role]=\"'payveris-payee-login-' + i\"\n            [required]=\"true\"\n            [maxLength]=\"255\"\n            [showVisibilityControl]=\"true\"\n            [formControlName]=\"i\"\n            *ngIf=\"field.label === 'password'\"\n          >\n          </bb-input-password-ui>\n\n          <bb-input-validation-message-ui [showErrors]=\"submitted && loginForm?.get(i.toString())?.invalid\">\n            <ng-container\n              i18n=\"\n                You must enter warning|Validity warning for login field on payveris ebill enrolment login form\n                @@bb-billpay-payveris-ebills-enrolment-login.warning.login-warning\"\n            >\n              You must enter\n            </ng-container>\n            {{ field.additions.label_text }}\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          data-role=\"payveris-payee-login-continue\"\n          i18n=\"\n            Continue enrolment|Continue enrolment button on payveris ebill enrolment login form\n            @@bb-billpay-payveris-ebills-enrolment-login.button.continue-enrolment\"\n        >\n          Continue\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"light\"\n          (click)=\"cancelModalOpen = true\"\n          data-role=\"payveris-payee-cancel-enrollment-init\"\n          color=\"link\"\n          i18n=\"\n            Cancel enrolment|Cancel enrolment button on payveris ebill enrolment login form\n            @@bb-billpay-payveris-ebills-enrolment-login.button.cancel-enrolment\"\n        >\n          Cancel\n        </button>\n      </div>\n    </form>\n  </ng-container>\n</ng-container>\n\n<bb-billpay-payveris-ebills-enrolment-cancel-modal *ngIf=\"cancelModalOpen\" (resolve)=\"onModalResolve($event)\">\n</bb-billpay-payveris-ebills-enrolment-cancel-modal>\n", components: [{ type: i1$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i3$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i4$2.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i5$3.InputPasswordComponent, selector: "bb-input-password-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete", "showVisibilityControl", "showPassword", "visibilityControlLabel", "ariaLabel"], outputs: ["toggleVisibility"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: BillpayPayverisEbillsEnrolmentCancelModalComponent, selector: "bb-billpay-payveris-ebills-enrolment-cancel-modal", outputs: ["resolve"] }], directives: [{ type: i5$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i5$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentLoginComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payveris-ebills-enrolment-login',
                    templateUrl: './billpay-payveris-ebills-enrolment-login.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$5.FormBuilder }]; }, propDecorators: { payeeName: [{
                type: Input
            }], credentialsArray: [{
                type: Input
            }], componentState: [{
                type: Input
            }], credentialsFailed: [{
                type: Input
            }], returnToPayeeList: [{
                type: Output
            }], payeeLogin: [{
                type: Output
            }] } });

class BillpayPayverisEbillsEnrolmentMfaEntryComponent {
    constructor() {
        this.submitted = false;
        this.cancelModalOpen = false;
        this.mfaLabel = undefined;
        this.ComponentStates = PayverisEnrolmentComponentState;
        /**
         * The current state of the component. Controls loaded elements.
         */
        this.componentState = PayverisEnrolmentComponentState.Undefined;
        /**
         * Displays elements for a failed submission. Defaults to false.
         */
        this.mfaFailed = false;
        this.returnToPayeeList = new EventEmitter();
        this.mfaEntry = new EventEmitter();
        this.mfaForm = new FormGroup({
            formQuestions: new FormArray([]),
        });
    }
    get formQuestions() {
        return this.mfaForm.get('formQuestions');
    }
    ngOnInit() {
        if (this.mfaArray) {
            this.mfaArray.forEach(() => {
                this.formQuestions.push(new FormControl('', Validators.required));
            });
        }
        this.mfaLabel = BillpayUtilityService.checkForProperty([0, 'label'], this.mfaArray);
    }
    onMfaSubmit() {
        this.submitted = true;
        if (this.mfaForm.valid) {
            this.mfaEntry.emit();
            this.submitted = false;
        }
    }
    onModalResolve(operationCancelled) {
        this.cancelModalOpen = false;
        if (operationCancelled) {
            this.handleReturnToPayeeList();
        }
    }
    handleReturnToPayeeList() {
        this.returnToPayeeList.emit();
    }
}
BillpayPayverisEbillsEnrolmentMfaEntryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentMfaEntryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPayverisEbillsEnrolmentMfaEntryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayverisEbillsEnrolmentMfaEntryComponent, selector: "bb-billpay-payveris-ebills-enrolment-mfa-entry", inputs: { payeeName: "payeeName", mfaArray: "mfaArray", componentState: "componentState", mfaFailed: "mfaFailed" }, outputs: { returnToPayeeList: "returnToPayeeList", mfaEntry: "mfaEntry" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"componentState\">\n  <ng-container *ngSwitchCase=\"ComponentStates.Checking\">\n    <bb-loading-indicator-ui\n      text=\"Checking answer ...\"\n      i18n-text=\"\n        Checking answer|Ebill Payveris Enrolment Widget checking mfa\n        text@@bb-billpay-ebills-payveris-enrolment-mfa-entry.checking-mfa.text\"\n      loaderSize=\"lg\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Callback\">\n    <bb-loading-indicator-ui\n      text=\"eBill enrolment is taking a little longer than usual, please be patient...\"\n      i18n-text=\"\n        Ebill Payveris Enrolment Widget taking longer than usual\n        text@@bb-billpay-ebills-payveris-enrolment-widget-ang.mfa-call-back.text\"\n      loaderSize=\"lg\"\n      data-role=\"payveris-callback-info\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Ready\">\n    <bb-alert-ui\n      *ngIf=\"mfaFailed\"\n      title=\"The answer you provided is incorrect. Please try again.\"\n      data-role=\"payveris-payee-mfa-warning\"\n      i18n-title=\"Mfa failed alert|Text for mfa failed alert@@bb-billpay-payveris-ebills-enrolment-mfa.mfa-failed-alert\"\n    >\n    </bb-alert-ui>\n\n    <div\n      class=\"bb-block bb-block--lg\"\n      i18n=\"\n        mfa prompt|mfa prompt for payveris ebill enrolment mfa\n        form@@bb-billpay-payveris-ebills-enrolment-mfa.note.mfa-prompt\"\n    >\n      Please answer the following security question(s).\n    </div>\n\n    <form [formGroup]=\"mfaForm\" (ngSubmit)=\"onMfaSubmit()\">\n      <div class=\"bb-block bb-block--xl\" formArrayName=\"formQuestions\">\n        <div *ngFor=\"let mfa of mfaArray; let i = index\" class=\"bb-block bb-block--md\">\n          <bb-input-text-ui\n            class=\"bb-form-field bb-form-field--md\"\n            i18n-label=\"\n              mfa label|Label for mfa on payveris ebill mfa form\n              @@bb-billpay-payveris-ebills-enrolment-mfa.label.mfa-label\"\n            label=\"{{ mfaArray[i].label }}\"\n            data-role=\"payveris-payee-mfa-input\"\n            [required]=\"true\"\n            [maxLength]=\"255\"\n            [formControlName]=\"i\"\n            ngDefaultControl\n            autofocus\n          >\n          </bb-input-text-ui>\n\n          <bb-input-validation-message-ui [showErrors]=\"submitted && formQuestions.controls[i].invalid\">\n            <span\n              data-role=\"payveris-payee-mfa-blank-warning\"\n              i18n=\"\n                mfa warning|Validity warning for mfa on payveris ebill enrolment mfa form\n                @@bb-billpay-payveris-ebills-enrolment-mfa.warning.mfa-warning\"\n            >\n              You must submit an answer\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          data-role=\"payveris-payee-mfa-continue\"\n          i18n=\"\n            Continue enrolment|Continue enrolment button on payveris ebill enrolment mfa form\n            @@bb-billpay-payveris-ebills-enrolment-mfa.button.continue-enrolment\"\n        >\n          Continue\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"link\"\n          (click)=\"cancelModalOpen = true\"\n          i18n=\"\n            Cancel enrolment|Cancel enrolment button on payveris ebill enrolment mfa form\n            @@bb-billpay-payveris-ebills-enrolment-mfa.button.cancel-enrolment\"\n        >\n          Cancel\n        </button>\n      </div>\n    </form>\n  </ng-container>\n</ng-container>\n\n<bb-billpay-payveris-ebills-enrolment-cancel-modal *ngIf=\"cancelModalOpen\" (resolve)=\"onModalResolve($event)\">\n</bb-billpay-payveris-ebills-enrolment-cancel-modal>\n", components: [{ type: i1$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i3$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i4$2.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: BillpayPayverisEbillsEnrolmentCancelModalComponent, selector: "bb-billpay-payveris-ebills-enrolment-cancel-modal", outputs: ["resolve"] }], directives: [{ type: i5$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$5.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i5$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1$5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentMfaEntryComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payveris-ebills-enrolment-mfa-entry',
                    templateUrl: './billpay-payveris-ebills-enrolment-mfa-entry.component.html',
                }]
        }], propDecorators: { payeeName: [{
                type: Input
            }], mfaArray: [{
                type: Input
            }], componentState: [{
                type: Input
            }], mfaFailed: [{
                type: Input
            }], returnToPayeeList: [{
                type: Output
            }], mfaEntry: [{
                type: Output
            }] } });

class BillpayPayverisEbillsEnrolmentOtpSelectComponent {
    constructor() {
        this.submitted = false;
        this.cancelModalOpen = false;
        this.ComponentStates = PayverisEnrolmentComponentState;
        /**
         * Array of OTP transport methods.
         */
        this.transports = [];
        /**
         * The current state of the component. Controls loaded elements.
         */
        this.componentState = PayverisEnrolmentComponentState.Undefined;
        this.transportSelect = new EventEmitter();
        this.returnToPayeeList = new EventEmitter();
    }
    ngOnInit() {
        if (this.transports && this.transports.length === 1) {
            this.transportSelectedIndex = 0;
        }
    }
    onSelectTransportSubmit() {
        this.submitted = true;
        if (this.transportSelectedIndex !== undefined) {
            this.transportSelect.emit(this.transportSelectedIndex);
        }
    }
    noSelectionMade() {
        return this.transportSelectedIndex === undefined;
    }
    onModalResolve(operationCancelled) {
        this.cancelModalOpen = false;
        if (operationCancelled) {
            this.handleReturnToPayeeList();
        }
    }
    handleReturnToPayeeList() {
        this.returnToPayeeList.emit();
    }
}
BillpayPayverisEbillsEnrolmentOtpSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentOtpSelectComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPayverisEbillsEnrolmentOtpSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayverisEbillsEnrolmentOtpSelectComponent, selector: "bb-billpay-payveris-ebills-enrolment-otp-select", inputs: { payeeName: "payeeName", transports: "transports", componentState: "componentState" }, outputs: { transportSelect: "transportSelect", returnToPayeeList: "returnToPayeeList" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"componentState\">\n  <ng-container *ngSwitchCase=\"ComponentStates.Checking\">\n    <bb-loading-indicator-ui\n      text=\"Submitting selection...\"\n      i18n-text=\"\n        Submitting selection|Ebill Payveris Enrolment Widget submitting otp selection\n        text@@bb-billpay-ebills-payveris-enrolment-otp-select.submit-otp-selection.text\"\n      loaderSize=\"lg\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Callback\">\n    <bb-loading-indicator-ui\n      text=\"eBill enrolment is taking a little longer than usual, please be patient...\"\n      i18n-text=\"\n        eBill enrolment is taking a little longer than usual, please be patient...|Ebill Payveris Enrolment Widget\n        taking longer than usual text@@bb-billpay-ebills-payveris-enrolment-widget-ang.otp-select-call-back.text\"\n      loaderSize=\"lg\"\n      data-role=\"payveris-callback-info\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Ready\">\n    <ng-container *ngIf=\"transports.length > 1\">\n      <div\n        class=\"bb-block bb-block--sm\"\n        i18n=\"\n          Transport select prompt|Transport select prompt for payveris ebill enrolment transport select form\n          @@bb-billpay-payveris-ebills-enrolment-select-transport.note.transport-select-prompt\"\n      >\n        A one-time passcode (OTP) is required to verify your identity. Please select how you would like to receive it.\n      </div>\n\n      <form name=\"selectTransportForm\" #f=\"ngForm\" (ngSubmit)=\"onSelectTransportSubmit()\">\n        <div class=\"bb-block bb-block--lg\">\n          <bb-input-radio-group-ui\n            name=\"transportID\"\n            id=\"transportID\"\n            aria-labelledby=\"bb-select-transport\"\n            [required]=\"true\"\n            [preselect]=\"false\"\n            [(ngModel)]=\"transportSelectedIndex\"\n            #transportID=\"ngModel\"\n            ngDefaultControl\n          >\n            <bb-input-radio-ui\n              *ngFor=\"let transport of transports; let i = index\"\n              value=\"{{ i }}\"\n              label=\"{{ transport.value }}\"\n              i18n-label=\"\n                Transport type of one-time-passcode radio\n                button@@bb-billpay-payveris-ebills-enrolment-select-transport.radio.label\"\n            >\n            </bb-input-radio-ui>\n          </bb-input-radio-group-ui>\n\n          <bb-input-validation-message-ui [showErrors]=\"submitted && noSelectionMade()\">\n            <span\n              data-role=\"payveris-payee-select-transport-multiple-no-selection-warning\"\n              i18n=\"\n                Select transport warning|Warning on payveris ebill enrolment select transport form\n                @@bb-billpay-payveris-ebills-enrolment-select-transport.warning.select-transport-warning\"\n            >\n              You must select a passcode destination.\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n\n        <div class=\"bb-button-bar bb-button-bar--reverse\">\n          <button\n            class=\"bb-button-bar__button\"\n            bbButton\n            type=\"submit\"\n            i18n=\"\n              Continue from multiple transports|Continue button on payveris ebill enrolment multiple transports select\n              form @@bb-billpay-payveris-ebills-enrolment-select-transports.button.continue-multiple-transports\"\n            data-role=\"payveris-payee-select-transports-multiple-continue\"\n          >\n            Continue\n          </button>\n\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            color=\"link\"\n            (click)=\"cancelModalOpen = true\"\n            i18n=\"\n              Cancel enrolment multiple transports|Cancel enrolment button on payveris ebill enrolment multiple\n              transports select form\n              @@bb-billpay-payveris-ebills-enrolment-select-transport.button.cancel-enrolment-multiple-transports\"\n          >\n            Cancel\n          </button>\n        </div>\n      </form>\n    </ng-container>\n\n    <ng-container *ngIf=\"transports.length === 1\">\n      <div\n        class=\"bb-block bb-block--lg\"\n        i18n=\"\n          Check single transport prompt|Check single transport prompt on payveris ebill enrolment single transport\n          select form @@bb-billpay-payveris-ebills-enrolment-select-transport.button.check-single-transport-prompt\"\n        data-role=\"payveris-payee-select-transport-single-prompt\"\n      >\n        A one-time passcode (OTP) is required to verify your identity. Please confirm the delivery method.\n      </div>\n\n      <div\n        class=\"bb-block bb-block--xl\"\n        i18n=\"\n          Check single transport sub-header|Check single transport sub-header on payveris ebill enrolment single\n          transport select form\n          @@bb-billpay-payveris-ebills-enrolment-select-transport.button.check-single-transport-sub-header\"\n      >\n        {{ transports[0].value }}\n      </div>\n\n      <form name=\"selectTransportForm\" #f=\"ngForm\" (ngSubmit)=\"onSelectTransportSubmit()\">\n        <div class=\"bb-button-bar bb-button-bar--reverse\">\n          <button\n            bbButton\n            type=\"submit\"\n            class=\"bb-button-bar__button\"\n            i18n=\"\n              Continue from single transport|Continue ebills button on payveris ebill enrolment single transport select\n              form @@bb-billpay-payveris-ebills-enrolment-select-transport.button.continue-single-transport\"\n            data-role=\"payveris-payee-select-transport-single-continue\"\n          >\n            Continue\n          </button>\n\n          <button\n            bbButton\n            color=\"link\"\n            (click)=\"cancelModalOpen = true\"\n            class=\"bb-button-bar__button\"\n            i18n=\"\n              Cancel enrolment single transport|Cancel enrolment button on payveris ebill enrolment single transport\n              select form\n              @@bb-billpay-payveris-ebills-enrolment-select-transport.button.cancel-enrolment-single-transport\"\n          >\n            Cancel\n          </button>\n        </div>\n      </form>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<bb-billpay-payveris-ebills-enrolment-cancel-modal *ngIf=\"cancelModalOpen\" (resolve)=\"onModalResolve($event)\">\n</bb-billpay-payveris-ebills-enrolment-cancel-modal>\n", components: [{ type: i1$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i2$3.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2$3.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: BillpayPayverisEbillsEnrolmentCancelModalComponent, selector: "bb-billpay-payveris-ebills-enrolment-cancel-modal", outputs: ["resolve"] }], directives: [{ type: i5$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$5.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1$5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentOtpSelectComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payveris-ebills-enrolment-otp-select',
                    templateUrl: './billpay-payveris-ebills-enrolment-otp-select.component.html',
                }]
        }], propDecorators: { payeeName: [{
                type: Input
            }], transports: [{
                type: Input
            }], componentState: [{
                type: Input
            }], transportSelect: [{
                type: Output
            }], returnToPayeeList: [{
                type: Output
            }] } });

class BillpayPayverisEbillsEnrolmentOtpEntryComponent {
    constructor() {
        this.submitted = false;
        this.cancelModalOpen = false;
        this._passcodeFailed = false;
        this.passcodeRecentlyFailed = false;
        this.ComponentStates = PayverisEnrolmentComponentState;
        /**
         * The current state of the component. Controls loaded elements.
         */
        this.componentState = PayverisEnrolmentComponentState.Undefined;
        this.returnToPayeeList = new EventEmitter();
        this.passcodeEntry = new EventEmitter();
        this.passcodeForm = new FormGroup({
            passcode: new FormControl('', Validators.required),
        });
    }
    set passcodeFailed(hasFailed) {
        this._passcodeFailed = hasFailed;
        this.passcodeRecentlyFailed = hasFailed;
        if (hasFailed) {
            this.passcodeForm.controls['passcode'].markAsDirty();
            this.passcodeForm.controls['passcode'].markAsTouched();
            this.passcodeForm.controls['passcode'].setValue('');
            this.passcodeForm.controls['passcode'].valueChanges.pipe(take(1)).subscribe(() => {
                this.passcodeRecentlyFailed = false;
            });
        }
    }
    /**
     * Displays elements for a failed submission. Invalidates passcode form.
     */
    get passcodeFailed() {
        return this._passcodeFailed;
    }
    onPayverisOtpPasscodeSubmit() {
        this.submitted = true;
        if (this.passcodeForm.valid) {
            this.passcodeEntry.emit(this.passcodeForm.value);
        }
    }
    onModalResolve(operationCancelled) {
        this.cancelModalOpen = false;
        if (operationCancelled) {
            this.handleReturnToPayeeList();
        }
    }
    handleReturnToPayeeList() {
        this.returnToPayeeList.emit();
    }
}
BillpayPayverisEbillsEnrolmentOtpEntryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentOtpEntryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPayverisEbillsEnrolmentOtpEntryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayverisEbillsEnrolmentOtpEntryComponent, selector: "bb-billpay-payveris-ebills-enrolment-otp-entry", inputs: { payeeName: "payeeName", optTransportMethod: "optTransportMethod", componentState: "componentState", passcodeFailed: "passcodeFailed" }, outputs: { returnToPayeeList: "returnToPayeeList", passcodeEntry: "passcodeEntry" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"componentState\">\n  <ng-container *ngSwitchCase=\"ComponentStates.Checking\">\n    <bb-loading-indicator-ui\n      text=\"Checking passcode...\"\n      i18n-text=\"\n        Ebill Payveris Enrolment Widget checking otp passcode\n        text@@bb-billpay-ebills-payveris-enrolment-otp-passcode.checking-otp-passcode.text\"\n      loaderSize=\"lg\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Callback\">\n    <bb-loading-indicator-ui\n      text=\"eBill enrolment is taking a little longer than usual, please be patient...\"\n      i18n-text=\"\n        Ebill Payveris Enrolment Widget taking longer than usual\n        text@@bb-billpay-ebills-payveris-enrolment-widget-ang.otp-entry-call-back.text\"\n      loaderSize=\"lg\"\n      data-role=\"payveris-callback-info\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Ready\">\n    <bb-alert-ui\n      *ngIf=\"passcodeFailed\"\n      title=\"The passcode you provided is incorrect. Please try again.\"\n      i18n-title=\"\n        Text for passcode failed alert@@bb-billpay-payveris-ebills-enrolment-otp-passcode.passcode-failed-alert\"\n      data-role=\"payveris-payee-otp-passcode-warning\"\n    >\n    </bb-alert-ui>\n\n    <div\n      class=\"bb-block bb-block--md\"\n      i18n=\"\n        otp passcode prompt|otp passcode prompt for payveris ebill enrolment otp passcode form\n        @@bb-billpay-payveris-ebills-enrolment-otp-passcode.note.otp-passcode-prompt\"\n    >\n      A one-time passocde (OTP) has been sent to {{ optTransportMethod }}.\n    </div>\n\n    <form [formGroup]=\"passcodeForm\" (ngSubmit)=\"onPayverisOtpPasscodeSubmit()\">\n      <div class=\"bb-block bb-block--xl\">\n        <div class=\"bb-form-field bb-form-field--xs\">\n          <bb-input-text-ui\n            name=\"passcode\"\n            label=\"Passcode\"\n            i18n-label=\"\n              otp passcode label|Label for otp passcode on payveris ebill otp passcode form\n              @@bb-billpay-payveris-ebills-enrolment-otp-passcode.label.otp-passcode-label\"\n            data-role=\"payveris-payee-otp-passcode-input\"\n            [maxLength]=\"255\"\n            formControlName=\"passcode\"\n            [autofocus]=\"true\"\n            ngDefaultControl\n          >\n          </bb-input-text-ui>\n        </div>\n\n        <bb-input-validation-message-ui\n          *ngIf=\"passcodeForm.controls['passcode'].invalid && passcodeRecentlyFailed; else submitPasscode\"\n          [showErrors]=\"true\"\n        >\n          <span\n            i18n=\"\n              Incorrect otp passcode warning|Validity warning for otp passcode on payveris ebill enrolment otp passcode\n              form @@bb-billpay-payveris-ebills-enrolment-otp-passcode.warning.otp-passcode-incorrect\"\n          >\n            Incorrect passcode entered\n          </span>\n        </bb-input-validation-message-ui>\n\n        <ng-template #submitPasscode>\n          <bb-input-validation-message-ui [showErrors]=\"submitted && passcodeForm.controls['passcode'].invalid\">\n            <span\n              data-role=\"payveris-payee-otp-passcode-blank-warning\"\n              i18n=\"\n                Empty otp passcode warning|Empty warning for otp passcode on payveris ebill enrolment otp passcode form\n                @@bb-billpay-payveris-ebills-enrolment-otp-passcode.warning.otp-passcode-empty\"\n            >\n              You must submit a passcode\n            </span>\n          </bb-input-validation-message-ui>\n        </ng-template>\n      </div>\n\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          data-role=\"payveris-payee-otp-passcode-continue\"\n          i18n=\"\n            Continue enrolment|Continue enrolment button on payveris ebill enrolment otp-passcode form\n            @@bb-billpay-payveris-ebills-enrolment-otp-passcode.button.continue-enrolment\"\n        >\n          Continue\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"link\"\n          i18n=\"\n            Cancel enrolment|Cancel enrolment button on payveris ebill enrolment otp passcode form\n            @@bb-billpay-payveris-ebills-enrolment-otp-passcode.button.cancel-enrolment\"\n          (click)=\"cancelModalOpen = true\"\n        >\n          Cancel\n        </button>\n      </div>\n    </form>\n  </ng-container>\n</ng-container>\n\n<bb-billpay-payveris-ebills-enrolment-cancel-modal *ngIf=\"cancelModalOpen\" (resolve)=\"onModalResolve($event)\">\n</bb-billpay-payveris-ebills-enrolment-cancel-modal>\n", components: [{ type: i1$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i3$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i4$2.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: BillpayPayverisEbillsEnrolmentCancelModalComponent, selector: "bb-billpay-payveris-ebills-enrolment-cancel-modal", outputs: ["resolve"] }], directives: [{ type: i5$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentOtpEntryComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payveris-ebills-enrolment-otp-entry',
                    templateUrl: './billpay-payveris-ebills-enrolment-otp-entry.component.html',
                }]
        }], propDecorators: { payeeName: [{
                type: Input
            }], optTransportMethod: [{
                type: Input
            }], componentState: [{
                type: Input
            }], passcodeFailed: [{
                type: Input
            }], returnToPayeeList: [{
                type: Output
            }], passcodeEntry: [{
                type: Output
            }] } });

class BillpayPayverisEbillsEnrolmentCaptchaComponent {
    /** @internal */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.imageSrcRaw = '';
        this.submitted = false;
        this.cancelModalOpen = false;
        this._captchaFailed = false;
        this.captchaRecentlyFailed = false;
        this.ComponentStates = PayverisEnrolmentComponentState;
        /**
         * The current state of the component. Controls loaded elements.
         */
        this.componentState = PayverisEnrolmentComponentState.Undefined;
        this.returnToPayeeList = new EventEmitter();
        this.captchaEntry = new EventEmitter();
        this.captchaForm = new FormGroup({
            captcha: new FormControl('', Validators.required),
        });
    }
    set captchaFailed(hasFailed) {
        this._captchaFailed = hasFailed;
        this.captchaRecentlyFailed = hasFailed;
        if (hasFailed) {
            this.captchaForm.controls['captcha'].markAsDirty();
            this.captchaForm.controls['captcha'].markAsTouched();
            this.captchaForm.controls['captcha'].setValue('');
            this.captchaForm.controls['captcha'].valueChanges.pipe(take(1)).subscribe(() => {
                this.captchaRecentlyFailed = false;
            });
        }
    }
    ngOnInit() {
        const imageType = this.captchaImageType || '';
        const imageSrc = this.captchaImageSrc || '';
        this.imageSrcRaw = `data:${imageType};base64,${imageSrc}`;
        this.imageSrcData = this.sanitizer.bypassSecurityTrustResourceUrl(this.imageSrcRaw);
    }
    /**
     * @return _captchaFailed. Displays elements for a failed submission. Invalidates captcha form.
     */
    get captchaFailed() {
        return this._captchaFailed;
    }
    onCaptchaSubmit() {
        this.submitted = true;
        if (this.captchaForm.valid) {
            this.captchaEntry.emit(this.captchaForm.value);
        }
    }
    onModalResolve(operationCancelled) {
        this.cancelModalOpen = false;
        if (operationCancelled) {
            this.handleReturnToPayeeList();
        }
    }
    handleReturnToPayeeList() {
        this.returnToPayeeList.emit();
    }
}
BillpayPayverisEbillsEnrolmentCaptchaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentCaptchaComponent, deps: [{ token: i1$6.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
BillpayPayverisEbillsEnrolmentCaptchaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayverisEbillsEnrolmentCaptchaComponent, selector: "bb-billpay-payveris-ebills-enrolment-captcha", inputs: { payeeName: "payeeName", captchaImageType: "captchaImageType", captchaImageSrc: "captchaImageSrc", componentState: "componentState", captchaFailed: "captchaFailed" }, outputs: { returnToPayeeList: "returnToPayeeList", captchaEntry: "captchaEntry" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"componentState\">\n  <ng-container *ngSwitchCase=\"ComponentStates.Checking\">\n    <bb-loading-indicator-ui\n      text=\"Checking text...\"\n      i18n-text=\"\n        Ebill Payveris Enrolment Widget checking captcha text\n        text@@bb-billpay-ebills-payveris-enrolment-captcha-ang.checking-captcha-text.text\"\n      loaderSize=\"lg\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Callback\">\n    <bb-loading-indicator-ui\n      text=\"eBill enrolment is taking a little longer than usual, please be patient...\"\n      i18n-text=\"\n        Ebill Payveris Enrolment Widget taking longer than usual\n        text@@bb-billpay-ebills-payveris-enrolment-widget-ang.captcha-call-back.text\"\n      loaderSize=\"lg\"\n      data-role=\"payveris-callback-info\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Ready\">\n    <bb-alert-ui\n      *ngIf=\"captchaFailed\"\n      title=\"The text you provided is incorrect. Please try again.\"\n      i18n-title=\"\n        Captcha failed alert|Text for captcha failed\n        alert@@bb-billpay-payveris-ebills-enrolment-captcha.captcha-failed-alert\"\n      data-role=\"payveris-payee-captcha-warning\"\n    >\n    </bb-alert-ui>\n\n    <div\n      class=\"bb-block bb-block--lg\"\n      i18n=\"\n        captcha prompt|captcha prompt for payveris ebill enrolment captcha form\n        @@bb-billpay-payveris-ebills-enrolment-captcha.note.captcha-prompt\"\n    >\n      Type the characters you see in this image.\n    </div>\n\n    <div class=\"bb-block bb-block--lg\">\n      <img\n        role=\"img\"\n        aria-label=\"Captcha image\"\n        i18n-aria-label=\"Captcha image aria-label@@bb-billpay-payveris-ebills-enrolment-captcha.img.captcha-img\"\n        [src]=\"imageSrcData\"\n        alt=\"Captcha image for payee.\"\n        i18n-alt=\"\n          Catcha image|Catcha image for payveris ebill enrolment captcha form\n          @@bb-billpay-payveris-ebills-enrolment-captcha.image.captcha-image\"\n      />\n    </div>\n\n    <form [formGroup]=\"captchaForm\" (ngSubmit)=\"onCaptchaSubmit()\">\n      <div class=\"bb-block bb-block--xl\">\n        <bb-input-text-ui\n          class=\"bb-form-field bb-form-field--xs\"\n          name=\"captcha\"\n          i18n-label=\"\n            captcha label|Label for captcha on payveris ebill captcha form\n            @@bb-billpay-payveris-ebills-enrolment-captcha.label.captcha-label\"\n          label=\"Type characters\"\n          data-role=\"payveris-payee-captcha-input\"\n          [required]=\"true\"\n          [maxLength]=\"255\"\n          formControlName=\"captcha\"\n          [autofocus]=\"true\"\n          ngDefaultControl\n        >\n        </bb-input-text-ui>\n\n        <bb-input-validation-message-ui\n          *ngIf=\"captchaForm.controls['captcha'].invalid && captchaRecentlyFailed; else submitCaptcha\"\n          [showErrors]=\"true\"\n        >\n          <span\n            i18n=\"\n              Incorrect captcha warning|Validity warning for captcha on payveris ebill enrolment captcha\n              form@@bb-billpay-payveris-ebills-enrolment-captcha.warning.captcha-incorrect\"\n          >\n            Incorrect captcha entered\n          </span>\n        </bb-input-validation-message-ui>\n\n        <ng-template #submitCaptcha>\n          <bb-input-validation-message-ui [showErrors]=\"submitted && captchaForm.controls['captcha'].invalid\">\n            <span\n              data-role=\"payveris-payee-captcha-blank-warning\"\n              i18n=\"\n                Empty captcha warning|Empty warning for captcha on payveris ebill enrolment captcha\n                form@@bb-billpay-payveris-ebills-enrolment-captcha.warning.captcha-empty\"\n            >\n              Please enter the captcha text shown\n            </span>\n          </bb-input-validation-message-ui>\n        </ng-template>\n      </div>\n\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          data-role=\"payveris-payee-captcha-continue\"\n          i18n=\"\n            Continue enrolment|Continue enrolment button on payveris ebill enrolment captcha form\n            @@bb-billpay-payveris-ebills-enrolment-captcha.button.continue-enrolment\"\n        >\n          Continue\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"link\"\n          (click)=\"cancelModalOpen = true\"\n          i18n=\"\n            Cancel enrolment|Cancel enrolment button on payveris ebill enrolment captcha form\n            @@bb-billpay-payveris-ebills-enrolment-captcha.button.cancel-enrolment\"\n        >\n          Cancel\n        </button>\n      </div>\n    </form>\n  </ng-container>\n</ng-container>\n\n<bb-billpay-payveris-ebills-enrolment-cancel-modal *ngIf=\"cancelModalOpen\" (resolve)=\"onModalResolve($event)\">\n</bb-billpay-payveris-ebills-enrolment-cancel-modal>\n", components: [{ type: i1$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i3$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i4$2.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: BillpayPayverisEbillsEnrolmentCancelModalComponent, selector: "bb-billpay-payveris-ebills-enrolment-cancel-modal", outputs: ["resolve"] }], directives: [{ type: i5$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1$5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentCaptchaComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payveris-ebills-enrolment-captcha',
                    templateUrl: './billpay-payveris-ebills-enrolment-captcha.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$6.DomSanitizer }]; }, propDecorators: { payeeName: [{
                type: Input
            }], captchaImageType: [{
                type: Input
            }], captchaImageSrc: [{
                type: Input
            }], componentState: [{
                type: Input
            }], captchaFailed: [{
                type: Input
            }], returnToPayeeList: [{
                type: Output
            }], captchaEntry: [{
                type: Output
            }] } });

class BillpayPayverisEbillsEnrolmentSelectAccountComponent {
    constructor() {
        /**
         * Array of biller accounts.
         */
        this.accounts = [];
        /**
         * The current state of the component. Controls loaded elements.
         */
        this.componentState = PayverisEnrolmentComponentState.Undefined;
        this.accountSelect = new EventEmitter();
        this.returnToPayeeList = new EventEmitter();
        this.submitted = false;
        this.cancelModalOpen = false;
        this.ComponentStates = PayverisEnrolmentComponentState;
    }
    ngOnInit() {
        if (this.accounts && this.accounts.length === 1) {
            this.accountSelectedIndex = 0;
        }
    }
    onSelectAccountSubmit() {
        this.submitted = true;
        if (this.accountSelectedIndex !== undefined) {
            this.accountSelect.emit(this.accountSelectedIndex);
        }
    }
    noSelectionMade() {
        return this.accountSelectedIndex === undefined;
    }
    onModalResolve(operationCancelled) {
        this.cancelModalOpen = false;
        if (operationCancelled) {
            this.handleReturnToPayeeList();
        }
    }
    handleReturnToPayeeList() {
        this.returnToPayeeList.emit();
    }
}
BillpayPayverisEbillsEnrolmentSelectAccountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentSelectAccountComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPayverisEbillsEnrolmentSelectAccountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayverisEbillsEnrolmentSelectAccountComponent, selector: "bb-billpay-payveris-ebills-enrolment-select-account", inputs: { payeeName: "payeeName", accounts: "accounts", componentState: "componentState" }, outputs: { accountSelect: "accountSelect", returnToPayeeList: "returnToPayeeList" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"componentState\">\n  <ng-container *ngSwitchCase=\"ComponentStates.Checking\">\n    <bb-loading-indicator-ui\n      text=\"Checking account...\"\n      i18n-text=\"\n        Checking account...|Ebill Payveris Enrolment Widget checking account\n        text@@bb-billpay-ebills-payveris-enrolment-widget-ang.checking-account.text\"\n      loaderSize=\"lg\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Callback\">\n    <bb-loading-indicator-ui\n      text=\"eBill enrolment is taking a little longer than usual, please be patient...\"\n      i18n-text=\"\n        eBill enrolment is taking a little longer than usual, please be patient...|Ebill Payveris Enrolment Widget\n        taking longer than usual text@@bb-billpay-ebills-payveris-enrolment-widget-ang.select-account-call-back.text\"\n      loaderSize=\"lg\"\n      data-role=\"payveris-callback-info\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Ready\">\n    <ng-container *ngIf=\"accounts.length > 1\">\n      <div\n        i18n=\"\n          Account select prompt|Account select prompt for payveris ebill enrolment account select form\n          @@bb-billpay-payveris-ebills-enrolment-select-account.note.account-select-prompt\"\n      >\n        There are multiple accounts associated with this login ID. Please choose the correct one.\n      </div>\n\n      <form name=\"selectAccountForm\" #f=\"ngForm\" (ngSubmit)=\"onSelectAccountSubmit()\">\n        <div class=\"bb-block bb-block--lg\">\n          <bb-input-radio-group-ui\n            name=\"accountID\"\n            id=\"accountID\"\n            aria-labelledby=\"bb-select-account\"\n            [preselect]=\"false\"\n            [required]=\"true\"\n            [(ngModel)]=\"accountSelectedIndex\"\n            #accountID=\"ngModel\"\n          >\n            <bb-input-radio-ui\n              *ngFor=\"let account of accounts; let i = index\"\n              value=\"{{ i }}\"\n              label=\"{{ account.value }}\"\n            >\n            </bb-input-radio-ui>\n          </bb-input-radio-group-ui>\n\n          <bb-input-validation-message-ui [showErrors]=\"submitted && noSelectionMade()\">\n            <span\n              i18n=\"\n                Select account warning|Warning on payveris ebill enrolment select account form\n                @@bb-billpay-payveris-ebills-enrolment-select-account.warning.select-account-warning\"\n              data-role=\"payveris-payee-select-account-multiple-no-selection-warning\"\n            >\n              You must select an account.\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n\n        <div class=\"bb-button-bar bb-button-bar--reverse\">\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            type=\"submit\"\n            i18n=\"\n              Enable ebills multiple accounts|Enable ebills button on payveris ebill enrolment multiple account select\n              form @@bb-billpay-payveris-ebills-enrolment-select-account.button.enable-ebills-multiple-accounts\"\n            data-role=\"payveris-payee-select-account-multiple-enable-ebills\"\n          >\n            Enable eBills\n          </button>\n\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            color=\"link\"\n            (click)=\"cancelModalOpen = true\"\n            i18n=\"\n              Cancel enrolment multiple accounts|Cancel enrolment button on payveris ebill enrolment multiple account\n              select form\n              @@bb-billpay-payveris-ebills-enrolment-select-account.button.cancel-enrolment-multiple-accounts\"\n          >\n            Cancel\n          </button>\n        </div>\n      </form>\n    </ng-container>\n\n    <ng-container *ngIf=\"accounts.length === 1\">\n      <div\n        class=\"bb-block bb-block--lg\"\n        i18n=\"\n          Check single account prompt|Check single account prompt on payveris ebill enrolment single account select form\n          @@bb-billpay-payveris-ebills-enrolment-select-account.button.check-single-account-prompt\"\n        data-role=\"payveris-payee-select-account-single-prompt\"\n      >\n        Please check your account details to ensure you receive the correct bills for this payee.\n      </div>\n\n      <div\n        class=\"bb-block bb-block--xl\"\n        i18n=\"\n          Check single account sub-header|Check single account sub-header on payveris ebill enrolment single account\n          select form @@bb-billpay-payveris-ebills-enrolment-select-account.button.check-single-account-sub-header\"\n      >\n        {{ accounts[0].value }}\n      </div>\n\n      <form name=\"selectAccountForm\" #f=\"ngForm\" (ngSubmit)=\"onSelectAccountSubmit()\">\n        <div class=\"bb-button-bar bb-button-bar--reverse\">\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            type=\"submit\"\n            i18n=\"\n              Enable ebills single account|Enable ebills button on payveris ebill enrolment single account select form\n              @@bb-billpay-payveris-ebills-enrolment-select-account.button.enable-ebills-single-account\"\n            data-role=\"payveris-payee-select-account-single-enable-ebills\"\n          >\n            Enable eBills\n          </button>\n\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            color=\"link\"\n            (click)=\"cancelModalOpen = true\"\n            i18n=\"\n              Cancel enrolment single account|Cancel enrolment button on payveris ebill enrolment single account select\n              form @@bb-billpay-payveris-ebills-enrolment-select-account.button.cancel-enrolment-single-account\"\n          >\n            Cancel\n          </button>\n        </div>\n      </form>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<bb-billpay-payveris-ebills-enrolment-cancel-modal *ngIf=\"cancelModalOpen\" (resolve)=\"onModalResolve($event)\">\n</bb-billpay-payveris-ebills-enrolment-cancel-modal>\n", components: [{ type: i1$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i2$3.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2$3.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: BillpayPayverisEbillsEnrolmentCancelModalComponent, selector: "bb-billpay-payveris-ebills-enrolment-cancel-modal", outputs: ["resolve"] }], directives: [{ type: i5$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$5.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentSelectAccountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payveris-ebills-enrolment-select-account',
                    templateUrl: './billpay-payveris-ebills-enrolment-select-account.component.html',
                }]
        }], propDecorators: { payeeName: [{
                type: Input
            }], accounts: [{
                type: Input
            }], componentState: [{
                type: Input
            }], accountSelect: [{
                type: Output
            }], returnToPayeeList: [{
                type: Output
            }] } });

class BillpayPayverisEbillsEnrolmentErrorComponent {
    constructor() {
        this.returnToPayeeList = new EventEmitter();
    }
    handleReturnToPayeeList() {
        this.returnToPayeeList.emit();
    }
}
BillpayPayverisEbillsEnrolmentErrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentErrorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPayverisEbillsEnrolmentErrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayverisEbillsEnrolmentErrorComponent, selector: "bb-billpay-payveris-ebills-enrolment-error", inputs: { errorState: "errorState" }, outputs: { returnToPayeeList: "returnToPayeeList" }, ngImport: i0, template: "<div [ngSwitch]=\"errorState\">\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'billpay.api.invalidCredentials'\"\n    title=\"The information you entered is incorrect. Please try again.\"\n    i18n-title=\"\n      The information you provided is incorrect. Please try again.|eBills Payveris Enrolment invalid credentials\n      error@@bb-billpay-ebills-payveris-enrolment-error.title.invalid-credentials-error\"\n    iconSize=\"lg\"\n    iconModifier=\"error-outline\"\n    iconColor=\"danger\"\n  ></bb-empty-state-ui>\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'billpay.api.ebillsAlreadyEnabled'\"\n    title=\"eBills are already enabled for the payee.\"\n    i18n-title=\"\n      eBills are already enabled for the payee.|eBills Payveris Enrolment eBills already enabled\n      error@@bb-billpay-ebills-payveris-enrolment-error.title.ebills-already-enabled-error\"\n    iconSize=\"lg\"\n    iconModifier=\"error-outline\"\n    iconColor=\"danger\"\n  ></bb-empty-state-ui>\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'billpay.api.ebillsNotEnabled'\"\n    title=\"eBills are not enabled for the payee.\"\n    i18n-title=\"\n      eBills are not enabled for the payee.|eBills Payveris Enrolment eBills not enabled\n      error@@bb-billpay-ebills-payveris-enrolment-error.title.ebills-not-enabled-error\"\n    iconSize=\"lg\"\n    iconModifier=\"error-outline\"\n    iconColor=\"danger\"\n  ></bb-empty-state-ui>\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'billpay.api.payeeNotEbillCapable'\"\n    title=\"The payee does not support eBills.\"\n    i18n-title=\"\n      The payee is not capable of eBills.|eBills Payveris Enrolment payee not eBill capable\n      error@@bb-billpay-ebills-payveris-enrolment-error.title.payee-not-ebill-capable-error\"\n    iconSize=\"lg\"\n    iconModifier=\"error-outline\"\n    iconColor=\"danger\"\n  ></bb-empty-state-ui>\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'billpay.api.noValidEbillAccounts'\"\n    title=\"There are no accounts that support eBills for this payee.\"\n    i18n-title=\"\n      There are no valid eBill accounts found for the payee.|eBills Payveris Enrolment no valid eBill accounts\n      error@@bb-billpay-ebills-payveris-enrolment-error.title.payee-no-valid-ebill-accounts-error\"\n    iconSize=\"lg\"\n    iconModifier=\"error-outline\"\n    iconColor=\"danger\"\n  ></bb-empty-state-ui>\n  <bb-empty-state-ui\n    *ngSwitchDefault\n    title=\"An error occurred. Please try again later.\"\n    i18n-title=\"\n      An error occurred. Please try again later.|eBills Payveris Enrolment general\n      error@@bb-billpay-ebills-payveris-enrolment-error.title.general-error\"\n    iconSize=\"lg\"\n    iconModifier=\"error-outline\"\n    iconColor=\"danger\"\n  ></bb-empty-state-ui>\n</div>\n", components: [{ type: i10$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i5$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i5$1.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentErrorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payveris-ebills-enrolment-error',
                    templateUrl: './billpay-payveris-ebills-enrolment-error.component.html',
                }]
        }], propDecorators: { errorState: [{
                type: Input
            }], returnToPayeeList: [{
                type: Output
            }] } });

class BillpayPayverisEbillsEnrolmentNotificationSuccessComponent {
    /** @internal */
    constructor(notificationService) {
        this.notificationService = notificationService;
        /**
         * Time until the notification disappears in milliseconds.
         */
        this.ttl = 5000;
        /**
         * The modal message.
         */
        this.message = '';
    }
    ngOnInit() {
        this.notificationService.showNotification({
            header: this.header,
            message: this.message,
            dismissible: true,
            modifier: 'success',
            ttl: this.ttl,
        });
    }
}
BillpayPayverisEbillsEnrolmentNotificationSuccessComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentNotificationSuccessComponent, deps: [{ token: i5$2.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
BillpayPayverisEbillsEnrolmentNotificationSuccessComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayverisEbillsEnrolmentNotificationSuccessComponent, selector: "bb-billpay-payveris-ebills-enrolment-notification-success", inputs: { ttl: "ttl", header: "header", message: "message" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentNotificationSuccessComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payveris-ebills-enrolment-notification-success',
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: i5$2.NotificationService }]; }, propDecorators: { ttl: [{
                type: Input
            }], header: [{
                type: Input
            }], message: [{
                type: Input
            }] } });

class EbillsEnrolmentViewComponent {
    /** @internal */
    constructor(payverisEbillsEnrolmentWidgetService, route, ref, routerService) {
        this.payverisEbillsEnrolmentWidgetService = payverisEbillsEnrolmentWidgetService;
        this.route = route;
        this.ref = ref;
        this.routerService = routerService;
        this.EnrolmentStates = PayverisEnrolmentState;
        this.ComponentStates = PayverisEnrolmentComponentState;
        this.destroy$ = new Subject();
        this.payverisEnrolmentSuccessHeaderMessage = '';
        this.payverisEnrolmentSuccessMessage = '';
    }
    ngOnInit() {
        this.payverisEbillsEnrolmentWidgetService.widgetStateChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.ref.detectChanges();
            if (this.currentState === PayverisEnrolmentState.Success) {
                this.goToPayeeList();
            }
        });
        this.payverisEbillsEnrolmentWidgetService.payeeId = this.route.snapshot.params['payeeID'] || undefined;
        if (this.payeeId) {
            this.payeeName = this.payverisEbillsEnrolmentWidgetService.getPayeeNameFromID(this.payeeId);
        }
        this.payverisEbillsEnrolmentWidgetService.onInitializeEnrolment();
    }
    submitPayeeLogin(login) {
        this.payverisEbillsEnrolmentWidgetService.onSubmitPayeeLogin(login);
    }
    submitBiller(billerSelectedIndex) {
        this.payverisEbillsEnrolmentWidgetService.onSubmitBillerSelection(billerSelectedIndex);
    }
    submitMfa() {
        this.payverisEbillsEnrolmentWidgetService.onSubmitPayverisEbillMfa();
    }
    submitOtpTransport(transportSelectedIndex) {
        this.payverisEbillsEnrolmentWidgetService.onSubmitPayverisEbillOtpTransportSelection(transportSelectedIndex);
    }
    submitOtpPasscode(passcode) {
        this.payverisEbillsEnrolmentWidgetService.onSubmitPayverisEbillPayeeOtpPasscode(passcode);
    }
    submitCaptcha(captcha) {
        this.payverisEbillsEnrolmentWidgetService.onSubmitPayverisEbillPayeeCaptcha(captcha);
    }
    submitPayverisEbillAccountSelection(accountSelectedIndex) {
        this.payverisEbillsEnrolmentWidgetService.onSubmitPayverisEbillAccountSelection(accountSelectedIndex);
    }
    goToPayeeList() {
        this.payverisEbillsEnrolmentWidgetService.cancelEnrolment().subscribe();
        this.routerService.navigateToPayeeList({ relativeTo: this.route.parent });
    }
    get payeeId() {
        return this.payverisEbillsEnrolmentWidgetService.payeeId;
    }
    get currentState() {
        return this.payverisEbillsEnrolmentWidgetService.currentState;
    }
    get errorState() {
        return this.payverisEbillsEnrolmentWidgetService.errorState;
    }
    get loginCredentialsArray() {
        return this.payverisEbillsEnrolmentWidgetService.loginCredentialsArray;
    }
    get mfaArray() {
        return this.payverisEbillsEnrolmentWidgetService.mfaArray;
    }
    get componentState() {
        return this.payverisEbillsEnrolmentWidgetService.componentState;
    }
    get userInputFailed() {
        return this.payverisEbillsEnrolmentWidgetService.userInputFailed;
    }
    get otpTransportMethodSelected() {
        return this.payverisEbillsEnrolmentWidgetService.otpTransportMethodSelected;
    }
    get otpTransports() {
        return this.payverisEbillsEnrolmentWidgetService.otpTransports;
    }
    get captchaImageType() {
        return this.payverisEbillsEnrolmentWidgetService.captchaImageType;
    }
    get captchaImageSrc() {
        return this.payverisEbillsEnrolmentWidgetService.captchaImageSrc;
    }
    get accounts() {
        return this.payverisEbillsEnrolmentWidgetService.accounts;
    }
    get billers() {
        return this.payverisEbillsEnrolmentWidgetService.billers;
    }
    ngOnDestroy() {
        this.payverisEbillsEnrolmentWidgetService.cancelCallback();
        this.destroy$.next();
        this.destroy$.complete();
    }
}
EbillsEnrolmentViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EbillsEnrolmentViewComponent, deps: [{ token: BillpayPayverisEbillsEnrolmentWidgetService }, { token: i1.ActivatedRoute }, { token: i0.ChangeDetectorRef }, { token: ManagePayeesNavigationService }], target: i0.ɵɵFactoryTarget.Component });
EbillsEnrolmentViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: EbillsEnrolmentViewComponent, selector: "bb-billpay-ebills-enrolment-view", inputs: { dismissTimeoutValue: "dismissTimeoutValue" }, viewQueries: [{ propertyName: "payverisEnrolmentSuccessHeaderMessage", first: true, predicate: ["payverisEnrolmentSuccessHeaderMessage"], descendants: true }, { propertyName: "payverisEnrolmentSuccessMessage", first: true, predicate: ["payverisEnrolmentSuccessMessage"], descendants: true }], ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <button\n    bbButton\n    class=\"bb-block bb-block--md pl-0\"\n    (click)=\"goToPayeeList()\"\n    data-role=\"payveris-payee-login-return-to-payee-list-link\"\n    color=\"link\"\n  >\n    <bb-icon-ui name=\"arrow-back\" size=\"md\"></bb-icon-ui>\n    <span\n      i18n=\"\n        Back to payee list button|Button on login page for returning to payee list\n        @@bb-billpay-payveris-ebills-enrolment-login.button.back-to-payee-list\"\n      >Back to payee list</span\n    >\n  </button>\n  <bb-header-ui\n    headingType=\"h1\"\n    heading=\"Get eBills for '{{ payeeName | async }}'\"\n    i18n-heading=\"\n      Get ebills for payee|Header on payveris ebill enrolment login form\n      @@bb-billpay-payveris-ebills-enrolment-login.main-header.get-ebills-for-payee\"\n    data-role=\"payveris-payee-login-header\"\n  >\n  </bb-header-ui>\n</div>\n\n<div class=\"card card-lg\">\n  <div class=\"card-body\">\n    <ng-container [ngSwitch]=\"currentState\">\n      <ng-container *ngSwitchCase=\"EnrolmentStates.Initialize\">\n        <ng-container [ngSwitch]=\"componentState\">\n          <bb-loading-indicator-ui\n            *ngSwitchCase=\"ComponentStates.Checking\"\n            loaderSize=\"lg\"\n            text=\"Initializing...\"\n            i18n-text=\"\n              Initializing...|Ebill Payveris Enrolment Widget initializing\n              text@@bb-billpay-ebills-payveris-enrolment-widget-ang.initializing.text\"\n          >\n          </bb-loading-indicator-ui>\n\n          <bb-loading-indicator-ui\n            *ngSwitchCase=\"ComponentStates.Callback\"\n            text=\"eBill enrolment is taking a little longer than usual, please be patient...\"\n            i18n-text=\"\n              eBill enrolment is taking a little longer than usual, please be patient...|Ebill Payveris Enrolment Widget\n              taking longer than usual text@@bb-billpay-ebills-payveris-enrolment-widget-ang.initializing-callback.text\"\n            loaderSize=\"lg\"\n            data-role=\"payveris-callback-info\"\n          ></bb-loading-indicator-ui>\n        </ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"payeeName | async as name\">\n        <bb-billpay-payveris-ebills-enrolment-select-biller\n          *ngSwitchCase=\"EnrolmentStates.SelectBiller\"\n          [payeeName]=\"name\"\n          [componentState]=\"componentState\"\n          [billers]=\"billers\"\n          (billerSelect)=\"submitBiller($event)\"\n          (returnToPayeeList)=\"goToPayeeList()\"\n        ></bb-billpay-payveris-ebills-enrolment-select-biller>\n\n        <bb-billpay-payveris-ebills-enrolment-login\n          *ngSwitchCase=\"EnrolmentStates.Login\"\n          [payeeName]=\"name\"\n          [componentState]=\"componentState\"\n          [credentialsFailed]=\"userInputFailed\"\n          [credentialsArray]=\"loginCredentialsArray\"\n          (payeeLogin)=\"submitPayeeLogin($event)\"\n          (returnToPayeeList)=\"goToPayeeList()\"\n        ></bb-billpay-payveris-ebills-enrolment-login>\n\n        <bb-billpay-payveris-ebills-enrolment-mfa-entry\n          *ngSwitchCase=\"EnrolmentStates.Mfa\"\n          [payeeName]=\"name\"\n          [mfaArray]=\"mfaArray\"\n          [componentState]=\"componentState\"\n          [mfaFailed]=\"userInputFailed\"\n          (mfaEntry)=\"submitMfa()\"\n          (returnToPayeeList)=\"goToPayeeList()\"\n        ></bb-billpay-payveris-ebills-enrolment-mfa-entry>\n\n        <bb-billpay-payveris-ebills-enrolment-otp-select\n          *ngSwitchCase=\"EnrolmentStates.OtpSelect\"\n          [payeeName]=\"name\"\n          [componentState]=\"componentState\"\n          [transports]=\"otpTransports\"\n          (transportSelect)=\"submitOtpTransport($event)\"\n          (returnToPayeeList)=\"goToPayeeList()\"\n        ></bb-billpay-payveris-ebills-enrolment-otp-select>\n\n        <bb-billpay-payveris-ebills-enrolment-otp-entry\n          *ngSwitchCase=\"EnrolmentStates.OtpEntry\"\n          [payeeName]=\"name\"\n          [optTransportMethod]=\"otpTransportMethodSelected\"\n          [componentState]=\"componentState\"\n          [passcodeFailed]=\"userInputFailed\"\n          (passcodeEntry)=\"submitOtpPasscode($event)\"\n          (returnToPayeeList)=\"goToPayeeList()\"\n        ></bb-billpay-payveris-ebills-enrolment-otp-entry>\n\n        <bb-billpay-payveris-ebills-enrolment-captcha\n          *ngSwitchCase=\"EnrolmentStates.Captcha\"\n          [payeeName]=\"name\"\n          [captchaImageType]=\"captchaImageType\"\n          [captchaImageSrc]=\"captchaImageSrc\"\n          [componentState]=\"componentState\"\n          [captchaFailed]=\"userInputFailed\"\n          (captchaEntry)=\"submitCaptcha($event)\"\n          (returnToPayeeList)=\"goToPayeeList()\"\n        ></bb-billpay-payveris-ebills-enrolment-captcha>\n\n        <bb-billpay-payveris-ebills-enrolment-select-account\n          *ngSwitchCase=\"EnrolmentStates.SelectAccounts\"\n          [payeeName]=\"name\"\n          [componentState]=\"componentState\"\n          [accounts]=\"accounts\"\n          (accountSelect)=\"submitPayverisEbillAccountSelection($event)\"\n          (returnToPayeeList)=\"goToPayeeList()\"\n        ></bb-billpay-payveris-ebills-enrolment-select-account>\n\n        <bb-billpay-payveris-ebills-enrolment-error\n          *ngSwitchCase=\"EnrolmentStates.ErrorState\"\n          [errorState]=\"errorState\"\n          (returnToPayeeList)=\"goToPayeeList()\"\n        ></bb-billpay-payveris-ebills-enrolment-error>\n\n        <bb-billpay-payveris-ebills-enrolment-notification-success\n          *ngSwitchCase=\"EnrolmentStates.Success\"\n          [ttl]=\"dismissTimeoutValue\"\n          [header]=\"payverisEnrolmentSuccessHeaderMessage\"\n          [message]=\"payverisEnrolmentSuccessMessage2\"\n        ></bb-billpay-payveris-ebills-enrolment-notification-success>\n\n        <ng-template #payverisEnrolmentSuccessMessage2>\n          <span\n            i18n=\"\n              eBills enabled|eBills enabled successfully notification\n              message@@bb-billpay-payveris-ebills-enrolment.notification.successBody\"\n            >eBills for the payee &apos;{{ name }}&apos; have been enabled successfully</span\n          >\n        </ng-template>\n      </ng-container>\n    </ng-container>\n  </div>\n</div>\n<ng-template #payverisEnrolmentSuccessHeaderMessage>\n  <span\n    i18n=\"\n      eBills enabled|eBills enabled successfully notification\n      header@@bb-billpay-payveris-ebills-enrolment.notification.successHeader\"\n    >eBills enabled</span\n  >\n</ng-template>\n", components: [{ type: i4$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: BillpayPayverisEbillsEnrolmentSelectBillerComponent, selector: "bb-billpay-payveris-ebills-enrolment-select-biller", inputs: ["payeeName", "billers", "componentState"], outputs: ["billerSelect", "returnToPayeeList"] }, { type: BillpayPayverisEbillsEnrolmentLoginComponent, selector: "bb-billpay-payveris-ebills-enrolment-login", inputs: ["payeeName", "credentialsArray", "componentState", "credentialsFailed"], outputs: ["returnToPayeeList", "payeeLogin"] }, { type: BillpayPayverisEbillsEnrolmentMfaEntryComponent, selector: "bb-billpay-payveris-ebills-enrolment-mfa-entry", inputs: ["payeeName", "mfaArray", "componentState", "mfaFailed"], outputs: ["returnToPayeeList", "mfaEntry"] }, { type: BillpayPayverisEbillsEnrolmentOtpSelectComponent, selector: "bb-billpay-payveris-ebills-enrolment-otp-select", inputs: ["payeeName", "transports", "componentState"], outputs: ["transportSelect", "returnToPayeeList"] }, { type: BillpayPayverisEbillsEnrolmentOtpEntryComponent, selector: "bb-billpay-payveris-ebills-enrolment-otp-entry", inputs: ["payeeName", "optTransportMethod", "componentState", "passcodeFailed"], outputs: ["returnToPayeeList", "passcodeEntry"] }, { type: BillpayPayverisEbillsEnrolmentCaptchaComponent, selector: "bb-billpay-payveris-ebills-enrolment-captcha", inputs: ["payeeName", "captchaImageType", "captchaImageSrc", "componentState", "captchaFailed"], outputs: ["returnToPayeeList", "captchaEntry"] }, { type: BillpayPayverisEbillsEnrolmentSelectAccountComponent, selector: "bb-billpay-payveris-ebills-enrolment-select-account", inputs: ["payeeName", "accounts", "componentState"], outputs: ["accountSelect", "returnToPayeeList"] }, { type: BillpayPayverisEbillsEnrolmentErrorComponent, selector: "bb-billpay-payveris-ebills-enrolment-error", inputs: ["errorState"], outputs: ["returnToPayeeList"] }, { type: BillpayPayverisEbillsEnrolmentNotificationSuccessComponent, selector: "bb-billpay-payveris-ebills-enrolment-notification-success", inputs: ["ttl", "header", "message"] }], directives: [{ type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i5$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5$1.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EbillsEnrolmentViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-ebills-enrolment-view',
                    templateUrl: './billpay-ebills-enrolment-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: BillpayPayverisEbillsEnrolmentWidgetService }, { type: i1.ActivatedRoute }, { type: i0.ChangeDetectorRef }, { type: ManagePayeesNavigationService }]; }, propDecorators: { dismissTimeoutValue: [{
                type: Input
            }], payverisEnrolmentSuccessHeaderMessage: [{
                type: ViewChild,
                args: ['payverisEnrolmentSuccessHeaderMessage']
            }], payverisEnrolmentSuccessMessage: [{
                type: ViewChild,
                args: ['payverisEnrolmentSuccessMessage']
            }] } });

class ManagePayeeViewComponent {
    constructor(routerService, route) {
        this.routerService = routerService;
        this.route = route;
        this.editMode = false;
    }
    ngOnInit() {
        var _a;
        this.editMode = !!((_a = this.route.firstChild) === null || _a === void 0 ? void 0 : _a.snapshot.url.some(a => a.path === 'edit'));
    }
    gotoPayeeList() {
        this.routerService.navigateToPayeeList({ relativeTo: this.route.parent });
    }
}
ManagePayeeViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeeViewComponent, deps: [{ token: ManagePayeesNavigationService }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
ManagePayeeViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManagePayeeViewComponent, selector: "bb-billpay-payee-list-view", ngImport: i0, template: `
    <div class="bb-block bb-block--lg">
      <button bbButton color="link" class="bb-block bb-block--md pl-0" (click)="gotoPayeeList()">
        <bb-icon-ui name="arrow-back" size="md"></bb-icon-ui>
        <span i18n="button label|Back button@@billpay-payees-journey.payee-summary.back">Back to Payee List</span>
      </button>
      <bb-header-ui
        headingType="h1"
        [heading]="editMode ? 'Edit Payee' : 'Add Payee'"
        i18n-heading="@@billpay-payees-journey.add-payee"
      >
      </bb-header-ui>
    </div>
    <router-outlet></router-outlet>
  `, isInline: true, components: [{ type: i4$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }], directives: [{ type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeeViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payee-list-view',
                    template: `
    <div class="bb-block bb-block--lg">
      <button bbButton color="link" class="bb-block bb-block--md pl-0" (click)="gotoPayeeList()">
        <bb-icon-ui name="arrow-back" size="md"></bb-icon-ui>
        <span i18n="button label|Back button@@billpay-payees-journey.payee-summary.back">Back to Payee List</span>
      </button>
      <bb-header-ui
        headingType="h1"
        [heading]="editMode ? 'Edit Payee' : 'Add Payee'"
        i18n-heading="@@billpay-payees-journey.add-payee"
      >
      </bb-header-ui>
    </div>
    <router-outlet></router-outlet>
  `,
                }]
        }], ctorParameters: function () { return [{ type: ManagePayeesNavigationService }, { type: i1.ActivatedRoute }]; } });

class BillPayEnrolmentViewComponent {
}
BillPayEnrolmentViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayEnrolmentViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillPayEnrolmentViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillPayEnrolmentViewComponent, selector: "bb-billpay-enrolment-view", ngImport: i0, template: `
    <div>
      <div class="bb-block bb-block--lg">
        <bb-header-ui
          headingType="h1"
          heading="Enrol in bill pay"
          i18n-heading="@@billpay-manage-payee-journey.enrolment-heading"
        ></bb-header-ui>
      </div>
      <bb-billpay-enrolment></bb-billpay-enrolment>
    </div>
  `, isInline: true, components: [{ type: i2$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4.BillpayEnrolmentComponent, selector: "bb-billpay-enrolment", inputs: ["notificationDismissTime"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayEnrolmentViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-enrolment-view',
                    template: `
    <div>
      <div class="bb-block bb-block--lg">
        <bb-header-ui
          headingType="h1"
          heading="Enrol in bill pay"
          i18n-heading="@@billpay-manage-payee-journey.enrolment-heading"
        ></bb-header-ui>
      </div>
      <bb-billpay-enrolment></bb-billpay-enrolment>
    </div>
  `,
                }]
        }] });

class BillpayManagePayeeDataService {
    /** @internal */
    constructor(dataService, searchService) {
        this.dataService = dataService;
        this.searchService = searchService;
    }
    addManualPayee(payee) {
        return this.dataService.postBillPayPayees({ billPayPayeesPostRequestBody: this.toPayeeRequest(payee) });
    }
    updateManualPayee(id, payee) {
        return this.dataService.putPayeeById({ payeeByIdPutRequestBody: this.toManualPutRequest(payee), id });
    }
    getManualPayee(id) {
        return this.dataService.getPayeeById({ id }).pipe(map(response => response.payee));
    }
    searchPayeesByName(name) {
        return this.searchService.getBillPaySearch({ name });
    }
    addElectronicPayee(payee) {
        return this.dataService.postBillPayElectronicPayees({
            billPayElectronicPayeesPostRequestBody: this.toElectronicPostRequest(payee),
        });
    }
    getElectronicPayee(id) {
        return this.dataService.getElectronicPayeeById({ id });
    }
    updateElectronicPayee(id, payee) {
        return this.dataService.putElectronicPayeeById({
            electronicPayeeByIdPutRequestBody: this.toElectronicPutRequest(payee),
            id,
        });
    }
    toPayeeRequest(payee) {
        const { name, address: { address1, address2, city, state, postalCode }, phoneNumber, accountNumber, nickName, } = payee;
        return {
            payee: Object.assign(Object.assign(Object.assign({ name, address: Object.assign(Object.assign({ address1 }, (address2 && { address2 })), { city,
                    state,
                    postalCode }) }, (phoneNumber && { phoneNumber: phoneNumber.replace(/^\+1/, '').replace(/\D/g, '') })), (accountNumber && { accountNumber })), (nickName && { nickName })),
        };
    }
    toManualPutRequest(payee) {
        return {
            payee: Object.assign(Object.assign({}, this.toPayeeRequest(payee).payee), { modifyPendingPayments: true }),
        };
    }
    toElectronicPutRequest(payee) {
        const { nickName } = payee, payeeWithoutNickname = __rest(payee, ["nickName"]);
        return {
            payee: Object.assign(Object.assign(Object.assign({}, payeeWithoutNickname), (nickName && { nickName })), { modifyPendingPayments: true }),
        };
    }
    toElectronicPostRequest(payee) {
        const { nickName } = payee, restProperties = __rest(payee, ["nickName"]);
        return {
            payee: Object.assign(Object.assign({}, (nickName && { nickName })), restProperties),
        };
    }
}
BillpayManagePayeeDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManagePayeeDataService, deps: [{ token: i1$2.BillPayPayeesService }, { token: i1$2.BillPaySearchService }], target: i0.ɵɵFactoryTarget.Injectable });
BillpayManagePayeeDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManagePayeeDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManagePayeeDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$2.BillPayPayeesService }, { type: i1$2.BillPaySearchService }]; } });

class BillpayManualPayeeReviewComponent {
}
BillpayManualPayeeReviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManualPayeeReviewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayManualPayeeReviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayManualPayeeReviewComponent, selector: "bb-billpay-manual-payee-review", inputs: { payeeFormState: "payeeFormState" }, ngImport: i0, template: "<div *ngIf=\"payeeFormState as payee\" class=\"bb-block bb-block--xl\">\n  <div class=\"bb-block bb-block--md\">\n    <bb-header-ui\n      headingType=\"h2\"\n      heading=\"Payee details\"\n      i18n-heading=\"\n        Manual payee review heading|Label for group of data related to the payee\n        details@@billpay-manual-payee-review.details-heading\"\n      data-role=\"payee-review-heading\"\n    ></bb-header-ui>\n  </div>\n  <div class=\"bb-block bb-block--md\">\n    <div\n      i18n=\"label|Label for payee name@@billpay-manual-payee-review.name\"\n      class=\"bb-text-semi-bold\"\n      data-role=\"payee-name-label\"\n    >\n      Payee name\n    </div>\n    <div data-role=\"payee-name\">{{ payee.name }}</div>\n  </div>\n\n  <div class=\"bb-block bb-block--md\">\n    <div\n      i18n=\"label|Label for payee address@@billpay-manual-payee-review.address\"\n      class=\"bb-text-semi-bold\"\n      data-role=\"payee-address-label\"\n    >\n      Address\n    </div>\n    <div data-role=\"payee-address-address1\">{{ payee.address.address1 }}</div>\n    <div data-role=\"payee-address-address2\">{{ payee.address.address2 }}</div>\n    <div>\n      <span data-role=\"payee-address-city\">{{ payee.address.city }} </span>\n      <span data-role=\"payee-address-state\">{{ payee.address.state }} </span>\n      <span data-role=\"payee-address-postal-code\">{{ payee.address.postalCode }}</span>\n    </div>\n  </div>\n\n  <div *ngIf=\"payee.phoneNumber\" class=\"bb-block bb-block--md\">\n    <div\n      i18n=\"label|Label for payee phone number@@billpay-manual-payee-review.phone-number\"\n      class=\"bb-text-semi-bold\"\n      data-role=\"payee-phone-number-label\"\n    >\n      Phone number\n    </div>\n    <div data-role=\"payee-phone-number\">{{ payee.phoneNumber }}</div>\n  </div>\n\n  <div *ngIf=\"payee.accountNumber\" class=\"bb-block bb-block--md\">\n    <div\n      i18n=\"label|Label for payee account number@@billpay-manual-payee-review.account-number\"\n      class=\"bb-text-semi-bold\"\n      data-role=\"payee-account-number-label\"\n    >\n      Account number\n    </div>\n    <div data-role=\"payee-account-number\">{{ payee.accountNumber }}</div>\n  </div>\n\n  <div *ngIf=\"payee.nickName\">\n    <div\n      i18n=\"label|Label for payee nickname@@billpay-manual-payee-review.nickname\"\n      class=\"bb-text-semi-bold\"\n      data-role=\"payee-nickname-label\"\n    >\n      Payee nickname\n    </div>\n    <div data-role=\"payee-nickname\">{{ payee.nickName }}</div>\n  </div>\n</div>\n", components: [{ type: i2$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }], directives: [{ type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManualPayeeReviewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-manual-payee-review',
                    templateUrl: './billpay-manual-payee-review.component.html',
                }]
        }], propDecorators: { payeeFormState: [{
                type: Input
            }] } });

class BillpayCancelNewPayeeModalComponent {
    constructor() {
        this.resolve = new EventEmitter();
        /**
         * Modal navigation routes to payee search. Defaults to false.
         */
        this.findPayee = false;
    }
    cancelModal() {
        this.resolve.emit(false);
    }
    confirmModal() {
        this.resolve.emit(true);
    }
}
BillpayCancelNewPayeeModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayCancelNewPayeeModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayCancelNewPayeeModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayCancelNewPayeeModalComponent, selector: "bb-billpay-cancel-new-payee-modal", inputs: { findPayee: "findPayee" }, outputs: { resolve: "resolve" }, ngImport: i0, template: "<bb-modal-ui [isOpen]=\"true\" (cancel)=\"cancelModal()\" data-role=\"cancel-new-payee-modal\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <bb-header-ui\n        *ngIf=\"!findPayee\"\n        data-role=\"cancel-new-payee-modal-header\"\n        headingType=\"h2\"\n        heading=\"Cancel new payee?\"\n        i18n-heading=\"Cancel new payee modal header@@billpay.manage-payee.cancel-new-payee-modal.header\"\n      >\n      </bb-header-ui>\n      <bb-header-ui\n        *ngIf=\"findPayee\"\n        data-role=\"cancel-new-payee-modal-header\"\n        headingType=\"h2\"\n        heading=\"Find different payee?\"\n        i18n-heading=\"Find different payee modal header@@billpay.manage-payee.cancel-new-payee-modal.findheader\"\n      >\n      </bb-header-ui>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <span\n        i18n=\"Cancel new payee modal body@@billpay.manage-payee.cancel-new-payee-modal.body\"\n        data-role=\"cancel-new-payee-modal-body\"\n        >The new payee will be canceled and any details entered will be lost.</span\n      >\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          (click)=\"confirmModal()\"\n          data-role=\"cancel-new-payee-modal-confirm-button\"\n        >\n          <span\n            *ngIf=\"!findPayee\"\n            i18n=\"\n              confirm modal button|Cancel payee confirmation\n              button@@billpay.manage-payee.cancel-new-payee-modal.confirm-button\"\n          >\n            Cancel new payee\n          </span>\n          <span\n            *ngIf=\"findPayee\"\n            i18n=\"\n              confirm modal button|Cancel payee confirmation\n              button@@billpay.manage-payee.cancel-new-payee-modal.confirm-button2\"\n          >\n            Find a different payee\n          </span>\n        </button>\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          i18n=\"\n            cancel modal button|Continue with current payee\n            button@@billpay.manage-payee.cancel-new-payee-modal.cancel-button\"\n          (click)=\"cancelModal()\"\n          data-role=\"cancel-new-payee-modal-cancel-button\"\n        >\n          Continue with this payee\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1$4.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$4.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1$4.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1$4.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1$4.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$4.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1$4.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayCancelNewPayeeModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-cancel-new-payee-modal',
                    templateUrl: './billpay-cancel-new-payee-modal.component.html',
                }]
        }], propDecorators: { resolve: [{
                type: Output
            }], findPayee: [{
                type: Input
            }] } });

class CreateManualPayeeReviewViewComponent {
    /** @internal */
    constructor(config, router, stateService, dataService, notificationService, discardModalService, billpayNotificationRoutingService) {
        this.config = config;
        this.router = router;
        this.stateService = stateService;
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.discardModalService = discardModalService;
        this.billpayNotificationRoutingService = billpayNotificationRoutingService;
        this.notificationHeaderTemplate = '';
        this.notificationMessageTemplate = '';
        this.payeeSubmit$ = new BehaviorSubject(undefined);
        this.destroy$ = new Subject();
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    ngOnInit() {
        this.stateService.manualPayeeFormState.pipe(take(1)).subscribe(payee => {
            this.payee = payee;
            if (!this.payee) {
                this.router.navigateToManualPayeeForm();
            }
        });
        this.payeeSubmit$
            .pipe(takeUntil(this.destroy$), filter(Boolean))
            .subscribe(payee => this.onSubmitPayee(payee));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onWindowUnload($event) {
        if (!this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    submitPayee(payee) {
        this.payeeSubmit$.next(payee);
    }
    navigateBack() {
        this.router.navigateToManualPayeeForm();
    }
    cancel() {
        this.router.navigateToPayeeList();
    }
    navigateToPayee() {
        this.billpayNotificationRoutingService.navigateToPayees();
    }
    openModal() {
        return this.payeeSubmit$.pipe(switchMap(payee => (payee ? of(true) : this.discardModalService.openModal())), tap(isResolved => isResolved && this.stateService.resetManualPayee()));
    }
    onModalResolve(resolvedWith) {
        this.discardModalService.onModalResolve(resolvedWith);
    }
    onSubmitPayee(payee) {
        this.dataService.addManualPayee(payee).subscribe(() => {
            this.router.navigateToPayeeList();
            this.notificationService.showNotification({
                header: this.notificationHeaderTemplate,
                message: this.notificationMessageTemplate,
                modifier: 'success',
                ttl: this.dismissTimeout,
            });
        }, () => this.notificationService.showNotification({
            header: $localize `:@@billpay.create-manuel-payee.error-notification.header:Something went wrong`,
            message: $localize `:@@billpay.create-manuel-payee.error-notification.header:We were unable to proceed. Please try again.`,
            modifier: 'error',
            ttl: this.dismissTimeout,
        }));
    }
    get dismissTimeout() {
        if (this.config.notificationDismissTime === undefined) {
            throw new Error('Dismiss timeout value not found');
        }
        return this.config.notificationDismissTime;
    }
}
CreateManualPayeeReviewViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CreateManualPayeeReviewViewComponent, deps: [{ token: ManagePayeesJourneyConfigService }, { token: ManagePayeesNavigationService }, { token: BillpayManagePayeeStateService }, { token: BillpayManagePayeeDataService }, { token: i5$2.NotificationService }, { token: i4.BillpayDiscardChangesModalService }, { token: i4.BillpayNotificationRoutingService }], target: i0.ɵɵFactoryTarget.Component });
CreateManualPayeeReviewViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CreateManualPayeeReviewViewComponent, selector: "ng-component", host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, providers: [BillpayDiscardChangesModalService], viewQueries: [{ propertyName: "notificationHeaderTemplate", first: true, predicate: ["notificationHeader"], descendants: true }, { propertyName: "notificationMessageTemplate", first: true, predicate: ["notificationMessage"], descendants: true }], ngImport: i0, template: "<div class=\"card card-lg\" *ngIf=\"payee\">\n  <section class=\"card-body\">\n    <bb-billpay-manual-payee-review [payeeFormState]=\"payee\"> </bb-billpay-manual-payee-review>\n    <div class=\"bb-button-bar bb-button-bar--reverse\">\n      <button\n        bbButton\n        data-role=\"add-payee-button\"\n        i18n=\"Label for button|Manual payee continue button@@billpay-create-manual-payee-review.add-payee\"\n        (click)=\"submitPayee(payee)\"\n        class=\"bb-button-bar__button\"\n      >\n        Add payee\n      </button>\n      <button\n        bbButton\n        data-role=\"back-button\"\n        i18n=\"Label for button|Find a different payee button@@billpay-create-manual-payee-review.edit-payee\"\n        (click)=\"navigateBack()\"\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n      >\n        Edit\n      </button>\n      <button\n        bbButton\n        data-role=\"cancel-button\"\n        color=\"link\"\n        class=\"bb-button-bar__button bb-button-bar__button--across\"\n        (click)=\"cancel()\"\n        i18n=\"Label for button|Cancel button@@billpay-create-manual-payee-review.cancel-payee\"\n      >\n        Cancel\n      </button>\n    </div>\n  </section>\n</div>\n\n<bb-billpay-cancel-new-payee-modal\n  *ngIf=\"isDiscardModalOpen\"\n  (resolve)=\"onModalResolve($event)\"\n></bb-billpay-cancel-new-payee-modal>\n\n<ng-template #notificationMessage>\n  <span\n    data-role=\"notification-message\"\n    i18n=\"\n      Payee notification message|Payee has created successfully\n      notification@@billpay-create-manual-payee-review.notification.message\"\n    >The payee \u2018{{ (payee.nickName && payee.nickName + ' (' + payee.name + ')') || payee.name }}\u2018 has been created\n    successfully\n  </span>\n\n  <div class=\"bb-button-bar bb-button-bar--reverse\">\n    <button\n      bbButton\n      data-role=\"notification-add-payee-button\"\n      color=\"primary\"\n      class=\"bb-button-bar__button\"\n      i18n=\"notification button|Add another payee@@billpay-create-manual-payee-review.notification.add-button\"\n      (click)=\"navigateToPayee()\"\n    >\n      Add another payee\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #notificationHeader>\n  <span\n    i18n=\"\n      Payee notification header|Payee created success notification\n      header@@billpay-create-manual-payee-review.notification.header\"\n    >Payee created</span\n  >\n</ng-template>\n", components: [{ type: BillpayManualPayeeReviewComponent, selector: "bb-billpay-manual-payee-review", inputs: ["payeeFormState"] }, { type: BillpayCancelNewPayeeModalComponent, selector: "bb-billpay-cancel-new-payee-modal", inputs: ["findPayee"], outputs: ["resolve"] }], directives: [{ type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CreateManualPayeeReviewViewComponent, decorators: [{
            type: Component,
            args: [{
                    templateUrl: './billpay-create-manual-payee-review-view.component.html',
                    providers: [BillpayDiscardChangesModalService],
                }]
        }], ctorParameters: function () { return [{ type: ManagePayeesJourneyConfigService }, { type: ManagePayeesNavigationService }, { type: BillpayManagePayeeStateService }, { type: BillpayManagePayeeDataService }, { type: i5$2.NotificationService }, { type: i4.BillpayDiscardChangesModalService }, { type: i4.BillpayNotificationRoutingService }]; }, propDecorators: { notificationHeaderTemplate: [{
                type: ViewChild,
                args: ['notificationHeader']
            }], notificationMessageTemplate: [{
                type: ViewChild,
                args: ['notificationMessage']
            }], onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });

class BillpayCancelEditPayeeModalComponent {
    constructor() {
        this.resolve = new EventEmitter();
    }
    cancelModal() {
        this.resolve.emit(false);
    }
    confirmModal() {
        this.resolve.emit(true);
    }
}
BillpayCancelEditPayeeModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayCancelEditPayeeModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayCancelEditPayeeModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayCancelEditPayeeModalComponent, selector: "bb-billpay-cancel-edit-payee-modal", outputs: { resolve: "resolve" }, ngImport: i0, template: "<bb-modal-ui [isOpen]=\"true\" (cancel)=\"cancelModal()\" data-role=\"cancel-edit-payee-modal\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <bb-header-ui\n        data-role=\"cancel-edit-payee-modal-header\"\n        headingType=\"h2\"\n        heading=\"Lose changes?\"\n        i18n-heading=\"Lose changes modal header@@billpay.cancel-edit-payee.modal.header\"\n      >\n      </bb-header-ui>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <span\n        i18n=\"Lose changes modal body@@billpay.cancel-edit-payee.modal.body\"\n        data-role=\"cancel-edit-payee-modal-body\"\n        >Are you sure you want to cancel editing this payee? You will lose any changes made.</span\n      >\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          i18n=\"\n            confirm modal button|Cancel edit payee confirmation button@@billpay.cancel-edit-payee.modal.confirm-button\"\n          (click)=\"confirmModal()\"\n          data-role=\"cancel-edit-payee-modal-confirm-button\"\n        >\n          Lose changes\n        </button>\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          i18n=\"\n            cancel modal button|Continue edit with current payee button@@billpay.cancel-edit-payee.modal.cancel-button\"\n          (click)=\"cancelModal()\"\n          data-role=\"cancel-edit-payee-modal-cancel-button\"\n        >\n          Continue editing\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1$4.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$4.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1$4.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1$4.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1$4.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1$4.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1$4.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayCancelEditPayeeModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-cancel-edit-payee-modal',
                    templateUrl: './billpay-cancel-edit-payee-modal.component.html',
                }]
        }], propDecorators: { resolve: [{
                type: Output
            }] } });

class EditManualPayeeReviewViewComponent {
    /** @internal */
    constructor(config, router, stateService, dataService, notificationService, route, discardModalService) {
        this.config = config;
        this.router = router;
        this.stateService = stateService;
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.route = route;
        this.discardModalService = discardModalService;
        this.notificationHeaderTemplate = '';
        this.notificationMessageTemplate = '';
        this.payeeSubmit$ = new BehaviorSubject(undefined);
        this.destroy$ = new Subject();
        this.id$ = this.route.paramMap.pipe(take(1), map(params => params.get('id') || ''));
    }
    ngOnInit() {
        this.stateService.manualPayeeFormState.pipe(take(1)).subscribe(payee => {
            this.payee = payee;
            if (!this.payee) {
                this.navigateToForm();
            }
        });
        this.payeeSubmit$
            .pipe(takeUntil(this.destroy$), filter(Boolean))
            .subscribe(payee => this.onSubmitPayee(payee));
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    get dismissTimeout() {
        if (this.config.notificationDismissTime === undefined) {
            throw new Error('Dismiss timeout value not found');
        }
        return this.config.notificationDismissTime;
    }
    onWindowUnload($event) {
        if (!this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    openModal() {
        return this.payeeSubmit$.pipe(switchMap(payee => (payee ? of(true) : this.discardModalService.openModal())), tap(isResolved => isResolved && this.stateService.resetManualPayee()));
    }
    onModalResolve(resolvedWith) {
        this.discardModalService.onModalResolve(resolvedWith);
        if (resolvedWith) {
            this.router.navigateToPayeeList();
        }
    }
    submitPayee(payee) {
        this.payeeSubmit$.next(payee);
    }
    navigateBack() {
        this.navigateToForm();
    }
    cancel() {
        this.router.navigateToPayeeList();
    }
    navigateToForm() {
        this.id$.subscribe(id => this.router.navigateToEditManualPayeeForm(id));
    }
    onSubmitPayee(payee) {
        this.id$.pipe(switchMap(id => this.dataService.updateManualPayee(id, payee))).subscribe(() => {
            this.router.navigateToPayeeList();
            this.notificationService.showNotification({
                header: this.notificationHeaderTemplate,
                message: this.notificationMessageTemplate,
                modifier: 'success',
                ttl: this.dismissTimeout,
            });
        }, () => {
            this.notificationService.showNotification({
                header: $localize `:@@billpay.edit-manuel-payee.error-notification.header:Something went wrong`,
                message: $localize `:@@billpay.edit-manuel-payee.error-notification.message:We were unable to proceed. Please try again.`,
                modifier: 'error',
                ttl: this.dismissTimeout,
            });
        });
    }
}
EditManualPayeeReviewViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EditManualPayeeReviewViewComponent, deps: [{ token: ManagePayeesJourneyConfigService }, { token: ManagePayeesNavigationService }, { token: BillpayManagePayeeStateService }, { token: BillpayManagePayeeDataService }, { token: i5$2.NotificationService }, { token: i1.ActivatedRoute }, { token: i4.BillpayDiscardChangesModalService }], target: i0.ɵɵFactoryTarget.Component });
EditManualPayeeReviewViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: EditManualPayeeReviewViewComponent, selector: "ng-component", host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, providers: [BillpayDiscardChangesModalService], viewQueries: [{ propertyName: "notificationHeaderTemplate", first: true, predicate: ["notificationHeader"], descendants: true }, { propertyName: "notificationMessageTemplate", first: true, predicate: ["notificationMessage"], descendants: true }], ngImport: i0, template: "<div class=\"card card-lg\" *ngIf=\"payee\">\n  <section class=\"card-body\">\n    <bb-billpay-manual-payee-review [payeeFormState]=\"payee\"> </bb-billpay-manual-payee-review>\n    <div class=\"bb-button-bar bb-button-bar--reverse\">\n      <button\n        bbButton\n        data-role=\"save-payee-button\"\n        i18n=\"Label for button|Manual payee continue button@@billpay-edit-manual-payee-review.save-payee\"\n        (click)=\"submitPayee(payee)\"\n        class=\"bb-button-bar__button\"\n      >\n        Confirm payee details\n      </button>\n      <button\n        bbButton\n        data-role=\"back-button\"\n        i18n=\"Label for button|Find a different payee button@@billpay-edit-manual-payee-review.edit-payee\"\n        (click)=\"navigateBack()\"\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n      >\n        Edit payee details\n      </button>\n      <button\n        bbButton\n        data-role=\"cancel-button\"\n        color=\"link\"\n        class=\"bb-button-bar__button bb-button-bar__button--across\"\n        (click)=\"cancel()\"\n        i18n=\"Cancel edit|Label for a button that cancels form changes@@billpay-edit-manual-payee-review.cancel\"\n      >\n        Cancel\n      </button>\n    </div>\n  </section>\n</div>\n<bb-billpay-cancel-edit-payee-modal\n  *ngIf=\"isDiscardModalOpen\"\n  (resolve)=\"onModalResolve($event)\"\n></bb-billpay-cancel-edit-payee-modal>\n\n<ng-template #notificationMessage>\n  <ng-container>\n    <span\n      data-role=\"notification-message\"\n      i18n=\"Payee notification message|Payee edited notification@@billpay-edit-manual-payee-review.notification.message\"\n      >The payee \u2018{{ (payee.nickName && payee.nickName + ' (' + payee.name + ')') || payee.name }}\u2018 has been changed\n      successfully</span\n    >\n  </ng-container>\n</ng-template>\n\n<ng-template #notificationHeader>\n  <span\n    i18n=\"\n      Payee notification header|Payee edited notification header@@billpay-edit-manual-payee-review.notification.header\"\n    >Payee edited</span\n  >\n</ng-template>\n", components: [{ type: BillpayManualPayeeReviewComponent, selector: "bb-billpay-manual-payee-review", inputs: ["payeeFormState"] }, { type: BillpayCancelEditPayeeModalComponent, selector: "bb-billpay-cancel-edit-payee-modal", outputs: ["resolve"] }], directives: [{ type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EditManualPayeeReviewViewComponent, decorators: [{
            type: Component,
            args: [{
                    templateUrl: './billpay-edit-manual-payee-review-view.component.html',
                    providers: [BillpayDiscardChangesModalService],
                }]
        }], ctorParameters: function () { return [{ type: ManagePayeesJourneyConfigService }, { type: ManagePayeesNavigationService }, { type: BillpayManagePayeeStateService }, { type: BillpayManagePayeeDataService }, { type: i5$2.NotificationService }, { type: i1.ActivatedRoute }, { type: i4.BillpayDiscardChangesModalService }]; }, propDecorators: { notificationHeaderTemplate: [{
                type: ViewChild,
                args: ['notificationHeader']
            }], notificationMessageTemplate: [{
                type: ViewChild,
                args: ['notificationMessage']
            }], onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });

class BaseElectronicPayeeReviewPageModelDirective {
    /** @internal */
    constructor(route, stateService, discardModalService, config) {
        this.route = route;
        this.stateService = stateService;
        this.discardModalService = discardModalService;
        this.config = config;
        this.destroy$ = new Subject();
        this.payee$ = this.stateService.electronicPayeeFormState.pipe(take(1), shareReplay(1));
        this.id$ = this.route.paramMap.pipe(take(1), map(params => params.get('id') || ''));
    }
    ngOnInit() {
        this.payee$
            .pipe(filter(payee => !payee), switchMap(() => this.id$))
            .subscribe(id => {
            this.navigateBack(id);
        });
        this.payeeSubmit$.pipe(takeUntil(this.destroy$), filter(Boolean)).subscribe(payee => this.onSubmitPayee(payee));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onWindowUnload($event) {
        if (!this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    get dismissTimeout() {
        if (this.config.notificationDismissTime === undefined) {
            throw new Error('Dismiss timeout value not found');
        }
        return this.config.notificationDismissTime;
    }
    openModal() {
        return this.payeeSubmit$.pipe(switchMap(payee => (payee ? of(true) : this.discardModalService.openModal())), tap(isResolved => isResolved && this.stateService.resetElectronicPayee()));
    }
    onModalResolve(resolvedWith) {
        this.discardModalService.onModalResolve(resolvedWith);
    }
}
BaseElectronicPayeeReviewPageModelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BaseElectronicPayeeReviewPageModelDirective, deps: [{ token: i1.ActivatedRoute }, { token: BillpayManagePayeeStateService }, { token: i4.BillpayDiscardChangesModalService }, { token: ManagePayeesJourneyConfigService }], target: i0.ɵɵFactoryTarget.Directive });
BaseElectronicPayeeReviewPageModelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: BaseElectronicPayeeReviewPageModelDirective, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BaseElectronicPayeeReviewPageModelDirective, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: BillpayManagePayeeStateService }, { type: i4.BillpayDiscardChangesModalService }, { type: ManagePayeesJourneyConfigService }]; }, propDecorators: { onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });

class BillpayElectronicPayeeReviewComponent {
}
BillpayElectronicPayeeReviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayElectronicPayeeReviewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayElectronicPayeeReviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayElectronicPayeeReviewComponent, selector: "bb-billpay-electronic-payee-review", inputs: { payee: "payee" }, ngImport: i0, template: "<div *ngIf=\"payee\" class=\"bb-block bb-block--xl\">\n  <div class=\"bb-block bb-block--md\">\n    <bb-header-ui\n      headingType=\"h2\"\n      heading=\"Payee details\"\n      i18n-heading=\"\n        Electronic payee review heading|Label for group of data related to the payee\n        details@@billpay-electronic-payee-review.details-heading\"\n      data-role=\"payee-review-heading\"\n    ></bb-header-ui>\n  </div>\n  <div class=\"bb-block bb-block--md\">\n    <div\n      i18n=\"label|Label for payee name@@billpay-electronic-payee-review.name\"\n      class=\"bb-text-semi-bold\"\n      data-role=\"payee-name-label\"\n    >\n      Payee name\n    </div>\n    <div data-role=\"payee-name\">{{ payee.name }}</div>\n  </div>\n\n  <div class=\"bb-block bb-block--md\">\n    <div\n      i18n=\"label|Label for payee account number@@billpay-electronic-payee-review.account-number\"\n      class=\"bb-text-semi-bold\"\n      data-role=\"payee-account-number-label\"\n    >\n      Account number\n    </div>\n    <div data-role=\"payee-account-number\">{{ payee.accountNumber }}</div>\n  </div>\n\n  <div *ngIf=\"payee.merchantZipCode\" class=\"bb-block bb-block--md\">\n    <div\n      i18n=\"label|Label for payee address@@billpay-electronic-payee-review.address\"\n      class=\"bb-text-semi-bold\"\n      data-role=\"payee-zip-code-label\"\n    >\n      Payee ZIP code\n    </div>\n    <div data-role=\"payee-zip-code\">{{ payee.merchantZipCode }}</div>\n  </div>\n\n  <div *ngIf=\"payee.nickName\">\n    <div\n      i18n=\"label|Label for payee nickname@@billpay-electronic-payee-review.nickname\"\n      class=\"bb-text-semi-bold\"\n      data-role=\"payee-nickname-label\"\n    >\n      Payee nickname\n    </div>\n    <div data-role=\"payee-nickname\">{{ payee.nickName }}</div>\n  </div>\n</div>\n", components: [{ type: i2$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }], directives: [{ type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayElectronicPayeeReviewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-electronic-payee-review',
                    templateUrl: './billpay-electronic-payee-review.component.html',
                }]
        }], propDecorators: { payee: [{
                type: Input
            }] } });

class CreateElectronicPayeeReviewViewComponent extends BaseElectronicPayeeReviewPageModelDirective {
    /** @internal */
    constructor(config, route, stateService, discardModalService, router, dataService, notificationService, billpayNotificationRoutingService) {
        super(route, stateService, discardModalService, config);
        this.config = config;
        this.route = route;
        this.router = router;
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.billpayNotificationRoutingService = billpayNotificationRoutingService;
        this.notificationHeaderTemplate = '';
        this.notificationMessageTemplate = '';
        this.payeeSubmit$ = new BehaviorSubject(undefined);
    }
    submitPayee(id, payee) {
        this.payeeSubmit$.next(Object.assign({ merchantID: id }, payee));
    }
    navigateBack(id) {
        this.router.navigateToElectronicPayeeForm(id, { queryParamsHandling: 'preserve' });
    }
    navigateToPayee() {
        this.billpayNotificationRoutingService.navigateToPayees();
    }
    navigateToNewPayment() {
        this.billpayNotificationRoutingService.navigateToNewPayment(this.successfulPayeeId);
    }
    onSubmitPayee(payee) {
        this.dataService.addElectronicPayee(payee).subscribe(billPayPutPostResponse => {
            this.successfulPayeeId = billPayPutPostResponse.id;
            this.router.navigateToPayeeList();
            this.notificationService.showNotification({
                header: this.notificationHeaderTemplate,
                message: this.notificationMessageTemplate,
                modifier: 'success',
                ttl: this.dismissTimeout,
            });
        }, ({ error }) => {
            const { header, message } = this.mapErrorNotificationContent(error === null || error === void 0 ? void 0 : error.errors);
            this.notificationService.showNotification({
                header,
                message,
                modifier: 'error',
                ttl: this.dismissTimeout,
            });
        });
    }
    mapErrorNotificationContent(errors = []) {
        if (errors.find(error => error.key === 'billpay.api.payeeAlreadyExists')) {
            return {
                header: $localize `:@@billpay.add-e-payee.alreadyExist-error-notification.header:Failed to add a new payee`,
                message: $localize `:@@billpay.add-e-payee.alreadyExist-error-notification.header:The payee could not be added because it already exists.`,
            };
        }
        else {
            return {
                header: $localize `:@@billpay.add-e-payee.default-error-notification.header:Something went wrong`,
                message: $localize `:@@billpay.add-e-payee.default-error-notification.header:We were unable to proceed. Please try again.`,
            };
        }
    }
    cancel() {
        this.router.navigateToPayeeList();
    }
}
CreateElectronicPayeeReviewViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CreateElectronicPayeeReviewViewComponent, deps: [{ token: ManagePayeesJourneyConfigService }, { token: i1.ActivatedRoute }, { token: BillpayManagePayeeStateService }, { token: i4.BillpayDiscardChangesModalService }, { token: ManagePayeesNavigationService }, { token: BillpayManagePayeeDataService }, { token: i5$2.NotificationService }, { token: i4.BillpayNotificationRoutingService }], target: i0.ɵɵFactoryTarget.Component });
CreateElectronicPayeeReviewViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CreateElectronicPayeeReviewViewComponent, selector: "ng-component", providers: [BillpayDiscardChangesModalService], viewQueries: [{ propertyName: "notificationHeaderTemplate", first: true, predicate: ["notificationHeader"], descendants: true }, { propertyName: "notificationMessageTemplate", first: true, predicate: ["notificationMessage"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"{ payee: payee$ | async, id: id$ | async } as context\">\n  <div class=\"card card-lg\">\n    <section class=\"card-body\">\n      <bb-billpay-electronic-payee-review [payee]=\"context.payee\"> </bb-billpay-electronic-payee-review>\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <button\n          bbButton\n          data-role=\"add-payee-button\"\n          i18n=\"Label for button|Electronic payee continue button@@billpay-create-electronic-payee-review.add-payee\"\n          (click)=\"submitPayee(context.id, context.payee)\"\n          class=\"bb-button-bar__button\"\n        >\n          Add payee\n        </button>\n        <button\n          bbButton\n          data-role=\"back-button\"\n          i18n=\"Label for button|Edit button@@billpay-create-electronic-payee-review.edit-payee\"\n          (click)=\"navigateBack(context.id)\"\n          class=\"bb-button-bar__button\"\n          color=\"secondary\"\n        >\n          Edit\n        </button>\n        <button\n          bbButton\n          data-role=\"cancel-button\"\n          color=\"link\"\n          class=\"bb-button-bar__button bb-button-bar__button--across\"\n          (click)=\"cancel()\"\n          i18n=\"Label for button|Cancel button@@billpay-create-electronic-payee-review.cancel-payee\"\n        >\n          Cancel\n        </button>\n      </div>\n    </section>\n  </div>\n\n  <bb-billpay-cancel-new-payee-modal\n    *ngIf=\"isDiscardModalOpen\"\n    (resolve)=\"onModalResolve($event)\"\n  ></bb-billpay-cancel-new-payee-modal>\n</ng-container>\n\n<ng-template *ngIf=\"payee$ | async as payee\" #notificationMessage>\n  <span\n    data-role=\"notification-message\"\n    i18n=\"\n      Payee notification message|Payee has created successfully\n      notification@@billpay-create-electronic-payee-review.notification.message\"\n    >The payee \u2018{{ (payee.nickName && payee.nickName + ' (' + payee.name + ')') || payee.name }}\u2018 has been created\n    successfully\n  </span>\n\n  <div class=\"bb-button-bar\">\n    <button\n      bbButton\n      data-role=\"notification-payee-button\"\n      class=\"bb-button-bar__button\"\n      i18n=\"notification button|Pay button@@billpay-create-electronic-payee-review.notification.pay-button\"\n      (click)=\"navigateToNewPayment()\"\n    >\n      Pay\n    </button>\n    <button\n      bbButton\n      data-role=\"notification-add-payee-button\"\n      color=\"secondary\"\n      class=\"bb-button-bar__button\"\n      i18n=\"notification button|Add another payee@@billpay-create-electronic-payee-review.notification.add-button\"\n      (click)=\"navigateToPayee()\"\n    >\n      Add another payee\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #notificationHeader>\n  <span\n    class=\"text-dark\"\n    i18n=\"\n      Payee notification header|Payee created success notification\n      header@@billpay-create-electronic-payee-review.notification.header\"\n    >Payee created</span\n  >\n</ng-template>\n", components: [{ type: BillpayElectronicPayeeReviewComponent, selector: "bb-billpay-electronic-payee-review", inputs: ["payee"] }, { type: BillpayCancelNewPayeeModalComponent, selector: "bb-billpay-cancel-new-payee-modal", inputs: ["findPayee"], outputs: ["resolve"] }], directives: [{ type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i5$1.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CreateElectronicPayeeReviewViewComponent, decorators: [{
            type: Component,
            args: [{
                    templateUrl: './billpay-create-electronic-payee-review-view.component.html',
                    providers: [BillpayDiscardChangesModalService],
                }]
        }], ctorParameters: function () { return [{ type: ManagePayeesJourneyConfigService }, { type: i1.ActivatedRoute }, { type: BillpayManagePayeeStateService }, { type: i4.BillpayDiscardChangesModalService }, { type: ManagePayeesNavigationService }, { type: BillpayManagePayeeDataService }, { type: i5$2.NotificationService }, { type: i4.BillpayNotificationRoutingService }]; }, propDecorators: { notificationHeaderTemplate: [{
                type: ViewChild,
                args: ['notificationHeader']
            }], notificationMessageTemplate: [{
                type: ViewChild,
                args: ['notificationMessage']
            }] } });

class EditElectronicPayeeReviewViewComponent extends BaseElectronicPayeeReviewPageModelDirective {
    /** @internal */
    constructor(config, route, stateService, discardModalService, router, dataService, notificationService) {
        super(route, stateService, discardModalService, config);
        this.config = config;
        this.router = router;
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.notificationHeaderTemplate = '';
        this.notificationMessageTemplate = '';
        this.payeeSubmit$ = new BehaviorSubject(undefined);
    }
    submitPayee(payee) {
        this.payeeSubmit$.next(payee);
    }
    navigateBack(id) {
        this.router.navigateToEditElectronicPayeeForm(id);
    }
    onSubmitPayee(payee) {
        this.id$.pipe(switchMap(id => this.dataService.updateElectronicPayee(id, payee))).subscribe(() => {
            this.router.navigateToPayeeList();
            this.notificationService.showNotification({
                header: this.notificationHeaderTemplate,
                message: this.notificationMessageTemplate,
                modifier: 'success',
                ttl: this.dismissTimeout,
            });
        }, () => {
            this.notificationService.showNotification({
                header: $localize `:@@billpay.edit-e-payee.error-notification.header:Something went wrong`,
                message: $localize `:@@billpay.edit-e-payee.error-notification.message:We were unable to proceed. Please try again.`,
                modifier: 'error',
                ttl: this.dismissTimeout,
            });
        });
    }
    cancel() {
        this.router.navigateToPayeeList();
    }
}
EditElectronicPayeeReviewViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EditElectronicPayeeReviewViewComponent, deps: [{ token: ManagePayeesJourneyConfigService }, { token: i1.ActivatedRoute }, { token: BillpayManagePayeeStateService }, { token: i4.BillpayDiscardChangesModalService }, { token: ManagePayeesNavigationService }, { token: BillpayManagePayeeDataService }, { token: i5$2.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
EditElectronicPayeeReviewViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: EditElectronicPayeeReviewViewComponent, selector: "ng-component", providers: [BillpayDiscardChangesModalService], viewQueries: [{ propertyName: "notificationHeaderTemplate", first: true, predicate: ["notificationHeader"], descendants: true }, { propertyName: "notificationMessageTemplate", first: true, predicate: ["notificationMessage"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"card card-lg\" *ngIf=\"payee$ | async as payee\">\n  <section class=\"card-body\">\n    <bb-billpay-electronic-payee-review [payee]=\"payee\"> </bb-billpay-electronic-payee-review>\n    <div class=\"bb-button-bar bb-button-bar--reverse\">\n      <button\n        bbButton\n        data-role=\"add-payee-button\"\n        i18n=\"Label for button|Electronic payee confirm edit button@@billpay-edit-electronic-payee-review.confirm-payee\"\n        (click)=\"submitPayee(payee)\"\n        class=\"bb-button-bar__button\"\n      >\n        Confirm payee details\n      </button>\n      <button\n        *ngIf=\"id$ | async as id\"\n        bbButton\n        data-role=\"back-button\"\n        i18n=\"Label for button|Edit payee details button@@billpay-edit-electronic-payee-review.edit-payee\"\n        (click)=\"navigateBack(id)\"\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n      >\n        Edit payee details\n      </button>\n      <button\n        bbButton\n        data-role=\"cancel-button\"\n        color=\"link\"\n        class=\"bb-button-bar__button bb-button-bar__button--across\"\n        (click)=\"cancel()\"\n        i18n=\"Cancel edit|Label for a button that cancels form changes@@billpay-edit-electronic-payee-review.cancel\"\n      >\n        Cancel\n      </button>\n    </div>\n  </section>\n  \n  <ng-template #notificationMessage>\n    <span\n      data-role=\"notification-message\"\n      i18n=\"\n        Payee notification message|Payee has been changed successfully\n        notification@@billpay-edit-electronic-payee-review.notification.message\"\n      >The payee \u2018{{ payee.nickName ? payee.nickName + ' (' + payee.name + ')' : payee.name }}\u2018 has been changed\n      successfully\n    </span>\n  </ng-template>\n</div>\n\n<bb-billpay-cancel-edit-payee-modal\n  *ngIf=\"isDiscardModalOpen\"\n  (resolve)=\"onModalResolve($event)\"\n></bb-billpay-cancel-edit-payee-modal>\n\n\n<ng-template #notificationHeader>\n  <span\n    class=\"text-dark\"\n    i18n=\"\n      Payee notification header|Payee edited success notification\n      header@@billpay-edit-electronic-payee-review.notification.header\"\n    >Payee edited</span\n  >\n</ng-template>\n", components: [{ type: BillpayElectronicPayeeReviewComponent, selector: "bb-billpay-electronic-payee-review", inputs: ["payee"] }, { type: BillpayCancelEditPayeeModalComponent, selector: "bb-billpay-cancel-edit-payee-modal", outputs: ["resolve"] }], directives: [{ type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i5$1.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EditElectronicPayeeReviewViewComponent, decorators: [{
            type: Component,
            args: [{
                    templateUrl: './billpay-edit-electronic-payee-review-view.component.html',
                    providers: [BillpayDiscardChangesModalService],
                }]
        }], ctorParameters: function () { return [{ type: ManagePayeesJourneyConfigService }, { type: i1.ActivatedRoute }, { type: BillpayManagePayeeStateService }, { type: i4.BillpayDiscardChangesModalService }, { type: ManagePayeesNavigationService }, { type: BillpayManagePayeeDataService }, { type: i5$2.NotificationService }]; }, propDecorators: { notificationHeaderTemplate: [{
                type: ViewChild,
                args: ['notificationHeader']
            }], notificationMessageTemplate: [{
                type: ViewChild,
                args: ['notificationMessage']
            }] } });

class BillpayElectronicPayeeFormComponent {
    /** @internal */
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        /**
         * Displays the zip code input field. Defaults to false.
         */
        this.zipCodeRequired = false;
        /**
         * Displays back button which returns to payee search. Defaults to true.
         */
        this.backButtonShown = true;
        this.formSubmitted = new EventEmitter();
        this.formCanceled = new EventEmitter();
        this.backToSearch = new EventEmitter();
        this.valueChanged = new EventEmitter();
        this.payeeForm = new FormGroup({});
        this.destroy$ = new Subject();
        this.isSubmissionAttempted = false;
        this.nickNameDescId = BillpayUtilityService.generateId();
        this.accNumberDescId = BillpayUtilityService.generateId();
    }
    ngOnInit() {
        this.payeeForm = this.createForm();
        this.setValidators();
        this.payeeForm.valueChanges.pipe(takeUntil(this.destroy$), take(1)).subscribe(() => {
            this.valueChanged.emit();
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onSubmit(payeeForm) {
        if (!this.isSubmissionAttempted) {
            this.isSubmissionAttempted = true;
        }
        if (payeeForm.invalid) {
            payeeForm.markAllAsTouched();
            return;
        }
        this.formSubmitted.emit(this.payeeForm.value);
    }
    cancelForm() {
        this.formCanceled.emit();
    }
    toSearch() {
        this.backToSearch.emit();
    }
    hasError(controlName, errorName) {
        const control = this.payeeForm.get(controlName);
        return !!control && control.touched && control.hasError(errorName);
    }
    createForm() {
        return this.formBuilder.group(Object.assign({}, this.payee));
    }
    setValidators() {
        [
            ['merchantZipCode', [Validators.required, Validators.pattern(/^\d{5}(\d{4})?$/)]],
            ['accountNumber', [Validators.required, Validators.minLength(2), Validators.maxLength(100)]],
            ['nickName', [Validators.minLength(2), Validators.maxLength(100)]],
        ].forEach(([controlName, validators]) => {
            const control = this.payeeForm.get(controlName);
            if (control) {
                control.setValidators(validators);
                control.updateValueAndValidity();
            }
        });
    }
}
BillpayElectronicPayeeFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayElectronicPayeeFormComponent, deps: [{ token: i1$5.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
BillpayElectronicPayeeFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayElectronicPayeeFormComponent, selector: "bb-billpay-electronic-payee-form", inputs: { payee: "payee", zipCodeRequired: "zipCodeRequired", backButtonShown: "backButtonShown" }, outputs: { formSubmitted: "formSubmitted", formCanceled: "formCanceled", backToSearch: "backToSearch", valueChanged: "valueChanged" }, ngImport: i0, template: "<div class=\"card card-lg\">\n  <section class=\"card-body\">\n    <form data-role=\"electronic-payee-form\" (ngSubmit)=\"onSubmit(payeeForm)\" [formGroup]=\"payeeForm\">\n      <bb-fieldset-ui>\n        <div class=\"bb-block bb-block--md\">\n          <bb-header-ui\n            headingType=\"h2\"\n            [heading]=\"'Account details for ' + payee?.name\"\n            i18n-heading=\"Fieldset heading|Account name heading@@billpay-electronic-payee-form.payee-details-heading\"\n            data-role=\"payee-name-heading\"\n          ></bb-header-ui>\n        </div>\n        <div [class.bb-block--lg]=\"zipCodeRequired\" data-role=\"account-number-label\">\n          <div class=\"bb-form-field bb-form-field--md\">\n            <bb-input-text-ui\n              formControlName=\"accountNumber\"\n              data-role=\"account-number-input\"\n              label=\"Account number\"\n              i18n-label=\"label|Label for account number field@@billpay-electronic-payee-form.account-number-label\"\n              [aria-describedby]=\"accNumberDescId\"\n              autofocus\n            >\n            </bb-input-text-ui>\n          </div>\n          <div\n            id=\"{{ accNumberDescId }}\"\n            class=\"bb-subtitle bb-text-support\"\n            i18n=\"label|Label for account number info message@@billpay-electronic-payee-form.account-number-info\"\n            data-role=\"account-number-help-text\"\n          >\n            Enter account number as it appears on your bill\n          </div>\n          <bb-input-validation-message-ui\n            role=\"alert\"\n            [showErrors]=\"hasError('accountNumber', 'required')\"\n            i18n=\"\n              error text|Account number required error text@@billpay-electronic-payee-form.error.account-number-required\"\n            data-role=\"account-number-error-required\"\n          >\n            Please enter an account number\n          </bb-input-validation-message-ui>\n          <bb-input-validation-message-ui\n            role=\"alert\"\n            [showErrors]=\"hasError('accountNumber', 'minlength')\"\n            i18n=\"\n              error text|Account number minlength error\n              text@@billpay-electronic-payee-form.error.account-number-minlength\"\n            data-role=\"account-number-error-minlength\"\n          >\n            Account number must be at least 2 characters\n          </bb-input-validation-message-ui>\n          <bb-input-validation-message-ui\n            role=\"alert\"\n            [showErrors]=\"hasError('accountNumber', 'maxlength')\"\n            i18n=\"\n              error text|Account number max length error\n              text@@billpay-electronic-payee-form.error.account-number-maxlength\"\n            data-role=\"account-number-error-maxlength\"\n          >\n            Account number may not be over a hundred characters\n          </bb-input-validation-message-ui>\n        </div>\n        <div *ngIf=\"zipCodeRequired\" data-role=\"zip-code-label\">\n          <div class=\"bb-form-field bb-form-field--xs\">\n            <bb-input-text-ui\n              formControlName=\"merchantZipCode\"\n              data-role=\"zip-code-input\"\n              label=\"Payee ZIP code\"\n              i18n-label=\"label|Label for ZIP code field@@billpay-electronic-payee-form.zip-label\"\n            >\n            </bb-input-text-ui>\n          </div>\n          <bb-input-validation-message-ui\n            role=\"alert\"\n            [showErrors]=\"hasError('merchantZipCode', 'required')\"\n            i18n=\"error text|Zip code is required error text@@billpay-electronic-payee-form.error.zip-code-required\"\n            data-role=\"zip-code-error-required\"\n          >\n            Please enter a Zip Code\n          </bb-input-validation-message-ui>\n          <bb-input-validation-message-ui\n            role=\"alert\"\n            [showErrors]=\"hasError('merchantZipCode', 'pattern')\"\n            i18n=\"error text|Zip code format error text@@billpay-electronic-payee-form.error.zip-code-format\"\n            data-role=\"zip-code-error-pattern\"\n          >\n            ZIP code should be 5 or 9 digits long\n          </bb-input-validation-message-ui>\n        </div>\n      </bb-fieldset-ui>\n\n      <bb-fieldset-ui>\n        <div class=\"bb-block bb-block--md\">\n          <bb-header-ui\n            headingType=\"h2\"\n            heading=\"Payee nickname\"\n            i18n-heading=\"Payee nickname@@billpay-electronic-payee-form.payee-nickname-heading\"\n            data-role=\"payee-nickname-heading\"\n          ></bb-header-ui>\n        </div>\n        <div>\n          <div class=\"bb-form-field bb-form-field--md\">\n            <label data-role=\"nickname-input-label\" class=\"bb-label\" [attr.id]=\"'bb-nickname-label' + nickNameDescId\">\n              <span i18n=\"label|Label for payee nickname field@@billpay-electronic-payee-form.payee-nickname-label\"\n                >Create payee nickname</span\n              >\n              <span\n                class=\"bb-text-default bb-text-support\"\n                i18n=\"label optional|Label for optional text@@billpay-electronic-payee-form.payee-nickname-label-helper\"\n              >\n                (Optional)</span\n              >\n            </label>\n            <bb-input-text-ui\n              formControlName=\"nickName\"\n              data-role=\"nickname-input\"\n              [aria-describedby]=\"nickNameDescId\"\n              [aria-labelledby]=\"'bb-nickname-label' + nickNameDescId\"\n            ></bb-input-text-ui>\n          </div>\n          <div\n            id=\"{{ nickNameDescId }}\"\n            class=\"bb-subtitle bb-text-support\"\n            i18n=\"label|Label for payee nickname info message@@billpay-electronic-payee-form.payee-nickname-info\"\n            data-role=\"nickname-help-text\"\n          >\n            Choose how you want this payee to appear in bill pay. This information is only available to you.\n          </div>\n          <bb-input-validation-message-ui\n            role=\"alert\"\n            [showErrors]=\"hasError('nickName', 'minlength')\"\n            i18n=\"error text|Nickname min length error text@@billpay-electronic-payee-form.error.nickname-minlength\"\n            data-role=\"nickname-error-minlength\"\n          >\n            Nickname must be at least 2 characters\n          </bb-input-validation-message-ui>\n          <bb-input-validation-message-ui\n            role=\"alert\"\n            [showErrors]=\"hasError('nickName', 'maxlength')\"\n            i18n=\"error text|Nickname max length error text@@billpay-electronic-payee-form.error.nickname-maxlength\"\n            data-role=\"nickname-error-maxlength\"\n          >\n            Nickname may not be over a hundred characters\n          </bb-input-validation-message-ui>\n        </div>\n      </bb-fieldset-ui>\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <button\n          bbButton\n          type=\"submit\"\n          data-role=\"continue-button\"\n          i18n=\"Label for button|Electronic payee continue button@@billpay-electronic-payee-form.continue\"\n          class=\"bb-button-bar__button\"\n        >\n          Continue\n        </button>\n        <button\n          bbButton\n          *ngIf=\"backButtonShown\"\n          data-role=\"back-button\"\n          i18n=\"Label for button|Find a different payee button@@billpay-electronic-payee-form.find-different-payee\"\n          (click)=\"toSearch()\"\n          class=\"bb-button-bar__button\"\n          color=\"secondary\"\n        >\n          Find a different payee\n        </button>\n        <button\n          bbButton\n          data-role=\"cancel-button\"\n          color=\"link\"\n          class=\"bb-button-bar__button bb-button-bar__button--across\"\n          (click)=\"cancelForm()\"\n        >\n          <span i18n=\"Cancel edit|Label for a button that cancels form changes@@billpay-electronic-payee-form.cancel\"\n            >Cancel</span\n          >\n        </button>\n      </div>\n    </form>\n  </section>\n</div>\n", components: [{ type: i2$4.FieldsetComponent, selector: "bb-fieldset-ui", inputs: ["heading", "disabled"] }, { type: i2$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4$2.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1$5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayElectronicPayeeFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-electronic-payee-form',
                    templateUrl: './billpay-electronic-payee-form.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$5.FormBuilder }]; }, propDecorators: { payee: [{
                type: Input
            }], zipCodeRequired: [{
                type: Input
            }], backButtonShown: [{
                type: Input
            }], formSubmitted: [{
                type: Output
            }], formCanceled: [{
                type: Output
            }], backToSearch: [{
                type: Output
            }], valueChanged: [{
                type: Output
            }] } });

class BillpayElectronicPayeeSearchComponent {
    /** @internal */
    constructor(dataService) {
        this.dataService = dataService;
        /**
         * Fires a payee's id when electronic payee is selected in the search box.
         */
        this.payeeSelected = new EventEmitter();
        this.errorSearching = new EventEmitter();
        this.typeaheadOptions = {
            ngbTypeahead: this.search.bind(this),
            selectItem: this.onItemSelected.bind(this),
            resultFormatter: (payee) => payee.name,
            inputFormatter: (payee) => payee.name,
        };
    }
    search(text$) {
        const payees$ = (text) => this.dataService.searchPayeesByName(text).pipe(map(({ payees }) => payees || []), catchError(() => {
            this.errorSearching.emit();
            return of([]);
        }));
        return text$.pipe(debounceTime(300), distinctUntilChanged(), filter(text => text.length >= 2), switchMap(payees$), catchError(() => of([])));
    }
    onItemSelected(event) {
        this.payeeSelected.emit(event.item);
    }
}
BillpayElectronicPayeeSearchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayElectronicPayeeSearchComponent, deps: [{ token: BillpayManagePayeeDataService }], target: i0.ɵɵFactoryTarget.Component });
BillpayElectronicPayeeSearchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayElectronicPayeeSearchComponent, selector: "bb-billpay-electronic-payee-search", inputs: { descTextId: "descTextId" }, outputs: { payeeSelected: "payeeSelected", errorSearching: "errorSearching" }, ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <bb-search-box-ui\n    [role]=\"'combobox'\"\n    showClear=\"true\"\n    [aria-describedby]=\"descTextId\"\n    label=\"Payee name\"\n    i18n-label=\"\n      Payee name|Label for electronic search input @@billpay-manage-payee.electronic-payee-search.form.search-label\"\n    clearLabel=\"Clear search\"\n    i18n-clearLabel=\"\n      The aria label used when the clear button is in focus@@billpay-manage-payee.electronic-payee-search.clear-label\"\n    [typeaheadOptions]=\"typeaheadOptions\"\n    [autocomplete]=\"'off'\"\n    autofocus\n  ></bb-search-box-ui>\n</div>\n", components: [{ type: i2$5.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayElectronicPayeeSearchComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-electronic-payee-search',
                    templateUrl: './billpay-electronic-payee-search.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: BillpayManagePayeeDataService }]; }, propDecorators: { payeeSelected: [{
                type: Output
            }], errorSearching: [{
                type: Output
            }], descTextId: [{
                type: Input
            }] } });

const DEFAULT_FORM_VALUE = {
    name: '',
    address: { address1: '', address2: '', city: '', state: '', postalCode: '' },
    phoneNumber: '',
    accountNumber: '',
    nickName: '',
};
const DEFAULT_COUNTRY_CODE = 'US';
class BillpayManualPayeeFormComponent {
    /** @internal */
    constructor(formBuilder, phoneNumberFormatter) {
        this.formBuilder = formBuilder;
        this.phoneNumberFormatter = phoneNumberFormatter;
        /**
         * Hides elements that are not relevant when editing a payee. Defaults to false.
         */
        this.editForm = false;
        this.formSubmitted = new EventEmitter();
        this.formCanceled = new EventEmitter();
        this.backToSearch = new EventEmitter();
        this.valueChanged = new EventEmitter();
        this.payeeForm = new FormGroup({});
        this.componentDestroyed$ = new Subject();
        this.isSubmissionAttempted = false;
        this.requiredErrorId = BillpayUtilityService.generateId();
        this.minLengthErrorId = BillpayUtilityService.generateId();
        this.maxlengthErrorId = BillpayUtilityService.generateId();
        this.helpTextId = BillpayUtilityService.generateId();
        this.formatErrorId = BillpayUtilityService.generateId();
        this.labelId = BillpayUtilityService.generateId();
    }
    ngOnInit() {
        this.payeeForm = this.createForm();
        this.setValidators();
        this.payeeForm.valueChanges.pipe(takeUntil(this.componentDestroyed$), take(1)).subscribe(() => {
            this.valueChanged.emit();
        });
        const phoneNumberControl = this.payeeForm.get('phoneNumber');
        if (phoneNumberControl) {
            this.setupPhoneNumberFormatter(phoneNumberControl);
        }
    }
    ngOnDestroy() {
        this.componentDestroyed$.next();
        this.componentDestroyed$.complete();
    }
    onSubmit(payeeForm) {
        if (!this.isSubmissionAttempted) {
            this.isSubmissionAttempted = true;
        }
        if (payeeForm.invalid) {
            payeeForm.markAllAsTouched();
            return;
        }
        this.formSubmitted.emit(payeeForm.value);
    }
    cancelForm() {
        this.formCanceled.emit();
    }
    toSearch() {
        this.backToSearch.emit();
    }
    hasError(controlName, errorName) {
        const control = this.payeeForm.get(controlName);
        return !!control && control.touched && control.hasError(errorName);
    }
    createForm() {
        const _a = Object.assign(Object.assign(Object.assign({}, DEFAULT_FORM_VALUE), this.payeeFormState), { address: Object.assign(Object.assign({}, DEFAULT_FORM_VALUE.address), (this.payeeFormState && Object.assign({}, this.payeeFormState.address))) }), { phoneNumber, address } = _a, restFormState = __rest(_a, ["phoneNumber", "address"]);
        return this.formBuilder.group(Object.assign(Object.assign({}, restFormState), { phoneNumber: this.formatPhoneNumber(phoneNumber), address: this.formBuilder.group(address) }));
    }
    setValidators() {
        [
            ['name', [Validators.required, Validators.minLength(2), Validators.maxLength(100)]],
            ['address.address1', [Validators.required, Validators.maxLength(40)]],
            ['address.address2', [Validators.maxLength(40)]],
            ['address.city', [Validators.required, Validators.maxLength(32)]],
            ['address.state', [Validators.required]],
            ['address.postalCode', [Validators.required, Validators.pattern(/^\d{5}(\d{4})?$/)]],
            ['phoneNumber', [Validators.pattern(/^\+1 \d{3} \d{3} \d{4}$/)]],
            ['accountNumber', [Validators.minLength(2), Validators.maxLength(100)]],
            ['nickName', [Validators.minLength(2), Validators.maxLength(100)]],
        ].forEach(([controlName, validators]) => {
            const control = this.payeeForm.get(controlName);
            if (control) {
                control.setValidators(validators);
                control.updateValueAndValidity();
            }
        });
    }
    formatPhoneNumber(phoneNumber) {
        return this.phoneNumberFormatter.transform(phoneNumber, DEFAULT_COUNTRY_CODE, true);
    }
    setupPhoneNumberFormatter(control) {
        control.valueChanges.pipe(distinctUntilChanged()).subscribe(() => {
            control.setValue(this.formatPhoneNumber(control.value), {
                emitEvent: false,
            });
        });
    }
}
BillpayManualPayeeFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManualPayeeFormComponent, deps: [{ token: i1$5.FormBuilder }, { token: i1$3.PhoneNumberPipe }], target: i0.ɵɵFactoryTarget.Component });
BillpayManualPayeeFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayManualPayeeFormComponent, selector: "bb-billpay-manual-payee-form", inputs: { payeeFormState: "payeeFormState", editForm: "editForm" }, outputs: { formSubmitted: "formSubmitted", formCanceled: "formCanceled", backToSearch: "backToSearch", valueChanged: "valueChanged" }, providers: [PhoneNumberPipe], ngImport: i0, template: "<div class=\"card card-lg\">\n  <section class=\"card-body\">\n    <form #form data-role=\"manual-payee-form\" (ngSubmit)=\"onSubmit(payeeForm)\" [formGroup]=\"payeeForm\">\n      <bb-alert-ui\n        *ngIf=\"!editForm\"\n        modifier=\"warning\"\n        [title]=\"\n          'Please note that payees entered manually will have a longer payment processing time and no eBill functionality'\n        \"\n        i18n-title=\"alert title|For create payee form alert@@billpay-manual-payee-form.alert\"\n      >\n      </bb-alert-ui>\n      <div class=\"bb-block bb-block--xl\">\n        <div class=\"bb-form-field bb-form-field--md\">\n          <bb-input-text-ui\n            formControlName=\"name\"\n            data-role=\"name-input\"\n            label=\"Company, organisation or individual's name\"\n            i18n-label=\"label|Label for company, organisation, individual's name field@@billpay-manual-payee-form.name\"\n            [aria-describedby]=\"\n              ['name-' + requiredErrorId, 'name-' + minLengthErrorId, 'name-' + maxlengthErrorId].join(' ')\n            \"\n            autofocus\n          >\n          </bb-input-text-ui>\n        </div>\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"hasError('name', 'required')\"\n          i18n=\"error text|Name is required error text@@billpay-manual-payee-form.error.name-required\"\n          data-role=\"name-error-required\"\n          [messageId]=\"'name-' + requiredErrorId\"\n        >\n          Please enter a name\n        </bb-input-validation-message-ui>\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"hasError('name', 'minlength')\"\n          i18n=\"error text|Name minlength error text@@billpay-manual-payee-form.error.name-minlength\"\n          data-role=\"name-error-minlength\"\n          [messageId]=\"'name-' + minLengthErrorId\"\n        >\n          Name must be at least 2 characters\n        </bb-input-validation-message-ui>\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"hasError('name', 'maxlength')\"\n          i18n=\"error text|Name max length error text@@billpay-manual-payee-form.error.name-maxlength\"\n          data-role=\"name-error-maxlength\"\n          [messageId]=\"'name-' + maxlengthErrorId\"\n        >\n          Name may not be over a hundred characters\n        </bb-input-validation-message-ui>\n      </div>\n      <bb-fieldset-ui\n        heading=\"Payee contact details\"\n        i18n-heading=\"Payee contact details heading@@billpay-manual-payee-form.payee-details-heading\"\n      >\n        <bb-billpay-address-form formGroupName=\"address\"></bb-billpay-address-form>\n\n        <div class=\"bb-block bb-block--md\">\n          <div class=\"bb-form-field bb-form-field--sm\">\n            <label for=\"billpay-phone-number-input\" data-role=\"phone-number-label\">\n              <ng-container i18n=\"label|Label for phone number field@@billpay-manual-payee-form.phone-label\"\n                >Phone number&nbsp;</ng-container\n              ><span\n                class=\"bb-text-default bb-text-support\"\n                i18n=\"label optional|Label for optional field@@billpay-manual-payee-form.optional-label\"\n                >(Optional)</span\n              ></label\n            >\n            <input\n              class=\"form-control\"\n              id=\"billpay-phone-number-input\"\n              formControlName=\"phoneNumber\"\n              data-role=\"phone-number-input\"\n              [attr.aria-describedby]=\"\n                ['billpay-phone-number-help-' + helpTextId, 'billpay-phone-number-help-' + formatErrorId].join(' ')\n              \"\n              type=\"tel\"\n              aria-label=\"Phone number\"\n              i18n-aria-label=\"\n                aria label|Aria label for phone number field@@billpay-manual-payee-form.phone-number-aria-label\"\n            />\n          </div>\n          <span\n            id=\"{{ 'billpay-phone-number-help-' + helpTextId }}\"\n            class=\"bb-subtitle bb-text-support\"\n            i18n=\"label|Label for phone number format info message@@billpay-manual-payee-form.phone-format\"\n            data-role=\"phone-number-help-text\"\n          >\n            Format +1 XXX XXX XXXX\n          </span>\n          <bb-input-validation-message-ui\n            [messageId]=\"'billpay-phone-number-help-' + formatErrorId\"\n            role=\"alert\"\n            [showErrors]=\"hasError('phoneNumber', 'pattern')\"\n            i18n=\"error text|Phone number format error text@@billpay-manual-payee-form.error.phone-number-format\"\n            data-role=\"phone-number-error-pattern\"\n          >\n            Phone number format should be +1 xxx xxx xxxx\n          </bb-input-validation-message-ui>\n        </div>\n\n        <div>\n          <div class=\"bb-form-field bb-form-field--md\">\n            <label\n              class=\"bb-label\"\n              data-role=\"account-number-input-label\"\n              [attr.id]=\"'bb-account-number-label' + labelId\"\n            >\n              <span i18n=\"label|Label for account number field@@billpay-manual-payee-form.account-number-label\"\n                >Account number</span\n              >\n              <span\n                class=\"bb-text-default bb-text-support\"\n                i18n=\"label optional|Label for optional text@@billpay-manual-payee-form.account-number-label-helper\"\n              >\n                (Optional)</span\n              >\n            </label>\n            <bb-input-text-ui\n              formControlName=\"accountNumber\"\n              data-role=\"account-number-input\"\n              [aria-labelledby]=\"'bb-account-number-label' + labelId\"\n              [aria-describedby]=\"\n                [\n                  'account-number-help-' + helpTextId,\n                  'account-number-help-' + minLengthErrorId,\n                  'account-number-help-' + maxlengthErrorId\n                ].join(' ')\n              \"\n            >\n            </bb-input-text-ui>\n          </div>\n          <span\n            [id]=\"'account-number-help-' + helpTextId\"\n            class=\"bb-subtitle bb-text-support\"\n            i18n=\"label|Label for account number info message@@billpay-manual-payee-form.account-number-info\"\n            data-role=\"account-number-help-text\"\n            >If you have an account number for this payee, enter it as it appears on your bill\n          </span>\n          <bb-input-validation-message-ui\n            [messageId]=\"'account-number-help-' + minLengthErrorId\"\n            role=\"alert\"\n            [showErrors]=\"hasError('accountNumber', 'minlength')\"\n            i18n=\"\n              error text|Account number minlength error text@@billpay-manual-payee-form.error.account-number-minlength\"\n            data-role=\"account-number-error-minlength\"\n          >\n            Account number must be at least 2 characters\n          </bb-input-validation-message-ui>\n          <bb-input-validation-message-ui\n            [messageId]=\"'account-number-help-' + maxlengthErrorId\"\n            role=\"alert\"\n            [showErrors]=\"hasError('accountNumber', 'maxlength')\"\n            i18n=\"\n              error text|Account number max length error text@@billpay-manual-payee-form.error.account-number-maxlength\"\n            data-role=\"account-number-error-maxlength\"\n          >\n            Account number may not be over a hundred characters\n          </bb-input-validation-message-ui>\n        </div>\n      </bb-fieldset-ui>\n\n      <bb-fieldset-ui\n        heading=\"Payee nickname\"\n        i18n-heading=\"Payee nickname@@billpay-manual-payee-form.payee-nickname-heading\"\n      >\n        <div class=\"bb-block bb-block--md\">\n          <div class=\"bb-form-field bb-form-field--md\">\n            <label class=\"bb-label\" data-role=\"nickname-input-label\" [attr.id]=\"'bb-nickname-label' + labelId\">\n              <span i18n=\"label|Label for payee nickname field@@billpay-manual-payee-form.payee-nickname-label\"\n                >Create payee nickname\n              </span>\n              <span\n                class=\"bb-text-default bb-text-support\"\n                i18n=\"label optional|Label for optional text@@billpay-manual-payee-form.payee-nickname-label-helper\"\n              >\n                (Optional)</span\n              >\n            </label>\n            <bb-input-text-ui\n              formControlName=\"nickName\"\n              data-role=\"nickname-input\"\n              [aria-labelledby]=\"'bb-nickname-label' + labelId\"\n              [aria-describedby]=\"\n                ['nickName-' + helpTextId, 'nickName-' + minLengthErrorId, 'nickName-' + maxlengthErrorId].join(' ')\n              \"\n            >\n            </bb-input-text-ui>\n          </div>\n          <span\n            [id]=\"'nickName-' + helpTextId\"\n            class=\"bb-subtitle bb-text-support\"\n            i18n=\"label|Label for payee nickname info message@@billpay-manual-payee-form.payee-nickname-info\"\n            data-role=\"nickname-help-text\"\n            >Choose how you want this payee to appear in bill pay. This information is only available to you.</span\n          >\n          <bb-input-validation-message-ui\n            role=\"alert\"\n            [showErrors]=\"hasError('nickName', 'minlength')\"\n            i18n=\"error text|Nickname min length error text@@billpay-manual-payee-form.error.nickname-minlength\"\n            data-role=\"nickname-error-minlength\"\n            [messageId]=\"'nickName-' + minLengthErrorId\"\n          >\n            Nickname must be at least 2 characters\n          </bb-input-validation-message-ui>\n          <bb-input-validation-message-ui\n            role=\"alert\"\n            [showErrors]=\"hasError('nickName', 'maxlength')\"\n            i18n=\"error text|Nickname max length error text@@billpay-manual-payee-form.error.nickname-maxlength\"\n            data-role=\"nickname-error-maxlength\"\n            [messageId]=\"'nickName-' + maxlengthErrorId\"\n          >\n            Nickname may not be over a hundred characters\n          </bb-input-validation-message-ui>\n        </div>\n      </bb-fieldset-ui>\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <button\n          bbButton\n          type=\"submit\"\n          data-role=\"continue-button\"\n          i18n=\"Label for button|Manual payee continue button@@billpay-manual-payee-form.continue\"\n          class=\"bb-button-bar__button\"\n        >\n          Continue\n        </button>\n        <button\n          *ngIf=\"!editForm\"\n          bbButton\n          data-role=\"back-button\"\n          i18n=\"Label for button|Find a different payee button@@billpay-manual-payee-form.find-different-payee\"\n          (click)=\"toSearch()\"\n          class=\"bb-button-bar__button\"\n          color=\"secondary\"\n        >\n          Find a different payee\n        </button>\n        <button\n          bbButton\n          data-role=\"cancel-button\"\n          i18n=\"Label for button|Cancel button@@billpay-manual-payee-form.cancel\"\n          (click)=\"cancelForm()\"\n          class=\"bb-button-bar__button bb-button-bar__button--across\"\n          color=\"link\"\n        >\n          Cancel\n        </button>\n      </div>\n    </form>\n  </section>\n</div>\n", components: [{ type: i3$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i4$2.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i2$4.FieldsetComponent, selector: "bb-fieldset-ui", inputs: ["heading", "disabled"] }, { type: i4.ӨBillpayAddressFormComponent, selector: "bb-billpay-address-form" }], directives: [{ type: i1$5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$5.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i1$5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManualPayeeFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-manual-payee-form',
                    templateUrl: './billpay-manual-payee-form.component.html',
                    providers: [PhoneNumberPipe],
                }]
        }], ctorParameters: function () { return [{ type: i1$5.FormBuilder }, { type: i1$3.PhoneNumberPipe }]; }, propDecorators: { payeeFormState: [{
                type: Input
            }], editForm: [{
                type: Input
            }], formSubmitted: [{
                type: Output
            }], formCanceled: [{
                type: Output
            }], backToSearch: [{
                type: Output
            }], valueChanged: [{
                type: Output
            }] } });

const components = [
    BillpayCancelNewPayeeModalComponent,
    BillpayElectronicPayeeReviewComponent,
    BillpayManualPayeeReviewComponent,
    BillpayPayverisEbillsEnrolmentSelectBillerComponent,
    BillpayPayverisEbillsEnrolmentCancelModalComponent,
    BillpayPayverisEbillsEnrolmentMfaEntryComponent,
    BillpayPayverisEbillsEnrolmentLoginComponent,
    BillpayPayverisEbillsEnrolmentOtpSelectComponent,
    BillpayPayverisEbillsEnrolmentOtpEntryComponent,
    BillpayPayverisEbillsEnrolmentCaptchaComponent,
    BillpayPayverisEbillsEnrolmentSelectAccountComponent,
    BillpayPayverisEbillsEnrolmentErrorComponent,
    BillpayPayeeSummaryListComponent,
    BillpayPayeeSummaryItemComponent,
    BillpayPayeeStepperComponent,
    BillpayPayeeInformationComponent,
    BillpayPayverisEbillsEnrolmentNotificationSuccessComponent,
    BillpayCancelEditPayeeModalComponent,
    BillpayElectronicPayeeFormComponent,
    BillpayElectronicPayeeSearchComponent,
    BillpayManualPayeeFormComponent,
];
const uiAngModules = [
    IconModule,
    CollapsibleModule,
    PhoneNumberModule,
    AlertModule,
    InputPasswordModule,
    InputRadioGroupModule,
    BbDatePipeModule,
    DropdownMenuModule,
    FieldsetModule,
    SearchBoxModule,
];
class ManagePayeesJourneyUiModule {
}
ManagePayeesJourneyUiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesJourneyUiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ManagePayeesJourneyUiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesJourneyUiModule, declarations: [BillpayCancelNewPayeeModalComponent,
        BillpayElectronicPayeeReviewComponent,
        BillpayManualPayeeReviewComponent,
        BillpayPayverisEbillsEnrolmentSelectBillerComponent,
        BillpayPayverisEbillsEnrolmentCancelModalComponent,
        BillpayPayverisEbillsEnrolmentMfaEntryComponent,
        BillpayPayverisEbillsEnrolmentLoginComponent,
        BillpayPayverisEbillsEnrolmentOtpSelectComponent,
        BillpayPayverisEbillsEnrolmentOtpEntryComponent,
        BillpayPayverisEbillsEnrolmentCaptchaComponent,
        BillpayPayverisEbillsEnrolmentSelectAccountComponent,
        BillpayPayverisEbillsEnrolmentErrorComponent,
        BillpayPayeeSummaryListComponent,
        BillpayPayeeSummaryItemComponent,
        BillpayPayeeStepperComponent,
        BillpayPayeeInformationComponent,
        BillpayPayverisEbillsEnrolmentNotificationSuccessComponent,
        BillpayCancelEditPayeeModalComponent,
        BillpayElectronicPayeeFormComponent,
        BillpayElectronicPayeeSearchComponent,
        BillpayManualPayeeFormComponent], imports: [CommonModule, ReactiveFormsModule, FormsModule, NgbModule, BillpayJourneysCommonModule, IconModule,
        CollapsibleModule,
        PhoneNumberModule,
        AlertModule,
        InputPasswordModule,
        InputRadioGroupModule,
        BbDatePipeModule,
        DropdownMenuModule,
        FieldsetModule,
        SearchBoxModule], exports: [BillpayCancelNewPayeeModalComponent,
        BillpayElectronicPayeeReviewComponent,
        BillpayManualPayeeReviewComponent,
        BillpayPayverisEbillsEnrolmentSelectBillerComponent,
        BillpayPayverisEbillsEnrolmentCancelModalComponent,
        BillpayPayverisEbillsEnrolmentMfaEntryComponent,
        BillpayPayverisEbillsEnrolmentLoginComponent,
        BillpayPayverisEbillsEnrolmentOtpSelectComponent,
        BillpayPayverisEbillsEnrolmentOtpEntryComponent,
        BillpayPayverisEbillsEnrolmentCaptchaComponent,
        BillpayPayverisEbillsEnrolmentSelectAccountComponent,
        BillpayPayverisEbillsEnrolmentErrorComponent,
        BillpayPayeeSummaryListComponent,
        BillpayPayeeSummaryItemComponent,
        BillpayPayeeStepperComponent,
        BillpayPayeeInformationComponent,
        BillpayPayverisEbillsEnrolmentNotificationSuccessComponent,
        BillpayCancelEditPayeeModalComponent,
        BillpayElectronicPayeeFormComponent,
        BillpayElectronicPayeeSearchComponent,
        BillpayManualPayeeFormComponent, IconModule,
        CollapsibleModule,
        PhoneNumberModule,
        AlertModule,
        InputPasswordModule,
        InputRadioGroupModule,
        BbDatePipeModule,
        DropdownMenuModule,
        FieldsetModule,
        SearchBoxModule] });
ManagePayeesJourneyUiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesJourneyUiModule, imports: [[CommonModule, ReactiveFormsModule, FormsModule, NgbModule, BillpayJourneysCommonModule, ...uiAngModules], IconModule,
        CollapsibleModule,
        PhoneNumberModule,
        AlertModule,
        InputPasswordModule,
        InputRadioGroupModule,
        BbDatePipeModule,
        DropdownMenuModule,
        FieldsetModule,
        SearchBoxModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesJourneyUiModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components],
                    imports: [CommonModule, ReactiveFormsModule, FormsModule, NgbModule, BillpayJourneysCommonModule, ...uiAngModules],
                    exports: [...components, ...uiAngModules],
                }]
        }] });

class BillpayManagePayeeDeactivateGuardService extends BillpayBaseDeactivateGuardService {
    /** @internal */
    constructor(router, location) {
        super(router, location);
        this.allowedPreviousRoutes = [
            /^.*\/manual(\/review)?$/,
            /^.*\/manual\/edit\/.+(\/review.+)?$/,
            /^.*\/electronic\/.+(\/review.+)?$/,
            /^.*\/electronic\/edit\/.+(\/review.+)?$/,
        ];
        this.allowedNextRoutes = [
            /^.*\/manual(\/review)?$/,
            /^.*\/manual\/edit\/.+(\/review.+)?$/,
            /^.*\/electronic\/.+(\/review.+)?$/,
            /^.*\/electronic\/edit\/.+(\/review.+)?$/,
        ];
    }
}
BillpayManagePayeeDeactivateGuardService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManagePayeeDeactivateGuardService, deps: [{ token: i1.Router }, { token: i5$1.Location }], target: i0.ɵɵFactoryTarget.Injectable });
BillpayManagePayeeDeactivateGuardService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManagePayeeDeactivateGuardService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManagePayeeDeactivateGuardService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i5$1.Location }]; } });

class BillpaySearchPayeeViewComponent {
    /** @internal */
    constructor(router) {
        this.router = router;
        this._searchAvailable = true;
        this.descTextId = BillpayUtilityService.generateId();
    }
    createManualPayee() {
        this.router.navigateToManualPayeeForm();
    }
    onPayeeSelected(payee) {
        const { merchantID, zipRequired, name } = payee;
        this.router.navigateToElectronicPayeeForm(merchantID, { queryParams: { zipRequired, name } });
    }
    onSearchError() {
        this._searchAvailable = false;
    }
    onCanceled() {
        this.router.navigateToPayeeList();
    }
    get searchAvailable() {
        return this._searchAvailable;
    }
}
BillpaySearchPayeeViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpaySearchPayeeViewComponent, deps: [{ token: ManagePayeesNavigationService }], target: i0.ɵɵFactoryTarget.Component });
BillpaySearchPayeeViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpaySearchPayeeViewComponent, selector: "ng-component", ngImport: i0, template: "<ng-container *ngIf=\"searchAvailable; else errorState\">\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <section class=\"bb-block bb-block--md\">\n        <bb-header-ui\n          headingType=\"h2\"\n          i18n-heading=\"Find a payee heading|Form heading@@billpay-manage-payee.search.form.heading\"\n          heading=\"Find a payee\"\n        >\n        </bb-header-ui>\n        <bb-billpay-electronic-payee-search\n          (payeeSelected)=\"onPayeeSelected($event)\"\n          (errorSearching)=\"onSearchError()\"\n          [descTextId]=\"descTextId\"\n          data-role=\"search-box\"\n        ></bb-billpay-electronic-payee-search>\n        <p\n          id=\"{{ descTextId }}\"\n          class=\"bb-block bb-block--md\"\n          i18n=\"Payee search description|Description under search box@@billpay-manage-payee.search.form.description\"\n        >\n          If the payee can\u2019t be found, you can choose to enter their details manually\n        </p>\n        <div class=\"bb-button-bar bb-button-bar--reverse\">\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            data-role=\"enter-details-button\"\n            (click)=\"createManualPayee()\"\n            color=\"secondary\"\n            i18n=\"button label|Create manual payee button@@billpay-manage-payee.search.form.button\"\n          >\n            Enter details manually\n          </button>\n        </div>\n      </section>\n    </div>\n  </div>\n</ng-container>\n\n<ng-template #errorState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        data-role=\"error-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"error-outline\"\n        subtitle=\"Please try again later or enter details manually. Please note that payees entered manually will have a longer payment processing time and no eBill functionality.\"\n        i18n-subtitle=\"Payee search unavailable subtitle@@bb-billpay-payee-list-widget-ang.search-unavailable.subtitle\"\n        title=\"Payee search is currently unavailable\"\n        i18n-title=\"Payee search unavailable title@@bb-billpay-payee-list-widget-ang.search-unavailable.title\"\n      >\n      </bb-empty-state-ui>\n      <div class=\"bb-state-container__footer\">\n        <div class=\"bb-button-bar bb-button-bar--reverse bb-button-bar--center bb-block bb-block--xl\">\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            data-role=\"enter-details-button\"\n            (click)=\"createManualPayee()\"\n            color=\"secondary\"\n            i18n=\"button label|Create manual payee button@@billpay-manage-payee.search.form.button\"\n          >\n            Enter details manually\n          </button>\n        </div>\n        <div class=\"bb-button-bar bb-button-bar--reverse bb-button-bar--center\">\n          <button\n            bbButton\n            class=\"bb-button-bar__button bb-button-bar__button--across\"\n            data-role=\"cancel-button\"\n            (click)=\"onCanceled()\"\n            color=\"link\"\n            i18n=\"button label|Cancel payee search button@@billpay-manage-payee.cancel.form.button\"\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i2$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: BillpayElectronicPayeeSearchComponent, selector: "bb-billpay-electronic-payee-search", inputs: ["descTextId"], outputs: ["payeeSelected", "errorSearching"] }, { type: i10$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpaySearchPayeeViewComponent, decorators: [{
            type: Component,
            args: [{
                    templateUrl: './billpay-search-payee-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: ManagePayeesNavigationService }]; } });

class BillpayCreateManualPayeeViewComponent {
    /** @internal */
    constructor(stateService, router, discardModalService) {
        this.stateService = stateService;
        this.router = router;
        this.discardModalService = discardModalService;
        this.payeeFormState = this.stateService.manualPayeeFormState;
        this.isFormTouched = false;
        this.isFindPayeeModal = false;
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    onWindowUnload($event) {
        if ((this.isFormTouched || this.stateService.isFormProcessing) && !this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    onFormSubmitted(payee) {
        this.stateService.isFormProcessing = true;
        this.stateService.setManualPayee(payee);
        this.router.navigateToManualPayeeReview();
    }
    onBackToSearch() {
        this.isFindPayeeModal = true;
        this.router.navigateToSearch();
    }
    onFormCanceled() {
        this.router.navigateToPayeeList();
    }
    onFormValueChanged() {
        this.isFormTouched = true;
    }
    openModal() {
        return this.isFormTouched || this.stateService.isFormProcessing ? this.discardModalService.openModal() : of(true);
    }
    onModalResolve(resolvedWith) {
        if (resolvedWith)
            this.stateService.resetManualPayee();
        this.isFindPayeeModal = false;
        this.discardModalService.onModalResolve(resolvedWith);
    }
}
BillpayCreateManualPayeeViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayCreateManualPayeeViewComponent, deps: [{ token: BillpayManagePayeeStateService }, { token: ManagePayeesNavigationService }, { token: i4.BillpayDiscardChangesModalService }], target: i0.ɵɵFactoryTarget.Component });
BillpayCreateManualPayeeViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayCreateManualPayeeViewComponent, selector: "ng-component", host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, providers: [BillpayDiscardChangesModalService], ngImport: i0, template: "<bb-billpay-manual-payee-form\n  [payeeFormState]=\"payeeFormState | async\"\n  (formSubmitted)=\"onFormSubmitted($event)\"\n  (formCanceled)=\"onFormCanceled()\"\n  (backToSearch)=\"onBackToSearch()\"\n  (valueChanged)=\"onFormValueChanged()\"\n>\n</bb-billpay-manual-payee-form>\n<bb-billpay-cancel-new-payee-modal\n  *ngIf=\"isDiscardModalOpen\"\n  [findPayee]=\"isFindPayeeModal\"\n  (resolve)=\"onModalResolve($event)\"\n></bb-billpay-cancel-new-payee-modal>\n", components: [{ type: BillpayManualPayeeFormComponent, selector: "bb-billpay-manual-payee-form", inputs: ["payeeFormState", "editForm"], outputs: ["formSubmitted", "formCanceled", "backToSearch", "valueChanged"] }, { type: BillpayCancelNewPayeeModalComponent, selector: "bb-billpay-cancel-new-payee-modal", inputs: ["findPayee"], outputs: ["resolve"] }], directives: [{ type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5$1.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayCreateManualPayeeViewComponent, decorators: [{
            type: Component,
            args: [{
                    templateUrl: './billpay-create-manual-payee-view.component.html',
                    providers: [BillpayDiscardChangesModalService],
                }]
        }], ctorParameters: function () { return [{ type: BillpayManagePayeeStateService }, { type: ManagePayeesNavigationService }, { type: i4.BillpayDiscardChangesModalService }]; }, propDecorators: { onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });

class BillpayEditManualPayeeViewComponent {
    /** @internal */
    constructor(route, stateService, dataService, router, discardModalService) {
        this.route = route;
        this.stateService = stateService;
        this.dataService = dataService;
        this.router = router;
        this.discardModalService = discardModalService;
        this.hasLoadingError = false;
        this.isFormTouched = false;
        this.payeeId = '';
    }
    ngOnInit() {
        this.payeeFormState = combineLatest([
            this.route.paramMap.pipe(map(params => params.get('id') || '')),
            this.stateService.manualPayeeFormState,
        ]).pipe(tap(([id]) => (this.payeeId = id)), switchMap(([id, state]) => (state && of(state)) ||
            this.dataService.getManualPayee(id).pipe(map(payee => payee && this.stateService.toManualFormState(payee)), catchError(() => {
                this.hasLoadingError = true;
                return of({});
            }))));
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    onWindowUnload($event) {
        if ((this.isFormTouched || this.stateService.isFormProcessing) && !this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    onFormSubmitted(payee) {
        this.stateService.isFormProcessing = true;
        this.stateService.setManualPayee(payee);
        this.router.navigateToEditManualReview(this.payeeId);
    }
    onFormValueChanged() {
        this.isFormTouched = true;
    }
    onFormCanceled() {
        this.router.navigateToPayeeList();
    }
    openModal() {
        return this.isFormTouched || this.stateService.isFormProcessing ? this.discardModalService.openModal() : of(true);
    }
    onModalResolve(resolvedWith) {
        this.discardModalService.onModalResolve(resolvedWith);
        if (resolvedWith) {
            this.router.navigateToPayeeList();
        }
    }
}
BillpayEditManualPayeeViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayEditManualPayeeViewComponent, deps: [{ token: i1.ActivatedRoute }, { token: BillpayManagePayeeStateService }, { token: BillpayManagePayeeDataService }, { token: ManagePayeesNavigationService }, { token: i4.BillpayDiscardChangesModalService }], target: i0.ɵɵFactoryTarget.Component });
BillpayEditManualPayeeViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayEditManualPayeeViewComponent, selector: "ng-component", host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, providers: [BillpayDiscardChangesModalService], ngImport: i0, template: "<ng-container *ngIf=\"payeeFormState | async as payeeState; else loadingState\">\n  <ng-container *ngIf=\"!hasLoadingError; else errorState\">\n    <bb-billpay-manual-payee-form\n      [editForm]=\"true\"\n      [payeeFormState]=\"payeeState\"\n      (formSubmitted)=\"onFormSubmitted($event)\"\n      (formCanceled)=\"onFormCanceled()\"\n      (valueChanged)=\"onFormValueChanged()\"\n    >\n    </bb-billpay-manual-payee-form>\n  </ng-container>\n</ng-container>\n\n<bb-billpay-cancel-edit-payee-modal\n  *ngIf=\"isDiscardModalOpen\"\n  (resolve)=\"onModalResolve($event)\"\n></bb-billpay-cancel-edit-payee-modal>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"> </bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #errorState>\n  <bb-empty-state-ui\n    data-role=\"error-state\"\n    iconSize=\"xxl\"\n    iconModifier=\"error\"\n    subtitle=\"Try to reload the page or contact support\"\n    i18n-subtitle=\"\n      Try to reload the page or contact support|Edit manual payee\n      subtitle@@bb-billpay-manage-payee-widget-ang.loading.subtitle\"\n    title=\"Payee is not loading\"\n    i18n-title=\"Payee is not loading|Edit manual payee loading title@@bb-billpay-manage-payee-widget-ang.loading.title\"\n  >\n  </bb-empty-state-ui>\n</ng-template> \n", components: [{ type: BillpayManualPayeeFormComponent, selector: "bb-billpay-manual-payee-form", inputs: ["payeeFormState", "editForm"], outputs: ["formSubmitted", "formCanceled", "backToSearch", "valueChanged"] }, { type: BillpayCancelEditPayeeModalComponent, selector: "bb-billpay-cancel-edit-payee-modal", outputs: ["resolve"] }, { type: i1$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i10$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5$1.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayEditManualPayeeViewComponent, decorators: [{
            type: Component,
            args: [{
                    templateUrl: './billpay-edit-manual-payee-view.component.html',
                    providers: [BillpayDiscardChangesModalService],
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: BillpayManagePayeeStateService }, { type: BillpayManagePayeeDataService }, { type: ManagePayeesNavigationService }, { type: i4.BillpayDiscardChangesModalService }]; }, propDecorators: { onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });

class BillpayCreateElectronicPayeeViewComponent extends BaseElectronicPayeePageDirective {
    /** @internal */
    constructor(route, stateService, discardModalService, router) {
        super(route, stateService, discardModalService);
        this.router = router;
        this.zipRequired$ = this.route.queryParamMap.pipe(take(1), map(params => params.get('zipRequired')), map(zipRequired => (zipRequired ? JSON.parse(zipRequired) : false)));
        this.name$ = this.route.queryParamMap.pipe(take(1), map(params => params.get('name') || ''));
        this.payee$ = this.initializePayee();
    }
    onFormSubmitted(payee) {
        this.stateService.setElectronicPayee(payee);
        this.id$.subscribe(id => this.router.navigateToElectronicPayeeReview(id, { queryParamsHandling: 'preserve' }));
    }
    onBackToSearch() {
        this.isFindPayeeModal = true;
        this.router.navigateToSearch();
    }
    onFormCanceled() {
        this.router.navigateToPayeeList();
    }
    initializePayee() {
        const payee$ = combineLatest([this.zipRequired$, this.name$]).pipe(map(([zipRequired, name]) => (Object.assign({ name, accountNumber: '', nickName: '' }, (zipRequired && { merchantZipCode: '' })))));
        return this.payeeState$.pipe(switchMap(state => (state ? of(state) : payee$)));
    }
}
BillpayCreateElectronicPayeeViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayCreateElectronicPayeeViewComponent, deps: [{ token: i1.ActivatedRoute }, { token: BillpayManagePayeeStateService }, { token: i4.BillpayDiscardChangesModalService }, { token: ManagePayeesNavigationService }], target: i0.ɵɵFactoryTarget.Component });
BillpayCreateElectronicPayeeViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayCreateElectronicPayeeViewComponent, selector: "ng-component", providers: [BillpayDiscardChangesModalService], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"payee$ | async as payee\">\n  <bb-billpay-electronic-payee-form\n    [payee]=\"payee\"\n    [zipCodeRequired]=\"zipRequired$ | async\"\n    (formSubmitted)=\"onFormSubmitted($event)\"\n    (formCanceled)=\"onFormCanceled()\"\n    (backToSearch)=\"onBackToSearch()\"\n    (valueChanged)=\"onFormValueChanged()\"\n  >\n  </bb-billpay-electronic-payee-form>\n\n  <bb-billpay-cancel-new-payee-modal\n    *ngIf=\"isDiscardModalOpen\"\n    [findPayee]=\"isFindPayeeModal\"\n    (resolve)=\"onModalResolve($event)\"\n  ></bb-billpay-cancel-new-payee-modal>\n</ng-container>\n", components: [{ type: BillpayElectronicPayeeFormComponent, selector: "bb-billpay-electronic-payee-form", inputs: ["payee", "zipCodeRequired", "backButtonShown"], outputs: ["formSubmitted", "formCanceled", "backToSearch", "valueChanged"] }, { type: BillpayCancelNewPayeeModalComponent, selector: "bb-billpay-cancel-new-payee-modal", inputs: ["findPayee"], outputs: ["resolve"] }], directives: [{ type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5$1.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayCreateElectronicPayeeViewComponent, decorators: [{
            type: Component,
            args: [{
                    templateUrl: './billpay-create-electronic-payee-view.component.html',
                    providers: [BillpayDiscardChangesModalService],
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: BillpayManagePayeeStateService }, { type: i4.BillpayDiscardChangesModalService }, { type: ManagePayeesNavigationService }]; } });

class BillpayEditElectronicPayeeViewComponent extends BaseElectronicPayeePageDirective {
    /** @internal */
    constructor(route, stateService, discardModalService, router, dataService, cd) {
        super(route, stateService, discardModalService);
        this.router = router;
        this.dataService = dataService;
        this.cd = cd;
        this.hasLoadingError = false;
        this.payee$ = this.initializePayee();
    }
    onFormSubmitted(payee) {
        this.stateService.setElectronicPayee(payee);
        this.id$.subscribe(id => this.router.navigateToEditElectronicPayeeReview(id));
    }
    initializePayee() {
        const payee$ = this.id$.pipe(switchMap(id => this.dataService.getElectronicPayee(id)), map(payee => this.stateService.electronicGetResponseToForm(payee)), catchError(() => {
            this.hasLoadingError = true;
            this.cd.detectChanges();
            return of(undefined);
        }));
        return this.payeeState$.pipe(switchMap(state => (state ? of(state) : payee$)));
    }
    onFormCanceled() {
        this.router.navigateToPayeeList();
    }
}
BillpayEditElectronicPayeeViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayEditElectronicPayeeViewComponent, deps: [{ token: i1.ActivatedRoute }, { token: BillpayManagePayeeStateService }, { token: i4.BillpayDiscardChangesModalService }, { token: ManagePayeesNavigationService }, { token: BillpayManagePayeeDataService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
BillpayEditElectronicPayeeViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayEditElectronicPayeeViewComponent, selector: "ng-component", providers: [BillpayDiscardChangesModalService], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"!hasLoadingError; else errorState\">\n  <ng-container *ngIf=\"payee$ | async as payee; else loadingState\">\n    <bb-billpay-electronic-payee-form\n      [payee]=\"payee\"\n      [zipCodeRequired]=\"false\"\n      [backButtonShown]=\"false\"\n      (formSubmitted)=\"onFormSubmitted($event)\"\n      (formCanceled)=\"onFormCanceled()\"\n      (valueChanged)=\"onFormValueChanged()\"\n    >\n    </bb-billpay-electronic-payee-form>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"> </bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #errorState>\n  <bb-empty-state-ui\n    data-role=\"error-state\"\n    iconSize=\"xxl\"\n    iconModifier=\"error\"\n    title=\"Payee is not loading\"\n    i18n-title=\"Payee is not loading title@@billpay-manage-payee.edit-electronic.error-state.title\"\n    subtitle=\"Try to reload the page or contact support\"\n    i18n-subtitle=\"Payments list is not loading subtitle@@billpay-manage-payee.edit-electronic.error-state.subtitle\"\n  >\n  </bb-empty-state-ui>\n</ng-template>\n\n<bb-billpay-cancel-edit-payee-modal\n  *ngIf=\"isDiscardModalOpen\"\n  (resolve)=\"onModalResolve($event)\"\n></bb-billpay-cancel-edit-payee-modal>\n", components: [{ type: BillpayElectronicPayeeFormComponent, selector: "bb-billpay-electronic-payee-form", inputs: ["payee", "zipCodeRequired", "backButtonShown"], outputs: ["formSubmitted", "formCanceled", "backToSearch", "valueChanged"] }, { type: i1$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i10$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: BillpayCancelEditPayeeModalComponent, selector: "bb-billpay-cancel-edit-payee-modal", outputs: ["resolve"] }], directives: [{ type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5$1.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayEditElectronicPayeeViewComponent, decorators: [{
            type: Component,
            args: [{
                    templateUrl: './billpay-edit-electronic-payee-view.component.html',
                    providers: [BillpayDiscardChangesModalService],
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: BillpayManagePayeeStateService }, { type: i4.BillpayDiscardChangesModalService }, { type: ManagePayeesNavigationService }, { type: BillpayManagePayeeDataService }, { type: i0.ChangeDetectorRef }]; } });

const defaultRoute = {
    path: '',
    component: ManagePayeesJourneyComponent,
    children: [
        { path: 'enrolment', component: BillPayEnrolmentViewComponent },
        {
            path: '',
            canActivate: [BillpayEnrolmentGuard],
            children: [
                { path: '', component: PayeeListViewComponent, pathMatch: 'full' },
                {
                    path: 'payees',
                    component: ManagePayeeViewComponent,
                    children: [
                        {
                            path: '',
                            component: BillpaySearchPayeeViewComponent,
                            pathMatch: 'full',
                        },
                        {
                            path: 'manual',
                            component: BillpayCreateManualPayeeViewComponent,
                            canDeactivate: [BillpayManagePayeeDeactivateGuardService],
                        },
                        {
                            path: 'manual/review',
                            component: CreateManualPayeeReviewViewComponent,
                            canDeactivate: [BillpayManagePayeeDeactivateGuardService],
                        },
                        {
                            path: 'manual/edit/:id',
                            component: BillpayEditManualPayeeViewComponent,
                            canDeactivate: [BillpayManagePayeeDeactivateGuardService],
                        },
                        {
                            path: 'manual/edit/:id/review',
                            component: EditManualPayeeReviewViewComponent,
                            canDeactivate: [BillpayManagePayeeDeactivateGuardService],
                        },
                        {
                            path: 'electronic/:id',
                            component: BillpayCreateElectronicPayeeViewComponent,
                            canDeactivate: [BillpayManagePayeeDeactivateGuardService],
                        },
                        {
                            path: 'electronic/:id/review',
                            component: CreateElectronicPayeeReviewViewComponent,
                            canDeactivate: [BillpayManagePayeeDeactivateGuardService],
                        },
                        {
                            path: 'electronic/edit/:id',
                            component: BillpayEditElectronicPayeeViewComponent,
                            canDeactivate: [BillpayManagePayeeDeactivateGuardService],
                        },
                        {
                            path: 'electronic/edit/:id/review',
                            component: EditElectronicPayeeReviewViewComponent,
                            canDeactivate: [BillpayManagePayeeDeactivateGuardService],
                        },
                    ],
                },
                { path: 'payee-summary', component: PayeeSummaryViewComponent },
                { path: 'ebills', component: EbillsEnrolmentViewComponent },
            ],
        },
    ],
};
class ManagePayeesJourneyModule {
    static forRoot(data = { route: defaultRoute }) {
        return {
            ngModule: ManagePayeesJourneyModule,
            providers: [provideRoutes([data.route])],
        };
    }
}
ManagePayeesJourneyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesJourneyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ManagePayeesJourneyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesJourneyModule, declarations: [ManagePayeesJourneyComponent,
        PayeeListViewComponent,
        PayeeSummaryViewComponent,
        EbillsEnrolmentViewComponent,
        ManagePayeeViewComponent,
        BillPayEnrolmentViewComponent,
        CreateManualPayeeReviewViewComponent,
        EditManualPayeeReviewViewComponent,
        CreateElectronicPayeeReviewViewComponent,
        EditElectronicPayeeReviewViewComponent,
        BillpaySearchPayeeViewComponent,
        BillpayCreateManualPayeeViewComponent,
        BillpayEditManualPayeeViewComponent,
        BillpayCreateElectronicPayeeViewComponent,
        BillpayEditElectronicPayeeViewComponent], imports: [CommonModule,
        RouterModule,
        BillpayJourneysCommonModule,
        ManagePayeesJourneyUiModule, i1$7.BackbaseCoreModule] });
ManagePayeesJourneyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesJourneyModule, providers: [
        ManagePayeesJourneyConfigService,
        BillpayPayeeDataService,
        BillpayPayverisEbillsEnrolmentWidgetService,
        BillpayPayeeSummaryWidgetService,
        BillpayManagePayeeDeactivateGuardService,
        BillpayManagePayeeDataService,
        BillpayManagePayeeStateService,
    ], imports: [[
            CommonModule,
            RouterModule,
            BillpayJourneysCommonModule,
            ManagePayeesJourneyUiModule,
            BackbaseCoreModule.withConfig({
                classMap: { ManagePayeesJourneyComponent },
            }),
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesJourneyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        ManagePayeesJourneyComponent,
                        PayeeListViewComponent,
                        PayeeSummaryViewComponent,
                        EbillsEnrolmentViewComponent,
                        ManagePayeeViewComponent,
                        BillPayEnrolmentViewComponent,
                        CreateManualPayeeReviewViewComponent,
                        EditManualPayeeReviewViewComponent,
                        CreateElectronicPayeeReviewViewComponent,
                        EditElectronicPayeeReviewViewComponent,
                        BillpaySearchPayeeViewComponent,
                        BillpayCreateManualPayeeViewComponent,
                        BillpayEditManualPayeeViewComponent,
                        BillpayCreateElectronicPayeeViewComponent,
                        BillpayEditElectronicPayeeViewComponent,
                    ],
                    imports: [
                        CommonModule,
                        RouterModule,
                        BillpayJourneysCommonModule,
                        ManagePayeesJourneyUiModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { ManagePayeesJourneyComponent },
                        }),
                    ],
                    providers: [
                        ManagePayeesJourneyConfigService,
                        BillpayPayeeDataService,
                        BillpayPayverisEbillsEnrolmentWidgetService,
                        BillpayPayeeSummaryWidgetService,
                        BillpayManagePayeeDeactivateGuardService,
                        BillpayManagePayeeDataService,
                        BillpayManagePayeeStateService,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BaseElectronicPayeePageDirective, BaseElectronicPayeeReviewPageModelDirective as BaseElectronicPayeeReviewPageModel, BaseElectronicPayeeReviewPageModelDirective$1 as BaseElectronicPayeeReviewPageModelDirective, BillPayEnrolmentViewComponent, BillpayCreateElectronicPayeeViewComponent, BillpayCreateManualPayeeViewComponent, BillpayEditElectronicPayeeViewComponent, BillpayEditManualPayeeViewComponent, BillpayManagePayeeDataService, BillpayManagePayeeDeactivateGuardService, BillpayManagePayeeStateService, BillpayPayeeSummaryWidgetService, BillpayPayverisEbillsEnrolmentWidgetService, BillpaySearchPayeeViewComponent, CreateElectronicPayeeReviewViewComponent, CreateManualPayeeReviewViewComponent, EbillsEnrolmentViewComponent, EditElectronicPayeeReviewViewComponent, EditManualPayeeReviewViewComponent, ManagePayeeViewComponent, CommunicationService as ManagePayeesCommunicationService, ManagePayeesJourneyComponent, ManagePayeesJourneyConfigService, ManagePayeesJourneyConfigurationToken, ManagePayeesJourneyModule, ManagePayeesNavigationService, PayeeListViewComponent, PayeeSummaryViewComponent, PayverisEnrolmentComponentState, PayverisEnrolmentState };
//# sourceMappingURL=backbase-manage-payees-journey-ang.js.map
