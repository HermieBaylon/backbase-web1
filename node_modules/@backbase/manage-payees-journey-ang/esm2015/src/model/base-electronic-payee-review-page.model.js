import { HostListener, Directive, Input } from '@angular/core';
import { of, Subject } from 'rxjs';
import { filter, map, shareReplay, switchMap, take, takeUntil, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../services/billpay-manage-payee-state.service";
import * as i3 from "@backbase/billpay-journeys-common";
export class BaseElectronicPayeeReviewPageModelDirective {
    /** @internal */
    constructor(route, stateService, discardModalService) {
        this.route = route;
        this.stateService = stateService;
        this.discardModalService = discardModalService;
        this.destroy$ = new Subject();
        this.payee$ = this.stateService.electronicPayeeFormState.pipe(take(1), shareReplay(1));
        this.id$ = this.route.paramMap.pipe(take(1), map(params => params.get('id') || ''));
    }
    ngOnInit() {
        this.payee$
            .pipe(filter(payee => !payee), switchMap(() => this.id$))
            .subscribe(id => {
            this.navigateBack(id);
        });
        this.payeeSubmit$.pipe(takeUntil(this.destroy$), filter(Boolean)).subscribe(payee => this.onSubmitPayee(payee));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onWindowUnload($event) {
        if (!this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    get dismissTimeout() {
        if (this.dismissTimeoutValue === undefined) {
            throw new Error('Dismiss timeout value not found');
        }
        return this.dismissTimeoutValue;
    }
    openModal() {
        return this.payeeSubmit$.pipe(switchMap(payee => (payee ? of(true) : this.discardModalService.openModal())), tap(isResolved => isResolved && this.stateService.resetElectronicPayee()));
    }
    onModalResolve(resolvedWith) {
        this.discardModalService.onModalResolve(resolvedWith);
    }
}
BaseElectronicPayeeReviewPageModelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BaseElectronicPayeeReviewPageModelDirective, deps: [{ token: i1.ActivatedRoute }, { token: i2.BillpayManagePayeeStateService }, { token: i3.BillpayDiscardChangesModalService }], target: i0.ɵɵFactoryTarget.Directive });
BaseElectronicPayeeReviewPageModelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: BaseElectronicPayeeReviewPageModelDirective, inputs: { dismissTimeoutValue: "dismissTimeoutValue" }, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BaseElectronicPayeeReviewPageModelDirective, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.BillpayManagePayeeStateService }, { type: i3.BillpayDiscardChangesModalService }]; }, propDecorators: { dismissTimeoutValue: [{
                type: Input
            }], onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1lbGVjdHJvbmljLXBheWVlLXJldmlldy1wYWdlLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9tYW5hZ2UtcGF5ZWVzLWpvdXJuZXkvc3JjL21vZGVsL2Jhc2UtZWxlY3Ryb25pYy1wYXllZS1yZXZpZXctcGFnZS5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFxQixTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWxGLE9BQU8sRUFBK0IsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7O0FBVTNGLE1BQU0sT0FBZ0IsMkNBQTJDO0lBVy9ELGdCQUFnQjtJQUNoQixZQUNxQixLQUFxQixFQUNyQixZQUE0QyxFQUM1QyxtQkFBc0Q7UUFGdEQsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFDckIsaUJBQVksR0FBWixZQUFZLENBQWdDO1FBQzVDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBbUM7UUFYeEQsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFhaEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFdkYsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2pDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUN0QyxDQUFDO0lBQ0osQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsTUFBTTthQUNSLElBQUksQ0FDSCxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUN2QixTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUMxQjthQUNBLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNkLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7UUFFTCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNsSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBR0QsY0FBYyxDQUFDLE1BQXlCO1FBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDNUIsTUFBTSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBRUQsSUFBSSxrQkFBa0I7UUFDcEIsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCLENBQUM7SUFDckQsQ0FBQztJQUVELElBQWMsY0FBYztRQUMxQixJQUFJLElBQUksQ0FBQyxtQkFBbUIsS0FBSyxTQUFTLEVBQUU7WUFDMUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO1NBQ3BEO1FBQ0QsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUM7SUFDbEMsQ0FBQztJQUVELFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUMzQixTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUM3RSxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQzFFLENBQUM7SUFDSixDQUFDO0lBRUQsY0FBYyxDQUFDLFlBQXFCO1FBQ2xDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeEQsQ0FBQzs7eUlBdEVtQiwyQ0FBMkM7NkhBQTNDLDJDQUEyQzs0RkFBM0MsMkNBQTJDO2tCQURoRSxTQUFTO2tNQU1DLG1CQUFtQjtzQkFBM0IsS0FBSztnQkF1Q04sY0FBYztzQkFEYixZQUFZO3VCQUFDLHFCQUFxQixFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSG9zdExpc3RlbmVyLCBPbkRlc3Ryb3ksIE9uSW5pdCwgRGlyZWN0aXZlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBvZiwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXAsIHNoYXJlUmVwbGF5LCBzd2l0Y2hNYXAsIHRha2UsIHRha2VVbnRpbCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1xuICBCaWxscGF5RGlzY2FyZENoYW5nZXNNb2RhbFNlcnZpY2UsXG4gIEJpbGxwYXlEaXNjYXJkQ2hhbmdlc0Zvcm1Db21wb25lbnQsXG59IGZyb20gJ0BiYWNrYmFzZS9iaWxscGF5LWpvdXJuZXlzLWNvbW1vbic7XG5pbXBvcnQgeyBFbGVjdHJvbmljUGF5ZWVGb3JtIH0gZnJvbSAnLi9wYXllZS1mb3JtLm1vZGVsJztcbmltcG9ydCB7IEJpbGxwYXlNYW5hZ2VQYXllZVN0YXRlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2JpbGxwYXktbWFuYWdlLXBheWVlLXN0YXRlLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlRWxlY3Ryb25pY1BheWVlUmV2aWV3UGFnZU1vZGVsRGlyZWN0aXZlXG4gIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEJpbGxwYXlEaXNjYXJkQ2hhbmdlc0Zvcm1Db21wb25lbnQge1xuICByZWFkb25seSBwYXllZSQ6IE9ic2VydmFibGU8RWxlY3Ryb25pY1BheWVlRm9ybSB8IHVuZGVmaW5lZD47XG4gIHJlYWRvbmx5IGlkJDogT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICBASW5wdXQoKSBkaXNtaXNzVGltZW91dFZhbHVlOiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IHJlYWRvbmx5IHBheWVlU3VibWl0JDogQmVoYXZpb3JTdWJqZWN0PGFueT47XG4gIGFic3RyYWN0IG5hdmlnYXRlQmFjayhpZDogc3RyaW5nKTogdm9pZDtcbiAgcHJvdGVjdGVkIGFic3RyYWN0IG9uU3VibWl0UGF5ZWUocGF5ZWU6IGFueSk6IHZvaWQ7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgc3RhdGVTZXJ2aWNlOiBCaWxscGF5TWFuYWdlUGF5ZWVTdGF0ZVNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGRpc2NhcmRNb2RhbFNlcnZpY2U6IEJpbGxwYXlEaXNjYXJkQ2hhbmdlc01vZGFsU2VydmljZSxcbiAgKSB7XG4gICAgdGhpcy5wYXllZSQgPSB0aGlzLnN0YXRlU2VydmljZS5lbGVjdHJvbmljUGF5ZWVGb3JtU3RhdGUucGlwZSh0YWtlKDEpLCBzaGFyZVJlcGxheSgxKSk7XG5cbiAgICB0aGlzLmlkJCA9IHRoaXMucm91dGUucGFyYW1NYXAucGlwZShcbiAgICAgIHRha2UoMSksXG4gICAgICBtYXAocGFyYW1zID0+IHBhcmFtcy5nZXQoJ2lkJykgfHwgJycpLFxuICAgICk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnBheWVlJFxuICAgICAgLnBpcGUoXG4gICAgICAgIGZpbHRlcihwYXllZSA9PiAhcGF5ZWUpLFxuICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5pZCQpLFxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZShpZCA9PiB7XG4gICAgICAgIHRoaXMubmF2aWdhdGVCYWNrKGlkKTtcbiAgICAgIH0pO1xuXG4gICAgdGhpcy5wYXllZVN1Ym1pdCQucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCksIGZpbHRlcihCb29sZWFuKSkuc3Vic2NyaWJlKHBheWVlID0+IHRoaXMub25TdWJtaXRQYXllZShwYXllZSkpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XG4gICAgdGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OmJlZm9yZXVubG9hZCcsIFsnJGV2ZW50J10pXG4gIG9uV2luZG93VW5sb2FkKCRldmVudDogQmVmb3JlVW5sb2FkRXZlbnQpIHtcbiAgICBpZiAoIXRoaXMuaXNEaXNjYXJkTW9kYWxPcGVuKSB7XG4gICAgICAkZXZlbnQucmV0dXJuVmFsdWUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGdldCBpc0Rpc2NhcmRNb2RhbE9wZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzY2FyZE1vZGFsU2VydmljZS5pc0Rpc2NhcmRNb2RhbE9wZW47XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0IGRpc21pc3NUaW1lb3V0KCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMuZGlzbWlzc1RpbWVvdXRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc21pc3MgdGltZW91dCB2YWx1ZSBub3QgZm91bmQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZGlzbWlzc1RpbWVvdXRWYWx1ZTtcbiAgfVxuXG4gIG9wZW5Nb2RhbCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5wYXllZVN1Ym1pdCQucGlwZShcbiAgICAgIHN3aXRjaE1hcChwYXllZSA9PiAocGF5ZWUgPyBvZih0cnVlKSA6IHRoaXMuZGlzY2FyZE1vZGFsU2VydmljZS5vcGVuTW9kYWwoKSkpLFxuICAgICAgdGFwKGlzUmVzb2x2ZWQgPT4gaXNSZXNvbHZlZCAmJiB0aGlzLnN0YXRlU2VydmljZS5yZXNldEVsZWN0cm9uaWNQYXllZSgpKSxcbiAgICApO1xuICB9XG5cbiAgb25Nb2RhbFJlc29sdmUocmVzb2x2ZWRXaXRoOiBib29sZWFuKSB7XG4gICAgdGhpcy5kaXNjYXJkTW9kYWxTZXJ2aWNlLm9uTW9kYWxSZXNvbHZlKHJlc29sdmVkV2l0aCk7XG4gIH1cbn1cbiJdfQ==