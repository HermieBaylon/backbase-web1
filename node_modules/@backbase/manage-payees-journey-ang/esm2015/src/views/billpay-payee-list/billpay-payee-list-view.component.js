import { __awaiter } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { Observable, of, Subject } from 'rxjs';
import { skip, switchMap, take, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../services/manage-payees-navigation.service";
import * as i2 from "@angular/router";
import * as i3 from "../../services/manage-payees-journey-config.service";
import * as i4 from "@backbase/billpay-journeys-common";
import * as i5 from "@backbase/ui-ang/notification";
import * as i6 from "@backbase/ui-ang/header";
import * as i7 from "../../components/payee-list/billpay-payee-summary-list/billpay-payee-summary-list.component";
import * as i8 from "@backbase/ui-ang/amount";
import * as i9 from "@backbase/ui-ang/loading-indicator";
import * as i10 from "@backbase/ui-ang/empty-state";
import * as i11 from "@backbase/ui-ang/button";
import * as i12 from "@angular/common";
export class PayeeListViewComponent {
    /** @internal */
    constructor(routerService, route, config, payeeDataService, notificationService, cdRef, billpayNotificationRoutingService) {
        this.routerService = routerService;
        this.route = route;
        this.config = config;
        this.payeeDataService = payeeDataService;
        this.notificationService = notificationService;
        this.cdRef = cdRef;
        this.billpayNotificationRoutingService = billpayNotificationRoutingService;
        this.notificationMessageTemplate = '';
        this.notificationHeaderTemplate = '';
        this.payeeSummariesByEbillObservable = new Observable();
        this.destroy$ = new Subject();
        this.isDeleteModalOpened = false;
        this.isDeleteEbillsModalOpen = false;
        this.isNavigateModalOpened = false;
        this.notificationType = '';
        this.navigationExtras = { relativeTo: this.route };
    }
    ngOnInit() {
        this.payeeSummariesByEbillObservable = this.payeeDataService.getPayees();
        this.setupNavigationSubscriptions();
        this.payeeDataService.selectedDeletePayee
            .pipe(takeUntil(this.destroy$), skip(1))
            .subscribe(payee => (payee ? (this.isDeleteModalOpened = true) : (this.isNavigateModalOpened = true)));
        this.payeeDataService.selectedDeleteEbills
            .pipe(takeUntil(this.destroy$), skip(1))
            .subscribe(payee => (payee ? (this.isDeleteEbillsModalOpen = true) : (this.isNavigateModalOpened = true)));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    deletePayee() {
        return this.payeeDataService.selectedDeletePayee.pipe(switchMap((payee) => payee ? this.payeeDataService.deletePayee(payee.id, payee.electronic) : of()));
    }
    deleteEbills() {
        return this.payeeDataService.selectedDeleteEbills.pipe(switchMap((payee) => (payee ? this.payeeDataService.deleteEbills(payee.id) : of())));
    }
    get dismissTimeout() {
        if (this.config.notificationDismissTime === undefined) {
            throw new Error('Dismiss timeout value not found');
        }
        return this.config.notificationDismissTime;
    }
    selectedDeletePayee() {
        return this.payeeDataService.selectedDeletePayee;
    }
    selectedDeleteEbills() {
        return this.payeeDataService.selectedDeleteEbills;
    }
    onNavigateToPayments(hasNavigated) {
        if (hasNavigated) {
            this.goToPaymentsList();
        }
        this.isNavigateModalOpened = false;
    }
    onDeletePayee(resolve) {
        this.isDeleteModalOpened = false;
        if (resolve) {
            this.deletePayee()
                .pipe(take(1))
                .subscribe(() => {
                this.deletionNotify('delete');
            });
        }
    }
    onDeleteEbills(resolve) {
        this.isDeleteEbillsModalOpen = false;
        if (resolve) {
            this.deleteEbills()
                .pipe(take(1))
                .subscribe(() => {
                this.deletionNotify('ebills');
            });
        }
    }
    deletionNotify(type) {
        this.payeeDataService.reloadPayees();
        this.cdRef.markForCheck();
        this.notificationType = type;
        this.notificationService.showNotification({
            header: this.notificationHeaderTemplate,
            message: this.notificationMessageTemplate,
            modifier: 'success',
            ttl: this.dismissTimeout,
        });
    }
    setupNavigationSubscriptions() {
        this.billpayNotificationRoutingService.managePayeesSubject$
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => this.goToAddPayee());
        this.billpayNotificationRoutingService.managePaymentSubject$
            .pipe(takeUntil(this.destroy$))
            .subscribe((payeeId) => __awaiter(this, void 0, void 0, function* () { var _a; return this.gotoOneOffPayment(((_a = (yield this.payeeDataService.findPayeeSummaryById(payeeId))) === null || _a === void 0 ? void 0 : _a.id) || ''); }));
        this.billpayNotificationRoutingService.upcommingPaymentsSubject$
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => this.goToPaymentsList());
    }
    areBothListsPresent(payeeSummariesByEbill) {
        return !!(payeeSummariesByEbill.ebillsEnabled &&
            payeeSummariesByEbill.ebillsEnabled.length &&
            payeeSummariesByEbill.ebillsNotEnabled &&
            payeeSummariesByEbill.ebillsNotEnabled.length);
    }
    // Get totals of the eBills, grouped by currency
    // Ideally there should only be one currency in use, but it doesn't hurt to check
    getEbillTotals(ebillPayeeSummaries = []) {
        const ebillTotalsByCurrency = ebillPayeeSummaries.reduce((currenciesTotalsObj, payeeSummary) => {
            if (!(payeeSummary.ebill && payeeSummary.ebill.latestBill && payeeSummary.ebill.latestBill.amount)) {
                return currenciesTotalsObj;
            }
            const thisCurrencyCode = payeeSummary.ebill.latestBill.amount.currencyCode;
            const thisAmount = parseFloat(payeeSummary.ebill.latestBill.amount.amount);
            if (!currenciesTotalsObj[thisCurrencyCode]) {
                currenciesTotalsObj[thisCurrencyCode] = 0;
            }
            currenciesTotalsObj[thisCurrencyCode] = currenciesTotalsObj[thisCurrencyCode] + thisAmount;
            return currenciesTotalsObj;
        }, {});
        return Object.keys(ebillTotalsByCurrency).map(currencyCode => {
            return {
                currencyCode,
                amount: ebillTotalsByCurrency[currencyCode].toString(),
            };
        });
    }
    ngForTrackByCurrencyFn(currencies) {
        return currencies.currencyCode;
    }
    get currentLoadingState() {
        return this.payeeDataService.payeesLoadingState;
    }
    get areButtonsDisabled() {
        return this.payeeDataService.areButtonsDisabled;
    }
    get numberOfPayees() {
        return this.payeeDataService.numberOfPayees;
    }
    goToAddPayee() {
        this.routerService.navigateToSearch(this.navigationExtras);
    }
    goToPaymentsList() {
        var _a;
        (_a = this.routerService) === null || _a === void 0 ? void 0 : _a.navigateToPendingPayments();
    }
    gotoOneOffPayment(id) {
        var _a;
        (_a = this.routerService) === null || _a === void 0 ? void 0 : _a.navigateToOneOffPayment(id);
    }
}
PayeeListViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayeeListViewComponent, deps: [{ token: i1.ManagePayeesNavigationService }, { token: i2.ActivatedRoute }, { token: i3.ManagePayeesJourneyConfigService }, { token: i4.BillpayPayeeDataService }, { token: i5.NotificationService }, { token: i0.ChangeDetectorRef }, { token: i4.BillpayNotificationRoutingService }], target: i0.ɵɵFactoryTarget.Component });
PayeeListViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PayeeListViewComponent, selector: "bb-billpay-payee-list-view", viewQueries: [{ propertyName: "notificationMessageTemplate", first: true, predicate: ["notificationMessage"], descendants: true }, { propertyName: "notificationHeaderTemplate", first: true, predicate: ["notificationHeader"], descendants: true }], ngImport: i0, template: "<div class=\"bb-stack bb-block bb-block--lg\">\n  <bb-header-ui\n    class=\"bb-stack__item bb-stack__item--fill\"\n    headingType=\"h1\"\n    heading=\"Pay a bill\"\n    i18n-heading=\"@@billpay-payees-journey.payee-list-view\"\n  >\n  </bb-header-ui>\n  <button\n    bbButton\n    (click)=\"goToAddPayee()\"\n    color=\"secondary\"\n    i18n=\"button label|Add payee button@@billpay-payees-journey.payee-list\"\n  >\n    Add a payee\n  </button>\n</div>\n\n<ng-container>\n  <section>\n    <ng-container *ngIf=\"currentLoadingState !== 'error'; else errorState\">\n      <ng-container *ngIf=\"payeeSummariesByEbillObservable | async as ebillGroupedData; else loadingState\">\n        <ng-container *ngIf=\"currentLoadingState !== 'loading'; else loadingState\">\n          <ng-container\n            *ngIf=\"ebillGroupedData.ebillsEnabled.length || ebillGroupedData.ebillsNotEnabled.length; else emptyState\"\n          >\n            <div\n              class=\"bb-block bb-block--lg\"\n              *ngIf=\"ebillGroupedData.ebillsEnabled.length\"\n              data-role=\"payees-with-active-e-bills-list\"\n            >\n              <div class=\"card card-lg\">\n                <div class=\"card-body\">\n                  <div class=\"bb-block bb-block--md\">\n                    <bb-header-ui\n                      headingType=\"h2\"\n                      *ngIf=\"areBothListsPresent(ebillGroupedData)\"\n                      data-role=\"sub-header\"\n                      heading=\"Payees with active eBills\"\n                      i18n-heading=\"\n                        Payees with eBills title|Title for the list of payees with eBills\n                        enabled@@bb-billpay-payee-list-widget-ang.title.payees-with-ebills\"\n                    >\n                    </bb-header-ui>\n                  </div>\n                  <ul class=\"bb-list\">\n                    <li class=\"bb-list__item\">\n                      <bb-billpay-payee-summary-list [payeeSummaries]=\"ebillGroupedData.ebillsEnabled\">\n                      </bb-billpay-payee-summary-list>\n                    </li>\n                    <li class=\"bb-list__item\">\n                      <div\n                        data-role=\"outstanding-e-bill-total\"\n                        role=\"listitem\"\n                        *ngFor=\"\n                          let ebillCurrencyTotal of getEbillTotals(ebillGroupedData.ebillsEnabled);\n                          trackBy: ngForTrackByCurrencyFn\n                        \"\n                        class=\"bb-highlight\"\n                      >\n                        <span\n                          i18n=\"\n                            Outstanding eBills total text|Text for the total of outstanding\n                            eBills@@bb-billpay-payee-list-widget-ang.ebills.total\"\n                        >\n                          Outstanding eBill total:\n                        </span>\n                        <bb-amount-ui\n                          data-role=\"total-amount\"\n                          class=\"bb-highlight\"\n                          [amount]=\"ebillCurrencyTotal.amount\"\n                          [currency]=\"ebillCurrencyTotal.currencyCode\"\n                        >\n                        </bb-amount-ui>\n                      </div>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n\n            <div\n              class=\"card card-lg\"\n              data-role=\"all-other-payees-list\"\n              *ngIf=\"ebillGroupedData.ebillsNotEnabled.length\"\n            >\n              <div class=\"card-body\">\n                <div class=\"bb-block bb-block--md\">\n                  <bb-header-ui\n                    headingType=\"h2\"\n                    *ngIf=\"areBothListsPresent(ebillGroupedData)\"\n                    data-role=\"sub-header\"\n                    heading=\"All other payees\"\n                    i18n-heading=\"\n                      Payees without eBills title|Title for the list of payees that do not have eBills\n                      enabled@@bb-billpay-payee-list-widget-ang.title.other-payees\"\n                  >\n                  </bb-header-ui>\n                </div>\n                <div class=\"bb-list\">\n                  <bb-billpay-payee-summary-list [payeeSummaries]=\"ebillGroupedData.ebillsNotEnabled\">\n                  </bb-billpay-payee-summary-list>\n                </div>\n              </div>\n            </div>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </section>\n</ng-container>\n\n<ng-template #loadingState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-loading-indicator-ui loaderSize=\"lg\"> </bb-loading-indicator-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <bb-empty-state-ui\n        data-role=\"error-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"error-outline\"\n        subtitle=\"Try to reload the page or contact support\"\n        i18n-subtitle=\"\n          Try to reload the page or contact the support.|Payee List loading\n          subtitle@@bb-billpay-payee-list-widget-ang.loading.subtitle\"\n        title=\"Payee list is not loading\"\n        i18n-title=\"Payee list is not loading|Payee List loading title@@bb-billpay-payee-list-widget-ang.loading.title\"\n      >\n      </bb-empty-state-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #emptyState>\n  <div class=\"card card-lg\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        data-role=\"empty-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"assignment-ind\"\n        subtitle=\"Add a payee to make a bill payment\"\n        i18n-subtitle=\"\n          Add a payee to make a bill payment|Payee List no payees\n          subtitle@@bb-billpay-payee-list-widget-ang.bb-empty-state-ui.subtitle\"\n        title=\"No payees\"\n        i18n-title=\"\n          No payees state text|Payee List no payees title@@bb-billpay-payee-list-widget-ang.bb-empty-state-ui.title\"\n      >\n      </bb-empty-state-ui>\n      <div class=\"bb-state-container__footer\">\n        <button\n          bbButton\n          data-role=\"empty-state-add-payee-btn\"\n          (click)=\"addPayee()\"\n          [disabled]=\"areButtonsDisabled\"\n          i18n=\"\n            Add a payee|Payee List add payee button@@bb-billpay-payee-list-widget-ang.bb-empty-state-ui.button.add-payee\"\n        >\n          Add a payee\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<bb-billpay-payee-delete-modal\n  *ngIf=\"isDeleteModalOpened\"\n  (resolve)=\"onDeletePayee($event)\"\n></bb-billpay-payee-delete-modal>\n\n<bb-billpay-ebills-delete-modal\n  *ngIf=\"isDeleteEbillsModalOpen\"\n  (resolve)=\"onDeleteEbills($event)\"\n></bb-billpay-ebills-delete-modal>\n\n<bb-billpay-payee-navigate-modal\n  *ngIf=\"isNavigateModalOpened\"\n  (resolve)=\"onNavigateToPayments($event)\"\n></bb-billpay-payee-navigate-modal>\n\n<ng-template #notificationHeader>\n  <div [ngSwitch]=\"notificationType\">\n    <span\n      *ngSwitchCase=\"'ebills'\"\n      class=\"bb-text-bold\"\n      i18n=\"\n        eBills stopped notification header|eBills stopped confirmation success notification\n        header@@billpay-payee-list.confirm.notification.header\"\n      >eBills stopped</span\n    >\n    <span\n      *ngSwitchCase=\"'delete'\"\n      class=\"bb-text-bold\"\n      i18n=\"\n        delete payee notification header|Payee delete confirmation success notification\n        header@@billpay-payee-list.confirm.notification.header\"\n      >Payee deleted</span\n    >\n  </div>\n</ng-template>\n\n<ng-template #notificationMessage>\n  <div [ngSwitch]=\"notificationType\">\n    <ng-container *ngSwitchCase=\"'delete'\">\n      <span\n        *ngIf=\"selectedDeletePayee() | async as payee\"\n        i18n=\"\n          delete payee notification message|Payee delete confirmation success notification\n          message@@billpay-payee-list.delete-payee-confirm.notification.message\"\n        >The payee {{ payee.nickName ? payee.nickName + ' (' + payee.name + ')' : payee.name }} has been deleted\n        successfully</span\n      >\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'ebills'\">\n      <span\n        *ngIf=\"selectedDeleteEbills() | async as payee\"\n        i18n=\"\n          stop ebill notification message|Payee stop ebill confirmation success notification\n          message@@billpay-payee-list.stop-ebill-confirm.notification.message\"\n        >eBills for {{ payee.nickName ? payee.nickName + ' (' + payee.name + ')' : payee.name }} has been stopped\n        successfully</span\n      >\n    </ng-container>\n  </div>\n</ng-template>\n", components: [{ type: i6.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i7.BillpayPayeeSummaryListComponent, selector: "bb-billpay-payee-summary-list", inputs: ["payeeSummaries"] }, { type: i8.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i9.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i10.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i4.ӨBillpayPayeeDeleteModalComponent, selector: "bb-billpay-payee-delete-modal", outputs: ["resolve"] }, { type: i4.ӨBillpayEbillsDeleteModalComponent, selector: "bb-billpay-ebills-delete-modal", outputs: ["resolve"] }, { type: i4.ӨBillpayPayeeNavigateModalComponent, selector: "bb-billpay-payee-navigate-modal", outputs: ["resolve"] }], directives: [{ type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i12.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i12.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i12.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i12.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "async": i12.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PayeeListViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payee-list-view',
                    templateUrl: './billpay-payee-list-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.ManagePayeesNavigationService }, { type: i2.ActivatedRoute }, { type: i3.ManagePayeesJourneyConfigService }, { type: i4.BillpayPayeeDataService }, { type: i5.NotificationService }, { type: i0.ChangeDetectorRef }, { type: i4.BillpayNotificationRoutingService }]; }, propDecorators: { notificationMessageTemplate: [{
                type: ViewChild,
                args: ['notificationMessage']
            }], notificationHeaderTemplate: [{
                type: ViewChild,
                args: ['notificationHeader']
            }] } });
//# sourceMappingURL=data:application/json;base64,