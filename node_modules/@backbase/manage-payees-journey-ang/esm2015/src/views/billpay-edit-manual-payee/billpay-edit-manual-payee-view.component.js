import { Component, HostListener } from '@angular/core';
import { switchMap, map, catchError, tap } from 'rxjs/operators';
import { of, combineLatest } from 'rxjs';
import { BillpayDiscardChangesModalService, } from '@backbase/billpay-journeys-common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../../services/billpay-manage-payee-state.service";
import * as i3 from "../../services/billpay-manage-payee-data.service";
import * as i4 from "../../services/manage-payees-navigation.service";
import * as i5 from "@backbase/billpay-journeys-common";
import * as i6 from "../../components/add-payee/billpay-manual-payee-form/billpay-manual-payee-form.component";
import * as i7 from "../../components/add-payee/billpay-cancel-edit-payee-modal/billpay-cancel-edit-payee-modal.component";
import * as i8 from "@backbase/ui-ang/loading-indicator";
import * as i9 from "@backbase/ui-ang/empty-state";
import * as i10 from "@angular/common";
export class BillpayEditManualPayeeViewComponent {
    /** @internal */
    constructor(route, stateService, dataService, router, discardModalService) {
        this.route = route;
        this.stateService = stateService;
        this.dataService = dataService;
        this.router = router;
        this.discardModalService = discardModalService;
        this.hasLoadingError = false;
        this.isFormTouched = false;
        this.payeeId = '';
    }
    ngOnInit() {
        this.payeeFormState = combineLatest([
            this.route.paramMap.pipe(map(params => params.get('id') || '')),
            this.stateService.manualPayeeFormState,
        ]).pipe(tap(([id]) => (this.payeeId = id)), switchMap(([id, state]) => (state && of(state)) ||
            this.dataService.getManualPayee(id).pipe(map(payee => payee && this.stateService.toManualFormState(payee)), catchError(() => {
                this.hasLoadingError = true;
                return of({});
            }))));
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    onWindowUnload($event) {
        if ((this.isFormTouched || this.stateService.isFormProcessing) && !this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    onFormSubmitted(payee) {
        this.stateService.isFormProcessing = true;
        this.stateService.setManualPayee(payee);
        this.router.navigateToEditManualReview(this.payeeId);
    }
    onFormValueChanged() {
        this.isFormTouched = true;
    }
    onFormCanceled() {
        this.router.navigateToPayeeList();
    }
    openModal() {
        return this.isFormTouched || this.stateService.isFormProcessing ? this.discardModalService.openModal() : of(true);
    }
    onModalResolve(resolvedWith) {
        this.discardModalService.onModalResolve(resolvedWith);
        if (resolvedWith) {
            this.router.navigateToPayeeList();
        }
    }
}
BillpayEditManualPayeeViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayEditManualPayeeViewComponent, deps: [{ token: i1.ActivatedRoute }, { token: i2.BillpayManagePayeeStateService }, { token: i3.BillpayManagePayeeDataService }, { token: i4.ManagePayeesNavigationService }, { token: i5.BillpayDiscardChangesModalService }], target: i0.ɵɵFactoryTarget.Component });
BillpayEditManualPayeeViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayEditManualPayeeViewComponent, selector: "ng-component", host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, providers: [BillpayDiscardChangesModalService], ngImport: i0, template: "<ng-container *ngIf=\"payeeFormState | async as payeeState; else loadingState\">\n  <ng-container *ngIf=\"!hasLoadingError; else errorState\">\n    <bb-billpay-manual-payee-form\n      [editForm]=\"true\"\n      [payeeFormState]=\"payeeState\"\n      (formSubmitted)=\"onFormSubmitted($event)\"\n      (formCanceled)=\"onFormCanceled()\"\n      (valueChanged)=\"onFormValueChanged()\"\n    >\n    </bb-billpay-manual-payee-form>\n  </ng-container>\n</ng-container>\n\n<bb-billpay-cancel-edit-payee-modal\n  *ngIf=\"isDiscardModalOpen\"\n  (resolve)=\"onModalResolve($event)\"\n></bb-billpay-cancel-edit-payee-modal>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"> </bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #errorState>\n  <bb-empty-state-ui\n    data-role=\"error-state\"\n    iconSize=\"xxl\"\n    iconModifier=\"error\"\n    subtitle=\"Try to reload the page or contact support\"\n    i18n-subtitle=\"\n      Try to reload the page or contact support|Edit manual payee\n      subtitle@@bb-billpay-manage-payee-widget-ang.loading.subtitle\"\n    title=\"Payee is not loading\"\n    i18n-title=\"Payee is not loading|Edit manual payee loading title@@bb-billpay-manage-payee-widget-ang.loading.title\"\n  >\n  </bb-empty-state-ui>\n</ng-template> \n", components: [{ type: i6.BillpayManualPayeeFormComponent, selector: "bb-billpay-manual-payee-form", inputs: ["payeeFormState", "editForm"], outputs: ["formSubmitted", "formCanceled", "backToSearch", "valueChanged"] }, { type: i7.BillpayCancelEditPayeeModalComponent, selector: "bb-billpay-cancel-edit-payee-modal", outputs: ["resolve"] }, { type: i8.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i9.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i10.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i10.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayEditManualPayeeViewComponent, decorators: [{
            type: Component,
            args: [{
                    templateUrl: './billpay-edit-manual-payee-view.component.html',
                    providers: [BillpayDiscardChangesModalService],
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.BillpayManagePayeeStateService }, { type: i3.BillpayManagePayeeDataService }, { type: i4.ManagePayeesNavigationService }, { type: i5.BillpayDiscardChangesModalService }]; }, propDecorators: { onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbHBheS1lZGl0LW1hbnVhbC1wYXllZS12aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbWFuYWdlLXBheWVlcy1qb3VybmV5L3NyYy92aWV3cy9iaWxscGF5LWVkaXQtbWFudWFsLXBheWVlL2JpbGxwYXktZWRpdC1tYW51YWwtcGF5ZWUtdmlldy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL21hbmFnZS1wYXllZXMtam91cm5leS9zcmMvdmlld3MvYmlsbHBheS1lZGl0LW1hbnVhbC1wYXllZS9iaWxscGF5LWVkaXQtbWFudWFsLXBheWVlLXZpZXcuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFHaEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxFQUFFLEVBQWMsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXJELE9BQU8sRUFFTCxpQ0FBaUMsR0FDbEMsTUFBTSxtQ0FBbUMsQ0FBQzs7Ozs7Ozs7Ozs7O0FBUTNDLE1BQU0sT0FBTyxtQ0FBbUM7SUFNOUMsZ0JBQWdCO0lBQ2hCLFlBQ21CLEtBQXFCLEVBQ3JCLFlBQTRDLEVBQzVDLFdBQTBDLEVBQzFDLE1BQXFDLEVBQ3JDLG1CQUFzRDtRQUp0RCxVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUNyQixpQkFBWSxHQUFaLFlBQVksQ0FBZ0M7UUFDNUMsZ0JBQVcsR0FBWCxXQUFXLENBQStCO1FBQzFDLFdBQU0sR0FBTixNQUFNLENBQStCO1FBQ3JDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBbUM7UUFWekUsb0JBQWUsR0FBRyxLQUFLLENBQUM7UUFDeEIsa0JBQWEsR0FBRyxL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OzBSQXlDQyxjQUFjO3NCQURiLFlBQVk7dUJBQUMscUJBQXFCLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEhvc3RMaXN0ZW5lciwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBCaWxscGF5TWFuYWdlUGF5ZWVTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9iaWxscGF5LW1hbmFnZS1wYXllZS1zdGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IHN3aXRjaE1hcCwgbWFwLCBjYXRjaEVycm9yLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBvZiwgT2JzZXJ2YWJsZSwgY29tYmluZUxhdGVzdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTWFudWFsUGF5ZWVGb3JtU3RhdGUgfSBmcm9tICcuLi8uLi9tb2RlbCc7XG5pbXBvcnQge1xuICBCaWxscGF5RGlzY2FyZENoYW5nZXNGb3JtQ29tcG9uZW50LFxuICBCaWxscGF5RGlzY2FyZENoYW5nZXNNb2RhbFNlcnZpY2UsXG59IGZyb20gJ0BiYWNrYmFzZS9iaWxscGF5LWpvdXJuZXlzLWNvbW1vbic7XG5pbXBvcnQgeyBNYW5hZ2VQYXllZXNOYXZpZ2F0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL21hbmFnZS1wYXllZXMtbmF2aWdhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEJpbGxwYXlNYW5hZ2VQYXllZURhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYmlsbHBheS1tYW5hZ2UtcGF5ZWUtZGF0YS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlVXJsOiAnLi9iaWxscGF5LWVkaXQtbWFudWFsLXBheWVlLXZpZXcuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnM6IFtCaWxscGF5RGlzY2FyZENoYW5nZXNNb2RhbFNlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBCaWxscGF5RWRpdE1hbnVhbFBheWVlVmlld0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQmlsbHBheURpc2NhcmRDaGFuZ2VzRm9ybUNvbXBvbmVudCB7XG4gIHBheWVlRm9ybVN0YXRlPzogT2JzZXJ2YWJsZTxNYW51YWxQYXllZUZvcm1TdGF0ZT47XG4gIGhhc0xvYWRpbmdFcnJvciA9IGZhbHNlO1xuICBpc0Zvcm1Ub3VjaGVkID0gZmFsc2U7XG4gIHByaXZhdGUgcGF5ZWVJZCA9ICcnO1xuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSByb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdGF0ZVNlcnZpY2U6IEJpbGxwYXlNYW5hZ2VQYXllZVN0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRhdGFTZXJ2aWNlOiBCaWxscGF5TWFuYWdlUGF5ZWVEYXRhU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJvdXRlcjogTWFuYWdlUGF5ZWVzTmF2aWdhdGlvblNlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBkaXNjYXJkTW9kYWxTZXJ2aWNlOiBCaWxscGF5RGlzY2FyZENoYW5nZXNNb2RhbFNlcnZpY2UsXG4gICkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnBheWVlRm9ybVN0YXRlID0gY29tYmluZUxhdGVzdChbXG4gICAgICB0aGlzLnJvdXRlLnBhcmFtTWFwLnBpcGUobWFwKHBhcmFtcyA9PiBwYXJhbXMuZ2V0KCdpZCcpIHx8ICcnKSksXG4gICAgICB0aGlzLnN0YXRlU2VydmljZS5tYW51YWxQYXllZUZvcm1TdGF0ZSxcbiAgICBdKS5waXBlKFxuICAgICAgdGFwKChbaWRdKSA9PiAodGhpcy5wYXllZUlkID0gaWQpKSxcbiAgICAgIHN3aXRjaE1hcChcbiAgICAgICAgKFtpZCwgc3RhdGVdKSA9PlxuICAgICAgICAgIChzdGF0ZSAmJiBvZihzdGF0ZSkpIHx8XG4gICAgICAgICAgdGhpcy5kYXRhU2VydmljZS5nZXRNYW51YWxQYXllZShpZCkucGlwZShcbiAgICAgICAgICAgIG1hcChwYXllZSA9PiBwYXllZSAmJiB0aGlzLnN0YXRlU2VydmljZS50b01hbnVhbEZvcm1TdGF0ZShwYXllZSkpLFxuICAgICAgICAgICAgY2F0Y2hFcnJvcigoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuaGFzTG9hZGluZ0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG9mKHt9IGFzIE1hbnVhbFBheWVlRm9ybVN0YXRlKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICksXG4gICAgICApLFxuICAgICk7XG4gIH1cblxuICBnZXQgaXNEaXNjYXJkTW9kYWxPcGVuKCkge1xuICAgIHJldHVybiB0aGlzLmRpc2NhcmRNb2RhbFNlcnZpY2UuaXNEaXNjYXJkTW9kYWxPcGVuO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OmJlZm9yZXVubG9hZCcsIFsnJGV2ZW50J10pXG4gIG9uV2luZG93VW5sb2FkKCRldmVudDogQmVmb3JlVW5sb2FkRXZlbnQpIHtcbiAgICBpZiAoKHRoaXMuaXNGb3JtVG91Y2hlZCB8fCB0aGlzLnN0YXRlU2VydmljZS5pc0Zvcm1Qcm9jZXNzaW5nKSAmJiAhdGhpcy5pc0Rpc2NhcmRNb2RhbE9wZW4pIHtcbiAgICAgICRldmVudC5yZXR1cm5WYWx1ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgb25Gb3JtU3VibWl0dGVkKHBheWVlOiBNYW51YWxQYXllZUZvcm1TdGF0ZSkge1xuICAgIHRoaXMuc3RhdGVTZXJ2aWNlLmlzRm9ybVByb2Nlc3NpbmcgPSB0cnVlO1xuICAgIHRoaXMuc3RhdGVTZXJ2aWNlLnNldE1hbnVhbFBheWVlKHBheWVlKTtcbiAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZVRvRWRpdE1hbnVhbFJldmlldyh0aGlzLnBheWVlSWQpO1xuICB9XG5cbiAgb25Gb3JtVmFsdWVDaGFuZ2VkKCkge1xuICAgIHRoaXMuaXNGb3JtVG91Y2hlZCA9IHRydWU7XG4gIH1cblxuICBvbkZvcm1DYW5jZWxlZCgpIHtcbiAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZVRvUGF5ZWVMaXN0KCk7XG4gIH1cblxuICBvcGVuTW9kYWwoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuaXNGb3JtVG91Y2hlZCB8fCB0aGlzLnN0YXRlU2VydmljZS5pc0Zvcm1Qcm9jZXNzaW5nID8gdGhpcy5kaXNjYXJkTW9kYWxTZXJ2aWNlLm9wZW5Nb2RhbCgpIDogb2YodHJ1ZSk7XG4gIH1cblxuICBvbk1vZGFsUmVzb2x2ZShyZXNvbHZlZFdpdGg6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmRpc2NhcmRNb2RhbFNlcnZpY2Uub25Nb2RhbFJlc29sdmUocmVzb2x2ZWRXaXRoKTtcbiAgICBpZiAocmVzb2x2ZWRXaXRoKSB7XG4gICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZVRvUGF5ZWVMaXN0KCk7XG4gICAgfVxuICB9XG59XG4iLCI8bmctY29udGFpbmVyICpuZ0lmPVwicGF5ZWVGb3JtU3RhdGUgfCBhc3luYyBhcyBwYXllZVN0YXRlOyBlbHNlIGxvYWRpbmdTdGF0ZVwiPlxuICA8bmctY29udGFpbmVyICpuZ0lmPVwiIWhhc0xvYWRpbmdFcnJvcjsgZWxzZSBlcnJvclN0YXRlXCI+XG4gICAgPGJiLWJpbGxwYXktbWFudWFsLXBheWVlLWZvcm1cbiAgICAgIFtlZGl0Rm9ybV09XCJ0cnVlXCJcbiAgICAgIFtwYXllZUZvcm1TdGF0ZV09XCJwYXllZVN0YXRlXCJcbiAgICAgIChmb3JtU3VibWl0dGVkKT1cIm9uRm9ybVN1Ym1pdHRlZCgkZXZlbnQpXCJcbiAgICAgIChmb3JtQ2FuY2VsZWQpPVwib25Gb3JtQ2FuY2VsZWQoKVwiXG4gICAgICAodmFsdWVDaGFuZ2VkKT1cIm9uRm9ybVZhbHVlQ2hhbmdlZCgpXCJcbiAgICA+XG4gICAgPC9iYi1iaWxscGF5LW1hbnVhbC1wYXllZS1mb3JtPlxuICA8L25nLWNvbnRhaW5lcj5cbjwvbmctY29udGFpbmVyPlxuXG48YmItYmlsbHBheS1jYW5jZWwtZWRpdC1wYXllZS1tb2RhbFxuICAqbmdJZj1cImlzRGlzY2FyZE1vZGFsT3BlblwiXG4gIChyZXNvbHZlKT1cIm9uTW9kYWxSZXNvbHZlKCRldmVudClcIlxuPjwvYmItYmlsbHBheS1jYW5jZWwtZWRpdC1wYXllZS1tb2RhbD5cblxuPG5nLXRlbXBsYXRlICNsb2FkaW5nU3RhdGU+XG4gIDxiYi1sb2FkaW5nLWluZGljYXRvci11aSBsb2FkZXJTaXplPVwibGdcIj4gPC9iYi1sb2FkaW5nLWluZGljYXRvci11aT5cbjwvbmctdGVtcGxhdGU+XG5cbjxuZy10ZW1wbGF0ZSAjZXJyb3JTdGF0ZT5cbiAgPGJiLWVtcHR5LXN0YXRlLXVpXG4gICAgZGF0YS1yb2xlPVwiZXJyb3Itc3RhdGVcIlxuICAgIGljb25TaXplPVwieHhsXCJcbiAgICBpY29uTW9kaWZpZXI9XCJlcnJvclwiXG4gICAgc3VidGl0bGU9XCJUcnkgdG8gcmVsb2FkIHRoZSBwYWdlIG9yIGNvbnRhY3Qgc3VwcG9ydFwiXG4gICAgaTE4bi1zdWJ0aXRsZT1cIlxuICAgICAgVHJ5IHRvIHJlbG9hZCB0aGUgcGFnZSBvciBjb250YWN0IHN1cHBvcnR8RWRpdCBtYW51YWwgcGF5ZWVcbiAgICAgIHN1YnRpdGxlQEBiYi1iaWxscGF5LW1hbmFnZS1wYXllZS13aWRnZXQtYW5nLmxvYWRpbmcuc3VidGl0bGVcIlxuICAgIHRpdGxlPVwiUGF5ZWUgaXMgbm90IGxvYWRpbmdcIlxuICAgIGkxOG4tdGl0bGU9XCJQYXllZSBpcyBub3QgbG9hZGluZ3xFZGl0IG1hbnVhbCBwYXllZSBsb2FkaW5nIHRpdGxlQEBiYi1iaWxscGF5LW1hbmFnZS1wYXllZS13aWRnZXQtYW5nLmxvYWRpbmcudGl0bGVcIlxuICA+XG4gIDwvYmItZW1wdHktc3RhdGUtdWk+XG48L25nLXRlbXBsYXRlPiBcbiJdfQ==