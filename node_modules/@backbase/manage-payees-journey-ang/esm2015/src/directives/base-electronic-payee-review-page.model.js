import { HostListener, Directive } from '@angular/core';
import { of, Subject } from 'rxjs';
import { filter, map, shareReplay, switchMap, take, takeUntil, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../services/billpay-manage-payee-state.service";
import * as i3 from "@backbase/billpay-journeys-common";
import * as i4 from "../services/manage-payees-journey-config.service";
export class BaseElectronicPayeeReviewPageModelDirective {
    /** @internal */
    constructor(route, stateService, discardModalService, config) {
        this.route = route;
        this.stateService = stateService;
        this.discardModalService = discardModalService;
        this.config = config;
        this.destroy$ = new Subject();
        this.payee$ = this.stateService.electronicPayeeFormState.pipe(take(1), shareReplay(1));
        this.id$ = this.route.paramMap.pipe(take(1), map(params => params.get('id') || ''));
    }
    ngOnInit() {
        this.payee$
            .pipe(filter(payee => !payee), switchMap(() => this.id$))
            .subscribe(id => {
            this.navigateBack(id);
        });
        this.payeeSubmit$.pipe(takeUntil(this.destroy$), filter(Boolean)).subscribe(payee => this.onSubmitPayee(payee));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onWindowUnload($event) {
        if (!this.isDiscardModalOpen) {
            $event.returnValue = true;
        }
    }
    get isDiscardModalOpen() {
        return this.discardModalService.isDiscardModalOpen;
    }
    get dismissTimeout() {
        if (this.config.notificationDismissTime === undefined) {
            throw new Error('Dismiss timeout value not found');
        }
        return this.config.notificationDismissTime;
    }
    openModal() {
        return this.payeeSubmit$.pipe(switchMap(payee => (payee ? of(true) : this.discardModalService.openModal())), tap(isResolved => isResolved && this.stateService.resetElectronicPayee()));
    }
    onModalResolve(resolvedWith) {
        this.discardModalService.onModalResolve(resolvedWith);
    }
}
BaseElectronicPayeeReviewPageModelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BaseElectronicPayeeReviewPageModelDirective, deps: [{ token: i1.ActivatedRoute }, { token: i2.BillpayManagePayeeStateService }, { token: i3.BillpayDiscardChangesModalService }, { token: i4.ManagePayeesJourneyConfigService }], target: i0.ɵɵFactoryTarget.Directive });
BaseElectronicPayeeReviewPageModelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: BaseElectronicPayeeReviewPageModelDirective, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BaseElectronicPayeeReviewPageModelDirective, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.BillpayManagePayeeStateService }, { type: i3.BillpayDiscardChangesModalService }, { type: i4.ManagePayeesJourneyConfigService }]; }, propDecorators: { onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1lbGVjdHJvbmljLXBheWVlLXJldmlldy1wYWdlLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9tYW5hZ2UtcGF5ZWVzLWpvdXJuZXkvc3JjL2RpcmVjdGl2ZXMvYmFzZS1lbGVjdHJvbmljLXBheWVlLXJldmlldy1wYWdlLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQXFCLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzRSxPQUFPLEVBQStCLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7QUFVM0YsTUFBTSxPQUFnQiwyQ0FBMkM7SUFTL0QsZ0JBQWdCO0lBQ2hCLFlBQ3FCLEtBQXFCLEVBQ3JCLFlBQTRDLEVBQzVDLG1CQUFzRCxFQUNoRSxNQUF3QztRQUg5QixVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUNyQixpQkFBWSxHQUFaLFlBQVksQ0FBZ0M7UUFDNUMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFtQztRQUNoRSxXQUFNLEdBQU4sTUFBTSxDQUFrQztRQVZoQyxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQVloRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV2RixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDakMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQ3RDLENBQUM7SUFDSixDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxNQUFNO2FBQ1IsSUFBSSxDQUNILE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQ3ZCLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQzFCO2FBQ0EsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQztRQUVMLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2xILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFHRCxjQUFjLENBQUMsTUFBeUI7UUFDdEMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUM1QixNQUFNLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztTQUMzQjtJQUNILENBQUM7SUFFRCxJQUFJLGtCQUFrQjtRQUNwQixPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxrQkFBa0IsQ0FBQztJQUNyRCxDQUFDO0lBRUQsSUFBYyxjQUFjO1FBQzFCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsS0FBSyxTQUFTLEVBQUU7WUFDckQsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO1NBQ3BEO1FBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDO0lBQzdDLENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FDM0IsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFDN0UsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUMxRSxDQUFDO0lBQ0osQ0FBQztJQUVELGNBQWMsQ0FBQyxZQUFxQjtRQUNsQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hELENBQUM7O3lJQXJFbUIsMkNBQTJDOzZIQUEzQywyQ0FBMkM7NEZBQTNDLDJDQUEyQztrQkFEaEUsU0FBUztpUEE0Q1IsY0FBYztzQkFEYixZQUFZO3VCQUFDLHFCQUFxQixFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSG9zdExpc3RlbmVyLCBPbkRlc3Ryb3ksIE9uSW5pdCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIG9mLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCwgc2hhcmVSZXBsYXksIHN3aXRjaE1hcCwgdGFrZSwgdGFrZVVudGlsLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1xuICBCaWxscGF5RGlzY2FyZENoYW5nZXNNb2RhbFNlcnZpY2UsXG4gIEJpbGxwYXlEaXNjYXJkQ2hhbmdlc0Zvcm1Db21wb25lbnQsXG59IGZyb20gJ0BiYWNrYmFzZS9iaWxscGF5LWpvdXJuZXlzLWNvbW1vbic7XG5pbXBvcnQgeyBCaWxscGF5TWFuYWdlUGF5ZWVTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9iaWxscGF5LW1hbmFnZS1wYXllZS1zdGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IEVsZWN0cm9uaWNQYXllZUZvcm0gfSBmcm9tICcuLi9tb2RlbCc7XG5pbXBvcnQgeyBNYW5hZ2VQYXllZXNKb3VybmV5Q29uZmlnU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL21hbmFnZS1wYXllZXMtam91cm5leS1jb25maWcuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VFbGVjdHJvbmljUGF5ZWVSZXZpZXdQYWdlTW9kZWxEaXJlY3RpdmVcbiAgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgQmlsbHBheURpc2NhcmRDaGFuZ2VzRm9ybUNvbXBvbmVudCB7XG4gIHJlYWRvbmx5IHBheWVlJDogT2JzZXJ2YWJsZTxFbGVjdHJvbmljUGF5ZWVGb3JtIHwgdW5kZWZpbmVkPjtcbiAgcmVhZG9ubHkgaWQkOiBPYnNlcnZhYmxlPHN0cmluZz47XG4gIHByb3RlY3RlZCByZWFkb25seSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gIHByb3RlY3RlZCBhYnN0cmFjdCByZWFkb25seSBwYXllZVN1Ym1pdCQ6IEJlaGF2aW9yU3ViamVjdDxhbnk+O1xuICBhYnN0cmFjdCBuYXZpZ2F0ZUJhY2soaWQ6IHN0cmluZyk6IHZvaWQ7XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBvblN1Ym1pdFBheWVlKHBheWVlOiBhbnkpOiB2b2lkO1xuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCByZWFkb25seSByb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHN0YXRlU2VydmljZTogQmlsbHBheU1hbmFnZVBheWVlU3RhdGVTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBkaXNjYXJkTW9kYWxTZXJ2aWNlOiBCaWxscGF5RGlzY2FyZENoYW5nZXNNb2RhbFNlcnZpY2UsXG4gICAgcmVhZG9ubHkgY29uZmlnOiBNYW5hZ2VQYXllZXNKb3VybmV5Q29uZmlnU2VydmljZSxcbiAgKSB7XG4gICAgdGhpcy5wYXllZSQgPSB0aGlzLnN0YXRlU2VydmljZS5lbGVjdHJvbmljUGF5ZWVGb3JtU3RhdGUucGlwZSh0YWtlKDEpLCBzaGFyZVJlcGxheSgxKSk7XG5cbiAgICB0aGlzLmlkJCA9IHRoaXMucm91dGUucGFyYW1NYXAucGlwZShcbiAgICAgIHRha2UoMSksXG4gICAgICBtYXAocGFyYW1zID0+IHBhcmFtcy5nZXQoJ2lkJykgfHwgJycpLFxuICAgICk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnBheWVlJFxuICAgICAgLnBpcGUoXG4gICAgICAgIGZpbHRlcihwYXllZSA9PiAhcGF5ZWUpLFxuICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5pZCQpLFxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZShpZCA9PiB7XG4gICAgICAgIHRoaXMubmF2aWdhdGVCYWNrKGlkKTtcbiAgICAgIH0pO1xuXG4gICAgdGhpcy5wYXllZVN1Ym1pdCQucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCksIGZpbHRlcihCb29sZWFuKSkuc3Vic2NyaWJlKHBheWVlID0+IHRoaXMub25TdWJtaXRQYXllZShwYXllZSkpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XG4gICAgdGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OmJlZm9yZXVubG9hZCcsIFsnJGV2ZW50J10pXG4gIG9uV2luZG93VW5sb2FkKCRldmVudDogQmVmb3JlVW5sb2FkRXZlbnQpIHtcbiAgICBpZiAoIXRoaXMuaXNEaXNjYXJkTW9kYWxPcGVuKSB7XG4gICAgICAkZXZlbnQucmV0dXJuVmFsdWUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGdldCBpc0Rpc2NhcmRNb2RhbE9wZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzY2FyZE1vZGFsU2VydmljZS5pc0Rpc2NhcmRNb2RhbE9wZW47XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0IGRpc21pc3NUaW1lb3V0KCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMuY29uZmlnLm5vdGlmaWNhdGlvbkRpc21pc3NUaW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGlzbWlzcyB0aW1lb3V0IHZhbHVlIG5vdCBmb3VuZCcpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb25maWcubm90aWZpY2F0aW9uRGlzbWlzc1RpbWU7XG4gIH1cblxuICBvcGVuTW9kYWwoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMucGF5ZWVTdWJtaXQkLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAocGF5ZWUgPT4gKHBheWVlID8gb2YodHJ1ZSkgOiB0aGlzLmRpc2NhcmRNb2RhbFNlcnZpY2Uub3Blbk1vZGFsKCkpKSxcbiAgICAgIHRhcChpc1Jlc29sdmVkID0+IGlzUmVzb2x2ZWQgJiYgdGhpcy5zdGF0ZVNlcnZpY2UucmVzZXRFbGVjdHJvbmljUGF5ZWUoKSksXG4gICAgKTtcbiAgfVxuXG4gIG9uTW9kYWxSZXNvbHZlKHJlc29sdmVkV2l0aDogYm9vbGVhbikge1xuICAgIHRoaXMuZGlzY2FyZE1vZGFsU2VydmljZS5vbk1vZGFsUmVzb2x2ZShyZXNvbHZlZFdpdGgpO1xuICB9XG59XG4iXX0=