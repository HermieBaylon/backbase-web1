import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormGroup, Validators } from '@angular/forms';
import { takeUntil, take } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { BillpayUtilityService as Utility } from '@backbase/billpay-journeys-common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/fieldset";
import * as i3 from "@backbase/ui-ang/header";
import * as i4 from "@backbase/ui-ang/input-text";
import * as i5 from "@backbase/ui-ang/input-validation-message";
import * as i6 from "@angular/common";
import * as i7 from "@backbase/ui-ang/button";
export class BillpayElectronicPayeeFormComponent {
    /** @internal */
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        /**
         * Displays the zip code input field. Defaults to false.
         */
        this.zipCodeRequired = false;
        /**
         * Displays back button which returns to payee search. Defaults to true.
         */
        this.backButtonShown = true;
        this.formSubmitted = new EventEmitter();
        this.formCanceled = new EventEmitter();
        this.backToSearch = new EventEmitter();
        this.valueChanged = new EventEmitter();
        this.payeeForm = new FormGroup({});
        this.destroy$ = new Subject();
        this.isSubmissionAttempted = false;
        this.nickNameDescId = Utility.generateId();
        this.accNumberDescId = Utility.generateId();
    }
    ngOnInit() {
        this.payeeForm = this.createForm();
        this.setValidators();
        this.payeeForm.valueChanges.pipe(takeUntil(this.destroy$), take(1)).subscribe(() => {
            this.valueChanged.emit();
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onSubmit(payeeForm) {
        if (!this.isSubmissionAttempted) {
            this.isSubmissionAttempted = true;
        }
        if (payeeForm.invalid) {
            payeeForm.markAllAsTouched();
            return;
        }
        this.formSubmitted.emit(this.payeeForm.value);
    }
    cancelForm() {
        this.formCanceled.emit();
    }
    toSearch() {
        this.backToSearch.emit();
    }
    hasError(controlName, errorName) {
        const control = this.payeeForm.get(controlName);
        return !!control && control.touched && control.hasError(errorName);
    }
    createForm() {
        return this.formBuilder.group(Object.assign({}, this.payee));
    }
    setValidators() {
        [
            ['merchantZipCode', [Validators.required, Validators.pattern(/^\d{5}(\d{4})?$/)]],
            ['accountNumber', [Validators.required, Validators.minLength(2), Validators.maxLength(100)]],
            ['nickName', [Validators.minLength(2), Validators.maxLength(100)]],
        ].forEach(([controlName, validators]) => {
            const control = this.payeeForm.get(controlName);
            if (control) {
                control.setValidators(validators);
                control.updateValueAndValidity();
            }
        });
    }
}
BillpayElectronicPayeeFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayElectronicPayeeFormComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
BillpayElectronicPayeeFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayElectronicPayeeFormComponent, selector: "bb-billpay-electronic-payee-form", inputs: { payee: "payee", zipCodeRequired: "zipCodeRequired", backButtonShown: "backButtonShown" }, outputs: { formSubmitted: "formSubmitted", formCanceled: "formCanceled", backToSearch: "backToSearch", valueChanged: "valueChanged" }, ngImport: i0, template: "<div class=\"card card-lg\">\n  <section class=\"card-body\">\n    <form data-role=\"electronic-payee-form\" (ngSubmit)=\"onSubmit(payeeForm)\" [formGroup]=\"payeeForm\">\n      <bb-fieldset-ui>\n        <div class=\"bb-block bb-block--md\">\n          <bb-header-ui\n            headingType=\"h2\"\n            [heading]=\"'Account details for ' + payee?.name\"\n            i18n-heading=\"Fieldset heading|Account name heading@@billpay-electronic-payee-form.payee-details-heading\"\n            data-role=\"payee-name-heading\"\n          ></bb-header-ui>\n        </div>\n        <div [class.bb-block--lg]=\"zipCodeRequired\" data-role=\"account-number-label\">\n          <div class=\"bb-form-field bb-form-field--md\">\n            <bb-input-text-ui\n              formControlName=\"accountNumber\"\n              data-role=\"account-number-input\"\n              label=\"Account number\"\n              i18n-label=\"label|Label for account number field@@billpay-electronic-payee-form.account-number-label\"\n              [aria-describedby]=\"accNumberDescId\"\n              autofocus\n            >\n            </bb-input-text-ui>\n          </div>\n          <div\n            id=\"{{ accNumberDescId }}\"\n            class=\"bb-subtitle bb-text-support\"\n            i18n=\"label|Label for account number info message@@billpay-electronic-payee-form.account-number-info\"\n            data-role=\"account-number-help-text\"\n          >\n            Enter account number as it appears on your bill\n          </div>\n          <bb-input-validation-message-ui\n            role=\"alert\"\n            [showErrors]=\"hasError('accountNumber', 'required')\"\n            i18n=\"\n              error text|Account number required error text@@billpay-electronic-payee-form.error.account-number-required\"\n            data-role=\"account-number-error-required\"\n          >\n            Please enter an account number\n          </bb-input-validation-message-ui>\n          <bb-input-validation-message-ui\n            role=\"alert\"\n            [showErrors]=\"hasError('accountNumber', 'minlength')\"\n            i18n=\"\n              error text|Account number minlength error\n              text@@billpay-electronic-payee-form.error.account-number-minlength\"\n            data-role=\"account-number-error-minlength\"\n          >\n            Account number must be at least 2 characters\n          </bb-input-validation-message-ui>\n          <bb-input-validation-message-ui\n            role=\"alert\"\n            [showErrors]=\"hasError('accountNumber', 'maxlength')\"\n            i18n=\"\n              error text|Account number max length error\n              text@@billpay-electronic-payee-form.error.account-number-maxlength\"\n            data-role=\"account-number-error-maxlength\"\n          >\n            Account number may not be over a hundred characters\n          </bb-input-validation-message-ui>\n        </div>\n        <div *ngIf=\"zipCodeRequired\" data-role=\"zip-code-label\">\n          <div class=\"bb-form-field bb-form-field--xs\">\n            <bb-input-text-ui\n              formControlName=\"merchantZipCode\"\n              data-role=\"zip-code-input\"\n              label=\"Payee ZIP code\"\n              i18n-label=\"label|Label for ZIP code field@@billpay-electronic-payee-form.zip-label\"\n            >\n            </bb-input-text-ui>\n          </div>\n          <bb-input-validation-message-ui\n            role=\"alert\"\n            [showErrors]=\"hasError('merchantZipCode', 'required')\"\n            i18n=\"error text|Zip code is required error text@@billpay-electronic-payee-form.error.zip-code-required\"\n            data-role=\"zip-code-error-required\"\n          >\n            Please enter a Zip Code\n          </bb-input-validation-message-ui>\n          <bb-input-validation-message-ui\n            role=\"alert\"\n            [showErrors]=\"hasError('merchantZipCode', 'pattern')\"\n            i18n=\"error text|Zip code format error text@@billpay-electronic-payee-form.error.zip-code-format\"\n            data-role=\"zip-code-error-pattern\"\n          >\n            ZIP code should be 5 or 9 digits long\n          </bb-input-validation-message-ui>\n        </div>\n      </bb-fieldset-ui>\n\n      <bb-fieldset-ui>\n        <div class=\"bb-block bb-block--md\">\n          <bb-header-ui\n            headingType=\"h2\"\n            heading=\"Payee nickname\"\n            i18n-heading=\"Payee nickname@@billpay-electronic-payee-form.payee-nickname-heading\"\n            data-role=\"payee-nickname-heading\"\n          ></bb-header-ui>\n        </div>\n        <div>\n          <div class=\"bb-form-field bb-form-field--md\">\n            <label data-role=\"nickname-input-label\" class=\"bb-label\" [attr.id]=\"'bb-nickname-label' + nickNameDescId\">\n              <span i18n=\"label|Label for payee nickname field@@billpay-electronic-payee-form.payee-nickname-label\"\n                >Create payee nickname</span\n              >\n              <span\n                class=\"bb-text-default bb-text-support\"\n                i18n=\"label optional|Label for optional text@@billpay-electronic-payee-form.payee-nickname-label-helper\"\n              >\n                (Optional)</span\n              >\n            </label>\n            <bb-input-text-ui\n              formControlName=\"nickName\"\n              data-role=\"nickname-input\"\n              [aria-describedby]=\"nickNameDescId\"\n              [aria-labelledby]=\"'bb-nickname-label' + nickNameDescId\"\n            ></bb-input-text-ui>\n          </div>\n          <div\n            id=\"{{ nickNameDescId }}\"\n            class=\"bb-subtitle bb-text-support\"\n            i18n=\"label|Label for payee nickname info message@@billpay-electronic-payee-form.payee-nickname-info\"\n            data-role=\"nickname-help-text\"\n          >\n            Choose how you want this payee to appear in bill pay. This information is only available to you.\n          </div>\n          <bb-input-validation-message-ui\n            role=\"alert\"\n            [showErrors]=\"hasError('nickName', 'minlength')\"\n            i18n=\"error text|Nickname min length error text@@billpay-electronic-payee-form.error.nickname-minlength\"\n            data-role=\"nickname-error-minlength\"\n          >\n            Nickname must be at least 2 characters\n          </bb-input-validation-message-ui>\n          <bb-input-validation-message-ui\n            role=\"alert\"\n            [showErrors]=\"hasError('nickName', 'maxlength')\"\n            i18n=\"error text|Nickname max length error text@@billpay-electronic-payee-form.error.nickname-maxlength\"\n            data-role=\"nickname-error-maxlength\"\n          >\n            Nickname may not be over a hundred characters\n          </bb-input-validation-message-ui>\n        </div>\n      </bb-fieldset-ui>\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <button\n          bbButton\n          type=\"submit\"\n          data-role=\"continue-button\"\n          i18n=\"Label for button|Electronic payee continue button@@billpay-electronic-payee-form.continue\"\n          class=\"bb-button-bar__button\"\n        >\n          Continue\n        </button>\n        <button\n          bbButton\n          *ngIf=\"backButtonShown\"\n          data-role=\"back-button\"\n          i18n=\"Label for button|Find a different payee button@@billpay-electronic-payee-form.find-different-payee\"\n          (click)=\"toSearch()\"\n          class=\"bb-button-bar__button\"\n          color=\"secondary\"\n        >\n          Find a different payee\n        </button>\n        <button\n          bbButton\n          data-role=\"cancel-button\"\n          color=\"link\"\n          class=\"bb-button-bar__button bb-button-bar__button--across\"\n          (click)=\"cancelForm()\"\n        >\n          <span i18n=\"Cancel edit|Label for a button that cancels form changes@@billpay-electronic-payee-form.cancel\"\n            >Cancel</span\n          >\n        </button>\n      </div>\n    </form>\n  </section>\n</div>\n", components: [{ type: i2.FieldsetComponent, selector: "bb-fieldset-ui", inputs: ["heading", "disabled"] }, { type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i5.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayElectronicPayeeFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-electronic-payee-form',
                    templateUrl: './billpay-electronic-payee-form.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; }, propDecorators: { payee: [{
                type: Input
            }], zipCodeRequired: [{
                type: Input
            }], backButtonShown: [{
                type: Input
            }], formSubmitted: [{
                type: Output
            }], formCanceled: [{
                type: Output
            }], backToSearch: [{
                type: Output
            }], valueChanged: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbHBheS1lbGVjdHJvbmljLXBheWVlLWZvcm0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9tYW5hZ2UtcGF5ZWVzLWpvdXJuZXkvc3JjL2NvbXBvbmVudHMvYWRkLXBheWVlL2JpbGxwYXktZWxlY3Ryb25pYy1wYXllZS1mb3JtL2JpbGxwYXktZWxlY3Ryb25pYy1wYXllZS1mb3JtLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbWFuYWdlLXBheWVlcy1qb3VybmV5L3NyYy9jb21wb25lbnRzL2FkZC1wYXllZS9iaWxscGF5LWVsZWN0cm9uaWMtcGF5ZWUtZm9ybS9iaWxscGF5LWVsZWN0cm9uaWMtcGF5ZWUtZm9ybS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQXFCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRixPQUFPLEVBQWUsU0FBUyxFQUFlLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pGLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUcvQixPQUFPLEVBQUUscUJBQXFCLElBQUksT0FBTyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7Ozs7Ozs7OztBQU1yRixNQUFNLE9BQU8sbUNBQW1DO0lBd0I5QyxnQkFBZ0I7SUFDaEIsWUFBNkIsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFwQnJEOztXQUVHO1FBQ00sb0JBQWUsR0FBRyxLQUFLLENBQUM7UUFDakM7O1dBRUc7UUFDTSxvQkFBZSxHQUFHLElBQUksQ0FBQztRQUN0QixrQkFBYSxHQUFHLElBQUksWUFBWSxFQUF1QixDQUFDO1FBQ3hELGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUN4QyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFDeEMsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBRWxELGNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QixhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUN2QiwwQkFBcUIsR0FBRyxLQUFLLENBQUM7UUFNcEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDM0MsSUFBSSxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDOUMsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNqRixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELFFBQVEsQ0FBQyxTQUFvQjtRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFO1lBQy9CLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7U0FDbkM7UUFDRCxJQUFJLFNBQVMsQ0FBQyxPQUFPLEVBQUU7WUFDckIsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDN0IsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxRQUFRLENBQUMsV0FBbUIsRUFBRSxTQUFpQjtRQUM3QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNoRCxPQUFPLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFTyxVQUFVO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLG1CQUFNLElBQUksQ0FBQyxLQUFLLEVBQUcsQ0FBQztJQUNuRCxDQUFDO0lBRU8sYUFBYTtRQUNsQjtZQUNDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1lBQ2pGLENBQUMsZUFBZSxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUM1RixDQUFDLFVBQVUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ3JDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLEVBQUUsRUFBRTtZQUNwRSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNoRCxJQUFJLE9BQU8sRUFBRTtnQkFDWCxPQUFPLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUNsQyxPQUFPLENBQUMsc0JBQXNCLEVBQUUsQ0FBQzthQUNsQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7aUlBbkZVLG1DQUFtQztxSEFBbkMsbUNBQW1DLG1UQ1poRCw2N1BBc0xBOzRGRDFLYSxtQ0FBbUM7a0JBSi9DLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGtDQUFrQztvQkFDNUMsV0FBVyxFQUFFLGdEQUFnRDtpQkFDOUQ7a0dBS1UsS0FBSztzQkFBYixLQUFLO2dCQUlHLGVBQWU7c0JBQXZCLEtBQUs7Z0JBSUcsZUFBZTtzQkFBdkIsS0FBSztnQkFDSSxhQUFhO3NCQUF0QixNQUFNO2dCQUNHLFlBQVk7c0JBQXJCLE1BQU07Z0JBQ0csWUFBWTtzQkFBckIsTUFBTTtnQkFDRyxZQUFZO3NCQUFyQixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQnVpbGRlciwgRm9ybUdyb3VwLCBWYWxpZGF0b3JGbiwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IHRha2VVbnRpbCwgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgRWxlY3Ryb25pY1BheWVlRm9ybSB9IGZyb20gJy4uLy4uLy4uL21vZGVsJztcbmltcG9ydCB7IEJpbGxwYXlVdGlsaXR5U2VydmljZSBhcyBVdGlsaXR5IH0gZnJvbSAnQGJhY2tiYXNlL2JpbGxwYXktam91cm5leXMtY29tbW9uJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItYmlsbHBheS1lbGVjdHJvbmljLXBheWVlLWZvcm0nLFxuICB0ZW1wbGF0ZVVybDogJy4vYmlsbHBheS1lbGVjdHJvbmljLXBheWVlLWZvcm0uY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBCaWxscGF5RWxlY3Ryb25pY1BheWVlRm9ybUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgLyoqXG4gICAqIERldGFpbHMgb2YgdGhlIGVsZWN0cm9uaWMgcGF5ZWUgdG8gYmUgY3JlYXRlZC5cbiAgICovXG4gIEBJbnB1dCgpIHBheWVlPzogRWxlY3Ryb25pY1BheWVlRm9ybTtcbiAgLyoqXG4gICAqIERpc3BsYXlzIHRoZSB6aXAgY29kZSBpbnB1dCBmaWVsZC4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAqL1xuICBASW5wdXQoKSB6aXBDb2RlUmVxdWlyZWQgPSBmYWxzZTtcbiAgLyoqXG4gICAqIERpc3BsYXlzIGJhY2sgYnV0dG9uIHdoaWNoIHJldHVybnMgdG8gcGF5ZWUgc2VhcmNoLiBEZWZhdWx0cyB0byB0cnVlLlxuICAgKi9cbiAgQElucHV0KCkgYmFja0J1dHRvblNob3duID0gdHJ1ZTtcbiAgQE91dHB1dCgpIGZvcm1TdWJtaXR0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPEVsZWN0cm9uaWNQYXllZUZvcm0+KCk7XG4gIEBPdXRwdXQoKSBmb3JtQ2FuY2VsZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBPdXRwdXQoKSBiYWNrVG9TZWFyY2ggPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgcGF5ZWVGb3JtID0gbmV3IEZvcm1Hcm91cCh7fSk7XG4gIGRlc3Ryb3kkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgcHJpdmF0ZSBpc1N1Ym1pc3Npb25BdHRlbXB0ZWQgPSBmYWxzZTtcbiAgcmVhZG9ubHkgbmlja05hbWVEZXNjSWQ6IHN0cmluZztcbiAgcmVhZG9ubHkgYWNjTnVtYmVyRGVzY0lkOiBzdHJpbmc7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGZvcm1CdWlsZGVyOiBGb3JtQnVpbGRlcikge1xuICAgIHRoaXMubmlja05hbWVEZXNjSWQgPSBVdGlsaXR5LmdlbmVyYXRlSWQoKTtcbiAgICB0aGlzLmFjY051bWJlckRlc2NJZCA9IFV0aWxpdHkuZ2VuZXJhdGVJZCgpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5wYXllZUZvcm0gPSB0aGlzLmNyZWF0ZUZvcm0oKTtcbiAgICB0aGlzLnNldFZhbGlkYXRvcnMoKTtcbiAgICB0aGlzLnBheWVlRm9ybS52YWx1ZUNoYW5nZXMucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCksIHRha2UoMSkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnZhbHVlQ2hhbmdlZC5lbWl0KCk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcbiAgICB0aGlzLmRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gIH1cblxuICBvblN1Ym1pdChwYXllZUZvcm06IEZvcm1Hcm91cCkge1xuICAgIGlmICghdGhpcy5pc1N1Ym1pc3Npb25BdHRlbXB0ZWQpIHtcbiAgICAgIHRoaXMuaXNTdWJtaXNzaW9uQXR0ZW1wdGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHBheWVlRm9ybS5pbnZhbGlkKSB7XG4gICAgICBwYXllZUZvcm0ubWFya0FsbEFzVG91Y2hlZCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmZvcm1TdWJtaXR0ZWQuZW1pdCh0aGlzLnBheWVlRm9ybS52YWx1ZSk7XG4gIH1cblxuICBjYW5jZWxGb3JtKCkge1xuICAgIHRoaXMuZm9ybUNhbmNlbGVkLmVtaXQoKTtcbiAgfVxuXG4gIHRvU2VhcmNoKCkge1xuICAgIHRoaXMuYmFja1RvU2VhcmNoLmVtaXQoKTtcbiAgfVxuXG4gIGhhc0Vycm9yKGNvbnRyb2xOYW1lOiBzdHJpbmcsIGVycm9yTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgY29udHJvbCA9IHRoaXMucGF5ZWVGb3JtLmdldChjb250cm9sTmFtZSk7XG4gICAgcmV0dXJuICEhY29udHJvbCAmJiBjb250cm9sLnRvdWNoZWQgJiYgY29udHJvbC5oYXNFcnJvcihlcnJvck5hbWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVGb3JtKCk6IEZvcm1Hcm91cCB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybUJ1aWxkZXIuZ3JvdXAoeyAuLi50aGlzLnBheWVlIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRWYWxpZGF0b3JzKCkge1xuICAgIChbXG4gICAgICBbJ21lcmNoYW50WmlwQ29kZScsIFtWYWxpZGF0b3JzLnJlcXVpcmVkLCBWYWxpZGF0b3JzLnBhdHRlcm4oL15cXGR7NX0oXFxkezR9KT8kLyldXSxcbiAgICAgIFsnYWNjb3VudE51bWJlcicsIFtWYWxpZGF0b3JzLnJlcXVpcmVkLCBWYWxpZGF0b3JzLm1pbkxlbmd0aCgyKSwgVmFsaWRhdG9ycy5tYXhMZW5ndGgoMTAwKV1dLFxuICAgICAgWyduaWNrTmFtZScsIFtWYWxpZGF0b3JzLm1pbkxlbmd0aCgyKSwgVmFsaWRhdG9ycy5tYXhMZW5ndGgoMTAwKV1dLFxuICAgIF0gYXMgW3N0cmluZywgVmFsaWRhdG9yRm5bXV1bXSkuZm9yRWFjaCgoW2NvbnRyb2xOYW1lLCB2YWxpZGF0b3JzXSkgPT4ge1xuICAgICAgY29uc3QgY29udHJvbCA9IHRoaXMucGF5ZWVGb3JtLmdldChjb250cm9sTmFtZSk7XG4gICAgICBpZiAoY29udHJvbCkge1xuICAgICAgICBjb250cm9sLnNldFZhbGlkYXRvcnModmFsaWRhdG9ycyk7XG4gICAgICAgIGNvbnRyb2wudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLWxnXCI+XG4gIDxzZWN0aW9uIGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgPGZvcm0gZGF0YS1yb2xlPVwiZWxlY3Ryb25pYy1wYXllZS1mb3JtXCIgKG5nU3VibWl0KT1cIm9uU3VibWl0KHBheWVlRm9ybSlcIiBbZm9ybUdyb3VwXT1cInBheWVlRm9ybVwiPlxuICAgICAgPGJiLWZpZWxkc2V0LXVpPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYmItYmxvY2sgYmItYmxvY2stLW1kXCI+XG4gICAgICAgICAgPGJiLWhlYWRlci11aVxuICAgICAgICAgICAgaGVhZGluZ1R5cGU9XCJoMlwiXG4gICAgICAgICAgICBbaGVhZGluZ109XCInQWNjb3VudCBkZXRhaWxzIGZvciAnICsgcGF5ZWU/Lm5hbWVcIlxuICAgICAgICAgICAgaTE4bi1oZWFkaW5nPVwiRmllbGRzZXQgaGVhZGluZ3xBY2NvdW50IG5hbWUgaGVhZGluZ0BAYmlsbHBheS1lbGVjdHJvbmljLXBheWVlLWZvcm0ucGF5ZWUtZGV0YWlscy1oZWFkaW5nXCJcbiAgICAgICAgICAgIGRhdGEtcm9sZT1cInBheWVlLW5hbWUtaGVhZGluZ1wiXG4gICAgICAgICAgPjwvYmItaGVhZGVyLXVpPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBbY2xhc3MuYmItYmxvY2stLWxnXT1cInppcENvZGVSZXF1aXJlZFwiIGRhdGEtcm9sZT1cImFjY291bnQtbnVtYmVyLWxhYmVsXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJiLWZvcm0tZmllbGQgYmItZm9ybS1maWVsZC0tbWRcIj5cbiAgICAgICAgICAgIDxiYi1pbnB1dC10ZXh0LXVpXG4gICAgICAgICAgICAgIGZvcm1Db250cm9sTmFtZT1cImFjY291bnROdW1iZXJcIlxuICAgICAgICAgICAgICBkYXRhLXJvbGU9XCJhY2NvdW50LW51bWJlci1pbnB1dFwiXG4gICAgICAgICAgICAgIGxhYmVsPVwiQWNjb3VudCBudW1iZXJcIlxuICAgICAgICAgICAgICBpMThuLWxhYmVsPVwibGFiZWx8TGFiZWwgZm9yIGFjY291bnQgbnVtYmVyIGZpZWxkQEBiaWxscGF5LWVsZWN0cm9uaWMtcGF5ZWUtZm9ybS5hY2NvdW50LW51bWJlci1sYWJlbFwiXG4gICAgICAgICAgICAgIFthcmlhLWRlc2NyaWJlZGJ5XT1cImFjY051bWJlckRlc2NJZFwiXG4gICAgICAgICAgICAgIGF1dG9mb2N1c1xuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9iYi1pbnB1dC10ZXh0LXVpPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGlkPVwie3sgYWNjTnVtYmVyRGVzY0lkIH19XCJcbiAgICAgICAgICAgIGNsYXNzPVwiYmItc3VidGl0bGUgYmItdGV4dC1zdXBwb3J0XCJcbiAgICAgICAgICAgIGkxOG49XCJsYWJlbHxMYWJlbCBmb3IgYWNjb3VudCBudW1iZXIgaW5mbyBtZXNzYWdlQEBiaWxscGF5LWVsZWN0cm9uaWMtcGF5ZWUtZm9ybS5hY2NvdW50LW51bWJlci1pbmZvXCJcbiAgICAgICAgICAgIGRhdGEtcm9sZT1cImFjY291bnQtbnVtYmVyLWhlbHAtdGV4dFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgRW50ZXIgYWNjb3VudCBudW1iZXIgYXMgaXQgYXBwZWFycyBvbiB5b3VyIGJpbGxcbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8YmItaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlLXVpXG4gICAgICAgICAgICByb2xlPVwiYWxlcnRcIlxuICAgICAgICAgICAgW3Nob3dFcnJvcnNdPVwiaGFzRXJyb3IoJ2FjY291bnROdW1iZXInLCAncmVxdWlyZWQnKVwiXG4gICAgICAgICAgICBpMThuPVwiXG4gICAgICAgICAgICAgIGVycm9yIHRleHR8QWNjb3VudCBudW1iZXIgcmVxdWlyZWQgZXJyb3IgdGV4dEBAYmlsbHBheS1lbGVjdHJvbmljLXBheWVlLWZvcm0uZXJyb3IuYWNjb3VudC1udW1iZXItcmVxdWlyZWRcIlxuICAgICAgICAgICAgZGF0YS1yb2xlPVwiYWNjb3VudC1udW1iZXItZXJyb3ItcmVxdWlyZWRcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIFBsZWFzZSBlbnRlciBhbiBhY2NvdW50IG51bWJlclxuICAgICAgICAgIDwvYmItaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlLXVpPlxuICAgICAgICAgIDxiYi1pbnB1dC12YWxpZGF0aW9uLW1lc3NhZ2UtdWlcbiAgICAgICAgICAgIHJvbGU9XCJhbGVydFwiXG4gICAgICAgICAgICBbc2hvd0Vycm9yc109XCJoYXNFcnJvcignYWNjb3VudE51bWJlcicsICdtaW5sZW5ndGgnKVwiXG4gICAgICAgICAgICBpMThuPVwiXG4gICAgICAgICAgICAgIGVycm9yIHRleHR8QWNjb3VudCBudW1iZXIgbWlubGVuZ3RoIGVycm9yXG4gICAgICAgICAgICAgIHRleHRAQGJpbGxwYXktZWxlY3Ryb25pYy1wYXllZS1mb3JtLmVycm9yLmFjY291bnQtbnVtYmVyLW1pbmxlbmd0aFwiXG4gICAgICAgICAgICBkYXRhLXJvbGU9XCJhY2NvdW50LW51bWJlci1lcnJvci1taW5sZW5ndGhcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIEFjY291bnQgbnVtYmVyIG11c3QgYmUgYXQgbGVhc3QgMiBjaGFyYWN0ZXJzXG4gICAgICAgICAgPC9iYi1pbnB1dC12YWxpZGF0aW9uLW1lc3NhZ2UtdWk+XG4gICAgICAgICAgPGJiLWlucHV0LXZhbGlkYXRpb24tbWVzc2FnZS11aVxuICAgICAgICAgICAgcm9sZT1cImFsZXJ0XCJcbiAgICAgICAgICAgIFtzaG93RXJyb3JzXT1cImhhc0Vycm9yKCdhY2NvdW50TnVtYmVyJywgJ21heGxlbmd0aCcpXCJcbiAgICAgICAgICAgIGkxOG49XCJcbiAgICAgICAgICAgICAgZXJyb3IgdGV4dHxBY2NvdW50IG51bWJlciBtYXggbGVuZ3RoIGVycm9yXG4gICAgICAgICAgICAgIHRleHRAQGJpbGxwYXktZWxlY3Ryb25pYy1wYXllZS1mb3JtLmVycm9yLmFjY291bnQtbnVtYmVyLW1heGxlbmd0aFwiXG4gICAgICAgICAgICBkYXRhLXJvbGU9XCJhY2NvdW50LW51bWJlci1lcnJvci1tYXhsZW5ndGhcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIEFjY291bnQgbnVtYmVyIG1heSBub3QgYmUgb3ZlciBhIGh1bmRyZWQgY2hhcmFjdGVyc1xuICAgICAgICAgIDwvYmItaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlLXVpPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiAqbmdJZj1cInppcENvZGVSZXF1aXJlZFwiIGRhdGEtcm9sZT1cInppcC1jb2RlLWxhYmVsXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJiLWZvcm0tZmllbGQgYmItZm9ybS1maWVsZC0teHNcIj5cbiAgICAgICAgICAgIDxiYi1pbnB1dC10ZXh0LXVpXG4gICAgICAgICAgICAgIGZvcm1Db250cm9sTmFtZT1cIm1lcmNoYW50WmlwQ29kZVwiXG4gICAgICAgICAgICAgIGRhdGEtcm9sZT1cInppcC1jb2RlLWlucHV0XCJcbiAgICAgICAgICAgICAgbGFiZWw9XCJQYXllZSBaSVAgY29kZVwiXG4gICAgICAgICAgICAgIGkxOG4tbGFiZWw9XCJsYWJlbHxMYWJlbCBmb3IgWklQIGNvZGUgZmllbGRAQGJpbGxwYXktZWxlY3Ryb25pYy1wYXllZS1mb3JtLnppcC1sYWJlbFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICA8L2JiLWlucHV0LXRleHQtdWk+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGJiLWlucHV0LXZhbGlkYXRpb24tbWVzc2FnZS11aVxuICAgICAgICAgICAgcm9sZT1cImFsZXJ0XCJcbiAgICAgICAgICAgIFtzaG93RXJyb3JzXT1cImhhc0Vycm9yKCdtZXJjaGFudFppcENvZGUnLCAncmVxdWlyZWQnKVwiXG4gICAgICAgICAgICBpMThuPVwiZXJyb3IgdGV4dHxaaXAgY29kZSBpcyByZXF1aXJlZCBlcnJvciB0ZXh0QEBiaWxscGF5LWVsZWN0cm9uaWMtcGF5ZWUtZm9ybS5lcnJvci56aXAtY29kZS1yZXF1aXJlZFwiXG4gICAgICAgICAgICBkYXRhLXJvbGU9XCJ6aXAtY29kZS1lcnJvci1yZXF1aXJlZFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgUGxlYXNlIGVudGVyIGEgWmlwIENvZGVcbiAgICAgICAgICA8L2JiLWlucHV0LXZhbGlkYXRpb24tbWVzc2FnZS11aT5cbiAgICAgICAgICA8YmItaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlLXVpXG4gICAgICAgICAgICByb2xlPVwiYWxlcnRcIlxuICAgICAgICAgICAgW3Nob3dFcnJvcnNdPVwiaGFzRXJyb3IoJ21lcmNoYW50WmlwQ29kZScsICdwYXR0ZXJuJylcIlxuICAgICAgICAgICAgaTE4bj1cImVycm9yIHRleHR8WmlwIGNvZGUgZm9ybWF0IGVycm9yIHRleHRAQGJpbGxwYXktZWxlY3Ryb25pYy1wYXllZS1mb3JtLmVycm9yLnppcC1jb2RlLWZvcm1hdFwiXG4gICAgICAgICAgICBkYXRhLXJvbGU9XCJ6aXAtY29kZS1lcnJvci1wYXR0ZXJuXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICBaSVAgY29kZSBzaG91bGQgYmUgNSBvciA5IGRpZ2l0cyBsb25nXG4gICAgICAgICAgPC9iYi1pbnB1dC12YWxpZGF0aW9uLW1lc3NhZ2UtdWk+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9iYi1maWVsZHNldC11aT5cblxuICAgICAgPGJiLWZpZWxkc2V0LXVpPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYmItYmxvY2sgYmItYmxvY2stLW1kXCI+XG4gICAgICAgICAgPGJiLWhlYWRlci11aVxuICAgICAgICAgICAgaGVhZGluZ1R5cGU9XCJoMlwiXG4gICAgICAgICAgICBoZWFkaW5nPVwiUGF5ZWUgbmlja25hbWVcIlxuICAgICAgICAgICAgaTE4bi1oZWFkaW5nPVwiUGF5ZWUgbmlja25hbWVAQGJpbGxwYXktZWxlY3Ryb25pYy1wYXllZS1mb3JtLnBheWVlLW5pY2tuYW1lLWhlYWRpbmdcIlxuICAgICAgICAgICAgZGF0YS1yb2xlPVwicGF5ZWUtbmlja25hbWUtaGVhZGluZ1wiXG4gICAgICAgICAgPjwvYmItaGVhZGVyLXVpPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmItZm9ybS1maWVsZCBiYi1mb3JtLWZpZWxkLS1tZFwiPlxuICAgICAgICAgICAgPGxhYmVsIGRhdGEtcm9sZT1cIm5pY2tuYW1lLWlucHV0LWxhYmVsXCIgY2xhc3M9XCJiYi1sYWJlbFwiIFthdHRyLmlkXT1cIidiYi1uaWNrbmFtZS1sYWJlbCcgKyBuaWNrTmFtZURlc2NJZFwiPlxuICAgICAgICAgICAgICA8c3BhbiBpMThuPVwibGFiZWx8TGFiZWwgZm9yIHBheWVlIG5pY2tuYW1lIGZpZWxkQEBiaWxscGF5LWVsZWN0cm9uaWMtcGF5ZWUtZm9ybS5wYXllZS1uaWNrbmFtZS1sYWJlbFwiXG4gICAgICAgICAgICAgICAgPkNyZWF0ZSBwYXllZSBuaWNrbmFtZTwvc3BhblxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJiYi10ZXh0LWRlZmF1bHQgYmItdGV4dC1zdXBwb3J0XCJcbiAgICAgICAgICAgICAgICBpMThuPVwibGFiZWwgb3B0aW9uYWx8TGFiZWwgZm9yIG9wdGlvbmFsIHRleHRAQGJpbGxwYXktZWxlY3Ryb25pYy1wYXllZS1mb3JtLnBheWVlLW5pY2tuYW1lLWxhYmVsLWhlbHBlclwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAoT3B0aW9uYWwpPC9zcGFuXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8YmItaW5wdXQtdGV4dC11aVxuICAgICAgICAgICAgICBmb3JtQ29udHJvbE5hbWU9XCJuaWNrTmFtZVwiXG4gICAgICAgICAgICAgIGRhdGEtcm9sZT1cIm5pY2tuYW1lLWlucHV0XCJcbiAgICAgICAgICAgICAgW2FyaWEtZGVzY3JpYmVkYnldPVwibmlja05hbWVEZXNjSWRcIlxuICAgICAgICAgICAgICBbYXJpYS1sYWJlbGxlZGJ5XT1cIidiYi1uaWNrbmFtZS1sYWJlbCcgKyBuaWNrTmFtZURlc2NJZFwiXG4gICAgICAgICAgICA+PC9iYi1pbnB1dC10ZXh0LXVpPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGlkPVwie3sgbmlja05hbWVEZXNjSWQgfX1cIlxuICAgICAgICAgICAgY2xhc3M9XCJiYi1zdWJ0aXRsZSBiYi10ZXh0LXN1cHBvcnRcIlxuICAgICAgICAgICAgaTE4bj1cImxhYmVsfExhYmVsIGZvciBwYXllZSBuaWNrbmFtZSBpbmZvIG1lc3NhZ2VAQGJpbGxwYXktZWxlY3Ryb25pYy1wYXllZS1mb3JtLnBheWVlLW5pY2tuYW1lLWluZm9cIlxuICAgICAgICAgICAgZGF0YS1yb2xlPVwibmlja25hbWUtaGVscC10ZXh0XCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICBDaG9vc2UgaG93IHlvdSB3YW50IHRoaXMgcGF5ZWUgdG8gYXBwZWFyIGluIGJpbGwgcGF5LiBUaGlzIGluZm9ybWF0aW9uIGlzIG9ubHkgYXZhaWxhYmxlIHRvIHlvdS5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8YmItaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlLXVpXG4gICAgICAgICAgICByb2xlPVwiYWxlcnRcIlxuICAgICAgICAgICAgW3Nob3dFcnJvcnNdPVwiaGFzRXJyb3IoJ25pY2tOYW1lJywgJ21pbmxlbmd0aCcpXCJcbiAgICAgICAgICAgIGkxOG49XCJlcnJvciB0ZXh0fE5pY2tuYW1lIG1pbiBsZW5ndGggZXJyb3IgdGV4dEBAYmlsbHBheS1lbGVjdHJvbmljLXBheWVlLWZvcm0uZXJyb3Iubmlja25hbWUtbWlubGVuZ3RoXCJcbiAgICAgICAgICAgIGRhdGEtcm9sZT1cIm5pY2tuYW1lLWVycm9yLW1pbmxlbmd0aFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgTmlja25hbWUgbXVzdCBiZSBhdCBsZWFzdCAyIGNoYXJhY3RlcnNcbiAgICAgICAgICA8L2JiLWlucHV0LXZhbGlkYXRpb24tbWVzc2FnZS11aT5cbiAgICAgICAgICA8YmItaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlLXVpXG4gICAgICAgICAgICByb2xlPVwiYWxlcnRcIlxuICAgICAgICAgICAgW3Nob3dFcnJvcnNdPVwiaGFzRXJyb3IoJ25pY2tOYW1lJywgJ21heGxlbmd0aCcpXCJcbiAgICAgICAgICAgIGkxOG49XCJlcnJvciB0ZXh0fE5pY2tuYW1lIG1heCBsZW5ndGggZXJyb3IgdGV4dEBAYmlsbHBheS1lbGVjdHJvbmljLXBheWVlLWZvcm0uZXJyb3Iubmlja25hbWUtbWF4bGVuZ3RoXCJcbiAgICAgICAgICAgIGRhdGEtcm9sZT1cIm5pY2tuYW1lLWVycm9yLW1heGxlbmd0aFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgTmlja25hbWUgbWF5IG5vdCBiZSBvdmVyIGEgaHVuZHJlZCBjaGFyYWN0ZXJzXG4gICAgICAgICAgPC9iYi1pbnB1dC12YWxpZGF0aW9uLW1lc3NhZ2UtdWk+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9iYi1maWVsZHNldC11aT5cbiAgICAgIDxkaXYgY2xhc3M9XCJiYi1idXR0b24tYmFyIGJiLWJ1dHRvbi1iYXItLXJldmVyc2VcIj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGJiQnV0dG9uXG4gICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgZGF0YS1yb2xlPVwiY29udGludWUtYnV0dG9uXCJcbiAgICAgICAgICBpMThuPVwiTGFiZWwgZm9yIGJ1dHRvbnxFbGVjdHJvbmljIHBheWVlIGNvbnRpbnVlIGJ1dHRvbkBAYmlsbHBheS1lbGVjdHJvbmljLXBheWVlLWZvcm0uY29udGludWVcIlxuICAgICAgICAgIGNsYXNzPVwiYmItYnV0dG9uLWJhcl9fYnV0dG9uXCJcbiAgICAgICAgPlxuICAgICAgICAgIENvbnRpbnVlXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgYmJCdXR0b25cbiAgICAgICAgICAqbmdJZj1cImJhY2tCdXR0b25TaG93blwiXG4gICAgICAgICAgZGF0YS1yb2xlPVwiYmFjay1idXR0b25cIlxuICAgICAgICAgIGkxOG49XCJMYWJlbCBmb3IgYnV0dG9ufEZpbmQgYSBkaWZmZXJlbnQgcGF5ZWUgYnV0dG9uQEBiaWxscGF5LWVsZWN0cm9uaWMtcGF5ZWUtZm9ybS5maW5kLWRpZmZlcmVudC1wYXllZVwiXG4gICAgICAgICAgKGNsaWNrKT1cInRvU2VhcmNoKClcIlxuICAgICAgICAgIGNsYXNzPVwiYmItYnV0dG9uLWJhcl9fYnV0dG9uXCJcbiAgICAgICAgICBjb2xvcj1cInNlY29uZGFyeVwiXG4gICAgICAgID5cbiAgICAgICAgICBGaW5kIGEgZGlmZmVyZW50IHBheWVlXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgYmJCdXR0b25cbiAgICAgICAgICBkYXRhLXJvbGU9XCJjYW5jZWwtYnV0dG9uXCJcbiAgICAgICAgICBjb2xvcj1cImxpbmtcIlxuICAgICAgICAgIGNsYXNzPVwiYmItYnV0dG9uLWJhcl9fYnV0dG9uIGJiLWJ1dHRvbi1iYXJfX2J1dHRvbi0tYWNyb3NzXCJcbiAgICAgICAgICAoY2xpY2spPVwiY2FuY2VsRm9ybSgpXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxzcGFuIGkxOG49XCJDYW5jZWwgZWRpdHxMYWJlbCBmb3IgYSBidXR0b24gdGhhdCBjYW5jZWxzIGZvcm0gY2hhbmdlc0BAYmlsbHBheS1lbGVjdHJvbmljLXBheWVlLWZvcm0uY2FuY2VsXCJcbiAgICAgICAgICAgID5DYW5jZWw8L3NwYW5cbiAgICAgICAgICA+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9mb3JtPlxuICA8L3NlY3Rpb24+XG48L2Rpdj5cbiJdfQ==