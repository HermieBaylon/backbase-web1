import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { of } from 'rxjs';
import { catchError, debounceTime, distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/billpay-manage-payee-data.service";
import * as i2 from "@backbase/ui-ang/search-box";
export class BillpayElectronicPayeeSearchComponent {
    /** @internal */
    constructor(dataService) {
        this.dataService = dataService;
        /**
         * Fires a payee's id when electronic payee is selected in the search box.
         */
        this.payeeSelected = new EventEmitter();
        this.errorSearching = new EventEmitter();
        this.typeaheadOptions = {
            ngbTypeahead: this.search.bind(this),
            selectItem: this.onItemSelected.bind(this),
            resultFormatter: (payee) => payee.name,
            inputFormatter: (payee) => payee.name,
        };
    }
    search(text$) {
        const payees$ = (text) => this.dataService.searchPayeesByName(text).pipe(map(({ payees }) => payees || []), catchError(() => {
            this.errorSearching.emit();
            return of([]);
        }));
        return text$.pipe(debounceTime(300), distinctUntilChanged(), filter(text => text.length >= 2), switchMap(payees$), catchError(() => of([])));
    }
    onItemSelected(event) {
        this.payeeSelected.emit(event.item);
    }
}
BillpayElectronicPayeeSearchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayElectronicPayeeSearchComponent, deps: [{ token: i1.BillpayManagePayeeDataService }], target: i0.ɵɵFactoryTarget.Component });
BillpayElectronicPayeeSearchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayElectronicPayeeSearchComponent, selector: "bb-billpay-electronic-payee-search", inputs: { descTextId: "descTextId" }, outputs: { payeeSelected: "payeeSelected", errorSearching: "errorSearching" }, ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <bb-search-box-ui\n    [role]=\"'combobox'\"\n    showClear=\"true\"\n    [aria-describedby]=\"descTextId\"\n    label=\"Payee name\"\n    i18n-label=\"\n      Payee name|Label for electronic search input @@billpay-manage-payee.electronic-payee-search.form.search-label\"\n    clearLabel=\"Clear search\"\n    i18n-clearLabel=\"\n      The aria label used when the clear button is in focus@@billpay-manage-payee.electronic-payee-search.clear-label\"\n    [typeaheadOptions]=\"typeaheadOptions\"\n    [autocomplete]=\"'off'\"\n    autofocus\n  ></bb-search-box-ui>\n</div>\n", components: [{ type: i2.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayElectronicPayeeSearchComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-electronic-payee-search',
                    templateUrl: './billpay-electronic-payee-search.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.BillpayManagePayeeDataService }]; }, propDecorators: { payeeSelected: [{
                type: Output
            }], errorSearching: [{
                type: Output
            }], descTextId: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbHBheS1lbGVjdHJvbmljLXBheWVlLXNlYXJjaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL21hbmFnZS1wYXllZXMtam91cm5leS9zcmMvY29tcG9uZW50cy9hZGQtcGF5ZWUvYmlsbHBheS1lbGVjdHJvbmljLXBheWVlLXNlYXJjaC9iaWxscGF5LWVsZWN0cm9uaWMtcGF5ZWUtc2VhcmNoLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbWFuYWdlLXBheWVlcy1qb3VybmV5L3NyYy9jb21wb25lbnRzL2FkZC1wYXllZS9iaWxscGF5LWVsZWN0cm9uaWMtcGF5ZWUtc2VhcmNoL2JpbGxwYXktZWxlY3Ryb25pYy1wYXllZS1zZWFyY2guY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRyxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFTeEcsTUFBTSxPQUFPLHFDQUFxQztJQWlCaEQsZ0JBQWdCO0lBQ2hCLFlBQTZCLFdBQTBDO1FBQTFDLGdCQUFXLEdBQVgsV0FBVyxDQUErQjtRQWpCdkU7O1dBRUc7UUFDTyxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFlLENBQUM7UUFDaEQsbUJBQWMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBS3JDLHFCQUFnQixHQUFHO1lBQzFCLFlBQVksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDcEMsVUFBVSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUMxQyxlQUFlLEVBQUUsQ0FBQyxLQUFrQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSTtZQUNuRCxjQUFjLEVBQUUsQ0FBQyxLQUFrQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSTtTQUNuRCxDQUFDO0lBR3dFLENBQUM7SUFFM0UsTUFBTSxDQUFDLEtBQXlCO1FBQzlCLE1BQU0sT0FBTyxHQUFHLENBQUMsSUFBWSxFQUFFLEVBQUUsQ0FDL0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQzVDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsRUFDakMsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDM0IsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztRQUVKLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FDZixZQUFZLENBQUMsR0FBRyxDQUFDLEVBQ2pCLG9CQUFvQixFQUFFLEVBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLEVBQ2hDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFDbEIsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUN6QixDQUFDO0lBQ0osQ0FBQztJQUVELGNBQWMsQ0FBQyxLQUF3RDtRQUNyRSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7bUlBekNVLHFDQUFxQzt1SEFBckMscUNBQXFDLCtMQ1hsRCx3bUJBZ0JBOzRGRExhLHFDQUFxQztrQkFMakQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsb0NBQW9DO29CQUM5QyxXQUFXLEVBQUUsa0RBQWtEO29CQUMvRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7b0hBS1csYUFBYTtzQkFBdEIsTUFBTTtnQkFDRyxjQUFjO3NCQUF2QixNQUFNO2dCQUlFLFVBQVU7c0JBQWxCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBkZWJvdW5jZVRpbWUsIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBmaWx0ZXIsIG1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQmlsbHBheU1hbmFnZVBheWVlRGF0YVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9iaWxscGF5LW1hbmFnZS1wYXllZS1kYXRhLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGF5ZWVTZWFyY2ggfSBmcm9tICdAYmFja2Jhc2UvZGF0YS1hbmcvYmlsbHBheSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWJpbGxwYXktZWxlY3Ryb25pYy1wYXllZS1zZWFyY2gnLFxuICB0ZW1wbGF0ZVVybDogJy4vYmlsbHBheS1lbGVjdHJvbmljLXBheWVlLXNlYXJjaC5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBCaWxscGF5RWxlY3Ryb25pY1BheWVlU2VhcmNoQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIEZpcmVzIGEgcGF5ZWUncyBpZCB3aGVuIGVsZWN0cm9uaWMgcGF5ZWUgaXMgc2VsZWN0ZWQgaW4gdGhlIHNlYXJjaCBib3guXG4gICAqL1xuICBAT3V0cHV0KCkgcGF5ZWVTZWxlY3RlZCA9IG5ldyBFdmVudEVtaXR0ZXI8UGF5ZWVTZWFyY2g+KCk7XG4gIEBPdXRwdXQoKSBlcnJvclNlYXJjaGluZyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgLyoqXG4gICAqIERlc2NyaXB0aW9uIHRleHQgZWxlbWVudCBpZCBvZiB0aGUgc2VhcmNoIGlucHV0XG4gICAqL1xuICBASW5wdXQoKSBkZXNjVGV4dElkPzogc3RyaW5nO1xuICByZWFkb25seSB0eXBlYWhlYWRPcHRpb25zID0ge1xuICAgIG5nYlR5cGVhaGVhZDogdGhpcy5zZWFyY2guYmluZCh0aGlzKSxcbiAgICBzZWxlY3RJdGVtOiB0aGlzLm9uSXRlbVNlbGVjdGVkLmJpbmQodGhpcyksXG4gICAgcmVzdWx0Rm9ybWF0dGVyOiAocGF5ZWU6IFBheWVlU2VhcmNoKSA9PiBwYXllZS5uYW1lLFxuICAgIGlucHV0Rm9ybWF0dGVyOiAocGF5ZWU6IFBheWVlU2VhcmNoKSA9PiBwYXllZS5uYW1lLFxuICB9O1xuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBkYXRhU2VydmljZTogQmlsbHBheU1hbmFnZVBheWVlRGF0YVNlcnZpY2UpIHt9XG5cbiAgc2VhcmNoKHRleHQkOiBPYnNlcnZhYmxlPHN0cmluZz4pOiBPYnNlcnZhYmxlPFBheWVlU2VhcmNoW10+IHtcbiAgICBjb25zdCBwYXllZXMkID0gKHRleHQ6IHN0cmluZykgPT5cbiAgICAgIHRoaXMuZGF0YVNlcnZpY2Uuc2VhcmNoUGF5ZWVzQnlOYW1lKHRleHQpLnBpcGUoXG4gICAgICAgIG1hcCgoeyBwYXllZXMgfSkgPT4gcGF5ZWVzIHx8IFtdKSxcbiAgICAgICAgY2F0Y2hFcnJvcigoKSA9PiB7XG4gICAgICAgICAgdGhpcy5lcnJvclNlYXJjaGluZy5lbWl0KCk7XG4gICAgICAgICAgcmV0dXJuIG9mKFtdKTtcbiAgICAgICAgfSksXG4gICAgICApO1xuXG4gICAgcmV0dXJuIHRleHQkLnBpcGUoXG4gICAgICBkZWJvdW5jZVRpbWUoMzAwKSxcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICBmaWx0ZXIodGV4dCA9PiB0ZXh0Lmxlbmd0aCA+PSAyKSxcbiAgICAgIHN3aXRjaE1hcChwYXllZXMkKSxcbiAgICAgIGNhdGNoRXJyb3IoKCkgPT4gb2YoW10pKSxcbiAgICApO1xuICB9XG5cbiAgb25JdGVtU2VsZWN0ZWQoZXZlbnQ6IHsgaXRlbTogUGF5ZWVTZWFyY2g7IHByZXZlbnREZWZhdWx0OiAoKSA9PiB2b2lkIH0pIHtcbiAgICB0aGlzLnBheWVlU2VsZWN0ZWQuZW1pdChldmVudC5pdGVtKTtcbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cImJiLWJsb2NrIGJiLWJsb2NrLS14bFwiPlxuICA8YmItc2VhcmNoLWJveC11aVxuICAgIFtyb2xlXT1cIidjb21ib2JveCdcIlxuICAgIHNob3dDbGVhcj1cInRydWVcIlxuICAgIFthcmlhLWRlc2NyaWJlZGJ5XT1cImRlc2NUZXh0SWRcIlxuICAgIGxhYmVsPVwiUGF5ZWUgbmFtZVwiXG4gICAgaTE4bi1sYWJlbD1cIlxuICAgICAgUGF5ZWUgbmFtZXxMYWJlbCBmb3IgZWxlY3Ryb25pYyBzZWFyY2ggaW5wdXQgQEBiaWxscGF5LW1hbmFnZS1wYXllZS5lbGVjdHJvbmljLXBheWVlLXNlYXJjaC5mb3JtLnNlYXJjaC1sYWJlbFwiXG4gICAgY2xlYXJMYWJlbD1cIkNsZWFyIHNlYXJjaFwiXG4gICAgaTE4bi1jbGVhckxhYmVsPVwiXG4gICAgICBUaGUgYXJpYSBsYWJlbCB1c2VkIHdoZW4gdGhlIGNsZWFyIGJ1dHRvbiBpcyBpbiBmb2N1c0BAYmlsbHBheS1tYW5hZ2UtcGF5ZWUuZWxlY3Ryb25pYy1wYXllZS1zZWFyY2guY2xlYXItbGFiZWxcIlxuICAgIFt0eXBlYWhlYWRPcHRpb25zXT1cInR5cGVhaGVhZE9wdGlvbnNcIlxuICAgIFthdXRvY29tcGxldGVdPVwiJ29mZidcIlxuICAgIGF1dG9mb2N1c1xuICA+PC9iYi1zZWFyY2gtYm94LXVpPlxuPC9kaXY+XG4iXX0=