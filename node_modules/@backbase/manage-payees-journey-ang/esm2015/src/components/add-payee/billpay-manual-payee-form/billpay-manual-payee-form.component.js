import { __rest } from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormGroup, Validators } from '@angular/forms';
import { takeUntil, take, distinctUntilChanged } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { BillpayUtilityService as Utility } from '@backbase/billpay-journeys-common';
import { PhoneNumberPipe } from '@backbase/ui-ang/phone-number-format-pipe';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/phone-number-format-pipe";
import * as i3 from "@backbase/ui-ang/alert";
import * as i4 from "@backbase/ui-ang/input-text";
import * as i5 from "@backbase/ui-ang/input-validation-message";
import * as i6 from "@backbase/ui-ang/fieldset";
import * as i7 from "@backbase/billpay-journeys-common";
import * as i8 from "@angular/common";
import * as i9 from "@backbase/ui-ang/button";
export const DEFAULT_FORM_VALUE = {
    name: '',
    address: { address1: '', address2: '', city: '', state: '', postalCode: '' },
    phoneNumber: '',
    accountNumber: '',
    nickName: '',
};
const DEFAULT_COUNTRY_CODE = 'US';
export class BillpayManualPayeeFormComponent {
    /** @internal */
    constructor(formBuilder, phoneNumberFormatter) {
        this.formBuilder = formBuilder;
        this.phoneNumberFormatter = phoneNumberFormatter;
        /**
         * Hides elements that are not relevant when editing a payee. Defaults to false.
         */
        this.editForm = false;
        this.formSubmitted = new EventEmitter();
        this.formCanceled = new EventEmitter();
        this.backToSearch = new EventEmitter();
        this.valueChanged = new EventEmitter();
        this.payeeForm = new FormGroup({});
        this.componentDestroyed$ = new Subject();
        this.isSubmissionAttempted = false;
        this.requiredErrorId = Utility.generateId();
        this.minLengthErrorId = Utility.generateId();
        this.maxlengthErrorId = Utility.generateId();
        this.helpTextId = Utility.generateId();
        this.formatErrorId = Utility.generateId();
        this.labelId = Utility.generateId();
    }
    ngOnInit() {
        this.payeeForm = this.createForm();
        this.setValidators();
        this.payeeForm.valueChanges.pipe(takeUntil(this.componentDestroyed$), take(1)).subscribe(() => {
            this.valueChanged.emit();
        });
        const phoneNumberControl = this.payeeForm.get('phoneNumber');
        if (phoneNumberControl) {
            this.setupPhoneNumberFormatter(phoneNumberControl);
        }
    }
    ngOnDestroy() {
        this.componentDestroyed$.next();
        this.componentDestroyed$.complete();
    }
    onSubmit(payeeForm) {
        if (!this.isSubmissionAttempted) {
            this.isSubmissionAttempted = true;
        }
        if (payeeForm.invalid) {
            payeeForm.markAllAsTouched();
            return;
        }
        this.formSubmitted.emit(payeeForm.value);
    }
    cancelForm() {
        this.formCanceled.emit();
    }
    toSearch() {
        this.backToSearch.emit();
    }
    hasError(controlName, errorName) {
        const control = this.payeeForm.get(controlName);
        return !!control && control.touched && control.hasError(errorName);
    }
    createForm() {
        const _a = Object.assign(Object.assign(Object.assign({}, DEFAULT_FORM_VALUE), this.payeeFormState), { address: Object.assign(Object.assign({}, DEFAULT_FORM_VALUE.address), (this.payeeFormState && Object.assign({}, this.payeeFormState.address))) }), { phoneNumber, address } = _a, restFormState = __rest(_a, ["phoneNumber", "address"]);
        return this.formBuilder.group(Object.assign(Object.assign({}, restFormState), { phoneNumber: this.formatPhoneNumber(phoneNumber), address: this.formBuilder.group(address) }));
    }
    setValidators() {
        [
            ['name', [Validators.required, Validators.minLength(2), Validators.maxLength(100)]],
            ['address.address1', [Validators.required, Validators.maxLength(40)]],
            ['address.address2', [Validators.maxLength(40)]],
            ['address.city', [Validators.required, Validators.maxLength(32)]],
            ['address.state', [Validators.required]],
            ['address.postalCode', [Validators.required, Validators.pattern(/^\d{5}(\d{4})?$/)]],
            ['phoneNumber', [Validators.pattern(/^\+1 \d{3} \d{3} \d{4}$/)]],
            ['accountNumber', [Validators.minLength(2), Validators.maxLength(100)]],
            ['nickName', [Validators.minLength(2), Validators.maxLength(100)]],
        ].forEach(([controlName, validators]) => {
            const control = this.payeeForm.get(controlName);
            if (control) {
                control.setValidators(validators);
                control.updateValueAndValidity();
            }
        });
    }
    formatPhoneNumber(phoneNumber) {
        return this.phoneNumberFormatter.transform(phoneNumber, DEFAULT_COUNTRY_CODE, true);
    }
    setupPhoneNumberFormatter(control) {
        control.valueChanges.pipe(distinctUntilChanged()).subscribe(() => {
            control.setValue(this.formatPhoneNumber(control.value), {
                emitEvent: false,
            });
        });
    }
}
BillpayManualPayeeFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManualPayeeFormComponent, deps: [{ token: i1.FormBuilder }, { token: i2.PhoneNumberPipe }], target: i0.ɵɵFactoryTarget.Component });
BillpayManualPayeeFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayManualPayeeFormComponent, selector: "bb-billpay-manual-payee-form", inputs: { payeeFormState: "payeeFormState", editForm: "editForm" }, outputs: { formSubmitted: "formSubmitted", formCanceled: "formCanceled", backToSearch: "backToSearch", valueChanged: "valueChanged" }, providers: [PhoneNumberPipe], ngImport: i0, template: "<div class=\"card card-lg\">\n  <section class=\"card-body\">\n    <form #form data-role=\"manual-payee-form\" (ngSubmit)=\"onSubmit(payeeForm)\" [formGroup]=\"payeeForm\">\n      <bb-alert-ui\n        *ngIf=\"!editForm\"\n        modifier=\"warning\"\n        [title]=\"\n          'Please note that payees entered manually will have a longer payment processing time and no eBill functionality'\n        \"\n        i18n-title=\"alert title|For create payee form alert@@billpay-manual-payee-form.alert\"\n      >\n      </bb-alert-ui>\n      <div class=\"bb-block bb-block--xl\">\n        <div class=\"bb-form-field bb-form-field--md\">\n          <bb-input-text-ui\n            formControlName=\"name\"\n            data-role=\"name-input\"\n            label=\"Company, organisation or individual's name\"\n            i18n-label=\"label|Label for company, organisation, individual's name field@@billpay-manual-payee-form.name\"\n            [aria-describedby]=\"\n              ['name-' + requiredErrorId, 'name-' + minLengthErrorId, 'name-' + maxlengthErrorId].join(' ')\n            \"\n            autofocus\n          >\n          </bb-input-text-ui>\n        </div>\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"hasError('name', 'required')\"\n          i18n=\"error text|Name is required error text@@billpay-manual-payee-form.error.name-required\"\n          data-role=\"name-error-required\"\n          [messageId]=\"'name-' + requiredErrorId\"\n        >\n          Please enter a name\n        </bb-input-validation-message-ui>\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"hasError('name', 'minlength')\"\n          i18n=\"error text|Name minlength error text@@billpay-manual-payee-form.error.name-minlength\"\n          data-role=\"name-error-minlength\"\n          [messageId]=\"'name-' + minLengthErrorId\"\n        >\n          Name must be at least 2 characters\n        </bb-input-validation-message-ui>\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"hasError('name', 'maxlength')\"\n          i18n=\"error text|Name max length error text@@billpay-manual-payee-form.error.name-maxlength\"\n          data-role=\"name-error-maxlength\"\n          [messageId]=\"'name-' + maxlengthErrorId\"\n        >\n          Name may not be over a hundred characters\n        </bb-input-validation-message-ui>\n      </div>\n      <bb-fieldset-ui\n        heading=\"Payee contact details\"\n        i18n-heading=\"Payee contact details heading@@billpay-manual-payee-form.payee-details-heading\"\n      >\n        <bb-billpay-address-form formGroupName=\"address\"></bb-billpay-address-form>\n\n        <div class=\"bb-block bb-block--md\">\n          <div class=\"bb-form-field bb-form-field--sm\">\n            <label for=\"billpay-phone-number-input\" data-role=\"phone-number-label\">\n              <ng-container i18n=\"label|Label for phone number field@@billpay-manual-payee-form.phone-label\"\n                >Phone number&nbsp;</ng-container\n              ><span\n                class=\"bb-text-default bb-text-support\"\n                i18n=\"label optional|Label for optional field@@billpay-manual-payee-form.optional-label\"\n                >(Optional)</span\n              ></label\n            >\n            <input\n              class=\"form-control\"\n              id=\"billpay-phone-number-input\"\n              formControlName=\"phoneNumber\"\n              data-role=\"phone-number-input\"\n              [attr.aria-describedby]=\"\n                ['billpay-phone-number-help-' + helpTextId, 'billpay-phone-number-help-' + formatErrorId].join(' ')\n              \"\n              type=\"tel\"\n              aria-label=\"Phone number\"\n              i18n-aria-label=\"\n                aria label|Aria label for phone number field@@billpay-manual-payee-form.phone-number-aria-label\"\n            />\n          </div>\n          <span\n            id=\"{{ 'billpay-phone-number-help-' + helpTextId }}\"\n            class=\"bb-subtitle bb-text-support\"\n            i18n=\"label|Label for phone number format info message@@billpay-manual-payee-form.phone-format\"\n            data-role=\"phone-number-help-text\"\n          >\n            Format +1 XXX XXX XXXX\n          </span>\n          <bb-input-validation-message-ui\n            [messageId]=\"'billpay-phone-number-help-' + formatErrorId\"\n            role=\"alert\"\n            [showErrors]=\"hasError('phoneNumber', 'pattern')\"\n            i18n=\"error text|Phone number format error text@@billpay-manual-payee-form.error.phone-number-format\"\n            data-role=\"phone-number-error-pattern\"\n          >\n            Phone number format should be +1 xxx xxx xxxx\n          </bb-input-validation-message-ui>\n        </div>\n\n        <div>\n          <div class=\"bb-form-field bb-form-field--md\">\n            <label\n              class=\"bb-label\"\n              data-role=\"account-number-input-label\"\n              [attr.id]=\"'bb-account-number-label' + labelId\"\n            >\n              <span i18n=\"label|Label for account number field@@billpay-manual-payee-form.account-number-label\"\n                >Account number</span\n              >\n              <span\n                class=\"bb-text-default bb-text-support\"\n                i18n=\"label optional|Label for optional text@@billpay-manual-payee-form.account-number-label-helper\"\n              >\n                (Optional)</span\n              >\n            </label>\n            <bb-input-text-ui\n              formControlName=\"accountNumber\"\n              data-role=\"account-number-input\"\n              [aria-labelledby]=\"'bb-account-number-label' + labelId\"\n              [aria-describedby]=\"\n                [\n                  'account-number-help-' + helpTextId,\n                  'account-number-help-' + minLengthErrorId,\n                  'account-number-help-' + maxlengthErrorId\n                ].join(' ')\n              \"\n            >\n            </bb-input-text-ui>\n          </div>\n          <span\n            [id]=\"'account-number-help-' + helpTextId\"\n            class=\"bb-subtitle bb-text-support\"\n            i18n=\"label|Label for account number info message@@billpay-manual-payee-form.account-number-info\"\n            data-role=\"account-number-help-text\"\n            >If you have an account number for this payee, enter it as it appears on your bill\n          </span>\n          <bb-input-validation-message-ui\n            [messageId]=\"'account-number-help-' + minLengthErrorId\"\n            role=\"alert\"\n            [showErrors]=\"hasError('accountNumber', 'minlength')\"\n            i18n=\"\n              error text|Account number minlength error text@@billpay-manual-payee-form.error.account-number-minlength\"\n            data-role=\"account-number-error-minlength\"\n          >\n            Account number must be at least 2 characters\n          </bb-input-validation-message-ui>\n          <bb-input-validation-message-ui\n            [messageId]=\"'account-number-help-' + maxlengthErrorId\"\n            role=\"alert\"\n            [showErrors]=\"hasError('accountNumber', 'maxlength')\"\n            i18n=\"\n              error text|Account number max length error text@@billpay-manual-payee-form.error.account-number-maxlength\"\n            data-role=\"account-number-error-maxlength\"\n          >\n            Account number may not be over a hundred characters\n          </bb-input-validation-message-ui>\n        </div>\n      </bb-fieldset-ui>\n\n      <bb-fieldset-ui\n        heading=\"Payee nickname\"\n        i18n-heading=\"Payee nickname@@billpay-manual-payee-form.payee-nickname-heading\"\n      >\n        <div class=\"bb-block bb-block--md\">\n          <div class=\"bb-form-field bb-form-field--md\">\n            <label class=\"bb-label\" data-role=\"nickname-input-label\" [attr.id]=\"'bb-nickname-label' + labelId\">\n              <span i18n=\"label|Label for payee nickname field@@billpay-manual-payee-form.payee-nickname-label\"\n                >Create payee nickname\n              </span>\n              <span\n                class=\"bb-text-default bb-text-support\"\n                i18n=\"label optional|Label for optional text@@billpay-manual-payee-form.payee-nickname-label-helper\"\n              >\n                (Optional)</span\n              >\n            </label>\n            <bb-input-text-ui\n              formControlName=\"nickName\"\n              data-role=\"nickname-input\"\n              [aria-labelledby]=\"'bb-nickname-label' + labelId\"\n              [aria-describedby]=\"\n                ['nickName-' + helpTextId, 'nickName-' + minLengthErrorId, 'nickName-' + maxlengthErrorId].join(' ')\n              \"\n            >\n            </bb-input-text-ui>\n          </div>\n          <span\n            [id]=\"'nickName-' + helpTextId\"\n            class=\"bb-subtitle bb-text-support\"\n            i18n=\"label|Label for payee nickname info message@@billpay-manual-payee-form.payee-nickname-info\"\n            data-role=\"nickname-help-text\"\n            >Choose how you want this payee to appear in bill pay. This information is only available to you.</span\n          >\n          <bb-input-validation-message-ui\n            role=\"alert\"\n            [showErrors]=\"hasError('nickName', 'minlength')\"\n            i18n=\"error text|Nickname min length error text@@billpay-manual-payee-form.error.nickname-minlength\"\n            data-role=\"nickname-error-minlength\"\n            [messageId]=\"'nickName-' + minLengthErrorId\"\n          >\n            Nickname must be at least 2 characters\n          </bb-input-validation-message-ui>\n          <bb-input-validation-message-ui\n            role=\"alert\"\n            [showErrors]=\"hasError('nickName', 'maxlength')\"\n            i18n=\"error text|Nickname max length error text@@billpay-manual-payee-form.error.nickname-maxlength\"\n            data-role=\"nickname-error-maxlength\"\n            [messageId]=\"'nickName-' + maxlengthErrorId\"\n          >\n            Nickname may not be over a hundred characters\n          </bb-input-validation-message-ui>\n        </div>\n      </bb-fieldset-ui>\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <button\n          bbButton\n          type=\"submit\"\n          data-role=\"continue-button\"\n          i18n=\"Label for button|Manual payee continue button@@billpay-manual-payee-form.continue\"\n          class=\"bb-button-bar__button\"\n        >\n          Continue\n        </button>\n        <button\n          *ngIf=\"!editForm\"\n          bbButton\n          data-role=\"back-button\"\n          i18n=\"Label for button|Find a different payee button@@billpay-manual-payee-form.find-different-payee\"\n          (click)=\"toSearch()\"\n          class=\"bb-button-bar__button\"\n          color=\"secondary\"\n        >\n          Find a different payee\n        </button>\n        <button\n          bbButton\n          data-role=\"cancel-button\"\n          i18n=\"Label for button|Cancel button@@billpay-manual-payee-form.cancel\"\n          (click)=\"cancelForm()\"\n          class=\"bb-button-bar__button bb-button-bar__button--across\"\n          color=\"link\"\n        >\n          Cancel\n        </button>\n      </div>\n    </form>\n  </section>\n</div>\n", components: [{ type: i3.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i4.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i5.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i6.FieldsetComponent, selector: "bb-fieldset-ui", inputs: ["heading", "disabled"] }, { type: i7.ӨBillpayAddressFormComponent, selector: "bb-billpay-address-form" }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i9.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManualPayeeFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-manual-payee-form',
                    templateUrl: './billpay-manual-payee-form.component.html',
                    providers: [PhoneNumberPipe],
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.PhoneNumberPipe }]; }, propDecorators: { payeeFormState: [{
                type: Input
            }], editForm: [{
                type: Input
            }], formSubmitted: [{
                type: Output
            }], formCanceled: [{
                type: Output
            }], backToSearch: [{
                type: Output
            }], valueChanged: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbHBheS1tYW51YWwtcGF5ZWUtZm9ybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL21hbmFnZS1wYXllZXMtam91cm5leS9zcmMvY29tcG9uZW50cy9hZGQtcGF5ZWUvYmlsbHBheS1tYW51YWwtcGF5ZWUtZm9ybS9iaWxscGF5LW1hbnVhbC1wYXllZS1mb3JtLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbWFuYWdlLXBheWVlcy1qb3VybmV5L3NyYy9jb21wb25lbnRzL2FkZC1wYXllZS9iaWxscGF5LW1hbnVhbC1wYXllZS1mb3JtL2JpbGxwYXktbWFudWFsLXBheWVlLWZvcm0uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTFGLE9BQU8sRUFBZ0MsU0FBUyxFQUFlLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xHLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUscUJBQXFCLElBQUksT0FBTyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDckYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDJDQUEyQyxDQUFDOzs7Ozs7Ozs7OztBQUU1RSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRztJQUNoQyxJQUFJLEVBQUUsRUFBRTtJQUNSLE9BQU8sRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsVUFBVSxF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UUFBUSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3RELFNBQVMsRUFBRSxLQUFLO2FBQ2pCLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7NkhBcEhVLCtCQUErQjtpSEFBL0IsK0JBQStCLGtRQUYvQixDQUFDLGVBQWUsQ0FBQywwQkNwQjlCLDh0V0E4UEE7NEZEeE9hLCtCQUErQjtrQkFMM0MsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsOEJBQThCO29CQUN4QyxXQUFXLEVBQUUsNENBQTRDO29CQUN6RCxTQUFTLEVBQUUsQ0FBQyxlQUFlLENBQUM7aUJBQzdCO2dJQUtVLGNBQWM7c0JBQXRCLEtBQUs7Z0JBSUcsUUFBUTtzQkFBaEIsS0FBSztnQkFDSSxhQUFhO3NCQUF0QixNQUFNO2dCQUNHLFlBQVk7c0JBQXJCLE1BQU07Z0JBQ0csWUFBWTtzQkFBckIsTUFBTTtnQkFDRyxZQUFZO3NCQUFyQixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYW51YWxQYXllZUZvcm1TdGF0ZSB9IGZyb20gJy4uLy4uLy4uL21vZGVsJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgRm9ybUJ1aWxkZXIsIEZvcm1Hcm91cCwgVmFsaWRhdG9yRm4sIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwsIHRha2UsIGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQmlsbHBheVV0aWxpdHlTZXJ2aWNlIGFzIFV0aWxpdHkgfSBmcm9tICdAYmFja2Jhc2UvYmlsbHBheS1qb3VybmV5cy1jb21tb24nO1xuaW1wb3J0IHsgUGhvbmVOdW1iZXJQaXBlIH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy9waG9uZS1udW1iZXItZm9ybWF0LXBpcGUnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9GT1JNX1ZBTFVFID0ge1xuICBuYW1lOiAnJyxcbiAgYWRkcmVzczogeyBhZGRyZXNzMTogJycsIGFkZHJlc3MyOiAnJywgY2l0eTogJycsIHN0YXRlOiAnJywgcG9zdGFsQ29kZTogJycgfSxcbiAgcGhvbmVOdW1iZXI6ICcnLFxuICBhY2NvdW50TnVtYmVyOiAnJyxcbiAgbmlja05hbWU6ICcnLFxufTtcbmNvbnN0IERFRkFVTFRfQ09VTlRSWV9DT0RFID0gJ1VTJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItYmlsbHBheS1tYW51YWwtcGF5ZWUtZm9ybScsXG4gIHRlbXBsYXRlVXJsOiAnLi9iaWxscGF5LW1hbnVhbC1wYXllZS1mb3JtLmNvbXBvbmVudC5odG1sJyxcbiAgcHJvdmlkZXJzOiBbUGhvbmVOdW1iZXJQaXBlXSxcbn0pXG5leHBvcnQgY2xhc3MgQmlsbHBheU1hbnVhbFBheWVlRm9ybUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgLyoqXG4gICAqIERldGFpbHMgb2YgdGhlIG1hbnVhbCBwYXllZSB0byBiZSBjcmVhdGVkLlxuICAgKi9cbiAgQElucHV0KCkgcGF5ZWVGb3JtU3RhdGU/OiBNYW51YWxQYXllZUZvcm1TdGF0ZTtcbiAgLyoqXG4gICAqIEhpZGVzIGVsZW1lbnRzIHRoYXQgYXJlIG5vdCByZWxldmFudCB3aGVuIGVkaXRpbmcgYSBwYXllZS4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAqL1xuICBASW5wdXQoKSBlZGl0Rm9ybSA9IGZhbHNlO1xuICBAT3V0cHV0KCkgZm9ybVN1Ym1pdHRlZCA9IG5ldyBFdmVudEVtaXR0ZXI8TWFudWFsUGF5ZWVGb3JtU3RhdGU+KCk7XG4gIEBPdXRwdXQoKSBmb3JtQ2FuY2VsZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBPdXRwdXQoKSBiYWNrVG9TZWFyY2ggPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgcGF5ZWVGb3JtID0gbmV3IEZvcm1Hcm91cCh7fSk7XG4gIGNvbXBvbmVudERlc3Ryb3llZCQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICBwcml2YXRlIGlzU3VibWlzc2lvbkF0dGVtcHRlZCA9IGZhbHNlO1xuICByZWFkb25seSByZXF1aXJlZEVycm9ySWQgPSBVdGlsaXR5LmdlbmVyYXRlSWQoKTtcbiAgcmVhZG9ubHkgbWluTGVuZ3RoRXJyb3JJZCA9IFV0aWxpdHkuZ2VuZXJhdGVJZCgpO1xuICByZWFkb25seSBtYXhsZW5ndGhFcnJvcklkID0gVXRpbGl0eS5nZW5lcmF0ZUlkKCk7XG4gIHJlYWRvbmx5IGhlbHBUZXh0SWQgPSBVdGlsaXR5LmdlbmVyYXRlSWQoKTtcbiAgcmVhZG9ubHkgZm9ybWF0RXJyb3JJZCA9IFV0aWxpdHkuZ2VuZXJhdGVJZCgpO1xuICByZWFkb25seSBsYWJlbElkID0gVXRpbGl0eS5nZW5lcmF0ZUlkKCk7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGZvcm1CdWlsZGVyOiBGb3JtQnVpbGRlciwgcHJpdmF0ZSByZWFkb25seSBwaG9uZU51bWJlckZvcm1hdHRlcjogUGhvbmVOdW1iZXJQaXBlKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMucGF5ZWVGb3JtID0gdGhpcy5jcmVhdGVGb3JtKCk7XG4gICAgdGhpcy5zZXRWYWxpZGF0b3JzKCk7XG4gICAgdGhpcy5wYXllZUZvcm0udmFsdWVDaGFuZ2VzLnBpcGUodGFrZVVudGlsKHRoaXMuY29tcG9uZW50RGVzdHJveWVkJCksIHRha2UoMSkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnZhbHVlQ2hhbmdlZC5lbWl0KCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBwaG9uZU51bWJlckNvbnRyb2wgPSB0aGlzLnBheWVlRm9ybS5nZXQoJ3Bob25lTnVtYmVyJyk7XG4gICAgaWYgKHBob25lTnVtYmVyQ29udHJvbCkge1xuICAgICAgdGhpcy5zZXR1cFBob25lTnVtYmVyRm9ybWF0dGVyKHBob25lTnVtYmVyQ29udHJvbCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5jb21wb25lbnREZXN0cm95ZWQkLm5leHQoKTtcbiAgICB0aGlzLmNvbXBvbmVudERlc3Ryb3llZCQuY29tcGxldGUoKTtcbiAgfVxuXG4gIG9uU3VibWl0KHBheWVlRm9ybTogRm9ybUdyb3VwKSB7XG4gICAgaWYgKCF0aGlzLmlzU3VibWlzc2lvbkF0dGVtcHRlZCkge1xuICAgICAgdGhpcy5pc1N1Ym1pc3Npb25BdHRlbXB0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAocGF5ZWVGb3JtLmludmFsaWQpIHtcbiAgICAgIHBheWVlRm9ybS5tYXJrQWxsQXNUb3VjaGVkKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZm9ybVN1Ym1pdHRlZC5lbWl0KHBheWVlRm9ybS52YWx1ZSk7XG4gIH1cblxuICBjYW5jZWxGb3JtKCkge1xuICAgIHRoaXMuZm9ybUNhbmNlbGVkLmVtaXQoKTtcbiAgfVxuXG4gIHRvU2VhcmNoKCkge1xuICAgIHRoaXMuYmFja1RvU2VhcmNoLmVtaXQoKTtcbiAgfVxuXG4gIGhhc0Vycm9yKGNvbnRyb2xOYW1lOiBzdHJpbmcsIGVycm9yTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgY29udHJvbCA9IHRoaXMucGF5ZWVGb3JtLmdldChjb250cm9sTmFtZSk7XG4gICAgcmV0dXJuICEhY29udHJvbCAmJiBjb250cm9sLnRvdWNoZWQgJiYgY29udHJvbC5oYXNFcnJvcihlcnJvck5hbWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVGb3JtKCk6IEZvcm1Hcm91cCB7XG4gICAgY29uc3QgeyBwaG9uZU51bWJlciwgYWRkcmVzcywgLi4ucmVzdEZvcm1TdGF0ZSB9ID0ge1xuICAgICAgLi4uREVGQVVMVF9GT1JNX1ZBTFVFLFxuICAgICAgLi4udGhpcy5wYXllZUZvcm1TdGF0ZSxcbiAgICAgIGFkZHJlc3M6IHtcbiAgICAgICAgLi4uREVGQVVMVF9GT1JNX1ZBTFVFLmFkZHJlc3MsXG4gICAgICAgIC4uLih0aGlzLnBheWVlRm9ybVN0YXRlICYmIHsgLi4udGhpcy5wYXllZUZvcm1TdGF0ZS5hZGRyZXNzIH0pLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuZm9ybUJ1aWxkZXIuZ3JvdXAoe1xuICAgICAgLi4ucmVzdEZvcm1TdGF0ZSxcbiAgICAgIHBob25lTnVtYmVyOiB0aGlzLmZvcm1hdFBob25lTnVtYmVyKHBob25lTnVtYmVyKSxcbiAgICAgIGFkZHJlc3M6IHRoaXMuZm9ybUJ1aWxkZXIuZ3JvdXAoYWRkcmVzcyksXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHNldFZhbGlkYXRvcnMoKSB7XG4gICAgKFtcbiAgICAgIFsnbmFtZScsIFtWYWxpZGF0b3JzLnJlcXVpcmVkLCBWYWxpZGF0b3JzLm1pbkxlbmd0aCgyKSwgVmFsaWRhdG9ycy5tYXhMZW5ndGgoMTAwKV1dLFxuICAgICAgWydhZGRyZXNzLmFkZHJlc3MxJywgW1ZhbGlkYXRvcnMucmVxdWlyZWQsIFZhbGlkYXRvcnMubWF4TGVuZ3RoKDQwKV1dLFxuICAgICAgWydhZGRyZXNzLmFkZHJlc3MyJywgW1ZhbGlkYXRvcnMubWF4TGVuZ3RoKDQwKV1dLFxuICAgICAgWydhZGRyZXNzLmNpdHknLCBbVmFsaWRhdG9ycy5yZXF1aXJlZCwgVmFsaWRhdG9ycy5tYXhMZW5ndGgoMzIpXV0sXG4gICAgICBbJ2FkZHJlc3Muc3RhdGUnLCBbVmFsaWRhdG9ycy5yZXF1aXJlZF1dLFxuICAgICAgWydhZGRyZXNzLnBvc3RhbENvZGUnLCBbVmFsaWRhdG9ycy5yZXF1aXJlZCwgVmFsaWRhdG9ycy5wYXR0ZXJuKC9eXFxkezV9KFxcZHs0fSk/JC8pXV0sXG4gICAgICBbJ3Bob25lTnVtYmVyJywgW1ZhbGlkYXRvcnMucGF0dGVybigvXlxcKzEgXFxkezN9IFxcZHszfSBcXGR7NH0kLyldXSxcbiAgICAgIFsnYWNjb3VudE51bWJlcicsIFtWYWxpZGF0b3JzLm1pbkxlbmd0aCgyKSwgVmFsaWRhdG9ycy5tYXhMZW5ndGgoMTAwKV1dLFxuICAgICAgWyduaWNrTmFtZScsIFtWYWxpZGF0b3JzLm1pbkxlbmd0aCgyKSwgVmFsaWRhdG9ycy5tYXhMZW5ndGgoMTAwKV1dLFxuICAgIF0gYXMgW3N0cmluZywgVmFsaWRhdG9yRm5bXV1bXSkuZm9yRWFjaCgoW2NvbnRyb2xOYW1lLCB2YWxpZGF0b3JzXSkgPT4ge1xuICAgICAgY29uc3QgY29udHJvbCA9IHRoaXMucGF5ZWVGb3JtLmdldChjb250cm9sTmFtZSk7XG4gICAgICBpZiAoY29udHJvbCkge1xuICAgICAgICBjb250cm9sLnNldFZhbGlkYXRvcnModmFsaWRhdG9ycyk7XG4gICAgICAgIGNvbnRyb2wudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBmb3JtYXRQaG9uZU51bWJlcihwaG9uZU51bWJlcjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5waG9uZU51bWJlckZvcm1hdHRlci50cmFuc2Zvcm0ocGhvbmVOdW1iZXIsIERFRkFVTFRfQ09VTlRSWV9DT0RFLCB0cnVlKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0dXBQaG9uZU51bWJlckZvcm1hdHRlcihjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpIHtcbiAgICBjb250cm9sLnZhbHVlQ2hhbmdlcy5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBjb250cm9sLnNldFZhbHVlKHRoaXMuZm9ybWF0UGhvbmVOdW1iZXIoY29udHJvbC52YWx1ZSksIHtcbiAgICAgICAgZW1pdEV2ZW50OiBmYWxzZSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLWxnXCI+XG4gIDxzZWN0aW9uIGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgPGZvcm0gI2Zvcm0gZGF0YS1yb2xlPVwibWFudWFsLXBheWVlLWZvcm1cIiAobmdTdWJtaXQpPVwib25TdWJtaXQocGF5ZWVGb3JtKVwiIFtmb3JtR3JvdXBdPVwicGF5ZWVGb3JtXCI+XG4gICAgICA8YmItYWxlcnQtdWlcbiAgICAgICAgKm5nSWY9XCIhZWRpdEZvcm1cIlxuICAgICAgICBtb2RpZmllcj1cIndhcm5pbmdcIlxuICAgICAgICBbdGl0bGVdPVwiXG4gICAgICAgICAgJ1BsZWFzZSBub3RlIHRoYXQgcGF5ZWVzIGVudGVyZWQgbWFudWFsbHkgd2lsbCBoYXZlIGEgbG9uZ2VyIHBheW1lbnQgcHJvY2Vzc2luZyB0aW1lIGFuZCBubyBlQmlsbCBmdW5jdGlvbmFsaXR5J1xuICAgICAgICBcIlxuICAgICAgICBpMThuLXRpdGxlPVwiYWxlcnQgdGl0bGV8Rm9yIGNyZWF0ZSBwYXllZSBmb3JtIGFsZXJ0QEBiaWxscGF5LW1hbnVhbC1wYXllZS1mb3JtLmFsZXJ0XCJcbiAgICAgID5cbiAgICAgIDwvYmItYWxlcnQtdWk+XG4gICAgICA8ZGl2IGNsYXNzPVwiYmItYmxvY2sgYmItYmxvY2stLXhsXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJiYi1mb3JtLWZpZWxkIGJiLWZvcm0tZmllbGQtLW1kXCI+XG4gICAgICAgICAgPGJiLWlucHV0LXRleHQtdWlcbiAgICAgICAgICAgIGZvcm1Db250cm9sTmFtZT1cIm5hbWVcIlxuICAgICAgICAgICAgZGF0YS1yb2xlPVwibmFtZS1pbnB1dFwiXG4gICAgICAgICAgICBsYWJlbD1cIkNvbXBhbnksIG9yZ2FuaXNhdGlvbiBvciBpbmRpdmlkdWFsJ3MgbmFtZVwiXG4gICAgICAgICAgICBpMThuLWxhYmVsPVwibGFiZWx8TGFiZWwgZm9yIGNvbXBhbnksIG9yZ2FuaXNhdGlvbiwgaW5kaXZpZHVhbCdzIG5hbWUgZmllbGRAQGJpbGxwYXktbWFudWFsLXBheWVlLWZvcm0ubmFtZVwiXG4gICAgICAgICAgICBbYXJpYS1kZXNjcmliZWRieV09XCJcbiAgICAgICAgICAgICAgWyduYW1lLScgKyByZXF1aXJlZEVycm9ySWQsICduYW1lLScgKyBtaW5MZW5ndGhFcnJvcklkLCAnbmFtZS0nICsgbWF4bGVuZ3RoRXJyb3JJZF0uam9pbignICcpXG4gICAgICAgICAgICBcIlxuICAgICAgICAgICAgYXV0b2ZvY3VzXG4gICAgICAgICAgPlxuICAgICAgICAgIDwvYmItaW5wdXQtdGV4dC11aT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxiYi1pbnB1dC12YWxpZGF0aW9uLW1lc3NhZ2UtdWlcbiAgICAgICAgICByb2xlPVwiYWxlcnRcIlxuICAgICAgICAgIFtzaG93RXJyb3JzXT1cImhhc0Vycm9yKCduYW1lJywgJ3JlcXVpcmVkJylcIlxuICAgICAgICAgIGkxOG49XCJlcnJvciB0ZXh0fE5hbWUgaXMgcmVxdWlyZWQgZXJyb3IgdGV4dEBAYmlsbHBheS1tYW51YWwtcGF5ZWUtZm9ybS5lcnJvci5uYW1lLXJlcXVpcmVkXCJcbiAgICAgICAgICBkYXRhLXJvbGU9XCJuYW1lLWVycm9yLXJlcXVpcmVkXCJcbiAgICAgICAgICBbbWVzc2FnZUlkXT1cIiduYW1lLScgKyByZXF1aXJlZEVycm9ySWRcIlxuICAgICAgICA+XG4gICAgICAgICAgUGxlYXNlIGVudGVyIGEgbmFtZVxuICAgICAgICA8L2JiLWlucHV0LXZhbGlkYXRpb24tbWVzc2FnZS11aT5cbiAgICAgICAgPGJiLWlucHV0LXZhbGlkYXRpb24tbWVzc2FnZS11aVxuICAgICAgICAgIHJvbGU9XCJhbGVydFwiXG4gICAgICAgICAgW3Nob3dFcnJvcnNdPVwiaGFzRXJyb3IoJ25hbWUnLCAnbWlubGVuZ3RoJylcIlxuICAgICAgICAgIGkxOG49XCJlcnJvciB0ZXh0fE5hbWUgbWlubGVuZ3RoIGVycm9yIHRleHRAQGJpbGxwYXktbWFudWFsLXBheWVlLWZvcm0uZXJyb3IubmFtZS1taW5sZW5ndGhcIlxuICAgICAgICAgIGRhdGEtcm9sZT1cIm5hbWUtZXJyb3ItbWlubGVuZ3RoXCJcbiAgICAgICAgICBbbWVzc2FnZUlkXT1cIiduYW1lLScgKyBtaW5MZW5ndGhFcnJvcklkXCJcbiAgICAgICAgPlxuICAgICAgICAgIE5hbWUgbXVzdCBiZSBhdCBsZWFzdCAyIGNoYXJhY3RlcnNcbiAgICAgICAgPC9iYi1pbnB1dC12YWxpZGF0aW9uLW1lc3NhZ2UtdWk+XG4gICAgICAgIDxiYi1pbnB1dC12YWxpZGF0aW9uLW1lc3NhZ2UtdWlcbiAgICAgICAgICByb2xlPVwiYWxlcnRcIlxuICAgICAgICAgIFtzaG93RXJyb3JzXT1cImhhc0Vycm9yKCduYW1lJywgJ21heGxlbmd0aCcpXCJcbiAgICAgICAgICBpMThuPVwiZXJyb3IgdGV4dHxOYW1lIG1heCBsZW5ndGggZXJyb3IgdGV4dEBAYmlsbHBheS1tYW51YWwtcGF5ZWUtZm9ybS5lcnJvci5uYW1lLW1heGxlbmd0aFwiXG4gICAgICAgICAgZGF0YS1yb2xlPVwibmFtZS1lcnJvci1tYXhsZW5ndGhcIlxuICAgICAgICAgIFttZXNzYWdlSWRdPVwiJ25hbWUtJyArIG1heGxlbmd0aEVycm9ySWRcIlxuICAgICAgICA+XG4gICAgICAgICAgTmFtZSBtYXkgbm90IGJlIG92ZXIgYSBodW5kcmVkIGNoYXJhY3RlcnNcbiAgICAgICAgPC9iYi1pbnB1dC12YWxpZGF0aW9uLW1lc3NhZ2UtdWk+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxiYi1maWVsZHNldC11aVxuICAgICAgICBoZWFkaW5nPVwiUGF5ZWUgY29udGFjdCBkZXRhaWxzXCJcbiAgICAgICAgaTE4bi1oZWFkaW5nPVwiUGF5ZWUgY29udGFjdCBkZXRhaWxzIGhlYWRpbmdAQGJpbGxwYXktbWFudWFsLXBheWVlLWZvcm0ucGF5ZWUtZGV0YWlscy1oZWFkaW5nXCJcbiAgICAgID5cbiAgICAgICAgPGJiLWJpbGxwYXktYWRkcmVzcy1mb3JtIGZvcm1Hcm91cE5hbWU9XCJhZGRyZXNzXCI+PC9iYi1iaWxscGF5LWFkZHJlc3MtZm9ybT5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiYmItYmxvY2sgYmItYmxvY2stLW1kXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJiLWZvcm0tZmllbGQgYmItZm9ybS1maWVsZC0tc21cIj5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJiaWxscGF5LXBob25lLW51bWJlci1pbnB1dFwiIGRhdGEtcm9sZT1cInBob25lLW51bWJlci1sYWJlbFwiPlxuICAgICAgICAgICAgICA8bmctY29udGFpbmVyIGkxOG49XCJsYWJlbHxMYWJlbCBmb3IgcGhvbmUgbnVtYmVyIGZpZWxkQEBiaWxscGF5LW1hbnVhbC1wYXllZS1mb3JtLnBob25lLWxhYmVsXCJcbiAgICAgICAgICAgICAgICA+UGhvbmUgbnVtYmVyJm5ic3A7PC9uZy1jb250YWluZXJcbiAgICAgICAgICAgICAgPjxzcGFuXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJiYi10ZXh0LWRlZmF1bHQgYmItdGV4dC1zdXBwb3J0XCJcbiAgICAgICAgICAgICAgICBpMThuPVwibGFiZWwgb3B0aW9uYWx8TGFiZWwgZm9yIG9wdGlvbmFsIGZpZWxkQEBiaWxscGF5LW1hbnVhbC1wYXllZS1mb3JtLm9wdGlvbmFsLWxhYmVsXCJcbiAgICAgICAgICAgICAgICA+KE9wdGlvbmFsKTwvc3BhblxuICAgICAgICAgICAgICA+PC9sYWJlbFxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcbiAgICAgICAgICAgICAgaWQ9XCJiaWxscGF5LXBob25lLW51bWJlci1pbnB1dFwiXG4gICAgICAgICAgICAgIGZvcm1Db250cm9sTmFtZT1cInBob25lTnVtYmVyXCJcbiAgICAgICAgICAgICAgZGF0YS1yb2xlPVwicGhvbmUtbnVtYmVyLWlucHV0XCJcbiAgICAgICAgICAgICAgW2F0dHIuYXJpYS1kZXNjcmliZWRieV09XCJcbiAgICAgICAgICAgICAgICBbJ2JpbGxwYXktcGhvbmUtbnVtYmVyLWhlbHAtJyArIGhlbHBUZXh0SWQsICdiaWxscGF5LXBob25lLW51bWJlci1oZWxwLScgKyBmb3JtYXRFcnJvcklkXS5qb2luKCcgJylcbiAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgdHlwZT1cInRlbFwiXG4gICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJQaG9uZSBudW1iZXJcIlxuICAgICAgICAgICAgICBpMThuLWFyaWEtbGFiZWw9XCJcbiAgICAgICAgICAgICAgICBhcmlhIGxhYmVsfEFyaWEgbGFiZWwgZm9yIHBob25lIG51bWJlciBmaWVsZEBAYmlsbHBheS1tYW51YWwtcGF5ZWUtZm9ybS5waG9uZS1udW1iZXItYXJpYS1sYWJlbFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBpZD1cInt7ICdiaWxscGF5LXBob25lLW51bWJlci1oZWxwLScgKyBoZWxwVGV4dElkIH19XCJcbiAgICAgICAgICAgIGNsYXNzPVwiYmItc3VidGl0bGUgYmItdGV4dC1zdXBwb3J0XCJcbiAgICAgICAgICAgIGkxOG49XCJsYWJlbHxMYWJlbCBmb3IgcGhvbmUgbnVtYmVyIGZvcm1hdCBpbmZvIG1lc3NhZ2VAQGJpbGxwYXktbWFudWFsLXBheWVlLWZvcm0ucGhvbmUtZm9ybWF0XCJcbiAgICAgICAgICAgIGRhdGEtcm9sZT1cInBob25lLW51bWJlci1oZWxwLXRleHRcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIEZvcm1hdCArMSBYWFggWFhYIFhYWFhcbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPGJiLWlucHV0LXZhbGlkYXRpb24tbWVzc2FnZS11aVxuICAgICAgICAgICAgW21lc3NhZ2VJZF09XCInYmlsbHBheS1waG9uZS1udW1iZXItaGVscC0nICsgZm9ybWF0RXJyb3JJZFwiXG4gICAgICAgICAgICByb2xlPVwiYWxlcnRcIlxuICAgICAgICAgICAgW3Nob3dFcnJvcnNdPVwiaGFzRXJyb3IoJ3Bob25lTnVtYmVyJywgJ3BhdHRlcm4nKVwiXG4gICAgICAgICAgICBpMThuPVwiZXJyb3IgdGV4dHxQaG9uZSBudW1iZXIgZm9ybWF0IGVycm9yIHRleHRAQGJpbGxwYXktbWFudWFsLXBheWVlLWZvcm0uZXJyb3IucGhvbmUtbnVtYmVyLWZvcm1hdFwiXG4gICAgICAgICAgICBkYXRhLXJvbGU9XCJwaG9uZS1udW1iZXItZXJyb3ItcGF0dGVyblwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgUGhvbmUgbnVtYmVyIGZvcm1hdCBzaG91bGQgYmUgKzEgeHh4IHh4eCB4eHh4XG4gICAgICAgICAgPC9iYi1pbnB1dC12YWxpZGF0aW9uLW1lc3NhZ2UtdWk+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJiLWZvcm0tZmllbGQgYmItZm9ybS1maWVsZC0tbWRcIj5cbiAgICAgICAgICAgIDxsYWJlbFxuICAgICAgICAgICAgICBjbGFzcz1cImJiLWxhYmVsXCJcbiAgICAgICAgICAgICAgZGF0YS1yb2xlPVwiYWNjb3VudC1udW1iZXItaW5wdXQtbGFiZWxcIlxuICAgICAgICAgICAgICBbYXR0ci5pZF09XCInYmItYWNjb3VudC1udW1iZXItbGFiZWwnICsgbGFiZWxJZFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxzcGFuIGkxOG49XCJsYWJlbHxMYWJlbCBmb3IgYWNjb3VudCBudW1iZXIgZmllbGRAQGJpbGxwYXktbWFudWFsLXBheWVlLWZvcm0uYWNjb3VudC1udW1iZXItbGFiZWxcIlxuICAgICAgICAgICAgICAgID5BY2NvdW50IG51bWJlcjwvc3BhblxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJiYi10ZXh0LWRlZmF1bHQgYmItdGV4dC1zdXBwb3J0XCJcbiAgICAgICAgICAgICAgICBpMThuPVwibGFiZWwgb3B0aW9uYWx8TGFiZWwgZm9yIG9wdGlvbmFsIHRleHRAQGJpbGxwYXktbWFudWFsLXBheWVlLWZvcm0uYWNjb3VudC1udW1iZXItbGFiZWwtaGVscGVyXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIChPcHRpb25hbCk8L3NwYW5cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDxiYi1pbnB1dC10ZXh0LXVpXG4gICAgICAgICAgICAgIGZvcm1Db250cm9sTmFtZT1cImFjY291bnROdW1iZXJcIlxuICAgICAgICAgICAgICBkYXRhLXJvbGU9XCJhY2NvdW50LW51bWJlci1pbnB1dFwiXG4gICAgICAgICAgICAgIFthcmlhLWxhYmVsbGVkYnldPVwiJ2JiLWFjY291bnQtbnVtYmVyLWxhYmVsJyArIGxhYmVsSWRcIlxuICAgICAgICAgICAgICBbYXJpYS1kZXNjcmliZWRieV09XCJcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAnYWNjb3VudC1udW1iZXItaGVscC0nICsgaGVscFRleHRJZCxcbiAgICAgICAgICAgICAgICAgICdhY2NvdW50LW51bWJlci1oZWxwLScgKyBtaW5MZW5ndGhFcnJvcklkLFxuICAgICAgICAgICAgICAgICAgJ2FjY291bnQtbnVtYmVyLWhlbHAtJyArIG1heGxlbmd0aEVycm9ySWRcbiAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKVxuICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9iYi1pbnB1dC10ZXh0LXVpPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBbaWRdPVwiJ2FjY291bnQtbnVtYmVyLWhlbHAtJyArIGhlbHBUZXh0SWRcIlxuICAgICAgICAgICAgY2xhc3M9XCJiYi1zdWJ0aXRsZSBiYi10ZXh0LXN1cHBvcnRcIlxuICAgICAgICAgICAgaTE4bj1cImxhYmVsfExhYmVsIGZvciBhY2NvdW50IG51bWJlciBpbmZvIG1lc3NhZ2VAQGJpbGxwYXktbWFudWFsLXBheWVlLWZvcm0uYWNjb3VudC1udW1iZXItaW5mb1wiXG4gICAgICAgICAgICBkYXRhLXJvbGU9XCJhY2NvdW50LW51bWJlci1oZWxwLXRleHRcIlxuICAgICAgICAgICAgPklmIHlvdSBoYXZlIGFuIGFjY291bnQgbnVtYmVyIGZvciB0aGlzIHBheWVlLCBlbnRlciBpdCBhcyBpdCBhcHBlYXJzIG9uIHlvdXIgYmlsbFxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8YmItaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlLXVpXG4gICAgICAgICAgICBbbWVzc2FnZUlkXT1cIidhY2NvdW50LW51bWJlci1oZWxwLScgKyBtaW5MZW5ndGhFcnJvcklkXCJcbiAgICAgICAgICAgIHJvbGU9XCJhbGVydFwiXG4gICAgICAgICAgICBbc2hvd0Vycm9yc109XCJoYXNFcnJvcignYWNjb3VudE51bWJlcicsICdtaW5sZW5ndGgnKVwiXG4gICAgICAgICAgICBpMThuPVwiXG4gICAgICAgICAgICAgIGVycm9yIHRleHR8QWNjb3VudCBudW1iZXIgbWlubGVuZ3RoIGVycm9yIHRleHRAQGJpbGxwYXktbWFudWFsLXBheWVlLWZvcm0uZXJyb3IuYWNjb3VudC1udW1iZXItbWlubGVuZ3RoXCJcbiAgICAgICAgICAgIGRhdGEtcm9sZT1cImFjY291bnQtbnVtYmVyLWVycm9yLW1pbmxlbmd0aFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgQWNjb3VudCBudW1iZXIgbXVzdCBiZSBhdCBsZWFzdCAyIGNoYXJhY3RlcnNcbiAgICAgICAgICA8L2JiLWlucHV0LXZhbGlkYXRpb24tbWVzc2FnZS11aT5cbiAgICAgICAgICA8YmItaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlLXVpXG4gICAgICAgICAgICBbbWVzc2FnZUlkXT1cIidhY2NvdW50LW51bWJlci1oZWxwLScgKyBtYXhsZW5ndGhFcnJvcklkXCJcbiAgICAgICAgICAgIHJvbGU9XCJhbGVydFwiXG4gICAgICAgICAgICBbc2hvd0Vycm9yc109XCJoYXNFcnJvcignYWNjb3VudE51bWJlcicsICdtYXhsZW5ndGgnKVwiXG4gICAgICAgICAgICBpMThuPVwiXG4gICAgICAgICAgICAgIGVycm9yIHRleHR8QWNjb3VudCBudW1iZXIgbWF4IGxlbmd0aCBlcnJvciB0ZXh0QEBiaWxscGF5LW1hbnVhbC1wYXllZS1mb3JtLmVycm9yLmFjY291bnQtbnVtYmVyLW1heGxlbmd0aFwiXG4gICAgICAgICAgICBkYXRhLXJvbGU9XCJhY2NvdW50LW51bWJlci1lcnJvci1tYXhsZW5ndGhcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIEFjY291bnQgbnVtYmVyIG1heSBub3QgYmUgb3ZlciBhIGh1bmRyZWQgY2hhcmFjdGVyc1xuICAgICAgICAgIDwvYmItaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlLXVpPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvYmItZmllbGRzZXQtdWk+XG5cbiAgICAgIDxiYi1maWVsZHNldC11aVxuICAgICAgICBoZWFkaW5nPVwiUGF5ZWUgbmlja25hbWVcIlxuICAgICAgICBpMThuLWhlYWRpbmc9XCJQYXllZSBuaWNrbmFtZUBAYmlsbHBheS1tYW51YWwtcGF5ZWUtZm9ybS5wYXllZS1uaWNrbmFtZS1oZWFkaW5nXCJcbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJiLWJsb2NrIGJiLWJsb2NrLS1tZFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJiYi1mb3JtLWZpZWxkIGJiLWZvcm0tZmllbGQtLW1kXCI+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJiYi1sYWJlbFwiIGRhdGEtcm9sZT1cIm5pY2tuYW1lLWlucHV0LWxhYmVsXCIgW2F0dHIuaWRdPVwiJ2JiLW5pY2tuYW1lLWxhYmVsJyArIGxhYmVsSWRcIj5cbiAgICAgICAgICAgICAgPHNwYW4gaTE4bj1cImxhYmVsfExhYmVsIGZvciBwYXllZSBuaWNrbmFtZSBmaWVsZEBAYmlsbHBheS1tYW51YWwtcGF5ZWUtZm9ybS5wYXllZS1uaWNrbmFtZS1sYWJlbFwiXG4gICAgICAgICAgICAgICAgPkNyZWF0ZSBwYXllZSBuaWNrbmFtZVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJiYi10ZXh0LWRlZmF1bHQgYmItdGV4dC1zdXBwb3J0XCJcbiAgICAgICAgICAgICAgICBpMThuPVwibGFiZWwgb3B0aW9uYWx8TGFiZWwgZm9yIG9wdGlvbmFsIHRleHRAQGJpbGxwYXktbWFudWFsLXBheWVlLWZvcm0ucGF5ZWUtbmlja25hbWUtbGFiZWwtaGVscGVyXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIChPcHRpb25hbCk8L3NwYW5cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDxiYi1pbnB1dC10ZXh0LXVpXG4gICAgICAgICAgICAgIGZvcm1Db250cm9sTmFtZT1cIm5pY2tOYW1lXCJcbiAgICAgICAgICAgICAgZGF0YS1yb2xlPVwibmlja25hbWUtaW5wdXRcIlxuICAgICAgICAgICAgICBbYXJpYS1sYWJlbGxlZGJ5XT1cIidiYi1uaWNrbmFtZS1sYWJlbCcgKyBsYWJlbElkXCJcbiAgICAgICAgICAgICAgW2FyaWEtZGVzY3JpYmVkYnldPVwiXG4gICAgICAgICAgICAgICAgWyduaWNrTmFtZS0nICsgaGVscFRleHRJZCwgJ25pY2tOYW1lLScgKyBtaW5MZW5ndGhFcnJvcklkLCAnbmlja05hbWUtJyArIG1heGxlbmd0aEVycm9ySWRdLmpvaW4oJyAnKVxuICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9iYi1pbnB1dC10ZXh0LXVpPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBbaWRdPVwiJ25pY2tOYW1lLScgKyBoZWxwVGV4dElkXCJcbiAgICAgICAgICAgIGNsYXNzPVwiYmItc3VidGl0bGUgYmItdGV4dC1zdXBwb3J0XCJcbiAgICAgICAgICAgIGkxOG49XCJsYWJlbHxMYWJlbCBmb3IgcGF5ZWUgbmlja25hbWUgaW5mbyBtZXNzYWdlQEBiaWxscGF5LW1hbnVhbC1wYXllZS1mb3JtLnBheWVlLW5pY2tuYW1lLWluZm9cIlxuICAgICAgICAgICAgZGF0YS1yb2xlPVwibmlja25hbWUtaGVscC10ZXh0XCJcbiAgICAgICAgICAgID5DaG9vc2UgaG93IHlvdSB3YW50IHRoaXMgcGF5ZWUgdG8gYXBwZWFyIGluIGJpbGwgcGF5LiBUaGlzIGluZm9ybWF0aW9uIGlzIG9ubHkgYXZhaWxhYmxlIHRvIHlvdS48L3NwYW5cbiAgICAgICAgICA+XG4gICAgICAgICAgPGJiLWlucHV0LXZhbGlkYXRpb24tbWVzc2FnZS11aVxuICAgICAgICAgICAgcm9sZT1cImFsZXJ0XCJcbiAgICAgICAgICAgIFtzaG93RXJyb3JzXT1cImhhc0Vycm9yKCduaWNrTmFtZScsICdtaW5sZW5ndGgnKVwiXG4gICAgICAgICAgICBpMThuPVwiZXJyb3IgdGV4dHxOaWNrbmFtZSBtaW4gbGVuZ3RoIGVycm9yIHRleHRAQGJpbGxwYXktbWFudWFsLXBheWVlLWZvcm0uZXJyb3Iubmlja25hbWUtbWlubGVuZ3RoXCJcbiAgICAgICAgICAgIGRhdGEtcm9sZT1cIm5pY2tuYW1lLWVycm9yLW1pbmxlbmd0aFwiXG4gICAgICAgICAgICBbbWVzc2FnZUlkXT1cIiduaWNrTmFtZS0nICsgbWluTGVuZ3RoRXJyb3JJZFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgTmlja25hbWUgbXVzdCBiZSBhdCBsZWFzdCAyIGNoYXJhY3RlcnNcbiAgICAgICAgICA8L2JiLWlucHV0LXZhbGlkYXRpb24tbWVzc2FnZS11aT5cbiAgICAgICAgICA8YmItaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlLXVpXG4gICAgICAgICAgICByb2xlPVwiYWxlcnRcIlxuICAgICAgICAgICAgW3Nob3dFcnJvcnNdPVwiaGFzRXJyb3IoJ25pY2tOYW1lJywgJ21heGxlbmd0aCcpXCJcbiAgICAgICAgICAgIGkxOG49XCJlcnJvciB0ZXh0fE5pY2tuYW1lIG1heCBsZW5ndGggZXJyb3IgdGV4dEBAYmlsbHBheS1tYW51YWwtcGF5ZWUtZm9ybS5lcnJvci5uaWNrbmFtZS1tYXhsZW5ndGhcIlxuICAgICAgICAgICAgZGF0YS1yb2xlPVwibmlja25hbWUtZXJyb3ItbWF4bGVuZ3RoXCJcbiAgICAgICAgICAgIFttZXNzYWdlSWRdPVwiJ25pY2tOYW1lLScgKyBtYXhsZW5ndGhFcnJvcklkXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICBOaWNrbmFtZSBtYXkgbm90IGJlIG92ZXIgYSBodW5kcmVkIGNoYXJhY3RlcnNcbiAgICAgICAgICA8L2JiLWlucHV0LXZhbGlkYXRpb24tbWVzc2FnZS11aT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2JiLWZpZWxkc2V0LXVpPlxuICAgICAgPGRpdiBjbGFzcz1cImJiLWJ1dHRvbi1iYXIgYmItYnV0dG9uLWJhci0tcmV2ZXJzZVwiPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgYmJCdXR0b25cbiAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICBkYXRhLXJvbGU9XCJjb250aW51ZS1idXR0b25cIlxuICAgICAgICAgIGkxOG49XCJMYWJlbCBmb3IgYnV0dG9ufE1hbnVhbCBwYXllZSBjb250aW51ZSBidXR0b25AQGJpbGxwYXktbWFudWFsLXBheWVlLWZvcm0uY29udGludWVcIlxuICAgICAgICAgIGNsYXNzPVwiYmItYnV0dG9uLWJhcl9fYnV0dG9uXCJcbiAgICAgICAgPlxuICAgICAgICAgIENvbnRpbnVlXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgKm5nSWY9XCIhZWRpdEZvcm1cIlxuICAgICAgICAgIGJiQnV0dG9uXG4gICAgICAgICAgZGF0YS1yb2xlPVwiYmFjay1idXR0b25cIlxuICAgICAgICAgIGkxOG49XCJMYWJlbCBmb3IgYnV0dG9ufEZpbmQgYSBkaWZmZXJlbnQgcGF5ZWUgYnV0dG9uQEBiaWxscGF5LW1hbnVhbC1wYXllZS1mb3JtLmZpbmQtZGlmZmVyZW50LXBheWVlXCJcbiAgICAgICAgICAoY2xpY2spPVwidG9TZWFyY2goKVwiXG4gICAgICAgICAgY2xhc3M9XCJiYi1idXR0b24tYmFyX19idXR0b25cIlxuICAgICAgICAgIGNvbG9yPVwic2Vjb25kYXJ5XCJcbiAgICAgICAgPlxuICAgICAgICAgIEZpbmQgYSBkaWZmZXJlbnQgcGF5ZWVcbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBiYkJ1dHRvblxuICAgICAgICAgIGRhdGEtcm9sZT1cImNhbmNlbC1idXR0b25cIlxuICAgICAgICAgIGkxOG49XCJMYWJlbCBmb3IgYnV0dG9ufENhbmNlbCBidXR0b25AQGJpbGxwYXktbWFudWFsLXBheWVlLWZvcm0uY2FuY2VsXCJcbiAgICAgICAgICAoY2xpY2spPVwiY2FuY2VsRm9ybSgpXCJcbiAgICAgICAgICBjbGFzcz1cImJiLWJ1dHRvbi1iYXJfX2J1dHRvbiBiYi1idXR0b24tYmFyX19idXR0b24tLWFjcm9zc1wiXG4gICAgICAgICAgY29sb3I9XCJsaW5rXCJcbiAgICAgICAgPlxuICAgICAgICAgIENhbmNlbFxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZm9ybT5cbiAgPC9zZWN0aW9uPlxuPC9kaXY+XG4iXX0=