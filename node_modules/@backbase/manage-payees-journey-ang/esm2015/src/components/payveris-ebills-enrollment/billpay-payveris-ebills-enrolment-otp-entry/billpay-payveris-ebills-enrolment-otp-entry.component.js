import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { PayverisEnrolmentComponentState } from '../../../model';
import { take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/loading-indicator";
import * as i2 from "@backbase/ui-ang/alert";
import * as i3 from "@backbase/ui-ang/input-text";
import * as i4 from "@backbase/ui-ang/input-validation-message";
import * as i5 from "../billpay-payveris-ebills-enrolment-cancel-modal/billpay-payveris-ebills-enrolment-cancel-modal.component";
import * as i6 from "@angular/common";
import * as i7 from "@angular/forms";
import * as i8 from "@backbase/ui-ang/button";
export class BillpayPayverisEbillsEnrolmentOtpEntryComponent {
    constructor() {
        this.submitted = false;
        this.cancelModalOpen = false;
        this._passcodeFailed = false;
        this.passcodeRecentlyFailed = false;
        this.ComponentStates = PayverisEnrolmentComponentState;
        /**
         * The current state of the component. Controls loaded elements.
         */
        this.componentState = PayverisEnrolmentComponentState.Undefined;
        this.returnToPayeeList = new EventEmitter();
        this.passcodeEntry = new EventEmitter();
        this.passcodeForm = new FormGroup({
            passcode: new FormControl('', Validators.required),
        });
    }
    set passcodeFailed(hasFailed) {
        this._passcodeFailed = hasFailed;
        this.passcodeRecentlyFailed = hasFailed;
        if (hasFailed) {
            this.passcodeForm.controls['passcode'].markAsDirty();
            this.passcodeForm.controls['passcode'].markAsTouched();
            this.passcodeForm.controls['passcode'].setValue('');
            this.passcodeForm.controls['passcode'].valueChanges.pipe(take(1)).subscribe(() => {
                this.passcodeRecentlyFailed = false;
            });
        }
    }
    /**
     * Displays elements for a failed submission. Invalidates passcode form.
     */
    get passcodeFailed() {
        return this._passcodeFailed;
    }
    onPayverisOtpPasscodeSubmit() {
        this.submitted = true;
        if (this.passcodeForm.valid) {
            this.passcodeEntry.emit(this.passcodeForm.value);
        }
    }
    onModalResolve(operationCancelled) {
        this.cancelModalOpen = false;
        if (operationCancelled) {
            this.handleReturnToPayeeList();
        }
    }
    handleReturnToPayeeList() {
        this.returnToPayeeList.emit();
    }
}
BillpayPayverisEbillsEnrolmentOtpEntryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentOtpEntryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPayverisEbillsEnrolmentOtpEntryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayverisEbillsEnrolmentOtpEntryComponent, selector: "bb-billpay-payveris-ebills-enrolment-otp-entry", inputs: { payeeName: "payeeName", optTransportMethod: "optTransportMethod", componentState: "componentState", passcodeFailed: "passcodeFailed" }, outputs: { returnToPayeeList: "returnToPayeeList", passcodeEntry: "passcodeEntry" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"componentState\">\n  <ng-container *ngSwitchCase=\"ComponentStates.Checking\">\n    <bb-loading-indicator-ui\n      text=\"Checking passcode...\"\n      i18n-text=\"\n        Ebill Payveris Enrolment Widget checking otp passcode\n        text@@bb-billpay-ebills-payveris-enrolment-otp-passcode.checking-otp-passcode.text\"\n      loaderSize=\"lg\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Callback\">\n    <bb-loading-indicator-ui\n      text=\"eBill enrolment is taking a little longer than usual, please be patient...\"\n      i18n-text=\"\n        Ebill Payveris Enrolment Widget taking longer than usual\n        text@@bb-billpay-ebills-payveris-enrolment-widget-ang.otp-entry-call-back.text\"\n      loaderSize=\"lg\"\n      data-role=\"payveris-callback-info\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Ready\">\n    <bb-alert-ui\n      *ngIf=\"passcodeFailed\"\n      title=\"The passcode you provided is incorrect. Please try again.\"\n      i18n-title=\"\n        Text for passcode failed alert@@bb-billpay-payveris-ebills-enrolment-otp-passcode.passcode-failed-alert\"\n      data-role=\"payveris-payee-otp-passcode-warning\"\n    >\n    </bb-alert-ui>\n\n    <div\n      class=\"bb-block bb-block--md\"\n      i18n=\"\n        otp passcode prompt|otp passcode prompt for payveris ebill enrolment otp passcode form\n        @@bb-billpay-payveris-ebills-enrolment-otp-passcode.note.otp-passcode-prompt\"\n    >\n      A one-time passocde (OTP) has been sent to {{ optTransportMethod }}.\n    </div>\n\n    <form [formGroup]=\"passcodeForm\" (ngSubmit)=\"onPayverisOtpPasscodeSubmit()\">\n      <div class=\"bb-block bb-block--xl\">\n        <div class=\"bb-form-field bb-form-field--xs\">\n          <bb-input-text-ui\n            name=\"passcode\"\n            label=\"Passcode\"\n            i18n-label=\"\n              otp passcode label|Label for otp passcode on payveris ebill otp passcode form\n              @@bb-billpay-payveris-ebills-enrolment-otp-passcode.label.otp-passcode-label\"\n            data-role=\"payveris-payee-otp-passcode-input\"\n            [maxLength]=\"255\"\n            formControlName=\"passcode\"\n            [autofocus]=\"true\"\n            ngDefaultControl\n          >\n          </bb-input-text-ui>\n        </div>\n\n        <bb-input-validation-message-ui\n          *ngIf=\"passcodeForm.controls['passcode'].invalid && passcodeRecentlyFailed; else submitPasscode\"\n          [showErrors]=\"true\"\n        >\n          <span\n            i18n=\"\n              Incorrect otp passcode warning|Validity warning for otp passcode on payveris ebill enrolment otp passcode\n              form @@bb-billpay-payveris-ebills-enrolment-otp-passcode.warning.otp-passcode-incorrect\"\n          >\n            Incorrect passcode entered\n          </span>\n        </bb-input-validation-message-ui>\n\n        <ng-template #submitPasscode>\n          <bb-input-validation-message-ui [showErrors]=\"submitted && passcodeForm.controls['passcode'].invalid\">\n            <span\n              data-role=\"payveris-payee-otp-passcode-blank-warning\"\n              i18n=\"\n                Empty otp passcode warning|Empty warning for otp passcode on payveris ebill enrolment otp passcode form\n                @@bb-billpay-payveris-ebills-enrolment-otp-passcode.warning.otp-passcode-empty\"\n            >\n              You must submit a passcode\n            </span>\n          </bb-input-validation-message-ui>\n        </ng-template>\n      </div>\n\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          data-role=\"payveris-payee-otp-passcode-continue\"\n          i18n=\"\n            Continue enrolment|Continue enrolment button on payveris ebill enrolment otp-passcode form\n            @@bb-billpay-payveris-ebills-enrolment-otp-passcode.button.continue-enrolment\"\n        >\n          Continue\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"link\"\n          i18n=\"\n            Cancel enrolment|Cancel enrolment button on payveris ebill enrolment otp passcode form\n            @@bb-billpay-payveris-ebills-enrolment-otp-passcode.button.cancel-enrolment\"\n          (click)=\"cancelModalOpen = true\"\n        >\n          Cancel\n        </button>\n      </div>\n    </form>\n  </ng-container>\n</ng-container>\n\n<bb-billpay-payveris-ebills-enrolment-cancel-modal *ngIf=\"cancelModalOpen\" (resolve)=\"onModalResolve($event)\">\n</bb-billpay-payveris-ebills-enrolment-cancel-modal>\n", components: [{ type: i1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i2.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i3.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i4.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i5.BillpayPayverisEbillsEnrolmentCancelModalComponent, selector: "bb-billpay-payveris-ebills-enrolment-cancel-modal", outputs: ["resolve"] }], directives: [{ type: i6.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i6.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i7.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i7.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i8.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentOtpEntryComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payveris-ebills-enrolment-otp-entry',
                    templateUrl: './billpay-payveris-ebills-enrolment-otp-entry.component.html',
                }]
        }], propDecorators: { payeeName: [{
                type: Input
            }], optTransportMethod: [{
                type: Input
            }], componentState: [{
                type: Input
            }], passcodeFailed: [{
                type: Input
            }], returnToPayeeList: [{
                type: Output
            }], passcodeEntry: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,