import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';
import { BillpayUtilityService as Utilities } from '@backbase/billpay-journeys-common';
import { PayverisEnrolmentComponentState } from '../../../model';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/loading-indicator";
import * as i2 from "@backbase/ui-ang/alert";
import * as i3 from "@backbase/ui-ang/input-text";
import * as i4 from "@backbase/ui-ang/input-validation-message";
import * as i5 from "../billpay-payveris-ebills-enrolment-cancel-modal/billpay-payveris-ebills-enrolment-cancel-modal.component";
import * as i6 from "@angular/common";
import * as i7 from "@angular/forms";
import * as i8 from "@backbase/ui-ang/button";
export class BillpayPayverisEbillsEnrolmentMfaEntryComponent {
    constructor() {
        this.submitted = false;
        this.cancelModalOpen = false;
        this.mfaLabel = undefined;
        this.ComponentStates = PayverisEnrolmentComponentState;
        /**
         * The current state of the component. Controls loaded elements.
         */
        this.componentState = PayverisEnrolmentComponentState.Undefined;
        /**
         * Displays elements for a failed submission. Defaults to false.
         */
        this.mfaFailed = false;
        this.returnToPayeeList = new EventEmitter();
        this.mfaEntry = new EventEmitter();
        this.mfaForm = new FormGroup({
            formQuestions: new FormArray([]),
        });
    }
    get formQuestions() {
        return this.mfaForm.get('formQuestions');
    }
    ngOnInit() {
        if (this.mfaArray) {
            this.mfaArray.forEach(() => {
                this.formQuestions.push(new FormControl('', Validators.required));
            });
        }
        this.mfaLabel = Utilities.checkForProperty([0, 'label'], this.mfaArray);
    }
    onMfaSubmit() {
        this.submitted = true;
        if (this.mfaForm.valid) {
            this.mfaEntry.emit();
            this.submitted = false;
        }
    }
    onModalResolve(operationCancelled) {
        this.cancelModalOpen = false;
        if (operationCancelled) {
            this.handleReturnToPayeeList();
        }
    }
    handleReturnToPayeeList() {
        this.returnToPayeeList.emit();
    }
}
BillpayPayverisEbillsEnrolmentMfaEntryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentMfaEntryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPayverisEbillsEnrolmentMfaEntryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayverisEbillsEnrolmentMfaEntryComponent, selector: "bb-billpay-payveris-ebills-enrolment-mfa-entry", inputs: { payeeName: "payeeName", mfaArray: "mfaArray", componentState: "componentState", mfaFailed: "mfaFailed" }, outputs: { returnToPayeeList: "returnToPayeeList", mfaEntry: "mfaEntry" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"componentState\">\n  <ng-container *ngSwitchCase=\"ComponentStates.Checking\">\n    <bb-loading-indicator-ui\n      text=\"Checking answer ...\"\n      i18n-text=\"\n        Checking answer|Ebill Payveris Enrolment Widget checking mfa\n        text@@bb-billpay-ebills-payveris-enrolment-mfa-entry.checking-mfa.text\"\n      loaderSize=\"lg\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Callback\">\n    <bb-loading-indicator-ui\n      text=\"eBill enrolment is taking a little longer than usual, please be patient...\"\n      i18n-text=\"\n        Ebill Payveris Enrolment Widget taking longer than usual\n        text@@bb-billpay-ebills-payveris-enrolment-widget-ang.mfa-call-back.text\"\n      loaderSize=\"lg\"\n      data-role=\"payveris-callback-info\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Ready\">\n    <bb-alert-ui\n      *ngIf=\"mfaFailed\"\n      title=\"The answer you provided is incorrect. Please try again.\"\n      data-role=\"payveris-payee-mfa-warning\"\n      i18n-title=\"Mfa failed alert|Text for mfa failed alert@@bb-billpay-payveris-ebills-enrolment-mfa.mfa-failed-alert\"\n    >\n    </bb-alert-ui>\n\n    <div\n      class=\"bb-block bb-block--lg\"\n      i18n=\"\n        mfa prompt|mfa prompt for payveris ebill enrolment mfa\n        form@@bb-billpay-payveris-ebills-enrolment-mfa.note.mfa-prompt\"\n    >\n      Please answer the following security question(s).\n    </div>\n\n    <form [formGroup]=\"mfaForm\" (ngSubmit)=\"onMfaSubmit()\">\n      <div class=\"bb-block bb-block--xl\" formArrayName=\"formQuestions\">\n        <div *ngFor=\"let mfa of mfaArray; let i = index\" class=\"bb-block bb-block--md\">\n          <bb-input-text-ui\n            class=\"bb-form-field bb-form-field--md\"\n            i18n-label=\"\n              mfa label|Label for mfa on payveris ebill mfa form\n              @@bb-billpay-payveris-ebills-enrolment-mfa.label.mfa-label\"\n            label=\"{{ mfaArray[i].label }}\"\n            data-role=\"payveris-payee-mfa-input\"\n            [required]=\"true\"\n            [maxLength]=\"255\"\n            [formControlName]=\"i\"\n            ngDefaultControl\n            autofocus\n          >\n          </bb-input-text-ui>\n\n          <bb-input-validation-message-ui [showErrors]=\"submitted && formQuestions.controls[i].invalid\">\n            <span\n              data-role=\"payveris-payee-mfa-blank-warning\"\n              i18n=\"\n                mfa warning|Validity warning for mfa on payveris ebill enrolment mfa form\n                @@bb-billpay-payveris-ebills-enrolment-mfa.warning.mfa-warning\"\n            >\n              You must submit an answer\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          data-role=\"payveris-payee-mfa-continue\"\n          i18n=\"\n            Continue enrolment|Continue enrolment button on payveris ebill enrolment mfa form\n            @@bb-billpay-payveris-ebills-enrolment-mfa.button.continue-enrolment\"\n        >\n          Continue\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"link\"\n          (click)=\"cancelModalOpen = true\"\n          i18n=\"\n            Cancel enrolment|Cancel enrolment button on payveris ebill enrolment mfa form\n            @@bb-billpay-payveris-ebills-enrolment-mfa.button.cancel-enrolment\"\n        >\n          Cancel\n        </button>\n      </div>\n    </form>\n  </ng-container>\n</ng-container>\n\n<bb-billpay-payveris-ebills-enrolment-cancel-modal *ngIf=\"cancelModalOpen\" (resolve)=\"onModalResolve($event)\">\n</bb-billpay-payveris-ebills-enrolment-cancel-modal>\n", components: [{ type: i1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i2.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i3.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i4.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i5.BillpayPayverisEbillsEnrolmentCancelModalComponent, selector: "bb-billpay-payveris-ebills-enrolment-cancel-modal", outputs: ["resolve"] }], directives: [{ type: i6.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i6.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i7.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i7.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i7.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentMfaEntryComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payveris-ebills-enrolment-mfa-entry',
                    templateUrl: './billpay-payveris-ebills-enrolment-mfa-entry.component.html',
                }]
        }], propDecorators: { payeeName: [{
                type: Input
            }], mfaArray: [{
                type: Input
            }], componentState: [{
                type: Input
            }], mfaFailed: [{
                type: Input
            }], returnToPayeeList: [{
                type: Output
            }], mfaEntry: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,