import { Component, EventEmitter, Input, Output } from '@angular/core';
import { PayverisEnrolmentComponentState } from '../../../model';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/loading-indicator";
import * as i2 from "@backbase/ui-ang/input-radio-group";
import * as i3 from "@backbase/ui-ang/input-validation-message";
import * as i4 from "../billpay-payveris-ebills-enrolment-cancel-modal/billpay-payveris-ebills-enrolment-cancel-modal.component";
import * as i5 from "@angular/common";
import * as i6 from "@angular/forms";
import * as i7 from "@backbase/ui-ang/button";
export class BillpayPayverisEbillsEnrolmentSelectBillerComponent {
    constructor() {
        /**
         * Array of applicable payee eBillers to pay.
         */
        this.billers = [];
        /**
         * The current state of the component. Controls loaded elements.
         */
        this.componentState = PayverisEnrolmentComponentState.Undefined;
        this.billerSelect = new EventEmitter();
        this.returnToPayeeList = new EventEmitter();
        this.submitted = false;
        this.selectingBiller = false;
        this.cancelModalOpen = false;
        this.ComponentStates = PayverisEnrolmentComponentState;
    }
    ngOnInit() {
        if (this.billers && this.billers.length === 1) {
            this.billerSelectedIndex = 0;
        }
    }
    onSelectBillerSubmit() {
        this.submitted = true;
        if (this.billerSelectedIndex !== undefined) {
            this.selectingBiller = true;
            this.billerSelect.emit(this.billerSelectedIndex);
        }
    }
    noSelectionMade() {
        return this.billerSelectedIndex === undefined;
    }
    onModalResolve(operationCancelled) {
        this.cancelModalOpen = false;
        if (operationCancelled) {
            this.handleReturnToPayeeList();
        }
    }
    handleReturnToPayeeList() {
        this.returnToPayeeList.emit();
    }
}
BillpayPayverisEbillsEnrolmentSelectBillerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentSelectBillerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPayverisEbillsEnrolmentSelectBillerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayverisEbillsEnrolmentSelectBillerComponent, selector: "bb-billpay-payveris-ebills-enrolment-select-biller", inputs: { payeeName: "payeeName", billers: "billers", componentState: "componentState" }, outputs: { billerSelect: "billerSelect", returnToPayeeList: "returnToPayeeList" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"componentState\">\n  <ng-container *ngSwitchCase=\"ComponentStates.Checking\">\n    <bb-loading-indicator-ui\n      text=\"Checking biller selection...\"\n      i18n-text=\"\n        Checking biller selection|Ebill Payveris Enrolment Widget checking biller selection\n        text@@bb-billpay-payveris-ebills-enrolment-select-biller.checking-biller.text\"\n      loaderSize=\"lg\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Callback\">\n    <bb-loading-indicator-ui\n      text=\"eBill enrolment is taking a little longer than usual, please be patient...\"\n      i18n-text=\"\n        eBill enrolment is taking a little longer than usual, please be patient......|Ebill Payveris Enrolment Widget\n        taking longer than usual text@@bb-billpay-ebills-payveris-enrolment-widget-ang.select-biller-call-back.text\"\n      loaderSize=\"lg\"\n      data-role=\"payveris-callback-info\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Ready\">\n    <div\n      id=\"bb-select-biller\"\n      i18n=\"\n        Biller select prompt|Biller select prompt for payveris ebill enrolment biller select form\n        @@bb-billpay-payveris-ebills-enrolment-select-biller.note.biller-select-prompt\"\n    >\n      Select the biller you would like to get eBills for.\n    </div>\n\n    <form name=\"selectBillerForm\" #f=\"ngForm\" (ngSubmit)=\"onSelectBillerSubmit()\">\n      <!-- lg is chosen as the last element of `bb-input-radio-ui` has 8px bottom margin totalling 32px -->\n      <div class=\"bb-block bb-block--lg\">\n        <bb-input-radio-group-ui\n          name=\"billerID\"\n          id=\"billerID\"\n          aria-labelledby=\"bb-select-biller\"\n          [preselect]=\"false\"\n          [required]=\"true\"\n          [(ngModel)]=\"billerSelectedIndex\"\n          #billerID=\"ngModel\"\n          ngDefaultControl\n        >\n          <bb-input-radio-ui *ngFor=\"let biller of billers; let i = index\" value=\"{{ i }}\" label=\"{{ biller.value }}\">\n          </bb-input-radio-ui>\n        </bb-input-radio-group-ui>\n\n        <bb-input-validation-message-ui\n          [showErrors]=\"submitted && noSelectionMade()\"\n          i18n=\"\n            Select biller warning|Warning on payveris ebill enrolment select biller form\n            @@bb-billpay-payveris-ebills-enrolment-select-biller.warning.select-biller-warning\"\n          data-role=\"payveris-payee-select-biller-multiple-no-selection-warning\"\n        >\n          You must select a biller.\n        </bb-input-validation-message-ui>\n      </div>\n\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          i18n=\"\n            Continue from biller selection|Continue from biller selection button on payveris ebill enrolment biller\n            select form @@bb-billpay-payveris-ebills-enrolment-select-biller.button.continue-from-billers\"\n          data-role=\"payveris-payee-select-biller-continue\"\n        >\n          Continue\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"link\"\n          (click)=\"cancelModalOpen = true\"\n          i18n=\"\n            Cancel enrolment multiple billers|Cancel enrolment button on payveris ebill enrolment multiple biller select\n            form @@bb-billpay-payveris-ebills-enrolment-select-biller.button.cancel-enrolment-multiple-billers\"\n        >\n          Cancel\n        </button>\n      </div>\n    </form>\n  </ng-container>\n</ng-container>\n\n<bb-billpay-payveris-ebills-enrolment-cancel-modal *ngIf=\"cancelModalOpen\" (resolve)=\"onModalResolve($event)\">\n</bb-billpay-payveris-ebills-enrolment-cancel-modal>\n", components: [{ type: i1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i2.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4.BillpayPayverisEbillsEnrolmentCancelModalComponent, selector: "bb-billpay-payveris-ebills-enrolment-cancel-modal", outputs: ["resolve"] }], directives: [{ type: i5.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i6.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i6.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i6.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i6.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentSelectBillerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payveris-ebills-enrolment-select-biller',
                    templateUrl: './billpay-payveris-ebills-enrolment-select-biller.component.html',
                }]
        }], propDecorators: { payeeName: [{
                type: Input
            }], billers: [{
                type: Input
            }], componentState: [{
                type: Input
            }], billerSelect: [{
                type: Output
            }], returnToPayeeList: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,