import { Component, Output, EventEmitter, Input } from '@angular/core';
import { PayverisEnrolmentComponentState } from '../../../model';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/loading-indicator";
import * as i2 from "@backbase/ui-ang/input-radio-group";
import * as i3 from "@backbase/ui-ang/input-validation-message";
import * as i4 from "../billpay-payveris-ebills-enrolment-cancel-modal/billpay-payveris-ebills-enrolment-cancel-modal.component";
import * as i5 from "@angular/common";
import * as i6 from "@angular/forms";
import * as i7 from "@backbase/ui-ang/button";
export class BillpayPayverisEbillsEnrolmentSelectAccountComponent {
    constructor() {
        /**
         * Array of biller accounts.
         */
        this.accounts = [];
        /**
         * The current state of the component. Controls loaded elements.
         */
        this.componentState = PayverisEnrolmentComponentState.Undefined;
        this.accountSelect = new EventEmitter();
        this.returnToPayeeList = new EventEmitter();
        this.submitted = false;
        this.cancelModalOpen = false;
        this.ComponentStates = PayverisEnrolmentComponentState;
    }
    ngOnInit() {
        if (this.accounts && this.accounts.length === 1) {
            this.accountSelectedIndex = 0;
        }
    }
    onSelectAccountSubmit() {
        this.submitted = true;
        if (this.accountSelectedIndex !== undefined) {
            this.accountSelect.emit(this.accountSelectedIndex);
        }
    }
    noSelectionMade() {
        return this.accountSelectedIndex === undefined;
    }
    onModalResolve(operationCancelled) {
        this.cancelModalOpen = false;
        if (operationCancelled) {
            this.handleReturnToPayeeList();
        }
    }
    handleReturnToPayeeList() {
        this.returnToPayeeList.emit();
    }
}
BillpayPayverisEbillsEnrolmentSelectAccountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentSelectAccountComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPayverisEbillsEnrolmentSelectAccountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayverisEbillsEnrolmentSelectAccountComponent, selector: "bb-billpay-payveris-ebills-enrolment-select-account", inputs: { payeeName: "payeeName", accounts: "accounts", componentState: "componentState" }, outputs: { accountSelect: "accountSelect", returnToPayeeList: "returnToPayeeList" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"componentState\">\n  <ng-container *ngSwitchCase=\"ComponentStates.Checking\">\n    <bb-loading-indicator-ui\n      text=\"Checking account...\"\n      i18n-text=\"\n        Checking account...|Ebill Payveris Enrolment Widget checking account\n        text@@bb-billpay-ebills-payveris-enrolment-widget-ang.checking-account.text\"\n      loaderSize=\"lg\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Callback\">\n    <bb-loading-indicator-ui\n      text=\"eBill enrolment is taking a little longer than usual, please be patient...\"\n      i18n-text=\"\n        eBill enrolment is taking a little longer than usual, please be patient...|Ebill Payveris Enrolment Widget\n        taking longer than usual text@@bb-billpay-ebills-payveris-enrolment-widget-ang.select-account-call-back.text\"\n      loaderSize=\"lg\"\n      data-role=\"payveris-callback-info\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Ready\">\n    <ng-container *ngIf=\"accounts.length > 1\">\n      <div\n        i18n=\"\n          Account select prompt|Account select prompt for payveris ebill enrolment account select form\n          @@bb-billpay-payveris-ebills-enrolment-select-account.note.account-select-prompt\"\n      >\n        There are multiple accounts associated with this login ID. Please choose the correct one.\n      </div>\n\n      <form name=\"selectAccountForm\" #f=\"ngForm\" (ngSubmit)=\"onSelectAccountSubmit()\">\n        <div class=\"bb-block bb-block--lg\">\n          <bb-input-radio-group-ui\n            name=\"accountID\"\n            id=\"accountID\"\n            aria-labelledby=\"bb-select-account\"\n            [preselect]=\"false\"\n            [required]=\"true\"\n            [(ngModel)]=\"accountSelectedIndex\"\n            #accountID=\"ngModel\"\n          >\n            <bb-input-radio-ui\n              *ngFor=\"let account of accounts; let i = index\"\n              value=\"{{ i }}\"\n              label=\"{{ account.value }}\"\n            >\n            </bb-input-radio-ui>\n          </bb-input-radio-group-ui>\n\n          <bb-input-validation-message-ui [showErrors]=\"submitted && noSelectionMade()\">\n            <span\n              i18n=\"\n                Select account warning|Warning on payveris ebill enrolment select account form\n                @@bb-billpay-payveris-ebills-enrolment-select-account.warning.select-account-warning\"\n              data-role=\"payveris-payee-select-account-multiple-no-selection-warning\"\n            >\n              You must select an account.\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n\n        <div class=\"bb-button-bar bb-button-bar--reverse\">\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            type=\"submit\"\n            i18n=\"\n              Enable ebills multiple accounts|Enable ebills button on payveris ebill enrolment multiple account select\n              form @@bb-billpay-payveris-ebills-enrolment-select-account.button.enable-ebills-multiple-accounts\"\n            data-role=\"payveris-payee-select-account-multiple-enable-ebills\"\n          >\n            Enable eBills\n          </button>\n\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            color=\"link\"\n            (click)=\"cancelModalOpen = true\"\n            i18n=\"\n              Cancel enrolment multiple accounts|Cancel enrolment button on payveris ebill enrolment multiple account\n              select form\n              @@bb-billpay-payveris-ebills-enrolment-select-account.button.cancel-enrolment-multiple-accounts\"\n          >\n            Cancel\n          </button>\n        </div>\n      </form>\n    </ng-container>\n\n    <ng-container *ngIf=\"accounts.length === 1\">\n      <div\n        class=\"bb-block bb-block--lg\"\n        i18n=\"\n          Check single account prompt|Check single account prompt on payveris ebill enrolment single account select form\n          @@bb-billpay-payveris-ebills-enrolment-select-account.button.check-single-account-prompt\"\n        data-role=\"payveris-payee-select-account-single-prompt\"\n      >\n        Please check your account details to ensure you receive the correct bills for this payee.\n      </div>\n\n      <div\n        class=\"bb-block bb-block--xl\"\n        i18n=\"\n          Check single account sub-header|Check single account sub-header on payveris ebill enrolment single account\n          select form @@bb-billpay-payveris-ebills-enrolment-select-account.button.check-single-account-sub-header\"\n      >\n        {{ accounts[0].value }}\n      </div>\n\n      <form name=\"selectAccountForm\" #f=\"ngForm\" (ngSubmit)=\"onSelectAccountSubmit()\">\n        <div class=\"bb-button-bar bb-button-bar--reverse\">\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            type=\"submit\"\n            i18n=\"\n              Enable ebills single account|Enable ebills button on payveris ebill enrolment single account select form\n              @@bb-billpay-payveris-ebills-enrolment-select-account.button.enable-ebills-single-account\"\n            data-role=\"payveris-payee-select-account-single-enable-ebills\"\n          >\n            Enable eBills\n          </button>\n\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            color=\"link\"\n            (click)=\"cancelModalOpen = true\"\n            i18n=\"\n              Cancel enrolment single account|Cancel enrolment button on payveris ebill enrolment single account select\n              form @@bb-billpay-payveris-ebills-enrolment-select-account.button.cancel-enrolment-single-account\"\n          >\n            Cancel\n          </button>\n        </div>\n      </form>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<bb-billpay-payveris-ebills-enrolment-cancel-modal *ngIf=\"cancelModalOpen\" (resolve)=\"onModalResolve($event)\">\n</bb-billpay-payveris-ebills-enrolment-cancel-modal>\n", components: [{ type: i1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i2.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4.BillpayPayverisEbillsEnrolmentCancelModalComponent, selector: "bb-billpay-payveris-ebills-enrolment-cancel-modal", outputs: ["resolve"] }], directives: [{ type: i5.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i6.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i6.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentSelectAccountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payveris-ebills-enrolment-select-account',
                    templateUrl: './billpay-payveris-ebills-enrolment-select-account.component.html',
                }]
        }], propDecorators: { payeeName: [{
                type: Input
            }], accounts: [{
                type: Input
            }], componentState: [{
                type: Input
            }], accountSelect: [{
                type: Output
            }], returnToPayeeList: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,