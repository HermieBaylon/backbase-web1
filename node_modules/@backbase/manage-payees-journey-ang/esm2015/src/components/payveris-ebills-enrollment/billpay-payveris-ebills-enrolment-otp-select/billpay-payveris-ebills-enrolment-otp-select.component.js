import { Component, EventEmitter, Input, Output } from '@angular/core';
import { PayverisEnrolmentComponentState } from '../../../model';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/loading-indicator";
import * as i2 from "@backbase/ui-ang/input-radio-group";
import * as i3 from "@backbase/ui-ang/input-validation-message";
import * as i4 from "../billpay-payveris-ebills-enrolment-cancel-modal/billpay-payveris-ebills-enrolment-cancel-modal.component";
import * as i5 from "@angular/common";
import * as i6 from "@angular/forms";
import * as i7 from "@backbase/ui-ang/button";
export class BillpayPayverisEbillsEnrolmentOtpSelectComponent {
    constructor() {
        this.submitted = false;
        this.cancelModalOpen = false;
        this.ComponentStates = PayverisEnrolmentComponentState;
        /**
         * Array of OTP transport methods.
         */
        this.transports = [];
        /**
         * The current state of the component. Controls loaded elements.
         */
        this.componentState = PayverisEnrolmentComponentState.Undefined;
        this.transportSelect = new EventEmitter();
        this.returnToPayeeList = new EventEmitter();
    }
    ngOnInit() {
        if (this.transports && this.transports.length === 1) {
            this.transportSelectedIndex = 0;
        }
    }
    onSelectTransportSubmit() {
        this.submitted = true;
        if (this.transportSelectedIndex !== undefined) {
            this.transportSelect.emit(this.transportSelectedIndex);
        }
    }
    noSelectionMade() {
        return this.transportSelectedIndex === undefined;
    }
    onModalResolve(operationCancelled) {
        this.cancelModalOpen = false;
        if (operationCancelled) {
            this.handleReturnToPayeeList();
        }
    }
    handleReturnToPayeeList() {
        this.returnToPayeeList.emit();
    }
}
BillpayPayverisEbillsEnrolmentOtpSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentOtpSelectComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BillpayPayverisEbillsEnrolmentOtpSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayverisEbillsEnrolmentOtpSelectComponent, selector: "bb-billpay-payveris-ebills-enrolment-otp-select", inputs: { payeeName: "payeeName", transports: "transports", componentState: "componentState" }, outputs: { transportSelect: "transportSelect", returnToPayeeList: "returnToPayeeList" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"componentState\">\n  <ng-container *ngSwitchCase=\"ComponentStates.Checking\">\n    <bb-loading-indicator-ui\n      text=\"Submitting selection...\"\n      i18n-text=\"\n        Submitting selection|Ebill Payveris Enrolment Widget submitting otp selection\n        text@@bb-billpay-ebills-payveris-enrolment-otp-select.submit-otp-selection.text\"\n      loaderSize=\"lg\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Callback\">\n    <bb-loading-indicator-ui\n      text=\"eBill enrolment is taking a little longer than usual, please be patient...\"\n      i18n-text=\"\n        eBill enrolment is taking a little longer than usual, please be patient...|Ebill Payveris Enrolment Widget\n        taking longer than usual text@@bb-billpay-ebills-payveris-enrolment-widget-ang.otp-select-call-back.text\"\n      loaderSize=\"lg\"\n      data-role=\"payveris-callback-info\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Ready\">\n    <ng-container *ngIf=\"transports.length > 1\">\n      <div\n        class=\"bb-block bb-block--sm\"\n        i18n=\"\n          Transport select prompt|Transport select prompt for payveris ebill enrolment transport select form\n          @@bb-billpay-payveris-ebills-enrolment-select-transport.note.transport-select-prompt\"\n      >\n        A one-time passcode (OTP) is required to verify your identity. Please select how you would like to receive it.\n      </div>\n\n      <form name=\"selectTransportForm\" #f=\"ngForm\" (ngSubmit)=\"onSelectTransportSubmit()\">\n        <div class=\"bb-block bb-block--lg\">\n          <bb-input-radio-group-ui\n            name=\"transportID\"\n            id=\"transportID\"\n            aria-labelledby=\"bb-select-transport\"\n            [required]=\"true\"\n            [preselect]=\"false\"\n            [(ngModel)]=\"transportSelectedIndex\"\n            #transportID=\"ngModel\"\n            ngDefaultControl\n          >\n            <bb-input-radio-ui\n              *ngFor=\"let transport of transports; let i = index\"\n              value=\"{{ i }}\"\n              label=\"{{ transport.value }}\"\n              i18n-label=\"\n                Transport type of one-time-passcode radio\n                button@@bb-billpay-payveris-ebills-enrolment-select-transport.radio.label\"\n            >\n            </bb-input-radio-ui>\n          </bb-input-radio-group-ui>\n\n          <bb-input-validation-message-ui [showErrors]=\"submitted && noSelectionMade()\">\n            <span\n              data-role=\"payveris-payee-select-transport-multiple-no-selection-warning\"\n              i18n=\"\n                Select transport warning|Warning on payveris ebill enrolment select transport form\n                @@bb-billpay-payveris-ebills-enrolment-select-transport.warning.select-transport-warning\"\n            >\n              You must select a passcode destination.\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n\n        <div class=\"bb-button-bar bb-button-bar--reverse\">\n          <button\n            class=\"bb-button-bar__button\"\n            bbButton\n            type=\"submit\"\n            i18n=\"\n              Continue from multiple transports|Continue button on payveris ebill enrolment multiple transports select\n              form @@bb-billpay-payveris-ebills-enrolment-select-transports.button.continue-multiple-transports\"\n            data-role=\"payveris-payee-select-transports-multiple-continue\"\n          >\n            Continue\n          </button>\n\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            color=\"link\"\n            (click)=\"cancelModalOpen = true\"\n            i18n=\"\n              Cancel enrolment multiple transports|Cancel enrolment button on payveris ebill enrolment multiple\n              transports select form\n              @@bb-billpay-payveris-ebills-enrolment-select-transport.button.cancel-enrolment-multiple-transports\"\n          >\n            Cancel\n          </button>\n        </div>\n      </form>\n    </ng-container>\n\n    <ng-container *ngIf=\"transports.length === 1\">\n      <div\n        class=\"bb-block bb-block--lg\"\n        i18n=\"\n          Check single transport prompt|Check single transport prompt on payveris ebill enrolment single transport\n          select form @@bb-billpay-payveris-ebills-enrolment-select-transport.button.check-single-transport-prompt\"\n        data-role=\"payveris-payee-select-transport-single-prompt\"\n      >\n        A one-time passcode (OTP) is required to verify your identity. Please confirm the delivery method.\n      </div>\n\n      <div\n        class=\"bb-block bb-block--xl\"\n        i18n=\"\n          Check single transport sub-header|Check single transport sub-header on payveris ebill enrolment single\n          transport select form\n          @@bb-billpay-payveris-ebills-enrolment-select-transport.button.check-single-transport-sub-header\"\n      >\n        {{ transports[0].value }}\n      </div>\n\n      <form name=\"selectTransportForm\" #f=\"ngForm\" (ngSubmit)=\"onSelectTransportSubmit()\">\n        <div class=\"bb-button-bar bb-button-bar--reverse\">\n          <button\n            bbButton\n            type=\"submit\"\n            class=\"bb-button-bar__button\"\n            i18n=\"\n              Continue from single transport|Continue ebills button on payveris ebill enrolment single transport select\n              form @@bb-billpay-payveris-ebills-enrolment-select-transport.button.continue-single-transport\"\n            data-role=\"payveris-payee-select-transport-single-continue\"\n          >\n            Continue\n          </button>\n\n          <button\n            bbButton\n            color=\"link\"\n            (click)=\"cancelModalOpen = true\"\n            class=\"bb-button-bar__button\"\n            i18n=\"\n              Cancel enrolment single transport|Cancel enrolment button on payveris ebill enrolment single transport\n              select form\n              @@bb-billpay-payveris-ebills-enrolment-select-transport.button.cancel-enrolment-single-transport\"\n          >\n            Cancel\n          </button>\n        </div>\n      </form>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<bb-billpay-payveris-ebills-enrolment-cancel-modal *ngIf=\"cancelModalOpen\" (resolve)=\"onModalResolve($event)\">\n</bb-billpay-payveris-ebills-enrolment-cancel-modal>\n", components: [{ type: i1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i2.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4.BillpayPayverisEbillsEnrolmentCancelModalComponent, selector: "bb-billpay-payveris-ebills-enrolment-cancel-modal", outputs: ["resolve"] }], directives: [{ type: i5.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i6.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i6.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i6.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentOtpSelectComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payveris-ebills-enrolment-otp-select',
                    templateUrl: './billpay-payveris-ebills-enrolment-otp-select.component.html',
                }]
        }], propDecorators: { payeeName: [{
                type: Input
            }], transports: [{
                type: Input
            }], componentState: [{
                type: Input
            }], transportSelect: [{
                type: Output
            }], returnToPayeeList: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,