import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { PayverisEnrolmentComponentState } from '../../../model';
import { take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "@backbase/ui-ang/loading-indicator";
import * as i3 from "@backbase/ui-ang/alert";
import * as i4 from "@backbase/ui-ang/input-text";
import * as i5 from "@backbase/ui-ang/input-validation-message";
import * as i6 from "../billpay-payveris-ebills-enrolment-cancel-modal/billpay-payveris-ebills-enrolment-cancel-modal.component";
import * as i7 from "@angular/common";
import * as i8 from "@angular/forms";
import * as i9 from "@backbase/ui-ang/button";
export class BillpayPayverisEbillsEnrolmentCaptchaComponent {
    /** @internal */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.imageSrcRaw = '';
        this.submitted = false;
        this.cancelModalOpen = false;
        this._captchaFailed = false;
        this.captchaRecentlyFailed = false;
        this.ComponentStates = PayverisEnrolmentComponentState;
        /**
         * The current state of the component. Controls loaded elements.
         */
        this.componentState = PayverisEnrolmentComponentState.Undefined;
        this.returnToPayeeList = new EventEmitter();
        this.captchaEntry = new EventEmitter();
        this.captchaForm = new FormGroup({
            captcha: new FormControl('', Validators.required),
        });
    }
    set captchaFailed(hasFailed) {
        this._captchaFailed = hasFailed;
        this.captchaRecentlyFailed = hasFailed;
        if (hasFailed) {
            this.captchaForm.controls['captcha'].markAsDirty();
            this.captchaForm.controls['captcha'].markAsTouched();
            this.captchaForm.controls['captcha'].setValue('');
            this.captchaForm.controls['captcha'].valueChanges.pipe(take(1)).subscribe(() => {
                this.captchaRecentlyFailed = false;
            });
        }
    }
    ngOnInit() {
        const imageType = this.captchaImageType || '';
        const imageSrc = this.captchaImageSrc || '';
        this.imageSrcRaw = `data:${imageType};base64,${imageSrc}`;
        this.imageSrcData = this.sanitizer.bypassSecurityTrustResourceUrl(this.imageSrcRaw);
    }
    /**
     * @return _captchaFailed. Displays elements for a failed submission. Invalidates captcha form.
     */
    get captchaFailed() {
        return this._captchaFailed;
    }
    onCaptchaSubmit() {
        this.submitted = true;
        if (this.captchaForm.valid) {
            this.captchaEntry.emit(this.captchaForm.value);
        }
    }
    onModalResolve(operationCancelled) {
        this.cancelModalOpen = false;
        if (operationCancelled) {
            this.handleReturnToPayeeList();
        }
    }
    handleReturnToPayeeList() {
        this.returnToPayeeList.emit();
    }
}
BillpayPayverisEbillsEnrolmentCaptchaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentCaptchaComponent, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
BillpayPayverisEbillsEnrolmentCaptchaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BillpayPayverisEbillsEnrolmentCaptchaComponent, selector: "bb-billpay-payveris-ebills-enrolment-captcha", inputs: { payeeName: "payeeName", captchaImageType: "captchaImageType", captchaImageSrc: "captchaImageSrc", componentState: "componentState", captchaFailed: "captchaFailed" }, outputs: { returnToPayeeList: "returnToPayeeList", captchaEntry: "captchaEntry" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"componentState\">\n  <ng-container *ngSwitchCase=\"ComponentStates.Checking\">\n    <bb-loading-indicator-ui\n      text=\"Checking text...\"\n      i18n-text=\"\n        Ebill Payveris Enrolment Widget checking captcha text\n        text@@bb-billpay-ebills-payveris-enrolment-captcha-ang.checking-captcha-text.text\"\n      loaderSize=\"lg\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Callback\">\n    <bb-loading-indicator-ui\n      text=\"eBill enrolment is taking a little longer than usual, please be patient...\"\n      i18n-text=\"\n        Ebill Payveris Enrolment Widget taking longer than usual\n        text@@bb-billpay-ebills-payveris-enrolment-widget-ang.captcha-call-back.text\"\n      loaderSize=\"lg\"\n      data-role=\"payveris-callback-info\"\n    ></bb-loading-indicator-ui>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"ComponentStates.Ready\">\n    <bb-alert-ui\n      *ngIf=\"captchaFailed\"\n      title=\"The text you provided is incorrect. Please try again.\"\n      i18n-title=\"\n        Captcha failed alert|Text for captcha failed\n        alert@@bb-billpay-payveris-ebills-enrolment-captcha.captcha-failed-alert\"\n      data-role=\"payveris-payee-captcha-warning\"\n    >\n    </bb-alert-ui>\n\n    <div\n      class=\"bb-block bb-block--lg\"\n      i18n=\"\n        captcha prompt|captcha prompt for payveris ebill enrolment captcha form\n        @@bb-billpay-payveris-ebills-enrolment-captcha.note.captcha-prompt\"\n    >\n      Type the characters you see in this image.\n    </div>\n\n    <div class=\"bb-block bb-block--lg\">\n      <img\n        role=\"img\"\n        aria-label=\"Captcha image\"\n        i18n-aria-label=\"Captcha image aria-label@@bb-billpay-payveris-ebills-enrolment-captcha.img.captcha-img\"\n        [src]=\"imageSrcData\"\n        alt=\"Captcha image for payee.\"\n        i18n-alt=\"\n          Catcha image|Catcha image for payveris ebill enrolment captcha form\n          @@bb-billpay-payveris-ebills-enrolment-captcha.image.captcha-image\"\n      />\n    </div>\n\n    <form [formGroup]=\"captchaForm\" (ngSubmit)=\"onCaptchaSubmit()\">\n      <div class=\"bb-block bb-block--xl\">\n        <bb-input-text-ui\n          class=\"bb-form-field bb-form-field--xs\"\n          name=\"captcha\"\n          i18n-label=\"\n            captcha label|Label for captcha on payveris ebill captcha form\n            @@bb-billpay-payveris-ebills-enrolment-captcha.label.captcha-label\"\n          label=\"Type characters\"\n          data-role=\"payveris-payee-captcha-input\"\n          [required]=\"true\"\n          [maxLength]=\"255\"\n          formControlName=\"captcha\"\n          [autofocus]=\"true\"\n          ngDefaultControl\n        >\n        </bb-input-text-ui>\n\n        <bb-input-validation-message-ui\n          *ngIf=\"captchaForm.controls['captcha'].invalid && captchaRecentlyFailed; else submitCaptcha\"\n          [showErrors]=\"true\"\n        >\n          <span\n            i18n=\"\n              Incorrect captcha warning|Validity warning for captcha on payveris ebill enrolment captcha\n              form@@bb-billpay-payveris-ebills-enrolment-captcha.warning.captcha-incorrect\"\n          >\n            Incorrect captcha entered\n          </span>\n        </bb-input-validation-message-ui>\n\n        <ng-template #submitCaptcha>\n          <bb-input-validation-message-ui [showErrors]=\"submitted && captchaForm.controls['captcha'].invalid\">\n            <span\n              data-role=\"payveris-payee-captcha-blank-warning\"\n              i18n=\"\n                Empty captcha warning|Empty warning for captcha on payveris ebill enrolment captcha\n                form@@bb-billpay-payveris-ebills-enrolment-captcha.warning.captcha-empty\"\n            >\n              Please enter the captcha text shown\n            </span>\n          </bb-input-validation-message-ui>\n        </ng-template>\n      </div>\n\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          data-role=\"payveris-payee-captcha-continue\"\n          i18n=\"\n            Continue enrolment|Continue enrolment button on payveris ebill enrolment captcha form\n            @@bb-billpay-payveris-ebills-enrolment-captcha.button.continue-enrolment\"\n        >\n          Continue\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"link\"\n          (click)=\"cancelModalOpen = true\"\n          i18n=\"\n            Cancel enrolment|Cancel enrolment button on payveris ebill enrolment captcha form\n            @@bb-billpay-payveris-ebills-enrolment-captcha.button.cancel-enrolment\"\n        >\n          Cancel\n        </button>\n      </div>\n    </form>\n  </ng-container>\n</ng-container>\n\n<bb-billpay-payveris-ebills-enrolment-cancel-modal *ngIf=\"cancelModalOpen\" (resolve)=\"onModalResolve($event)\">\n</bb-billpay-payveris-ebills-enrolment-cancel-modal>\n", components: [{ type: i2.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i3.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i4.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i5.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i6.BillpayPayverisEbillsEnrolmentCancelModalComponent, selector: "bb-billpay-payveris-ebills-enrolment-cancel-modal", outputs: ["resolve"] }], directives: [{ type: i7.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i7.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i8.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i8.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i8.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i9.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentCaptchaComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payveris-ebills-enrolment-captcha',
                    templateUrl: './billpay-payveris-ebills-enrolment-captcha.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; }, propDecorators: { payeeName: [{
                type: Input
            }], captchaImageType: [{
                type: Input
            }], captchaImageSrc: [{
                type: Input
            }], componentState: [{
                type: Input
            }], captchaFailed: [{
                type: Input
            }], returnToPayeeList: [{
                type: Output
            }], captchaEntry: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,