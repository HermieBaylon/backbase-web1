import { Injectable, Optional } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./manage-payees-journey-config.service";
import * as i3 from "../communication.service";
export class ManagePayeesNavigationService {
    constructor(router, route, config, communicationService) {
        this.router = router;
        this.route = route;
        this.config = config;
        this.communicationService = communicationService;
        this.defaultRelative = { relativeTo: this.route };
    }
    navigateToPayeeList(extras) {
        var _a;
        if (this.config.multipleBillsMode) {
            (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToMultiplePaymentsForm();
        }
        else {
            this.router.navigate(['./'], extras || this.defaultRelative);
        }
    }
    navigateToSearch(extras) {
        this.router.navigate(['payees'], extras || this.defaultRelative);
    }
    navigateToManualPayeeForm(extras) {
        this.router.navigate(['payees/manual'], extras || this.defaultRelative);
    }
    navigateToManualPayeeReview(extras) {
        this.router.navigate(['payees/manual/review'], extras || this.defaultRelative);
    }
    navigateToEditManualPayeeForm(id, extras) {
        this.router.navigate(['payees/manual', 'edit', id], extras || this.defaultRelative);
    }
    navigateToEditManualReview(id, extras) {
        this.router.navigate(['payees/manual/edit', id, 'review'], extras || this.defaultRelative);
    }
    navigateToElectronicPayeeForm(id, extras) {
        this.router.navigate(['payees/electronic', id], Object.assign(Object.assign({}, this.defaultRelative), extras));
    }
    navigateToElectronicPayeeReview(id, extras) {
        this.router.navigate(['payees/electronic', id, 'review'], Object.assign(Object.assign({}, this.defaultRelative), extras));
    }
    navigateToEditElectronicPayeeForm(id, extras) {
        this.router.navigate(['payees/electronic', 'edit', id], extras || this.defaultRelative);
    }
    navigateToEditElectronicPayeeReview(id, extras) {
        this.router.navigate(['payees/electronic', 'edit', id, 'review'], extras || this.defaultRelative);
    }
    navigateToPayeeSummary(payeeID, extras) {
        this.router.navigate(['payee-summary', { payeeID }], extras || this.defaultRelative);
    }
    navigateToPayveris(payeeID, extras) {
        this.router.navigate(['ebills', { payeeID }], extras || this.defaultRelative);
    }
    // External Navigations
    navigateToRecurringPayment(id) {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToRecurringPayment(id);
    }
    navigateToOneOffPayment(id) {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToOneOffPayment(id);
    }
    navigateToPendingPayments() {
        var _a;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.navigateToPaymentsList();
    }
}
ManagePayeesNavigationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesNavigationService, deps: [{ token: i1.Router }, { token: i1.ActivatedRoute }, { token: i2.ManagePayeesJourneyConfigService }, { token: i3.CommunicationService, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ManagePayeesNavigationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesNavigationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePayeesNavigationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i1.ActivatedRoute }, { type: i2.ManagePayeesJourneyConfigService }, { type: i3.CommunicationService, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlLXBheWVlcy1uYXZpZ2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL21hbmFnZS1wYXllZXMtam91cm5leS9zcmMvc2VydmljZXMvbWFuYWdlLXBheWVlcy1uYXZpZ2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7O0FBTXJELE1BQU0sT0FBTyw2QkFBNkI7SUFHeEMsWUFDbUIsTUFBYyxFQUNkLEtBQXFCLEVBQzlCLE1BQXdDLEVBQzVCLG9CQUEwQztRQUg3QyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFDOUIsV0FBTSxHQUFOLE1BQU0sQ0FBa0M7UUFDNUIseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUU5RCxJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNwRCxDQUFDO0lBRUQsbUJBQW1CLENBQUMsTUFBeUI7O1FBQzNDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRTtZQUNqQyxNQUFBLElBQUksQ0FBQyxvQkFBb0IsMENBQUUsOEJBQThCLEVBQUUsQ0FBQztTQUM3RDthQUFNO1lBQ0wsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQzlEO0lBQ0gsQ0FBQztJQUVELGdCQUFnQixDQUFDLE1BQXlCO1FBQ3hDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQseUJBQXlCLENBQUMs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LDZCQUE2QjtrQkFEekMsVUFBVTs7MEJBUU4sUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgTmF2aWdhdGlvbkV4dHJhcywgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IENvbW11bmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vY29tbXVuaWNhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IE1hbmFnZVBheWVlc0pvdXJuZXlDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi9tYW5hZ2UtcGF5ZWVzLWpvdXJuZXktY29uZmlnLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTWFuYWdlUGF5ZWVzTmF2aWdhdGlvblNlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IGRlZmF1bHRSZWxhdGl2ZTogTmF2aWdhdGlvbkV4dHJhcztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgIHByaXZhdGUgY29uZmlnOiBNYW5hZ2VQYXllZXNKb3VybmV5Q29uZmlnU2VydmljZSxcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGNvbW11bmljYXRpb25TZXJ2aWNlOiBDb21tdW5pY2F0aW9uU2VydmljZSxcbiAgKSB7XG4gICAgdGhpcy5kZWZhdWx0UmVsYXRpdmUgPSB7IHJlbGF0aXZlVG86IHRoaXMucm91dGUgfTtcbiAgfVxuXG4gIG5hdmlnYXRlVG9QYXllZUxpc3QoZXh0cmFzPzogTmF2aWdhdGlvbkV4dHJhcykge1xuICAgIGlmICh0aGlzLmNvbmZpZy5tdWx0aXBsZUJpbGxzTW9kZSkge1xuICAgICAgdGhpcy5jb21tdW5pY2F0aW9uU2VydmljZT8ubmF2aWdhdGVUb011bHRpcGxlUGF5bWVudHNGb3JtKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnLi8nXSwgZXh0cmFzIHx8IHRoaXMuZGVmYXVsdFJlbGF0aXZlKTtcbiAgICB9XG4gIH1cblxuICBuYXZpZ2F0ZVRvU2VhcmNoKGV4dHJhcz86IE5hdmlnYXRpb25FeHRyYXMpIHtcbiAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJ3BheWVlcyddLCBleHRyYXMgfHwgdGhpcy5kZWZhdWx0UmVsYXRpdmUpO1xuICB9XG5cbiAgbmF2aWdhdGVUb01hbnVhbFBheWVlRm9ybShleHRyYXM/OiBOYXZpZ2F0aW9uRXh0cmFzKSB7XG4gICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWydwYXllZXMvbWFudWFsJ10sIGV4dHJhcyB8fCB0aGlzLmRlZmF1bHRSZWxhdGl2ZSk7XG4gIH1cblxuICBuYXZpZ2F0ZVRvTWFudWFsUGF5ZWVSZXZpZXcoZXh0cmFzPzogTmF2aWdhdGlvbkV4dHJhcykge1xuICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsncGF5ZWVzL21hbnVhbC9yZXZpZXcnXSwgZXh0cmFzIHx8IHRoaXMuZGVmYXVsdFJlbGF0aXZlKTtcbiAgfVxuXG4gIG5hdmlnYXRlVG9FZGl0TWFudWFsUGF5ZWVGb3JtKGlkOiBzdHJpbmcsIGV4dHJhcz86IE5hdmlnYXRpb25FeHRyYXMpIHtcbiAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJ3BheWVlcy9tYW51YWwnLCAnZWRpdCcsIGlkXSwgZXh0cmFzIHx8IHRoaXMuZGVmYXVsdFJlbGF0aXZlKTtcbiAgfVxuXG4gIG5hdmlnYXRlVG9FZGl0TWFudWFsUmV2aWV3KGlkOiBzdHJpbmcsIGV4dHJhcz86IE5hdmlnYXRpb25FeHRyYXMpIHtcbiAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJ3BheWVlcy9tYW51YWwvZWRpdCcsIGlkLCAncmV2aWV3J10sIGV4dHJhcyB8fCB0aGlzLmRlZmF1bHRSZWxhdGl2ZSk7XG4gIH1cblxuICBuYXZpZ2F0ZVRvRWxlY3Ryb25pY1BheWVlRm9ybShpZDogc3RyaW5nLCBleHRyYXM/OiBOYXZpZ2F0aW9uRXh0cmFzKSB7XG4gICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWydwYXllZXMvZWxlY3Ryb25pYycsIGlkXSwgeyAuLi50aGlzLmRlZmF1bHRSZWxhdGl2ZSwgLi4uZXh0cmFzIH0pO1xuICB9XG5cbiAgbmF2aWdhdGVUb0VsZWN0cm9uaWNQYXllZVJldmlldyhpZDogc3RyaW5nLCBleHRyYXM/OiBOYXZpZ2F0aW9uRXh0cmFzKSB7XG4gICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWydwYXllZXMvZWxlY3Ryb25pYycsIGlkLCAncmV2aWV3J10sIHsgLi4udGhpcy5kZWZhdWx0UmVsYXRpdmUsIC4uLmV4dHJhcyB9KTtcbiAgfVxuXG4gIG5hdmlnYXRlVG9FZGl0RWxlY3Ryb25pY1BheWVlRm9ybShpZDogc3RyaW5nLCBleHRyYXM/OiBOYXZpZ2F0aW9uRXh0cmFzKSB7XG4gICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWydwYXllZXMvZWxlY3Ryb25pYycsICdlZGl0JywgaWRdLCBleHRyYXMgfHwgdGhpcy5kZWZhdWx0UmVsYXRpdmUpO1xuICB9XG5cbiAgbmF2aWdhdGVUb0VkaXRFbGVjdHJvbmljUGF5ZWVSZXZpZXcoaWQ6IHN0cmluZywgZXh0cmFzPzogTmF2aWdhdGlvbkV4dHJhcykge1xuICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsncGF5ZWVzL2VsZWN0cm9uaWMnLCAnZWRpdCcsIGlkLCAncmV2aWV3J10sIGV4dHJhcyB8fCB0aGlzLmRlZmF1bHRSZWxhdGl2ZSk7XG4gIH1cblxuICBuYXZpZ2F0ZVRvUGF5ZWVTdW1tYXJ5KHBheWVlSUQ6IHN0cmluZywgZXh0cmFzPzogTmF2aWdhdGlvbkV4dHJhcykge1xuICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsncGF5ZWUtc3VtbWFyeScsIHsgcGF5ZWVJRCB9XSwgZXh0cmFzIHx8IHRoaXMuZGVmYXVsdFJlbGF0aXZlKTtcbiAgfVxuXG4gIG5hdmlnYXRlVG9QYXl2ZXJpcyhwYXllZUlEOiBzdHJpbmcsIGV4dHJhcz86IE5hdmlnYXRpb25FeHRyYXMpIHtcbiAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJ2ViaWxscycsIHsgcGF5ZWVJRCB9XSwgZXh0cmFzIHx8IHRoaXMuZGVmYXVsdFJlbGF0aXZlKTtcbiAgfVxuXG4gIC8vIEV4dGVybmFsIE5hdmlnYXRpb25zXG4gIG5hdmlnYXRlVG9SZWN1cnJpbmdQYXltZW50KGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNvbW11bmljYXRpb25TZXJ2aWNlPy5uYXZpZ2F0ZVRvUmVjdXJyaW5nUGF5bWVudChpZCk7XG4gIH1cbiAgbmF2aWdhdGVUb09uZU9mZlBheW1lbnQoaWQ6IHN0cmluZykge1xuICAgIHRoaXMuY29tbXVuaWNhdGlvblNlcnZpY2U/Lm5hdmlnYXRlVG9PbmVPZmZQYXltZW50KGlkKTtcbiAgfVxuICBuYXZpZ2F0ZVRvUGVuZGluZ1BheW1lbnRzKCkge1xuICAgIHRoaXMuY29tbXVuaWNhdGlvblNlcnZpY2U/Lm5hdmlnYXRlVG9QYXltZW50c0xpc3QoKTtcbiAgfVxufVxuIl19