import { Injectable } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { catchError, pluck } from 'rxjs/operators';
import { BillpayUtilityService as Utilities } from '@backbase/billpay-journeys-common';
import { PayverisEnrolmentState } from '../model/payveris-enrolment-state.enum';
import { PayverisEnrolmentComponentState } from '../model';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/billpay";
export class BillpayPayverisEbillsEnrolmentWidgetService {
    /** @internal */
    constructor(payverisData, payeesData) {
        this.payverisData = payverisData;
        this.payeesData = payeesData;
        this.widgetStateSource = new Subject();
        this._currentState = PayverisEnrolmentState.Initialize;
        this._componentState = PayverisEnrolmentComponentState.Undefined;
        this._userInputFailed = false;
        this._responses = {};
        this._expectingLoginResponse = true;
        this._expectingOtpEntryResponse = false;
        this._MIN_CALLBACK_TIME = 1;
        this.widgetStateChange = this.widgetStateSource.asObservable();
        this.credentialsResponse = (value) => {
            this._responses.credentialsResponse = value;
        };
        this._payload = {
            payeeID: this._payeeId,
            credentials: [],
        };
    }
    submitPayverisRequest(payload) {
        this._componentState = PayverisEnrolmentComponentState.Checking;
        this._userInputFailed = false;
        return this.payverisData
            .postBillPayPayverisEbillsEnrolment({ billPayPayverisEbillsEnrolmentPostRequestBody: payload }, 'response')
            .pipe(catchError(err => {
            this.handleError(err);
            return new Observable();
        }));
    }
    getPayeeNameFromID(id) {
        return this.payeesData.getElectronicPayeeById({ id: id }).pipe(pluck('payee', 'name'));
    }
    onInitializeEnrolment() {
        if (this._payeeId) {
            this._payload = {
                payeeID: this._payeeId,
                credentials: [],
            };
        }
        else {
            this.handleError(undefined);
            return false;
        }
        this.submitPayverisRequest(this._payload).subscribe(response => {
            this.handleStatusResponse(response);
        });
        return true;
    }
    handleStatusResponse(response) {
        if (this.isBillersResponse(response)) {
            return this.setState(PayverisEnrolmentState.SelectBiller, response, 'billersResponse');
        }
        if (this.isSelectAccountResponse(response)) {
            return this.setState(PayverisEnrolmentState.SelectAccounts, response, 'accountsResponse');
        }
        if (this.isOtpSelectResponse(response)) {
            return this.setState(PayverisEnrolmentState.OtpSelect, response, 'otpTransportResponse');
        }
        if (this.isCaptchaResponse(response)) {
            return this.setState(PayverisEnrolmentState.Captcha, response, 'captchaResponse');
        }
        if (this.isCredentialsResponse(response)) {
            return this.handleCredentialsOnStatusResponse(response);
        }
        if (this.isCallbackResponse(response)) {
            return this.handleCallbackResponse(response);
        }
        if (this.isSuccessResponse(response)) {
            return this.setState(PayverisEnrolmentState.Success);
        }
        this.handleError(undefined);
        return false;
    }
    handleCredentialsOnStatusResponse(response) {
        if (this._expectingLoginResponse) {
            this._expectingLoginResponse = false;
            return this.setState(PayverisEnrolmentState.Login, response, 'credentialsResponse');
        }
        if (this._expectingOtpEntryResponse) {
            this._expectingOtpEntryResponse = false;
            return this.setState(PayverisEnrolmentState.OtpEntry, response, 'otpPasscodeResponse');
        }
        return this.setState(PayverisEnrolmentState.Mfa, response, 'mfaResponse');
    }
    onSubmitBillerSelection(billerSelectedIndex) {
        const billerSelected = this.billers ? this.billers[billerSelectedIndex] : {};
        this._payload = {
            payeeID: this._payeeId,
            biller: billerSelected,
            credentials: [],
        };
        this.submitPayverisRequest(this._payload).subscribe(response => {
            this.handleBillerResponse(response);
        });
    }
    handleBillerResponse(response) {
        if (this.isCredentialsResponse(response)) {
            return this.setState(PayverisEnrolmentState.Login, response, 'credentialsResponse');
        }
        if (this.isCallbackResponse(response)) {
            return this.handleCallbackResponse(response);
        }
        this.handleError(undefined);
        return false;
    }
    onSubmitPayeeLogin(login) {
        var _a;
        if (login && this.loginCredentialsArray && this.loginCredentialsArray.length >= 2) {
            const credentials = (_a = this.loginCredentialsArray) === null || _a === void 0 ? void 0 : _a.map((credentials, i) => {
                return Object.assign(Object.assign({}, credentials), { value: login[i] });
            });
            this._payload = {
                payeeID: this._payeeId,
                credentials: credentials,
            };
        }
        else {
            this.handleError(undefined);
        }
        this.submitPayverisRequest(this._payload).subscribe(response => {
            this.handleCredentialResponse(response);
        });
    }
    handleCredentialResponse(response) {
        if (this.isOtpSelectResponse(response)) {
            return this.setState(PayverisEnrolmentState.OtpSelect, response, 'otpTransportResponse');
        }
        if (this.isCaptchaResponse(response)) {
            return this.setState(PayverisEnrolmentState.Captcha, response, 'captchaResponse');
        }
        if (this.isCredentialsResponse(response)) {
            return this.setState(PayverisEnrolmentState.Mfa, response, 'mfaResponse');
        }
        if (this.isSelectAccountResponse(response)) {
            return this.setState(PayverisEnrolmentState.SelectAccounts, response, 'accountsResponse');
        }
        if (this.isCallbackResponse(response)) {
            return this.handleCallbackResponse(response);
        }
        this.handleError(undefined);
        return false;
    }
    onSubmitPayverisEbillMfa() {
        this._payload = {
            payeeID: this._payeeId,
            credentials: this.mfaArray || [],
        };
        this.submitPayverisRequest(this._payload).subscribe(response => {
            this.handleMfaResponse(response);
        });
    }
    handleMfaResponse(response) {
        if (this.isCredentialsResponse(response)) {
            return this.setState(PayverisEnrolmentState.Mfa, response, 'mfaResponse');
        }
        if (this.isSelectAccountResponse(response)) {
            return this.setState(PayverisEnrolmentState.SelectAccounts, response, 'accountsResponse');
        }
        if (this.isCallbackResponse(response)) {
            return this.handleCallbackResponse(response);
        }
        this.handleError(undefined);
        return false;
    }
    onSubmitPayverisEbillOtpTransportSelection(transportSelectedIndex) {
        this._expectingOtpEntryResponse = true;
        const transportSelected = this.otpTransports ? this.otpTransports[transportSelectedIndex] : {};
        this._otpTransportMethodSelected = transportSelected.value;
        const label = this.getLabelFromResponse(this._responses['otpTransportResponse']);
        const selection = {
            label: label,
            value: transportSelected.id,
        };
        this._payload = {
            payeeID: this._payeeId,
            credentials: [selection],
        };
        this.submitPayverisRequest(this._payload).subscribe(response => {
            this.handleOtpTransportResponse(response);
        });
    }
    handleOtpTransportResponse(response) {
        if (this.isCredentialsResponse(response)) {
            return this.setState(PayverisEnrolmentState.OtpEntry, response, 'otpPasscodeResponse');
        }
        if (this.isCallbackResponse(response)) {
            return this.handleCallbackResponse(response);
        }
        this.handleError(undefined);
        return false;
    }
    onSubmitPayverisEbillPayeeOtpPasscode(passcode) {
        this.submitVerificationStep(this._responses['otpPasscodeResponse'], passcode.passcode);
    }
    onSubmitPayverisEbillPayeeCaptcha(captcha) {
        this.submitVerificationStep(this._responses['captchaResponse'], captcha.captcha);
    }
    submitVerificationStep(previousResponse, credentialValue) {
        this._payload = this.prepareCredentialPayload(previousResponse, credentialValue);
        this.submitPayverisRequest(this._payload).subscribe(response => {
            this.handleVerificationResponse(response);
        });
    }
    prepareCredentialPayload(response, credentialValue) {
        const label = this.getLabelFromResponse(response);
        const selection = {
            label: label,
            value: credentialValue,
        };
        return {
            payeeID: this.payeeId,
            credentials: [selection],
        };
    }
    handleVerificationResponse(response) {
        if (this.isSelectAccountResponse(response)) {
            return this.setState(PayverisEnrolmentState.SelectAccounts, response, 'accountsResponse');
        }
        if (this.isCallbackResponse(response)) {
            return this.handleCallbackResponse(response);
        }
        this.handleError(undefined);
        return false;
    }
    cancelEnrolment() {
        return this.payverisData.deleteBillPayPayverisEbillsEnrolment(this._payload);
    }
    onSubmitPayverisEbillAccountSelection(accountSelectedIndex) {
        const accountSelected = this.accounts ? this.accounts[accountSelectedIndex] : undefined;
        this._payload = {
            payeeID: this._payeeId,
            account: accountSelected,
            credentials: [],
        };
        this.submitPayverisRequest(this._payload).subscribe(response => {
            this.handleAccountsResponse(response);
        });
    }
    handleAccountsResponse(response) {
        if (this.isCallbackResponse(response)) {
            return this.handleCallbackResponse(response);
        }
        if (this.isSuccessResponse(response)) {
            return this.setState(PayverisEnrolmentState.Success, response, 'successResponse');
        }
        this.handleError(undefined);
        return false;
    }
    handleCallbackResponse(response) {
        const callbackTime = Utilities.checkForProperty('body.callBackTime', response) || 0;
        const callbackTimeInMs = Math.max(new Date(callbackTime).getTime() - new Date().getTime(), this._MIN_CALLBACK_TIME);
        this.timer = setTimeout(() => {
            this.onInitializeEnrolment();
        }, callbackTimeInMs);
        this._componentState = PayverisEnrolmentComponentState.Callback;
        this.widgetStateSource.next();
        return true;
    }
    cancelCallback() {
        if (this.timer) {
            clearTimeout(this.timer);
        }
    }
    setState(state, response, responseToSet) {
        this._currentState = state;
        this._componentState = PayverisEnrolmentComponentState.Ready;
        if (responseToSet) {
            this._responses[responseToSet] = Utilities.checkForProperty('body', response);
        }
        this.widgetStateSource.next();
        return true;
    }
    handleError(error) {
        this._errorState = Utilities.checkForProperty(['error', 'errors', 0, 'key'], error);
        if (this._errorState === 'billpay.api.invalidCredentials') {
            this._userInputFailed = true;
            this._componentState = PayverisEnrolmentComponentState.Ready;
            this.widgetStateSource.next();
        }
        else {
            this.setState(PayverisEnrolmentState.ErrorState);
        }
    }
    isCredentialsResponse(response) {
        return !!(response.status === 200 && Utilities.checkForProperty('body.authentication.credentials.length', response) > 0);
    }
    isBillersResponse(response) {
        return !!(response.status === 200 && Utilities.checkForProperty('body.billers.length', response) > 0);
    }
    isCallbackResponse(response) {
        const accounts = Utilities.checkForProperty('body.accounts', response);
        return !!(response.status === 200 &&
            (!accounts || accounts.length === 0) &&
            Utilities.checkForProperty('body.callBackRequired', response) &&
            Utilities.checkForProperty('body.callBackTime', response));
    }
    isSelectAccountResponse(response) {
        return !!(response.status === 200 && Utilities.checkForProperty('body.accounts.length', response) >= 1);
    }
    isOtpSelectResponse(response) {
        return !!(response.status === 200 &&
            Utilities.checkForProperty('body.authentication.securityChallenge.oneTimePasscode', response));
    }
    isCaptchaResponse(response) {
        return !!(response.status === 200 &&
            Utilities.checkForProperty('body.authentication.securityChallenge.captcha', response) &&
            Utilities.checkForProperty('body.authentication.credentials', response));
    }
    isSuccessResponse(response) {
        return !!(response.status === 200 && Utilities.checkForProperty('body.payeeID', response));
    }
    getLabelFromResponse(response) {
        return Utilities.checkForProperty(['authentication', 'credentials', 0, 'label'], response);
    }
    set payeeId(value) {
        this._payeeId = value;
    }
    get payeeId() {
        return this._payeeId;
    }
    get currentState() {
        return this._currentState;
    }
    get errorState() {
        return this._errorState;
    }
    get componentState() {
        return this._componentState;
    }
    set componentState(value) {
        this._componentState = value;
    }
    get userInputFailed() {
        return this._userInputFailed;
    }
    get loginCredentialsArray() {
        return Utilities.checkForProperty('credentialsResponse.authentication.credentials', this._responses) || [];
    }
    get mfaArray() {
        return Utilities.checkForProperty('mfaResponse.authentication.credentials', this._responses) || [];
    }
    get billers() {
        return Utilities.checkForProperty('billersResponse.billers', this._responses) || [];
    }
    get accounts() {
        return Utilities.checkForProperty('accountsResponse.accounts', this._responses) || [];
    }
    get otpTransportMethodSelected() {
        return this._otpTransportMethodSelected;
    }
    checkForPropertyWrapper(propertyBranch) {
        return Utilities.checkForProperty(propertyBranch, this._responses);
    }
    get otpTransports() {
        return this.checkForPropertyWrapper('otpTransportResponse.authentication.securityChallenge.oneTimePasscode.deliveryMethods');
    }
    get captchaImageSrc() {
        return this.checkForPropertyWrapper('captchaResponse.authentication.securityChallenge.captcha.image');
    }
    get captchaImageType() {
        return this.checkForPropertyWrapper('captchaResponse.authentication.securityChallenge.captcha.mimeType');
    }
}
BillpayPayverisEbillsEnrolmentWidgetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentWidgetService, deps: [{ token: i1.BillPayPayverisService }, { token: i1.BillPayPayeesService }], target: i0.ɵɵFactoryTarget.Injectable });
BillpayPayverisEbillsEnrolmentWidgetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentWidgetService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayverisEbillsEnrolmentWidgetService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.BillPayPayverisService }, { type: i1.BillPayPayeesService }]; } });
//# sourceMappingURL=data:application/json;base64,