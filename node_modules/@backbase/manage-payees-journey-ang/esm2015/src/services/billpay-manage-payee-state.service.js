import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
export class BillpayManagePayeeStateService {
    constructor() {
        this.manualPayeeStateSource$ = new BehaviorSubject(undefined);
        this.manualPayeeFormState = this.manualPayeeStateSource$.asObservable();
        this.electronicPayeeStateSource = new BehaviorSubject(undefined);
        this.electronicPayeeFormState = this.electronicPayeeStateSource.asObservable();
        this.isFormProcessing = false;
    }
    setManualPayee(state) {
        this.manualPayeeStateSource$.next(state);
    }
    toManualFormState(data) {
        return Object.assign(Object.assign({ name: data.name, address: data.address, phoneNumber: data.phoneNumber || '' }, (data.accountNumber && { accountNumber: data.accountNumber })), (data.nickName && { nickName: data.nickName }));
    }
    resetManualPayee() {
        this.setManualPayee();
    }
    setElectronicPayee(state) {
        this.electronicPayeeStateSource.next(state);
    }
    resetElectronicPayee() {
        this.setElectronicPayee();
    }
    electronicGetResponseToForm(payeeResponse) {
        const { name, nickName, accountNumber } = payeeResponse.payee;
        return {
            name,
            nickName,
            accountNumber,
        };
    }
}
BillpayManagePayeeStateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManagePayeeStateService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
BillpayManagePayeeStateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManagePayeeStateService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManagePayeeStateService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbHBheS1tYW5hZ2UtcGF5ZWUtc3RhdGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbWFuYWdlLXBheWVlcy1qb3VybmV5L3NyYy9zZXJ2aWNlcy9iaWxscGF5LW1hbmFnZS1wYXllZS1zdGF0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQzs7QUFNbkQsTUFBTSxPQUFPLDhCQUE4QjtJQUQzQztRQUVtQiw0QkFBdUIsR0FBRyxJQUFJLGVBQWUsQ0FBbUMsU0FBUyxDQUFDLENBQUM7UUFDbkcseUJBQW9CLEdBRXpCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUUvQiwrQkFBMEIsR0FBRyxJQUFJLGVBQWUsQ0FBa0MsU0FBUyxDQUFDLENBQUM7UUFDckcsNkJBQXdCLEdBRTdCLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUVuRCxxQkFBZ0IsR0FBRyxLQUFLLENBQUM7S0FxQzFCO0lBbkNDLGNBQWMsQ0FBQyxLQUE0QjtRQUN6QyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxJQUFXO1FBQzNCLHFDQUNFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUNmLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUNyQixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsSUFBSSxFQUFFLElBQ2hDLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsR0FDN0QsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUNqRDtJQUNKLENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELGtCQUFrQixDQUFDLEtBQTJCO1FBQzVDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELG9CQUFvQjtRQUNsQixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsMkJBQTJCLENBQUMsYUFBaUQ7UUFDM0UsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUU5RCxPQUFPO1lBQ0wsSUFBSTtZQUNKLFFBQVE7WUFDUixhQUFhO1NBQ2QsQ0FBQztJQUNKLENBQUM7OzRIQS9DVSw4QkFBOEI7Z0lBQTlCLDhCQUE4Qjs0RkFBOUIsOEJBQThCO2tCQUQxQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQYXllZSwgRWxlY3Ryb25pY1BheWVlQnlJZEdldFJlc3BvbnNlQm9keSB9IGZyb20gJ0BiYWNrYmFzZS9kYXRhLWFuZy9iaWxscGF5JztcblxuaW1wb3J0IHsgTWFudWFsUGF5ZWVGb3JtU3RhdGUsIEVsZWN0cm9uaWNQYXllZUZvcm0gfSBmcm9tICcuLi9tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCaWxscGF5TWFuYWdlUGF5ZWVTdGF0ZVNlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IG1hbnVhbFBheWVlU3RhdGVTb3VyY2UkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxNYW51YWxQYXllZUZvcm1TdGF0ZSB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcbiAgcmVhZG9ubHkgbWFudWFsUGF5ZWVGb3JtU3RhdGU6IE9ic2VydmFibGU8XG4gICAgTWFudWFsUGF5ZWVGb3JtU3RhdGUgfCB1bmRlZmluZWRcbiAgPiA9IHRoaXMubWFudWFsUGF5ZWVTdGF0ZVNvdXJjZSQuYXNPYnNlcnZhYmxlKCk7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBlbGVjdHJvbmljUGF5ZWVTdGF0ZVNvdXJjZSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8RWxlY3Ryb25pY1BheWVlRm9ybSB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcbiAgcmVhZG9ubHkgZWxlY3Ryb25pY1BheWVlRm9ybVN0YXRlOiBPYnNlcnZhYmxlPFxuICAgIEVsZWN0cm9uaWNQYXllZUZvcm0gfCB1bmRlZmluZWRcbiAgPiA9IHRoaXMuZWxlY3Ryb25pY1BheWVlU3RhdGVTb3VyY2UuYXNPYnNlcnZhYmxlKCk7XG5cbiAgaXNGb3JtUHJvY2Vzc2luZyA9IGZhbHNlO1xuXG4gIHNldE1hbnVhbFBheWVlKHN0YXRlPzogTWFudWFsUGF5ZWVGb3JtU3RhdGUpIHtcbiAgICB0aGlzLm1hbnVhbFBheWVlU3RhdGVTb3VyY2UkLm5leHQoc3RhdGUpO1xuICB9XG5cbiAgdG9NYW51YWxGb3JtU3RhdGUoZGF0YTogUGF5ZWUpOiBNYW51YWxQYXllZUZvcm1TdGF0ZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGRhdGEubmFtZSxcbiAgICAgIGFkZHJlc3M6IGRhdGEuYWRkcmVzcyxcbiAgICAgIHBob25lTnVtYmVyOiBkYXRhLnBob25lTnVtYmVyIHx8ICcnLFxuICAgICAgLi4uKGRhdGEuYWNjb3VudE51bWJlciAmJiB7IGFjY291bnROdW1iZXI6IGRhdGEuYWNjb3VudE51bWJlciB9KSxcbiAgICAgIC4uLihkYXRhLm5pY2tOYW1lICYmIHsgbmlja05hbWU6IGRhdGEubmlja05hbWUgfSksXG4gICAgfTtcbiAgfVxuXG4gIHJlc2V0TWFudWFsUGF5ZWUoKSB7XG4gICAgdGhpcy5zZXRNYW51YWxQYXllZSgpO1xuICB9XG5cbiAgc2V0RWxlY3Ryb25pY1BheWVlKHN0YXRlPzogRWxlY3Ryb25pY1BheWVlRm9ybSkge1xuICAgIHRoaXMuZWxlY3Ryb25pY1BheWVlU3RhdGVTb3VyY2UubmV4dChzdGF0ZSk7XG4gIH1cblxuICByZXNldEVsZWN0cm9uaWNQYXllZSgpIHtcbiAgICB0aGlzLnNldEVsZWN0cm9uaWNQYXllZSgpO1xuICB9XG5cbiAgZWxlY3Ryb25pY0dldFJlc3BvbnNlVG9Gb3JtKHBheWVlUmVzcG9uc2U6IEVsZWN0cm9uaWNQYXllZUJ5SWRHZXRSZXNwb25zZUJvZHkpOiBFbGVjdHJvbmljUGF5ZWVGb3JtIHtcbiAgICBjb25zdCB7IG5hbWUsIG5pY2tOYW1lLCBhY2NvdW50TnVtYmVyIH0gPSBwYXllZVJlc3BvbnNlLnBheWVlO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWUsXG4gICAgICBuaWNrTmFtZSxcbiAgICAgIGFjY291bnROdW1iZXIsXG4gICAgfTtcbiAgfVxufVxuIl19