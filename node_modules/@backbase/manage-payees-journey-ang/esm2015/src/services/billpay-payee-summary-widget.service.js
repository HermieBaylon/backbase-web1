import { Injectable } from '@angular/core';
import { catchError, map, tap } from 'rxjs/operators';
import { BehaviorSubject, EMPTY } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/billpay";
export const defaultDeleteParams = {
    cancelPendingPayments: false,
};
export class BillpayPayeeSummaryWidgetService {
    /** @internal */
    constructor(payeesSummaryData, payeesData) {
        this.payeesSummaryData = payeesSummaryData;
        this.payeesData = payeesData;
        this.currentPayeeSummaryLoadingState = new BehaviorSubject('');
    }
    getPayees() {
        this.currentPayeeSummaryLoadingState.next('loading');
        return this.payeesSummaryData.getBillPayPayeesSummary().pipe(map(this.getPayeeSummaries), tap(data => sortPayees(data)), tap(() => this.currentPayeeSummaryLoadingState.next('')), catchError(() => {
            this.currentPayeeSummaryLoadingState.next('error');
            return EMPTY;
        }));
    }
    deletePayee(id, electronic) {
        return electronic
            ? this.payeesData.deleteElectronicPayeeById(Object.assign(Object.assign({}, defaultDeleteParams), { id }))
            : this.payeesData.deletePayeeById(Object.assign(Object.assign({}, defaultDeleteParams), { id }));
    }
    getFullSummary(id) {
        return this.payeesData.getPayeeById({ id }).pipe(map(a => a.payee));
    }
    getPayeeSummaries(response) {
        // eslint-disable-next-line no-null/no-null
        if (response.payeeSummaries === null) {
            throw new Error('Response body not set');
        }
        return response.payeeSummaries ? response.payeeSummaries : [];
    }
    get payeesSummaryLoadingState() {
        return this.currentPayeeSummaryLoadingState;
    }
}
BillpayPayeeSummaryWidgetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayeeSummaryWidgetService, deps: [{ token: i1.BillPayPayeesSummaryService }, { token: i1.BillPayPayeesService }], target: i0.ɵɵFactoryTarget.Injectable });
BillpayPayeeSummaryWidgetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayeeSummaryWidgetService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayPayeeSummaryWidgetService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.BillPayPayeesSummaryService }, { type: i1.BillPayPayeesService }]; } });
function getPayeeDisplayName(payee) {
    return (payee.nickName || payee.name).toLowerCase();
}
function isEbillEnabled(payee) {
    return payee.ebill ? payee.ebill.enabled : false;
}
function sortPayees(data) {
    if (data) {
        data.sort(function (payee1, payee2) {
            if (isEbillEnabled(payee1) && !isEbillEnabled(payee2))
                return -1;
            if (!isEbillEnabled(payee1) && isEbillEnabled(payee2))
                return 1;
            return getPayeeDisplayName(payee1) > getPayeeDisplayName(payee2) ? 1 : -1;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbHBheS1wYXllZS1zdW1tYXJ5LXdpZGdldC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9tYW5hZ2UtcGF5ZWVzLWpvdXJuZXkvc3JjL3NlcnZpY2VzL2JpbGxwYXktcGF5ZWUtc3VtbWFyeS13aWRnZXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUTNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXRELE9BQU8sRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFjLE1BQU0sTUFBTSxDQUFDOzs7QUFFMUQsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUc7SUFDakMscUJBQXFCLEVBQUUsS0FBSztDQUM3QixDQUFDO0FBR0YsTUFBTSxPQUFPLGdDQUFnQztJQUczQyxnQkFBZ0I7SUFDaEIsWUFDbUIsaUJBQThDLEVBQzlDLFVBQWdDO1FBRGhDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBNkI7UUFDOUMsZUFBVSxHQUFWLFVBQVUsQ0FBc0I7UUFMM0Msb0NBQStCLEdBQUcsSUFBSSxlQUFlLENBQTJCLEVBQUUsQ0FBQyxDQUFDO0lBTXpGLENBQUM7SUFFSixTQUFTO1FBQ1AsSUFBSSxDQUFDLCtCQUErQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNyRCxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLElBQUksQ0FDMUQsR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUMzQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDN0IsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDeEQsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbkQsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVELFdBQVcsQ0FBQyxFQUFVLEVBQUUsVUFBbUI7UUFDekMsT0FBTyxVQUFVO1lBQ2YsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMseUJBQXlCLGlDQUFNLG1CQUFtQixLQUFFLEVBQUUsSUFBRztZQUMzRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLGlDQUFNLG1CQUFtQixLQUFFLEVBQUUsSUFBRyxDQUFDO0lBQ3RFLENBQUM7SUFFRCxjQUFjLENBQUMsRUFBVTtRQUN2QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVPLGlCQUFpQixDQUFDLFFBQTZDO1FBQ3JFLDJDQUEyQztRQUMzQyxJQUFJLFFBQVEsQ0FBQyxjQUFjLEtBQUssSUFBSSxFQUFFO1lBQ3BDLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztTQUMxQztRQUNELE9BQU8sUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ2hFLENBQUM7SUFFRCxJQUFJLHlCQUF5QjtRQUMzQixPQUFPLElBQUksQ0FBQywrQkFBK0IsQ0FBQztJQUM5QyxDQUFDOzs4SEExQ1UsZ0NBQWdDO2tJQUFoQyxnQ0FBZ0M7NEZBQWhDLGdDQUFnQztrQkFENUMsVUFBVTs7QUE4Q1gsU0FBUyxtQkFBbUIsQ0FBQyxLQUFtQjtJQUM5QyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDdEQsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFDLEtBQW1CO0lBQ3pDLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUNuRCxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsSUFBZ0M7SUFDbEQsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsTUFBTSxFQUFFLE1BQU07WUFDaEMsSUFBSSxjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDO2dCQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDakUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxjQUFjLENBQUMsTUFBTSxDQUFDO2dCQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ2hFLE9BQU8sbUJBQW1CLENBQUMsTUFBTSxDQUFDLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUUsQ0FBQyxDQUFDLENBQUM7S0FDSjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBCaWxsUGF5UGF5ZWVzU3VtbWFyeVNlcnZpY2UsXG4gIEJpbGxQYXlQYXllZXNTZXJ2aWNlLFxuICBCaWxsUGF5UGF5ZWVzU3VtbWFyeUdldFJlc3BvbnNlQm9keSxcbiAgUGF5ZWVTdW1tYXJ5LFxuICBQYXllZSxcbn0gZnJvbSAnQGJhY2tiYXNlL2RhdGEtYW5nL2JpbGxwYXknO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIEVNUFRZLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0RGVsZXRlUGFyYW1zID0ge1xuICBjYW5jZWxQZW5kaW5nUGF5bWVudHM6IGZhbHNlLFxufTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJpbGxwYXlQYXllZVN1bW1hcnlXaWRnZXRTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBjdXJyZW50UGF5ZWVTdW1tYXJ5TG9hZGluZ1N0YXRlID0gbmV3IEJlaGF2aW9yU3ViamVjdDwnbG9hZGluZycgfCAnZXJyb3InIHwgJyc+KCcnKTtcblxuICAvKiogQGludGVybmFsICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGF5ZWVzU3VtbWFyeURhdGE6IEJpbGxQYXlQYXllZXNTdW1tYXJ5U2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBheWVlc0RhdGE6IEJpbGxQYXlQYXllZXNTZXJ2aWNlLFxuICApIHt9XG5cbiAgZ2V0UGF5ZWVzKCk6IE9ic2VydmFibGU8UGF5ZWVTdW1tYXJ5W10+IHtcbiAgICB0aGlzLmN1cnJlbnRQYXllZVN1bW1hcnlMb2FkaW5nU3RhdGUubmV4dCgnbG9hZGluZycpO1xuICAgIHJldHVybiB0aGlzLnBheWVlc1N1bW1hcnlEYXRhLmdldEJpbGxQYXlQYXllZXNTdW1tYXJ5KCkucGlwZShcbiAgICAgIG1hcCh0aGlzLmdldFBheWVlU3VtbWFyaWVzKSxcbiAgICAgIHRhcChkYXRhID0+IHNvcnRQYXllZXMoZGF0YSkpLFxuICAgICAgdGFwKCgpID0+IHRoaXMuY3VycmVudFBheWVlU3VtbWFyeUxvYWRpbmdTdGF0ZS5uZXh0KCcnKSksXG4gICAgICBjYXRjaEVycm9yKCgpID0+IHtcbiAgICAgICAgdGhpcy5jdXJyZW50UGF5ZWVTdW1tYXJ5TG9hZGluZ1N0YXRlLm5leHQoJ2Vycm9yJyk7XG4gICAgICAgIHJldHVybiBFTVBUWTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBkZWxldGVQYXllZShpZDogc3RyaW5nLCBlbGVjdHJvbmljOiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj4ge1xuICAgIHJldHVybiBlbGVjdHJvbmljXG4gICAgICA/IHRoaXMucGF5ZWVzRGF0YS5kZWxldGVFbGVjdHJvbmljUGF5ZWVCeUlkKHsgLi4uZGVmYXVsdERlbGV0ZVBhcmFtcywgaWQgfSlcbiAgICAgIDogdGhpcy5wYXllZXNEYXRhLmRlbGV0ZVBheWVlQnlJZCh7IC4uLmRlZmF1bHREZWxldGVQYXJhbXMsIGlkIH0pO1xuICB9XG5cbiAgZ2V0RnVsbFN1bW1hcnkoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8UGF5ZWU+IHtcbiAgICByZXR1cm4gdGhpcy5wYXllZXNEYXRhLmdldFBheWVlQnlJZCh7IGlkIH0pLnBpcGUobWFwKGEgPT4gYS5wYXllZSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRQYXllZVN1bW1hcmllcyhyZXNwb25zZTogQmlsbFBheVBheWVlc1N1bW1hcnlHZXRSZXNwb25zZUJvZHkpOiBBcnJheTxQYXllZVN1bW1hcnk+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbnVsbC9uby1udWxsXG4gICAgaWYgKHJlc3BvbnNlLnBheWVlU3VtbWFyaWVzID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Jlc3BvbnNlIGJvZHkgbm90IHNldCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2UucGF5ZWVTdW1tYXJpZXMgPyByZXNwb25zZS5wYXllZVN1bW1hcmllcyA6IFtdO1xuICB9XG5cbiAgZ2V0IHBheWVlc1N1bW1hcnlMb2FkaW5nU3RhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFBheWVlU3VtbWFyeUxvYWRpbmdTdGF0ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRQYXllZURpc3BsYXlOYW1lKHBheWVlOiBQYXllZVN1bW1hcnkpOiBzdHJpbmcge1xuICByZXR1cm4gKHBheWVlLm5pY2tOYW1lIHx8IHBheWVlLm5hbWUpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIGlzRWJpbGxFbmFibGVkKHBheWVlOiBQYXllZVN1bW1hcnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIHBheWVlLmViaWxsID8gcGF5ZWUuZWJpbGwuZW5hYmxlZCA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzb3J0UGF5ZWVzKGRhdGE6IFBheWVlU3VtbWFyeVtdIHwgdW5kZWZpbmVkKSB7XG4gIGlmIChkYXRhKSB7XG4gICAgZGF0YS5zb3J0KGZ1bmN0aW9uIChwYXllZTEsIHBheWVlMikge1xuICAgICAgaWYgKGlzRWJpbGxFbmFibGVkKHBheWVlMSkgJiYgIWlzRWJpbGxFbmFibGVkKHBheWVlMikpIHJldHVybiAtMTtcbiAgICAgIGlmICghaXNFYmlsbEVuYWJsZWQocGF5ZWUxKSAmJiBpc0ViaWxsRW5hYmxlZChwYXllZTIpKSByZXR1cm4gMTtcbiAgICAgIHJldHVybiBnZXRQYXllZURpc3BsYXlOYW1lKHBheWVlMSkgPiBnZXRQYXllZURpc3BsYXlOYW1lKHBheWVlMikgPyAxIDogLTE7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==