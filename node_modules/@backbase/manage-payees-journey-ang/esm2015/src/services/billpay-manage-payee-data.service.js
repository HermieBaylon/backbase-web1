import { __rest } from "tslib";
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/billpay";
export class BillpayManagePayeeDataService {
    /** @internal */
    constructor(dataService, searchService) {
        this.dataService = dataService;
        this.searchService = searchService;
    }
    addManualPayee(payee) {
        return this.dataService.postBillPayPayees({ billPayPayeesPostRequestBody: this.toPayeeRequest(payee) });
    }
    updateManualPayee(id, payee) {
        return this.dataService.putPayeeById({ payeeByIdPutRequestBody: this.toManualPutRequest(payee), id });
    }
    getManualPayee(id) {
        return this.dataService.getPayeeById({ id }).pipe(map(response => response.payee));
    }
    searchPayeesByName(name) {
        return this.searchService.getBillPaySearch({ name });
    }
    addElectronicPayee(payee) {
        return this.dataService.postBillPayElectronicPayees({
            billPayElectronicPayeesPostRequestBody: this.toElectronicPostRequest(payee),
        });
    }
    getElectronicPayee(id) {
        return this.dataService.getElectronicPayeeById({ id });
    }
    updateElectronicPayee(id, payee) {
        return this.dataService.putElectronicPayeeById({
            electronicPayeeByIdPutRequestBody: this.toElectronicPutRequest(payee),
            id,
        });
    }
    toPayeeRequest(payee) {
        const { name, address: { address1, address2, city, state, postalCode }, phoneNumber, accountNumber, nickName, } = payee;
        return {
            payee: Object.assign(Object.assign(Object.assign({ name, address: Object.assign(Object.assign({ address1 }, (address2 && { address2 })), { city,
                    state,
                    postalCode }) }, (phoneNumber && { phoneNumber: phoneNumber.replace(/^\+1/, '').replace(/\D/g, '') })), (accountNumber && { accountNumber })), (nickName && { nickName })),
        };
    }
    toManualPutRequest(payee) {
        return {
            payee: Object.assign(Object.assign({}, this.toPayeeRequest(payee).payee), { modifyPendingPayments: true }),
        };
    }
    toElectronicPutRequest(payee) {
        const { nickName } = payee, payeeWithoutNickname = __rest(payee, ["nickName"]);
        return {
            payee: Object.assign(Object.assign(Object.assign({}, payeeWithoutNickname), (nickName && { nickName })), { modifyPendingPayments: true }),
        };
    }
    toElectronicPostRequest(payee) {
        const { nickName } = payee, restProperties = __rest(payee, ["nickName"]);
        return {
            payee: Object.assign(Object.assign({}, (nickName && { nickName })), restProperties),
        };
    }
}
BillpayManagePayeeDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManagePayeeDataService, deps: [{ token: i1.BillPayPayeesService }, { token: i1.BillPaySearchService }], target: i0.ɵɵFactoryTarget.Injectable });
BillpayManagePayeeDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManagePayeeDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayManagePayeeDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.BillPayPayeesService }, { type: i1.BillPaySearchService }]; } });
//# sourceMappingURL=data:application/json;base64,