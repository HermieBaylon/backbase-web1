import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ExceptionDetailsResponse } from '../model/models';
import { ExceptionsFilterRequest } from '../model/models';
import { ExceptionsFilterResponse } from '../model/models';
import { PositivePayAchConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface FilterExceptionsRequestParams {
    ["body"]: ExceptionsFilterRequest;
}
export interface GetExceptionDetailsRequestParams {
    ["id"]: string;
}
export declare class ExceptionsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PositivePayAchConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PositivePayAchConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    filterExceptions(requestParameters: FilterExceptionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ExceptionsFilterResponse>;
    filterExceptions(requestParameters: FilterExceptionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ExceptionsFilterResponse>>;
    filterExceptions(requestParameters: FilterExceptionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ExceptionsFilterResponse>>;
    filterExceptionsUrl(requestParameters: FilterExceptionsRequestParams): string;
    getExceptionDetails(requestParameters: GetExceptionDetailsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ExceptionDetailsResponse>;
    getExceptionDetails(requestParameters: GetExceptionDetailsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ExceptionDetailsResponse>>;
    getExceptionDetails(requestParameters: GetExceptionDetailsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ExceptionDetailsResponse>>;
    getExceptionDetailsUrl(requestParameters: GetExceptionDetailsRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<ExceptionsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ExceptionsHttpService>;
}
