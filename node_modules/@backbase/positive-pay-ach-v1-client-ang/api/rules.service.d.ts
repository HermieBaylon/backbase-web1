import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { BlockerRuleSubmitRequest } from '../model/models';
import { BlockerRuleSubmitResponse } from '../model/models';
import { FilterRuleSubmitRequest } from '../model/models';
import { FilterRuleSubmitResponse } from '../model/models';
import { RuleDetailsResponse } from '../model/models';
import { RulesFilterRequest } from '../model/models';
import { RulesFilterResponse } from '../model/models';
import { PositivePayAchConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteRuleRequestParams {
    ["id"]: string;
}
export interface FilterRulesRequestParams {
    ["body"]: RulesFilterRequest;
}
export interface GetRuleDetailsRequestParams {
    ["id"]: string;
}
export interface SubmitBlockerRuleRequestParams {
    ["body"]: BlockerRuleSubmitRequest;
}
export interface SubmitFilterRuleRequestParams {
    ["body"]: FilterRuleSubmitRequest;
}
export declare class RulesHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PositivePayAchConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PositivePayAchConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deleteRule(requestParameters: DeleteRuleRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteRule(requestParameters: DeleteRuleRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteRule(requestParameters: DeleteRuleRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteRuleUrl(requestParameters: DeleteRuleRequestParams): string;
    filterRules(requestParameters: FilterRulesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<RulesFilterResponse>;
    filterRules(requestParameters: FilterRulesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<RulesFilterResponse>>;
    filterRules(requestParameters: FilterRulesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<RulesFilterResponse>>;
    filterRulesUrl(requestParameters: FilterRulesRequestParams): string;
    getRuleDetails(requestParameters: GetRuleDetailsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<RuleDetailsResponse>;
    getRuleDetails(requestParameters: GetRuleDetailsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<RuleDetailsResponse>>;
    getRuleDetails(requestParameters: GetRuleDetailsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<RuleDetailsResponse>>;
    getRuleDetailsUrl(requestParameters: GetRuleDetailsRequestParams): string;
    submitBlockerRule(requestParameters: SubmitBlockerRuleRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BlockerRuleSubmitResponse>;
    submitBlockerRule(requestParameters: SubmitBlockerRuleRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BlockerRuleSubmitResponse>>;
    submitBlockerRule(requestParameters: SubmitBlockerRuleRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BlockerRuleSubmitResponse>>;
    submitBlockerRuleUrl(requestParameters: SubmitBlockerRuleRequestParams): string;
    submitFilterRule(requestParameters: SubmitFilterRuleRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<FilterRuleSubmitResponse>;
    submitFilterRule(requestParameters: SubmitFilterRuleRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<FilterRuleSubmitResponse>>;
    submitFilterRule(requestParameters: SubmitFilterRuleRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<FilterRuleSubmitResponse>>;
    submitFilterRuleUrl(requestParameters: SubmitFilterRuleRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<RulesHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<RulesHttpService>;
}
