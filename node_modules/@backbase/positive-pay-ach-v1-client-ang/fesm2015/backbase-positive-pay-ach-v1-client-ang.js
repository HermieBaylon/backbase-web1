import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const ExceptionsFilterOrderByEnum = {
    TransactionDate: 'transactionDate'
};

const RuleTypeEnum = {
    BLOCKER: 'BLOCKER',
    FILTER: 'FILTER'
};

const RulesFilterOrderByEnum = {
    RegistrationDate: 'registrationDate',
    RuleType: 'ruleType',
    StartDate: 'startDate'
};

const SortDirectionEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};

const POSITIVE_PAY_ACH_BASE_PATH = new InjectionToken('POSITIVE_PAY_ACH_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class PositivePayAchConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module PositivePayAchConfiguration');

class PositivePayAchApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('PositivePayAchApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: PositivePayAchApiModule,
            providers: [{ provide: PositivePayAchConfiguration, useFactory: configurationFactory }]
        };
    }
}
PositivePayAchApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PositivePayAchApiModule, deps: [{ token: PositivePayAchApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: PositivePayAchConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
PositivePayAchApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PositivePayAchApiModule });
PositivePayAchApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PositivePayAchApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PositivePayAchApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: PositivePayAchApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: PositivePayAchConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class ExceptionsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PositivePayAchConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    filterExceptions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling filterExceptions.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/exceptions`, _body, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    filterExceptionsUrl(requestParameters) {
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling filterExceptions.');
        }
        return `${this.configuration.basePath}/client-api/v1/exceptions`;
    }
    getExceptionDetails(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getExceptionDetails.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/exceptions/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getExceptionDetailsUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getExceptionDetails.');
        }
        return `${this.configuration.basePath}/client-api/v1/exceptions/${encodeURIComponent(String(_id))}`;
    }
}
ExceptionsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ExceptionsHttpService, deps: [{ token: i1.HttpClient }, { token: POSITIVE_PAY_ACH_BASE_PATH, optional: true }, { token: PositivePayAchConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ExceptionsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ExceptionsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ExceptionsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [POSITIVE_PAY_ACH_BASE_PATH]
                }] }, { type: PositivePayAchConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const ExceptionsHttpServiceFilterExceptionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/exceptions",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "exceptions": [{
                            "id": "df6bf97c-19cc-4056-9524-42cef5ce71b8",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4692",
                            "paymentType": "ACH Debit",
                            "originatorId": "5123456789",
                            "originatorName": "First Originator",
                            "standardEntryClass": "CIE",
                            "amount": {
                                "amount": "100.00",
                                "currencyCode": "USD"
                            },
                            "transactionDate": "2020-12-31T06:30:00.000-05:00",
                            "errors": ["Invalid Standard Entry Class", "Originator is blocked"]
                        }, {
                            "id": "8632554d-1d19-4876-b35a-4cef21934bc6",
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                            "paymentType": "ACH Credit",
                            "originatorId": "4123456789",
                            "originatorName": "Second Originator",
                            "standardEntryClass": "CCD",
                            "amount": {
                                "amount": "999.99",
                                "currencyCode": "USD"
                            },
                            "transactionDate": "2020-12-31T05:30:00.000-05:00",
                            "errors": ["Invalid Standard Entry Class", "Originator is blocked"]
                        }, {
                            "id": "6c5bd090-4430-4c8a-ae3f-d50399b95bd8",
                            "arrangementId": "4cdb2224-8926-4b4d-a99f-1c9dfbbb4697",
                            "paymentType": "ACH Debit",
                            "originatorId": "5120056789",
                            "standardEntryClass": "CCD",
                            "amount": {
                                "amount": "2657.53",
                                "currencyCode": "USD"
                            },
                            "transactionDate": "2020-12-31T04:30:00.000-05:00",
                            "errors": ["Invalid payment type"]
                        }, {
                            "id": "1453f0e5-cb1c-4706-b774-620ad7695163",
                            "arrangementId": "5cdb2224-8926-4b4d-a99f-1c9dfbbb4696",
                            "paymentType": "ACH Debit",
                            "originatorId": "2123456789",
                            "originatorName": "Originator First",
                            "standardEntryClass": "CIE",
                            "amount": {
                                "amount": "10000.00",
                                "currencyCode": "USD"
                            },
                            "transactionDate": "2020-12-31T03:30:00.000-05:00",
                            "errors": ["Maximum amount exceeded"]
                        }, {
                            "id": "20d499a0-e60e-47ce-bbb4-cae2abce4dea",
                            "arrangementId": "2d94d333-471d-4cd7-84d2-24e822d5ca68",
                            "paymentType": "ACH Debit",
                            "originatorId": "1123456789",
                            "originatorName": "Originator First",
                            "standardEntryClass": "CCD",
                            "amount": {
                                "amount": "899.00",
                                "currencyCode": "USD"
                            },
                            "transactionDate": "2020-12-31T02:30:00.000-05:00",
                            "errors": ["Maximum amount exceeded"]
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ExceptionsHttpServiceGetExceptionDetailsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/exceptions/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "df6bf97c-19cc-4056-9524-42cef5ce71b8",
                    "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4692",
                    "paymentType": "ACH Debit",
                    "originatorId": "5123456789",
                    "originatorName": "First Originator",
                    "standardEntryClass": "CIE",
                    "amount": {
                        "amount": "100.00",
                        "currencyCode": "USD"
                    },
                    "transactionDate": "2020-12-31T06:30:00.000-05:00",
                    "errors": ["Invalid Standard Entry Class", "Originator is blocked"]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ExceptionsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/exceptions",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "exceptions": [{
                            "id": "df6bf97c-19cc-4056-9524-42cef5ce71b8",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4692",
                            "paymentType": "ACH Debit",
                            "originatorId": "5123456789",
                            "originatorName": "First Originator",
                            "standardEntryClass": "CIE",
                            "amount": {
                                "amount": "100.00",
                                "currencyCode": "USD"
                            },
                            "transactionDate": "2020-12-31T06:30:00.000-05:00",
                            "errors": ["Invalid Standard Entry Class", "Originator is blocked"]
                        }, {
                            "id": "8632554d-1d19-4876-b35a-4cef21934bc6",
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                            "paymentType": "ACH Credit",
                            "originatorId": "4123456789",
                            "originatorName": "Second Originator",
                            "standardEntryClass": "CCD",
                            "amount": {
                                "amount": "999.99",
                                "currencyCode": "USD"
                            },
                            "transactionDate": "2020-12-31T05:30:00.000-05:00",
                            "errors": ["Invalid Standard Entry Class", "Originator is blocked"]
                        }, {
                            "id": "6c5bd090-4430-4c8a-ae3f-d50399b95bd8",
                            "arrangementId": "4cdb2224-8926-4b4d-a99f-1c9dfbbb4697",
                            "paymentType": "ACH Debit",
                            "originatorId": "5120056789",
                            "standardEntryClass": "CCD",
                            "amount": {
                                "amount": "2657.53",
                                "currencyCode": "USD"
                            },
                            "transactionDate": "2020-12-31T04:30:00.000-05:00",
                            "errors": ["Invalid payment type"]
                        }, {
                            "id": "1453f0e5-cb1c-4706-b774-620ad7695163",
                            "arrangementId": "5cdb2224-8926-4b4d-a99f-1c9dfbbb4696",
                            "paymentType": "ACH Debit",
                            "originatorId": "2123456789",
                            "originatorName": "Originator First",
                            "standardEntryClass": "CIE",
                            "amount": {
                                "amount": "10000.00",
                                "currencyCode": "USD"
                            },
                            "transactionDate": "2020-12-31T03:30:00.000-05:00",
                            "errors": ["Maximum amount exceeded"]
                        }, {
                            "id": "20d499a0-e60e-47ce-bbb4-cae2abce4dea",
                            "arrangementId": "2d94d333-471d-4cd7-84d2-24e822d5ca68",
                            "paymentType": "ACH Debit",
                            "originatorId": "1123456789",
                            "originatorName": "Originator First",
                            "standardEntryClass": "CCD",
                            "amount": {
                                "amount": "899.00",
                                "currencyCode": "USD"
                            },
                            "transactionDate": "2020-12-31T02:30:00.000-05:00",
                            "errors": ["Maximum amount exceeded"]
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/exceptions/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "df6bf97c-19cc-4056-9524-42cef5ce71b8",
                    "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4692",
                    "paymentType": "ACH Debit",
                    "originatorId": "5123456789",
                    "originatorName": "First Originator",
                    "standardEntryClass": "CIE",
                    "amount": {
                        "amount": "100.00",
                        "currencyCode": "USD"
                    },
                    "transactionDate": "2020-12-31T06:30:00.000-05:00",
                    "errors": ["Invalid Standard Entry Class", "Originator is blocked"]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class RulesHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PositivePayAchConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteRule(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteRule.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v1/rules/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteRuleUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteRule.');
        }
        return `${this.configuration.basePath}/client-api/v1/rules/${encodeURIComponent(String(_id))}`;
    }
    filterRules(requestParameters, observe = 'body', reportProgress = false, options) {
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling filterRules.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/rules`, _body, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    filterRulesUrl(requestParameters) {
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling filterRules.');
        }
        return `${this.configuration.basePath}/client-api/v1/rules`;
    }
    getRuleDetails(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRuleDetails.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/rules/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getRuleDetailsUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRuleDetails.');
        }
        return `${this.configuration.basePath}/client-api/v1/rules/${encodeURIComponent(String(_id))}`;
    }
    submitBlockerRule(requestParameters, observe = 'body', reportProgress = false, options) {
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling submitBlockerRule.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/rules/blockers`, _body, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    submitBlockerRuleUrl(requestParameters) {
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling submitBlockerRule.');
        }
        return `${this.configuration.basePath}/client-api/v1/rules/blockers`;
    }
    submitFilterRule(requestParameters, observe = 'body', reportProgress = false, options) {
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling submitFilterRule.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/rules/filters`, _body, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    submitFilterRuleUrl(requestParameters) {
        const _body = requestParameters["body"];
        if (_body === null || _body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling submitFilterRule.');
        }
        return `${this.configuration.basePath}/client-api/v1/rules/filters`;
    }
}
RulesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: RulesHttpService, deps: [{ token: i1.HttpClient }, { token: POSITIVE_PAY_ACH_BASE_PATH, optional: true }, { token: PositivePayAchConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
RulesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: RulesHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: RulesHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [POSITIVE_PAY_ACH_BASE_PATH]
                }] }, { type: PositivePayAchConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const RulesHttpServiceDeleteRuleMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/rules/{id}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const RulesHttpServiceFilterRulesMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/rules",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "rules": [{
                            "id": "5",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4692",
                            "ruleType": "BLOCKER",
                            "paymentType": "ACH Debit",
                            "originatorId": "5123456789",
                            "originatorName": "First Originator",
                            "standardEntryClass": ["CCD", "CIE"],
                            "startDate": "2021-12-01",
                            "endDate": "2021-12-31",
                            "registrationDate": "2020-12-31T06:30:00.000-05:00"
                        }, {
                            "id": "4",
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                            "ruleType": "FILTER",
                            "paymentType": "ACH Credit",
                            "originatorId": "4123456789",
                            "originatorName": "Second Originator",
                            "standardEntryClass": ["CCD"],
                            "startDate": "2021-12-01",
                            "endDate": "2021-12-31",
                            "frequency": "Weekly",
                            "maximumAmount": {
                                "amount": "999.99",
                                "currencyCode": "USD"
                            },
                            "registrationDate": "2020-12-31T05:30:00.000-05:00"
                        }, {
                            "id": "3",
                            "arrangementId": "4cdb2224-8926-4b4d-a99f-1c9dfbbb4697",
                            "ruleType": "BLOCKER",
                            "paymentType": "ACH Debit",
                            "originatorId": "*",
                            "standardEntryClass": ["CCD", "CIE"],
                            "startDate": "2021-12-01",
                            "endDate": "2021-12-31",
                            "registrationDate": "2020-12-31T04:30:00.000-05:00"
                        }, {
                            "id": "2",
                            "arrangementId": "5cdb2224-8926-4b4d-a99f-1c9dfbbb4696",
                            "ruleType": "BLOCKER",
                            "paymentType": "ACH Debit",
                            "originatorId": "2123456789",
                            "originatorName": "Originator First",
                            "standardEntryClass": ["CCD", "CIE"],
                            "startDate": "2022-01-01",
                            "endDate": "2022-01-31",
                            "registrationDate": "2020-12-31T03:30:00.000-05:00"
                        }, {
                            "id": "1",
                            "arrangementId": "2d94d333-471d-4cd7-84d2-24e822d5ca68",
                            "ruleType": "BLOCKER",
                            "paymentType": "ACH Debit",
                            "originatorId": "1123456789",
                            "originatorName": "Originator First",
                            "standardEntryClass": ["CCD", "CIE"],
                            "startDate": "2021-12-01",
                            "endDate": "2021-12-31",
                            "registrationDate": "2020-12-31T02:30:00.000-05:00"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const RulesHttpServiceGetRuleDetailsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/rules/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "849d66ae-c942-2ba7-8739-c5a38a596f32",
                    "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4691",
                    "ruleType": "FILTER",
                    "standardEntryClass": ["CCD", "CIE"],
                    "originatorId": "1123456789",
                    "originatorName": "Originator First",
                    "startDate": "2021-12-01",
                    "endDate": "2021-12-31",
                    "frequency": "Once",
                    "maximumAmount": {
                        "amount": "999.99",
                        "currencyCode": "USD"
                    },
                    "paymentType": "ACH Debit",
                    "additions": {
                        "key": "value"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const RulesHttpServiceSubmitBlockerRuleMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/rules/blockers",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "849d66ae-c942-2ba7-8739-c5a38a596f32"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const RulesHttpServiceSubmitFilterRuleMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/rules/filters",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "849d66ae-c942-2ba7-8739-c5a38a596f32"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const RulesHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/rules/{id}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/rules",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "rules": [{
                            "id": "5",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4692",
                            "ruleType": "BLOCKER",
                            "paymentType": "ACH Debit",
                            "originatorId": "5123456789",
                            "originatorName": "First Originator",
                            "standardEntryClass": ["CCD", "CIE"],
                            "startDate": "2021-12-01",
                            "endDate": "2021-12-31",
                            "registrationDate": "2020-12-31T06:30:00.000-05:00"
                        }, {
                            "id": "4",
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                            "ruleType": "FILTER",
                            "paymentType": "ACH Credit",
                            "originatorId": "4123456789",
                            "originatorName": "Second Originator",
                            "standardEntryClass": ["CCD"],
                            "startDate": "2021-12-01",
                            "endDate": "2021-12-31",
                            "frequency": "Weekly",
                            "maximumAmount": {
                                "amount": "999.99",
                                "currencyCode": "USD"
                            },
                            "registrationDate": "2020-12-31T05:30:00.000-05:00"
                        }, {
                            "id": "3",
                            "arrangementId": "4cdb2224-8926-4b4d-a99f-1c9dfbbb4697",
                            "ruleType": "BLOCKER",
                            "paymentType": "ACH Debit",
                            "originatorId": "*",
                            "standardEntryClass": ["CCD", "CIE"],
                            "startDate": "2021-12-01",
                            "endDate": "2021-12-31",
                            "registrationDate": "2020-12-31T04:30:00.000-05:00"
                        }, {
                            "id": "2",
                            "arrangementId": "5cdb2224-8926-4b4d-a99f-1c9dfbbb4696",
                            "ruleType": "BLOCKER",
                            "paymentType": "ACH Debit",
                            "originatorId": "2123456789",
                            "originatorName": "Originator First",
                            "standardEntryClass": ["CCD", "CIE"],
                            "startDate": "2022-01-01",
                            "endDate": "2022-01-31",
                            "registrationDate": "2020-12-31T03:30:00.000-05:00"
                        }, {
                            "id": "1",
                            "arrangementId": "2d94d333-471d-4cd7-84d2-24e822d5ca68",
                            "ruleType": "BLOCKER",
                            "paymentType": "ACH Debit",
                            "originatorId": "1123456789",
                            "originatorName": "Originator First",
                            "standardEntryClass": ["CCD", "CIE"],
                            "startDate": "2021-12-01",
                            "endDate": "2021-12-31",
                            "registrationDate": "2020-12-31T02:30:00.000-05:00"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/rules/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "849d66ae-c942-2ba7-8739-c5a38a596f32",
                    "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4691",
                    "ruleType": "FILTER",
                    "standardEntryClass": ["CCD", "CIE"],
                    "originatorId": "1123456789",
                    "originatorName": "Originator First",
                    "startDate": "2021-12-01",
                    "endDate": "2021-12-31",
                    "frequency": "Once",
                    "maximumAmount": {
                        "amount": "999.99",
                        "currencyCode": "USD"
                    },
                    "paymentType": "ACH Debit",
                    "additions": {
                        "key": "value"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/rules/blockers",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "849d66ae-c942-2ba7-8739-c5a38a596f32"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/rules/filters",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "849d66ae-c942-2ba7-8739-c5a38a596f32"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

export { COLLECTION_FORMATS, CONFIG_TOKEN, ExceptionsFilterOrderByEnum, ExceptionsHttpService, ExceptionsHttpServiceFilterExceptionsMocksProvider, ExceptionsHttpServiceGetExceptionDetailsMocksProvider, ExceptionsHttpServiceMocksProvider, POSITIVE_PAY_ACH_BASE_PATH, PositivePayAchApiModule, PositivePayAchConfiguration, RuleTypeEnum, RulesFilterOrderByEnum, RulesHttpService, RulesHttpServiceDeleteRuleMocksProvider, RulesHttpServiceFilterRulesMocksProvider, RulesHttpServiceGetRuleDetailsMocksProvider, RulesHttpServiceMocksProvider, RulesHttpServiceSubmitBlockerRuleMocksProvider, RulesHttpServiceSubmitFilterRuleMocksProvider, SortDirectionEnum };
//# sourceMappingURL=backbase-positive-pay-ach-v1-client-ang.js.map
