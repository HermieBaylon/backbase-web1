import { TemplateRef } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { LoadableViewState } from '@backbase/identity-common-ang';
import { UserLocalizationOptionVM, UserLocalizationSaveClickEventData } from '../../../util';
import { BehaviorSubject, Observable } from 'rxjs';
import { UserLocalizationService } from '../user-localization.service';
import { NotificationService } from '@backbase/ui-ang/notification';
import * as i0 from "@angular/core";
interface ChangeLanguageViewState extends LoadableViewState {
    languageRegion?: UserLocalizationOptionVM;
}
export declare class UserLocalizationChangeLanguageViewComponent {
    private readonly userLocalizationService;
    private readonly router;
    private readonly notificationService;
    private readonly activatedRoute;
    notificationChangeLanguageSuccess: TemplateRef<any> | undefined;
    notificationChangeLanguageSuccessHeader: TemplateRef<any> | undefined;
    notificationFailure: TemplateRef<any> | undefined;
    modalOpen: boolean;
    readonly isSaveLoadingSubject$: BehaviorSubject<boolean>;
    private readonly viewStateSubject$;
    readonly viewState$: Observable<ChangeLanguageViewState>;
    readonly ids: {
        languageRegionLabel: string;
    };
    constructor(userLocalizationService: UserLocalizationService, router: Router, notificationService: NotificationService, activatedRoute: ActivatedRoute);
    saveChanges({ preferredLanguage }: UserLocalizationSaveClickEventData): void;
    cancelChangeLanguage(): void;
    cancelModal(): void;
    discardChanges(): void;
    navigateCommunications(): void;
    private showNotification;
    get localizationOptions(): import("../../../util").LocalizationOption[];
    static ɵfac: i0.ɵɵFactoryDeclaration<UserLocalizationChangeLanguageViewComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<UserLocalizationChangeLanguageViewComponent, "bb-user-localization-change-language-view", never, {}, {}, never, never>;
}
export {};
