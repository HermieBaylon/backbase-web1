import { Inject, Injectable, Optional } from '@angular/core';
import { IdentitySelfServiceJourneyConfigurationToken, } from './identity-self-service-journey.types';
import { createJourneyConfiguration } from '@backbase/identity-common-ang';
import { localizationOptions } from './features/user-localization/user-localization.config';
import * as i0 from "@angular/core";
const notificationDismissTime = 3;
const emailAddressTypes = ['Personal', 'Work'];
const postalAddressTypes = ['Home', 'Business', 'Mailing'];
const phoneNumberTypes = ['Home', 'Work', 'Mobile'];
const maxEmailAddresses = 3;
const maxPhoneNumbers = 3;
const maxPostalAddresses = 3;
const showWidgetHeader = true;
const phoneNumberCountryCode = 'CA';
const phoneNumberDebounceTime = 1;
const enablePhoneNumberFormatter = true;
const showEditableLanguage = true;
const routeParamNameUserId = 'userId';
const configDefaults = {
    userIdentitySecurityCenter: {
        notificationDismissTime,
    },
    userManageProfile: {
        notificationDismissTime,
        emailAddressTypes: [...emailAddressTypes],
        postalAddressTypes: [...postalAddressTypes],
        phoneNumberTypes: [...phoneNumberTypes],
        maxEmailAddresses,
        maxPhoneNumbers,
        maxPostalAddresses,
        showWidgetHeader,
        phoneNumberCountryCode,
        phoneNumberDebounceTime,
        enablePhoneNumberFormatter,
    },
    deviceInformation: {
        notificationDismissTime,
        routeParamNameUserId,
    },
    userLocalization: {
        notificationDismissTime,
        localizationOptions: [...localizationOptions],
        showEditableLanguage,
    },
};
export class IdentitySelfServiceJourneyConfigurationService {
    constructor(configOverrides) {
        this.config = createJourneyConfiguration(configDefaults, configOverrides);
    }
    get userIdentitySecurityCenter() {
        return this.config.userIdentitySecurityCenter;
    }
    get userManageProfile() {
        return this.config.userManageProfile;
    }
    get deviceInformation() {
        return this.config.deviceInformation;
    }
    get userLocalization() {
        return this.config.userLocalization;
    }
}
/** @nocollapse */ IdentitySelfServiceJourneyConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdentitySelfServiceJourneyConfigurationService, deps: [{ token: IdentitySelfServiceJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ IdentitySelfServiceJourneyConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdentitySelfServiceJourneyConfigurationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdentitySelfServiceJourneyConfigurationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [IdentitySelfServiceJourneyConfigurationToken]
                }] }]; } });
//# sourceMappingURL=identity-self-service-journey.config.service.js.map