import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { generateId } from '@backbase/identity-common-ang';
import { localizationOptions } from '../../user-localization.config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/input-radio-group";
import * as i3 from "@backbase/ui-ang/input-validation-message";
import * as i4 from "@backbase/ui-ang/load-button";
import * as i5 from "@angular/common";
import * as i6 from "@backbase/ui-ang/button";
export class UserLocalizationChangeLanguageFormComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        /**
         * Set language options
         */
        this.options = [];
        /**
         * Set save loading language
         */
        this.saveLoading = false;
        /**
         * Output for cancel clicked
         */
        this.cancelClick = new EventEmitter();
        /**
         * Output for save clicked
         */
        this.saveClick = new EventEmitter();
        this.ids = {
            languageRegionLabel: generateId('language-region'),
        };
        this.isSubmitted = false;
    }
    ngOnInit() {
        this.form = this.formBuilder.group({
            languageRegion: [{ value: this.selectedLanguageCode, disabled: false }, Validators.required],
        });
    }
    save() {
        this.isSubmitted = true;
        if (this.form && this.form.valid) {
            this.saveClick.emit({ preferredLanguage: this.form.value.languageRegion });
        }
    }
    get showLanguageControlError() {
        return !((this.form || {}).controls || {}).languageRegion.value && this.isSubmitted;
    }
    get defaultLocalizationOptions() {
        return localizationOptions;
    }
}
/** @nocollapse */ UserLocalizationChangeLanguageFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserLocalizationChangeLanguageFormComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UserLocalizationChangeLanguageFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: UserLocalizationChangeLanguageFormComponent, selector: "bb-user-localization-change-language-form", inputs: { options: "options", selectedLanguageCode: "selectedLanguageCode", saveLoading: "saveLoading" }, outputs: { cancelClick: "cancelClick", saveClick: "saveClick" }, ngImport: i0, template: "<form *ngIf=\"form\" [formGroup]=\"form\" (submit)=\"save()\">\n  <div class=\"bb-block bb-block--lg\">\n    <bb-input-radio-group-ui\n      data-role=\"user-localization-change-language-form-radio-option-group\"\n      formControlName=\"languageRegion\"\n      label=\"Language and region\"\n      i18n-label=\"Label for language and region radio options@@bb-user-localization-change-language-form.label.lanugage\"\n      [preselect]=\"false\"\n      [required]=\"true\"\n    >\n      <ng-container *ngIf=\"(options.length && options) || defaultLocalizationOptions as localizationOptions\">\n        <bb-input-radio-ui\n          *ngFor=\"let option of localizationOptions\"\n          [value]=\"option.value\"\n          [labelTemplate]=\"radioLabelTemplate\"\n          [labelTemplateContext]=\"option\"\n        >\n        </bb-input-radio-ui>\n      </ng-container>\n    </bb-input-radio-group-ui>\n    <bb-input-validation-message-ui [showErrors]=\"showLanguageControlError\">\n      <span\n        i18n=\"\n          Language required error|Error to say that language is a required\n          field@@bb-user-localization-change-language-form.language.errors.required\"\n      >\n        You must choose a language\n      </span>\n    </bb-input-validation-message-ui>\n  </div>\n\n  <div class=\"bb-button-bar bb-button-bar--reverse\">\n    <bb-load-button-ui\n      type=\"submit\"\n      data-role=\"user-localization-change-language-form-save-button\"\n      class=\"bb-button-bar__button\"\n      [isLoading]=\"saveLoading\"\n      i18n=\"Save changes button action@@bb-user-localization-change-language-form.action.save\"\n    >\n      Save changes\n    </bb-load-button-ui>\n    <button\n      bbButton\n      data-role=\"user-localization-change-language-form-cancel-button\"\n      color=\"secondary\"\n      class=\"bb-button-bar__button\"\n      type=\"button\"\n      (click)=\"cancelClick.emit()\"\n      i18n=\"Cancel changes button action@@bb-user-localization-change-language-form.action.cancel\"\n    >\n      Cancel\n    </button>\n  </div>\n</form>\n\n<ng-template #radioLabelTemplate let-labelTemplateContext=\"labelTemplateContext\">\n  <span class=\"bb-input-radio-group__radio-label\" [lang]=\"labelTemplateContext.value\">\n    {{ labelTemplateContext.label }}\n  </span>\n</ng-template>\n", components: [{ type: i2.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserLocalizationChangeLanguageFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-localization-change-language-form',
                    templateUrl: './user-localization-change-language-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; }, propDecorators: { options: [{
                type: Input
            }], selectedLanguageCode: [{
                type: Input
            }], saveLoading: [{
                type: Input
            }], cancelClick: [{
                type: Output
            }], saveClick: [{
                type: Output
            }] } });
//# sourceMappingURL=user-localization-change-language-form.component.js.map