import { Component, ViewChild } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { generateId } from '@backbase/identity-common-ang';
import { BehaviorSubject } from 'rxjs';
import { finalize, share, switchMap } from 'rxjs/operators';
import { UserLocalizationService } from '../user-localization.service';
import { NotificationService } from '@backbase/ui-ang/notification';
import { userLanguageCommonViewStatePipe } from '../shared/user-language-common-view-state.pipe';
import * as i0 from "@angular/core";
import * as i1 from "../user-localization.service";
import * as i2 from "@angular/router";
import * as i3 from "@backbase/ui-ang/notification";
import * as i4 from "../../../ui/back-button.component";
import * as i5 from "@backbase/ui-ang/header";
import * as i6 from "@backbase/ui-ang/alert";
import * as i7 from "@backbase/identity-common-ang";
import * as i8 from "../shared/components/user-localization-change-language-form.component";
import * as i9 from "../../../ui/discard-modal.component";
import * as i10 from "@angular/common";
export class UserLocalizationChangeLanguageViewComponent {
    constructor(userLocalizationService, router, notificationService, activatedRoute) {
        this.userLocalizationService = userLocalizationService;
        this.router = router;
        this.notificationService = notificationService;
        this.activatedRoute = activatedRoute;
        this.modalOpen = false;
        this.isSaveLoadingSubject$ = new BehaviorSubject(false);
        this.viewStateSubject$ = new BehaviorSubject(undefined);
        this.viewState$ = this.viewStateSubject$.pipe(userLanguageCommonViewStatePipe(this.userLocalizationService), share());
        this.ids = {
            languageRegionLabel: generateId('language-region'),
        };
    }
    saveChanges({ preferredLanguage }) {
        this.isSaveLoadingSubject$.next(true);
        this.userLocalizationService
            .updateUser({ preferredLanguage })
            .pipe(switchMap(() => this.userLocalizationService.getUser()), finalize(() => this.isSaveLoadingSubject$.next(false)))
            .subscribe({
            next: () => {
                this.showNotification(this.notificationChangeLanguageSuccess, this.notificationChangeLanguageSuccessHeader);
                this.navigateCommunications();
            },
            error: () => {
                this.showNotification(this.notificationFailure, undefined, 'error');
            },
        });
    }
    cancelChangeLanguage() {
        this.modalOpen = true;
    }
    cancelModal() {
        this.modalOpen = false;
    }
    discardChanges() {
        this.modalOpen = false;
        this.navigateCommunications();
    }
    navigateCommunications() {
        var _a, _b;
        this.router.navigate([((_b = (_a = this.activatedRoute.snapshot) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.communicationsPath) || '../communications'], {
            relativeTo: this.activatedRoute,
        });
    }
    showNotification(message, header, modifier) {
        this.notificationService.showNotification({
            header,
            message,
            modifier: modifier || 'success',
            ttl: this.userLocalizationService.config.notificationDismissTime,
        });
    }
    get localizationOptions() {
        return this.userLocalizationService.config.localizationOptions;
    }
}
/** @nocollapse */ UserLocalizationChangeLanguageViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserLocalizationChangeLanguageViewComponent, deps: [{ token: i1.UserLocalizationService }, { token: i2.Router }, { token: i3.NotificationService }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UserLocalizationChangeLanguageViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: UserLocalizationChangeLanguageViewComponent, selector: "bb-user-localization-change-language-view", viewQueries: [{ propertyName: "notificationChangeLanguageSuccess", first: true, predicate: ["notificationChangeLanguageSuccess"], descendants: true }, { propertyName: "notificationChangeLanguageSuccessHeader", first: true, predicate: ["notificationChangeLanguageSuccessHeader"], descendants: true }, { propertyName: "notificationFailure", first: true, predicate: ["notificationFailure"], descendants: true }], ngImport: i0, template: "<div *ngIf=\"viewState$ | async as state\" data-role=\"user-localization-change-language\">\n  <bb-identity-back-button\n    page=\"Communications\"\n    i18n-page=\"Page description for change language back button@@bb-user-localization-change-language.back-link-page\"\n    (backClick)=\"cancelChangeLanguage()\"\n  >\n  </bb-identity-back-button>\n\n  <div class=\"bb-block bb-block--lg\">\n    <bb-header-ui\n      headingType=\"h1\"\n      data-role=\"user-localization-change-language-header\"\n      heading=\"Change language and region\"\n      i18n-heading=\"Header for change language@@bb-user-localization-change-language.header\"\n    >\n    </bb-header-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\" *ngIf=\"!state.error\">\n    <bb-alert-ui\n      modifier=\"info\"\n      title=\"This only affects external communication including emails, SMS and push notifications.\"\n      i18n-title=\"Alert info notification for change language region@@bb-user-localization-change-language.info\"\n    >\n    </bb-alert-ui>\n  </div>\n\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <bb-identity-view-state-container-component [error]=\"state.error\" [loading]=\"state.loading\">\n        <bb-user-localization-change-language-form\n          [selectedLanguageCode]=\"state.languageRegion?.value || localizationOptions[0]?.value\"\n          [options]=\"localizationOptions\"\n          [saveLoading]=\"(isSaveLoadingSubject$ | async) || false\"\n          (cancelClick)=\"cancelChangeLanguage()\"\n          (saveClick)=\"saveChanges($event)\"\n        >\n        </bb-user-localization-change-language-form>\n      </bb-identity-view-state-container-component>\n    </div>\n  </div>\n\n  <bb-identity-discard-modal-component\n    [modalOpen]=\"modalOpen\"\n    (cancelModalClick)=\"cancelModal()\"\n    (discardChangesClick)=\"discardChanges()\"\n  >\n  </bb-identity-discard-modal-component>\n\n  <ng-template #notificationChangeLanguageSuccessHeader>\n    <strong\n      data-role=\"user-localization-success-notification-header\"\n      i18n=\"\n        Language and region changed success notification\n        header@@bb-user-localization-change-language.notification.success-header\"\n    >\n      Language and region changed successfully\n    </strong>\n  </ng-template>\n\n  <ng-template #notificationChangeLanguageSuccess>\n    <span\n      data-role=\"user-localization-success-notification\"\n      i18n=\"Language and region changed success notification@@bb-user-localization-change-language.notification.success\"\n    >\n      All future emails, SMS and push notification will use your new language and region.\n    </span>\n  </ng-template>\n\n  <ng-template #notificationFailure>\n    <span\n      data-role=\"user-localization-error-notification\"\n      i18n=\"\n        An unexpected error occurred notification@@bb-user-localization-change-language.notification.unexpected-error\"\n    >\n      An unexpected error occurred\n    </span>\n  </ng-template>\n</div>\n", components: [{ type: i4.BackButtonComponent, selector: "bb-identity-back-button", inputs: ["page"], outputs: ["backClick"] }, { type: i5.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i6.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i7.ViewStateContainerComponent, selector: "bb-identity-view-state-container-component", inputs: ["error", "loading"] }, { type: i8.UserLocalizationChangeLanguageFormComponent, selector: "bb-user-localization-change-language-form", inputs: ["options", "selectedLanguageCode", "saveLoading"], outputs: ["cancelClick", "saveClick"] }, { type: i9.DiscardModalComponent, selector: "bb-identity-discard-modal-component", inputs: ["modalOpen"], outputs: ["cancelModalClick", "discardChangesClick"] }], directives: [{ type: i10.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i10.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserLocalizationChangeLanguageViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-localization-change-language-view',
                    templateUrl: 'user-localization-change-language-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.UserLocalizationService }, { type: i2.Router }, { type: i3.NotificationService }, { type: i2.ActivatedRoute }]; }, propDecorators: { notificationChangeLanguageSuccess: [{
                type: ViewChild,
                args: ['notificationChangeLanguageSuccess']
            }], notificationChangeLanguageSuccessHeader: [{
                type: ViewChild,
                args: ['notificationChangeLanguageSuccessHeader']
            }], notificationFailure: [{
                type: ViewChild,
                args: ['notificationFailure']
            }] } });
//# sourceMappingURL=user-localization-change-language-view.component.js.map