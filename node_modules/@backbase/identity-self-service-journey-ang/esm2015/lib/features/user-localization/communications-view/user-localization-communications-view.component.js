import { Component } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { share } from 'rxjs/operators';
import { UserLocalizationService } from '../user-localization.service';
import { userLanguageCommonViewStatePipe } from '../shared/user-language-common-view-state.pipe';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../user-localization.service";
import * as i3 from "@backbase/ui-ang/header";
import * as i4 from "@backbase/identity-common-ang";
import * as i5 from "@backbase/ui-ang/icon";
import * as i6 from "@angular/common";
import * as i7 from "@backbase/ui-ang/button";
export class UserLocalizationCommunicationsViewComponent {
    constructor(router, userLocalizationService, activatedRoute) {
        this.router = router;
        this.userLocalizationService = userLocalizationService;
        this.activatedRoute = activatedRoute;
        this.viewStateSubject$ = new BehaviorSubject(undefined);
        this.viewState$ = this.viewStateSubject$.pipe(userLanguageCommonViewStatePipe(this.userLocalizationService), share());
    }
    changeLanguage() {
        var _a, _b;
        this.router.navigate([((_b = (_a = this.activatedRoute.snapshot) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.changeLanguagePath) || '../change-language'], {
            relativeTo: this.activatedRoute,
        });
    }
    getLanguageLabelFor(value) {
        var _a;
        return (_a = this.userLocalizationService.defaultLocalizationOptions.find((option) => option.value === value)) === null || _a === void 0 ? void 0 : _a.label;
    }
    get showEditableLanguage() {
        return this.userLocalizationService.config.showEditableLanguage;
    }
}
/** @nocollapse */ UserLocalizationCommunicationsViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserLocalizationCommunicationsViewComponent, deps: [{ token: i1.Router }, { token: i2.UserLocalizationService }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UserLocalizationCommunicationsViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: UserLocalizationCommunicationsViewComponent, selector: "bb-user-localization-communications-view", ngImport: i0, template: "<div data-role=\"user-localization-communications\">\n  <div class=\"bb-block bb-block--lg\">\n    <bb-header-ui\n      headingType=\"h1\"\n      data-role=\"user-localization-communications-header\"\n      heading=\"Communications\"\n      i18n-heading=\"Header for user language communications@@bb-user-localization-communications.header\"\n    >\n    </bb-header-ui>\n  </div>\n\n  <div class=\"card\" *ngIf=\"viewState$ | async as state\">\n    <div class=\"card-body\">\n      <bb-identity-view-state-container-component [error]=\"state.error\" [loading]=\"state.loading\">\n        <div class=\"bb-block bb-block--lg\">\n          <bb-header-ui\n            headingType=\"h2\"\n            data-role=\"user-localization-communications-header-external\"\n            heading=\"External communications\"\n            i18n-heading=\"\n              Header for user language external communications@@bb-user-localization-communications.header-external\"\n          >\n          </bb-header-ui>\n        </div>\n\n        <div class=\"bb-stack\" data-role=\"user-localization-communications-item\">\n          <div class=\"bb-stack__item bb-stack__item--fill\">\n            <div class=\"bb-stack bb-stack--wrap\">\n              <div class=\"bb-stack__item\">\n                <p\n                  class=\"bb-block bb-block--sm bb-subtitle bb-text-support\"\n                  i18n=\"Label for language and region@@bb-user-localization-communications.lanugage.label\"\n                >\n                  Language and region\n                </p>\n\n                <p\n                  *ngIf=\"\n                    state.languageRegion?.label ||\n                      getLanguageLabelFor(\n                        (state.languageRegion?.isDefault && state.languageRegion?.value) || ''\n                      ) as label;\n                    else noSelectedLabel\n                  \"\n                  data-role=\"user-localization-communications-chosen-label\"\n                  i18n=\"Chosen language and region@@bb-user-localization-communications.lanugage.selected\"\n                >\n                  {{ label }}\n                </p>\n                <ng-template #noSelectedLabel>\n                  <p\n                    data-role=\"user-localization-communications-default-label\"\n                    i18n=\"No language selected label@@bb-user-localization-communications.lanugage.not-selected\"\n                  >\n                    No language selected.\n                  </p>\n                </ng-template>\n              </div>\n              <div class=\"bb-stack__break bb-stack__break--sm-down\"></div>\n              <div\n                class=\"bb-stack__item bb-stack__item--fill bb-text-align-right bb-text-align-left--sm-down break-word\"\n              >\n                <button\n                  *ngIf=\"showEditableLanguage\"\n                  bbButton\n                  data-role=\"user-localization-communications-edit-button\"\n                  aria-label=\"Change your language and region\"\n                  i18n-aria-label=\"\n                    Change your language and region aria label@@bb-user-localization-communications.action.change\"\n                  type=\"button\"\n                  color=\"secondary\"\n                  [circle]=\"true\"\n                  (click)=\"changeLanguage()\"\n                >\n                  <bb-icon-ui name=\"edit\" size=\"md\" color=\"info\"> </bb-icon-ui>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </bb-identity-view-state-container-component>\n    </div>\n  </div>\n</div>\n", components: [{ type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4.ViewStateContainerComponent, selector: "bb-identity-view-state-container-component", inputs: ["error", "loading"] }, { type: i5.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i6.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserLocalizationCommunicationsViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-localization-communications-view',
                    templateUrl: 'user-localization-communications-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.UserLocalizationService }, { type: i1.ActivatedRoute }]; } });
//# sourceMappingURL=user-localization-communications-view.component.js.map