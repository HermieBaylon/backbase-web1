import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Optional, Inject, Component, ChangeDetectionStrategy, EventEmitter, Input, Output, ViewChild, NgModule } from '@angular/core';
import * as i6 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1$1 from '@angular/router';
import { RouterModule, provideRoutes } from '@angular/router';
import * as i1$4 from '@backbase/foundation-ang/core';
import { BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i4 from '@backbase/identity-common-ang';
import { createJourneyConfiguration, generateId, IdentityCommonAngModule } from '@backbase/identity-common-ang';
import * as i2 from '@backbase/user-identity-security-center-widget-ang';
import { UserIdentitySecurityCenterWidgetModule } from '@backbase/user-identity-security-center-widget-ang';
import * as i2$1 from '@backbase/user-manage-profile-widget-ang';
import { UserManageProfileWidgetModule } from '@backbase/user-manage-profile-widget-ang';
import * as i2$2 from '@backbase/device-information-widget-ang';
import { DeviceInformationWidgetModule } from '@backbase/device-information-widget-ang';
import * as i1 from '@backbase/user-http-ang';
import { BehaviorSubject, of, pipe } from 'rxjs';
import { tap, switchMap, map, startWith, catchError, share, finalize } from 'rxjs/operators';
import * as i3 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i5 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i7 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i3$2 from '@backbase/ui-ang/notification';
import { NotificationModule } from '@backbase/ui-ang/notification';
import * as i6$1 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import * as i1$2 from '@angular/forms';
import { Validators, ReactiveFormsModule } from '@angular/forms';
import * as i2$3 from '@backbase/ui-ang/input-radio-group';
import { InputRadioGroupModule } from '@backbase/ui-ang/input-radio-group';
import * as i3$1 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i4$1 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import * as i1$3 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';

const IdentitySelfServiceJourneyConfigurationToken = new InjectionToken('IdentitySelfServiceJourneyConfiguration injection token');

const localizationOptions = [
    Object.freeze({
        label: $localize `:Label for English language in the United States@@bb-identity-self-service-journey.lanugage.en-us.label:English (United States)`,
        value: 'en-US',
    }),
    Object.freeze({
        label: $localize `:Label for Spanish language in the United States@@bb-identity-self-service-journey.lanugage.es-us.label:Español (Estados Unidos)`,
        value: 'es-US',
    }),
];

const notificationDismissTime = 3;
const emailAddressTypes = ['Personal', 'Work'];
const postalAddressTypes = ['Home', 'Business', 'Mailing'];
const phoneNumberTypes = ['Home', 'Work', 'Mobile'];
const maxEmailAddresses = 3;
const maxPhoneNumbers = 3;
const maxPostalAddresses = 3;
const showWidgetHeader = true;
const phoneNumberCountryCode = 'CA';
const phoneNumberDebounceTime = 1;
const enablePhoneNumberFormatter = true;
const showEditableLanguage = true;
const routeParamNameUserId = 'userId';
const configDefaults = {
    userIdentitySecurityCenter: {
        notificationDismissTime,
    },
    userManageProfile: {
        notificationDismissTime,
        emailAddressTypes: [...emailAddressTypes],
        postalAddressTypes: [...postalAddressTypes],
        phoneNumberTypes: [...phoneNumberTypes],
        maxEmailAddresses,
        maxPhoneNumbers,
        maxPostalAddresses,
        showWidgetHeader,
        phoneNumberCountryCode,
        phoneNumberDebounceTime,
        enablePhoneNumberFormatter,
    },
    deviceInformation: {
        notificationDismissTime,
        routeParamNameUserId,
    },
    userLocalization: {
        notificationDismissTime,
        localizationOptions: [...localizationOptions],
        showEditableLanguage,
    },
};
class IdentitySelfServiceJourneyConfigurationService {
    constructor(configOverrides) {
        this.config = createJourneyConfiguration(configDefaults, configOverrides);
    }
    get userIdentitySecurityCenter() {
        return this.config.userIdentitySecurityCenter;
    }
    get userManageProfile() {
        return this.config.userManageProfile;
    }
    get deviceInformation() {
        return this.config.deviceInformation;
    }
    get userLocalization() {
        return this.config.userLocalization;
    }
}
/** @nocollapse */ IdentitySelfServiceJourneyConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdentitySelfServiceJourneyConfigurationService, deps: [{ token: IdentitySelfServiceJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ IdentitySelfServiceJourneyConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdentitySelfServiceJourneyConfigurationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdentitySelfServiceJourneyConfigurationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [IdentitySelfServiceJourneyConfigurationToken]
                }] }]; } });

class UserIdentitySecurityCenterViewComponent {
    constructor(
    /** @internal */
    configService) {
        this.configService = configService;
    }
}
/** @nocollapse */ UserIdentitySecurityCenterViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserIdentitySecurityCenterViewComponent, deps: [{ token: IdentitySelfServiceJourneyConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UserIdentitySecurityCenterViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: UserIdentitySecurityCenterViewComponent, selector: "bb-user-identity-security-center-view", ngImport: i0, template: `<bb-user-identity-security-center-widget
    [notificationDismissTime]="this.configService.userIdentitySecurityCenter.notificationDismissTime"
  >
  </bb-user-identity-security-center-widget>`, isInline: true, components: [{ type: i2.UserIdentitySecurityCenterWidgetComponent, selector: "bb-user-identity-security-center-widget", inputs: ["notificationDismissTime"], outputs: ["widgetStatus"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserIdentitySecurityCenterViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-identity-security-center-view',
                    template: `<bb-user-identity-security-center-widget
    [notificationDismissTime]="this.configService.userIdentitySecurityCenter.notificationDismissTime"
  >
  </bb-user-identity-security-center-widget>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: IdentitySelfServiceJourneyConfigurationService }]; } });

class UserManageProfileViewComponent {
    constructor(
    /** @internal */
    configService) {
        this.configService = configService;
    }
}
/** @nocollapse */ UserManageProfileViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserManageProfileViewComponent, deps: [{ token: IdentitySelfServiceJourneyConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UserManageProfileViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: UserManageProfileViewComponent, selector: "bb-user-manage-profile-view", ngImport: i0, template: `<bb-user-manage-profile-widget
    [notificationDismissTime]="this.configService.userManageProfile.notificationDismissTime"
    [emailAddressTypes]="this.configService.userManageProfile.emailAddressTypes"
    [postalAddressTypes]="this.configService.userManageProfile.postalAddressTypes"
    [phoneNumberTypes]="this.configService.userManageProfile.phoneNumberTypes"
    [maxEmailAddresses]="this.configService.userManageProfile.maxEmailAddresses"
    [maxPhoneNumbers]="this.configService.userManageProfile.maxPhoneNumbers"
    [maxPostalAddresses]="this.configService.userManageProfile.maxPostalAddresses"
    [showWidgetHeader]="this.configService.userManageProfile.showWidgetHeader"
    [phoneNumberCountryCode]="this.configService.userManageProfile.phoneNumberCountryCode"
    [phoneNumberDebounceTime]="this.configService.userManageProfile.phoneNumberDebounceTime"
    [enablePhoneNumberFormatter]="this.configService.userManageProfile.enablePhoneNumberFormatter"
  >
  </bb-user-manage-profile-widget>`, isInline: true, components: [{ type: i2$1.UserManageProfileWidgetComponent, selector: "bb-user-manage-profile-widget", inputs: ["emailAddressTypes", "postalAddressTypes", "phoneNumberTypes", "maxEmailAddresses", "maxPhoneNumbers", "maxPostalAddresses", "showWidgetHeader", "phoneNumberCountryCode", "phoneNumberDebounceTime", "enablePhoneNumberFormatter"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserManageProfileViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-manage-profile-view',
                    template: `<bb-user-manage-profile-widget
    [notificationDismissTime]="this.configService.userManageProfile.notificationDismissTime"
    [emailAddressTypes]="this.configService.userManageProfile.emailAddressTypes"
    [postalAddressTypes]="this.configService.userManageProfile.postalAddressTypes"
    [phoneNumberTypes]="this.configService.userManageProfile.phoneNumberTypes"
    [maxEmailAddresses]="this.configService.userManageProfile.maxEmailAddresses"
    [maxPhoneNumbers]="this.configService.userManageProfile.maxPhoneNumbers"
    [maxPostalAddresses]="this.configService.userManageProfile.maxPostalAddresses"
    [showWidgetHeader]="this.configService.userManageProfile.showWidgetHeader"
    [phoneNumberCountryCode]="this.configService.userManageProfile.phoneNumberCountryCode"
    [phoneNumberDebounceTime]="this.configService.userManageProfile.phoneNumberDebounceTime"
    [enablePhoneNumberFormatter]="this.configService.userManageProfile.enablePhoneNumberFormatter"
  >
  </bb-user-manage-profile-widget>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: IdentitySelfServiceJourneyConfigurationService }]; } });

class DeviceInformationViewComponent {
    constructor(
    /** @internal */
    configService) {
        this.configService = configService;
    }
}
/** @nocollapse */ DeviceInformationViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationViewComponent, deps: [{ token: IdentitySelfServiceJourneyConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ DeviceInformationViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeviceInformationViewComponent, selector: "bb-device-information-view", ngImport: i0, template: `<bb-device-information-widget
    [dismissTimeout]="this.configService.deviceInformation.notificationDismissTime"
    [isAdminWidget]="false"
  >
  </bb-device-information-widget>`, isInline: true, components: [{ type: i2$2.DeviceInformationWidgetComponent, selector: "bb-device-information-widget", inputs: ["dismissTimeout", "isAdminWidget", "dbsUserId"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-device-information-view',
                    template: `<bb-device-information-widget
    [dismissTimeout]="this.configService.deviceInformation.notificationDismissTime"
    [isAdminWidget]="false"
  >
  </bb-device-information-widget>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: IdentitySelfServiceJourneyConfigurationService }]; } });

// eslint-disable-next-line @typescript-eslint/ban-types
const cacheItem = (queryMethod) => {
    const subject$ = new BehaviorSubject(undefined);
    const update = () => queryMethod().pipe(tap((payload) => subject$.next(payload)));
    return {
        subject$,
        state$: subject$.pipe(switchMap((payload) => (payload !== undefined ? of(payload) : update()))),
        update,
    };
};

const findLanguageRegionOption = (localizationOptionsConfig = [], preferredLanguage) => localizationOptionsConfig.find((item) => item.value === preferredLanguage) || {
    isDefault: true,
    value: typeof preferredLanguage === 'string' ? preferredLanguage : undefined,
    label: '',
};

class UserLocalizationService {
    constructor(dataService, 
    /** @internal */
    configService) {
        this.dataService = dataService;
        this.configService = configService;
        this.getUserCacheItem = cacheItem(this.dataService.getOwnUser.bind(this.dataService));
        this.getUser$ = this.getUserCacheItem.state$;
        this.getUser = this.getUserCacheItem.update;
        this.defaultLocalizationOptions = localizationOptions;
        this.config = Object.freeze(Object.assign(Object.assign({}, this.configService.userLocalization), { notificationDismissTime: (this.configService.userLocalization.notificationDismissTime || 0) * 1000 }));
    }
    updateUser(userVO) {
        return this.dataService.updateOwnLanguage({
            updatePreferredLanguage: {
                preferredLanguage: userVO.preferredLanguage || '',
            },
        });
    }
}
/** @nocollapse */ UserLocalizationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserLocalizationService, deps: [{ token: i1.UserManagementService }, { token: IdentitySelfServiceJourneyConfigurationService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ UserLocalizationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserLocalizationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserLocalizationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.UserManagementService }, { type: IdentitySelfServiceJourneyConfigurationService }]; } });

class UserLocalizationComponent {
}
/** @nocollapse */ UserLocalizationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserLocalizationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UserLocalizationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: UserLocalizationComponent, selector: "bb-user-localization", providers: [UserLocalizationService], ngImport: i0, template: `<router-outlet></router-outlet>`, isInline: true, directives: [{ type: i1$1.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserLocalizationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-localization',
                    template: `<router-outlet></router-outlet>`,
                    providers: [UserLocalizationService],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }] });

const userLanguageCommonViewStatePipe = (userLocalizationService) => pipe(switchMap(() => userLocalizationService.getUser$.pipe(map((userProfile) => ({
    loading: false,
    languageRegion: findLanguageRegionOption(userLocalizationService.config.localizationOptions, userProfile.preferredLanguage),
})), startWith({ loading: true }), catchError((error) => of({ loading: false, error })))));

class UserLocalizationCommunicationsViewComponent {
    constructor(router, userLocalizationService, activatedRoute) {
        this.router = router;
        this.userLocalizationService = userLocalizationService;
        this.activatedRoute = activatedRoute;
        this.viewStateSubject$ = new BehaviorSubject(undefined);
        this.viewState$ = this.viewStateSubject$.pipe(userLanguageCommonViewStatePipe(this.userLocalizationService), share());
    }
    changeLanguage() {
        var _a, _b;
        this.router.navigate([((_b = (_a = this.activatedRoute.snapshot) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.changeLanguagePath) || '../change-language'], {
            relativeTo: this.activatedRoute,
        });
    }
    getLanguageLabelFor(value) {
        var _a;
        return (_a = this.userLocalizationService.defaultLocalizationOptions.find((option) => option.value === value)) === null || _a === void 0 ? void 0 : _a.label;
    }
    get showEditableLanguage() {
        return this.userLocalizationService.config.showEditableLanguage;
    }
}
/** @nocollapse */ UserLocalizationCommunicationsViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserLocalizationCommunicationsViewComponent, deps: [{ token: i1$1.Router }, { token: UserLocalizationService }, { token: i1$1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UserLocalizationCommunicationsViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: UserLocalizationCommunicationsViewComponent, selector: "bb-user-localization-communications-view", ngImport: i0, template: "<div data-role=\"user-localization-communications\">\n  <div class=\"bb-block bb-block--lg\">\n    <bb-header-ui\n      headingType=\"h1\"\n      data-role=\"user-localization-communications-header\"\n      heading=\"Communications\"\n      i18n-heading=\"Header for user language communications@@bb-user-localization-communications.header\"\n    >\n    </bb-header-ui>\n  </div>\n\n  <div class=\"card\" *ngIf=\"viewState$ | async as state\">\n    <div class=\"card-body\">\n      <bb-identity-view-state-container-component [error]=\"state.error\" [loading]=\"state.loading\">\n        <div class=\"bb-block bb-block--lg\">\n          <bb-header-ui\n            headingType=\"h2\"\n            data-role=\"user-localization-communications-header-external\"\n            heading=\"External communications\"\n            i18n-heading=\"\n              Header for user language external communications@@bb-user-localization-communications.header-external\"\n          >\n          </bb-header-ui>\n        </div>\n\n        <div class=\"bb-stack\" data-role=\"user-localization-communications-item\">\n          <div class=\"bb-stack__item bb-stack__item--fill\">\n            <div class=\"bb-stack bb-stack--wrap\">\n              <div class=\"bb-stack__item\">\n                <p\n                  class=\"bb-block bb-block--sm bb-subtitle bb-text-support\"\n                  i18n=\"Label for language and region@@bb-user-localization-communications.lanugage.label\"\n                >\n                  Language and region\n                </p>\n\n                <p\n                  *ngIf=\"\n                    state.languageRegion?.label ||\n                      getLanguageLabelFor(\n                        (state.languageRegion?.isDefault && state.languageRegion?.value) || ''\n                      ) as label;\n                    else noSelectedLabel\n                  \"\n                  data-role=\"user-localization-communications-chosen-label\"\n                  i18n=\"Chosen language and region@@bb-user-localization-communications.lanugage.selected\"\n                >\n                  {{ label }}\n                </p>\n                <ng-template #noSelectedLabel>\n                  <p\n                    data-role=\"user-localization-communications-default-label\"\n                    i18n=\"No language selected label@@bb-user-localization-communications.lanugage.not-selected\"\n                  >\n                    No language selected.\n                  </p>\n                </ng-template>\n              </div>\n              <div class=\"bb-stack__break bb-stack__break--sm-down\"></div>\n              <div\n                class=\"bb-stack__item bb-stack__item--fill bb-text-align-right bb-text-align-left--sm-down break-word\"\n              >\n                <button\n                  *ngIf=\"showEditableLanguage\"\n                  bbButton\n                  data-role=\"user-localization-communications-edit-button\"\n                  aria-label=\"Change your language and region\"\n                  i18n-aria-label=\"\n                    Change your language and region aria label@@bb-user-localization-communications.action.change\"\n                  type=\"button\"\n                  color=\"secondary\"\n                  [circle]=\"true\"\n                  (click)=\"changeLanguage()\"\n                >\n                  <bb-icon-ui name=\"edit\" size=\"md\" color=\"info\"> </bb-icon-ui>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </bb-identity-view-state-container-component>\n    </div>\n  </div>\n</div>\n", components: [{ type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4.ViewStateContainerComponent, selector: "bb-identity-view-state-container-component", inputs: ["error", "loading"] }, { type: i5.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i6.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserLocalizationCommunicationsViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-localization-communications-view',
                    templateUrl: 'user-localization-communications-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$1.Router }, { type: UserLocalizationService }, { type: i1$1.ActivatedRoute }]; } });

class BackButtonComponent {
    constructor() {
        /**
         * Output to track when back was clicked
         */
        this.backClick = new EventEmitter();
    }
}
/** @nocollapse */ BackButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BackButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BackButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: BackButtonComponent, selector: "bb-identity-back-button", inputs: { page: "page" }, outputs: { backClick: "backClick" }, ngImport: i0, template: "<div class=\"bb-block bb-block--lg\" data-role=\"back-button-wrapper\">\n  <button bbButton color=\"link-text\" data-role=\"back-button\" type=\"button\" buttonSize=\"sm\" (click)=\"backClick.emit()\">\n    <bb-icon-ui name=\"arrow-back\"></bb-icon-ui>\n    <span i18n=\"Back to button@@bb-identity.back-button\"> Back to {{ page }} </span>\n  </button>\n</div>\n", components: [{ type: i5.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BackButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-identity-back-button',
                    templateUrl: './back-button.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { page: [{
                type: Input
            }], backClick: [{
                type: Output
            }] } });

class UserLocalizationChangeLanguageFormComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        /**
         * Set language options
         */
        this.options = [];
        /**
         * Set save loading language
         */
        this.saveLoading = false;
        /**
         * Output for cancel clicked
         */
        this.cancelClick = new EventEmitter();
        /**
         * Output for save clicked
         */
        this.saveClick = new EventEmitter();
        this.ids = {
            languageRegionLabel: generateId('language-region'),
        };
        this.isSubmitted = false;
    }
    ngOnInit() {
        this.form = this.formBuilder.group({
            languageRegion: [{ value: this.selectedLanguageCode, disabled: false }, Validators.required],
        });
    }
    save() {
        this.isSubmitted = true;
        if (this.form && this.form.valid) {
            this.saveClick.emit({ preferredLanguage: this.form.value.languageRegion });
        }
    }
    get showLanguageControlError() {
        return !((this.form || {}).controls || {}).languageRegion.value && this.isSubmitted;
    }
    get defaultLocalizationOptions() {
        return localizationOptions;
    }
}
/** @nocollapse */ UserLocalizationChangeLanguageFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserLocalizationChangeLanguageFormComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UserLocalizationChangeLanguageFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: UserLocalizationChangeLanguageFormComponent, selector: "bb-user-localization-change-language-form", inputs: { options: "options", selectedLanguageCode: "selectedLanguageCode", saveLoading: "saveLoading" }, outputs: { cancelClick: "cancelClick", saveClick: "saveClick" }, ngImport: i0, template: "<form *ngIf=\"form\" [formGroup]=\"form\" (submit)=\"save()\">\n  <div class=\"bb-block bb-block--lg\">\n    <bb-input-radio-group-ui\n      data-role=\"user-localization-change-language-form-radio-option-group\"\n      formControlName=\"languageRegion\"\n      label=\"Language and region\"\n      i18n-label=\"Label for language and region radio options@@bb-user-localization-change-language-form.label.lanugage\"\n      [preselect]=\"false\"\n      [required]=\"true\"\n    >\n      <ng-container *ngIf=\"(options.length && options) || defaultLocalizationOptions as localizationOptions\">\n        <bb-input-radio-ui\n          *ngFor=\"let option of localizationOptions\"\n          [value]=\"option.value\"\n          [labelTemplate]=\"radioLabelTemplate\"\n          [labelTemplateContext]=\"option\"\n        >\n        </bb-input-radio-ui>\n      </ng-container>\n    </bb-input-radio-group-ui>\n    <bb-input-validation-message-ui [showErrors]=\"showLanguageControlError\">\n      <span\n        i18n=\"\n          Language required error|Error to say that language is a required\n          field@@bb-user-localization-change-language-form.language.errors.required\"\n      >\n        You must choose a language\n      </span>\n    </bb-input-validation-message-ui>\n  </div>\n\n  <div class=\"bb-button-bar bb-button-bar--reverse\">\n    <bb-load-button-ui\n      type=\"submit\"\n      data-role=\"user-localization-change-language-form-save-button\"\n      class=\"bb-button-bar__button\"\n      [isLoading]=\"saveLoading\"\n      i18n=\"Save changes button action@@bb-user-localization-change-language-form.action.save\"\n    >\n      Save changes\n    </bb-load-button-ui>\n    <button\n      bbButton\n      data-role=\"user-localization-change-language-form-cancel-button\"\n      color=\"secondary\"\n      class=\"bb-button-bar__button\"\n      type=\"button\"\n      (click)=\"cancelClick.emit()\"\n      i18n=\"Cancel changes button action@@bb-user-localization-change-language-form.action.cancel\"\n    >\n      Cancel\n    </button>\n  </div>\n</form>\n\n<ng-template #radioLabelTemplate let-labelTemplateContext=\"labelTemplateContext\">\n  <span class=\"bb-input-radio-group__radio-label\" [lang]=\"labelTemplateContext.value\">\n    {{ labelTemplateContext.label }}\n  </span>\n</ng-template>\n", components: [{ type: i2$3.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2$3.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i3$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4$1.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserLocalizationChangeLanguageFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-localization-change-language-form',
                    templateUrl: './user-localization-change-language-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; }, propDecorators: { options: [{
                type: Input
            }], selectedLanguageCode: [{
                type: Input
            }], saveLoading: [{
                type: Input
            }], cancelClick: [{
                type: Output
            }], saveClick: [{
                type: Output
            }] } });

class DiscardModalComponent {
    constructor() {
        /**
         * Set whether modal show be open
         */
        this.modalOpen = false;
        /**
         * Output to track when cancel was clicked
         */
        this.cancelModalClick = new EventEmitter();
        /**
         * Output to track when discard was clicked
         */
        this.discardChangesClick = new EventEmitter();
    }
}
/** @nocollapse */ DiscardModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DiscardModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ DiscardModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DiscardModalComponent, selector: "bb-identity-discard-modal-component", inputs: { modalOpen: "modalOpen" }, outputs: { cancelModalClick: "cancelModalClick", discardChangesClick: "discardChangesClick" }, ngImport: i0, template: "<bb-modal-ui data-role=\"discard-modal\" [isOpen]=\"modalOpen\" (cancel)=\"cancelModalClick.emit()\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <div data-role=\"discard-modal-header\">\n        <bb-header-ui\n          headingType=\"h3\"\n          i18n-heading=\"Discard changes modal title@@bb-identity-discard-modal.title\"\n          heading=\"Discard changes?\"\n        >\n        </bb-header-ui>\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody i18n=\"Discard changes modal body@@bb-identity-discard-modal.body\">\n      Any unsaved changes you've made will be lost.\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <button\n        bbButton\n        data-role=\"discard-modal-cancel-button\"\n        color=\"secondary\"\n        (click)=\"cancelModalClick.emit()\"\n        i18n=\"Dismiss discard modal button@@bb-identity-discard-modal.cancel\"\n      >\n        Cancel\n      </button>\n      <button\n        bbButton\n        data-role=\"discard-modal-confirm-button\"\n        (click)=\"discardChangesClick.emit()\"\n        i18n=\"Confirm discard modal button@@bb-identity-discard-modal.confirm\"\n      >\n        Discard\n      </button>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1$3.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$3.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1$3.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1$3.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1$3.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1$3.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1$3.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DiscardModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-identity-discard-modal-component',
                    templateUrl: './discard-modal.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { modalOpen: [{
                type: Input
            }], cancelModalClick: [{
                type: Output
            }], discardChangesClick: [{
                type: Output
            }] } });

class UserLocalizationChangeLanguageViewComponent {
    constructor(userLocalizationService, router, notificationService, activatedRoute) {
        this.userLocalizationService = userLocalizationService;
        this.router = router;
        this.notificationService = notificationService;
        this.activatedRoute = activatedRoute;
        this.modalOpen = false;
        this.isSaveLoadingSubject$ = new BehaviorSubject(false);
        this.viewStateSubject$ = new BehaviorSubject(undefined);
        this.viewState$ = this.viewStateSubject$.pipe(userLanguageCommonViewStatePipe(this.userLocalizationService), share());
        this.ids = {
            languageRegionLabel: generateId('language-region'),
        };
    }
    saveChanges({ preferredLanguage }) {
        this.isSaveLoadingSubject$.next(true);
        this.userLocalizationService
            .updateUser({ preferredLanguage })
            .pipe(switchMap(() => this.userLocalizationService.getUser()), finalize(() => this.isSaveLoadingSubject$.next(false)))
            .subscribe({
            next: () => {
                this.showNotification(this.notificationChangeLanguageSuccess, this.notificationChangeLanguageSuccessHeader);
                this.navigateCommunications();
            },
            error: () => {
                this.showNotification(this.notificationFailure, undefined, 'error');
            },
        });
    }
    cancelChangeLanguage() {
        this.modalOpen = true;
    }
    cancelModal() {
        this.modalOpen = false;
    }
    discardChanges() {
        this.modalOpen = false;
        this.navigateCommunications();
    }
    navigateCommunications() {
        var _a, _b;
        this.router.navigate([((_b = (_a = this.activatedRoute.snapshot) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.communicationsPath) || '../communications'], {
            relativeTo: this.activatedRoute,
        });
    }
    showNotification(message, header, modifier) {
        this.notificationService.showNotification({
            header,
            message,
            modifier: modifier || 'success',
            ttl: this.userLocalizationService.config.notificationDismissTime,
        });
    }
    get localizationOptions() {
        return this.userLocalizationService.config.localizationOptions;
    }
}
/** @nocollapse */ UserLocalizationChangeLanguageViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserLocalizationChangeLanguageViewComponent, deps: [{ token: UserLocalizationService }, { token: i1$1.Router }, { token: i3$2.NotificationService }, { token: i1$1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UserLocalizationChangeLanguageViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: UserLocalizationChangeLanguageViewComponent, selector: "bb-user-localization-change-language-view", viewQueries: [{ propertyName: "notificationChangeLanguageSuccess", first: true, predicate: ["notificationChangeLanguageSuccess"], descendants: true }, { propertyName: "notificationChangeLanguageSuccessHeader", first: true, predicate: ["notificationChangeLanguageSuccessHeader"], descendants: true }, { propertyName: "notificationFailure", first: true, predicate: ["notificationFailure"], descendants: true }], ngImport: i0, template: "<div *ngIf=\"viewState$ | async as state\" data-role=\"user-localization-change-language\">\n  <bb-identity-back-button\n    page=\"Communications\"\n    i18n-page=\"Page description for change language back button@@bb-user-localization-change-language.back-link-page\"\n    (backClick)=\"cancelChangeLanguage()\"\n  >\n  </bb-identity-back-button>\n\n  <div class=\"bb-block bb-block--lg\">\n    <bb-header-ui\n      headingType=\"h1\"\n      data-role=\"user-localization-change-language-header\"\n      heading=\"Change language and region\"\n      i18n-heading=\"Header for change language@@bb-user-localization-change-language.header\"\n    >\n    </bb-header-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\" *ngIf=\"!state.error\">\n    <bb-alert-ui\n      modifier=\"info\"\n      title=\"This only affects external communication including emails, SMS and push notifications.\"\n      i18n-title=\"Alert info notification for change language region@@bb-user-localization-change-language.info\"\n    >\n    </bb-alert-ui>\n  </div>\n\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <bb-identity-view-state-container-component [error]=\"state.error\" [loading]=\"state.loading\">\n        <bb-user-localization-change-language-form\n          [selectedLanguageCode]=\"state.languageRegion?.value || localizationOptions[0]?.value\"\n          [options]=\"localizationOptions\"\n          [saveLoading]=\"(isSaveLoadingSubject$ | async) || false\"\n          (cancelClick)=\"cancelChangeLanguage()\"\n          (saveClick)=\"saveChanges($event)\"\n        >\n        </bb-user-localization-change-language-form>\n      </bb-identity-view-state-container-component>\n    </div>\n  </div>\n\n  <bb-identity-discard-modal-component\n    [modalOpen]=\"modalOpen\"\n    (cancelModalClick)=\"cancelModal()\"\n    (discardChangesClick)=\"discardChanges()\"\n  >\n  </bb-identity-discard-modal-component>\n\n  <ng-template #notificationChangeLanguageSuccessHeader>\n    <strong\n      data-role=\"user-localization-success-notification-header\"\n      i18n=\"\n        Language and region changed success notification\n        header@@bb-user-localization-change-language.notification.success-header\"\n    >\n      Language and region changed successfully\n    </strong>\n  </ng-template>\n\n  <ng-template #notificationChangeLanguageSuccess>\n    <span\n      data-role=\"user-localization-success-notification\"\n      i18n=\"Language and region changed success notification@@bb-user-localization-change-language.notification.success\"\n    >\n      All future emails, SMS and push notification will use your new language and region.\n    </span>\n  </ng-template>\n\n  <ng-template #notificationFailure>\n    <span\n      data-role=\"user-localization-error-notification\"\n      i18n=\"\n        An unexpected error occurred notification@@bb-user-localization-change-language.notification.unexpected-error\"\n    >\n      An unexpected error occurred\n    </span>\n  </ng-template>\n</div>\n", components: [{ type: BackButtonComponent, selector: "bb-identity-back-button", inputs: ["page"], outputs: ["backClick"] }, { type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i6$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i4.ViewStateContainerComponent, selector: "bb-identity-view-state-container-component", inputs: ["error", "loading"] }, { type: UserLocalizationChangeLanguageFormComponent, selector: "bb-user-localization-change-language-form", inputs: ["options", "selectedLanguageCode", "saveLoading"], outputs: ["cancelClick", "saveClick"] }, { type: DiscardModalComponent, selector: "bb-identity-discard-modal-component", inputs: ["modalOpen"], outputs: ["cancelModalClick", "discardChangesClick"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i6.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserLocalizationChangeLanguageViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-user-localization-change-language-view',
                    templateUrl: 'user-localization-change-language-view.component.html',
                }]
        }], ctorParameters: function () { return [{ type: UserLocalizationService }, { type: i1$1.Router }, { type: i3$2.NotificationService }, { type: i1$1.ActivatedRoute }]; }, propDecorators: { notificationChangeLanguageSuccess: [{
                type: ViewChild,
                args: ['notificationChangeLanguageSuccess']
            }], notificationChangeLanguageSuccessHeader: [{
                type: ViewChild,
                args: ['notificationChangeLanguageSuccessHeader']
            }], notificationFailure: [{
                type: ViewChild,
                args: ['notificationFailure']
            }] } });

class IdentitySelfServiceJourneyComponent {
}
/** @nocollapse */ IdentitySelfServiceJourneyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdentitySelfServiceJourneyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ IdentitySelfServiceJourneyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: IdentitySelfServiceJourneyComponent, selector: "bb-identity-self-service-journey", ngImport: i0, template: "<bb-routable-tab-set data-role=\"user-context-routable-tab-set\"></bb-routable-tab-set>\n", components: [{ type: i4.RoutableTabComponent, selector: "bb-routable-tab-set" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdentitySelfServiceJourneyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-identity-self-service-journey',
                    templateUrl: './identity-self-service-journey.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }] });

const uiModules$1 = [HeaderModule, ButtonModule, ModalModule, IconModule];
const components$1 = [DiscardModalComponent, BackButtonComponent];
class SelfServiceUiModule {
}
/** @nocollapse */ SelfServiceUiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SelfServiceUiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ SelfServiceUiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SelfServiceUiModule, declarations: [DiscardModalComponent, BackButtonComponent], imports: [CommonModule, HeaderModule, ButtonModule, ModalModule, IconModule], exports: [HeaderModule, ButtonModule, ModalModule, IconModule, DiscardModalComponent, BackButtonComponent] });
/** @nocollapse */ SelfServiceUiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SelfServiceUiModule, imports: [[CommonModule, ...uiModules$1], HeaderModule, ButtonModule, ModalModule, IconModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SelfServiceUiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules$1],
                    declarations: [...components$1],
                    exports: [...uiModules$1, ...components$1],
                }]
        }] });

const uiModules = [
    HeaderModule,
    IconModule,
    ButtonModule,
    LoadButtonModule,
    AlertModule,
    InputRadioGroupModule,
    ModalModule,
    NotificationModule,
    InputValidationMessageModule,
];
const components = [
    UserIdentitySecurityCenterViewComponent,
    UserManageProfileViewComponent,
    DeviceInformationViewComponent,
    UserLocalizationComponent,
    UserLocalizationCommunicationsViewComponent,
    UserLocalizationChangeLanguageViewComponent,
    UserLocalizationChangeLanguageFormComponent,
];
const widgetModules = [
    UserIdentitySecurityCenterWidgetModule,
    UserManageProfileWidgetModule,
    DeviceInformationWidgetModule,
];
class SelfServiceFeaturesModule {
}
/** @nocollapse */ SelfServiceFeaturesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SelfServiceFeaturesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ SelfServiceFeaturesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SelfServiceFeaturesModule, declarations: [UserIdentitySecurityCenterViewComponent,
        UserManageProfileViewComponent,
        DeviceInformationViewComponent,
        UserLocalizationComponent,
        UserLocalizationCommunicationsViewComponent,
        UserLocalizationChangeLanguageViewComponent,
        UserLocalizationChangeLanguageFormComponent], imports: [CommonModule,
        ReactiveFormsModule,
        RouterModule, HeaderModule,
        IconModule,
        ButtonModule,
        LoadButtonModule,
        AlertModule,
        InputRadioGroupModule,
        ModalModule,
        NotificationModule,
        InputValidationMessageModule, UserIdentitySecurityCenterWidgetModule,
        UserManageProfileWidgetModule,
        DeviceInformationWidgetModule, IdentityCommonAngModule,
        SelfServiceUiModule], exports: [RouterModule, UserIdentitySecurityCenterViewComponent,
        UserManageProfileViewComponent,
        DeviceInformationViewComponent,
        UserLocalizationComponent,
        UserLocalizationCommunicationsViewComponent,
        UserLocalizationChangeLanguageViewComponent,
        UserLocalizationChangeLanguageFormComponent, UserIdentitySecurityCenterWidgetModule,
        UserManageProfileWidgetModule,
        DeviceInformationWidgetModule] });
/** @nocollapse */ SelfServiceFeaturesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SelfServiceFeaturesModule, imports: [[
            CommonModule,
            ReactiveFormsModule,
            RouterModule,
            ...uiModules,
            ...widgetModules,
            IdentityCommonAngModule,
            SelfServiceUiModule,
        ], RouterModule, UserIdentitySecurityCenterWidgetModule,
        UserManageProfileWidgetModule,
        DeviceInformationWidgetModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SelfServiceFeaturesModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        RouterModule,
                        ...uiModules,
                        ...widgetModules,
                        IdentityCommonAngModule,
                        SelfServiceUiModule,
                    ],
                    declarations: [...components],
                    exports: [RouterModule, ...components, ...widgetModules],
                }]
        }] });

const defaultRoute = {
    path: '',
    component: IdentitySelfServiceJourneyComponent,
    children: [
        { path: '', redirectTo: 'profile', pathMatch: 'full' },
        {
            path: 'profile',
            data: {
                title: $localize `:Tab label for managing user profile@@bb-identity-self-service-journey.tab-user-manage-profile:Profile`,
            },
            component: UserManageProfileViewComponent,
        },
        {
            path: 'user-localization',
            data: {
                title: $localize `:Tab label for changing user preferences@@bb-identity-self-service-journey.tab-localization:Localization`,
            },
            component: UserLocalizationComponent,
            children: [
                { path: '', redirectTo: 'communications', pathMatch: 'full' },
                {
                    path: 'communications',
                    component: UserLocalizationCommunicationsViewComponent,
                },
                {
                    path: 'change-language',
                    component: UserLocalizationChangeLanguageViewComponent,
                },
            ],
        },
        {
            path: 'login-security',
            data: {
                title: $localize `:Tab label for login and security settings@@bb-identity-self-service-journey.tab-login-security:Login & security`,
            },
            component: UserIdentitySecurityCenterViewComponent,
        },
        {
            path: 'devices',
            data: { title: $localize `:Tab label for managing devices@@bb-identity-self-service-journey.tab-devices:Devices` },
            component: DeviceInformationViewComponent,
        },
    ],
};
class IdentitySelfServiceJourneyModule {
    static forRoot(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    data = { route: defaultRoute }) {
        return {
            ngModule: IdentitySelfServiceJourneyModule,
            providers: [provideRoutes([data.route])],
        };
    }
}
/** @nocollapse */ IdentitySelfServiceJourneyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdentitySelfServiceJourneyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ IdentitySelfServiceJourneyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdentitySelfServiceJourneyModule, declarations: [IdentitySelfServiceJourneyComponent], imports: [CommonModule,
        RouterModule, i1$4.BackbaseCoreModule, IdentityCommonAngModule,
        SelfServiceFeaturesModule], exports: [RouterModule, IdentitySelfServiceJourneyComponent] });
/** @nocollapse */ IdentitySelfServiceJourneyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdentitySelfServiceJourneyModule, providers: [IdentitySelfServiceJourneyConfigurationService], imports: [[
            CommonModule,
            RouterModule,
            BackbaseCoreModule.forRoot({
                classMap: {
                    IdentitySelfServiceJourneyComponent,
                },
            }),
            IdentityCommonAngModule,
            SelfServiceFeaturesModule,
        ], RouterModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdentitySelfServiceJourneyModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        RouterModule,
                        BackbaseCoreModule.forRoot({
                            classMap: {
                                IdentitySelfServiceJourneyComponent,
                            },
                        }),
                        IdentityCommonAngModule,
                        SelfServiceFeaturesModule,
                    ],
                    declarations: [IdentitySelfServiceJourneyComponent],
                    providers: [IdentitySelfServiceJourneyConfigurationService],
                    exports: [RouterModule, IdentitySelfServiceJourneyComponent],
                }]
        }] });

/**
 * Shell
 */

/**
 * Generated bundle index. Do not edit.
 */

export { BackButtonComponent, DeviceInformationViewComponent, DiscardModalComponent, IdentitySelfServiceJourneyComponent, IdentitySelfServiceJourneyConfigurationService, IdentitySelfServiceJourneyConfigurationToken, IdentitySelfServiceJourneyModule, SelfServiceFeaturesModule, SelfServiceUiModule, UserIdentitySecurityCenterViewComponent, UserLocalizationChangeLanguageFormComponent, UserLocalizationChangeLanguageViewComponent, UserLocalizationCommunicationsViewComponent, UserLocalizationComponent, UserLocalizationService, UserManageProfileViewComponent, cacheItem, defaultRoute, findLanguageRegionOption };
//# sourceMappingURL=backbase-identity-self-service-journey-ang.js.map
