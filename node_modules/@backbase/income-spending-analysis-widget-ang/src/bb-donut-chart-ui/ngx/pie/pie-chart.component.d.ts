import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, TemplateRef } from '@angular/core';
import { BaseChartComponent, ColorHelper, ScaleType, ViewDimensions } from '@swimlane/ngx-charts';
import { ChartDataItemExtended, LegendOptions } from '../../model/types';
import * as i0 from "@angular/core";
export declare class PieChartComponent extends BaseChartComponent {
    protected chartElement: ElementRef;
    protected zone: NgZone;
    protected cd: ChangeDetectorRef;
    /**
     * Array of Chart data objects needed for the chart to be rendered.
     */
    series: ChartDataItemExtended[];
    /**
     * Flag to show/hide the chart labels.
     */
    labels: boolean;
    /**
     * Flag to show/hide the chart legend.
     */
    legend: boolean;
    /**
     * Title for the chart legend.
     */
    legendTitle: string;
    /**
     * Make the radius of each slice proportional to it's value.
     */
    explodeSlices: boolean;
    /**
     * Sets the type of the chart.
     */
    doughnut: boolean;
    /**
     * The width of the charts arc.
     */
    arcWidth: number;
    /**
     * If enabled adds gradient to the chart.
     */
    gradient: boolean | undefined;
    /**
     * Preselects an active slice of the chart.
     */
    activeEntries: ChartDataItemExtended[];
    /**
     * Disable/enable the tooltip.
     */
    tooltipDisabled: boolean;
    /**
     * Pass custom formating if needed for the chart labels.
     */
    labelFormatting: any;
    /**
     * The template for the label.
     */
    labelTemplate: TemplateRef<any> | undefined;
    /**
     * Sets the threshold in which the label of each section is visible.
     */
    labelThreshold: number;
    /**
     * Enable/disable label trimming.
     */
    trimLabels: boolean;
    /**
     * Set the max length of the label characters.
     */
    maxLabelLength: number;
    /**
     * Text for the tooltip.
     */
    tooltipText: string | undefined;
    /**
     * EventEmitter for triggering a dblclick event.
     */
    dblclick: EventEmitter<any>;
    /**
     * EventEmitter for triggering a select event.
     */
    select: EventEmitter<{}>;
    /**
     * EventEmitter for triggering a activate event.
     */
    activate: EventEmitter<any>;
    /**
     * EventEmitter for triggering a deactivate event.
     */
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any> | undefined;
    translation: string | undefined;
    outerRadius: number | undefined;
    innerRadius: number | undefined;
    data: ChartDataItemExtended[] | undefined;
    colors: ColorHelper | undefined;
    domain: string[];
    dims: ViewDimensions | undefined;
    margins: number[];
    legendOptions: LegendOptions | undefined;
    constructor(chartElement: ElementRef, zone: NgZone, cd: ChangeDetectorRef, platformId: string);
    get chartEl(): ElementRef<any>;
    update(): void;
    getDomain(): string[];
    onClick(data: ChartDataItemExtended): void;
    setColors(): void;
    getLegendOptions(): {
        scaleType: ScaleType;
        domain: string[];
        colors: ColorHelper | undefined;
        title: string;
    };
    onActivate(item: ChartDataItemExtended): void;
    onDeactivate(item: ChartDataItemExtended): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PieChartComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PieChartComponent, "bb-charts-pie-chart", never, { "series": "series"; "labels": "labels"; "legend": "legend"; "legendTitle": "legendTitle"; "explodeSlices": "explodeSlices"; "doughnut": "doughnut"; "arcWidth": "arcWidth"; "gradient": "gradient"; "activeEntries": "activeEntries"; "tooltipDisabled": "tooltipDisabled"; "labelFormatting": "labelFormatting"; "labelTemplate": "labelTemplate"; "labelThreshold": "labelThreshold"; "trimLabels": "trimLabels"; "maxLabelLength": "maxLabelLength"; "tooltipText": "tooltipText"; }, { "dblclick": "dblclick"; "select": "select"; "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
}
