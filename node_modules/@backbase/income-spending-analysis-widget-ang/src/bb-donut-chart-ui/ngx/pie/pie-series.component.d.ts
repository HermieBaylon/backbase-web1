import { CurrencyPipe } from '@angular/common';
import { ElementRef, EventEmitter, OnChanges, TemplateRef } from '@angular/core';
import { ColorHelper, PlacementTypes, ViewDimensions } from '@swimlane/ngx-charts';
import { Arc, ChartDataItemExtended } from '../../model/types';
import * as i0 from "@angular/core";
export declare class PieSeriesComponent implements OnChanges {
    private readonly currencyPipe;
    /**
     * Custom color palette for the chart.
     */
    colors: ColorHelper | undefined;
    /**
     * Array of Chart data objects needed for the chart to be rendered.
     */
    series: ChartDataItemExtended[];
    /**
     * Dimensions of the chart slice.
     */
    dims: ViewDimensions | undefined;
    /**
     * Reference to the chart element.
     */
    chartElement: ElementRef | undefined;
    /**
     * Inner slice radius.
     */
    innerRadius: number;
    /**
     * Outer slice radius.
     */
    outerRadius: number;
    /**
     * Slice offsets.
     */
    margins: number[];
    /**
     * Make the radius of each slice proportional to it's value.
     */
    explodeSlices: boolean | undefined;
    /**
     * Flag to show/hide labels.
     */
    showLabels: boolean;
    /**
     * If enabled adds gradient to the chart.
     */
    gradient: boolean | undefined;
    /**
     * Preselects an active slice of the chart.
     */
    activeEntries: ChartDataItemExtended[];
    /**
     * Sets the threshold in which the label of each section is visible.
     */
    labelThreshold: number;
    /**
     * Pass custom formating if needed for the chart labels.
     */
    labelFormatting: any;
    /**
     * The template for the label.
     */
    labelTemplate: TemplateRef<any> | undefined;
    /**
     * Enable/disable label trimming.
     */
    trimLabels: boolean;
    /**
     * Set the max length of the label characters.
     */
    maxLabelLength: number;
    /**
     * Text for the tooltip.
     */
    tooltipText: ((o: any) => any) | undefined;
    /**
     * Disable/enable the tooltip.
     */
    tooltipDisabled: boolean;
    /**
     * Template for the tooltip.
     */
    tooltipTemplate: TemplateRef<any> | undefined;
    /**
     * Enable/Disable animations.
     */
    animations: boolean;
    /**
     * EventEmitter for triggering a select event.
     */
    select: EventEmitter<any>;
    /**
     * EventEmitter for triggering a activate event.
     */
    activate: EventEmitter<any>;
    /**
     * EventEmitter for triggering a deactivate event.
     */
    deactivate: EventEmitter<any>;
    /**
     * EventEmitter for triggering a dblclick event.
     */
    dblclick: EventEmitter<any>;
    max: number | undefined;
    data: Arc[];
    constructor(currencyPipe: CurrencyPipe);
    ngOnChanges(): void;
    update(): void;
    midAngle(d: Arc): number;
    outerArc(padding: number): any;
    calculateLabelPositions(pieData: Arc[]): Arc[];
    labelVisible(myArc: Arc): boolean;
    getTooltipTitle(a: Arc): any;
    getTooltipPlacement(a: Arc): PlacementTypes.Left | PlacementTypes.Right;
    labelText(myArc: Arc): string;
    label(myArc: Arc): string;
    defaultTooltipText(myArc: Arc): string;
    getTooltipPosition(myArc: Arc): [number, number];
    color(myArc: Arc): string;
    icon(myArc: Arc): string;
    trackBy(index: number, item: Arc): string;
    onClick(data: ChartDataItemExtended): void;
    isActive(entry: ChartDataItemExtended): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<PieSeriesComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PieSeriesComponent, "g[bb-charts-pie-series]", never, { "colors": "colors"; "series": "series"; "dims": "dims"; "chartElement": "chartElement"; "innerRadius": "innerRadius"; "outerRadius": "outerRadius"; "margins": "margins"; "explodeSlices": "explodeSlices"; "showLabels": "showLabels"; "gradient": "gradient"; "activeEntries": "activeEntries"; "labelThreshold": "labelThreshold"; "labelFormatting": "labelFormatting"; "labelTemplate": "labelTemplate"; "trimLabels": "trimLabels"; "maxLabelLength": "maxLabelLength"; "tooltipText": "tooltipText"; "tooltipDisabled": "tooltipDisabled"; "tooltipTemplate": "tooltipTemplate"; "animations": "animations"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; "dblclick": "dblclick"; }, never, never>;
}
