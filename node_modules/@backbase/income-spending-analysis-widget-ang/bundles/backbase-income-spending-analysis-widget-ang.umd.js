(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@backbase/ui-ang/css-variables-lib'), require('@swimlane/ngx-charts'), require('d3-array'), require('d3-shape'), require('@angular/common'), require('@angular/cdk/portal'), require('@backbase/ui-ang/amount'), require('@backbase/foundation-ang/core'), require('rxjs'), require('rxjs/operators'), require('@backbase/data-ang/transactions'), require('@angular/router'), require('@backbase/ui-ang/period-selector'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/icon')) :
    typeof define === 'function' && define.amd ? define('@backbase/income-spending-analysis-widget-ang', ['exports', '@angular/core', '@backbase/ui-ang/css-variables-lib', '@swimlane/ngx-charts', 'd3-array', 'd3-shape', '@angular/common', '@angular/cdk/portal', '@backbase/ui-ang/amount', '@backbase/foundation-ang/core', 'rxjs', 'rxjs/operators', '@backbase/data-ang/transactions', '@angular/router', '@backbase/ui-ang/period-selector', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/icon'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["income-spending-analysis-widget-ang"] = {}), global.ng.core, global.i1$1, global.i3, global.d3Array, global.d3Shape, global.ng.common, global.ng.cdk.portal, global.i3$1, global.i3$2, global.rxjs, global.rxjs.operators, global.i1$2, global.ng.router, global.i7, global.i10, global.i11, global.i12));
})(this, (function (exports, i0, i1$1, i3, d3Array, d3Shape, i1, portal, i3$1, i3$2, rxjs, operators, i1$2, i4, i7, i10, i11, i12) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i3__namespace$2 = /*#__PURE__*/_interopNamespace(i3$2);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10);
    var i11__namespace = /*#__PURE__*/_interopNamespace(i11);
    var i12__namespace = /*#__PURE__*/_interopNamespace(i12);

    var CARET_SIZE_CSS_VAR = '--chart-tooltip-caret-size';
    var ArrowClasses;
    (function (ArrowClasses) {
        ArrowClasses["LEFT"] = "bb-arrow-left";
        ArrowClasses["RIGHT"] = "bb-arrow-right";
    })(ArrowClasses || (ArrowClasses = {}));

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var PieLabelComponent = /** @class */ (function () {
        function PieLabelComponent() {
            /**
             * Radius of the circle.
             */
            this.radius = 0;
            /**
             * The maximum number of labels displayed.
             */
            this.max = 1;
            /**
             * Value of the label.
             */
            this.value = 0;
            /**
             * Make the radius of each slice proportional to it's value.
             */
            this.explodeSlices = false;
            /**
             * Enable/Disable animations.
             */
            this.animations = true;
            /**
             * Enable/Disable label trimming.
             */
            this.labelTrim = true;
            /**
             * Set the label trimming size.
             */
            this.labelTrimSize = 10;
            this.isIE = /(edge|msie|trident)/i.test(navigator.userAgent);
            this.trimLabel = i3.trimLabel;
        }
        Object.defineProperty(PieLabelComponent.prototype, "labelText", {
            get: function () {
                return this.labelTrim ? i3.trimLabel(this.label || '', this.labelTrimSize) : this.label;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PieLabelComponent.prototype, "textX", {
            get: function () {
                return this.data ? this.data.pos[0] : 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PieLabelComponent.prototype, "textY", {
            get: function () {
                return this.data ? this.data.pos[1] : 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PieLabelComponent.prototype, "textTransition", {
            get: function () {
                return this.isIE || !this.animations ? '' : 'transform 0.75s';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PieLabelComponent.prototype, "styleTransform", {
            get: function () {
                return this.isIE ? '' : "translate3d(" + this.textX + "px, " + this.textY + "px, 0)";
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PieLabelComponent.prototype, "attrTransform", {
            get: function () {
                return !this.isIE ? '' : "translate(" + this.textX + ", " + this.textY + ")";
            },
            enumerable: false,
            configurable: true
        });
        PieLabelComponent.prototype.ngOnInit = function () {
            if (typeof this.data === 'undefined') {
                throw new Error("\"data\" input is required in \"" + this.constructor.name + "\"");
            }
        };
        return PieLabelComponent;
    }());
    PieLabelComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PieLabelComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    PieLabelComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PieLabelComponent, selector: "g[bb-charts-pie-label]", inputs: { data: "data", radius: "radius", label: "label", color: "color", icon: "icon", max: "max", value: "value", explodeSlices: "explodeSlices", animations: "animations", labelTrim: "labelTrim", labelTrimSize: "labelTrimSize", template: "template" }, ngImport: i0__namespace, template: "\n    <ng-container *ngIf=\"template; else defaultTemplate\">\n      <ng-template\n        [ngTemplateOutlet]=\"template\"\n        [ngTemplateOutletContext]=\"{ data: data, color: color, icon: icon, label: labelText }\"\n      >\n      </ng-template>\n    </ng-container>\n\n    <ng-template #defaultTemplate>\n      <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n        <svg:text\n          class=\"pie-label\"\n          [class.animation]=\"animations\"\n          dy=\".35em\"\n          [style.textAnchor]=\"'middle'\"\n          [style.shapeRendering]=\"'crispEdges'\"\n        >\n          {{ labelText }}\n        </svg:text>\n      </svg:g>\n    </ng-template>\n  ", isInline: true, directives: [{ type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PieLabelComponent, decorators: [{
                type: i0.Component,
                args: [{
                        // eslint-disable-next-line @angular-eslint/component-selector
                        selector: 'g[bb-charts-pie-label]',
                        template: "\n    <ng-container *ngIf=\"template; else defaultTemplate\">\n      <ng-template\n        [ngTemplateOutlet]=\"template\"\n        [ngTemplateOutletContext]=\"{ data: data, color: color, icon: icon, label: labelText }\"\n      >\n      </ng-template>\n    </ng-container>\n\n    <ng-template #defaultTemplate>\n      <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n        <svg:text\n          class=\"pie-label\"\n          [class.animation]=\"animations\"\n          dy=\".35em\"\n          [style.textAnchor]=\"'middle'\"\n          [style.shapeRendering]=\"'crispEdges'\"\n        >\n          {{ labelText }}\n        </svg:text>\n      </svg:g>\n    </ng-template>\n  ",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return []; }, propDecorators: { data: [{
                    type: i0.Input
                }], radius: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }], icon: [{
                    type: i0.Input
                }], max: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], explodeSlices: [{
                    type: i0.Input
                }], animations: [{
                    type: i0.Input
                }], labelTrim: [{
                    type: i0.Input
                }], labelTrimSize: [{
                    type: i0.Input
                }], template: [{
                    type: i0.Input
                }] } });

    var InjectionRegisteryService = /** @class */ (function () {
        function InjectionRegisteryService(injectionService) {
            this.injectionService = injectionService;
            this.defaults = {};
            this.components = new Map();
        }
        InjectionRegisteryService.prototype.getByType = function (type) {
            if (type === void 0) { type = this.type; }
            return this.components.get(type);
        };
        InjectionRegisteryService.prototype.create = function (bindings) {
            return this.createByType(this.type, bindings);
        };
        InjectionRegisteryService.prototype.createByType = function (type, bindings) {
            bindings = this.assignDefaults(bindings);
            var component = this.injectComponent(type, bindings);
            this.register(type, component);
            return component;
        };
        InjectionRegisteryService.prototype.destroy = function (instance) {
            var compsByType = this.components.get(instance.componentType);
            if (compsByType && compsByType.length) {
                var idx = compsByType.indexOf(instance);
                if (idx > -1) {
                    var component = compsByType[idx];
                    component.destroy();
                    compsByType.splice(idx, 1);
                }
            }
        };
        InjectionRegisteryService.prototype.destroyAll = function () {
            this.destroyByType(this.type);
        };
        InjectionRegisteryService.prototype.destroyByType = function (type) {
            var comps = this.components.get(type);
            if (comps && comps.length) {
                var i = comps.length - 1;
                while (i >= 0) {
                    this.destroy(comps[i--]);
                }
            }
        };
        InjectionRegisteryService.prototype.injectComponent = function (type, bindings) {
            return this.injectionService.appendComponent(type, bindings);
        };
        InjectionRegisteryService.prototype.assignDefaults = function (bindings) {
            var inputs = Object.assign({}, this.defaults.inputs);
            var outputs = Object.assign({}, this.defaults.outputs);
            if (!bindings.inputs && !bindings.outputs) {
                bindings = { inputs: bindings };
            }
            if (inputs) {
                bindings.inputs = Object.assign(Object.assign({}, inputs), bindings.inputs);
            }
            if (outputs) {
                bindings.outputs = Object.assign(Object.assign({}, outputs), bindings.outputs);
            }
            return bindings;
        };
        InjectionRegisteryService.prototype.register = function (type, component) {
            if (!this.components.has(type)) {
                this.components.set(type, []);
            }
            var types = this.components.get(type) || [];
            types.push(component);
        };
        return InjectionRegisteryService;
    }());

    var caretOffset = 7;
    function verticalPosition(elDimensions, popoverDimensions, alignment) {
        if (alignment === 'top') {
            return elDimensions.top - caretOffset;
        }
        if (alignment === 'bottom') {
            return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;
        }
        if (alignment === 'center') {
            return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;
        }
        return undefined;
    }
    function horizontalPosition(elDimensions, popoverDimensions, alignment) {
        if (alignment === 'left') {
            return elDimensions.left - caretOffset;
        }
        if (alignment === 'right') {
            return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;
        }
        if (alignment === 'center') {
            return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;
        }
        return undefined;
    }
    /**
     * Position helper for the popover directive.
     *
     * @export
     */
    var PositionHelper = /** @class */ (function () {
        function PositionHelper() {
        }
        /**
         * Calculate vertical alignment position
         *
         * @memberOf PositionHelper
         */
        PositionHelper.calculateVerticalAlignment = function (elDimensions, popoverDimensions, alignment) {
            var result = verticalPosition(elDimensions, popoverDimensions, alignment);
            if (result + popoverDimensions.height > window.innerHeight) {
                result = window.innerHeight - popoverDimensions.height;
            }
            return result || 0;
        };
        /**
         * Calculate vertical caret position
         *
         * @memberOf PositionHelper
         */
        PositionHelper.calculateVerticalCaret = function (elDimensions, popoverDimensions, caretDimensions, alignment) {
            var result = 0;
            if (alignment === 'top') {
                result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;
            }
            if (alignment === 'bottom') {
                result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;
            }
            if (alignment === 'center') {
                result = popoverDimensions.height / 2 - caretDimensions.height / 2;
            }
            var popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);
            if (popoverPosition + popoverDimensions.height > window.innerHeight) {
                result += popoverPosition + popoverDimensions.height - window.innerHeight;
            }
            return result;
        };
        /**
         * Calculate horz alignment position
         *
         * @memberOf PositionHelper
         */
        PositionHelper.calculateHorizontalAlignment = function (elDimensions, popoverDimensions, alignment) {
            var result = horizontalPosition(elDimensions, popoverDimensions, alignment);
            if (result + popoverDimensions.width > window.innerWidth) {
                result = window.innerWidth - popoverDimensions.width;
            }
            return result || 0;
        };
        /**
         * Calculate horz caret position
         *
         * @memberOf PositionHelper
         */
        PositionHelper.calculateHorizontalCaret = function (elDimensions, popoverDimensions, caretDimensions, alignment) {
            var result = 0;
            if (alignment === 'left') {
                result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;
            }
            if (alignment === 'right') {
                result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;
            }
            if (alignment === 'center') {
                result = popoverDimensions.width / 2 - caretDimensions.width / 2;
            }
            var popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);
            if (popoverPosition + popoverDimensions.width > window.innerWidth) {
                result += popoverPosition + popoverDimensions.width - window.innerWidth;
            }
            return result;
        };
        /**
         * Checks if the element's position should be flipped
         *
         * @memberOf PositionHelper
         */
        PositionHelper.shouldFlip = function (elDimensions, popoverDimensions, placement, spacing) {
            var flip = false;
            if (placement === 'right') {
                if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {
                    flip = true;
                }
            }
            if (placement === 'left') {
                if (elDimensions.left - popoverDimensions.width - spacing < 0) {
                    flip = true;
                }
            }
            if (placement === 'top') {
                if (elDimensions.top - popoverDimensions.height - spacing < 0) {
                    flip = true;
                }
            }
            if (placement === 'bottom') {
                if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {
                    flip = true;
                }
            }
            return flip;
        };
        /**
         * Position caret
         *
         * @memberOf PositionHelper
         */
        PositionHelper.positionCaret = function (placement, elmDim, hostDim, caretDimensions, alignment) {
            var top = 0;
            var left = 0;
            if (placement === i3.PlacementTypes.Right) {
                left = -7;
                top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);
            }
            else if (placement === i3.PlacementTypes.Left) {
                left = elmDim.width;
                top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);
            }
            else if (placement === i3.PlacementTypes.Top) {
                top = elmDim.height;
                left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);
            }
            else if (placement === i3.PlacementTypes.Bottom) {
                top = -7;
                left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);
            }
            return { top: top, left: left };
        };
        /**
         * Position content
         *
         * @memberOf PositionHelper
         */
        PositionHelper.positionContent = function (placement, elmDim, hostDim, spacing, alignment) {
            var top = 0;
            var left = 0;
            if (placement === i3.PlacementTypes.Right) {
                left = hostDim.left + hostDim.width + spacing;
                top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);
            }
            else if (placement === i3.PlacementTypes.Left) {
                left = hostDim.left - elmDim.width - spacing;
                top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);
            }
            else if (placement === i3.PlacementTypes.Top) {
                top = hostDim.top - elmDim.height - spacing;
                left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);
            }
            else if (placement === i3.PlacementTypes.Bottom) {
                top = hostDim.top + hostDim.height + spacing;
                left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);
            }
            return { top: top, left: left };
        };
        /**
         * Determine placement based on flip
         *
         * @memberOf PositionHelper
         */
        PositionHelper.determinePlacement = function (placement, elmDim, hostDim, spacing) {
            var shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);
            if (shouldFlip) {
                if (placement === i3.PlacementTypes.Right) {
                    return i3.PlacementTypes.Left;
                }
                else if (placement === i3.PlacementTypes.Left) {
                    return i3.PlacementTypes.Right;
                }
                else if (placement === i3.PlacementTypes.Top) {
                    return i3.PlacementTypes.Bottom;
                }
                else if (placement === i3.PlacementTypes.Bottom) {
                    return i3.PlacementTypes.Top;
                }
            }
            return placement;
        };
        return PositionHelper;
    }());

    var TooltipContentComponent = /** @class */ (function () {
        function TooltipContentComponent(element, renderer) {
            this.element = element;
            this.renderer = renderer;
        }
        Object.defineProperty(TooltipContentComponent.prototype, "cssClasses", {
            get: function () {
                var clz = 'ngx-charts-tooltip-content';
                clz += " position-" + this.placement;
                clz += " type-" + this.type;
                clz += " " + this.cssClass;
                return clz;
            },
            enumerable: false,
            configurable: true
        });
        TooltipContentComponent.prototype.ngAfterViewInit = function () {
            setTimeout(this.position.bind(this));
        };
        TooltipContentComponent.prototype.position = function () {
            var _this = this;
            // if host is not there, don't show
            if (!this.host) {
                return;
            }
            var nativeElm = this.element.nativeElement;
            var hostDim = this.host.nativeElement.getBoundingClientRect();
            // if no dims were found, never show
            if (!hostDim.height && !hostDim.width)
                return;
            var elmDim = nativeElm.getBoundingClientRect();
            this.checkFlip(hostDim, elmDim);
            this.positionContent(nativeElm, hostDim, elmDim);
            // animate its entry
            setTimeout(function () { return _this.renderer.addClass(nativeElm, 'animate'); }, 1);
        };
        TooltipContentComponent.prototype.positionContent = function (nativeElm, hostDim, elmDim) {
            // if custom position is requested, ignore library's calculations
            if (this.pos && this.pos.length === 2) {
                var arrowSize = (this.context.arrowSize || 0) * (this.placement === i3.PlacementTypes.Right ? 1 : -1);
                var l = this.pos[0] + arrowSize + elmDim.width * (this.placement === i3.PlacementTypes.Right ? 0 : -1);
                var t = this.pos[1] - elmDim.height / 2;
                this.renderer.setStyle(nativeElm, 'top', t + "px");
                this.renderer.setStyle(nativeElm, 'left', l + "px");
                return;
            }
            var _a = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment), top = _a.top, left = _a.left;
            this.renderer.setStyle(nativeElm, 'top', top + "px");
            this.renderer.setStyle(nativeElm, 'left', left + "px");
        };
        TooltipContentComponent.prototype.checkFlip = function (hostDim, elmDim) {
            this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);
        };
        TooltipContentComponent.prototype.onWindowResize = function () {
            this.position();
        };
        return TooltipContentComponent;
    }());
    TooltipContentComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TooltipContentComponent, deps: [{ token: i0__namespace.ElementRef }, { token: i0__namespace.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TooltipContentComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TooltipContentComponent, selector: "bb-tooltip-content", inputs: { host: "host", type: "type", placement: "placement", alignment: "alignment", spacing: "spacing", cssClass: "cssClass", title: "title", template: "template", context: "context", pos: "pos" }, host: { listeners: { "window:resize": "onWindowResize()" }, properties: { "class": "this.cssClasses" } }, ngImport: i0__namespace, template: "\n    <div class=\"tooltip-content\">\n      <span *ngIf=\"!title\">\n        <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n      </span>\n      <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n    </div>\n  ", isInline: true, styles: [".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:normal;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\n"], directives: [{ type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], encapsulation: i0__namespace.ViewEncapsulation.None });
    __decorate([
        i3.throttleable(100)
    ], TooltipContentComponent.prototype, "onWindowResize", null);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TooltipContentComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-tooltip-content',
                        template: "\n    <div class=\"tooltip-content\">\n      <span *ngIf=\"!title\">\n        <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n      </span>\n      <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n    </div>\n  ",
                        encapsulation: i0.ViewEncapsulation.None,
                        styleUrls: ['./tooltip.component.scss'],
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.Renderer2 }]; }, propDecorators: { host: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], placement: [{
                    type: i0.Input
                }], alignment: [{
                    type: i0.Input
                }], spacing: [{
                    type: i0.Input
                }], cssClass: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], template: [{
                    type: i0.Input
                }], context: [{
                    type: i0.Input
                }], pos: [{
                    type: i0.Input
                }], cssClasses: [{
                    type: i0.HostBinding,
                    args: ['class']
                }], onWindowResize: [{
                    type: i0.HostListener,
                    args: ['window:resize']
                }] } });

    function isViewContainerRef(x) {
        return x.element;
    }
    /**
     * Injection service is a helper to append components
     * dynamically to a known location in the DOM, most
     * noteably for dialogs/tooltips appending to body.
     *
     * @export
     */
    var InjectionService = /** @class */ (function () {
        function InjectionService(applicationRef, componentFactoryResolver, injector) {
            this.applicationRef = applicationRef;
            this.componentFactoryResolver = componentFactoryResolver;
            this.injector = injector;
        }
        /**
         * Sets a default global root view container. This is useful for
         * things like ngUpgrade that doesn't have a ApplicationRef root.
         *
         * @param container
         */
        InjectionService.setGlobalRootViewContainer = function (container) {
            InjectionService.globalRootViewContainer = container;
        };
        /**
         * Gets the root view container to inject the component to.
         *
         * @memberOf InjectionService
         */
        InjectionService.prototype.getRootViewContainer = function () {
            if (this._container)
                return this._container;
            if (InjectionService.globalRootViewContainer)
                return InjectionService.globalRootViewContainer;
            if (this.applicationRef.components.length)
                return this.applicationRef.components[0];
            throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.');
        };
        /**
         * Overrides the default root view container. This is useful for
         * things like ngUpgrade that doesn't have a ApplicationRef root.
         *
         * @param container
         *
         * @memberOf InjectionService
         */
        InjectionService.prototype.setRootViewContainer = function (container) {
            this._container = container;
        };
        /**
         * Gets the html element for a component ref.
         *
         * @param componentRef
         *
         * @memberOf InjectionService
         */
        InjectionService.prototype.getComponentRootNode = function (component) {
            if (isViewContainerRef(component)) {
                return component.element.nativeElement;
            }
            if (component.hostView && component.hostView.rootNodes.length > 0) {
                return component.hostView.rootNodes[0];
            }
            // the top most component root node has no `hostView`
            return component.location.nativeElement;
        };
        /**
         * Gets the root component container html element.
         *
         * @memberOf InjectionService
         */
        InjectionService.prototype.getRootViewContainerNode = function (component) {
            return this.getComponentRootNode(component);
        };
        /**
         * Projects the bindings onto the component
         *
         * @param component
         * @param options
         *
         * @memberOf InjectionService
         */
        InjectionService.prototype.projectComponentBindings = function (component, bindings) {
            var e_1, _a, e_2, _b;
            if (bindings) {
                if (bindings.inputs !== undefined) {
                    var bindingKeys = Object.getOwnPropertyNames(bindings.inputs);
                    try {
                        for (var bindingKeys_1 = __values(bindingKeys), bindingKeys_1_1 = bindingKeys_1.next(); !bindingKeys_1_1.done; bindingKeys_1_1 = bindingKeys_1.next()) {
                            var bindingName = bindingKeys_1_1.value;
                            component.instance[bindingName] = bindings.inputs[bindingName];
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (bindingKeys_1_1 && !bindingKeys_1_1.done && (_a = bindingKeys_1.return)) _a.call(bindingKeys_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                if (bindings.outputs !== undefined) {
                    var eventKeys = Object.getOwnPropertyNames(bindings.outputs);
                    try {
                        for (var eventKeys_1 = __values(eventKeys), eventKeys_1_1 = eventKeys_1.next(); !eventKeys_1_1.done; eventKeys_1_1 = eventKeys_1.next()) {
                            var eventName = eventKeys_1_1.value;
                            component.instance[eventName] = bindings.outputs[eventName];
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (eventKeys_1_1 && !eventKeys_1_1.done && (_b = eventKeys_1.return)) _b.call(eventKeys_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            return component;
        };
        /**
         * Appends a component to a adjacent location
         *
         * @param componentClass
         * @param [options={}]
         * @param [location]
         *
         * @memberOf InjectionService
         */
        InjectionService.prototype.appendComponent = function (componentClass, bindings, location) {
            if (bindings === void 0) { bindings = {}; }
            if (!location)
                location = this.getRootViewContainer();
            var appendLocation = this.getComponentRootNode(location);
            var portalHost = new portal.DomPortalHost(appendLocation, this.componentFactoryResolver, this.applicationRef, this.injector);
            var portal$1 = new portal.ComponentPortal(componentClass);
            var componentRef = portalHost.attach(portal$1);
            this.projectComponentBindings(componentRef, bindings);
            return componentRef;
        };
        return InjectionService;
    }());
    // eslint-disable-next-line
    InjectionService.globalRootViewContainer = null;
    InjectionService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InjectionService, deps: [{ token: i0__namespace.ApplicationRef }, { token: i0__namespace.ComponentFactoryResolver }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    InjectionService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InjectionService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InjectionService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i0__namespace.ApplicationRef }, { type: i0__namespace.ComponentFactoryResolver }, { type: i0__namespace.Injector }]; } });

    var TooltipService = /** @class */ (function (_super) {
        __extends(TooltipService, _super);
        function TooltipService(injectionService) {
            var _this = _super.call(this, injectionService) || this;
            _this.injectionService = injectionService;
            _this.type = TooltipContentComponent;
            return _this;
        }
        return TooltipService;
    }(InjectionRegisteryService));
    TooltipService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TooltipService, deps: [{ token: InjectionService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    TooltipService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TooltipService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TooltipService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: InjectionService }]; } });

    var TooltipDirective = /** @class */ (function () {
        function TooltipDirective(tooltipService, viewContainerRef, renderer) {
            this.tooltipService = tooltipService;
            this.viewContainerRef = viewContainerRef;
            this.renderer = renderer;
            this.tooltipCssClass = '';
            this.tooltipTitle = '';
            this.tooltipAppendToBody = true;
            this.tooltipSpacing = 10;
            this.tooltipDisabled = false;
            this.tooltipShowCaret = true;
            this.tooltipPlacement = i3.PlacementTypes.Top;
            this.tooltipAlignment = i3.PlacementTypes.Center;
            this.tooltipType = i3.StyleTypes.popover;
            this.tooltipCloseOnClickOutside = true;
            this.tooltipCloseOnMouseLeave = true;
            this.tooltipHideTimeout = 300;
            this.tooltipShowTimeout = 100;
            this.tooltipShowEvent = i3.ShowTypes.all;
            this.tooltipImmediateExit = false;
            // eslint-disable-next-line @angular-eslint/no-output-native
            this.show = new i0.EventEmitter();
            this.hide = new i0.EventEmitter();
        }
        Object.defineProperty(TooltipDirective.prototype, "listensForFocus", {
            get: function () {
                return this.tooltipShowEvent === i3.ShowTypes.all || this.tooltipShowEvent === i3.ShowTypes.focus;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TooltipDirective.prototype, "listensForHover", {
            get: function () {
                return this.tooltipShowEvent === i3.ShowTypes.all || this.tooltipShowEvent === i3.ShowTypes.mouseover;
            },
            enumerable: false,
            configurable: true
        });
        TooltipDirective.prototype.ngOnDestroy = function () {
            this.hideTooltip(true);
        };
        TooltipDirective.prototype.onFocus = function () {
            if (this.listensForFocus) {
                this.showTooltip();
            }
        };
        TooltipDirective.prototype.onBlur = function () {
            if (this.listensForFocus) {
                this.hideTooltip(true);
            }
        };
        TooltipDirective.prototype.onMouseEnter = function () {
            if (this.listensForHover) {
                this.showTooltip();
            }
        };
        TooltipDirective.prototype.onMouseLeave = function (target) {
            if (this.listensForHover && this.tooltipCloseOnMouseLeave) {
                clearTimeout(this.timeout);
                if (this.component) {
                    var contentDom = this.component.instance.element.nativeElement;
                    var contains = contentDom.contains(target);
                    if (contains)
                        return;
                }
                this.hideTooltip(this.tooltipImmediateExit);
            }
        };
        TooltipDirective.prototype.onMouseClick = function () {
            if (this.listensForHover) {
                this.hideTooltip(true);
            }
        };
        TooltipDirective.prototype.showTooltip = function (immediate) {
            var _this = this;
            if (this.component || this.tooltipDisabled)
                return;
            var time = immediate ? 0 : this.tooltipShowTimeout;
            clearTimeout(this.timeout);
            this.timeout = setTimeout(function () {
                _this.tooltipService.destroyAll();
                var options = _this.createBoundOptions();
                _this.component = _this.tooltipService.create(options);
                // add a tiny timeout to avoid event re-triggers
                setTimeout(function () {
                    if (_this.component) {
                        _this.addHideListeners(_this.component.instance.element.nativeElement);
                    }
                }, 10);
                _this.show.emit(true);
            }, time);
        };
        TooltipDirective.prototype.addHideListeners = function (tooltip) {
            var _this = this;
            // on mouse enter, cancel the hide triggered by the leave
            this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', function () {
                clearTimeout(_this.timeout);
            });
            // content mouse leave listener
            if (this.tooltipCloseOnMouseLeave) {
                this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', function () {
                    _this.hideTooltip(_this.tooltipImmediateExit);
                });
            }
            // content close on click outside
            if (this.tooltipCloseOnClickOutside) {
                this.documentClickEvent = this.renderer.listen(document, 'click', function (event) {
                    var contains = tooltip.contains(event.target);
                    if (!contains)
                        _this.hideTooltip();
                });
            }
        };
        TooltipDirective.prototype.hideTooltip = function (immediate) {
            var _this = this;
            if (immediate === void 0) { immediate = false; }
            if (!this.component)
                return;
            var destroyFn = function () {
                // remove events
                if (_this.mouseLeaveContentEvent)
                    _this.mouseLeaveContentEvent();
                if (_this.mouseEnterContentEvent)
                    _this.mouseEnterContentEvent();
                if (_this.documentClickEvent)
                    _this.documentClickEvent();
                // emit events
                _this.hide.emit(true);
                // destroy component
                _this.tooltipService.destroy(_this.component);
                _this.component = undefined;
            };
            clearTimeout(this.timeout);
            if (!immediate) {
                this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);
            }
            else {
                destroyFn();
            }
        };
        TooltipDirective.prototype.createBoundOptions = function () {
            return {
                title: this.tooltipTitle,
                template: this.tooltipTemplate,
                host: this.viewContainerRef.element,
                placement: this.tooltipPlacement,
                alignment: this.tooltipAlignment,
                type: this.tooltipType,
                showCaret: this.tooltipShowCaret,
                cssClass: this.tooltipCssClass,
                spacing: this.tooltipSpacing,
                context: this.tooltipContext,
                pos: this.tooltipPosition,
            };
        };
        return TooltipDirective;
    }());
    TooltipDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TooltipDirective, deps: [{ token: TooltipService }, { token: i0__namespace.ViewContainerRef }, { token: i0__namespace.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TooltipDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TooltipDirective, selector: "[bb-tooltip]", inputs: { tooltipCssClass: "tooltipCssClass", tooltipTitle: "tooltipTitle", tooltipPosition: "tooltipPosition", tooltipAppendToBody: "tooltipAppendToBody", tooltipSpacing: "tooltipSpacing", tooltipDisabled: "tooltipDisabled", tooltipShowCaret: "tooltipShowCaret", tooltipPlacement: "tooltipPlacement", tooltipAlignment: "tooltipAlignment", tooltipType: "tooltipType", tooltipCloseOnClickOutside: "tooltipCloseOnClickOutside", tooltipCloseOnMouseLeave: "tooltipCloseOnMouseLeave", tooltipHideTimeout: "tooltipHideTimeout", tooltipShowTimeout: "tooltipShowTimeout", tooltipTemplate: "tooltipTemplate", tooltipShowEvent: "tooltipShowEvent", tooltipContext: "tooltipContext", tooltipImmediateExit: "tooltipImmediateExit" }, outputs: { show: "show", hide: "hide" }, host: { listeners: { "focusin": "onFocus()", "blur": "onBlur()", "mouseenter": "onMouseEnter()", "mouseleave": "onMouseLeave($event.target)", "click": "onMouseClick()" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TooltipDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        // eslint-disable-next-line @angular-eslint/directive-selector
                        selector: '[bb-tooltip]',
                    }]
            }], ctorParameters: function () { return [{ type: TooltipService }, { type: i0__namespace.ViewContainerRef }, { type: i0__namespace.Renderer2 }]; }, propDecorators: { tooltipCssClass: [{
                    type: i0.Input
                }], tooltipTitle: [{
                    type: i0.Input
                }], tooltipPosition: [{
                    type: i0.Input
                }], tooltipAppendToBody: [{
                    type: i0.Input
                }], tooltipSpacing: [{
                    type: i0.Input
                }], tooltipDisabled: [{
                    type: i0.Input
                }], tooltipShowCaret: [{
                    type: i0.Input
                }], tooltipPlacement: [{
                    type: i0.Input
                }], tooltipAlignment: [{
                    type: i0.Input
                }], tooltipType: [{
                    type: i0.Input
                }], tooltipCloseOnClickOutside: [{
                    type: i0.Input
                }], tooltipCloseOnMouseLeave: [{
                    type: i0.Input
                }], tooltipHideTimeout: [{
                    type: i0.Input
                }], tooltipShowTimeout: [{
                    type: i0.Input
                }], tooltipTemplate: [{
                    type: i0.Input
                }], tooltipShowEvent: [{
                    type: i0.Input
                }], tooltipContext: [{
                    type: i0.Input
                }], tooltipImmediateExit: [{
                    type: i0.Input
                }], show: [{
                    type: i0.Output
                }], hide: [{
                    type: i0.Output
                }], onFocus: [{
                    type: i0.HostListener,
                    args: ['focusin']
                }], onBlur: [{
                    type: i0.HostListener,
                    args: ['blur']
                }], onMouseEnter: [{
                    type: i0.HostListener,
                    args: ['mouseenter']
                }], onMouseLeave: [{
                    type: i0.HostListener,
                    args: ['mouseleave', ['$event.target']]
                }], onMouseClick: [{
                    type: i0.HostListener,
                    args: ['click']
                }] } });

    var PieSeriesComponent = /** @class */ (function () {
        function PieSeriesComponent(currencyPipe) {
            this.currencyPipe = currencyPipe;
            /**
             * Array of Chart data objects needed for the chart to be rendered.
             */
            this.series = [];
            /**
             * Inner slice radius.
             */
            this.innerRadius = 60;
            /**
             * Outer slice radius.
             */
            this.outerRadius = 80;
            /**
             * Slice offsets.
             */
            this.margins = [0, 0, 0, 0];
            /**
             * Flag to show/hide labels.
             */
            this.showLabels = false;
            /**
             * Preselects an active slice of the chart.
             */
            this.activeEntries = [];
            /**
             * Sets the threshold in which the label of each section is visible.
             */
            this.labelThreshold = 0;
            /**
             * Enable/disable label trimming.
             */
            this.trimLabels = true;
            /**
             * Set the max length of the label characters.
             */
            this.maxLabelLength = 10;
            /**
             * Disable/enable the tooltip.
             */
            this.tooltipDisabled = false;
            /**
             * Enable/Disable animations.
             */
            this.animations = true;
            /**
             * EventEmitter for triggering a select event.
             */
            // eslint-disable-next-line @angular-eslint/no-output-native
            this.select = new i0.EventEmitter();
            /**
             * EventEmitter for triggering a activate event.
             */
            this.activate = new i0.EventEmitter();
            /**
             * EventEmitter for triggering a deactivate event.
             */
            this.deactivate = new i0.EventEmitter();
            /**
             * EventEmitter for triggering a dblclick event.
             */
            // eslint-disable-next-line @angular-eslint/no-output-native
            this.dblclick = new i0.EventEmitter();
            this.data = [];
        }
        PieSeriesComponent.prototype.ngOnChanges = function () {
            this.update();
        };
        PieSeriesComponent.prototype.update = function () {
            var pieGenerator = d3Shape.pie()
                .value(function (d) { return d.value; })
                // eslint-disable-next-line no-null/no-null
                .sort(null);
            var arcData = pieGenerator(this.series);
            this.max = d3Array.max(arcData, function (d) {
                return d.value;
            });
            this.data = this.calculateLabelPositions(arcData);
            this.tooltipText = this.tooltipText || this.defaultTooltipText;
        };
        PieSeriesComponent.prototype.midAngle = function (d) {
            return d.startAngle + (d.endAngle - d.startAngle) / 2;
        };
        PieSeriesComponent.prototype.outerArc = function (padding) {
            var r = this.outerRadius + padding;
            return d3Shape.arc().innerRadius(r).outerRadius(r);
        };
        PieSeriesComponent.prototype.calculateLabelPositions = function (pieData) {
            var _this = this;
            var labelPositions = pieData;
            labelPositions.forEach(function (d) {
                d.pos = _this.outerArc(30).centroid(d);
                d.edge = _this.outerArc(0).centroid(d);
            });
            return labelPositions;
        };
        PieSeriesComponent.prototype.labelVisible = function (myArc) {
            return this.showLabels && myArc.data.portion > this.labelThreshold;
        };
        PieSeriesComponent.prototype.getTooltipTitle = function (a) {
            if (this.tooltipTemplate || typeof this.tooltipText !== 'function') {
                return undefined;
            }
            return this.tooltipText(a);
        };
        PieSeriesComponent.prototype.getTooltipPlacement = function (a) {
            return this.midAngle(a) > Math.PI ? i3.PlacementTypes.Left : i3.PlacementTypes.Right;
        };
        PieSeriesComponent.prototype.labelText = function (myArc) {
            if (this.labelFormatting) {
                return this.labelFormatting(myArc.data.value);
            }
            return (this.currencyPipe.transform(myArc.data.value, myArc.data.totalAmount.currencyCode, undefined, '1.0-0') ||
                myArc.data.value.toString());
        };
        PieSeriesComponent.prototype.label = function (myArc) {
            return i3.formatLabel(myArc.data.name);
        };
        PieSeriesComponent.prototype.defaultTooltipText = function (myArc) {
            var label = this.label(myArc);
            var val = i3.formatLabel(myArc.data.value);
            return "\n      <span class=\"tooltip-label\">" + label + "</span>\n      <span class=\"tooltip-val\">" + val + "</span>\n    ";
        };
        PieSeriesComponent.prototype.getTooltipPosition = function (myArc) {
            var halfWidth = this.outerRadius + this.margins[0];
            var position = [0, 0];
            if (this.chartElement) {
                var chartDims = this.chartElement.nativeElement.getBoundingClientRect();
                position = [chartDims.left + halfWidth, chartDims.top + halfWidth];
            }
            return [position[0] + myArc.edge[0], position[1] + myArc.edge[1]];
        };
        PieSeriesComponent.prototype.color = function (myArc) {
            return this.colors ? this.colors.getColor(this.label(myArc)) : '';
        };
        PieSeriesComponent.prototype.icon = function (myArc) {
            if (!this.colors || !this.colors.customColors) {
                return '';
            }
            var label = this.label(myArc);
            var found = this.colors.customColors.find(function (item) { return item.name === label; });
            return found ? found.icon : '';
        };
        PieSeriesComponent.prototype.trackBy = function (index, item) {
            return item.data.name;
        };
        PieSeriesComponent.prototype.onClick = function (data) {
            this.select.emit(data);
        };
        PieSeriesComponent.prototype.isActive = function (entry) {
            if (!this.activeEntries)
                return false;
            var item = this.activeEntries.find(function (d) {
                return entry.name === d.name && entry.series === d.series;
            });
            return item !== undefined;
        };
        return PieSeriesComponent;
    }());
    PieSeriesComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PieSeriesComponent, deps: [{ token: i1__namespace.CurrencyPipe }], target: i0__namespace.ɵɵFactoryTarget.Component });
    PieSeriesComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PieSeriesComponent, selector: "g[bb-charts-pie-series]", inputs: { colors: "colors", series: "series", dims: "dims", chartElement: "chartElement", innerRadius: "innerRadius", outerRadius: "outerRadius", margins: "margins", explodeSlices: "explodeSlices", showLabels: "showLabels", gradient: "gradient", activeEntries: "activeEntries", labelThreshold: "labelThreshold", labelFormatting: "labelFormatting", labelTemplate: "labelTemplate", trimLabels: "trimLabels", maxLabelLength: "maxLabelLength", tooltipText: "tooltipText", tooltipDisabled: "tooltipDisabled", tooltipTemplate: "tooltipTemplate", animations: "animations" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate", dblclick: "dblclick" }, usesOnChanges: true, ngImport: i0__namespace, template: "\n    <svg:g\n      *ngFor=\"let arc of data; trackBy: trackBy\"\n      data-role=\"analysis-donut-chart-segment\"\n      bb-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"getTooltipPlacement(arc)\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipShowCaret]=\"false\"\n      [tooltipSpacing]=\"0\"\n      [tooltipTitle]=\"getTooltipTitle(arc)\"\n      [tooltipPosition]=\"getTooltipPosition(arc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"arc.data\"\n    >\n      <svg:g\n        bb-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [icon]=\"icon(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [template]=\"labelTemplate\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  ", isInline: true, components: [{ type: PieLabelComponent, selector: "g[bb-charts-pie-label]", inputs: ["data", "radius", "label", "color", "icon", "max", "value", "explodeSlices", "animations", "labelTrim", "labelTrimSize", "template"] }, { type: i3__namespace.PieArcComponent, selector: "g[ngx-charts-pie-arc]", inputs: ["startAngle", "endAngle", "cornerRadius", "explodeSlices", "gradient", "animate", "pointerEvents", "isActive", "fill", "innerRadius", "outerRadius", "value", "max", "data"], outputs: ["select", "activate", "deactivate", "dblclick"] }], directives: [{ type: i1__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: TooltipDirective, selector: "[bb-tooltip]", inputs: ["tooltipCssClass", "tooltipTitle", "tooltipPosition", "tooltipAppendToBody", "tooltipSpacing", "tooltipDisabled", "tooltipShowCaret", "tooltipPlacement", "tooltipAlignment", "tooltipType", "tooltipCloseOnClickOutside", "tooltipCloseOnMouseLeave", "tooltipHideTimeout", "tooltipShowTimeout", "tooltipTemplate", "tooltipShowEvent", "tooltipContext", "tooltipImmediateExit"], outputs: ["show", "hide"] }, { type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PieSeriesComponent, decorators: [{
                type: i0.Component,
                args: [{
                        // eslint-disable-next-line @angular-eslint/component-selector
                        selector: 'g[bb-charts-pie-series]',
                        template: "\n    <svg:g\n      *ngFor=\"let arc of data; trackBy: trackBy\"\n      data-role=\"analysis-donut-chart-segment\"\n      bb-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"getTooltipPlacement(arc)\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipShowCaret]=\"false\"\n      [tooltipSpacing]=\"0\"\n      [tooltipTitle]=\"getTooltipTitle(arc)\"\n      [tooltipPosition]=\"getTooltipPosition(arc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"arc.data\"\n    >\n      <svg:g\n        bb-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [icon]=\"icon(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [template]=\"labelTemplate\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  ",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.CurrencyPipe }]; }, propDecorators: { colors: [{
                    type: i0.Input
                }], series: [{
                    type: i0.Input
                }], dims: [{
                    type: i0.Input
                }], chartElement: [{
                    type: i0.Input
                }], innerRadius: [{
                    type: i0.Input
                }], outerRadius: [{
                    type: i0.Input
                }], margins: [{
                    type: i0.Input
                }], explodeSlices: [{
                    type: i0.Input
                }], showLabels: [{
                    type: i0.Input
                }], gradient: [{
                    type: i0.Input
                }], activeEntries: [{
                    type: i0.Input
                }], labelThreshold: [{
                    type: i0.Input
                }], labelFormatting: [{
                    type: i0.Input
                }], labelTemplate: [{
                    type: i0.Input
                }], trimLabels: [{
                    type: i0.Input
                }], maxLabelLength: [{
                    type: i0.Input
                }], tooltipText: [{
                    type: i0.Input
                }], tooltipDisabled: [{
                    type: i0.Input
                }], tooltipTemplate: [{
                    type: i0.Input
                }], animations: [{
                    type: i0.Input
                }], select: [{
                    type: i0.Output
                }], activate: [{
                    type: i0.Output
                }], deactivate: [{
                    type: i0.Output
                }], dblclick: [{
                    type: i0.Output
                }] } });

    var PieChartComponent = /** @class */ (function (_super) {
        __extends(PieChartComponent, _super);
        function PieChartComponent(chartElement, zone, cd, platformId) {
            var _this = _super.call(this, chartElement, zone, cd, platformId) || this;
            _this.chartElement = chartElement;
            _this.zone = zone;
            _this.cd = cd;
            /**
             * Array of Chart data objects needed for the chart to be rendered.
             */
            _this.series = [];
            /**
             * Flag to show/hide the chart labels.
             */
            _this.labels = false;
            /**
             * Flag to show/hide the chart legend.
             */
            _this.legend = false;
            /**
             * Title for the chart legend.
             */
            _this.legendTitle = 'Legend';
            /**
             * Make the radius of each slice proportional to it's value.
             */
            _this.explodeSlices = false;
            /**
             * Sets the type of the chart.
             */
            _this.doughnut = false;
            /**
             * The width of the charts arc.
             */
            _this.arcWidth = 0.25;
            /**
             * Preselects an active slice of the chart.
             */
            _this.activeEntries = [];
            /**
             * Disable/enable the tooltip.
             */
            _this.tooltipDisabled = false;
            /**
             * Sets the threshold in which the label of each section is visible.
             */
            _this.labelThreshold = 0;
            /**
             * Enable/disable label trimming.
             */
            _this.trimLabels = true;
            /**
             * Set the max length of the label characters.
             */
            _this.maxLabelLength = 10;
            /**
             * EventEmitter for triggering a dblclick event.
             */
            // eslint-disable-next-line @angular-eslint/no-output-native
            _this.dblclick = new i0.EventEmitter();
            /**
             * EventEmitter for triggering a select event.
             */
            // eslint-disable-next-line @angular-eslint/no-output-native
            _this.select = new i0.EventEmitter();
            /**
             * EventEmitter for triggering a activate event.
             */
            _this.activate = new i0.EventEmitter();
            /**
             * EventEmitter for triggering a deactivate event.
             */
            _this.deactivate = new i0.EventEmitter();
            _this.domain = [];
            _this.margins = [50, 50, 50, 50];
            return _this;
        }
        Object.defineProperty(PieChartComponent.prototype, "chartEl", {
            get: function () {
                return this.chartElement;
            },
            enumerable: false,
            configurable: true
        });
        PieChartComponent.prototype.update = function () {
            var _this = this;
            _super.prototype.update.call(this);
            this.dims = i3.calculateViewDimensions({
                width: this.width,
                height: this.height,
                margins: this.margins,
                showLegend: this.legend,
            });
            var xOffset = this.margins[3] + this.dims.width / 2;
            var yOffset = this.margins[0] + this.dims.height / 2;
            this.translation = "translate(" + xOffset + ", " + yOffset + ")";
            this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;
            this.innerRadius = 0;
            if (this.doughnut) {
                this.innerRadius = this.outerRadius * (1 - this.arcWidth);
            }
            this.domain = this.getDomain();
            // sort data according to domain
            this.series.sort(function (a, b) {
                return _this.domain.indexOf(a.name) - _this.domain.indexOf(b.name);
            });
            this.data = this.series;
            this.setColors();
            this.legendOptions = this.getLegendOptions();
        };
        PieChartComponent.prototype.getDomain = function () {
            var items = [];
            this.results.map(function (d) {
                var label = d.name;
                if (label.constructor.name === 'Date') {
                    label = label.toLocaleDateString();
                }
                else {
                    label = label.toLocaleString();
                }
                if (items.indexOf(label) === -1) {
                    items.push(label);
                }
            });
            return items;
        };
        PieChartComponent.prototype.onClick = function (data) {
            this.select.emit(data);
        };
        PieChartComponent.prototype.setColors = function () {
            this.colors = new i3.ColorHelper(this.scheme, i3.ScaleType.Ordinal, this.domain, this.customColors);
        };
        PieChartComponent.prototype.getLegendOptions = function () {
            return {
                scaleType: i3.ScaleType.Ordinal,
                domain: this.domain,
                colors: this.colors,
                title: this.legendTitle,
            };
        };
        PieChartComponent.prototype.onActivate = function (item) {
            var idx = this.activeEntries.findIndex(function (d) {
                return d.name === item.name && d.value === item.value;
            });
            if (idx > -1) {
                return;
            }
            this.activeEntries = __spreadArray([item], __read(this.activeEntries));
            this.activate.emit({ value: item, entries: this.activeEntries });
        };
        PieChartComponent.prototype.onDeactivate = function (item) {
            var idx = this.activeEntries.findIndex(function (d) {
                return d.name === item.name && d.value === item.value;
            });
            this.activeEntries.splice(idx, 1);
            this.activeEntries = __spreadArray([], __read(this.activeEntries)); // NOSONAR false positive - https://github.com/SonarSource/SonarTS/issues/760
            this.deactivate.emit({ value: item, entries: this.activeEntries });
        };
        return PieChartComponent;
    }(i3.BaseChartComponent));
    PieChartComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PieChartComponent, deps: [{ token: i0__namespace.ElementRef }, { token: i0__namespace.NgZone }, { token: i0__namespace.ChangeDetectorRef }, { token: i0.PLATFORM_ID }], target: i0__namespace.ɵɵFactoryTarget.Component });
    PieChartComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PieChartComponent, selector: "bb-charts-pie-chart", inputs: { series: "series", labels: "labels", legend: "legend", legendTitle: "legendTitle", explodeSlices: "explodeSlices", doughnut: "doughnut", arcWidth: "arcWidth", gradient: "gradient", activeEntries: "activeEntries", tooltipDisabled: "tooltipDisabled", labelFormatting: "labelFormatting", labelTemplate: "labelTemplate", labelThreshold: "labelThreshold", trimLabels: "trimLabels", maxLabelLength: "maxLabelLength", tooltipText: "tooltipText" }, outputs: { dblclick: "dblclick", select: "select", activate: "activate", deactivate: "deactivate" }, queries: [{ propertyName: "tooltipTemplate", first: true, predicate: ["tooltipTemplate"], descendants: true, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          bb-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"series\"\n          [chartElement]=\"chartEl\"\n          [showLabels]=\"labels\"\n          [labelThreshold]=\"labelThreshold\"\n          [labelFormatting]=\"labelFormatting\"\n          [labelTemplate]=\"labelTemplate\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [margins]=\"margins\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  ", isInline: true, styles: [".ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}.pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\n"], components: [{ type: i3__namespace.ChartComponent, selector: "ngx-charts-chart", inputs: ["showLegend", "animations", "legendType", "view", "legendOptions", "activeEntries"], outputs: ["legendLabelClick", "legendLabelActivate", "legendLabelDeactivate"] }, { type: PieSeriesComponent, selector: "g[bb-charts-pie-series]", inputs: ["colors", "series", "dims", "chartElement", "innerRadius", "outerRadius", "margins", "explodeSlices", "showLabels", "gradient", "activeEntries", "labelThreshold", "labelFormatting", "labelTemplate", "trimLabels", "maxLabelLength", "tooltipText", "tooltipDisabled", "tooltipTemplate", "animations"], outputs: ["select", "activate", "deactivate", "dblclick"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush, encapsulation: i0__namespace.ViewEncapsulation.None });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PieChartComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-charts-pie-chart',
                        template: "\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          bb-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"series\"\n          [chartElement]=\"chartEl\"\n          [showLabels]=\"labels\"\n          [labelThreshold]=\"labelThreshold\"\n          [labelFormatting]=\"labelFormatting\"\n          [labelTemplate]=\"labelTemplate\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [margins]=\"margins\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  ",
                        styleUrls: ['./pie-chart.component.scss'],
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.NgZone }, { type: i0__namespace.ChangeDetectorRef }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }];
        }, propDecorators: { series: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], legend: [{
                    type: i0.Input
                }], legendTitle: [{
                    type: i0.Input
                }], explodeSlices: [{
                    type: i0.Input
                }], doughnut: [{
                    type: i0.Input
                }], arcWidth: [{
                    type: i0.Input
                }], gradient: [{
                    type: i0.Input
                }], activeEntries: [{
                    type: i0.Input
                }], tooltipDisabled: [{
                    type: i0.Input
                }], labelFormatting: [{
                    type: i0.Input
                }], labelTemplate: [{
                    type: i0.Input
                }], labelThreshold: [{
                    type: i0.Input
                }], trimLabels: [{
                    type: i0.Input
                }], maxLabelLength: [{
                    type: i0.Input
                }], tooltipText: [{
                    type: i0.Input
                }], dblclick: [{
                    type: i0.Output
                }], select: [{
                    type: i0.Output
                }], activate: [{
                    type: i0.Output
                }], deactivate: [{
                    type: i0.Output
                }], tooltipTemplate: [{
                    type: i0.ContentChild,
                    args: ['tooltipTemplate', { static: true }]
                }] } });

    var DonutChartComponent = /** @class */ (function () {
        function DonutChartComponent(cssVariableService) {
            this.cssVariableService = cssVariableService;
            /**
             * Sets the threshold in which the label of each section is visible.
             */
            this.relevancePercentage = 0;
            this.classes = 'absolute-center w-100 h-100';
        }
        Object.defineProperty(DonutChartComponent.prototype, "template", {
            get: function () {
                return this.tooltipTmpl || this.defaultTooltipTemplate;
            },
            enumerable: false,
            configurable: true
        });
        DonutChartComponent.prototype.expandModel = function (model) {
            if (!this.data) {
                return model;
            }
            var data = this.data.find(function (item) { return item.name === model.name; }) || model;
            return Object.assign(data, {
                arrowClass: data.totalPortion - data.portion / 2 >= 50 ? ArrowClasses.RIGHT : ArrowClasses.LEFT,
                arrowSize: this.arrowSize,
            });
        };
        DonutChartComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.cssVariableService
                .getCssVariable(CARET_SIZE_CSS_VAR)
                .then(function (value) { return (_this.arrowSize = parseInt(value || '', 10) || 0); });
        };
        return DonutChartComponent;
    }());
    DonutChartComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DonutChartComponent, deps: [{ token: i1__namespace$1.CssVariablesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DonutChartComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DonutChartComponent, selector: "bb-donut-chart-ui", inputs: { data: "data", colors: "colors", relevancePercentage: "relevancePercentage", tooltipTmpl: "tooltipTmpl", labelTmpl: "labelTmpl" }, host: { properties: { "class": "this.classes" } }, viewQueries: [{ propertyName: "defaultTooltipTemplate", first: true, predicate: ["defaultTooltipTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<bb-charts-pie-chart\n  [results]=\"data\"\n  [series]=\"data\"\n  [customColors]=\"colors\"\n  [doughnut]=\"true\"\n  [arcWidth]=\"0.4\"\n  [labels]=\"true\"\n  [labelThreshold]=\"relevancePercentage\"\n  [labelTemplate]=\"labelTmpl\"\n>\n  <ng-template #tooltipTemplate let-model=\"model\">\n    <ng-container *ngTemplateOutlet=\"template; context: expandModel(model)\"></ng-container>\n  </ng-template>\n</bb-charts-pie-chart>\n\n<ng-template\n  #defaultTooltipTemplate\n  let-name=\"name\"\n  let-totalAmount=\"totalAmount\"\n>\n  <h3 class=\"chart-tooltip-analysis-category\">\n    {{ name }}\n  </h3>\n  <h4 class=\"chart-tooltip-analysis-amount\">\n    <bb-amount-ui\n      [amount]=\"totalAmount.amount\"\n      [currency]=\"totalAmount.currencyCode\"\n    ></bb-amount-ui>\n  </h4>\n</ng-template>\n", components: [{ type: PieChartComponent, selector: "bb-charts-pie-chart", inputs: ["series", "labels", "legend", "legendTitle", "explodeSlices", "doughnut", "arcWidth", "gradient", "activeEntries", "tooltipDisabled", "labelFormatting", "labelTemplate", "labelThreshold", "trimLabels", "maxLabelLength", "tooltipText"], outputs: ["dblclick", "select", "activate", "deactivate"] }, { type: i3__namespace$1.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i1__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DonutChartComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-donut-chart-ui',
                        templateUrl: './donut-chart.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.CssVariablesService }]; }, propDecorators: { data: [{
                    type: i0.Input
                }], colors: [{
                    type: i0.Input
                }], relevancePercentage: [{
                    type: i0.Input
                }], tooltipTmpl: [{
                    type: i0.Input
                }], labelTmpl: [{
                    type: i0.Input
                }], defaultTooltipTemplate: [{
                    type: i0.ViewChild,
                    args: ['defaultTooltipTemplate', { static: true }]
                }], classes: [{
                    type: i0.HostBinding,
                    args: ['class']
                }] } });

    var TooltipModule = /** @class */ (function () {
        function TooltipModule() {
        }
        return TooltipModule;
    }());
    TooltipModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TooltipModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TooltipModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TooltipModule, declarations: [TooltipContentComponent, TooltipDirective], imports: [i1.CommonModule], exports: [TooltipContentComponent, TooltipDirective] });
    TooltipModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TooltipModule, providers: [InjectionService, TooltipService], imports: [[i1.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TooltipModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [TooltipContentComponent, TooltipDirective],
                        providers: [InjectionService, TooltipService],
                        exports: [TooltipContentComponent, TooltipDirective],
                        imports: [i1.CommonModule],
                        entryComponents: [TooltipContentComponent],
                    }]
            }] });

    var PieChartModule = /** @class */ (function () {
        function PieChartModule() {
        }
        return PieChartModule;
    }());
    PieChartModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PieChartModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PieChartModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PieChartModule, declarations: [PieChartComponent, PieSeriesComponent, PieLabelComponent], imports: [i1.CommonModule, i3.NgxChartsModule, TooltipModule], exports: [PieChartComponent, i3.NgxChartsModule] });
    PieChartModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PieChartModule, providers: [i1.CurrencyPipe], imports: [[i1.CommonModule, i3.NgxChartsModule, TooltipModule], i3.NgxChartsModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PieChartModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1.CommonModule, i3.NgxChartsModule, TooltipModule],
                        declarations: [PieChartComponent, PieSeriesComponent, PieLabelComponent],
                        exports: [PieChartComponent, i3.NgxChartsModule],
                        providers: [i1.CurrencyPipe],
                        entryComponents: [PieChartComponent],
                    }]
            }] });

    var DonutChartModule = /** @class */ (function () {
        function DonutChartModule() {
        }
        return DonutChartModule;
    }());
    DonutChartModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DonutChartModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DonutChartModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DonutChartModule, declarations: [DonutChartComponent], imports: [i1.CommonModule, i3$1.AmountModule, PieChartModule], exports: [DonutChartComponent, PieChartModule, i3$1.AmountModule] });
    DonutChartModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DonutChartModule, providers: [i1$1.CssVariablesService], imports: [[i1.CommonModule, i3$1.AmountModule, PieChartModule], PieChartModule, i3$1.AmountModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DonutChartModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1.CommonModule, i3$1.AmountModule, PieChartModule],
                        declarations: [DonutChartComponent],
                        exports: [DonutChartComponent, PieChartModule, i3$1.AmountModule],
                        providers: [i1$1.CssVariablesService],
                    }]
            }] });

    var AnalysisTypes;
    (function (AnalysisTypes) {
        AnalysisTypes["INCOME"] = "CRDT";
        AnalysisTypes["SPENDING"] = "DBIT";
    })(AnalysisTypes || (AnalysisTypes = {}));
    var PROPERTIES = {
        analysisType: {
            name: 'analysisIndicator',
            value: AnalysisTypes.SPENDING,
        },
    };
    var Interval;
    (function (Interval) {
        Interval["DAY"] = "DAY";
        Interval["WEEK"] = "WEEK";
        Interval["MONTH"] = "MONTH";
        Interval["YEAR"] = "YEAR";
    })(Interval || (Interval = {}));
    var DEFAULT_INTERVAL = Interval.MONTH;
    var RELEVANCE_PERCENTAGE = 2;
    var CATEGORY_COLORS_CSS_VAR = '--chart-categories-colors';
    var BAR_COLORS_CSS_VAR = '--chart-group-bar-color';
    var TrendTextClasses;
    (function (TrendTextClasses) {
        TrendTextClasses["POSITIVE"] = "text-danger";
        TrendTextClasses["NEGATIVE"] = "text-success";
    })(TrendTextClasses || (TrendTextClasses = {}));
    var TrendArrowClasses;
    (function (TrendArrowClasses) {
        TrendArrowClasses["POSITIVE"] = "arrow-upward";
        TrendArrowClasses["NEGATIVE"] = "arrow-downward";
    })(TrendArrowClasses || (TrendArrowClasses = {}));
    var PERIODS = [
        {
            interval: 'MONTH',
            duration: 1,
            default: true,
        },
        {
            interval: 'MONTH',
            duration: 6,
        },
        {
            interval: 'MONTH',
            duration: 12,
        },
    ];
    var DB_DATE_FORMAT = 'yyyy-MM-dd';

    var MonthSelectorComponent = /** @class */ (function () {
        function MonthSelectorComponent() {
            this.hostRef = this;
            /**
             * Event emitter for selecting a tab.
             */
            // eslint-disable-next-line @angular-eslint/no-output-native
            this.change = new i0.EventEmitter();
            /**
             * Default selected tab
             */
            this.selectedTab = PERIODS[Math.max(PERIODS.map(function (item) { return item.default; }).indexOf(true), 0)].duration;
        }
        /**
         * Change selected tab and triggers the change event after
         * creating start, end dates based on selected tab
         */
        MonthSelectorComponent.prototype.onPeriodRangeChange = function (num) {
            this.selectedTab = num;
            // (monthsRange - 1) to get data starting from this month and 5 months before it,
            // which will end up to 6 months in total (the same of 12 months)
            var startDate = new Date();
            startDate.setMonth(startDate.getMonth() - (num - 1), 1);
            this.change.emit({
                tabIndex: num,
                period: {
                    start: startDate,
                    end: new Date(),
                },
            });
        };
        return MonthSelectorComponent;
    }());
    MonthSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MonthSelectorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    MonthSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: MonthSelectorComponent, selector: "bb-month-selector-ui", inputs: { selectedTab: "selectedTab" }, outputs: { change: "change" }, ngImport: i0__namespace, template: "<div class=\"bb-block bb-block--lg bb-income-spending-analysis-periods bb-button-bar\">\n  <div class=\"btn-group btn-group-toggle\">\n      <button\n        data-role=\"1-month-btn\"\n        class=\"btn btn-secondary\"\n        [ngClass]=\"{active: selectedTab === 1}\"\n        value=\"1\"\n        (click)=\"onPeriodRangeChange(1)\"\n      >\n        <span\n          i18n=\"Data period|One month label@@incomeSpendingAnalysis.label.duration.month.one\"\n        >1</span>\n        <span\n          class=\"d-none d-md-inline\"\n          i18n=\"Data period|One month label@@incomeSpendingAnalysis.label.duration.month.one.largescreen\"\n        >&nbsp;month</span>\n        <span\n          class=\"d-md-none\"\n          i18n=\"Data period|One month label@@incomeSpendingAnalysis.label.duration.month.one.mobilescreen\"\n        >m</span>\n      </button>\n      <button\n        data-role=\"6-month-btn\"\n        class=\"btn btn-secondary\"\n        [ngClass]=\"{active: selectedTab === 6}\"\n        value=\"6\"\n        (click)=\"onPeriodRangeChange(6)\"\n      >\n        <span\n          i18n=\"Data period|One month label@@incomeSpendingAnalysis.label.duration.month.six\"\n        >6</span>\n        <span\n          class=\"d-none d-md-inline\"\n          i18n=\"Data period|One month label@@incomeSpendingAnalysis.label.duration.month.six.largescreen\"\n        >&nbsp;months</span>\n        <span\n          class=\"d-md-none\"\n          i18n=\"Data period|One month label@@incomeSpendingAnalysis.label.duration.month.six.mobilescreen\"\n        >m</span>\n      </button>\n      <button\n        data-role=\"12-month-btn\"\n        class=\"btn btn-secondary\"\n        [ngClass]=\"{active: selectedTab === 12}\"\n        value=\"12\"\n        (click)=\"onPeriodRangeChange(12)\"\n      >\n        <span\n          i18n=\"Data period|One month label@@incomeSpendingAnalysis.label.duration.month.twelve\"\n        >12</span>\n        <span\n          class=\"d-none d-md-inline\"\n          i18n=\"Data period|One month label@@incomeSpendingAnalysis.label.duration.month.twelve.largescreen\"\n        >&nbsp;months</span>\n        <span\n          class=\"d-md-none\"\n          i18n=\"Data period|One month label@@incomeSpendingAnalysis.label.duration.month.twelve.mobilescreen\"\n        >m</span>\n      </button>\n    </div>\n</div>\n", directives: [{ type: i1__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MonthSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-month-selector-ui',
                        templateUrl: './month-selector.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { change: [{
                    type: i0.Output
                }], selectedTab: [{
                    type: i0.Input
                }] } });

    var IncomeSpendingAnalysisWidgetService = /** @class */ (function () {
        function IncomeSpendingAnalysisWidgetService(categoryTotalsHttpService, categoryPeriodTotalsHttpService) {
            this.categoryTotalsHttpService = categoryTotalsHttpService;
            this.categoryPeriodTotalsHttpService = categoryPeriodTotalsHttpService;
        }
        IncomeSpendingAnalysisWidgetService.prototype.loadAnalysisData = function (params) {
            return this.categoryTotalsHttpService.getCategorytotals(params);
        };
        IncomeSpendingAnalysisWidgetService.prototype.loadAnalysisPeriodData = function (params) {
            return this.categoryPeriodTotalsHttpService.getCategoryPeriodTotals(params);
        };
        return IncomeSpendingAnalysisWidgetService;
    }());
    IncomeSpendingAnalysisWidgetService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisWidgetService, deps: [{ token: i1__namespace$2.CategoryTotalsHttpService }, { token: i1__namespace$2.CategoryPeriodTotalsHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    IncomeSpendingAnalysisWidgetService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisWidgetService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisWidgetService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$2.CategoryTotalsHttpService }, { type: i1__namespace$2.CategoryPeriodTotalsHttpService }]; } });

    var filterInputParameters = function (input, prop) { return rxjs.combineLatest([input, prop]).pipe(operators.map(function (_c) {
        var _d = __read(_c, 2), inputVal = _d[0], propVal = _d[1];
        return (inputVal !== undefined ? inputVal : propVal);
    })); };
    var IncomeSpendingAnalysisWidgetComponent = /** @class */ (function () {
        function IncomeSpendingAnalysisWidgetComponent(service, cssVariableService, model, route, datePipe, cd, locale) {
            var _this = this;
            this.service = service;
            this.cssVariableService = cssVariableService;
            this.model = model;
            this.route = route;
            this.datePipe = datePipe;
            this.cd = cd;
            this.locale = locale;
            this.hostRef = this;
            this.isIE = /(edge|msie|trident)/i.test(navigator.userAgent);
            this.analysisTypeSubject = new rxjs.BehaviorSubject(undefined);
            this.endDateValue = new Date();
            this.startDateValue = new Date(this.endDateValue.getFullYear(), this.endDateValue.getMonth(), 1);
            this.initialDateParams = {
                periodStartDate: this.datePipe.transform(this.startDateValue, DB_DATE_FORMAT) || '',
                periodEndDate: this.datePipe.transform(this.endDateValue, DB_DATE_FORMAT) || '',
                intervalDuration: DEFAULT_INTERVAL,
            };
            this.labelPositioned = false;
            this.iconHeight = 0;
            this.labelHeight = 0;
            this.iconWidth = 0;
            this.selectedTab = PERIODS[Math.max(PERIODS.map(function (item) { return item.default; }).indexOf(true), 0)].duration;
            // BarChart Options
            this.chartOptions = rxjs.from(this.cssVariableService.getCssVariable(BAR_COLORS_CSS_VAR)).pipe(operators.map(function (cssVar) {
                return {
                    colors: cssVar ? [cssVar.slice(0, cssVar.indexOf(','))] : [''],
                    showXAxis: true,
                    showYAxis: true,
                    gradient: false,
                    showLegend: false,
                    showXAxisLabel: true,
                    showYAxisLabel: true,
                    roundEdges: false,
                };
            }));
            this.isLoading = false;
            this.analysisType = filterInputParameters(this.analysisTypeSubject.asObservable(), this.getProperty(PROPERTIES.analysisType).pipe(operators.map(function (val) { return val; })));
            this.arrangementIds = this.getRouteParam(this.route, 'selectedAccount').pipe(operators.map(function (selectedAccount) { return (selectedAccount ? [selectedAccount] : []); }));
            this.dateParams = new rxjs.BehaviorSubject(this.initialDateParams);
            this.dataParams = rxjs.combineLatest(this.arrangementIds, this.dateParams.asObservable(), this.analysisType).pipe(operators.map(function (_c) {
                var _d = __read(_c, 3), arrangementIds = _d[0], dateParams = _d[1], creditDebitIndicator = _d[2];
                _this.error = undefined;
                return Object.assign(Object.assign({ arrangementIds: arrangementIds || [] }, dateParams), { creditDebitIndicator: creditDebitIndicator });
            }), operators.shareReplay(1));
            this.analysisData = this.dataParams.pipe(operators.filter(function (data) { return !!data.arrangementIds.length; }), operators.switchMap(function (params) { return _this.service.loadAnalysisData(params); }), operators.map(function (data) {
                if (!data || !data.items) {
                    return data;
                }
                _this.labelPositioned = false;
                var totalPortion = 0;
                return Object.assign(Object.assign({}, data), { series: data.items
                        .sort(function (a, b) { return (parseFloat(b.totalAmount.amount) > parseFloat(a.totalAmount.amount) ? 1 : -1); })
                        .map(function (item) { return (Object.assign(Object.assign({}, item), { name: item.category, value: parseFloat(item.totalAmount.amount), cssClass: _this.transformCategoryToIconName(item.category), totalPortion: (totalPortion += item.portion) })); }) });
            }), operators.catchError(function (err) { return _this.handleError(err); }), operators.share());
            this.analysisPeriodData = rxjs.zip(this.analysisData, this.dataParams).pipe(operators.mergeMap(function (_c) {
                var _d = __read(_c, 2), data = _d[0], params = _d[1];
                var categories = (data.items || []).map(function (item) { return item.category; });
                var newParams = Object.assign(Object.assign({}, params), { categories: categories.length ? categories : [''] });
                return _this.service.loadAnalysisPeriodData(newParams).pipe(operators.map(_this.formatPeriodData), operators.map(function (series) { return ({ series: series, categoryData: data, items: [] }); }));
            }), operators.tap(function () {
                _this.isLoading = false;
                _this.cd.markForCheck();
            }), operators.catchError(function (err) { return _this.handleError(err); }));
            this.colors = rxjs.combineLatest([
                this.analysisData,
                rxjs.from(this.cssVariableService.getCssVariable(CATEGORY_COLORS_CSS_VAR)),
            ]).pipe(operators.map(function (_c) {
                var _d = __read(_c, 2), data = _d[0], cssVar = _d[1];
                if (!cssVar || !data || !data.series || !data.series.length) {
                    return [];
                }
                var identities = cssVar.split(',').reduce(function (accumulator, definition) {
                    var _c;
                    var _d = __read(definition.trim().split(' '), 3), category = _d[0], color = _d[1], icon = _d[2];
                    return Object.assign(Object.assign({}, accumulator), (_c = {}, _c[category] = {
                        color: color,
                        icon: icon,
                    }, _c));
                }, {});
                return data.series.map(function (item) {
                    var _a, _b;
                    return ({
                        name: item.name || '',
                        value: ((_a = identities[item.cssClass]) === null || _a === void 0 ? void 0 : _a.color) || '',
                        icon: ((_b = identities[item.cssClass]) === null || _b === void 0 ? void 0 : _b.icon) || '',
                    });
                });
            }));
            this.formatPeriodData = this.formatPeriodData.bind(this);
        }
        Object.defineProperty(IncomeSpendingAnalysisWidgetComponent.prototype, "analysisTypeValue", {
            set: function (value) {
                this.analysisTypeSubject.next(value);
            },
            enumerable: false,
            configurable: true
        });
        IncomeSpendingAnalysisWidgetComponent.prototype.getRouteParam = function (route, param) {
            var paramValue = route.paramMap.pipe(operators.pluck('params', param));
            if (!route.parent) {
                return paramValue;
            }
            // ensure that level that has actual value keeps it from being cleared
            return rxjs.combineLatest(paramValue, this.getRouteParam(route.parent, param)).pipe(operators.map(function (params) { return params[0] || params[1]; }));
        };
        IncomeSpendingAnalysisWidgetComponent.prototype.getProperty = function (property) {
            return this.model ? this.model.property(property.name, property.value) : rxjs.of(property.value);
        };
        Object.defineProperty(IncomeSpendingAnalysisWidgetComponent.prototype, "startDate", {
            get: function () {
                return this.startDateValue;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(IncomeSpendingAnalysisWidgetComponent.prototype, "endDate", {
            get: function () {
                return this.endDateValue;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(IncomeSpendingAnalysisWidgetComponent.prototype, "formatters", {
            get: function () {
                var _this = this;
                return {
                    end: function (date) {
                        var now = new Date();
                        if (now.getFullYear() === date.getFullYear() &&
                            now.getMonth() === date.getMonth() &&
                            now.getDate() === date.getDate()) {
                            return _this.translationNow.nativeElement.textContent;
                        }
                        return _this.datePipe.transform(date, 'mediumDate') || '';
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(IncomeSpendingAnalysisWidgetComponent.prototype, "isSpending", {
            get: function () {
                return this.analysisType.pipe(operators.map(function (property) { return property === AnalysisTypes.SPENDING; }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(IncomeSpendingAnalysisWidgetComponent.prototype, "relevance", {
            get: function () {
                return RELEVANCE_PERCENTAGE;
            },
            enumerable: false,
            configurable: true
        });
        IncomeSpendingAnalysisWidgetComponent.prototype.selectTab = function (num) {
            this.selectedTab = PERIODS[Math.max(PERIODS.map(function (item) { return item.duration; }).indexOf(num), 0)].duration;
        };
        IncomeSpendingAnalysisWidgetComponent.prototype.handleError = function (error) {
            this.error = error.statusText;
            return rxjs.of({ items: [] });
        };
        IncomeSpendingAnalysisWidgetComponent.prototype.formatPeriodData = function (res) {
            var _this = this;
            if (!res || !res.periods || !res.total) {
                return [];
            }
            return parseFloat(res.total.amount) !== 0
                ? res.periods.map(function (period) {
                    var _a;
                    return ({
                        name: _this.datePipe.transform(period.intervalStartDate, 'MMM') || '',
                        value: period.total ? parseFloat(period.total.amount) : 0,
                        currencyCode: (_a = period.total) === null || _a === void 0 ? void 0 : _a.currencyCode,
                    });
                })
                : [];
        };
        IncomeSpendingAnalysisWidgetComponent.prototype.transformCategoryToIconName = function (transactionCategory) {
            return "" + transactionCategory.toLowerCase().replace(/\W/g, '-').replace(/-{2,}/g, '-');
        };
        IncomeSpendingAnalysisWidgetComponent.prototype.textX = function (data) {
            return data ? data.pos[0] : 0;
        };
        IncomeSpendingAnalysisWidgetComponent.prototype.textY = function (data) {
            return data ? data.pos[1] : 0;
        };
        IncomeSpendingAnalysisWidgetComponent.prototype.getCategoryClass = function (cssClass) {
            return "bb-transaction-category-" + cssClass;
        };
        IncomeSpendingAnalysisWidgetComponent.prototype.getTextTransition = function () {
            return this.isIE ? '' : 'transform 0.75s';
        };
        IncomeSpendingAnalysisWidgetComponent.prototype.getTransformOffsetY = function (data) {
            var percetage = data.data.totalPortion - data.data.portion / 2;
            return percetage > 25 && percetage < 75 ? this.iconHeight + this.labelHeight : -this.labelHeight;
        };
        IncomeSpendingAnalysisWidgetComponent.prototype.getStyleTransform = function (data, offsetX, offsetY) {
            return this.isIE ? '' : "translate3d(" + (this.textX(data) + offsetX) + "px, " + (this.textY(data) + offsetY) + "px, 0)";
        };
        IncomeSpendingAnalysisWidgetComponent.prototype.getAttrTransform = function (data, offsetX, offsetY) {
            return !this.isIE ? '' : "translate(" + (this.textX(data) + offsetX) + ", " + (this.textY(data) + offsetY) + ")";
        };
        IncomeSpendingAnalysisWidgetComponent.prototype.textClass = function (value, isSpending) {
            if (isSpending === void 0) { isSpending = true; }
            // positive trend has different meaning for income and for spending
            var multiplier = isSpending ? 1 : -1;
            return value * multiplier > 0 ? TrendTextClasses.POSITIVE : TrendTextClasses.NEGATIVE;
        };
        IncomeSpendingAnalysisWidgetComponent.prototype.iconClass = function (value) {
            if (value < -1) {
                return TrendArrowClasses.NEGATIVE;
            }
            else if (value > 1) {
                return TrendArrowClasses.POSITIVE;
            }
            return '';
        };
        IncomeSpendingAnalysisWidgetComponent.prototype.abs = function (value) {
            return Math.abs(value);
        };
        IncomeSpendingAnalysisWidgetComponent.prototype.onPeriodRangeChange = function (monthSelectorData) {
            this.selectTab(monthSelectorData.tabIndex);
            this.onPeriodChange(monthSelectorData.period);
        };
        IncomeSpendingAnalysisWidgetComponent.prototype.onPeriodChange = function (period) {
            this.isLoading = true;
            this.startDateValue = period.start;
            this.endDateValue = period.end;
            this.dateParams.next(Object.assign(Object.assign({}, this.initialDateParams), { periodStartDate: this.datePipe.transform(period.start, DB_DATE_FORMAT) || '', periodEndDate: this.datePipe.transform(period.end, DB_DATE_FORMAT) || '' }));
        };
        IncomeSpendingAnalysisWidgetComponent.prototype.customYAxisTickFormatting = function (totalPeriodSeries) {
            var _a, _b;
            var currencyCode = (_b = (_a = totalPeriodSeries.categoryData) === null || _a === void 0 ? void 0 : _a.total) === null || _b === void 0 ? void 0 : _b.currencyCode;
            var currencySymbol = currencyCode ? i1.getCurrencySymbol(currencyCode, 'wide', this.locale) : currencyCode;
            return function (amount) { return currencySymbol + " " + amount; };
        };
        IncomeSpendingAnalysisWidgetComponent.prototype.ngAfterViewChecked = function () {
            if (this.labelPositioned || !this.chartIcon || !this.chartLabel) {
                return;
            }
            this.labelHeight = this.chartLabel.nativeElement.getBoundingClientRect().height / 2;
            this.iconHeight = this.chartIcon.nativeElement.getBoundingClientRect().height;
            this.iconWidth = (this.chartIcon.nativeElement.getBoundingClientRect().width - 2) / 2;
            this.labelPositioned = true;
            this.cd.detectChanges();
        };
        return IncomeSpendingAnalysisWidgetComponent;
    }());
    IncomeSpendingAnalysisWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisWidgetComponent, deps: [{ token: IncomeSpendingAnalysisWidgetService }, { token: i1__namespace$1.CssVariablesService }, { token: i3__namespace$2.ItemModel, optional: true }, { token: i4__namespace.ActivatedRoute }, { token: i1__namespace.DatePipe }, { token: i0__namespace.ChangeDetectorRef }, { token: i0.LOCALE_ID }], target: i0__namespace.ɵɵFactoryTarget.Component });
    IncomeSpendingAnalysisWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: IncomeSpendingAnalysisWidgetComponent, selector: "bb-income-spending-analysis-widget", inputs: { analysisTypeValue: ["analysisType", "analysisTypeValue"] }, providers: [i1.DatePipe], viewQueries: [{ propertyName: "chartIcon", first: true, predicate: ["bbChartLabelIcon"], descendants: true }, { propertyName: "chartLabel", first: true, predicate: ["bbChartLabelText"], descendants: true }, { propertyName: "translationNow", first: true, predicate: ["transNow"], descendants: true, static: true }], ngImport: i0__namespace, template: "<ng-container\n  bbIncomeSpendingAnalysisCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{ isLoading: hostRef.isLoading, analysisData: hostRef.analysisData, analysisPeriodData: hostRef.analysisPeriodData, colors: hostRef.colors | async, isSpending: hostRef.isSpending | async, chartOptions: hostRef.chartOptions | async }\"\n></ng-container>\n\n<ng-template\n  bbIncomeSpendingAnalysisCustomizable\n  let-hostRef\n  let-analysisData=\"context.analysisData\"\n  let-analysisPeriodData=\"context.analysisPeriodData\"\n  let-colors=\"context.colors\"\n  let-isSpending=\"context.isSpending\"\n  let-chartOptions=\"context.chartOptions\"\n>\n  <ng-container *ngIf=\"!hostRef.error; else errorState\">\n    <div class=\"card\">\n      <div class=\"card-body\">\n        <ng-container\n          bbIncomeSpendingAnalysisMonthSelectorCustomizable\n          [bbHostRef]=\"hostRef\"\n        ></ng-container>\n\n        <ng-container\n          *ngIf=\"hostRef.selectedTab === 1\"\n          bbIncomeSpendingAnalysisPeriodSelectorCustomizable\n          [bbHostRef]=\"hostRef\"\n        ></ng-container>\n        <ng-container *ngIf=\"(arrangementIds | async)?.length; else emptyState\">\n          <ng-container *ngIf=\"hostRef.selectedTab === 1\">\n            <ng-container *ngIf=\"analysisData | async as data ; else loadingState\">\n              <ng-container *ngIf=\"data?.items?.length; else emptyState\">\n                <ng-container\n                  bbIncomeSpendingAnalysisChartWrapperCustomizable\n                  [bbHostRef]=\"hostRef\"\n                  [bbTemplateContext]=\"{ data: data, colors: colors, isSpending: isSpending }\"\n                ></ng-container>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n          <ng-container *ngIf=\"hostRef.selectedTab !== 1\">\n            <ng-container *ngIf=\"analysisPeriodData | async as data; else loadingState\">\n              <ng-container *ngIf=\"!hostRef.isLoading else loadingState\">\n                <ng-container *ngIf=\"data.series && data.series.length; else emptyState\">\n                  <ng-container\n                    bbIncomeSpendingAnalysisBarChartWrapperCustomizable\n                    [bbHostRef]=\"hostRef\"\n                    [bbTemplateContext]=\"{ data: data, chartOptions: chartOptions }\"\n                  ></ng-container>\n                </ng-container>\n\n                <ng-container *ngIf=\"data.categoryData?.items?.length else emptyState\">\n                  <ng-container\n                    bbIncomeSpendingAnalysisCategoriesListCustomizable\n                    [bbHostRef]=\"hostRef\"\n                    [bbTemplateContext]=\"{ data: data.categoryData, isSpending: isSpending }\"\n                  ></ng-container>\n                </ng-container>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-template bbIncomeSpendingAnalysisMonthSelectorCustomizable let-hostRef>\n    <bb-month-selector-ui\n      [selectedTab]=\"hostRef.selectedTab\"\n      (change)=\"hostRef.onPeriodRangeChange($event)\"\n    ></bb-month-selector-ui>\n  </ng-template>\n\n  <ng-template bbIncomeSpendingAnalysisPeriodSelectorCustomizable let-hostRef>\n    <div class=\"bb-stack bb-stack--center bb-block bb-block--lg\">\n      <bb-period-selector-ui\n        [periodStart]=\"hostRef.startDate\"\n        [periodEnd]=\"hostRef.endDate\"\n        [periodFormatters]=\"hostRef.formatters\"\n        (periodChange)=\"hostRef.onPeriodChange($event)\"\n      ></bb-period-selector-ui>\n    </div>\n  </ng-template>\n \n  <ng-template\n    bbIncomeSpendingAnalysisChartWrapperCustomizable\n    let-hostRef\n    let-data=\"context.data\"\n    let-colors=\"context.colors\"\n    let-isSpending=\"context.isSpending\"\n  >\n    <div class=\"bb-stack bb-stack--center position-relative chart-donut chart-donut-large chart-donut-container-inflated\">\n      <div class=\"absolute-center\">\n        <div class=\"text-center text-muted font-weight-bold chart-donut-center-word\" data-role=\"donut-chart-label\">\n          <span\n            *ngIf=\"isSpending\"\n            i18n=\"Total spending|Label for total spending amount@@incomeSpendingAnalysis.label.total.spending\"\n          >\n            Total spending\n          </span>\n          <span\n            *ngIf=\"!isSpending\"\n            i18n=\"Total income|Label for total income amount@@incomeSpendingAnalysis.label.total.income\"\n          >\n            Total income\n          </span>\n        </div>\n        <div class=\"h6 text-center\">\n          <bb-amount-ui\n            [amount]=\"data.total.amount\"\n            [currency]=\"data.total.currencyCode\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n      <ng-container\n        bbIncomeSpendingAnalysisChartCustomizable\n        [bbHostRef]=\"hostRef\"\n        [bbTemplateContext]=\"{ data: data, colors: colors, isSpending: isSpending }\"\n      ></ng-container>\n    </div>\n  </ng-template>\n\n  <ng-template\n    bbIncomeSpendingAnalysisChartCustomizable\n    let-hostRef\n    let-data=\"context.data\"\n    let-colors=\"context.colors\"\n  >\n    <bb-donut-chart-ui\n      [data]=\"data.series\"\n      [colors]=\"colors\"\n      [relevancePercentage]=\"hostRef.relevance\"\n      [tooltipTmpl]=\"donutChartTooltip\"\n      [labelTmpl]=\"donutChartLabel\"\n    ></bb-donut-chart-ui>\n  </ng-template>\n\n  <ng-template #errorState>\n    <bb-empty-state-ui\n      title=\"\"\n      [subtitle]=\"error\"\n      iconModifier=\"error\"\n      iconSize=\"xxl\"\n      iconColor=\"gray\"\n      iconClasses=\"text-muted\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #loadingState>\n    <bb-loading-indicator-ui\n      i18n-text=\"Loading analysis data|Text to display while loading income/spending analysis data@@incomeSpendingAnalysis.state.loadingData\"\n      text=\"Loading analysis data...\">\n    </bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-template #emptyState>\n    <div class=\"bb-stack bb-stack--center\">\n      <bb-empty-state-ui\n      i18n-title=\"No data title|Title of a message that is shown when there is no data to display@@incomeSpendingAnalysis.state.noResults.title\"\n      title=\"No Data Found\"\n      i18n-subtitle=\"No data subtitle|Subtitle of a message that is shown when there is no data to display@@incomeSpendingAnalysis.state.noResults.subtitle\"\n      subtitle=\"You don't have any data to be displayed. Please try selecting a different period.\"\n      iconSize=\"xxl\"\n      iconModifier=\"donut-small\"\n      class=\"bb-text-align-center\"\n    ></bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template bbIncomeSpendingAnalysisCategoriesListCustomizable let-hostRef let-data=\"context.data\" let-isSpending=\"context.isSpending\">\n    <div class=\"list-group-item rounded-0 border-left-0 border-right-0 border-top-0 list-item-transaction-accordion pt-3\" data-role=\"category-list-header\">\n      <div class=\"transaction-item row align-items-center\" role=\"row\">\n        <div class=\"col-6\">\n          <span *ngIf=\"isSpending\" class=\"h5\" i18n=\"Spending per category|Categories list spending label@@categories.list.spending.label\">\n            Spending per category\n          </span>\n          <span *ngIf=\"!isSpending\" class=\"h5\" i18n=\"Income per category|Categories list income label@@categories.list.income.label\">\n            Income per category\n          </span>\n        </div>\n        <div class=\"col-6\">\n          <div class=\"transaction-amount text-right h5 m-0\">\n            <span i18n=\"Total amount|Total amount label@@categories.list.total.label\">\n              Total amount\n            </span>\n            <bb-amount-ui [amount]=\"data.total.amount\" [currency]=\"data.total.currencyCode\"></bb-amount-ui>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"list-group-item rounded-0 border-left-0 border-right-0 list-item-transaction-accordion py-3\" *ngFor=\"let item of data?.items\" data-role=\"category-list-item\">\n      <div class=\"transaction-item row d-flex align-items-center\" role=\"row\">\n        <div class=\"transaction-category-icon col-6 d-flex align-items-center\">\n          <bb-icon-ui \n            size=\"sm\" \n            backgroundType=\"circle\" \n            name=\"category-{{ hostRef.transformCategoryToIconName(item.category) }}\"\n          ></bb-icon-ui>\n          <strong>\n            <span class=\"bb-transaction-category-name px-3\">{{item.category}}</span>\n          </strong>\n        </div>\n        <div class=\"col-6\">\n          <div class=\"transaction-amount text-right\">\n            <bb-amount-ui [amount]=\"item.totalAmount.amount\" [currency]=\"item.totalAmount.currencyCode\"></bb-amount-ui>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template bbIncomeSpendingAnalysisBarChartWrapperCustomizable let-chartOptions=\"context.chartOptions\" let-data=\"context.data\">\n    <div class=\"d-block chart-bar\">\n      <ngx-charts-bar-vertical\n        [scheme]=\"{domain: chartOptions.colors}\"\n        [results]=\"data.series\"\n        [gradient]=\"chartOptions.gradient\"\n        [xAxis]=\"chartOptions.showXAxis\"\n        [yAxis]=\"chartOptions.showYAxis\"\n        [legend]=\"chartOptions.showLegend\"\n        [showXAxisLabel]=\"chartOptions.showXAxisLabel\"\n        [showYAxisLabel]=\"chartOptions.showYAxisLabel\"\n        [yAxisTickFormatting]=\"customYAxisTickFormatting(data)\"\n        [showGridLines]=\"true\"\n        [roundEdges]=\"chartOptions.roundEdges\"\n      >\n        <ng-template #tooltipTemplate let-model=\"model\">\n          <div class=\"my-2\">\n            <span class=\"mr-2\">{{model.name}}</span>\n            <bb-amount-ui class=\"ml-2\" [amount]=\"model.value\" [currency]=\"data.categoryData.total.currencyCode\"></bb-amount-ui>\n          </div>\n        </ng-template>\n      </ngx-charts-bar-vertical>\n    </div>\n  </ng-template>\n\n  <ng-template\n    #donutChartLabel\n    let-data=\"data\"\n    let-color=\"color\"\n    let-label=\"label\"\n    let-icon=\"icon\"\n  >\n    <svg:g\n      [attr.transform]=\"hostRef.getAttrTransform(data, -hostRef.iconWidth, hostRef.getTransformOffsetY(data))\"\n      [style.transform]=\"hostRef.getStyleTransform(data, -hostRef.iconWidth, hostRef.getTransformOffsetY(data))\"\n      [style.fill]=\"color\"\n    >\n      <svg:text\n        #bbChartLabelIcon\n        class=\"bb-transaction-category bb-transaction-category-icon\"\n        [ngClass]=\"hostRef.getCategoryClass(data?.data?.cssClass)\"\n        data-role=\"donut-chart-segment-icon\"\n        aria-hidden=\"true\"\n      >\n        {{ icon }}\n      </svg:text>\n    </svg:g>\n    <svg:g\n      [attr.transform]=\"hostRef.getAttrTransform(data, 0, 0)\"\n      [style.transform]=\"hostRef.getStyleTransform(data, 0, 0)\"\n      [style.transition]=\"hostRef.getTextTransition()\"\n    >\n      <svg:text\n        #bbChartLabelText\n        class=\"font-weight-bold\"\n        [class.animation]=\"true\"\n        dy=\".35em\"\n        [style.fill]=\"color\"\n        [style.textAnchor]=\"'middle'\"\n        [style.shapeRendering]=\"'crispEdges'\"\n        data-role=\"donut-chart-segment-label\"\n        aria-hidden=\"true\"\n      >\n        {{ label }}\n      </svg:text>\n    </svg:g>\n    <span class=\"sr-only\" i18n=\"Chart section, interpolation category, interpolation amount|Label for chart displaying category, amount, and introduction@@incomeSpendingAnalysis.donutChart.label\">\n      Chart section, {{data?.data?.cssClass}}, {{label}}\n    </span>\n  </ng-template>\n\n  <ng-template\n    #donutChartTooltip\n    let-name=\"name\"\n    let-cssClass=\"cssClass\"\n    let-totalAmount=\"totalAmount\"\n    let-portion=\"portion\"\n    let-trend=\"trend\"\n    let-arrowClass=\"arrowClass\"\n  >\n    <div\n      bbDynamicId\n      #tooltipElement\n      class=\"row pb-3 position-relative chart-tooltip chart-tooltip-default text-left\"\n      [ngClass]=\"arrowClass\"\n      aria-live=\"polite\"\n    >\n      <span class=\"d-flex chart-tooltip-analysis-category text-muted\">\n        <span\n          *ngIf=\"hostRef.relevance >= portion\"\n          class=\"d-inline-block mr-1\"\n        >\n          <bb-icon-ui \n            size=\"md\"\n            backgroundType=\"circle\"\n            name=\"category-{{ hostRef.transformCategoryToIconName(cssClass) }}\"\n          ></bb-icon-ui>\n        </span>\n        {{ name }}\n      </span>\n      <div>\n        <div class=\"row\">\n          <strong>\n            <bb-amount-ui \n              class=\"h5 my-1 col-12 chart-tooltip-analysis-amount\" \n              [amount]=\"totalAmount.amount\"\n              [currency]=\"totalAmount.currencyCode\"\n            ></bb-amount-ui>\n          </strong>\n        </div>\n        <p \n          *ngIf=\"totalAmount.amount !== undefined\" \n          class=\"chart-tooltip-analysis-portion text-muted\"\n          i18n=\"Slice portion|Active slice portion of total amount@@donut-chart.tooltip.portion\"\n        >\n          {{ portion }}% of total\n        </p>\n        <ng-container *ngIf=\"trend !== undefined\">\n          <hr class=\"chart-tooltip-divider p-0\">\n          <p \n            class=\"chart-tooltip-analysis-trend\" \n            [ngClass]=\"hostRef.textClass(trend, isSpending)\"\n          >\n            <span class=\"d-flex align-items-center d-block mt-1\">\n              <bb-icon-ui \n                class=\"mr-1\" \n                [name]=\"hostRef.iconClass(trend)\"\n              ></bb-icon-ui>\n              <span class=\"h5 m-0 d-block\">\n                <ng-container *ngIf=\"hostRef.abs(trend) >= 1\">\n                  {{ hostRef.abs(trend) }}%\n                </ng-container>\n              </span>\n            </span>\n            <span class=\"chart-tooltip-info-text text-muted w-100\">\n              <ng-container \n                *ngIf=\"trend <= -1\"\n                i18n=\"Less than previous month|Text to describe that trend is negative@@donut-chart.tooltip.trend.less\"\n              >\n                less than previous month\n              </ng-container>\n              <ng-container \n                *ngIf=\"trend >= 1\"\n                i18n=\"More than previous month|Text to describe that trend is positive@@donut-chart.tooltip.trend.more\"\n              >\n                more than previous month\n              </ng-container>\n              <ng-container \n                *ngIf=\"trend > -1 && trend < 1\"\n                i18n=\"Same as previous month|Text to describe that trend is around zero@@donut-chart.tooltip.trend.same\"\n              >\n                Same as previous month\n              </ng-container>\n            </span>\n          </p>\n        </ng-container>\n      </div>\n    </div>\n  </ng-template>\n</ng-template>\n\n<span #transNow class=\"ng-cloak\" i18n=\"Now|Label for current day in period selector@@incomeSpendingAnalysis.period.now\">Now</span>\n", components: [{ type: i0__namespace.forwardRef(function () { return MonthSelectorComponent; }), selector: "bb-month-selector-ui", inputs: ["selectedTab"], outputs: ["change"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.PeriodSelectorComponent; }), selector: "bb-period-selector-ui", inputs: ["periodStart", "periodEnd", "periodFormatters", "period"], outputs: ["periodChange"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0__namespace.forwardRef(function () { return DonutChartComponent; }), selector: "bb-donut-chart-ui", inputs: ["data", "colors", "relevancePercentage", "tooltipTmpl", "labelTmpl"] }, { type: i0__namespace.forwardRef(function () { return i10__namespace.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0__namespace.forwardRef(function () { return i11__namespace.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0__namespace.forwardRef(function () { return i12__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace.BarVerticalComponent; }), selector: "ngx-charts-bar-vertical", inputs: ["legend", "legendTitle", "legendPosition", "tooltipDisabled", "showGridLines", "activeEntries", "trimXAxisTicks", "trimYAxisTicks", "rotateXAxisTicks", "maxXAxisTickLength", "maxYAxisTickLength", "barPadding", "roundDomains", "roundEdges", "showDataLabel", "noBarWhenZero", "xAxis", "yAxis", "showXAxisLabel", "showYAxisLabel", "xAxisLabel", "yAxisLabel", "gradient", "schemeType", "xAxisTickFormatting", "yAxisTickFormatting", "xAxisTicks", "yAxisTicks", "yScaleMax", "yScaleMin", "dataLabelFormatting"], outputs: ["activate", "deactivate"] }], directives: [{ type: i0__namespace.forwardRef(function () { return IncomeSpendingAnalysisCustomizableDirective; }), selector: "[bbIncomeSpendingAnalysisCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return IncomeSpendingAnalysisMonthSelectorCustomizableDirective; }), selector: "[bbIncomeSpendingAnalysisMonthSelectorCustomizable]" }, { type: i0__namespace.forwardRef(function () { return IncomeSpendingAnalysisPeriodSelectorCustomizableDirective; }), selector: "[bbIncomeSpendingAnalysisPeriodSelectorCustomizable]" }, { type: i0__namespace.forwardRef(function () { return IncomeSpendingAnalysisChartWrapperCustomizableDirective; }), selector: "[bbIncomeSpendingAnalysisChartWrapperCustomizable]" }, { type: i0__namespace.forwardRef(function () { return IncomeSpendingAnalysisBarChartWrapperCustomizableDirective; }), selector: "[bbIncomeSpendingAnalysisBarChartWrapperCustomizable]" }, { type: i0__namespace.forwardRef(function () { return IncomeSpendingAnalysisCategoriesListCustomizableDirective; }), selector: "[bbIncomeSpendingAnalysisCategoriesListCustomizable]" }, { type: i0__namespace.forwardRef(function () { return IncomeSpendingAnalysisChartCustomizableDirective; }), selector: "[bbIncomeSpendingAnalysisChartCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i1__namespace.AsyncPipe; }) }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-income-spending-analysis-widget',
                        templateUrl: './income-spending-analysis.component.html',
                        providers: [i1.DatePipe],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: IncomeSpendingAnalysisWidgetService }, { type: i1__namespace$1.CssVariablesService }, { type: i3__namespace$2.ItemModel, decorators: [{
                            type: i0.Optional
                        }] }, { type: i4__namespace.ActivatedRoute }, { type: i1__namespace.DatePipe }, { type: i0__namespace.ChangeDetectorRef }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.LOCALE_ID]
                        }] }];
        }, propDecorators: { analysisTypeValue: [{
                    type: i0.Input,
                    args: ['analysisType']
                }], chartIcon: [{
                    type: i0.ViewChild,
                    args: ['bbChartLabelIcon']
                }], chartLabel: [{
                    type: i0.ViewChild,
                    args: ['bbChartLabelText']
                }], translationNow: [{
                    type: i0.ViewChild,
                    args: ['transNow', { static: true }]
                }] } });
    var IncomeSpendingAnalysisCustomizableDirective = /** @class */ (function (_super) {
        __extends(IncomeSpendingAnalysisCustomizableDirective, _super);
        function IncomeSpendingAnalysisCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return IncomeSpendingAnalysisCustomizableDirective;
    }(i3$2.BbTemplate));
    IncomeSpendingAnalysisCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    IncomeSpendingAnalysisCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IncomeSpendingAnalysisCustomizableDirective, selector: "[bbIncomeSpendingAnalysisCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbIncomeSpendingAnalysisCustomizable]',
                    }]
            }] });
    var IncomeSpendingAnalysisPeriodSelectorCustomizableDirective = /** @class */ (function (_super) {
        __extends(IncomeSpendingAnalysisPeriodSelectorCustomizableDirective, _super);
        function IncomeSpendingAnalysisPeriodSelectorCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return IncomeSpendingAnalysisPeriodSelectorCustomizableDirective;
    }(i3$2.BbTemplate));
    IncomeSpendingAnalysisPeriodSelectorCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisPeriodSelectorCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    IncomeSpendingAnalysisPeriodSelectorCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IncomeSpendingAnalysisPeriodSelectorCustomizableDirective, selector: "[bbIncomeSpendingAnalysisPeriodSelectorCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisPeriodSelectorCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbIncomeSpendingAnalysisPeriodSelectorCustomizable]',
                    }]
            }] });
    var IncomeSpendingAnalysisChartWrapperCustomizableDirective = /** @class */ (function (_super) {
        __extends(IncomeSpendingAnalysisChartWrapperCustomizableDirective, _super);
        function IncomeSpendingAnalysisChartWrapperCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return IncomeSpendingAnalysisChartWrapperCustomizableDirective;
    }(i3$2.BbTemplate));
    IncomeSpendingAnalysisChartWrapperCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisChartWrapperCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    IncomeSpendingAnalysisChartWrapperCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IncomeSpendingAnalysisChartWrapperCustomizableDirective, selector: "[bbIncomeSpendingAnalysisChartWrapperCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisChartWrapperCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbIncomeSpendingAnalysisChartWrapperCustomizable]',
                    }]
            }] });
    var IncomeSpendingAnalysisCategoriesListCustomizableDirective = /** @class */ (function (_super) {
        __extends(IncomeSpendingAnalysisCategoriesListCustomizableDirective, _super);
        function IncomeSpendingAnalysisCategoriesListCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return IncomeSpendingAnalysisCategoriesListCustomizableDirective;
    }(i3$2.BbTemplate));
    IncomeSpendingAnalysisCategoriesListCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisCategoriesListCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    IncomeSpendingAnalysisCategoriesListCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IncomeSpendingAnalysisCategoriesListCustomizableDirective, selector: "[bbIncomeSpendingAnalysisCategoriesListCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisCategoriesListCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbIncomeSpendingAnalysisCategoriesListCustomizable]',
                    }]
            }] });
    var IncomeSpendingAnalysisChartCustomizableDirective = /** @class */ (function (_super) {
        __extends(IncomeSpendingAnalysisChartCustomizableDirective, _super);
        function IncomeSpendingAnalysisChartCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return IncomeSpendingAnalysisChartCustomizableDirective;
    }(i3$2.BbTemplate));
    IncomeSpendingAnalysisChartCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisChartCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    IncomeSpendingAnalysisChartCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IncomeSpendingAnalysisChartCustomizableDirective, selector: "[bbIncomeSpendingAnalysisChartCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisChartCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbIncomeSpendingAnalysisChartCustomizable]',
                    }]
            }] });
    var IncomeSpendingAnalysisBarChartWrapperCustomizableDirective = /** @class */ (function (_super) {
        __extends(IncomeSpendingAnalysisBarChartWrapperCustomizableDirective, _super);
        function IncomeSpendingAnalysisBarChartWrapperCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return IncomeSpendingAnalysisBarChartWrapperCustomizableDirective;
    }(i3$2.BbTemplate));
    IncomeSpendingAnalysisBarChartWrapperCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisBarChartWrapperCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    IncomeSpendingAnalysisBarChartWrapperCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IncomeSpendingAnalysisBarChartWrapperCustomizableDirective, selector: "[bbIncomeSpendingAnalysisBarChartWrapperCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisBarChartWrapperCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbIncomeSpendingAnalysisBarChartWrapperCustomizable]',
                    }]
            }] });
    var IncomeSpendingAnalysisMonthSelectorCustomizableDirective = /** @class */ (function (_super) {
        __extends(IncomeSpendingAnalysisMonthSelectorCustomizableDirective, _super);
        function IncomeSpendingAnalysisMonthSelectorCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return IncomeSpendingAnalysisMonthSelectorCustomizableDirective;
    }(i3$2.BbTemplate));
    IncomeSpendingAnalysisMonthSelectorCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisMonthSelectorCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    IncomeSpendingAnalysisMonthSelectorCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IncomeSpendingAnalysisMonthSelectorCustomizableDirective, selector: "[bbIncomeSpendingAnalysisMonthSelectorCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisMonthSelectorCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbIncomeSpendingAnalysisMonthSelectorCustomizable]',
                    }]
            }] });

    var components = [IncomeSpendingAnalysisWidgetComponent, MonthSelectorComponent];
    var customizables = [
        IncomeSpendingAnalysisCustomizableDirective,
        IncomeSpendingAnalysisPeriodSelectorCustomizableDirective,
        IncomeSpendingAnalysisMonthSelectorCustomizableDirective,
        IncomeSpendingAnalysisChartWrapperCustomizableDirective,
        IncomeSpendingAnalysisCategoriesListCustomizableDirective,
        IncomeSpendingAnalysisChartCustomizableDirective,
        IncomeSpendingAnalysisBarChartWrapperCustomizableDirective,
    ];
    var modules = [
        i3$1.AmountModule,
        DonutChartModule,
        i10.EmptyStateModule,
        i12.IconModule,
        i11.LoadingIndicatorModule,
        i7.PeriodSelectorModule,
    ];
    var IncomeSpendingAnalysisWidgetModule = /** @class */ (function () {
        function IncomeSpendingAnalysisWidgetModule() {
        }
        return IncomeSpendingAnalysisWidgetModule;
    }());
    IncomeSpendingAnalysisWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    IncomeSpendingAnalysisWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisWidgetModule, declarations: [IncomeSpendingAnalysisWidgetComponent, MonthSelectorComponent, IncomeSpendingAnalysisCustomizableDirective,
            IncomeSpendingAnalysisPeriodSelectorCustomizableDirective,
            IncomeSpendingAnalysisMonthSelectorCustomizableDirective,
            IncomeSpendingAnalysisChartWrapperCustomizableDirective,
            IncomeSpendingAnalysisCategoriesListCustomizableDirective,
            IncomeSpendingAnalysisChartCustomizableDirective,
            IncomeSpendingAnalysisBarChartWrapperCustomizableDirective], imports: [i1.CommonModule, i3__namespace$2.BackbaseCoreModule, i3$1.AmountModule,
            DonutChartModule,
            i10.EmptyStateModule,
            i12.IconModule,
            i11.LoadingIndicatorModule,
            i7.PeriodSelectorModule], exports: [IncomeSpendingAnalysisWidgetComponent, MonthSelectorComponent, IncomeSpendingAnalysisCustomizableDirective,
            IncomeSpendingAnalysisPeriodSelectorCustomizableDirective,
            IncomeSpendingAnalysisMonthSelectorCustomizableDirective,
            IncomeSpendingAnalysisChartWrapperCustomizableDirective,
            IncomeSpendingAnalysisCategoriesListCustomizableDirective,
            IncomeSpendingAnalysisChartCustomizableDirective,
            IncomeSpendingAnalysisBarChartWrapperCustomizableDirective, i3$1.AmountModule,
            DonutChartModule,
            i10.EmptyStateModule,
            i12.IconModule,
            i11.LoadingIndicatorModule,
            i7.PeriodSelectorModule] });
    IncomeSpendingAnalysisWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisWidgetModule, providers: [IncomeSpendingAnalysisWidgetService], imports: [__spreadArray([
                i1.CommonModule,
                i3$2.BackbaseCoreModule.withConfig({
                    classMap: { IncomeSpendingAnalysisWidgetComponent: IncomeSpendingAnalysisWidgetComponent },
                })
            ], __read(modules)), i3$1.AmountModule,
            DonutChartModule,
            i10.EmptyStateModule,
            i12.IconModule,
            i11.LoadingIndicatorModule,
            i7.PeriodSelectorModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IncomeSpendingAnalysisWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray([
                            i1.CommonModule,
                            i3$2.BackbaseCoreModule.withConfig({
                                classMap: { IncomeSpendingAnalysisWidgetComponent: IncomeSpendingAnalysisWidgetComponent },
                            })
                        ], __read(modules)),
                        declarations: __spreadArray(__spreadArray([], __read(components)), __read(customizables)),
                        providers: [IncomeSpendingAnalysisWidgetService],
                        exports: __spreadArray(__spreadArray(__spreadArray([], __read(components)), __read(customizables)), __read(modules)),
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DonutChartComponent = DonutChartComponent;
    exports.DonutChartModule = DonutChartModule;
    exports.IncomeSpendingAnalysisBarChartWrapperCustomizableDirective = IncomeSpendingAnalysisBarChartWrapperCustomizableDirective;
    exports.IncomeSpendingAnalysisCategoriesListCustomizableDirective = IncomeSpendingAnalysisCategoriesListCustomizableDirective;
    exports.IncomeSpendingAnalysisChartCustomizableDirective = IncomeSpendingAnalysisChartCustomizableDirective;
    exports.IncomeSpendingAnalysisChartWrapperCustomizableDirective = IncomeSpendingAnalysisChartWrapperCustomizableDirective;
    exports.IncomeSpendingAnalysisCustomizableDirective = IncomeSpendingAnalysisCustomizableDirective;
    exports.IncomeSpendingAnalysisMonthSelectorCustomizableDirective = IncomeSpendingAnalysisMonthSelectorCustomizableDirective;
    exports.IncomeSpendingAnalysisPeriodSelectorCustomizableDirective = IncomeSpendingAnalysisPeriodSelectorCustomizableDirective;
    exports.IncomeSpendingAnalysisWidgetComponent = IncomeSpendingAnalysisWidgetComponent;
    exports.IncomeSpendingAnalysisWidgetModule = IncomeSpendingAnalysisWidgetModule;
    exports.IncomeSpendingAnalysisWidgetService = IncomeSpendingAnalysisWidgetService;
    exports.MonthSelectorComponent = MonthSelectorComponent;
    exports.PieChartComponent = PieChartComponent;
    exports.PieChartModule = PieChartModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-income-spending-analysis-widget-ang.umd.js.map
