import { DatePipe, getCurrencySymbol } from '@angular/common';
import { ChangeDetectionStrategy, Component, Directive, Inject, Input, LOCALE_ID, Optional, ViewChild, } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { BehaviorSubject, combineLatest, from, of, zip } from 'rxjs';
import { catchError, filter, map, mergeMap, pluck, share, shareReplay, switchMap, tap } from 'rxjs/operators';
import { AnalysisTypes, BAR_COLORS_CSS_VAR, CATEGORY_COLORS_CSS_VAR, DB_DATE_FORMAT, DEFAULT_INTERVAL, PERIODS, PROPERTIES, RELEVANCE_PERCENTAGE, TrendArrowClasses, TrendTextClasses, } from './constants';
import * as i0 from "@angular/core";
import * as i1 from "./income-spending-analysis.service";
import * as i2 from "@backbase/ui-ang/css-variables-lib";
import * as i3 from "@backbase/foundation-ang/core";
import * as i4 from "@angular/router";
import * as i5 from "@angular/common";
import * as i6 from "./bb-month-selector-ui/month-selector.component";
import * as i7 from "@backbase/ui-ang/period-selector";
import * as i8 from "@backbase/ui-ang/amount";
import * as i9 from "./bb-donut-chart-ui/donut-chart.component";
import * as i10 from "@backbase/ui-ang/empty-state";
import * as i11 from "@backbase/ui-ang/loading-indicator";
import * as i12 from "@backbase/ui-ang/icon";
import * as i13 from "@swimlane/ngx-charts";
const filterInputParameters = (input, prop) => combineLatest([input, prop]).pipe(map(([inputVal, propVal]) => (inputVal !== undefined ? inputVal : propVal)));
export class IncomeSpendingAnalysisWidgetComponent {
    constructor(service, cssVariableService, model, route, datePipe, cd, locale) {
        this.service = service;
        this.cssVariableService = cssVariableService;
        this.model = model;
        this.route = route;
        this.datePipe = datePipe;
        this.cd = cd;
        this.locale = locale;
        this.hostRef = this;
        this.isIE = /(edge|msie|trident)/i.test(navigator.userAgent);
        this.analysisTypeSubject = new BehaviorSubject(undefined);
        this.endDateValue = new Date();
        this.startDateValue = new Date(this.endDateValue.getFullYear(), this.endDateValue.getMonth(), 1);
        this.initialDateParams = {
            periodStartDate: this.datePipe.transform(this.startDateValue, DB_DATE_FORMAT) || '',
            periodEndDate: this.datePipe.transform(this.endDateValue, DB_DATE_FORMAT) || '',
            intervalDuration: DEFAULT_INTERVAL,
        };
        this.labelPositioned = false;
        this.iconHeight = 0;
        this.labelHeight = 0;
        this.iconWidth = 0;
        this.selectedTab = PERIODS[Math.max(PERIODS.map((item) => item.default).indexOf(true), 0)].duration;
        // BarChart Options
        this.chartOptions = from(this.cssVariableService.getCssVariable(BAR_COLORS_CSS_VAR)).pipe(map((cssVar) => {
            return {
                colors: cssVar ? [cssVar.slice(0, cssVar.indexOf(','))] : [''],
                showXAxis: true,
                showYAxis: true,
                gradient: false,
                showLegend: false,
                showXAxisLabel: true,
                showYAxisLabel: true,
                roundEdges: false,
            };
        }));
        this.isLoading = false;
        this.analysisType = filterInputParameters(this.analysisTypeSubject.asObservable(), this.getProperty(PROPERTIES.analysisType).pipe(map((val) => val)));
        this.arrangementIds = this.getRouteParam(this.route, 'selectedAccount').pipe(map((selectedAccount) => (selectedAccount ? [selectedAccount] : [])));
        this.dateParams = new BehaviorSubject(this.initialDateParams);
        this.dataParams = combineLatest(this.arrangementIds, this.dateParams.asObservable(), this.analysisType).pipe(map(([arrangementIds, dateParams, creditDebitIndicator]) => {
            this.error = undefined;
            return Object.assign(Object.assign({ arrangementIds: arrangementIds || [] }, dateParams), { creditDebitIndicator });
        }), shareReplay(1));
        this.analysisData = this.dataParams.pipe(filter((data) => !!data.arrangementIds.length), switchMap((params) => this.service.loadAnalysisData(params)), map((data) => {
            if (!data || !data.items) {
                return data;
            }
            this.labelPositioned = false;
            let totalPortion = 0;
            return Object.assign(Object.assign({}, data), { series: data.items
                    .sort((a, b) => (parseFloat(b.totalAmount.amount) > parseFloat(a.totalAmount.amount) ? 1 : -1))
                    .map((item) => (Object.assign(Object.assign({}, item), { name: item.category, value: parseFloat(item.totalAmount.amount), cssClass: this.transformCategoryToIconName(item.category), totalPortion: (totalPortion += item.portion) }))) });
        }), catchError((err) => this.handleError(err)), share());
        this.analysisPeriodData = zip(this.analysisData, this.dataParams).pipe(mergeMap(([data, params]) => {
            const categories = (data.items || []).map((item) => item.category);
            const newParams = Object.assign(Object.assign({}, params), { categories: categories.length ? categories : [''] });
            return this.service.loadAnalysisPeriodData(newParams).pipe(map(this.formatPeriodData), map((series) => ({ series, categoryData: data, items: [] })));
        }), tap(() => {
            this.isLoading = false;
            this.cd.markForCheck();
        }), catchError((err) => this.handleError(err)));
        this.colors = combineLatest([
            this.analysisData,
            from(this.cssVariableService.getCssVariable(CATEGORY_COLORS_CSS_VAR)),
        ]).pipe(map(([data, cssVar]) => {
            if (!cssVar || !data || !data.series || !data.series.length) {
                return [];
            }
            const identities = cssVar.split(',').reduce((accumulator, definition) => {
                const [category, color, icon] = definition.trim().split(' ');
                return Object.assign(Object.assign({}, accumulator), { [category]: {
                        color,
                        icon,
                    } });
            }, {});
            return data.series.map((item) => {
                var _a, _b;
                return ({
                    name: item.name || '',
                    value: ((_a = identities[item.cssClass]) === null || _a === void 0 ? void 0 : _a.color) || '',
                    icon: ((_b = identities[item.cssClass]) === null || _b === void 0 ? void 0 : _b.icon) || '',
                });
            });
        }));
        this.formatPeriodData = this.formatPeriodData.bind(this);
    }
    set analysisTypeValue(value) {
        this.analysisTypeSubject.next(value);
    }
    getRouteParam(route, param) {
        const paramValue = route.paramMap.pipe(pluck('params', param));
        if (!route.parent) {
            return paramValue;
        }
        // ensure that level that has actual value keeps it from being cleared
        return combineLatest(paramValue, this.getRouteParam(route.parent, param)).pipe(map((params) => params[0] || params[1]));
    }
    getProperty(property) {
        return this.model ? this.model.property(property.name, property.value) : of(property.value);
    }
    get startDate() {
        return this.startDateValue;
    }
    get endDate() {
        return this.endDateValue;
    }
    get formatters() {
        return {
            end: (date) => {
                const now = new Date();
                if (now.getFullYear() === date.getFullYear() &&
                    now.getMonth() === date.getMonth() &&
                    now.getDate() === date.getDate()) {
                    return this.translationNow.nativeElement.textContent;
                }
                return this.datePipe.transform(date, 'mediumDate') || '';
            },
        };
    }
    get isSpending() {
        return this.analysisType.pipe(map((property) => property === AnalysisTypes.SPENDING));
    }
    get relevance() {
        return RELEVANCE_PERCENTAGE;
    }
    selectTab(num) {
        this.selectedTab = PERIODS[Math.max(PERIODS.map((item) => item.duration).indexOf(num), 0)].duration;
    }
    handleError(error) {
        this.error = error.statusText;
        return of({ items: [] });
    }
    formatPeriodData(res) {
        if (!res || !res.periods || !res.total) {
            return [];
        }
        return parseFloat(res.total.amount) !== 0
            ? res.periods.map((period) => {
                var _a;
                return ({
                    name: this.datePipe.transform(period.intervalStartDate, 'MMM') || '',
                    value: period.total ? parseFloat(period.total.amount) : 0,
                    currencyCode: (_a = period.total) === null || _a === void 0 ? void 0 : _a.currencyCode,
                });
            })
            : [];
    }
    transformCategoryToIconName(transactionCategory) {
        return `${transactionCategory.toLowerCase().replace(/\W/g, '-').replace(/-{2,}/g, '-')}`;
    }
    textX(data) {
        return data ? data.pos[0] : 0;
    }
    textY(data) {
        return data ? data.pos[1] : 0;
    }
    getCategoryClass(cssClass) {
        return `bb-transaction-category-${cssClass}`;
    }
    getTextTransition() {
        return this.isIE ? '' : 'transform 0.75s';
    }
    getTransformOffsetY(data) {
        const percetage = data.data.totalPortion - data.data.portion / 2;
        return percetage > 25 && percetage < 75 ? this.iconHeight + this.labelHeight : -this.labelHeight;
    }
    getStyleTransform(data, offsetX, offsetY) {
        return this.isIE ? '' : `translate3d(${this.textX(data) + offsetX}px, ${this.textY(data) + offsetY}px, 0)`;
    }
    getAttrTransform(data, offsetX, offsetY) {
        return !this.isIE ? '' : `translate(${this.textX(data) + offsetX}, ${this.textY(data) + offsetY})`;
    }
    textClass(value, isSpending = true) {
        // positive trend has different meaning for income and for spending
        const multiplier = isSpending ? 1 : -1;
        return value * multiplier > 0 ? TrendTextClasses.POSITIVE : TrendTextClasses.NEGATIVE;
    }
    iconClass(value) {
        if (value < -1) {
            return TrendArrowClasses.NEGATIVE;
        }
        else if (value > 1) {
            return TrendArrowClasses.POSITIVE;
        }
        return '';
    }
    abs(value) {
        return Math.abs(value);
    }
    onPeriodRangeChange(monthSelectorData) {
        this.selectTab(monthSelectorData.tabIndex);
        this.onPeriodChange(monthSelectorData.period);
    }
    onPeriodChange(period) {
        this.isLoading = true;
        this.startDateValue = period.start;
        this.endDateValue = period.end;
        this.dateParams.next(Object.assign(Object.assign({}, this.initialDateParams), { periodStartDate: this.datePipe.transform(period.start, DB_DATE_FORMAT) || '', periodEndDate: this.datePipe.transform(period.end, DB_DATE_FORMAT) || '' }));
    }
    customYAxisTickFormatting(totalPeriodSeries) {
        var _a, _b;
        const currencyCode = (_b = (_a = totalPeriodSeries.categoryData) === null || _a === void 0 ? void 0 : _a.total) === null || _b === void 0 ? void 0 : _b.currencyCode;
        const currencySymbol = currencyCode ? getCurrencySymbol(currencyCode, 'wide', this.locale) : currencyCode;
        return (amount) => `${currencySymbol} ${amount}`;
    }
    ngAfterViewChecked() {
        if (this.labelPositioned || !this.chartIcon || !this.chartLabel) {
            return;
        }
        this.labelHeight = this.chartLabel.nativeElement.getBoundingClientRect().height / 2;
        this.iconHeight = this.chartIcon.nativeElement.getBoundingClientRect().height;
        this.iconWidth = (this.chartIcon.nativeElement.getBoundingClientRect().width - 2) / 2;
        this.labelPositioned = true;
        this.cd.detectChanges();
    }
}
IncomeSpendingAnalysisWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisWidgetComponent, deps: [{ token: i1.IncomeSpendingAnalysisWidgetService }, { token: i2.CssVariablesService }, { token: i3.ItemModel, optional: true }, { token: i4.ActivatedRoute }, { token: i5.DatePipe }, { token: i0.ChangeDetectorRef }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Component });
IncomeSpendingAnalysisWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: IncomeSpendingAnalysisWidgetComponent, selector: "bb-income-spending-analysis-widget", inputs: { analysisTypeValue: ["analysisType", "analysisTypeValue"] }, providers: [DatePipe], viewQueries: [{ propertyName: "chartIcon", first: true, predicate: ["bbChartLabelIcon"], descendants: true }, { propertyName: "chartLabel", first: true, predicate: ["bbChartLabelText"], descendants: true }, { propertyName: "translationNow", first: true, predicate: ["transNow"], descendants: true, static: true }], ngImport: i0, template: "<ng-container\n  bbIncomeSpendingAnalysisCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{ isLoading: hostRef.isLoading, analysisData: hostRef.analysisData, analysisPeriodData: hostRef.analysisPeriodData, colors: hostRef.colors | async, isSpending: hostRef.isSpending | async, chartOptions: hostRef.chartOptions | async }\"\n></ng-container>\n\n<ng-template\n  bbIncomeSpendingAnalysisCustomizable\n  let-hostRef\n  let-analysisData=\"context.analysisData\"\n  let-analysisPeriodData=\"context.analysisPeriodData\"\n  let-colors=\"context.colors\"\n  let-isSpending=\"context.isSpending\"\n  let-chartOptions=\"context.chartOptions\"\n>\n  <ng-container *ngIf=\"!hostRef.error; else errorState\">\n    <div class=\"card\">\n      <div class=\"card-body\">\n        <ng-container\n          bbIncomeSpendingAnalysisMonthSelectorCustomizable\n          [bbHostRef]=\"hostRef\"\n        ></ng-container>\n\n        <ng-container\n          *ngIf=\"hostRef.selectedTab === 1\"\n          bbIncomeSpendingAnalysisPeriodSelectorCustomizable\n          [bbHostRef]=\"hostRef\"\n        ></ng-container>\n        <ng-container *ngIf=\"(arrangementIds | async)?.length; else emptyState\">\n          <ng-container *ngIf=\"hostRef.selectedTab === 1\">\n            <ng-container *ngIf=\"analysisData | async as data ; else loadingState\">\n              <ng-container *ngIf=\"data?.items?.length; else emptyState\">\n                <ng-container\n                  bbIncomeSpendingAnalysisChartWrapperCustomizable\n                  [bbHostRef]=\"hostRef\"\n                  [bbTemplateContext]=\"{ data: data, colors: colors, isSpending: isSpending }\"\n                ></ng-container>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n          <ng-container *ngIf=\"hostRef.selectedTab !== 1\">\n            <ng-container *ngIf=\"analysisPeriodData | async as data; else loadingState\">\n              <ng-container *ngIf=\"!hostRef.isLoading else loadingState\">\n                <ng-container *ngIf=\"data.series && data.series.length; else emptyState\">\n                  <ng-container\n                    bbIncomeSpendingAnalysisBarChartWrapperCustomizable\n                    [bbHostRef]=\"hostRef\"\n                    [bbTemplateContext]=\"{ data: data, chartOptions: chartOptions }\"\n                  ></ng-container>\n                </ng-container>\n\n                <ng-container *ngIf=\"data.categoryData?.items?.length else emptyState\">\n                  <ng-container\n                    bbIncomeSpendingAnalysisCategoriesListCustomizable\n                    [bbHostRef]=\"hostRef\"\n                    [bbTemplateContext]=\"{ data: data.categoryData, isSpending: isSpending }\"\n                  ></ng-container>\n                </ng-container>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-template bbIncomeSpendingAnalysisMonthSelectorCustomizable let-hostRef>\n    <bb-month-selector-ui\n      [selectedTab]=\"hostRef.selectedTab\"\n      (change)=\"hostRef.onPeriodRangeChange($event)\"\n    ></bb-month-selector-ui>\n  </ng-template>\n\n  <ng-template bbIncomeSpendingAnalysisPeriodSelectorCustomizable let-hostRef>\n    <div class=\"bb-stack bb-stack--center bb-block bb-block--lg\">\n      <bb-period-selector-ui\n        [periodStart]=\"hostRef.startDate\"\n        [periodEnd]=\"hostRef.endDate\"\n        [periodFormatters]=\"hostRef.formatters\"\n        (periodChange)=\"hostRef.onPeriodChange($event)\"\n      ></bb-period-selector-ui>\n    </div>\n  </ng-template>\n \n  <ng-template\n    bbIncomeSpendingAnalysisChartWrapperCustomizable\n    let-hostRef\n    let-data=\"context.data\"\n    let-colors=\"context.colors\"\n    let-isSpending=\"context.isSpending\"\n  >\n    <div class=\"bb-stack bb-stack--center position-relative chart-donut chart-donut-large chart-donut-container-inflated\">\n      <div class=\"absolute-center\">\n        <div class=\"text-center text-muted font-weight-bold chart-donut-center-word\" data-role=\"donut-chart-label\">\n          <span\n            *ngIf=\"isSpending\"\n            i18n=\"Total spending|Label for total spending amount@@incomeSpendingAnalysis.label.total.spending\"\n          >\n            Total spending\n          </span>\n          <span\n            *ngIf=\"!isSpending\"\n            i18n=\"Total income|Label for total income amount@@incomeSpendingAnalysis.label.total.income\"\n          >\n            Total income\n          </span>\n        </div>\n        <div class=\"h6 text-center\">\n          <bb-amount-ui\n            [amount]=\"data.total.amount\"\n            [currency]=\"data.total.currencyCode\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n      <ng-container\n        bbIncomeSpendingAnalysisChartCustomizable\n        [bbHostRef]=\"hostRef\"\n        [bbTemplateContext]=\"{ data: data, colors: colors, isSpending: isSpending }\"\n      ></ng-container>\n    </div>\n  </ng-template>\n\n  <ng-template\n    bbIncomeSpendingAnalysisChartCustomizable\n    let-hostRef\n    let-data=\"context.data\"\n    let-colors=\"context.colors\"\n  >\n    <bb-donut-chart-ui\n      [data]=\"data.series\"\n      [colors]=\"colors\"\n      [relevancePercentage]=\"hostRef.relevance\"\n      [tooltipTmpl]=\"donutChartTooltip\"\n      [labelTmpl]=\"donutChartLabel\"\n    ></bb-donut-chart-ui>\n  </ng-template>\n\n  <ng-template #errorState>\n    <bb-empty-state-ui\n      title=\"\"\n      [subtitle]=\"error\"\n      iconModifier=\"error\"\n      iconSize=\"xxl\"\n      iconColor=\"gray\"\n      iconClasses=\"text-muted\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #loadingState>\n    <bb-loading-indicator-ui\n      i18n-text=\"Loading analysis data|Text to display while loading income/spending analysis data@@incomeSpendingAnalysis.state.loadingData\"\n      text=\"Loading analysis data...\">\n    </bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-template #emptyState>\n    <div class=\"bb-stack bb-stack--center\">\n      <bb-empty-state-ui\n      i18n-title=\"No data title|Title of a message that is shown when there is no data to display@@incomeSpendingAnalysis.state.noResults.title\"\n      title=\"No Data Found\"\n      i18n-subtitle=\"No data subtitle|Subtitle of a message that is shown when there is no data to display@@incomeSpendingAnalysis.state.noResults.subtitle\"\n      subtitle=\"You don't have any data to be displayed. Please try selecting a different period.\"\n      iconSize=\"xxl\"\n      iconModifier=\"donut-small\"\n      class=\"bb-text-align-center\"\n    ></bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template bbIncomeSpendingAnalysisCategoriesListCustomizable let-hostRef let-data=\"context.data\" let-isSpending=\"context.isSpending\">\n    <div class=\"list-group-item rounded-0 border-left-0 border-right-0 border-top-0 list-item-transaction-accordion pt-3\" data-role=\"category-list-header\">\n      <div class=\"transaction-item row align-items-center\" role=\"row\">\n        <div class=\"col-6\">\n          <span *ngIf=\"isSpending\" class=\"h5\" i18n=\"Spending per category|Categories list spending label@@categories.list.spending.label\">\n            Spending per category\n          </span>\n          <span *ngIf=\"!isSpending\" class=\"h5\" i18n=\"Income per category|Categories list income label@@categories.list.income.label\">\n            Income per category\n          </span>\n        </div>\n        <div class=\"col-6\">\n          <div class=\"transaction-amount text-right h5 m-0\">\n            <span i18n=\"Total amount|Total amount label@@categories.list.total.label\">\n              Total amount\n            </span>\n            <bb-amount-ui [amount]=\"data.total.amount\" [currency]=\"data.total.currencyCode\"></bb-amount-ui>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"list-group-item rounded-0 border-left-0 border-right-0 list-item-transaction-accordion py-3\" *ngFor=\"let item of data?.items\" data-role=\"category-list-item\">\n      <div class=\"transaction-item row d-flex align-items-center\" role=\"row\">\n        <div class=\"transaction-category-icon col-6 d-flex align-items-center\">\n          <bb-icon-ui \n            size=\"sm\" \n            backgroundType=\"circle\" \n            name=\"category-{{ hostRef.transformCategoryToIconName(item.category) }}\"\n          ></bb-icon-ui>\n          <strong>\n            <span class=\"bb-transaction-category-name px-3\">{{item.category}}</span>\n          </strong>\n        </div>\n        <div class=\"col-6\">\n          <div class=\"transaction-amount text-right\">\n            <bb-amount-ui [amount]=\"item.totalAmount.amount\" [currency]=\"item.totalAmount.currencyCode\"></bb-amount-ui>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template bbIncomeSpendingAnalysisBarChartWrapperCustomizable let-chartOptions=\"context.chartOptions\" let-data=\"context.data\">\n    <div class=\"d-block chart-bar\">\n      <ngx-charts-bar-vertical\n        [scheme]=\"{domain: chartOptions.colors}\"\n        [results]=\"data.series\"\n        [gradient]=\"chartOptions.gradient\"\n        [xAxis]=\"chartOptions.showXAxis\"\n        [yAxis]=\"chartOptions.showYAxis\"\n        [legend]=\"chartOptions.showLegend\"\n        [showXAxisLabel]=\"chartOptions.showXAxisLabel\"\n        [showYAxisLabel]=\"chartOptions.showYAxisLabel\"\n        [yAxisTickFormatting]=\"customYAxisTickFormatting(data)\"\n        [showGridLines]=\"true\"\n        [roundEdges]=\"chartOptions.roundEdges\"\n      >\n        <ng-template #tooltipTemplate let-model=\"model\">\n          <div class=\"my-2\">\n            <span class=\"mr-2\">{{model.name}}</span>\n            <bb-amount-ui class=\"ml-2\" [amount]=\"model.value\" [currency]=\"data.categoryData.total.currencyCode\"></bb-amount-ui>\n          </div>\n        </ng-template>\n      </ngx-charts-bar-vertical>\n    </div>\n  </ng-template>\n\n  <ng-template\n    #donutChartLabel\n    let-data=\"data\"\n    let-color=\"color\"\n    let-label=\"label\"\n    let-icon=\"icon\"\n  >\n    <svg:g\n      [attr.transform]=\"hostRef.getAttrTransform(data, -hostRef.iconWidth, hostRef.getTransformOffsetY(data))\"\n      [style.transform]=\"hostRef.getStyleTransform(data, -hostRef.iconWidth, hostRef.getTransformOffsetY(data))\"\n      [style.fill]=\"color\"\n    >\n      <svg:text\n        #bbChartLabelIcon\n        class=\"bb-transaction-category bb-transaction-category-icon\"\n        [ngClass]=\"hostRef.getCategoryClass(data?.data?.cssClass)\"\n        data-role=\"donut-chart-segment-icon\"\n        aria-hidden=\"true\"\n      >\n        {{ icon }}\n      </svg:text>\n    </svg:g>\n    <svg:g\n      [attr.transform]=\"hostRef.getAttrTransform(data, 0, 0)\"\n      [style.transform]=\"hostRef.getStyleTransform(data, 0, 0)\"\n      [style.transition]=\"hostRef.getTextTransition()\"\n    >\n      <svg:text\n        #bbChartLabelText\n        class=\"font-weight-bold\"\n        [class.animation]=\"true\"\n        dy=\".35em\"\n        [style.fill]=\"color\"\n        [style.textAnchor]=\"'middle'\"\n        [style.shapeRendering]=\"'crispEdges'\"\n        data-role=\"donut-chart-segment-label\"\n        aria-hidden=\"true\"\n      >\n        {{ label }}\n      </svg:text>\n    </svg:g>\n    <span class=\"sr-only\" i18n=\"Chart section, interpolation category, interpolation amount|Label for chart displaying category, amount, and introduction@@incomeSpendingAnalysis.donutChart.label\">\n      Chart section, {{data?.data?.cssClass}}, {{label}}\n    </span>\n  </ng-template>\n\n  <ng-template\n    #donutChartTooltip\n    let-name=\"name\"\n    let-cssClass=\"cssClass\"\n    let-totalAmount=\"totalAmount\"\n    let-portion=\"portion\"\n    let-trend=\"trend\"\n    let-arrowClass=\"arrowClass\"\n  >\n    <div\n      bbDynamicId\n      #tooltipElement\n      class=\"row pb-3 position-relative chart-tooltip chart-tooltip-default text-left\"\n      [ngClass]=\"arrowClass\"\n      aria-live=\"polite\"\n    >\n      <span class=\"d-flex chart-tooltip-analysis-category text-muted\">\n        <span\n          *ngIf=\"hostRef.relevance >= portion\"\n          class=\"d-inline-block mr-1\"\n        >\n          <bb-icon-ui \n            size=\"md\"\n            backgroundType=\"circle\"\n            name=\"category-{{ hostRef.transformCategoryToIconName(cssClass) }}\"\n          ></bb-icon-ui>\n        </span>\n        {{ name }}\n      </span>\n      <div>\n        <div class=\"row\">\n          <strong>\n            <bb-amount-ui \n              class=\"h5 my-1 col-12 chart-tooltip-analysis-amount\" \n              [amount]=\"totalAmount.amount\"\n              [currency]=\"totalAmount.currencyCode\"\n            ></bb-amount-ui>\n          </strong>\n        </div>\n        <p \n          *ngIf=\"totalAmount.amount !== undefined\" \n          class=\"chart-tooltip-analysis-portion text-muted\"\n          i18n=\"Slice portion|Active slice portion of total amount@@donut-chart.tooltip.portion\"\n        >\n          {{ portion }}% of total\n        </p>\n        <ng-container *ngIf=\"trend !== undefined\">\n          <hr class=\"chart-tooltip-divider p-0\">\n          <p \n            class=\"chart-tooltip-analysis-trend\" \n            [ngClass]=\"hostRef.textClass(trend, isSpending)\"\n          >\n            <span class=\"d-flex align-items-center d-block mt-1\">\n              <bb-icon-ui \n                class=\"mr-1\" \n                [name]=\"hostRef.iconClass(trend)\"\n              ></bb-icon-ui>\n              <span class=\"h5 m-0 d-block\">\n                <ng-container *ngIf=\"hostRef.abs(trend) >= 1\">\n                  {{ hostRef.abs(trend) }}%\n                </ng-container>\n              </span>\n            </span>\n            <span class=\"chart-tooltip-info-text text-muted w-100\">\n              <ng-container \n                *ngIf=\"trend <= -1\"\n                i18n=\"Less than previous month|Text to describe that trend is negative@@donut-chart.tooltip.trend.less\"\n              >\n                less than previous month\n              </ng-container>\n              <ng-container \n                *ngIf=\"trend >= 1\"\n                i18n=\"More than previous month|Text to describe that trend is positive@@donut-chart.tooltip.trend.more\"\n              >\n                more than previous month\n              </ng-container>\n              <ng-container \n                *ngIf=\"trend > -1 && trend < 1\"\n                i18n=\"Same as previous month|Text to describe that trend is around zero@@donut-chart.tooltip.trend.same\"\n              >\n                Same as previous month\n              </ng-container>\n            </span>\n          </p>\n        </ng-container>\n      </div>\n    </div>\n  </ng-template>\n</ng-template>\n\n<span #transNow class=\"ng-cloak\" i18n=\"Now|Label for current day in period selector@@incomeSpendingAnalysis.period.now\">Now</span>\n", components: [{ type: i0.forwardRef(function () { return i6.MonthSelectorComponent; }), selector: "bb-month-selector-ui", inputs: ["selectedTab"], outputs: ["change"] }, { type: i0.forwardRef(function () { return i7.PeriodSelectorComponent; }), selector: "bb-period-selector-ui", inputs: ["periodStart", "periodEnd", "periodFormatters", "period"], outputs: ["periodChange"] }, { type: i0.forwardRef(function () { return i8.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0.forwardRef(function () { return i9.DonutChartComponent; }), selector: "bb-donut-chart-ui", inputs: ["data", "colors", "relevancePercentage", "tooltipTmpl", "labelTmpl"] }, { type: i0.forwardRef(function () { return i10.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0.forwardRef(function () { return i11.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i12.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i13.BarVerticalComponent; }), selector: "ngx-charts-bar-vertical", inputs: ["legend", "legendTitle", "legendPosition", "tooltipDisabled", "showGridLines", "activeEntries", "trimXAxisTicks", "trimYAxisTicks", "rotateXAxisTicks", "maxXAxisTickLength", "maxYAxisTickLength", "barPadding", "roundDomains", "roundEdges", "showDataLabel", "noBarWhenZero", "xAxis", "yAxis", "showXAxisLabel", "showYAxisLabel", "xAxisLabel", "yAxisLabel", "gradient", "schemeType", "xAxisTickFormatting", "yAxisTickFormatting", "xAxisTicks", "yAxisTicks", "yScaleMax", "yScaleMin", "dataLabelFormatting"], outputs: ["activate", "deactivate"] }], directives: [{ type: i0.forwardRef(function () { return IncomeSpendingAnalysisCustomizableDirective; }), selector: "[bbIncomeSpendingAnalysisCustomizable]" }, { type: i0.forwardRef(function () { return i5.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return IncomeSpendingAnalysisMonthSelectorCustomizableDirective; }), selector: "[bbIncomeSpendingAnalysisMonthSelectorCustomizable]" }, { type: i0.forwardRef(function () { return IncomeSpendingAnalysisPeriodSelectorCustomizableDirective; }), selector: "[bbIncomeSpendingAnalysisPeriodSelectorCustomizable]" }, { type: i0.forwardRef(function () { return IncomeSpendingAnalysisChartWrapperCustomizableDirective; }), selector: "[bbIncomeSpendingAnalysisChartWrapperCustomizable]" }, { type: i0.forwardRef(function () { return IncomeSpendingAnalysisBarChartWrapperCustomizableDirective; }), selector: "[bbIncomeSpendingAnalysisBarChartWrapperCustomizable]" }, { type: i0.forwardRef(function () { return IncomeSpendingAnalysisCategoriesListCustomizableDirective; }), selector: "[bbIncomeSpendingAnalysisCategoriesListCustomizable]" }, { type: i0.forwardRef(function () { return IncomeSpendingAnalysisChartCustomizableDirective; }), selector: "[bbIncomeSpendingAnalysisChartCustomizable]" }, { type: i0.forwardRef(function () { return i5.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i5.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i0.forwardRef(function () { return i5.AsyncPipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-income-spending-analysis-widget',
                    templateUrl: './income-spending-analysis.component.html',
                    providers: [DatePipe],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.IncomeSpendingAnalysisWidgetService }, { type: i2.CssVariablesService }, { type: i3.ItemModel, decorators: [{
                    type: Optional
                }] }, { type: i4.ActivatedRoute }, { type: i5.DatePipe }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; }, propDecorators: { analysisTypeValue: [{
                type: Input,
                args: ['analysisType']
            }], chartIcon: [{
                type: ViewChild,
                args: ['bbChartLabelIcon']
            }], chartLabel: [{
                type: ViewChild,
                args: ['bbChartLabelText']
            }], translationNow: [{
                type: ViewChild,
                args: ['transNow', { static: true }]
            }] } });
export class IncomeSpendingAnalysisCustomizableDirective extends BbTemplate {
}
IncomeSpendingAnalysisCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
IncomeSpendingAnalysisCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IncomeSpendingAnalysisCustomizableDirective, selector: "[bbIncomeSpendingAnalysisCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbIncomeSpendingAnalysisCustomizable]',
                }]
        }] });
export class IncomeSpendingAnalysisPeriodSelectorCustomizableDirective extends BbTemplate {
}
IncomeSpendingAnalysisPeriodSelectorCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisPeriodSelectorCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
IncomeSpendingAnalysisPeriodSelectorCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IncomeSpendingAnalysisPeriodSelectorCustomizableDirective, selector: "[bbIncomeSpendingAnalysisPeriodSelectorCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisPeriodSelectorCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbIncomeSpendingAnalysisPeriodSelectorCustomizable]',
                }]
        }] });
export class IncomeSpendingAnalysisChartWrapperCustomizableDirective extends BbTemplate {
}
IncomeSpendingAnalysisChartWrapperCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisChartWrapperCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
IncomeSpendingAnalysisChartWrapperCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IncomeSpendingAnalysisChartWrapperCustomizableDirective, selector: "[bbIncomeSpendingAnalysisChartWrapperCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisChartWrapperCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbIncomeSpendingAnalysisChartWrapperCustomizable]',
                }]
        }] });
export class IncomeSpendingAnalysisCategoriesListCustomizableDirective extends BbTemplate {
}
IncomeSpendingAnalysisCategoriesListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisCategoriesListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
IncomeSpendingAnalysisCategoriesListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IncomeSpendingAnalysisCategoriesListCustomizableDirective, selector: "[bbIncomeSpendingAnalysisCategoriesListCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisCategoriesListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbIncomeSpendingAnalysisCategoriesListCustomizable]',
                }]
        }] });
export class IncomeSpendingAnalysisChartCustomizableDirective extends BbTemplate {
}
IncomeSpendingAnalysisChartCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisChartCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
IncomeSpendingAnalysisChartCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IncomeSpendingAnalysisChartCustomizableDirective, selector: "[bbIncomeSpendingAnalysisChartCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisChartCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbIncomeSpendingAnalysisChartCustomizable]',
                }]
        }] });
export class IncomeSpendingAnalysisBarChartWrapperCustomizableDirective extends BbTemplate {
}
IncomeSpendingAnalysisBarChartWrapperCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisBarChartWrapperCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
IncomeSpendingAnalysisBarChartWrapperCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IncomeSpendingAnalysisBarChartWrapperCustomizableDirective, selector: "[bbIncomeSpendingAnalysisBarChartWrapperCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisBarChartWrapperCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbIncomeSpendingAnalysisBarChartWrapperCustomizable]',
                }]
        }] });
export class IncomeSpendingAnalysisMonthSelectorCustomizableDirective extends BbTemplate {
}
IncomeSpendingAnalysisMonthSelectorCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisMonthSelectorCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
IncomeSpendingAnalysisMonthSelectorCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IncomeSpendingAnalysisMonthSelectorCustomizableDirective, selector: "[bbIncomeSpendingAnalysisMonthSelectorCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisMonthSelectorCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbIncomeSpendingAnalysisMonthSelectorCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,