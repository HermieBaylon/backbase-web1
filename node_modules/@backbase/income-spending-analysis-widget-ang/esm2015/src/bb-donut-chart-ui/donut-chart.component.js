import { ChangeDetectionStrategy, Component, HostBinding, Input, ViewChild } from '@angular/core';
import { ArrowClasses, CARET_SIZE_CSS_VAR } from './constants';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/css-variables-lib";
import * as i2 from "./ngx/pie/pie-chart.component";
import * as i3 from "@backbase/ui-ang/amount";
import * as i4 from "@angular/common";
export class DonutChartComponent {
    constructor(cssVariableService) {
        this.cssVariableService = cssVariableService;
        /**
         * Sets the threshold in which the label of each section is visible.
         */
        this.relevancePercentage = 0;
        this.classes = 'absolute-center w-100 h-100';
    }
    get template() {
        return this.tooltipTmpl || this.defaultTooltipTemplate;
    }
    expandModel(model) {
        if (!this.data) {
            return model;
        }
        const data = this.data.find((item) => item.name === model.name) || model;
        return Object.assign(data, {
            arrowClass: data.totalPortion - data.portion / 2 >= 50 ? ArrowClasses.RIGHT : ArrowClasses.LEFT,
            arrowSize: this.arrowSize,
        });
    }
    ngOnInit() {
        this.cssVariableService
            .getCssVariable(CARET_SIZE_CSS_VAR)
            .then((value) => (this.arrowSize = parseInt(value || '', 10) || 0));
    }
}
DonutChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DonutChartComponent, deps: [{ token: i1.CssVariablesService }], target: i0.ɵɵFactoryTarget.Component });
DonutChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DonutChartComponent, selector: "bb-donut-chart-ui", inputs: { data: "data", colors: "colors", relevancePercentage: "relevancePercentage", tooltipTmpl: "tooltipTmpl", labelTmpl: "labelTmpl" }, host: { properties: { "class": "this.classes" } }, viewQueries: [{ propertyName: "defaultTooltipTemplate", first: true, predicate: ["defaultTooltipTemplate"], descendants: true, static: true }], ngImport: i0, template: "<bb-charts-pie-chart\n  [results]=\"data\"\n  [series]=\"data\"\n  [customColors]=\"colors\"\n  [doughnut]=\"true\"\n  [arcWidth]=\"0.4\"\n  [labels]=\"true\"\n  [labelThreshold]=\"relevancePercentage\"\n  [labelTemplate]=\"labelTmpl\"\n>\n  <ng-template #tooltipTemplate let-model=\"model\">\n    <ng-container *ngTemplateOutlet=\"template; context: expandModel(model)\"></ng-container>\n  </ng-template>\n</bb-charts-pie-chart>\n\n<ng-template\n  #defaultTooltipTemplate\n  let-name=\"name\"\n  let-totalAmount=\"totalAmount\"\n>\n  <h3 class=\"chart-tooltip-analysis-category\">\n    {{ name }}\n  </h3>\n  <h4 class=\"chart-tooltip-analysis-amount\">\n    <bb-amount-ui\n      [amount]=\"totalAmount.amount\"\n      [currency]=\"totalAmount.currencyCode\"\n    ></bb-amount-ui>\n  </h4>\n</ng-template>\n", components: [{ type: i2.PieChartComponent, selector: "bb-charts-pie-chart", inputs: ["series", "labels", "legend", "legendTitle", "explodeSlices", "doughnut", "arcWidth", "gradient", "activeEntries", "tooltipDisabled", "labelFormatting", "labelTemplate", "labelThreshold", "trimLabels", "maxLabelLength", "tooltipText"], outputs: ["dblclick", "select", "activate", "deactivate"] }, { type: i3.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DonutChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-donut-chart-ui',
                    templateUrl: './donut-chart.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.CssVariablesService }]; }, propDecorators: { data: [{
                type: Input
            }], colors: [{
                type: Input
            }], relevancePercentage: [{
                type: Input
            }], tooltipTmpl: [{
                type: Input
            }], labelTmpl: [{
                type: Input
            }], defaultTooltipTemplate: [{
                type: ViewChild,
                args: ['defaultTooltipTemplate', { static: true }]
            }], classes: [{
                type: HostBinding,
                args: ['class']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9udXQtY2hhcnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9pbmNvbWUtc3BlbmRpbmctYW5hbHlzaXMtd2lkZ2V0L3NyYy9iYi1kb251dC1jaGFydC11aS9kb251dC1jaGFydC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2luY29tZS1zcGVuZGluZy1hbmFseXNpcy13aWRnZXQvc3JjL2JiLWRvbnV0LWNoYXJ0LXVpL2RvbnV0LWNoYXJ0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBdUIsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3ZILE9BQU8sRUFBRSxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxhQUFhLENBQUM7Ozs7OztBQVEvRCxNQUFNLE9BQU8sbUJBQW1CO0lBd0I5QixZQUE2QixrQkFBdUM7UUFBdkMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFxQjtRQWZwRTs7V0FFRztRQUNNLHdCQUFtQixHQUFHLENBQUMsQ0FBQztRQVVYLFlBQU8sR0FBRyw2QkFBNkIsQ0FBQztJQUVTLENBQUM7SUFJeEUsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztJQUN6RCxDQUFDO0lBRUQsV0FBVyxDQUFDLEtBQW9CO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2QsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELE1BQU0sSUFBSSxHQUEwQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDO1FBQ2hHLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7WUFDekIsVUFBVSxFQUFFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSTtZQUMvRixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7U0FDMUIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsa0JBQWtCO2FBQ3BCLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQzthQUNsQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7O2lIQWhEVSxtQkFBbUI7cUdBQW5CLG1CQUFtQix3WUNYaEMsMHlCQThCQTs0RkRuQmEsbUJBQW1CO2tCQUwvQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLFdBQVcsRUFBRSw4QkFBOEI7b0JBQzNDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNoRDswR0FLVSxJQUFJO3NCQUFaLEtBQUs7Z0JBSUcsTUFBTTtzQkFBZCxLQUFLO2dCQUlHLG1CQUFtQjtzQkFBM0IsS0FBSztnQkFJRyxXQUFXO3NCQUFuQixLQUFLO2dCQUlHLFNBQVM7c0JBQWpCLEtBQUs7Z0JBQ2lELHNCQUFzQjtzQkFBNUUsU0FBUzt1QkFBQyx3QkFBd0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Z0JBQy9CLE9BQU87c0JBQTVCLFdBQVc7dUJBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEhvc3RCaW5kaW5nLCBJbnB1dCwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDc3NWYXJpYWJsZXNTZXJ2aWNlIH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy9jc3MtdmFyaWFibGVzLWxpYic7XG5pbXBvcnQgeyBDb2xvckhlbHBlciB9IGZyb20gJ0Bzd2ltbGFuZS9uZ3gtY2hhcnRzJztcbmltcG9ydCB7IEFycm93Q2xhc3NlcywgQ0FSRVRfU0laRV9DU1NfVkFSIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgQ2hhcnREYXRhSXRlbSwgQ2hhcnREYXRhSXRlbUV4dGVuZGVkIH0gZnJvbSAnLi9tb2RlbC90eXBlcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWRvbnV0LWNoYXJ0LXVpJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2RvbnV0LWNoYXJ0LmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIERvbnV0Q2hhcnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAvKipcbiAgICogQXJyYXkgb2YgY2hhcnQgZGF0YSBvYmplY3RzIHVzZWQgdG8gcmVuZGVyIHRoZSBzZWN0aW9ucyBvZiB0aGUgZG9udXQgY2hhcnQuXG4gICAqL1xuICBASW5wdXQoKSBkYXRhOiBDaGFydERhdGFJdGVtRXh0ZW5kZWRbXSB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIEN1c3RvbSBjb2xvciBwYWxldHRlIGZvciB0aGUgY2hhcnQuXG4gICAqL1xuICBASW5wdXQoKSBjb2xvcnM6IENvbG9ySGVscGVyIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogU2V0cyB0aGUgdGhyZXNob2xkIGluIHdoaWNoIHRoZSBsYWJlbCBvZiBlYWNoIHNlY3Rpb24gaXMgdmlzaWJsZS5cbiAgICovXG4gIEBJbnB1dCgpIHJlbGV2YW5jZVBlcmNlbnRhZ2UgPSAwO1xuICAvKipcbiAgICogVGhlIHRlbXBsYXRlIGZvciB0aGUgdG9vbHRpcC5cbiAgICovXG4gIEBJbnB1dCgpIHRvb2x0aXBUbXBsOiBUZW1wbGF0ZVJlZjxhbnk+IHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogVGhlIHRlbXBsYXRlIGZvciB0aGUgbGFiZWwuXG4gICAqL1xuICBASW5wdXQoKSBsYWJlbFRtcGw6IFRlbXBsYXRlUmVmPGFueT4gfCB1bmRlZmluZWQ7XG4gIEBWaWV3Q2hpbGQoJ2RlZmF1bHRUb29sdGlwVGVtcGxhdGUnLCB7IHN0YXRpYzogdHJ1ZSB9KSBkZWZhdWx0VG9vbHRpcFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+IHwgdW5kZWZpbmVkO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzJykgY2xhc3NlcyA9ICdhYnNvbHV0ZS1jZW50ZXIgdy0xMDAgaC0xMDAnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgY3NzVmFyaWFibGVTZXJ2aWNlOiBDc3NWYXJpYWJsZXNTZXJ2aWNlKSB7fVxuXG4gIHByaXZhdGUgYXJyb3dTaXplOiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cbiAgZ2V0IHRlbXBsYXRlKCk6IFRlbXBsYXRlUmVmPGFueT4gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLnRvb2x0aXBUbXBsIHx8IHRoaXMuZGVmYXVsdFRvb2x0aXBUZW1wbGF0ZTtcbiAgfVxuXG4gIGV4cGFuZE1vZGVsKG1vZGVsOiBDaGFydERhdGFJdGVtKTogQ2hhcnREYXRhSXRlbUV4dGVuZGVkIHtcbiAgICBpZiAoIXRoaXMuZGF0YSkge1xuICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGE6IENoYXJ0RGF0YUl0ZW1FeHRlbmRlZCA9IHRoaXMuZGF0YS5maW5kKChpdGVtKSA9PiBpdGVtLm5hbWUgPT09IG1vZGVsLm5hbWUpIHx8IG1vZGVsO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGRhdGEsIHtcbiAgICAgIGFycm93Q2xhc3M6IGRhdGEudG90YWxQb3J0aW9uIC0gZGF0YS5wb3J0aW9uIC8gMiA+PSA1MCA/IEFycm93Q2xhc3Nlcy5SSUdIVCA6IEFycm93Q2xhc3Nlcy5MRUZULFxuICAgICAgYXJyb3dTaXplOiB0aGlzLmFycm93U2l6ZSxcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY3NzVmFyaWFibGVTZXJ2aWNlXG4gICAgICAuZ2V0Q3NzVmFyaWFibGUoQ0FSRVRfU0laRV9DU1NfVkFSKVxuICAgICAgLnRoZW4oKHZhbHVlKSA9PiAodGhpcy5hcnJvd1NpemUgPSBwYXJzZUludCh2YWx1ZSB8fCAnJywgMTApIHx8IDApKTtcbiAgfVxufVxuIiwiPGJiLWNoYXJ0cy1waWUtY2hhcnRcbiAgW3Jlc3VsdHNdPVwiZGF0YVwiXG4gIFtzZXJpZXNdPVwiZGF0YVwiXG4gIFtjdXN0b21Db2xvcnNdPVwiY29sb3JzXCJcbiAgW2RvdWdobnV0XT1cInRydWVcIlxuICBbYXJjV2lkdGhdPVwiMC40XCJcbiAgW2xhYmVsc109XCJ0cnVlXCJcbiAgW2xhYmVsVGhyZXNob2xkXT1cInJlbGV2YW5jZVBlcmNlbnRhZ2VcIlxuICBbbGFiZWxUZW1wbGF0ZV09XCJsYWJlbFRtcGxcIlxuPlxuICA8bmctdGVtcGxhdGUgI3Rvb2x0aXBUZW1wbGF0ZSBsZXQtbW9kZWw9XCJtb2RlbFwiPlxuICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJ0ZW1wbGF0ZTsgY29udGV4dDogZXhwYW5kTW9kZWwobW9kZWwpXCI+PC9uZy1jb250YWluZXI+XG4gIDwvbmctdGVtcGxhdGU+XG48L2JiLWNoYXJ0cy1waWUtY2hhcnQ+XG5cbjxuZy10ZW1wbGF0ZVxuICAjZGVmYXVsdFRvb2x0aXBUZW1wbGF0ZVxuICBsZXQtbmFtZT1cIm5hbWVcIlxuICBsZXQtdG90YWxBbW91bnQ9XCJ0b3RhbEFtb3VudFwiXG4+XG4gIDxoMyBjbGFzcz1cImNoYXJ0LXRvb2x0aXAtYW5hbHlzaXMtY2F0ZWdvcnlcIj5cbiAgICB7eyBuYW1lIH19XG4gIDwvaDM+XG4gIDxoNCBjbGFzcz1cImNoYXJ0LXRvb2x0aXAtYW5hbHlzaXMtYW1vdW50XCI+XG4gICAgPGJiLWFtb3VudC11aVxuICAgICAgW2Ftb3VudF09XCJ0b3RhbEFtb3VudC5hbW91bnRcIlxuICAgICAgW2N1cnJlbmN5XT1cInRvdGFsQW1vdW50LmN1cnJlbmN5Q29kZVwiXG4gICAgPjwvYmItYW1vdW50LXVpPlxuICA8L2g0PlxuPC9uZy10ZW1wbGF0ZT5cbiJdfQ==