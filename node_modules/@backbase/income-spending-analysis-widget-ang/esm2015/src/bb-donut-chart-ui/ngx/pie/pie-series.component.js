import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { formatLabel, PlacementTypes } from '@swimlane/ngx-charts';
import { max } from 'd3-array';
import { arc, pie } from 'd3-shape';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./pie-label.component";
import * as i3 from "@swimlane/ngx-charts";
import * as i4 from "../tooltip/tooltip.directive";
export class PieSeriesComponent {
    constructor(currencyPipe) {
        this.currencyPipe = currencyPipe;
        /**
         * Array of Chart data objects needed for the chart to be rendered.
         */
        this.series = [];
        /**
         * Inner slice radius.
         */
        this.innerRadius = 60;
        /**
         * Outer slice radius.
         */
        this.outerRadius = 80;
        /**
         * Slice offsets.
         */
        this.margins = [0, 0, 0, 0];
        /**
         * Flag to show/hide labels.
         */
        this.showLabels = false;
        /**
         * Preselects an active slice of the chart.
         */
        this.activeEntries = [];
        /**
         * Sets the threshold in which the label of each section is visible.
         */
        this.labelThreshold = 0;
        /**
         * Enable/disable label trimming.
         */
        this.trimLabels = true;
        /**
         * Set the max length of the label characters.
         */
        this.maxLabelLength = 10;
        /**
         * Disable/enable the tooltip.
         */
        this.tooltipDisabled = false;
        /**
         * Enable/Disable animations.
         */
        this.animations = true;
        /**
         * EventEmitter for triggering a select event.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.select = new EventEmitter();
        /**
         * EventEmitter for triggering a activate event.
         */
        this.activate = new EventEmitter();
        /**
         * EventEmitter for triggering a deactivate event.
         */
        this.deactivate = new EventEmitter();
        /**
         * EventEmitter for triggering a dblclick event.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.dblclick = new EventEmitter();
        this.data = [];
    }
    ngOnChanges() {
        this.update();
    }
    update() {
        const pieGenerator = pie()
            .value((d) => d.value)
            // eslint-disable-next-line no-null/no-null
            .sort(null);
        const arcData = pieGenerator(this.series);
        this.max = max(arcData, (d) => {
            return d.value;
        });
        this.data = this.calculateLabelPositions(arcData);
        this.tooltipText = this.tooltipText || this.defaultTooltipText;
    }
    midAngle(d) {
        return d.startAngle + (d.endAngle - d.startAngle) / 2;
    }
    outerArc(padding) {
        const r = this.outerRadius + padding;
        return arc().innerRadius(r).outerRadius(r);
    }
    calculateLabelPositions(pieData) {
        const labelPositions = pieData;
        labelPositions.forEach((d) => {
            d.pos = this.outerArc(30).centroid(d);
            d.edge = this.outerArc(0).centroid(d);
        });
        return labelPositions;
    }
    labelVisible(myArc) {
        return this.showLabels && myArc.data.portion > this.labelThreshold;
    }
    getTooltipTitle(a) {
        if (this.tooltipTemplate || typeof this.tooltipText !== 'function') {
            return undefined;
        }
        return this.tooltipText(a);
    }
    getTooltipPlacement(a) {
        return this.midAngle(a) > Math.PI ? PlacementTypes.Left : PlacementTypes.Right;
    }
    labelText(myArc) {
        if (this.labelFormatting) {
            return this.labelFormatting(myArc.data.value);
        }
        return (this.currencyPipe.transform(myArc.data.value, myArc.data.totalAmount.currencyCode, undefined, '1.0-0') ||
            myArc.data.value.toString());
    }
    label(myArc) {
        return formatLabel(myArc.data.name);
    }
    defaultTooltipText(myArc) {
        const label = this.label(myArc);
        const val = formatLabel(myArc.data.value);
        return `
      <span class="tooltip-label">${label}</span>
      <span class="tooltip-val">${val}</span>
    `;
    }
    getTooltipPosition(myArc) {
        const halfWidth = this.outerRadius + this.margins[0];
        let position = [0, 0];
        if (this.chartElement) {
            const chartDims = this.chartElement.nativeElement.getBoundingClientRect();
            position = [chartDims.left + halfWidth, chartDims.top + halfWidth];
        }
        return [position[0] + myArc.edge[0], position[1] + myArc.edge[1]];
    }
    color(myArc) {
        return this.colors ? this.colors.getColor(this.label(myArc)) : '';
    }
    icon(myArc) {
        if (!this.colors || !this.colors.customColors) {
            return '';
        }
        const label = this.label(myArc);
        const found = this.colors.customColors.find((item) => item.name === label);
        return found ? found.icon : '';
    }
    trackBy(index, item) {
        return item.data.name;
    }
    onClick(data) {
        this.select.emit(data);
    }
    isActive(entry) {
        if (!this.activeEntries)
            return false;
        const item = this.activeEntries.find((d) => {
            return entry.name === d.name && entry.series === d.series;
        });
        return item !== undefined;
    }
}
PieSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PieSeriesComponent, deps: [{ token: i1.CurrencyPipe }], target: i0.ɵɵFactoryTarget.Component });
PieSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PieSeriesComponent, selector: "g[bb-charts-pie-series]", inputs: { colors: "colors", series: "series", dims: "dims", chartElement: "chartElement", innerRadius: "innerRadius", outerRadius: "outerRadius", margins: "margins", explodeSlices: "explodeSlices", showLabels: "showLabels", gradient: "gradient", activeEntries: "activeEntries", labelThreshold: "labelThreshold", labelFormatting: "labelFormatting", labelTemplate: "labelTemplate", trimLabels: "trimLabels", maxLabelLength: "maxLabelLength", tooltipText: "tooltipText", tooltipDisabled: "tooltipDisabled", tooltipTemplate: "tooltipTemplate", animations: "animations" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate", dblclick: "dblclick" }, usesOnChanges: true, ngImport: i0, template: `
    <svg:g
      *ngFor="let arc of data; trackBy: trackBy"
      data-role="analysis-donut-chart-segment"
      bb-tooltip
      [tooltipDisabled]="tooltipDisabled"
      [tooltipPlacement]="getTooltipPlacement(arc)"
      [tooltipType]="'tooltip'"
      [tooltipShowCaret]="false"
      [tooltipSpacing]="0"
      [tooltipTitle]="getTooltipTitle(arc)"
      [tooltipPosition]="getTooltipPosition(arc)"
      [tooltipTemplate]="tooltipTemplate"
      [tooltipContext]="arc.data"
    >
      <svg:g
        bb-charts-pie-label
        *ngIf="labelVisible(arc)"
        [data]="arc"
        [radius]="outerRadius"
        [color]="color(arc)"
        [icon]="icon(arc)"
        [label]="labelText(arc)"
        [labelTrim]="trimLabels"
        [labelTrimSize]="maxLabelLength"
        [template]="labelTemplate"
        [max]="max"
        [value]="arc.value"
        [explodeSlices]="explodeSlices"
        [animations]="animations"
      ></svg:g>
      <svg:g
        ngx-charts-pie-arc
        [startAngle]="arc.startAngle"
        [endAngle]="arc.endAngle"
        [innerRadius]="innerRadius"
        [outerRadius]="outerRadius"
        [fill]="color(arc)"
        [value]="arc.data.value"
        [gradient]="gradient"
        [data]="arc.data"
        [max]="max"
        [explodeSlices]="explodeSlices"
        [isActive]="isActive(arc.data)"
        [animate]="animations"
        (select)="onClick($event)"
        (activate)="activate.emit($event)"
        (deactivate)="deactivate.emit($event)"
        (dblclick)="dblclick.emit($event)"
      ></svg:g>
    </svg:g>
  `, isInline: true, components: [{ type: i2.PieLabelComponent, selector: "g[bb-charts-pie-label]", inputs: ["data", "radius", "label", "color", "icon", "max", "value", "explodeSlices", "animations", "labelTrim", "labelTrimSize", "template"] }, { type: i3.PieArcComponent, selector: "g[ngx-charts-pie-arc]", inputs: ["startAngle", "endAngle", "cornerRadius", "explodeSlices", "gradient", "animate", "pointerEvents", "isActive", "fill", "innerRadius", "outerRadius", "value", "max", "data"], outputs: ["select", "activate", "deactivate", "dblclick"] }], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.TooltipDirective, selector: "[bb-tooltip]", inputs: ["tooltipCssClass", "tooltipTitle", "tooltipPosition", "tooltipAppendToBody", "tooltipSpacing", "tooltipDisabled", "tooltipShowCaret", "tooltipPlacement", "tooltipAlignment", "tooltipType", "tooltipCloseOnClickOutside", "tooltipCloseOnMouseLeave", "tooltipHideTimeout", "tooltipShowTimeout", "tooltipTemplate", "tooltipShowEvent", "tooltipContext", "tooltipImmediateExit"], outputs: ["show", "hide"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PieSeriesComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: 'g[bb-charts-pie-series]',
                    template: `
    <svg:g
      *ngFor="let arc of data; trackBy: trackBy"
      data-role="analysis-donut-chart-segment"
      bb-tooltip
      [tooltipDisabled]="tooltipDisabled"
      [tooltipPlacement]="getTooltipPlacement(arc)"
      [tooltipType]="'tooltip'"
      [tooltipShowCaret]="false"
      [tooltipSpacing]="0"
      [tooltipTitle]="getTooltipTitle(arc)"
      [tooltipPosition]="getTooltipPosition(arc)"
      [tooltipTemplate]="tooltipTemplate"
      [tooltipContext]="arc.data"
    >
      <svg:g
        bb-charts-pie-label
        *ngIf="labelVisible(arc)"
        [data]="arc"
        [radius]="outerRadius"
        [color]="color(arc)"
        [icon]="icon(arc)"
        [label]="labelText(arc)"
        [labelTrim]="trimLabels"
        [labelTrimSize]="maxLabelLength"
        [template]="labelTemplate"
        [max]="max"
        [value]="arc.value"
        [explodeSlices]="explodeSlices"
        [animations]="animations"
      ></svg:g>
      <svg:g
        ngx-charts-pie-arc
        [startAngle]="arc.startAngle"
        [endAngle]="arc.endAngle"
        [innerRadius]="innerRadius"
        [outerRadius]="outerRadius"
        [fill]="color(arc)"
        [value]="arc.data.value"
        [gradient]="gradient"
        [data]="arc.data"
        [max]="max"
        [explodeSlices]="explodeSlices"
        [isActive]="isActive(arc.data)"
        [animate]="animations"
        (select)="onClick($event)"
        (activate)="activate.emit($event)"
        (deactivate)="deactivate.emit($event)"
        (dblclick)="dblclick.emit($event)"
      ></svg:g>
    </svg:g>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.CurrencyPipe }]; }, propDecorators: { colors: [{
                type: Input
            }], series: [{
                type: Input
            }], dims: [{
                type: Input
            }], chartElement: [{
                type: Input
            }], innerRadius: [{
                type: Input
            }], outerRadius: [{
                type: Input
            }], margins: [{
                type: Input
            }], explodeSlices: [{
                type: Input
            }], showLabels: [{
                type: Input
            }], gradient: [{
                type: Input
            }], activeEntries: [{
                type: Input
            }], labelThreshold: [{
                type: Input
            }], labelFormatting: [{
                type: Input
            }], labelTemplate: [{
                type: Input
            }], trimLabels: [{
                type: Input
            }], maxLabelLength: [{
                type: Input
            }], tooltipText: [{
                type: Input
            }], tooltipDisabled: [{
                type: Input
            }], tooltipTemplate: [{
                type: Input
            }], animations: [{
                type: Input
            }], select: [{
                type: Output
            }], activate: [{
                type: Output
            }], deactivate: [{
                type: Output
            }], dblclick: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,