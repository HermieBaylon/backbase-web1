import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { trimLabel } from '@swimlane/ngx-charts';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class PieLabelComponent {
    constructor() {
        /**
         * Radius of the circle.
         */
        this.radius = 0;
        /**
         * The maximum number of labels displayed.
         */
        this.max = 1;
        /**
         * Value of the label.
         */
        this.value = 0;
        /**
         * Make the radius of each slice proportional to it's value.
         */
        this.explodeSlices = false;
        /**
         * Enable/Disable animations.
         */
        this.animations = true;
        /**
         * Enable/Disable label trimming.
         */
        this.labelTrim = true;
        /**
         * Set the label trimming size.
         */
        this.labelTrimSize = 10;
        this.isIE = /(edge|msie|trident)/i.test(navigator.userAgent);
        this.trimLabel = trimLabel;
    }
    get labelText() {
        return this.labelTrim ? trimLabel(this.label || '', this.labelTrimSize) : this.label;
    }
    get textX() {
        return this.data ? this.data.pos[0] : 0;
    }
    get textY() {
        return this.data ? this.data.pos[1] : 0;
    }
    get textTransition() {
        return this.isIE || !this.animations ? '' : 'transform 0.75s';
    }
    get styleTransform() {
        return this.isIE ? '' : `translate3d(${this.textX}px, ${this.textY}px, 0)`;
    }
    get attrTransform() {
        return !this.isIE ? '' : `translate(${this.textX}, ${this.textY})`;
    }
    ngOnInit() {
        if (typeof this.data === 'undefined') {
            throw new Error(`"data" input is required in "${this.constructor.name}"`);
        }
    }
}
PieLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PieLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PieLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PieLabelComponent, selector: "g[bb-charts-pie-label]", inputs: { data: "data", radius: "radius", label: "label", color: "color", icon: "icon", max: "max", value: "value", explodeSlices: "explodeSlices", animations: "animations", labelTrim: "labelTrim", labelTrimSize: "labelTrimSize", template: "template" }, ngImport: i0, template: `
    <ng-container *ngIf="template; else defaultTemplate">
      <ng-template
        [ngTemplateOutlet]="template"
        [ngTemplateOutletContext]="{ data: data, color: color, icon: icon, label: labelText }"
      >
      </ng-template>
    </ng-container>

    <ng-template #defaultTemplate>
      <svg:g [attr.transform]="attrTransform" [style.transform]="styleTransform" [style.transition]="textTransition">
        <svg:text
          class="pie-label"
          [class.animation]="animations"
          dy=".35em"
          [style.textAnchor]="'middle'"
          [style.shapeRendering]="'crispEdges'"
        >
          {{ labelText }}
        </svg:text>
      </svg:g>
    </ng-template>
  `, isInline: true, directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PieLabelComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: 'g[bb-charts-pie-label]',
                    template: `
    <ng-container *ngIf="template; else defaultTemplate">
      <ng-template
        [ngTemplateOutlet]="template"
        [ngTemplateOutletContext]="{ data: data, color: color, icon: icon, label: labelText }"
      >
      </ng-template>
    </ng-container>

    <ng-template #defaultTemplate>
      <svg:g [attr.transform]="attrTransform" [style.transform]="styleTransform" [style.transition]="textTransition">
        <svg:text
          class="pie-label"
          [class.animation]="animations"
          dy=".35em"
          [style.textAnchor]="'middle'"
          [style.shapeRendering]="'crispEdges'"
        >
          {{ labelText }}
        </svg:text>
      </svg:g>
    </ng-template>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { data: [{
                type: Input
            }], radius: [{
                type: Input
            }], label: [{
                type: Input
            }], color: [{
                type: Input
            }], icon: [{
                type: Input
            }], max: [{
                type: Input
            }], value: [{
                type: Input
            }], explodeSlices: [{
                type: Input
            }], animations: [{
                type: Input
            }], labelTrim: [{
                type: Input
            }], labelTrimSize: [{
                type: Input
            }], template: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGllLWxhYmVsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvaW5jb21lLXNwZW5kaW5nLWFuYWx5c2lzLXdpZGdldC9zcmMvYmItZG9udXQtY2hhcnQtdWkvbmd4L3BpZS9waWUtbGFiZWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7O0FBK0JqRCxNQUFNLE9BQU8saUJBQWlCO0lBc0Q1QjtRQWpEQTs7V0FFRztRQUNNLFdBQU0sR0FBRyxDQUFDLENBQUM7UUFhcEI7O1dBRUc7UUFDTSxRQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCOztXQUVHO1FBQ00sVUFBSyxHQUFHLENBQUMsQ0FBQztRQUNuQjs7V0FFRztRQUNNLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBQy9COztXQUVHO1FBQ00sZUFBVSxHQUFHLElBQUksQ0FBQztRQUMzQjs7V0FFRztRQUNNLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFDMUI7O1dBRUc7UUFDTSxrQkFBYSxHQUFHLEVBQUUsQ0FBQztRQVFYLFNBQUksR0FBRyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBR3ZFLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdkYsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxJQUFJLGNBQWM7UUFDaEIsT0FBTyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQztJQUNoRSxDQUFDO0lBRUQsSUFBSSxjQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxlQUFlLElBQUksQ0FBQyxLQUFLLE9BQU8sSUFBSSxDQUFDLEtBQUssUUFBUSxDQUFDO0lBQzdFLENBQUM7SUFFRCxJQUFJLGFBQWE7UUFDZixPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssV0FBVyxFQUFFO1lBQ3BDLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztTQUMzRTtJQUNILENBQUM7OytHQXRGVSxpQkFBaUI7bUdBQWpCLGlCQUFpQiw0VEF6QmxCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBc0JUOzRGQUdVLGlCQUFpQjtrQkE1QjdCLFNBQVM7bUJBQUM7b0JBQ1QsOERBQThEO29CQUM5RCxRQUFRLEVBQUUsd0JBQXdCO29CQUNsQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzQlQ7b0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzBFQUtVLElBQUk7c0JBQVosS0FBSztnQkFJRyxNQUFNO3NCQUFkLEtBQUs7Z0JBSUcsS0FBSztzQkFBYixLQUFLO2dCQUlHLEtBQUs7c0JBQWIsS0FBSztnQkFJRyxJQUFJO3NCQUFaLEtBQUs7Z0JBSUcsR0FBRztzQkFBWCxLQUFLO2dCQUlHLEtBQUs7c0JBQWIsS0FBSztnQkFJRyxhQUFhO3NCQUFyQixLQUFLO2dCQUlHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBSUcsU0FBUztzQkFBakIsS0FBSztnQkFJRyxhQUFhO3NCQUFyQixLQUFLO2dCQUlHLFFBQVE7c0JBQWhCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0cmltTGFiZWwgfSBmcm9tICdAc3dpbWxhbmUvbmd4LWNoYXJ0cyc7XG5pbXBvcnQgeyBBcmMgfSBmcm9tICcuLi8uLi9tb2RlbC90eXBlcyc7XG5cbkBDb21wb25lbnQoe1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ2dbYmItY2hhcnRzLXBpZS1sYWJlbF0nLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJ0ZW1wbGF0ZTsgZWxzZSBkZWZhdWx0VGVtcGxhdGVcIj5cbiAgICAgIDxuZy10ZW1wbGF0ZVxuICAgICAgICBbbmdUZW1wbGF0ZU91dGxldF09XCJ0ZW1wbGF0ZVwiXG4gICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7IGRhdGE6IGRhdGEsIGNvbG9yOiBjb2xvciwgaWNvbjogaWNvbiwgbGFiZWw6IGxhYmVsVGV4dCB9XCJcbiAgICAgID5cbiAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgPC9uZy1jb250YWluZXI+XG5cbiAgICA8bmctdGVtcGxhdGUgI2RlZmF1bHRUZW1wbGF0ZT5cbiAgICAgIDxzdmc6ZyBbYXR0ci50cmFuc2Zvcm1dPVwiYXR0clRyYW5zZm9ybVwiIFtzdHlsZS50cmFuc2Zvcm1dPVwic3R5bGVUcmFuc2Zvcm1cIiBbc3R5bGUudHJhbnNpdGlvbl09XCJ0ZXh0VHJhbnNpdGlvblwiPlxuICAgICAgICA8c3ZnOnRleHRcbiAgICAgICAgICBjbGFzcz1cInBpZS1sYWJlbFwiXG4gICAgICAgICAgW2NsYXNzLmFuaW1hdGlvbl09XCJhbmltYXRpb25zXCJcbiAgICAgICAgICBkeT1cIi4zNWVtXCJcbiAgICAgICAgICBbc3R5bGUudGV4dEFuY2hvcl09XCInbWlkZGxlJ1wiXG4gICAgICAgICAgW3N0eWxlLnNoYXBlUmVuZGVyaW5nXT1cIidjcmlzcEVkZ2VzJ1wiXG4gICAgICAgID5cbiAgICAgICAgICB7eyBsYWJlbFRleHQgfX1cbiAgICAgICAgPC9zdmc6dGV4dD5cbiAgICAgIDwvc3ZnOmc+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgYCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFBpZUxhYmVsQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgLyoqXG4gICAqIEluZm9ybWF0aW9uIGFib3V0IHRoZSBjaGFydCBzbGljZS5cbiAgICovXG4gIEBJbnB1dCgpIGRhdGE6IEFyYyB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIFJhZGl1cyBvZiB0aGUgY2lyY2xlLlxuICAgKi9cbiAgQElucHV0KCkgcmFkaXVzID0gMDtcbiAgLyoqXG4gICAqIFRleHQgZm9yIHRoZSBsYWJlbC5cbiAgICovXG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBDb2xvciBoZXggZm9yIHRoZSBsYWJlbC5cbiAgICovXG4gIEBJbnB1dCgpIGNvbG9yOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBJY29uIG5hbWUgZm9yIHRoZSBsYWJlbC5cbiAgICovXG4gIEBJbnB1dCgpIGljb246IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBsYWJlbHMgZGlzcGxheWVkLlxuICAgKi9cbiAgQElucHV0KCkgbWF4ID0gMTtcbiAgLyoqXG4gICAqIFZhbHVlIG9mIHRoZSBsYWJlbC5cbiAgICovXG4gIEBJbnB1dCgpIHZhbHVlID0gMDtcbiAgLyoqXG4gICAqIE1ha2UgdGhlIHJhZGl1cyBvZiBlYWNoIHNsaWNlIHByb3BvcnRpb25hbCB0byBpdCdzIHZhbHVlLlxuICAgKi9cbiAgQElucHV0KCkgZXhwbG9kZVNsaWNlcyA9IGZhbHNlO1xuICAvKipcbiAgICogRW5hYmxlL0Rpc2FibGUgYW5pbWF0aW9ucy5cbiAgICovXG4gIEBJbnB1dCgpIGFuaW1hdGlvbnMgPSB0cnVlO1xuICAvKipcbiAgICogRW5hYmxlL0Rpc2FibGUgbGFiZWwgdHJpbW1pbmcuXG4gICAqL1xuICBASW5wdXQoKSBsYWJlbFRyaW0gPSB0cnVlO1xuICAvKipcbiAgICogU2V0IHRoZSBsYWJlbCB0cmltbWluZyBzaXplLlxuICAgKi9cbiAgQElucHV0KCkgbGFiZWxUcmltU2l6ZSA9IDEwO1xuICAvKipcbiAgICogVGVtcGxhdGUgZm9yIHRoZSBsYWJlbC5cbiAgICovXG4gIEBJbnB1dCgpIHRlbXBsYXRlOiBhbnk7XG5cbiAgdHJpbUxhYmVsOiAobGFiZWw6IHN0cmluZywgbWF4PzogbnVtYmVyKSA9PiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBpc0lFID0gLyhlZGdlfG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudHJpbUxhYmVsID0gdHJpbUxhYmVsO1xuICB9XG5cbiAgZ2V0IGxhYmVsVGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5sYWJlbFRyaW0gPyB0cmltTGFiZWwodGhpcy5sYWJlbCB8fCAnJywgdGhpcy5sYWJlbFRyaW1TaXplKSA6IHRoaXMubGFiZWw7XG4gIH1cblxuICBnZXQgdGV4dFgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhID8gdGhpcy5kYXRhLnBvc1swXSA6IDA7XG4gIH1cblxuICBnZXQgdGV4dFkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhID8gdGhpcy5kYXRhLnBvc1sxXSA6IDA7XG4gIH1cblxuICBnZXQgdGV4dFRyYW5zaXRpb24oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pc0lFIHx8ICF0aGlzLmFuaW1hdGlvbnMgPyAnJyA6ICd0cmFuc2Zvcm0gMC43NXMnO1xuICB9XG5cbiAgZ2V0IHN0eWxlVHJhbnNmb3JtKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuaXNJRSA/ICcnIDogYHRyYW5zbGF0ZTNkKCR7dGhpcy50ZXh0WH1weCwgJHt0aGlzLnRleHRZfXB4LCAwKWA7XG4gIH1cblxuICBnZXQgYXR0clRyYW5zZm9ybSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAhdGhpcy5pc0lFID8gJycgOiBgdHJhbnNsYXRlKCR7dGhpcy50ZXh0WH0sICR7dGhpcy50ZXh0WX0pYDtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5kYXRhID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBcImRhdGFcIiBpbnB1dCBpcyByZXF1aXJlZCBpbiBcIiR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfVwiYCk7XG4gICAgfVxuICB9XG59XG4iXX0=