import * as i0 from '@angular/core';
import { Injectable, LOCALE_ID, Inject, Component, ChangeDetectionStrategy, Input, ViewChild, EventEmitter, Output, NgModule } from '@angular/core';
import * as i4$1 from '@angular/common';
import { getLocaleNumberSymbol, NumberSymbol, formatDate, CommonModule } from '@angular/common';
import * as i2 from '@angular/router';
import { RouterModule } from '@angular/router';
import * as i1$1 from '@angular/forms';
import { ReactiveFormsModule } from '@angular/forms';
import { BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i1 from '@backbase/data-ang/billpay';
import { tap, map, catchError, switchMap, first, takeUntil } from 'rxjs/operators';
import { BehaviorSubject, of, combineLatest, Subject } from 'rxjs';
import '@angular/localize/init';
import { __rest, __awaiter } from 'tslib';
import * as i2$1 from '@backbase/ui-ang/notification';
import { NotificationModule } from '@backbase/ui-ang/notification';
import * as i3 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i4 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i3$1 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i2$2 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i3$2 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i5 from '@backbase/ui-ang/payment-card-number-pipe';
import { PaymentCardNumberModule } from '@backbase/ui-ang/payment-card-number-pipe';
import * as i2$3 from '@backbase/ui-ang/input-text';
import { InputTextModule } from '@backbase/ui-ang/input-text';
import * as i3$3 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i4$2 from '@backbase/ui-ang/dropdown-single-select';
import { DropdownSingleSelectModule } from '@backbase/ui-ang/dropdown-single-select';
import * as i1$2 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import { KeyboardClickModule } from '@backbase/ui-ang/keyboard-click-directive';
import * as i2$4 from '@ng-bootstrap/ng-bootstrap';

const accountNumberFullFormat = {
    length: 0,
    maskRange: [0, 0],
    segments: 0,
};
const accountNumberMaskedFormat = {
    length: 9,
    maskRange: [0, 5],
    segments: 0,
};

const ONE_OFF_PAYMENT = 'oneOff';
const RECURRING_PAYMENT = 'recurring';

const ENROLMENT_PATH = 'enrolment';

var EndTypes;
(function (EndTypes) {
    EndTypes["Never"] = "never";
    EndTypes["On"] = "on";
    EndTypes["After"] = "after";
})(EndTypes || (EndTypes = {}));
var FrequencyKeys;
(function (FrequencyKeys) {
    FrequencyKeys["Once"] = "ONCE";
    FrequencyKeys["Weekly"] = "WEEKLY";
    FrequencyKeys["Biweekly"] = "EVERY_2_WEEKS";
    FrequencyKeys["Monthly"] = "MONTHLY";
    FrequencyKeys["EveryTwoWeeks"] = "EVERY_2_WEEKS";
    FrequencyKeys["SemiMonthly"] = "TWICE_A_MONTH";
    FrequencyKeys["EveryFourWeeks"] = "EVERY_4_WEEKS";
    FrequencyKeys["EveryTwoMonths"] = "EVERY_2_MONTHS";
    FrequencyKeys["Quarterly"] = "EVERY_3_MONTHS";
    FrequencyKeys["EverySixMonths"] = "EVERY_6_MONTHS";
    FrequencyKeys["Annually"] = "ANNUALLY";
})(FrequencyKeys || (FrequencyKeys = {}));

var PaymentServicesTypes;
(function (PaymentServicesTypes) {
    PaymentServicesTypes["Regular"] = "REGULAR_PAYMENT";
    PaymentServicesTypes["Overnight"] = "OVERNIGHT_CHECK";
    PaymentServicesTypes["Expedited"] = "EXPEDITED_PAYMENT";
    PaymentServicesTypes["Other"] = "OTHER";
})(PaymentServicesTypes || (PaymentServicesTypes = {}));
var LoadingState;
(function (LoadingState) {
    LoadingState[LoadingState["Loading"] = 0] = "Loading";
    LoadingState[LoadingState["Error"] = 1] = "Error";
    LoadingState[LoadingState["Inactive"] = 2] = "Inactive";
})(LoadingState || (LoadingState = {}));
var Direction;
(function (Direction) {
    Direction["ASC"] = "ASC";
    Direction["DESC"] = "DESC";
})(Direction || (Direction = {}));

class BillpayBaseDeactivateGuardService {
    /** @internal */
    constructor(router, location) {
        this.router = router;
        this.location = location;
    }
    canDeactivate(component, currentRoute, currentState, nextState) {
        const isNextRouteAllowed = this.allowedNextRoutes.some(route => route.test(nextState.url));
        const isPreviousRouteAllowed = this.allowedPreviousRoutes.some(route => route.test(currentState.url));
        const isNotSameRoute = currentState.url !== nextState.url;
        const isNavigationAllowed = isNextRouteAllowed && isPreviousRouteAllowed && isNotSameRoute;
        return (isNavigationAllowed ||
            component.openModal().pipe(
            // TODO: Due to Angular issue https://github.com/angular/angular/issues/13586
            tap(canDeactivate => {
                if (!canDeactivate) {
                    const currentUrlTree = this.router.createUrlTree([], currentRoute);
                    this.location.go(currentUrlTree.toString());
                }
            })));
    }
}

const recurringFrequencies = [
    { name: $localize `:@@billpay-common.frequency-label.weekly:Weekly`, value: FrequencyKeys.Weekly },
    { name: $localize `:@@billpay-common.frequency-label.every-two-week:Every two weeks`, value: FrequencyKeys.Biweekly },
    { name: $localize `:@@billpay-common.frequency-label.monthly:Monthly`, value: FrequencyKeys.Monthly },
];
const frequencies = [
    { name: $localize `:@@billpay-common.frequency-label.once:Once`, value: FrequencyKeys.Once },
    ...recurringFrequencies,
];

const formControlOptions = {
    emitEvent: false,
};

const states = [
    'AL',
    'AK',
    'AZ',
    'AR',
    'CA',
    'CO',
    'CT',
    'DE',
    'FL',
    'GA',
    'HI',
    'ID',
    'IL',
    'IN',
    'IA',
    'KS',
    'KY',
    'LA',
    'ME',
    'MD',
    'MA',
    'MI',
    'MN',
    'MS',
    'MO',
    'MT',
    'NE',
    'NV',
    'NH',
    'NJ',
    'NM',
    'NY',
    'NC',
    'ND',
    'OH',
    'OK',
    'OR',
    'PA',
    'RI',
    'SC',
    'SD',
    'TN',
    'TX',
    'UT',
    'VT',
    'VA',
    'WA',
    'WV',
    'WI',
    'WY',
];

class BillpayEnrolmentService {
    constructor(dataService, route, router) {
        this.dataService = dataService;
        this.route = route;
        this.router = router;
        this.previousRoute = new BehaviorSubject(undefined);
        this.getRoutePath = (route, path) => {
            if (route.snapshot && route.snapshot.routeConfig && route.snapshot.routeConfig.path) {
                path += '/' + route.snapshot.routeConfig.path;
            }
            if (!route.firstChild) {
                return path;
            }
            return this.getRoutePath(route.firstChild, path);
        };
    }
    enrolUser() {
        return this.dataService.postBillPayEnrolment('response').pipe(map(response => response.status === 204), catchError(error => of(error.status === 204)));
    }
    isEnrolled() {
        return this.dataService.getBillPayEnrolment().pipe(map(body => body.enrolment.enrolled), catchError(() => of(false)));
    }
    getCurrentRoute() {
        return this.getRoutePath(this.route, '');
    }
    redirectUser(previousRoute) {
        if (previousRoute && !previousRoute.includes(ENROLMENT_PATH)) {
            this.router.navigateByUrl(previousRoute);
        }
        else {
            this.router.navigate(['./']);
        }
    }
}
/** @nocollapse */ BillpayEnrolmentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayEnrolmentService, deps: [{ token: i1.BillPayEnrolmentService }, { token: i2.ActivatedRoute }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ BillpayEnrolmentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayEnrolmentService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayEnrolmentService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.BillPayEnrolmentService }, { type: i2.ActivatedRoute }, { type: i2.Router }]; } });

class BillpayEnrolmentGuard {
    constructor(router, enrolmentService) {
        this.router = router;
        this.enrolmentService = enrolmentService;
    }
    canActivate(route, state) {
        return this.enrolmentService.isEnrolled().pipe(map((enrolled) => {
            const currentRoute = this.enrolmentService.getCurrentRoute();
            if (!enrolled && !(currentRoute === null || currentRoute === void 0 ? void 0 : currentRoute.endsWith(ENROLMENT_PATH))) {
                this.enrolmentService.previousRoute.next(state.url);
                const parentRoutes = route.pathFromRoot.map(snapshot => { var _a; return (_a = snapshot === null || snapshot === void 0 ? void 0 : snapshot.routeConfig) === null || _a === void 0 ? void 0 : _a.path; }).filter(item => !!item);
                this.router.navigate([...parentRoutes, ENROLMENT_PATH]);
                return false;
            }
            return true;
        }));
    }
}
/** @nocollapse */ BillpayEnrolmentGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayEnrolmentGuard, deps: [{ token: i2.Router }, { token: BillpayEnrolmentService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ BillpayEnrolmentGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayEnrolmentGuard, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayEnrolmentGuard, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i2.Router }, { type: BillpayEnrolmentService }]; } });

class BillpayPaymentParserService {
    constructor(locale) {
        this.locale = locale;
        this.decimalSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal);
    }
    paymentRecurringToFormState(payment, payees) {
        const frequency = payment.recurring && recurringFrequencies.find(item => item.value === payment.frequency);
        const endType = payment.numberOfInstances ? EndTypes.After : EndTypes.Never;
        return Object.assign(Object.assign({}, this.parsePaymentCommonResponse(payment, payees)), { schedule: Object.assign({ repeat: payment.numberOfInstances, endType, startDate: payment.paymentDate, alertPendingCheckbox: payment.paymentScheduledAlert || false, alertSentCheckbox: payment.paymentSentAlert || false, alertLastPendingCheckbox: payment.modelExpirationAlert || false }, (frequency && { frequency: frequency.value })) });
    }
    paymentOneOffToFormState(payment, payees) {
        return Object.assign(Object.assign({}, this.parsePaymentCommonResponse(payment, payees)), { schedule: {
                startDate: payment.paymentDate,
                alertPendingCheckbox: false,
                alertSentCheckbox: false,
                alertLastPendingCheckbox: false,
                frequency: FrequencyKeys.Once,
            } });
    }
    paymentFormStateToReview({ accountFrom, payeeTo, amount, memo, schedule, overnightDeliveryAddress, }) {
        return Object.assign(Object.assign(Object.assign(Object.assign({ amount: {
                amount: amount.amount.replace(this.decimalSeparator, '.'),
                currencyCode: amount.currency,
            }, paymentDate: schedule.paymentServiceDate || schedule.startDate, paymentAccount: accountFrom, recurring: schedule.frequency !== FrequencyKeys.Once }, (memo && { paymentMemo: memo })), (overnightDeliveryAddress && { overnightDeliveryAddress })), this.parsePaymentFormPayee(payeeTo)), this.parsePaymentFormSchedule(schedule));
    }
    paymentAndPayeeResponsesToReview(payment, payee) {
        return Object.assign(Object.assign({}, this.paymentResponseToReview(payment)), (payee.address && { address: payee.address }));
    }
    // eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars
    paymentResponseToReview(_a) {
        var { id, status, ebillID } = _a, rest = __rest(_a, ["id", "status", "ebillID"]);
        return rest;
    }
    parsePaymentFormPayee(payee) {
        return Object.assign(Object.assign({ payeeID: payee.id, payeeName: payee.name }, (payee.accountNumber && { payeeAccountNumber: payee.accountNumber })), (payee.nickName && { payeeNickName: payee.nickName }));
    }
    parsePaymentFormSchedule(schedule) {
        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (this.getScheduleFee(schedule) && { fee: this.getScheduleFee(schedule) })), (schedule.repeat && { numberOfInstances: schedule.repeat })), (schedule.frequency !== FrequencyKeys.Once && { frequency: schedule.frequency })), (schedule.alertPendingCheckbox && { paymentScheduledAlert: schedule.alertPendingCheckbox })), (schedule.alertSentCheckbox && { paymentSentAlert: schedule.alertSentCheckbox })), (schedule.alertLastPendingCheckbox && { modelExpirationAlert: schedule.alertLastPendingCheckbox }));
    }
    getScheduleFee(schedule) {
        return ((schedule.paymentService &&
            (schedule.paymentService.index === PaymentServicesTypes.Expedited ||
                schedule.paymentService.index === PaymentServicesTypes.Overnight) &&
            schedule.paymentService.service &&
            schedule.paymentService.service.fee) ||
            undefined);
    }
    parsePaymentCommonResponse(payment, payees) {
        const payeeTo = payees.find(item => item.id === payment.payeeID);
        const amount = payment.amount && {
            currency: payment.amount.currencyCode,
            amount: payment.amount.amount.replace(this.decimalSeparator, '.'),
        };
        return Object.assign(Object.assign(Object.assign(Object.assign({ paymentId: payment.id }, (payment.amount && { amount })), (payeeTo && { payeeTo })), (payment.paymentAccount && { accountFrom: payment.paymentAccount })), (payment.paymentMemo && { memo: payment.paymentMemo }));
    }
}
/** @nocollapse */ BillpayPaymentParserService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPaymentParserService, deps: [{ token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ BillpayPaymentParserService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPaymentParserService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPaymentParserService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });

class BillpayPaymentScheduleService {
    get today() {
        return this.getLocalISODate(new Date());
    }
    estimatedEndDate(date, freq, occurs = 0) {
        const parsedDate = new Date(date);
        switch (freq) {
            case FrequencyKeys.Monthly:
                return parsedDate.setMonth(parsedDate.getMonth() + occurs);
            case FrequencyKeys.Biweekly:
                return (new Date(parsedDate.setDate(parsedDate.getDate() - 1)).setHours(0, 0, 0) + occurs * (1000 * 3600 * 24) * 14);
            case FrequencyKeys.Weekly:
                return (new Date(parsedDate.setDate(parsedDate.getDate() - 1)).setHours(0, 0, 0) + occurs * (1000 * 3600 * 24) * 7);
            default:
                return parsedDate.getTime();
        }
    }
    estimatedOccurences(startDate, endDate, freq) {
        const d1 = new Date(startDate);
        const d2 = new Date(endDate);
        switch (freq) {
            case FrequencyKeys.Monthly:
                return this.toMonthDifference(d1, d2);
            case FrequencyKeys.Biweekly:
                return Math.ceil(this.toDaysDifference(d1, d2) / 14);
            case FrequencyKeys.Weekly:
                return Math.ceil(this.toDaysDifference(d1, d2) / 7);
            default:
                return 1;
        }
    }
    estimatedPaymentServiceDate(services, serviceType) {
        const service = services && services.find(item => !!(item && item.paymentServiceType === serviceType));
        if (service) {
            return new Date(service.cutoffTime).getTime() < new Date(service.earliestPaymentDate).getTime()
                ? this.getLocalISODate(service.earliestPaymentDate)
                : this.getLocalISODate(service.nextPaymentDate);
        }
        else {
            return this.today;
        }
    }
    toMonthDifference(d1, d2) {
        const endMonth = d2.getMonth();
        const startMonth = d1.getMonth();
        const endDay = d2.getDate();
        const startDay = d1.getDate();
        const lastDayOfEndMonth = new Date(d2.getFullYear(), endMonth + 1, 0).getDate();
        const lastDayOfStartMonth = new Date(d1.getFullYear(), startMonth + 1, 0).getDate();
        let strictMonths = (d2.getFullYear() - d1.getFullYear()) * 12 - startMonth + endMonth - 1;
        strictMonths = strictMonths <= 0 ? 0 : strictMonths;
        const softMonths = (startDay <= endDay && startMonth !== endMonth) ||
            (startDay === lastDayOfStartMonth && endDay === lastDayOfEndMonth && startMonth !== endMonth)
            ? 2
            : 1;
        return strictMonths + softMonths;
    }
    toDaysDifference(d1, d2) {
        const rest = d2.getTime() - d1.getTime();
        const result = Math.ceil(Math.abs(rest) / (1000 * 3600 * 24));
        if (rest < 0) {
            return 0;
        }
        else {
            return result ? result + 1 : 1;
        }
    }
    getLocalISODate(_date) {
        const ISODateRegExp = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/g;
        // Check if the date is already ISO
        if (typeof _date === 'string' && ISODateRegExp.test(_date)) {
            return _date;
        }
        const date = new Date(_date);
        const timezonezoffset = date.getTimezoneOffset() * 60000;
        return new Date(date.getTime() + timezonezoffset).toISOString();
    }
}
/** @nocollapse */ BillpayPaymentScheduleService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPaymentScheduleService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ BillpayPaymentScheduleService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPaymentScheduleService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPaymentScheduleService, decorators: [{
            type: Injectable
        }] });

class BillpayUtilityService {
    static checkForProperty(property, inObject) {
        let propertyAsArray = [];
        if (typeof property === 'string') {
            propertyAsArray = property.split('.');
        }
        else {
            propertyAsArray = property;
        }
        return propertyAsArray.reduce((currentObject, currentProperty) => currentObject && currentObject[currentProperty] ? currentObject[currentProperty] : undefined, inObject);
    }
    static generateId() {
        return Math.floor(Math.random() * Date.now()).toString();
    }
}
/** @nocollapse */ BillpayUtilityService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayUtilityService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ BillpayUtilityService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayUtilityService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayUtilityService, decorators: [{
            type: Injectable
        }] });

class BillpayPaymentDataService {
    /** @internal */
    constructor(paymentData, accountsData, payeesSummaryData, locale) {
        this.paymentData = paymentData;
        this.accountsData = accountsData;
        this.payeesSummaryData = payeesSummaryData;
        this.locale = locale;
        this.currentPayeesLoadingState = LoadingState.Inactive;
        this.currentAccountsLoadingState = LoadingState.Inactive;
        this.reload = new BehaviorSubject(undefined);
        this.decimalSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal);
    }
    get payeesLoadingState() {
        return this.currentPayeesLoadingState;
    }
    get accountsLoadingState() {
        return this.currentAccountsLoadingState;
    }
    getOneOffPayment(id) {
        return this.paymentData.getPaymentById({ id }).pipe(map(body => body.payment));
    }
    getRecurringPayment(id) {
        return this.paymentData.getRecurringPaymentById({ id }).pipe(map(body => body.payment));
    }
    getPayeesAndAccounts() {
        return combineLatest([this.getPayees(), this.getAccounts()]).pipe(map(([payeeSummaries, accounts]) => (Object.assign(Object.assign({}, payeeSummaries), accounts))));
    }
    createPayment(payment) {
        return payment.schedule.frequency === FrequencyKeys.Once
            ? this.paymentData.postBillPayPayments({
                billPayPaymentsPostRequestBody: { payments: [this.toPaymentRequest(payment)] },
            })
            : this.paymentData.postBillPayRecurringPayments({
                billPayRecurringPaymentsPostRequestBody: { payment: this.toRecurringPaymentRequest(payment) },
            });
    }
    updatePaymentRecurring(payment, id) {
        return this.paymentData.putRecurringPaymentById({
            id,
            recurringPaymentByIdPutRequestBody: { payment: this.toRecurringPaymentRequest(payment) },
        });
    }
    updatePaymentOneOff(payment, id) {
        return this.paymentData.putPaymentById({
            id,
            paymentByIdPutRequestBody: { payment: this.toPaymentRequest(payment) },
        });
    }
    getPayees() {
        return this.reload.asObservable().pipe(tap(() => (this.currentPayeesLoadingState = LoadingState.Loading)), switchMap(() => this.payeesSummaryData.getBillPayPayeesSummary()), tap(() => (this.currentPayeesLoadingState = LoadingState.Inactive)), catchError(() => {
            this.currentPayeesLoadingState = LoadingState.Error;
            return of(undefined);
        }));
    }
    getAccounts() {
        return this.reload.asObservable().pipe(tap(() => (this.currentAccountsLoadingState = LoadingState.Loading)), switchMap(() => this.accountsData.getBillPayAccounts()), tap(() => (this.currentAccountsLoadingState = LoadingState.Inactive)), catchError(() => {
            this.currentAccountsLoadingState = LoadingState.Error;
            return of(undefined);
        }));
    }
    toShortISODate(date) {
        return formatDate(date, 'yyyy-MM-dd', this.locale);
    }
    toPaymentRequest({ payeeTo: { id: payeeID }, accountFrom: { accountNumber, routingNumber, accountType, id }, amount, memo, schedule, overnightDeliveryAddress, }) {
        return Object.assign(Object.assign(Object.assign(Object.assign({ payeeID, paymentAccount: Object.assign(Object.assign({}, (id && { id: id })), { accountNumber,
                routingNumber,
                accountType }) }, (schedule.paymentService &&
            schedule.paymentService.service && { paymentServiceType: schedule.paymentService.service.paymentServiceType })), { amount: {
                amount: amount.amount.replace(this.decimalSeparator, '.'),
                currencyCode: amount.currency,
            }, paymentDate: this.toShortISODate(schedule.startDate) }), (memo && { paymentMemo: memo })), (overnightDeliveryAddress && {
            overnightDeliveryAddress: Object.assign({ address1: overnightDeliveryAddress.address1, state: overnightDeliveryAddress.state, city: overnightDeliveryAddress.city, postalCode: overnightDeliveryAddress.postalCode }, (overnightDeliveryAddress.address2 && { address2: overnightDeliveryAddress.address2 })),
        }));
    }
    toRecurringPaymentRequest({ payeeTo: { id: payeeID }, accountFrom: { accountNumber, routingNumber, accountType, id }, amount, schedule, memo, }) {
        return Object.assign(Object.assign(Object.assign(Object.assign({ payeeID, paymentAccount: Object.assign(Object.assign({}, (id && { id: id })), { accountNumber,
                routingNumber,
                accountType }), amount: {
                amount: amount.amount.replace(this.decimalSeparator, '.'),
                currencyCode: amount.currency,
            } }, (memo && { paymentMemo: memo })), { paymentDate: this.toShortISODate(schedule.startDate) }), (schedule.repeat && { numberOfInstances: schedule.repeat })), { frequency: schedule.frequency, paymentScheduledAlert: schedule.alertPendingCheckbox, paymentSentAlert: schedule.alertSentCheckbox, modelExpirationAlert: schedule.alertLastPendingCheckbox });
    }
}
/** @nocollapse */ BillpayPaymentDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPaymentDataService, deps: [{ token: i1.BillPayPaymentsService }, { token: i1.BillPayAccountsService }, { token: i1.BillPayPayeesSummaryService }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ BillpayPaymentDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPaymentDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPaymentDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.BillPayPaymentsService }, { type: i1.BillPayAccountsService }, { type: i1.BillPayPayeesSummaryService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });

class BillpayEnrolmentComponent {
    constructor(billpayEnrolmentService, cd, notificationService) {
        this.billpayEnrolmentService = billpayEnrolmentService;
        this.cd = cd;
        this.notificationService = notificationService;
        this.enrolmentFailed = false;
        this.loading = false;
        this.notificationHeaderSuccessTemplate = '';
        this.notificationHeaderErrorTemplate = '';
    }
    ngOnInit() {
        this.loading = true;
        this.billpayEnrolmentService
            .isEnrolled()
            .pipe(first())
            .subscribe(isEnrolled => {
            if (isEnrolled) {
                this.loading = false;
                this.redirectUser();
            }
            else {
                this.enrolUser();
            }
        }, () => {
            this.onEnrolFail();
            this.cd.markForCheck();
        });
    }
    enrolUser() {
        this.loading = true;
        this.enrolmentFailed = false;
        this.billpayEnrolmentService
            .enrolUser()
            .pipe(first())
            .subscribe(isEnrolled => {
            if (isEnrolled) {
                this.onEnrolSuccess();
            }
            else {
                this.onEnrolFail();
            }
            this.cd.markForCheck();
        });
    }
    onEnrolSuccess() {
        this.loading = false;
        this.notificationService.showNotification({
            header: this.notificationHeaderSuccessTemplate,
            message: '',
            modifier: 'success',
            ttl: this.notificationDismissTime,
        });
        this.redirectUser();
    }
    onEnrolFail() {
        this.loading = false;
        this.enrolmentFailed = true;
        this.notificationService.showNotification({
            header: this.notificationHeaderErrorTemplate,
            message: '',
            modifier: 'error',
            ttl: this.notificationDismissTime,
        });
    }
    redirectUser() {
        this.billpayEnrolmentService.previousRoute.pipe(first()).subscribe(route => {
            this.billpayEnrolmentService.redirectUser(route || '');
        });
    }
}
/** @nocollapse */ BillpayEnrolmentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayEnrolmentComponent, deps: [{ token: BillpayEnrolmentService }, { token: i0.ChangeDetectorRef }, { token: i2$1.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BillpayEnrolmentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BillpayEnrolmentComponent, selector: "bb-billpay-enrolment", inputs: { notificationDismissTime: "notificationDismissTime" }, viewQueries: [{ propertyName: "notificationHeaderSuccessTemplate", first: true, predicate: ["successHeader"], descendants: true }, { propertyName: "notificationHeaderErrorTemplate", first: true, predicate: ["errorHeader"], descendants: true }], ngImport: i0, template: "<div class=\"card card-lg\">\n  <div class=\"card-body\">\n    <div *ngIf=\"loading\">\n      <bb-loading-indicator-ui\n        i18n-text=\"\n          Enrolling in the bill pay service...|Enrolment Widget enrolling text@@bb-billpay-enrolment.enrolling.text\"\n        text=\"Enrolling in the bill pay service...\"\n        loaderSize=\"lg\"\n      ></bb-loading-indicator-ui>\n    </div>\n\n    <div *ngIf=\"enrolmentFailed\">\n      <div class=\"bb-state-container\">\n        <bb-empty-state-ui\n          data-role=\"error-state\"\n          iconSize=\"xxl\"\n          iconColor=\"danger\"\n          iconModifier=\"error-outline\"\n          subtitle=\"Try enrolling again or contact support\"\n          i18n-subtitle=\"\n            Try enrolling again or contact support|Enrolment Widget failure\n            subtitle@@bb-billpay-enrolment.failure.subtitle\"\n          title=\"Enrolment failed\"\n          i18n-title=\"Enrolment failed|Enrolment Widget failure title@@bb-billpay-enrolment.failure.title\"\n        >\n        </bb-empty-state-ui>\n        <div class=\"bb-state-container__footer\">\n          <button\n            bbButton\n            data-role=\"button-enrolment-retry\"\n            (click)=\"enrolUser()\"\n            i18n=\"Try enrolling again|Enrolment Widget Try enrolling again button@@bb-billpay-enrolment.button.tryAgain\"\n          >\n            Try enrolling again\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #successHeader>\n  <span i18n=\"Enrolment successful|Enrolment successful message@@b-billpay-enrolment.message.successful\"\n    >Enrolment successful</span\n  >\n</ng-template>\n\n<ng-template #errorHeader>\n  <span i18n=\"Enrolment failed|Enrolment failed message@@b-billpay-enrolment.message.failed\">Enrolment failed</span>\n</ng-template>\n", components: [{ type: i3.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i4.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i4$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3$1.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayEnrolmentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-enrolment',
                    templateUrl: './billpay-enrolment.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: BillpayEnrolmentService }, { type: i0.ChangeDetectorRef }, { type: i2$1.NotificationService }]; }, propDecorators: { notificationDismissTime: [{
                type: Input
            }], notificationHeaderSuccessTemplate: [{
                type: ViewChild,
                args: ['successHeader']
            }], notificationHeaderErrorTemplate: [{
                type: ViewChild,
                args: ['errorHeader']
            }] } });

class BillpayPaymentReviewCardComponent {
    /** @internal */
    constructor(scheduleService) {
        this.scheduleService = scheduleService;
        /**
         * Whether the account number should be masked. Defaults to true.
         */
        this.accountNumberMask = true;
    }
    get totalAmount() {
        const fee = Number(this.paymentReview && this.paymentReview.fee && this.paymentReview.fee.amount) || 0;
        const amount = Number(this.paymentReview && this.paymentReview.amount && this.paymentReview.amount.amount) || 0;
        return fee + amount;
    }
    get accountNumberFormatConfig() {
        return this.accountNumberMask ? accountNumberMaskedFormat : accountNumberFullFormat;
    }
    getEndDate(paymentDate, numberOfInstances, frequency) {
        return this.scheduleService.estimatedEndDate(paymentDate, frequency, numberOfInstances);
    }
}
/** @nocollapse */ BillpayPaymentReviewCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPaymentReviewCardComponent, deps: [{ token: BillpayPaymentScheduleService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BillpayPaymentReviewCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BillpayPaymentReviewCardComponent, selector: "bb-billpay-payment-review-card", inputs: { paymentReview: "paymentReview", accountNumberMask: "accountNumberMask", frequencyLabel: "frequencyLabel" }, ngImport: i0, template: "<section class=\"bb-block bb-block--xl\">\n  <div class=\"bb-block bb-block--md\">\n    <bb-header-ui\n      data-role=\"from-title\"\n      headingClasses=\"h3\"\n      headingType=\"h2\"\n      heading=\"From\"\n      i18n-heading=\"From section title|Label for group of data related to the account@@billpay-payment-review-card.from\"\n    >\n    </bb-header-ui>\n  </div>\n  <ng-container *ngIf=\"paymentReview?.paymentAccount?.accountNickName\">\n    <div\n      class=\"bb-text-bold\"\n      i18n=\"From account name title|Label for account name in from group@@billpay-payment-review-card.from.account-name\"\n      data-role=\"account-name-label\"\n    >\n      Account name\n    </div>\n    <div class=\"bb-block bb-block--md\" data-role=\"account-name\">\n      {{ paymentReview?.paymentAccount?.accountNickName }}\n    </div>\n  </ng-container>\n  <div\n    i18n=\"From account type title|Label for account type in from group@@billpay-payment-review-card.from.account-type\"\n    class=\"bb-text-bold\"\n    data-role=\"account-type-label\"\n  >\n    Account type\n  </div>\n  <div\n    data-role=\"account-type\"\n    class=\"bb-block bb-block--md\"\n    i18n=\"Payment account types@@billpay-payment-review-card.payment.account-types\"\n  >\n    {paymentReview?.paymentAccount?.accountType, select, CD_ACCOUNT {CD account} CHECKING_ACCOUNT {Checking account}\n    SAVINGS_ACCOUNT {Savings account} LOAN_ACCOUNT {Loan account} OTHER_ACCOUNT {Other account}}\n  </div>\n  <div\n    i18n=\"\n      From account number title|Label for account number in from group@@billpay-payment-review-card.from.account-number\"\n    class=\"bb-text-bold\"\n    data-role=\"account-number-label\"\n  >\n    Account number\n  </div>\n  <div data-role=\"account-number\">\n    {{ paymentReview?.paymentAccount?.accountNumber | paymentCardNumber: accountNumberFormatConfig }}\n  </div>\n</section>\n\n<section class=\"bb-block bb-block--xl\">\n  <div class=\"bb-block bb-block--md\">\n    <bb-header-ui\n      headingType=\"h2\"\n      headingClasses=\"h3\"\n      heading=\"To\"\n      i18n-heading=\"\n        To section title|Label for group of data related to the payee account@@billpay-payment-review-card.to\"\n      data-role=\"to-title\"\n    >\n    </bb-header-ui>\n  </div>\n  <div\n    i18n=\"To payee name title|Label for payee name in to group@@billpay-payment-review-card.to.payee-name\"\n    class=\"bb-text-bold\"\n    data-role=\"payee-name-label\"\n  >\n    Payee name\n  </div>\n  <div data-role=\"payee-name\" class=\"bb-block bb-block--md\">\n    <span>{{\n      (paymentReview?.payeeNickName && paymentReview?.payeeNickName + \" (\" + paymentReview?.payeeName + \")\") ||\n        paymentReview?.payeeName\n    }}</span>\n  </div>\n  <ng-container *ngIf=\"paymentReview?.payeeAccountNumber\">\n    <div\n      data-role=\"payee-account-number-label\"\n      i18n=\"\n        To payee account number title|Label for payee account number in to\n        group@@billpay-payment-review-card.to.payee-account-number\"\n      class=\"bb-text-bold\"\n    >\n      Payee account number\n    </div>\n    <div data-role=\"payee-account-number\" class=\"bb-block bb-block--md\">\n      {{ paymentReview?.payeeAccountNumber | paymentCardNumber: accountNumberFormatConfig }}\n    </div>\n  </ng-container>\n  <ng-container *ngIf=\"paymentReview?.address as payeeAddress\">\n    <div\n      data-role=\"payee-address-label\"\n      i18n=\"To payee address title|Label for payee address in to group@@billpay-payment-review-card.to.payee-address\"\n      class=\"bb-text-bold\"\n    >\n      Payee address\n    </div>\n    <div data-role=\"payee-address\" class=\"bb-block bb-block--md\">\n      <div>{{ payeeAddress?.address1 }}</div>\n      <div *ngIf=\"payeeAddress?.address2\">{{ payeeAddress?.address2 }}</div>\n      <div>{{ payeeAddress?.city }}&nbsp;{{ payeeAddress?.state }}&nbsp;{{ payeeAddress?.postalCode }}</div>\n    </div>\n  </ng-container>\n</section>\n\n<section>\n  <div class=\"bb-block bb-block--md\">\n    <bb-header-ui\n      headingType=\"h3\"\n      heading=\"Payment details\"\n      i18n-heading=\"\n        Payment details section title|Label for group of data related to the payment\n        details@@billpay-payment-review-card.details\"\n      data-role=\"payment-details-title\"\n    >\n    </bb-header-ui>\n  </div>\n  <div\n    i18n=\"Payment details amount|Label for amount in details group@@billpay-payment-review-card.details.amount\"\n    class=\"bb-text-bold\"\n    data-role=\"amount-label\"\n  >\n    Amount\n  </div>\n  <div class=\"bb-block bb-block--md\">\n    <bb-amount-ui\n      data-role=\"amount\"\n      [amount]=\"paymentReview?.amount?.amount\"\n      [currency]=\"paymentReview?.amount?.currencyCode\"\n    >\n    </bb-amount-ui>\n  </div>\n  <ng-container *ngIf=\"paymentReview?.fee\">\n    <div\n      i18n=\"Payment details fee|Label for fee in details group@@billpay-payment-review-card.details.fee\"\n      class=\"bb-text-bold\"\n      data-role=\"fee-label\"\n    >\n      Expedited payment fee\n    </div>\n    <div data-role=\"fee-amount\" class=\"bb-block bb-block--md\">\n      {{ paymentReview?.fee?.amount | currency: paymentReview?.fee?.currencyCode:\"symbol-narrow\" }}\n    </div>\n    <div\n      i18n=\"\n        Payment details total amount|Label for total amount in details\n        group@@billpay-payment-review-card.details.total.amount\"\n      class=\"bb-text-bold\"\n      data-role=\"total-amount-label\"\n    >\n      Total amount\n    </div>\n    <div class=\"bb-block bb-block--md\">\n      <bb-amount-ui data-role=\"total-amount\" [amount]=\"totalAmount\" [currency]=\"paymentReview?.amount?.currencyCode\">\n      </bb-amount-ui>\n    </div>\n  </ng-container>\n  <ng-container *ngIf=\"paymentReview?.paymentMemo\">\n    <div\n      i18n=\"Payment details memo|Label for memo in details group@@billpay-payment-review-card.details.memo\"\n      class=\"bb-text-bold\"\n      data-role=\"memo-label\"\n    >\n      Memo\n    </div>\n    <div class=\"bb-block bb-block--md\" data-role=\"memo\">{{ paymentReview?.paymentMemo }}</div>\n  </ng-container>\n  <div\n    i18n=\"\n      Payment details frequency|Label for frequency in details\n      group@@billpay-payment-review-card.details.frequency-label\"\n    class=\"bb-text-bold\"\n    data-role=\"frequency-label\"\n  >\n    Frequency\n  </div>\n\n  <ng-container *ngIf=\"!paymentReview?.recurring; else recurringFrequency\">\n    <div\n      data-role=\"frequency\"\n      class=\"bb-block bb-block--md\"\n      i18n=\"Payment details frequency|Label for frequency once@@billpay-payment-review-card.details.frequency.once\"\n    >\n      Once\n    </div>\n    <div\n      i18n=\"\n        Payment details deliver by|Label for deliver by in details\n        group@@billpay-payment-review-card.details.deliver-by-label\"\n      class=\"bb-text-bold\"\n      data-role=\"deliver-by\"\n    >\n      Deliver payment by\n    </div>\n    <div data-role=\"deliver-date\" class=\"bb-block bb-block--md\">\n      {{ paymentReview?.paymentDate | date: \"fullDate\" }}\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"paymentReview?.overnightDeliveryAddress as address\">\n    <div\n      data-role=\"overnight-address-label\"\n      i18n=\"\n        Payment overnight address|Label for overnight\n        address@@billpay-payment-review-card.details.overnight-address.label\"\n      class=\"bb-text-bold\"\n    >\n      Overnight check address\n    </div>\n    <div data-role=\"overnight-address\" class=\"bb-block bb-block--md\">\n      <div>{{ address?.address1 }}</div>\n      <div *ngIf=\"address?.address2\">{{ address?.address2 }}</div>\n      <div>{{ address?.city }}&nbsp;{{ address?.state }}&nbsp;{{ address?.postalCode }}</div>\n    </div>\n  </ng-container>\n\n  <ng-template #recurringFrequency>\n    <div data-role=\"frequency\" class=\"bb-block bb-block--md\">\n      <ng-container *ngIf=\"frequencyLabel; else defaultLabels\">{{ frequencyLabel }}</ng-container>\n      <!-- Remove default labels after journey migration phase 2 -->\n      <ng-template #defaultLabels>\n        <span\n          i18n=\"\n            Payment details frequency|Label for frequency in details\n            group@@billpay-payment-review-card.details.frequency.list\"\n        >\n          {paymentReview?.frequency, select, ONCE {Once} WEEKLY {Weekly} EVERY_2_WEEKS {Every two weeks} MONTHLY\n          {Monthly} EVERY_4_WEEKS {Every for weeks} TWICE_A_MONTH {Semi monthly} EVERY_2_MONTHS {Every two months}\n          EVERY_3_MONTHS { Every three months} EVERY_6_MONTHS {Every six months} ANNUALLY {Annually}}\n        </span>\n      </ng-template>\n    </div>\n    <div\n      i18n=\"\n        Payment details deliver by|Label for deliver by in details\n        group@@billpay-payment-review-card.details.amount.other\"\n      class=\"bb-text-bold\"\n      data-role=\"deliver-by\"\n    >\n      Deliver first payment by\n    </div>\n    <div data-role=\"deliver-date\" class=\"bb-block bb-block--md\">\n      {{ paymentReview?.paymentDate | date: \"fullDate\" }}\n    </div>\n    <div\n      i18n=\"Payment details ending|Label for ending in details group@@billpay-payment-review-card.details.ending-label\"\n      class=\"bb-text-bold\"\n      data-role=\"ending-label\"\n    >\n      Ending\n    </div>\n    <div data-role=\"ending\" class=\"bb-block bb-block--md\">\n      <span\n        *ngIf=\"paymentReview?.numberOfInstances; else neverEnding\"\n        i18n=\"Payment details ending|Label for ending in details group@@billpay-payment-review-card.details.ending\"\n        >After { paymentReview?.numberOfInstances, plural, =1 {{{paymentReview?.numberOfInstances}} payment } other\n        {{{paymentReview?.numberOfInstances}} payments } } (estimated\n        {{\n          getEndDate(paymentReview?.paymentDate, paymentReview?.numberOfInstances, paymentReview?.frequency)\n            | date: \"longDate\"\n        }})</span\n      >\n      <ng-template #neverEnding>\n        <span\n          i18n=\"Payment details ending|Label for never ending payment@@billpay-payment-review-card.details.ending.never\"\n          >Never\n        </span>\n      </ng-template>\n    </div>\n    <div\n      *ngIf=\"\n        paymentReview?.paymentScheduledAlert || paymentReview?.paymentSentAlert || paymentReview?.modelExpirationAlert\n      \"\n      i18n=\"Payment details notify me|Label for notify me in details group@@billpay-payment-review-card.details.notify\"\n      class=\"bb-text-bold\"\n      data-role=\"notify-label\"\n    >\n      Notify me\n    </div>\n    <div>\n      <ul>\n        <li\n          *ngIf=\"paymentReview?.paymentScheduledAlert\"\n          i18n=\"\n            Payment details when a payment is pending|Label for when a payment is pending in details\n            group@@billpay-payment-review-card.details.notify.pending\"\n          data-role=\"alertPendingCheckbox\"\n        >\n          When a payment is pending\n        </li>\n        <li\n          *ngIf=\"paymentReview?.paymentSentAlert\"\n          i18n=\"\n            Payment details when a payment has been sent|Label for when a payment has been sent in details\n            group@@billpay-payment-review-card.details.notify.sent\"\n          data-role=\"alertSentCheckbox\"\n        >\n          When a payment has been sent\n        </li>\n        <li\n          *ngIf=\"paymentReview?.modelExpirationAlert\"\n          i18n=\"\n            Payment details when the last payment is pending|Label for when the last payment is pending in details\n            group@@billpay-payment-review-card.details.notify.pending.last\"\n          data-role=\"alertLastPendingCheckbox\"\n        >\n          When the last payment is pending\n        </li>\n      </ul>\n    </div>\n  </ng-template>\n</section>\n", components: [{ type: i2$2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i3$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i4$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "paymentCardNumber": i5.PaymentCardNumberPipe, "currency": i4$1.CurrencyPipe, "date": i4$1.DatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPaymentReviewCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payment-review-card',
                    templateUrl: './billpay-payment-review-card.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: BillpayPaymentScheduleService }]; }, propDecorators: { paymentReview: [{
                type: Input
            }], accountNumberMask: [{
                type: Input
            }], frequencyLabel: [{
                type: Input
            }] } });

class BillpayAddressFormComponent {
    /** @internal */
    constructor(controlContainer) {
        this.controlContainer = controlContainer;
        this.states = states;
        this.address1RequiredId = BillpayUtilityService.generateId();
        this.address1MaxLengthId = BillpayUtilityService.generateId();
        this.address2MaxLengthId = BillpayUtilityService.generateId();
        this.cityRequiredId = BillpayUtilityService.generateId();
        this.cityMaxlengthId = BillpayUtilityService.generateId();
        this.stateLengthId = BillpayUtilityService.generateId();
        this.postalCodeRequiredId = BillpayUtilityService.generateId();
        this.postalCodePatternId = BillpayUtilityService.generateId();
        this.labelId = BillpayUtilityService.generateId();
    }
    ngAfterContentInit() {
        this.formGroup = this.controlContainer.control;
    }
    hasError(controlName, errorName) {
        const control = this.formGroup && this.formGroup.get(controlName);
        return !!control && control.hasError(errorName) && control.touched;
    }
}
/** @nocollapse */ BillpayAddressFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayAddressFormComponent, deps: [{ token: i1$1.ControlContainer }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BillpayAddressFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BillpayAddressFormComponent, selector: "bb-billpay-address-form", ngImport: i0, template: "<ng-container [formGroup]=\"formGroup\">\n  <div class=\"bb-block bb-block--md\">\n    <div class=\"bb-form-field bb-form-field--md\">\n      <bb-input-text-ui\n        formControlName=\"address1\"\n        data-role=\"address1-input\"\n        label=\"Address line 1\"\n        i18n-label=\"label|Label for Address line 1 field@@billpay-manual-payee-form.address-line-1-label\"\n        [aria-describedby]=\"[address1RequiredId, address1MaxLengthId].join(' ')\"\n      >\n      </bb-input-text-ui>\n    </div>\n    <bb-input-validation-message-ui\n      role=\"alert\"\n      [showErrors]=\"hasError('address1', 'required')\"\n      i18n=\"error text|Address line 1 is required error text@@billpay-manual-payee-form.error.address1-required\"\n      data-role=\"address1-error-required\"\n      [messageId]=\"address1RequiredId\"\n    >\n      Please enter a street number and name\n    </bb-input-validation-message-ui>\n    <bb-input-validation-message-ui\n      role=\"alert\"\n      [showErrors]=\"hasError('address1', 'maxlength')\"\n      i18n=\"error text|Address line max length error text@@billpay-manual-payee-form.error.address-maxlength\"\n      data-role=\"address1-error-maxlength\"\n      [messageId]=\"address1MaxLengthId\"\n    >\n      Address may not be over forty characters\n    </bb-input-validation-message-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--md\">\n    <div class=\"bb-form-field bb-form-field--md\">\n      <label class=\"bb-label\" data-role=\"address2-input-label\" [attr.id]=\"'bb-address-label' + labelId\">\n        <span i18n=\"label|Label for Address line 2 (optional) field@@billpay-manual-payee-form.address-line-2-label\"\n          >Address line 2</span\n        >\n        <span\n          class=\"bb-text-default bb-text-support\"\n          i18n=\"label optional|Label for optional text@@billpay-manual-payee-form.address-line-2-label-helper\"\n        >\n          (Optional)</span\n        >\n      </label>\n      <bb-input-text-ui\n        formControlName=\"address2\"\n        data-role=\"address2-input\"\n        [aria-labelledby]=\"'bb-address-label' + labelId\"\n        [aria-describedby]=\"address2MaxLengthId\"\n      >\n      </bb-input-text-ui>\n    </div>\n    <bb-input-validation-message-ui\n      role=\"alert\"\n      [showErrors]=\"hasError('address2', 'maxlength')\"\n      i18n=\"error text|Address line max length error text@@billpay-manual-payee-form.error.address-maxlength\"\n      data-role=\"address2-error-maxlength\"\n      [messageId]=\"address2MaxLengthId\"\n    >\n      Address may not be over forty characters\n    </bb-input-validation-message-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--md\">\n    <div class=\"bb-form-field bb-form-field--sm\">\n      <bb-input-text-ui\n        formControlName=\"city\"\n        data-role=\"city-input\"\n        label=\"City\"\n        i18n-label=\"label|Label for city field@@billpay-manual-payee-form.city-label\"\n        [aria-describedby]=\"[cityRequiredId, cityMaxlengthId].join(' ')\"\n      >\n      </bb-input-text-ui>\n    </div>\n    <bb-input-validation-message-ui\n      role=\"alert\"\n      [showErrors]=\"hasError('city', 'required')\"\n      i18n=\"error text|City is required error text@@billpay-manual-payee-form.error.city-required\"\n      data-role=\"city-error-required\"\n      [messageId]=\"cityRequiredId\"\n    >\n      Please enter a City\n    </bb-input-validation-message-ui>\n    <bb-input-validation-message-ui\n      role=\"alert\"\n      [showErrors]=\"hasError('city', 'maxlength')\"\n      i18n=\"error text|City max length error text@@billpay-manual-payee-form.error.city-maxlength\"\n      data-role=\"city-error-maxlength\"\n      [messageId]=\"cityMaxlengthId\"\n    >\n      City may not be over thirty-two characters\n    </bb-input-validation-message-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--md\">\n    <div class=\"bb-form-field bb-form-field--xs\">\n      <bb-dropdown-single-select-ui\n        label=\"State\"\n        i18n-label=\"label|Label for state field@@billpay-manual-payee-form.state-label\"\n        [options]=\"states\"\n        formControlName=\"state\"\n        data-role=\"state-select\"\n        [aria-describedby]=\"stateLengthId\"\n      >\n      </bb-dropdown-single-select-ui>\n    </div>\n    <bb-input-validation-message-ui\n      role=\"alert\"\n      [showErrors]=\"hasError('state', 'required')\"\n      i18n=\"error text|State is required error text@@billpay-manual-payee-form.error.state-required\"\n      data-role=\"state-error-required\"\n      [messageId]=\"stateLengthId\"\n    >\n      Please enter a State\n    </bb-input-validation-message-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--md\">\n    <div class=\"bb-form-field bb-form-field--xs\">\n      <bb-input-text-ui\n        formControlName=\"postalCode\"\n        data-role=\"postal-code-input\"\n        label=\"ZIP Code\"\n        i18n-label=\"label|Label for ZIP code field@@billpay-manual-payee-form.zip-label\"\n        [aria-describedby]=\"[postalCodeRequiredId, postalCodePatternId].join(' ')\"\n      >\n      </bb-input-text-ui>\n    </div>\n    <bb-input-validation-message-ui\n      role=\"alert\"\n      [showErrors]=\"hasError('postalCode', 'required')\"\n      i18n=\"error text|Zip code is required error text@@billpay-manual-payee-form.error.zip-code-required\"\n      data-role=\"postal-code-error-required\"\n      [messageId]=\"postalCodeRequiredId\"\n    >\n      Please enter a Zip Code\n    </bb-input-validation-message-ui>\n    <bb-input-validation-message-ui\n      role=\"alert\"\n      [showErrors]=\"hasError('postalCode', 'pattern')\"\n      i18n=\"error text|Zip code format error text@@billpay-manual-payee-form.error.zip-code-format\"\n      data-role=\"postal-code-error-pattern\"\n      [messageId]=\"postalCodePatternId\"\n    >\n      ZIP code should be 5 or 9 digits long\n    </bb-input-validation-message-ui>\n  </div>\n</ng-container>\n", components: [{ type: i2$3.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3$3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4$2.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }], directives: [{ type: i1$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayAddressFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-address-form',
                    templateUrl: './billpay-address-form.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$1.ControlContainer }]; } });

class BillpayPayeeNavigateModalComponent {
    constructor() {
        this.resolve = new EventEmitter();
    }
    cancelModal() {
        this.resolve.emit(false);
    }
    confirmModal() {
        this.resolve.emit(true);
    }
}
/** @nocollapse */ BillpayPayeeNavigateModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPayeeNavigateModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BillpayPayeeNavigateModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BillpayPayeeNavigateModalComponent, selector: "bb-billpay-payee-navigate-modal", outputs: { resolve: "resolve" }, ngImport: i0, template: "<bb-modal-ui [isOpen]=\"true\" (cancel)=\"cancelModal()\" data-role=\"payee-navigate-modal\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <bb-header-ui\n        data-role=\"payee-navigate-modal-header\"\n        headingType=\"h2\"\n        i18n-heading=\"Payee navigate modal header@@billpay.payee-navigate-modal.header\"\n        heading=\"Payee cannot be deleted\"\n      >\n      </bb-header-ui>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <span i18n=\"Payee navigate modal body@@billpay.payee-navigate-modal.body\" data-role=\"payee-navigate-modal-body\"\n        >This payee has upcoming payments which must be canceled before deleting.</span\n      >\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <button\n        bbButton\n        color=\"secondary\"\n        i18n=\"cancel modal button|Cancel navigate button@@billpay.payee-navigate-modal.cancel-button\"\n        (click)=\"cancelModal()\"\n        data-role=\"payee-navigate-modal-cancel-button\"\n      >\n        Keep payee\n      </button>\n      <button\n        bbButton\n        color=\"primary\"\n        i18n=\"confirm modal button|Confirm navigate button@@billpay.payee-navigate-modal.confirm-button\"\n        (click)=\"confirmModal()\"\n        data-role=\"payee-navigate-modal-confirm-button\"\n      >\n        View scheduled payments\n      </button>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1$2.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$2.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2$2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1$2.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1$2.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1$2.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1$2.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1$2.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i3$1.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPayeeNavigateModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payee-navigate-modal',
                    templateUrl: './billpay-payee-navigate-modal.component.html',
                }]
        }], propDecorators: { resolve: [{
                type: Output
            }] } });

class BillpayPayeeDeleteModalComponent {
    constructor() {
        this.resolve = new EventEmitter();
    }
    cancelModal() {
        this.resolve.emit(false);
    }
    confirmModal() {
        this.resolve.emit(true);
    }
}
/** @nocollapse */ BillpayPayeeDeleteModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPayeeDeleteModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BillpayPayeeDeleteModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BillpayPayeeDeleteModalComponent, selector: "bb-billpay-payee-delete-modal", outputs: { resolve: "resolve" }, ngImport: i0, template: "<bb-modal-ui [isOpen]=\"true\" (cancel)=\"cancelModal()\" data-role=\"payee-delete-modal\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <bb-header-ui\n        data-role=\"payee-delete-modal-header\"\n        headingType=\"h2\"\n        i18n-heading=\"Payee delete modal header@@billpay.payee-delete-modal.header\"\n        heading=\"Delete payee?\"\n      >\n      </bb-header-ui>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <span i18n=\"Payee delete modal body@@billpay.payee-delete-modal.body\" data-role=\"payee-delete-modal-body\"\n        >Are you sure you want to delete this payee? This action cannot be undone.</span\n      >\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <button\n        bbButton\n        color=\"secondary\"\n        i18n=\"cancel modal button|Cancel payee delete button@@billpay.payee-delete-modal.cancel-button\"\n        (click)=\"cancelModal()\"\n        data-role=\"payee-delete-modal-cancel-button\"\n      >\n        Keep payee\n      </button>\n      <button\n        bbButton\n        color=\"danger\"\n        i18n=\"confirm modal button|Confirm payee delete button@@billpay.payee-delete-modal.confirm-button\"\n        (click)=\"confirmModal()\"\n        data-role=\"payee-delete-modal-confirm-button\"\n      >\n        Delete payee\n      </button>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1$2.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$2.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2$2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1$2.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1$2.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1$2.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1$2.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1$2.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i3$1.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPayeeDeleteModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-payee-delete-modal',
                    templateUrl: './billpay-payee-delete-modal.component.html',
                }]
        }], propDecorators: { resolve: [{
                type: Output
            }] } });

const defaultDeleteParams = {
    cancelPendingPayments: false,
};
class BillpayPayeeDataService {
    /** @internal */
    constructor(data, payverisData, ebillsData, payeesSummaryData) {
        this.data = data;
        this.payverisData = payverisData;
        this.ebillsData = ebillsData;
        this.payeesSummaryData = payeesSummaryData;
        this.selectedDeletePayeeSource = new BehaviorSubject(undefined);
        this.selectedDeleteEbillsSource = new BehaviorSubject(undefined);
        this.reload = new BehaviorSubject(undefined);
        this.buttonsDisabled = false;
        this.currentPayeesLoadingState = '';
        this.iterablePayeeSummaryList = [];
    }
    deletePayee(id, electronic) {
        return electronic
            ? this.data.deleteElectronicPayeeById(Object.assign(Object.assign({}, defaultDeleteParams), { id }))
            : this.data.deletePayeeById(Object.assign(Object.assign({}, defaultDeleteParams), { id }));
    }
    resolveErrors(id) {
        const resolveErrorsRequest = {
            payeeID: id,
        };
        return this.payverisData.postBillPayPayverisResolveEbillErrors({
            billPayPayverisResolveEbillErrorsPostRequestBody: resolveErrorsRequest,
        });
    }
    deleteEbills(id) {
        return this.ebillsData.deleteBillPayEbills({ id });
    }
    getPayees() {
        return this.reload.asObservable().pipe(tap(() => (this.currentPayeesLoadingState = 'loading')), switchMap(() => this.payeesSummaryData.getBillPayPayeesSummary().pipe(map(groupByEbills))), tap(data => sortByPayeeGroup(data)), tap(data => this.createIterablePayeeSummaryList(data)), tap(() => {
            this.currentPayeesLoadingState = '';
        }), catchError(() => {
            this.currentPayeesLoadingState = 'error';
            return of(undefined);
        }));
    }
    createIterablePayeeSummaryList(list) {
        this.iterablePayeeSummaryList = [];
        for (let i = 0; i < list.ebillsEnabled.length; i++) {
            const summary = list.ebillsEnabled[i];
            this.iterablePayeeSummaryList.push(summary);
        }
        for (let j = 0; j < list.ebillsNotEnabled.length; j++) {
            const summary = list.ebillsNotEnabled[j];
            this.iterablePayeeSummaryList.push(summary);
        }
    }
    reloadPayees() {
        this.reload.next(undefined);
    }
    disableWidgetButtons() {
        this.buttonsDisabled = true;
    }
    enableWidgetButtons() {
        this.buttonsDisabled = false;
    }
    updateSelectedDeletePayee(payee) {
        this.selectedDeletePayeeSource.next(payee);
    }
    updateSelectedDeleteEbills(payee) {
        this.selectedDeleteEbillsSource.next(payee);
    }
    get selectedDeletePayee() {
        return this.selectedDeletePayeeSource.asObservable();
    }
    get selectedDeleteEbills() {
        return this.selectedDeleteEbillsSource.asObservable();
    }
    get payeesLoadingState() {
        return this.currentPayeesLoadingState;
    }
    get areButtonsDisabled() {
        return this.buttonsDisabled;
    }
    get numberOfPayees() {
        return this.iterablePayeeSummaryList.length;
    }
    payeesLoaded() {
        const _this = this;
        return new Promise(function (resolve) {
            (function waitUntilLoaded() {
                if (_this.currentPayeesLoadingState === '')
                    return resolve(true);
                setTimeout(waitUntilLoaded, 100);
            })();
        });
    }
    findPayeeSummaryById(payeeId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (yield this.payeesLoaded()) {
                return this.iterablePayeeSummaryList.find(summary => summary.id === payeeId);
            }
            return;
        });
    }
}
/** @nocollapse */ BillpayPayeeDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPayeeDataService, deps: [{ token: i1.BillPayPayeesService }, { token: i1.BillPayPayverisService }, { token: i1.BillPayEbillsService }, { token: i1.BillPayPayeesSummaryService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ BillpayPayeeDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPayeeDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPayeeDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.BillPayPayeesService }, { type: i1.BillPayPayverisService }, { type: i1.BillPayEbillsService }, { type: i1.BillPayPayeesSummaryService }]; } });
function groupByEbills(data) {
    const payeeSummaries = data.payeeSummaries;
    return payeeSummaries.reduce((grouped, payeeSummary) => {
        grouped[payeeSummary.ebill && payeeSummary.ebill.enabled ? 'ebillsEnabled' : 'ebillsNotEnabled'].push(payeeSummary);
        return grouped;
    }, {
        ebillsEnabled: [],
        ebillsNotEnabled: [],
    });
}
function sortByPayeeGroup(data) {
    sortPayeeSummaries(data.ebillsEnabled);
    sortPayeeSummaries(data.ebillsNotEnabled);
}
function sortPayeeSummaries(summaries) {
    summaries.sort((a, b) => getPayeeDisplayName(a.name, a.nickName).toLowerCase() > getPayeeDisplayName(b.name, b.nickName).toLowerCase()
        ? 1
        : -1);
}
function getPayeeDisplayName(payeeName, payeeNickName) {
    return payeeNickName || payeeName;
}

class BillpayEbillsDeleteModalComponent {
    /** @internal */
    constructor(payeeListWidgetService) {
        this.payeeListWidgetService = payeeListWidgetService;
        this.resolve = new EventEmitter();
    }
    get selectedDeleteEbills$() {
        return this.payeeListWidgetService.selectedDeleteEbills;
    }
    cancelModal() {
        this.resolve.emit(false);
    }
    confirmModal() {
        this.resolve.emit(true);
    }
}
/** @nocollapse */ BillpayEbillsDeleteModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayEbillsDeleteModalComponent, deps: [{ token: BillpayPayeeDataService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BillpayEbillsDeleteModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BillpayEbillsDeleteModalComponent, selector: "bb-billpay-ebills-delete-modal", outputs: { resolve: "resolve" }, ngImport: i0, template: "<ng-container *ngIf=\"selectedDeleteEbills$ | async as payee\">\n  <bb-modal-ui [isOpen]=\"true\" (cancel)=\"cancelModal()\" data-role=\"ebills-delete-modal\">\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          data-role=\"ebills-delete-modal-header\"\n          headingType=\"h2\"\n          i18n-heading=\"ebills delete modal header@@billpay.ebills-delete-modal.header\"\n          heading=\"Stop receiving eBills?\"\n        >\n        </bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span i18n=\"ebills delete modal body@@billpay.ebills-delete-modal.body\" data-role=\"ebills-delete-modal-body\"\n          >Are you sure you want to stop receiving eBills for the payee {{ payee?.nickName || payee?.name }}?</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <button\n          bbButton\n          color=\"secondary\"\n          i18n=\"cancel modal button|Cancel ebills delete button@@billpay.ebills-delete-modal.cancel-button\"\n          (click)=\"cancelModal()\"\n          data-role=\"ebills-delete-modal-cancel-button\"\n        >\n          Keep eBills\n        </button>\n        <button\n          bbButton\n          color=\"danger\"\n          i18n=\"confirm modal button|Confirm ebills delete button@@billpay.ebills-delete-modal.confirm-button\"\n          (click)=\"confirmModal()\"\n          data-role=\"ebills-delete-modal-confirm-button\"\n        >\n          Stop receiving eBills\n        </button>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n</ng-container>\n", components: [{ type: i1$2.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$2.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2$2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1$2.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1$2.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i4$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$2.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1$2.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1$2.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i3$1.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i4$1.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayEbillsDeleteModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-ebills-delete-modal',
                    templateUrl: './billpay-ebills-delete-modal.component.html',
                }]
        }], ctorParameters: function () { return [{ type: BillpayPayeeDataService }]; }, propDecorators: { resolve: [{
                type: Output
            }] } });

const uiModules = [
    ButtonModule,
    LoadingIndicatorModule,
    EmptyStateModule,
    NotificationModule,
    HeaderModule,
    AmountModule,
    PaymentCardNumberModule,
    InputValidationMessageModule,
    DropdownSingleSelectModule,
    ModalModule,
    InputTextModule,
    KeyboardClickModule,
];
const services = [
    BillpayEnrolmentService,
    BillpayEnrolmentGuard,
    BillpayPaymentParserService,
    BillpayPaymentScheduleService,
    BillpayUtilityService,
    BillpayPaymentDataService,
];
const components = [
    BillpayEnrolmentComponent,
    BillpayPaymentReviewCardComponent,
    BillpayAddressFormComponent,
    BillpayPayeeNavigateModalComponent,
    BillpayPayeeDeleteModalComponent,
    BillpayEbillsDeleteModalComponent,
];
class BillpayJourneysCommonModule {
}
/** @nocollapse */ BillpayJourneysCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayJourneysCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ BillpayJourneysCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayJourneysCommonModule, declarations: [BillpayEnrolmentComponent,
        BillpayPaymentReviewCardComponent,
        BillpayAddressFormComponent,
        BillpayPayeeNavigateModalComponent,
        BillpayPayeeDeleteModalComponent,
        BillpayEbillsDeleteModalComponent], imports: [CommonModule, RouterModule, ReactiveFormsModule, BackbaseCoreModule, ButtonModule,
        LoadingIndicatorModule,
        EmptyStateModule,
        NotificationModule,
        HeaderModule,
        AmountModule,
        PaymentCardNumberModule,
        InputValidationMessageModule,
        DropdownSingleSelectModule,
        ModalModule,
        InputTextModule,
        KeyboardClickModule], exports: [BillpayEnrolmentComponent,
        BillpayPaymentReviewCardComponent,
        BillpayAddressFormComponent,
        BillpayPayeeNavigateModalComponent,
        BillpayPayeeDeleteModalComponent,
        BillpayEbillsDeleteModalComponent, ButtonModule,
        LoadingIndicatorModule,
        EmptyStateModule,
        NotificationModule,
        HeaderModule,
        AmountModule,
        PaymentCardNumberModule,
        InputValidationMessageModule,
        DropdownSingleSelectModule,
        ModalModule,
        InputTextModule,
        KeyboardClickModule] });
/** @nocollapse */ BillpayJourneysCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayJourneysCommonModule, providers: [...services], imports: [[CommonModule, RouterModule, ReactiveFormsModule, BackbaseCoreModule, ...uiModules], ButtonModule,
        LoadingIndicatorModule,
        EmptyStateModule,
        NotificationModule,
        HeaderModule,
        AmountModule,
        PaymentCardNumberModule,
        InputValidationMessageModule,
        DropdownSingleSelectModule,
        ModalModule,
        InputTextModule,
        KeyboardClickModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayJourneysCommonModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components],
                    imports: [CommonModule, RouterModule, ReactiveFormsModule, BackbaseCoreModule, ...uiModules],
                    providers: [...services],
                    exports: [...components, ...uiModules],
                }]
        }] });

class BillpayPayeeSummaryItemBaseComponent {
    /** @internal */
    constructor(dataService, dropdownButtonConfig) {
        this.dataService = dataService;
        this.dropdownButtonConfig = dropdownButtonConfig;
        this.RECURRING_PAYMENT = RECURRING_PAYMENT;
        this.ONE_OFF_PAYMENT = ONE_OFF_PAYMENT;
        this.ebillRetrieveErrorId = BillpayUtilityService.generateId();
        this.noEbillsDueId = BillpayUtilityService.generateId();
        this.ebillsAvailableId = BillpayUtilityService.generateId();
        this.recurringPaymentScheduledIdId = BillpayUtilityService.generateId();
        this.ebillPaymentScheduledId = BillpayUtilityService.generateId();
        this.ebillDueOnId = BillpayUtilityService.generateId();
        this.ebillSupportErrorId = BillpayUtilityService.generateId();
        this.ebillUserActionErrorId = BillpayUtilityService.generateId();
        this.ebillUnknownErrorId = BillpayUtilityService.generateId();
        this.payeeAmountId = BillpayUtilityService.generateId();
        this.destroy$ = new Subject();
        dropdownButtonConfig.placement = 'bottom-right';
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    handleStopEbills($event) {
        $event.preventDefault();
        this.dataService.updateSelectedDeleteEbills(this.payeeSummary);
    }
    handleDeletePayee($event) {
        $event.preventDefault();
        const payee = (this.payeeSummary && !this.payeeSummary.nextPayment && this.payeeSummary) || undefined;
        this.dataService.updateSelectedDeletePayee(payee);
    }
    get payeeName() {
        return (this.payeeSummary && (this.payeeSummary.nickName || this.payeeSummary.name)) || '';
    }
    get payeeId() {
        return (this.payeeSummary && this.payeeSummary.id) || '';
    }
    get areButtonsDisabled() {
        return this.dataService.areButtonsDisabled;
    }
    get areRecurringPaymentsScheduled() {
        const payeeSummary = this.payeeSummary;
        return !!(payeeSummary && payeeSummary.hasRecurringPayments);
    }
    get areEbillsInErrorState() {
        return this.isEbillsStatusInError();
    }
    get isEbillsErrorUnknown() {
        return this.ebillErrorEquals('ERROR');
    }
    get isEbillsErrorUpdateCredentials() {
        return this.ebillErrorEquals('UPDATE_CREDENTIALS');
    }
    get isEbillsErrorNotSupported() {
        return this.ebillErrorEquals('NOT_SUPPORTED');
    }
    get isEbillsErrorUserAction() {
        return this.ebillErrorEquals('USER_ACTION');
    }
    handleResolveEbillsErrors() {
        if (this.payeeSummary) {
            this.dataService
                .resolveErrors(this.payeeSummary.id)
                .pipe(takeUntil(this.destroy$))
                .subscribe(response => {
                if (this.isEbillEnrolmentFlowRequired(response)) {
                    this.handleGetEbills();
                }
                else {
                    this.dataService.reloadPayees();
                }
            });
        }
    }
    isEbillEnrolmentFlowRequired(ebillEnrolmentResponse) {
        return ((ebillEnrolmentResponse.accounts && ebillEnrolmentResponse.accounts.length > 0) ||
            (ebillEnrolmentResponse.billers && ebillEnrolmentResponse.billers.length > 0) ||
            ebillEnrolmentResponse.authentication ||
            ebillEnrolmentResponse.callBackTime);
    }
    get areEbillsAvailable() {
        return this.isEbillCapable() && !this.isEbillEnabled();
    }
    get areEbillsDue() {
        return this.isEbillEnabled() && this.hasLatestEbill() && !this.latestEbillPaid();
    }
    get isLatestEbillPaid() {
        return this.latestEbillPaid();
    }
    get areEbillsEnabledButNotDue() {
        return this.isEbillEnabled() && !this.hasLatestEbill() && !this.isEbillsStatusInError();
    }
    get ebillLink() {
        return this.getLatestEbillURL();
    }
    get showStopEbills() {
        return this.isEbillEnabled();
    }
    get payeeType() {
        return this.payeeSummary.electronic ? 'electronic' : 'manual';
    }
    isEbillsStatusInError() {
        var _a, _b;
        return !!(((_b = (_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.ebill) === null || _b === void 0 ? void 0 : _b.status) !== 'ACTIVE');
    }
    ebillErrorEquals(error) {
        var _a;
        const ebillSummary = (_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.ebill;
        return !!(ebillSummary && ebillSummary.status === error);
    }
    hasLatestEbill() {
        var _a, _b;
        return !!((_b = (_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.ebill) === null || _b === void 0 ? void 0 : _b.latestBill);
    }
    latestEbillPaid() {
        var _a, _b, _c;
        return !!(((_c = (_b = (_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.ebill) === null || _b === void 0 ? void 0 : _b.latestBill) === null || _c === void 0 ? void 0 : _c.status) === 'PAID');
    }
    getLatestEbillURL() {
        var _a, _b, _c;
        return ((_c = (_b = (_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.ebill) === null || _b === void 0 ? void 0 : _b.latestBill) === null || _c === void 0 ? void 0 : _c.url) || '';
    }
    isEbillCapable() {
        var _a, _b;
        return !!((_b = (_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.ebill) === null || _b === void 0 ? void 0 : _b.capable);
    }
    isEbillEnabled() {
        var _a, _b;
        return !!((_b = (_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.ebill) === null || _b === void 0 ? void 0 : _b.enabled);
    }
}
/** @nocollapse */ BillpayPayeeSummaryItemBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPayeeSummaryItemBaseComponent, deps: [{ token: BillpayPayeeDataService }, { token: i2$4.NgbDropdownConfig }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BillpayPayeeSummaryItemBaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BillpayPayeeSummaryItemBaseComponent, selector: "ng-component", inputs: { payeeSummary: "payeeSummary" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPayeeSummaryItemBaseComponent, decorators: [{
            type: Component,
            args: [{ template: '' }]
        }], ctorParameters: function () { return [{ type: BillpayPayeeDataService }, { type: i2$4.NgbDropdownConfig }]; }, propDecorators: { payeeSummary: [{
                type: Input
            }] } });

class BillpayDiscardChangesModalService {
    /** @internal */
    constructor(cdRef) {
        this.cdRef = cdRef;
        this.isDiscardModalOpen = false;
        this.modalResolve$ = new Subject();
    }
    openModal() {
        this.isDiscardModalOpen = true;
        this.cdRef.detach();
        this.cdRef.detectChanges();
        return this.modalResolve$.asObservable().pipe(tap(() => this.cdRef.reattach()));
    }
    onModalResolve(resolvedWith) {
        this.isDiscardModalOpen = false;
        this.cdRef.detectChanges();
        this.modalResolve$.next(resolvedWith);
    }
}
/** @nocollapse */ BillpayDiscardChangesModalService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayDiscardChangesModalService, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ BillpayDiscardChangesModalService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayDiscardChangesModalService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayDiscardChangesModalService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; } });

class BillpayNotificationRoutingService {
    constructor() {
        this._upcommingPaymentsSubject = new Subject();
        this.upcommingPaymentsSubject$ = this._upcommingPaymentsSubject.asObservable();
        this._managePaymentSubject = new Subject();
        this.managePaymentSubject$ = this._managePaymentSubject.asObservable();
        this._managePayeesSubject = new Subject();
        this.managePayeesSubject$ = this._managePayeesSubject.asObservable();
    }
    navigateToPayments() {
        this._upcommingPaymentsSubject.next();
    }
    navigateToNewPayment(payeeId) {
        this._managePaymentSubject.next(payeeId);
    }
    navigateToPayees() {
        this._managePayeesSubject.next();
    }
}
/** @nocollapse */ BillpayNotificationRoutingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayNotificationRoutingService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ BillpayNotificationRoutingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayNotificationRoutingService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayNotificationRoutingService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BillpayBaseDeactivateGuardService, BillpayDiscardChangesModalService, BillpayEnrolmentComponent, BillpayEnrolmentGuard, BillpayEnrolmentService, BillpayJourneysCommonModule, BillpayNotificationRoutingService, BillpayPayeeDataService, BillpayPayeeSummaryItemBaseComponent, BillpayPaymentDataService, BillpayPaymentParserService, BillpayPaymentReviewCardComponent, BillpayPaymentScheduleService, BillpayUtilityService, Direction, ENROLMENT_PATH, EndTypes, FrequencyKeys, LoadingState, ONE_OFF_PAYMENT, PaymentServicesTypes, RECURRING_PAYMENT, accountNumberFullFormat, accountNumberMaskedFormat, formControlOptions, frequencies, recurringFrequencies, states, BillpayAddressFormComponent as ӨBillpayAddressFormComponent, BillpayEbillsDeleteModalComponent as ӨBillpayEbillsDeleteModalComponent, BillpayPayeeDeleteModalComponent as ӨBillpayPayeeDeleteModalComponent, BillpayPayeeNavigateModalComponent as ӨBillpayPayeeNavigateModalComponent, BillpayPaymentReviewCardComponent as ӨBillpayPaymentReviewCardComponent };
//# sourceMappingURL=backbase-billpay-journeys-common.js.map
