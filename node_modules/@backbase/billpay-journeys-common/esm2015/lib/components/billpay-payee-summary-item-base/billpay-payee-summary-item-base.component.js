import { Component, Input } from '@angular/core';
import { BillpayUtilityService as Utility } from '../../services/billpay-utility.service';
import { NgbDropdownConfig } from '@ng-bootstrap/ng-bootstrap';
import { ONE_OFF_PAYMENT, RECURRING_PAYMENT } from '../../constants';
import { BillpayPayeeDataService } from '../../services/billpay-payee-data.service';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../services/billpay-payee-data.service";
import * as i2 from "@ng-bootstrap/ng-bootstrap";
export class BillpayPayeeSummaryItemBaseComponent {
    /** @internal */
    constructor(dataService, dropdownButtonConfig) {
        this.dataService = dataService;
        this.dropdownButtonConfig = dropdownButtonConfig;
        this.RECURRING_PAYMENT = RECURRING_PAYMENT;
        this.ONE_OFF_PAYMENT = ONE_OFF_PAYMENT;
        this.ebillRetrieveErrorId = Utility.generateId();
        this.noEbillsDueId = Utility.generateId();
        this.ebillsAvailableId = Utility.generateId();
        this.recurringPaymentScheduledIdId = Utility.generateId();
        this.ebillPaymentScheduledId = Utility.generateId();
        this.ebillDueOnId = Utility.generateId();
        this.ebillSupportErrorId = Utility.generateId();
        this.ebillUserActionErrorId = Utility.generateId();
        this.ebillUnknownErrorId = Utility.generateId();
        this.payeeAmountId = Utility.generateId();
        this.destroy$ = new Subject();
        dropdownButtonConfig.placement = 'bottom-right';
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    handleStopEbills($event) {
        $event.preventDefault();
        this.dataService.updateSelectedDeleteEbills(this.payeeSummary);
    }
    handleDeletePayee($event) {
        $event.preventDefault();
        const payee = (this.payeeSummary && !this.payeeSummary.nextPayment && this.payeeSummary) || undefined;
        this.dataService.updateSelectedDeletePayee(payee);
    }
    get payeeName() {
        return (this.payeeSummary && (this.payeeSummary.nickName || this.payeeSummary.name)) || '';
    }
    get payeeId() {
        return (this.payeeSummary && this.payeeSummary.id) || '';
    }
    get areButtonsDisabled() {
        return this.dataService.areButtonsDisabled;
    }
    get areRecurringPaymentsScheduled() {
        const payeeSummary = this.payeeSummary;
        return !!(payeeSummary && payeeSummary.hasRecurringPayments);
    }
    get areEbillsInErrorState() {
        return this.isEbillsStatusInError();
    }
    get isEbillsErrorUnknown() {
        return this.ebillErrorEquals('ERROR');
    }
    get isEbillsErrorUpdateCredentials() {
        return this.ebillErrorEquals('UPDATE_CREDENTIALS');
    }
    get isEbillsErrorNotSupported() {
        return this.ebillErrorEquals('NOT_SUPPORTED');
    }
    get isEbillsErrorUserAction() {
        return this.ebillErrorEquals('USER_ACTION');
    }
    handleResolveEbillsErrors() {
        if (this.payeeSummary) {
            this.dataService
                .resolveErrors(this.payeeSummary.id)
                .pipe(takeUntil(this.destroy$))
                .subscribe(response => {
                if (this.isEbillEnrolmentFlowRequired(response)) {
                    this.handleGetEbills();
                }
                else {
                    this.dataService.reloadPayees();
                }
            });
        }
    }
    isEbillEnrolmentFlowRequired(ebillEnrolmentResponse) {
        return ((ebillEnrolmentResponse.accounts && ebillEnrolmentResponse.accounts.length > 0) ||
            (ebillEnrolmentResponse.billers && ebillEnrolmentResponse.billers.length > 0) ||
            ebillEnrolmentResponse.authentication ||
            ebillEnrolmentResponse.callBackTime);
    }
    get areEbillsAvailable() {
        return this.isEbillCapable() && !this.isEbillEnabled();
    }
    get areEbillsDue() {
        return this.isEbillEnabled() && this.hasLatestEbill() && !this.latestEbillPaid();
    }
    get isLatestEbillPaid() {
        return this.latestEbillPaid();
    }
    get areEbillsEnabledButNotDue() {
        return this.isEbillEnabled() && !this.hasLatestEbill() && !this.isEbillsStatusInError();
    }
    get ebillLink() {
        return this.getLatestEbillURL();
    }
    get showStopEbills() {
        return this.isEbillEnabled();
    }
    get payeeType() {
        return this.payeeSummary.electronic ? 'electronic' : 'manual';
    }
    isEbillsStatusInError() {
        var _a, _b;
        return !!(((_b = (_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.ebill) === null || _b === void 0 ? void 0 : _b.status) !== 'ACTIVE');
    }
    ebillErrorEquals(error) {
        var _a;
        const ebillSummary = (_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.ebill;
        return !!(ebillSummary && ebillSummary.status === error);
    }
    hasLatestEbill() {
        var _a, _b;
        return !!((_b = (_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.ebill) === null || _b === void 0 ? void 0 : _b.latestBill);
    }
    latestEbillPaid() {
        var _a, _b, _c;
        return !!(((_c = (_b = (_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.ebill) === null || _b === void 0 ? void 0 : _b.latestBill) === null || _c === void 0 ? void 0 : _c.status) === 'PAID');
    }
    getLatestEbillURL() {
        var _a, _b, _c;
        return ((_c = (_b = (_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.ebill) === null || _b === void 0 ? void 0 : _b.latestBill) === null || _c === void 0 ? void 0 : _c.url) || '';
    }
    isEbillCapable() {
        var _a, _b;
        return !!((_b = (_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.ebill) === null || _b === void 0 ? void 0 : _b.capable);
    }
    isEbillEnabled() {
        var _a, _b;
        return !!((_b = (_a = this.payeeSummary) === null || _a === void 0 ? void 0 : _a.ebill) === null || _b === void 0 ? void 0 : _b.enabled);
    }
}
/** @nocollapse */ BillpayPayeeSummaryItemBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPayeeSummaryItemBaseComponent, deps: [{ token: i1.BillpayPayeeDataService }, { token: i2.NgbDropdownConfig }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BillpayPayeeSummaryItemBaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BillpayPayeeSummaryItemBaseComponent, selector: "ng-component", inputs: { payeeSummary: "payeeSummary" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPayeeSummaryItemBaseComponent, decorators: [{
            type: Component,
            args: [{ template: '' }]
        }], ctorParameters: function () { return [{ type: i1.BillpayPayeeDataService }, { type: i2.NgbDropdownConfig }]; }, propDecorators: { payeeSummary: [{
                type: Input
            }] } });
//# sourceMappingURL=billpay-payee-summary-item-base.component.js.map