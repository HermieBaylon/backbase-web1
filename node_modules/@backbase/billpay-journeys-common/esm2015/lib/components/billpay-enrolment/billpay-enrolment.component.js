import { Component, ChangeDetectionStrategy, ChangeDetectorRef, ViewChild, Input, } from '@angular/core';
import { first } from 'rxjs/operators';
import { BillpayEnrolmentService } from '../../services/billpay-enrolment.service';
import { NotificationService } from '@backbase/ui-ang/notification';
import * as i0 from "@angular/core";
import * as i1 from "../../services/billpay-enrolment.service";
import * as i2 from "@backbase/ui-ang/notification";
import * as i3 from "@backbase/ui-ang/loading-indicator";
import * as i4 from "@backbase/ui-ang/empty-state";
import * as i5 from "@angular/common";
import * as i6 from "@backbase/ui-ang/button";
export class BillpayEnrolmentComponent {
    constructor(billpayEnrolmentService, cd, notificationService) {
        this.billpayEnrolmentService = billpayEnrolmentService;
        this.cd = cd;
        this.notificationService = notificationService;
        this.enrolmentFailed = false;
        this.loading = false;
        this.notificationHeaderSuccessTemplate = '';
        this.notificationHeaderErrorTemplate = '';
    }
    ngOnInit() {
        this.loading = true;
        this.billpayEnrolmentService
            .isEnrolled()
            .pipe(first())
            .subscribe(isEnrolled => {
            if (isEnrolled) {
                this.loading = false;
                this.redirectUser();
            }
            else {
                this.enrolUser();
            }
        }, () => {
            this.onEnrolFail();
            this.cd.markForCheck();
        });
    }
    enrolUser() {
        this.loading = true;
        this.enrolmentFailed = false;
        this.billpayEnrolmentService
            .enrolUser()
            .pipe(first())
            .subscribe(isEnrolled => {
            if (isEnrolled) {
                this.onEnrolSuccess();
            }
            else {
                this.onEnrolFail();
            }
            this.cd.markForCheck();
        });
    }
    onEnrolSuccess() {
        this.loading = false;
        this.notificationService.showNotification({
            header: this.notificationHeaderSuccessTemplate,
            message: '',
            modifier: 'success',
            ttl: this.notificationDismissTime,
        });
        this.redirectUser();
    }
    onEnrolFail() {
        this.loading = false;
        this.enrolmentFailed = true;
        this.notificationService.showNotification({
            header: this.notificationHeaderErrorTemplate,
            message: '',
            modifier: 'error',
            ttl: this.notificationDismissTime,
        });
    }
    redirectUser() {
        this.billpayEnrolmentService.previousRoute.pipe(first()).subscribe(route => {
            this.billpayEnrolmentService.redirectUser(route || '');
        });
    }
}
/** @nocollapse */ BillpayEnrolmentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayEnrolmentComponent, deps: [{ token: i1.BillpayEnrolmentService }, { token: i0.ChangeDetectorRef }, { token: i2.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BillpayEnrolmentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BillpayEnrolmentComponent, selector: "bb-billpay-enrolment", inputs: { notificationDismissTime: "notificationDismissTime" }, viewQueries: [{ propertyName: "notificationHeaderSuccessTemplate", first: true, predicate: ["successHeader"], descendants: true }, { propertyName: "notificationHeaderErrorTemplate", first: true, predicate: ["errorHeader"], descendants: true }], ngImport: i0, template: "<div class=\"card card-lg\">\n  <div class=\"card-body\">\n    <div *ngIf=\"loading\">\n      <bb-loading-indicator-ui\n        i18n-text=\"\n          Enrolling in the bill pay service...|Enrolment Widget enrolling text@@bb-billpay-enrolment.enrolling.text\"\n        text=\"Enrolling in the bill pay service...\"\n        loaderSize=\"lg\"\n      ></bb-loading-indicator-ui>\n    </div>\n\n    <div *ngIf=\"enrolmentFailed\">\n      <div class=\"bb-state-container\">\n        <bb-empty-state-ui\n          data-role=\"error-state\"\n          iconSize=\"xxl\"\n          iconColor=\"danger\"\n          iconModifier=\"error-outline\"\n          subtitle=\"Try enrolling again or contact support\"\n          i18n-subtitle=\"\n            Try enrolling again or contact support|Enrolment Widget failure\n            subtitle@@bb-billpay-enrolment.failure.subtitle\"\n          title=\"Enrolment failed\"\n          i18n-title=\"Enrolment failed|Enrolment Widget failure title@@bb-billpay-enrolment.failure.title\"\n        >\n        </bb-empty-state-ui>\n        <div class=\"bb-state-container__footer\">\n          <button\n            bbButton\n            data-role=\"button-enrolment-retry\"\n            (click)=\"enrolUser()\"\n            i18n=\"Try enrolling again|Enrolment Widget Try enrolling again button@@bb-billpay-enrolment.button.tryAgain\"\n          >\n            Try enrolling again\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #successHeader>\n  <span i18n=\"Enrolment successful|Enrolment successful message@@b-billpay-enrolment.message.successful\"\n    >Enrolment successful</span\n  >\n</ng-template>\n\n<ng-template #errorHeader>\n  <span i18n=\"Enrolment failed|Enrolment failed message@@b-billpay-enrolment.message.failed\">Enrolment failed</span>\n</ng-template>\n", components: [{ type: i3.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i4.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayEnrolmentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-billpay-enrolment',
                    templateUrl: './billpay-enrolment.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.BillpayEnrolmentService }, { type: i0.ChangeDetectorRef }, { type: i2.NotificationService }]; }, propDecorators: { notificationDismissTime: [{
                type: Input
            }], notificationHeaderSuccessTemplate: [{
                type: ViewChild,
                args: ['successHeader']
            }], notificationHeaderErrorTemplate: [{
                type: ViewChild,
                args: ['errorHeader']
            }] } });
//# sourceMappingURL=billpay-enrolment.component.js.map