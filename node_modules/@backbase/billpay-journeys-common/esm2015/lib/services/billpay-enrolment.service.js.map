{"version":3,"file":"billpay-enrolment.service.js","sourceRoot":"","sources":["../../../../../../libs/billpay-journeys-common/src/lib/services/billpay-enrolment.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,uBAAuB,EAAE,MAAM,4BAA4B,CAAC;AACrE,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACjD,OAAO,EAAE,eAAe,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AACvD,OAAO,EAAE,cAAc,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzD,OAAO,EAAE,cAAc,EAAE,MAAM,cAAc,CAAC;;;;AAG9C,MAAM,OAAO,uBAAuB;IAGlC,YACmB,WAAoC,EACpC,KAAqB,EACrB,MAAc;QAFd,gBAAW,GAAX,WAAW,CAAyB;QACpC,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QALjC,kBAAa,GAAG,IAAI,eAAe,CAAqB,SAAS,CAAC,CAAC;QAkClD,iBAAY,GAAG,CAAC,KAAqB,EAAE,IAAY,EAAU,EAAE;YAC9E,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,WAAW,IAAI,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE;gBACnF,IAAI,IAAI,GAAG,GAAG,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC;aAC/C;YACD,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;gBACrB,OAAO,IAAI,CAAC;aACb;YACD,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACnD,CAAC,CAAC;IApCC,CAAC;IAEJ,SAAS;QACP,OAAO,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,IAAI,CAC3D,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,CAAC,EACxC,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAC9C,CAAC;IACJ,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAChD,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EACpC,UAAU,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAC5B,CAAC;IACJ,CAAC;IAED,eAAe;QACb,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAC3C,CAAC;IAED,YAAY,CAAC,aAAsB;QACjC,IAAI,aAAa,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;YAC5D,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;SAC1C;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SAC9B;IACH,CAAC;;wIAjCU,uBAAuB;4IAAvB,uBAAuB,cADV,MAAM;4FACnB,uBAAuB;kBADnC,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BillPayEnrolmentService } from '@backbase/data-ang/billpay';\nimport { catchError, map } from 'rxjs/operators';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ENROLMENT_PATH } from '../constants';\n\n@Injectable({ providedIn: 'root' })\nexport class BillpayEnrolmentService {\n  previousRoute = new BehaviorSubject<string | undefined>(undefined);\n\n  constructor(\n    private readonly dataService: BillPayEnrolmentService,\n    private readonly route: ActivatedRoute,\n    private readonly router: Router,\n  ) {}\n\n  enrolUser(): Observable<boolean> {\n    return this.dataService.postBillPayEnrolment('response').pipe(\n      map(response => response.status === 204),\n      catchError(error => of(error.status === 204)),\n    );\n  }\n\n  isEnrolled(): Observable<boolean> {\n    return this.dataService.getBillPayEnrolment().pipe(\n      map(body => body.enrolment.enrolled),\n      catchError(() => of(false)),\n    );\n  }\n\n  getCurrentRoute(): string | undefined {\n    return this.getRoutePath(this.route, '');\n  }\n\n  redirectUser(previousRoute?: string) {\n    if (previousRoute && !previousRoute.includes(ENROLMENT_PATH)) {\n      this.router.navigateByUrl(previousRoute);\n    } else {\n      this.router.navigate(['./']);\n    }\n  }\n\n  private readonly getRoutePath = (route: ActivatedRoute, path: string): string => {\n    if (route.snapshot && route.snapshot.routeConfig && route.snapshot.routeConfig.path) {\n      path += '/' + route.snapshot.routeConfig.path;\n    }\n    if (!route.firstChild) {\n      return path;\n    }\n    return this.getRoutePath(route.firstChild, path);\n  };\n}\n"]}