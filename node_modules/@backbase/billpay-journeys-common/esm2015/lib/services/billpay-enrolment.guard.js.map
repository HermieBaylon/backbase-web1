{"version":3,"file":"billpay-enrolment.guard.js","sourceRoot":"","sources":["../../../../../../libs/billpay-journeys-common/src/lib/services/billpay-enrolment.guard.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAA4D,MAAM,EAAE,MAAM,iBAAiB,CAAC;AAEnG,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,cAAc,EAAE,MAAM,cAAc,CAAC;AAC9C,OAAO,EAAE,uBAAuB,EAAE,MAAM,6BAA6B,CAAC;;;;AAGtE,MAAM,OAAO,qBAAqB;IAChC,YAA6B,MAAc,EAAmB,gBAAyC;QAA1E,WAAM,GAAN,MAAM,CAAQ;QAAmB,qBAAgB,GAAhB,gBAAgB,CAAyB;IAAG,CAAC;IAE3G,WAAW,CACT,KAA6B,EAC7B,KAA0B;QAE1B,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAC,IAAI,CAC5C,GAAG,CAAC,CAAC,QAAiB,EAAE,EAAE;YACxB,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE,CAAC;YAE7D,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,QAAQ,CAAC,cAAc,CAAC,CAAA,EAAE;gBACxD,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACpD,MAAM,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,WAAC,OAAA,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,WAAW,0CAAE,IAAI,CAAA,EAAA,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;gBAC5G,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,YAAY,EAAE,cAAc,CAAC,CAAC,CAAC;gBACxD,OAAO,KAAK,CAAC;aACd;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;;sIApBU,qBAAqB;0IAArB,qBAAqB,cADR,MAAM;4FACnB,qBAAqB;kBADjC,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ENROLMENT_PATH } from '../constants';\nimport { BillpayEnrolmentService } from './billpay-enrolment.service';\n\n@Injectable({ providedIn: 'root' })\nexport class BillpayEnrolmentGuard implements CanActivate {\n  constructor(private readonly router: Router, private readonly enrolmentService: BillpayEnrolmentService) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot,\n  ): Observable<boolean> | Promise<boolean> | boolean {\n    return this.enrolmentService.isEnrolled().pipe(\n      map((enrolled: boolean) => {\n        const currentRoute = this.enrolmentService.getCurrentRoute();\n\n        if (!enrolled && !currentRoute?.endsWith(ENROLMENT_PATH)) {\n          this.enrolmentService.previousRoute.next(state.url);\n          const parentRoutes = route.pathFromRoot.map(snapshot => snapshot?.routeConfig?.path).filter(item => !!item);\n          this.router.navigate([...parentRoutes, ENROLMENT_PATH]);\n          return false;\n        }\n        return true;\n      }),\n    );\n  }\n}\n"]}