import { Injectable } from '@angular/core';
import { FrequencyKeys } from '../model';
import * as i0 from "@angular/core";
export class BillpayPaymentScheduleService {
    get today() {
        return this.getLocalISODate(new Date());
    }
    estimatedEndDate(date, freq, occurs = 0) {
        const parsedDate = new Date(date);
        switch (freq) {
            case FrequencyKeys.Monthly:
                return parsedDate.setMonth(parsedDate.getMonth() + occurs);
            case FrequencyKeys.Biweekly:
                return (new Date(parsedDate.setDate(parsedDate.getDate() - 1)).setHours(0, 0, 0) + occurs * (1000 * 3600 * 24) * 14);
            case FrequencyKeys.Weekly:
                return (new Date(parsedDate.setDate(parsedDate.getDate() - 1)).setHours(0, 0, 0) + occurs * (1000 * 3600 * 24) * 7);
            default:
                return parsedDate.getTime();
        }
    }
    estimatedOccurences(startDate, endDate, freq) {
        const d1 = new Date(startDate);
        const d2 = new Date(endDate);
        switch (freq) {
            case FrequencyKeys.Monthly:
                return this.toMonthDifference(d1, d2);
            case FrequencyKeys.Biweekly:
                return Math.ceil(this.toDaysDifference(d1, d2) / 14);
            case FrequencyKeys.Weekly:
                return Math.ceil(this.toDaysDifference(d1, d2) / 7);
            default:
                return 1;
        }
    }
    estimatedPaymentServiceDate(services, serviceType) {
        const service = services && services.find(item => !!(item && item.paymentServiceType === serviceType));
        if (service) {
            return new Date(service.cutoffTime).getTime() < new Date(service.earliestPaymentDate).getTime()
                ? this.getLocalISODate(service.earliestPaymentDate)
                : this.getLocalISODate(service.nextPaymentDate);
        }
        else {
            return this.today;
        }
    }
    toMonthDifference(d1, d2) {
        const endMonth = d2.getMonth();
        const startMonth = d1.getMonth();
        const endDay = d2.getDate();
        const startDay = d1.getDate();
        const lastDayOfEndMonth = new Date(d2.getFullYear(), endMonth + 1, 0).getDate();
        const lastDayOfStartMonth = new Date(d1.getFullYear(), startMonth + 1, 0).getDate();
        let strictMonths = (d2.getFullYear() - d1.getFullYear()) * 12 - startMonth + endMonth - 1;
        strictMonths = strictMonths <= 0 ? 0 : strictMonths;
        const softMonths = (startDay <= endDay && startMonth !== endMonth) ||
            (startDay === lastDayOfStartMonth && endDay === lastDayOfEndMonth && startMonth !== endMonth)
            ? 2
            : 1;
        return strictMonths + softMonths;
    }
    toDaysDifference(d1, d2) {
        const rest = d2.getTime() - d1.getTime();
        const result = Math.ceil(Math.abs(rest) / (1000 * 3600 * 24));
        if (rest < 0) {
            return 0;
        }
        else {
            return result ? result + 1 : 1;
        }
    }
    getLocalISODate(_date) {
        const ISODateRegExp = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/g;
        // Check if the date is already ISO
        if (typeof _date === 'string' && ISODateRegExp.test(_date)) {
            return _date;
        }
        const date = new Date(_date);
        const timezonezoffset = date.getTimezoneOffset() * 60000;
        return new Date(date.getTime() + timezonezoffset).toISOString();
    }
}
/** @nocollapse */ BillpayPaymentScheduleService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPaymentScheduleService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ BillpayPaymentScheduleService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPaymentScheduleService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPaymentScheduleService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=billpay-payment-schedule.service.js.map