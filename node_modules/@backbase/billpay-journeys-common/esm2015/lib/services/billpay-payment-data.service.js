import { Injectable, Inject, LOCALE_ID } from '@angular/core';
import { combineLatest, of, BehaviorSubject } from 'rxjs';
import { map, tap, catchError, switchMap } from 'rxjs/operators';
import { BillPayPaymentsService, BillPayPayeesSummaryService, BillPayAccountsService, } from '@backbase/data-ang/billpay';
import { FrequencyKeys } from '../model';
import { formatDate } from '@angular/common';
import { getLocaleNumberSymbol, NumberSymbol } from '@angular/common';
import { LoadingState } from '../model';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/billpay";
export class BillpayPaymentDataService {
    /** @internal */
    constructor(paymentData, accountsData, payeesSummaryData, locale) {
        this.paymentData = paymentData;
        this.accountsData = accountsData;
        this.payeesSummaryData = payeesSummaryData;
        this.locale = locale;
        this.currentPayeesLoadingState = LoadingState.Inactive;
        this.currentAccountsLoadingState = LoadingState.Inactive;
        this.reload = new BehaviorSubject(undefined);
        this.decimalSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal);
    }
    get payeesLoadingState() {
        return this.currentPayeesLoadingState;
    }
    get accountsLoadingState() {
        return this.currentAccountsLoadingState;
    }
    getOneOffPayment(id) {
        return this.paymentData.getPaymentById({ id }).pipe(map(body => body.payment));
    }
    getRecurringPayment(id) {
        return this.paymentData.getRecurringPaymentById({ id }).pipe(map(body => body.payment));
    }
    getPayeesAndAccounts() {
        return combineLatest([this.getPayees(), this.getAccounts()]).pipe(map(([payeeSummaries, accounts]) => (Object.assign(Object.assign({}, payeeSummaries), accounts))));
    }
    createPayment(payment) {
        return payment.schedule.frequency === FrequencyKeys.Once
            ? this.paymentData.postBillPayPayments({
                billPayPaymentsPostRequestBody: { payments: [this.toPaymentRequest(payment)] },
            })
            : this.paymentData.postBillPayRecurringPayments({
                billPayRecurringPaymentsPostRequestBody: { payment: this.toRecurringPaymentRequest(payment) },
            });
    }
    updatePaymentRecurring(payment, id) {
        return this.paymentData.putRecurringPaymentById({
            id,
            recurringPaymentByIdPutRequestBody: { payment: this.toRecurringPaymentRequest(payment) },
        });
    }
    updatePaymentOneOff(payment, id) {
        return this.paymentData.putPaymentById({
            id,
            paymentByIdPutRequestBody: { payment: this.toPaymentRequest(payment) },
        });
    }
    getPayees() {
        return this.reload.asObservable().pipe(tap(() => (this.currentPayeesLoadingState = LoadingState.Loading)), switchMap(() => this.payeesSummaryData.getBillPayPayeesSummary()), tap(() => (this.currentPayeesLoadingState = LoadingState.Inactive)), catchError(() => {
            this.currentPayeesLoadingState = LoadingState.Error;
            return of(undefined);
        }));
    }
    getAccounts() {
        return this.reload.asObservable().pipe(tap(() => (this.currentAccountsLoadingState = LoadingState.Loading)), switchMap(() => this.accountsData.getBillPayAccounts()), tap(() => (this.currentAccountsLoadingState = LoadingState.Inactive)), catchError(() => {
            this.currentAccountsLoadingState = LoadingState.Error;
            return of(undefined);
        }));
    }
    toShortISODate(date) {
        return formatDate(date, 'yyyy-MM-dd', this.locale);
    }
    toPaymentRequest({ payeeTo: { id: payeeID }, accountFrom: { accountNumber, routingNumber, accountType, id }, amount, memo, schedule, overnightDeliveryAddress, }) {
        return Object.assign(Object.assign(Object.assign(Object.assign({ payeeID, paymentAccount: Object.assign(Object.assign({}, (id && { id: id })), { accountNumber,
                routingNumber,
                accountType }) }, (schedule.paymentService &&
            schedule.paymentService.service && { paymentServiceType: schedule.paymentService.service.paymentServiceType })), { amount: {
                amount: amount.amount.replace(this.decimalSeparator, '.'),
                currencyCode: amount.currency,
            }, paymentDate: this.toShortISODate(schedule.startDate) }), (memo && { paymentMemo: memo })), (overnightDeliveryAddress && {
            overnightDeliveryAddress: Object.assign({ address1: overnightDeliveryAddress.address1, state: overnightDeliveryAddress.state, city: overnightDeliveryAddress.city, postalCode: overnightDeliveryAddress.postalCode }, (overnightDeliveryAddress.address2 && { address2: overnightDeliveryAddress.address2 })),
        }));
    }
    toRecurringPaymentRequest({ payeeTo: { id: payeeID }, accountFrom: { accountNumber, routingNumber, accountType, id }, amount, schedule, memo, }) {
        return Object.assign(Object.assign(Object.assign(Object.assign({ payeeID, paymentAccount: Object.assign(Object.assign({}, (id && { id: id })), { accountNumber,
                routingNumber,
                accountType }), amount: {
                amount: amount.amount.replace(this.decimalSeparator, '.'),
                currencyCode: amount.currency,
            } }, (memo && { paymentMemo: memo })), { paymentDate: this.toShortISODate(schedule.startDate) }), (schedule.repeat && { numberOfInstances: schedule.repeat })), { frequency: schedule.frequency, paymentScheduledAlert: schedule.alertPendingCheckbox, paymentSentAlert: schedule.alertSentCheckbox, modelExpirationAlert: schedule.alertLastPendingCheckbox });
    }
}
/** @nocollapse */ BillpayPaymentDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPaymentDataService, deps: [{ token: i1.BillPayPaymentsService }, { token: i1.BillPayAccountsService }, { token: i1.BillPayPayeesSummaryService }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ BillpayPaymentDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPaymentDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPaymentDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.BillPayPaymentsService }, { type: i1.BillPayAccountsService }, { type: i1.BillPayPayeesSummaryService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });
//# sourceMappingURL=billpay-payment-data.service.js.map