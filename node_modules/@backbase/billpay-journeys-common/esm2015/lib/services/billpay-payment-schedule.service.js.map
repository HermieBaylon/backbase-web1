{"version":3,"file":"billpay-payment-schedule.service.js","sourceRoot":"","sources":["../../../../../../libs/billpay-journeys-common/src/lib/services/billpay-payment-schedule.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { PaymentService } from '@backbase/data-ang/billpay';\nimport { FrequencyKeys, PaymentServicesTypes } from '../model';\n\n@Injectable()\nexport class BillpayPaymentScheduleService {\n  get today() {\n    return this.getLocalISODate(new Date());\n  }\n\n  estimatedEndDate(date: string, freq: FrequencyKeys, occurs: number | undefined = 0): number {\n    const parsedDate = new Date(date);\n    switch (freq) {\n      case FrequencyKeys.Monthly:\n        return parsedDate.setMonth(parsedDate.getMonth() + occurs);\n      case FrequencyKeys.Biweekly:\n        return (\n          new Date(parsedDate.setDate(parsedDate.getDate() - 1)).setHours(0, 0, 0) + occurs * (1000 * 3600 * 24) * 14\n        );\n      case FrequencyKeys.Weekly:\n        return (\n          new Date(parsedDate.setDate(parsedDate.getDate() - 1)).setHours(0, 0, 0) + occurs * (1000 * 3600 * 24) * 7\n        );\n      default:\n        return parsedDate.getTime();\n    }\n  }\n\n  estimatedOccurences(startDate: string, endDate: string, freq: FrequencyKeys): number {\n    const d1 = new Date(startDate);\n    const d2 = new Date(endDate);\n    switch (freq) {\n      case FrequencyKeys.Monthly:\n        return this.toMonthDifference(d1, d2);\n      case FrequencyKeys.Biweekly:\n        return Math.ceil(this.toDaysDifference(d1, d2) / 14);\n      case FrequencyKeys.Weekly:\n        return Math.ceil(this.toDaysDifference(d1, d2) / 7);\n      default:\n        return 1;\n    }\n  }\n\n  estimatedPaymentServiceDate(\n    services: Array<PaymentService | undefined> | undefined,\n    serviceType: PaymentServicesTypes,\n  ): string {\n    const service = services && services.find(item => !!(item && item.paymentServiceType === serviceType));\n    if (service) {\n      return new Date(service.cutoffTime).getTime() < new Date(service.earliestPaymentDate).getTime()\n        ? this.getLocalISODate(service.earliestPaymentDate)\n        : this.getLocalISODate(service.nextPaymentDate);\n    } else {\n      return this.today;\n    }\n  }\n\n  private toMonthDifference(d1: Date, d2: Date) {\n    const endMonth = d2.getMonth();\n    const startMonth = d1.getMonth();\n    const endDay = d2.getDate();\n    const startDay = d1.getDate();\n    const lastDayOfEndMonth = new Date(d2.getFullYear(), endMonth + 1, 0).getDate();\n    const lastDayOfStartMonth = new Date(d1.getFullYear(), startMonth + 1, 0).getDate();\n    let strictMonths = (d2.getFullYear() - d1.getFullYear()) * 12 - startMonth + endMonth - 1;\n    strictMonths = strictMonths <= 0 ? 0 : strictMonths;\n\n    const softMonths =\n      (startDay <= endDay && startMonth !== endMonth) ||\n      (startDay === lastDayOfStartMonth && endDay === lastDayOfEndMonth && startMonth !== endMonth)\n        ? 2\n        : 1;\n\n    return strictMonths + softMonths;\n  }\n\n  private toDaysDifference(d1: Date, d2: Date) {\n    const rest = d2.getTime() - d1.getTime();\n    const result = Math.ceil(Math.abs(rest) / (1000 * 3600 * 24));\n    if (rest < 0) {\n      return 0;\n    } else {\n      return result ? result + 1 : 1;\n    }\n  }\n\n  getLocalISODate(_date: Date | string) {\n    const ISODateRegExp = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\n    // Check if the date is already ISO\n    if (typeof _date === 'string' && ISODateRegExp.test(_date)) {\n      return _date;\n    }\n    const date = new Date(_date);\n    const timezonezoffset = date.getTimezoneOffset() * 60000;\n    return new Date(date.getTime() + timezonezoffset).toISOString();\n  }\n}\n"]}