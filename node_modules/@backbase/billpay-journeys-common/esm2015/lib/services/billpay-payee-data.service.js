import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { BillPayPayeesService, BillPayPayverisService, BillPayEbillsService, BillPayPayeesSummaryService, } from '@backbase/data-ang/billpay';
import { catchError, map, switchMap, tap } from 'rxjs/operators';
import { BehaviorSubject, of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/billpay";
export const defaultDeleteParams = {
    cancelPendingPayments: false,
};
export class BillpayPayeeDataService {
    /** @internal */
    constructor(data, payverisData, ebillsData, payeesSummaryData) {
        this.data = data;
        this.payverisData = payverisData;
        this.ebillsData = ebillsData;
        this.payeesSummaryData = payeesSummaryData;
        this.selectedDeletePayeeSource = new BehaviorSubject(undefined);
        this.selectedDeleteEbillsSource = new BehaviorSubject(undefined);
        this.reload = new BehaviorSubject(undefined);
        this.buttonsDisabled = false;
        this.currentPayeesLoadingState = '';
        this.iterablePayeeSummaryList = [];
    }
    deletePayee(id, electronic) {
        return electronic
            ? this.data.deleteElectronicPayeeById(Object.assign(Object.assign({}, defaultDeleteParams), { id }))
            : this.data.deletePayeeById(Object.assign(Object.assign({}, defaultDeleteParams), { id }));
    }
    resolveErrors(id) {
        const resolveErrorsRequest = {
            payeeID: id,
        };
        return this.payverisData.postBillPayPayverisResolveEbillErrors({
            billPayPayverisResolveEbillErrorsPostRequestBody: resolveErrorsRequest,
        });
    }
    deleteEbills(id) {
        return this.ebillsData.deleteBillPayEbills({ id });
    }
    getPayees() {
        return this.reload.asObservable().pipe(tap(() => (this.currentPayeesLoadingState = 'loading')), switchMap(() => this.payeesSummaryData.getBillPayPayeesSummary().pipe(map(groupByEbills))), tap(data => sortByPayeeGroup(data)), tap(data => this.createIterablePayeeSummaryList(data)), tap(() => {
            this.currentPayeesLoadingState = '';
        }), catchError(() => {
            this.currentPayeesLoadingState = 'error';
            return of(undefined);
        }));
    }
    createIterablePayeeSummaryList(list) {
        this.iterablePayeeSummaryList = [];
        for (let i = 0; i < list.ebillsEnabled.length; i++) {
            const summary = list.ebillsEnabled[i];
            this.iterablePayeeSummaryList.push(summary);
        }
        for (let j = 0; j < list.ebillsNotEnabled.length; j++) {
            const summary = list.ebillsNotEnabled[j];
            this.iterablePayeeSummaryList.push(summary);
        }
    }
    reloadPayees() {
        this.reload.next(undefined);
    }
    disableWidgetButtons() {
        this.buttonsDisabled = true;
    }
    enableWidgetButtons() {
        this.buttonsDisabled = false;
    }
    updateSelectedDeletePayee(payee) {
        this.selectedDeletePayeeSource.next(payee);
    }
    updateSelectedDeleteEbills(payee) {
        this.selectedDeleteEbillsSource.next(payee);
    }
    get selectedDeletePayee() {
        return this.selectedDeletePayeeSource.asObservable();
    }
    get selectedDeleteEbills() {
        return this.selectedDeleteEbillsSource.asObservable();
    }
    get payeesLoadingState() {
        return this.currentPayeesLoadingState;
    }
    get areButtonsDisabled() {
        return this.buttonsDisabled;
    }
    get numberOfPayees() {
        return this.iterablePayeeSummaryList.length;
    }
    payeesLoaded() {
        const _this = this;
        return new Promise(function (resolve) {
            (function waitUntilLoaded() {
                if (_this.currentPayeesLoadingState === '')
                    return resolve(true);
                setTimeout(waitUntilLoaded, 100);
            })();
        });
    }
    findPayeeSummaryById(payeeId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (yield this.payeesLoaded()) {
                return this.iterablePayeeSummaryList.find(summary => summary.id === payeeId);
            }
            return;
        });
    }
}
/** @nocollapse */ BillpayPayeeDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPayeeDataService, deps: [{ token: i1.BillPayPayeesService }, { token: i1.BillPayPayverisService }, { token: i1.BillPayEbillsService }, { token: i1.BillPayPayeesSummaryService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ BillpayPayeeDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPayeeDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BillpayPayeeDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.BillPayPayeesService }, { type: i1.BillPayPayverisService }, { type: i1.BillPayEbillsService }, { type: i1.BillPayPayeesSummaryService }]; } });
function groupByEbills(data) {
    const payeeSummaries = data.payeeSummaries;
    return payeeSummaries.reduce((grouped, payeeSummary) => {
        grouped[payeeSummary.ebill && payeeSummary.ebill.enabled ? 'ebillsEnabled' : 'ebillsNotEnabled'].push(payeeSummary);
        return grouped;
    }, {
        ebillsEnabled: [],
        ebillsNotEnabled: [],
    });
}
function sortByPayeeGroup(data) {
    sortPayeeSummaries(data.ebillsEnabled);
    sortPayeeSummaries(data.ebillsNotEnabled);
}
function sortPayeeSummaries(summaries) {
    summaries.sort((a, b) => getPayeeDisplayName(a.name, a.nickName).toLowerCase() > getPayeeDisplayName(b.name, b.nickName).toLowerCase()
        ? 1
        : -1);
}
function getPayeeDisplayName(payeeName, payeeNickName) {
    return payeeNickName || payeeName;
}
//# sourceMappingURL=billpay-payee-data.service.js.map