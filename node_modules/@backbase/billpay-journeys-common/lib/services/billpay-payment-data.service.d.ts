import { Observable } from 'rxjs';
import { BillPayPaymentsService, BillPayPayeesSummaryService, BillPayAccountsService, OneOffPayment, BillPayAccountsGetResponseBody, BillPayPayeesSummaryGetResponseBody, RecurringPaymentByIdPutResponseBody, BillPayRecurringPaymentsPostResponseBody, PaymentByIdPutResponseBody, BillPayPaymentsPostResponseBody, Payment } from '@backbase/data-ang/billpay';
import { PaymentFormState } from '../model';
import { LoadingState } from '../model';
import * as i0 from "@angular/core";
export declare class BillpayPaymentDataService {
    private readonly paymentData;
    private readonly accountsData;
    private readonly payeesSummaryData;
    private readonly locale;
    private currentPayeesLoadingState;
    private currentAccountsLoadingState;
    private readonly reload;
    private readonly decimalSeparator;
    /** @internal */
    constructor(paymentData: BillPayPaymentsService, accountsData: BillPayAccountsService, payeesSummaryData: BillPayPayeesSummaryService, locale: string);
    get payeesLoadingState(): LoadingState;
    get accountsLoadingState(): LoadingState;
    getOneOffPayment(id: string): Observable<OneOffPayment>;
    getRecurringPayment(id: string): Observable<Payment>;
    getPayeesAndAccounts(): Observable<BillPayPayeesSummaryGetResponseBody & BillPayAccountsGetResponseBody>;
    createPayment(payment: PaymentFormState): Observable<BillPayPaymentsPostResponseBody | BillPayRecurringPaymentsPostResponseBody>;
    updatePaymentRecurring(payment: PaymentFormState, id: string): Observable<RecurringPaymentByIdPutResponseBody>;
    updatePaymentOneOff(payment: PaymentFormState, id: string): Observable<PaymentByIdPutResponseBody>;
    private getPayees;
    private getAccounts;
    private toShortISODate;
    private toPaymentRequest;
    private toRecurringPaymentRequest;
    static ɵfac: i0.ɵɵFactoryDeclaration<BillpayPaymentDataService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<BillpayPaymentDataService>;
}
