import { Component, Input } from '@angular/core';
import { ActionsStoreModel } from '@backbase/actions-store-ang';
import { BehaviorSubject, Subject } from 'rxjs';
import { ActionsProductNotificationsSettingsRouterService } from '../../services/actions-product-notifications-settings-router.service';
import { ActionsProductNotificationsSettingsDataService } from '../../services/actions-product-notifications-settings-data.service';
import { ActionsProductNotificationsSettingsPropertiesService } from '../../services/actions-product-notifications-settings-properties.service';
import { secondsToMilliseconds } from '@backbase/actions-common-ang';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../services/actions-product-notifications-settings-router.service";
import * as i2 from "../pages/actions-product-settings-page/actions-product-settings-page.component";
import * as i3 from "@angular/common";
export class ActionsProductNotificationsSettingsWidgetComponent {
    constructor(routerService) {
        this.routerService = routerService;
        this.specificationIDs$$ = new BehaviorSubject(undefined);
        this.specificationIDs$ = this.specificationIDs$$.asObservable();
        this.notificationDismissTime$$ = new BehaviorSubject(undefined);
        this.notificationDismissTime$ = this.notificationDismissTime$$
            .asObservable()
            .pipe(map(seconds => (seconds ? secondsToMilliseconds(seconds) : undefined)));
        this.destroy$ = new Subject();
    }
    /**
     * Input for selected account id.
     */
    set selectedAccountId(value) {
        this.routerService.selectedAccountId = value;
    }
    /**
     * Specification IDs value setter.
     * Configurable via model property.
     */
    set specificationIDs(value) {
        this.specificationIDs$$.next(value);
    }
    /**
     * Notification dismiss time value setter
     */
    set notificationDismissTime(value) {
        this.notificationDismissTime$$.next(value);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
ActionsProductNotificationsSettingsWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsWidgetComponent, deps: [{ token: i1.ActionsProductNotificationsSettingsRouterService }], target: i0.ɵɵFactoryTarget.Component });
ActionsProductNotificationsSettingsWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ActionsProductNotificationsSettingsWidgetComponent, selector: "bb-actions-product-notifications-settings-widget", inputs: { selectedAccountId: "selectedAccountId", specificationIDs: "specificationIDs", notificationDismissTime: "notificationDismissTime" }, providers: [
        ActionsStoreModel,
        ActionsProductNotificationsSettingsPropertiesService,
        ActionsProductNotificationsSettingsDataService,
        ActionsProductNotificationsSettingsRouterService,
    ], ngImport: i0, template: '<bb-actions-product-settings-page [specificationIDs]="specificationIDs$ | async" [notificationDismissTime]="notificationDismissTime$ | async"></bb-actions-product-settings-page>', isInline: true, components: [{ type: i2.ActionsProductSettingsPageComponent, selector: "bb-actions-product-settings-page", inputs: ["notificationDismissTime", "specificationIDs"] }], pipes: { "async": i3.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-actions-product-notifications-settings-widget',
                    template: '<bb-actions-product-settings-page [specificationIDs]="specificationIDs$ | async" [notificationDismissTime]="notificationDismissTime$ | async"></bb-actions-product-settings-page>',
                    providers: [
                        ActionsStoreModel,
                        ActionsProductNotificationsSettingsPropertiesService,
                        ActionsProductNotificationsSettingsDataService,
                        ActionsProductNotificationsSettingsRouterService,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.ActionsProductNotificationsSettingsRouterService }]; }, propDecorators: { selectedAccountId: [{
                type: Input
            }], specificationIDs: [{
                type: Input
            }], notificationDismissTime: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy1wcm9kdWN0LW5vdGlmaWNhdGlvbnMtc2V0dGluZ3Mtd2lkZ2V0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYWN0aW9ucy1wcm9kdWN0LW5vdGlmaWNhdGlvbnMtc2V0dGluZ3Mtd2lkZ2V0LWFuZy9zcmMvY29tcG9uZW50cy9hY3Rpb25zLXByb2R1Y3Qtbm90aWZpY2F0aW9ucy1zZXR0aW5ncy13aWRnZXQvYWN0aW9ucy1wcm9kdWN0LW5vdGlmaWNhdGlvbnMtc2V0dGluZ3Mtd2lkZ2V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoRCxPQUFPLEVBQUUsZ0RBQWdELEVBQUUsTUFBTSxzRUFBc0UsQ0FBQztBQUN4SSxPQUFPLEVBQUUsOENBQThDLEVBQUUsTUFBTSxvRUFBb0UsQ0FBQztBQUNwSSxPQUFPLEVBQUUsb0RBQW9ELEVBQUUsTUFBTSwwRUFBMEUsQ0FBQztBQUNoSixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7O0FBYXJDLE1BQU0sT0FBTyxrREFBa0Q7SUErQjdELFlBQTZCLGFBQStEO1FBQS9ELGtCQUFhLEdBQWIsYUFBYSxDQUFrRDtRQTlCM0UsdUJBQWtCLEdBQUcsSUFBSSxlQUFlLENBQXVCLFNBQVMsQ0FBQyxDQUFDO1FBQ2xGLHNCQUFpQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNuRCw4QkFBeUIsR0FBRyxJQUFJLGVBQWUsQ0FBcUIsU0FBUyxDQUFDLENBQUM7UUFDdkYsNkJBQXdCLEdBQUcsSUFBSSxDQUFDLHlCQUF5QjthQUMvRCxZQUFZLEVBQUU7YUFDZCxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUF1Qi9ELGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0lBRStDLENBQUM7SUF4QmhHOztPQUVHO0lBQ0gsSUFBYSxpQkFBaUIsQ0FBQyxLQUFhO1FBQzFDLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO0lBQy9DLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFhLGdCQUFnQixDQUFDLEtBQTJCO1FBQ3ZELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBYSx1QkFBdUIsQ0FBQyxLQUF5QjtRQUM1RCxJQUFJLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFNRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNCLENBQUM7O2dKQXBDVSxrREFBa0Q7b0lBQWxELGtEQUFrRCx5TkFQbEQ7UUFDVCxpQkFBaUI7UUFDakIsb0RBQW9EO1FBQ3BELDhDQUE4QztRQUM5QyxnREFBZ0Q7S0FDakQsMEJBTkMsbUxBQW1MOzRGQVExSyxrREFBa0Q7a0JBWDlELFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGtEQUFrRDtvQkFDNUQsUUFBUSxFQUNOLG1MQUFtTDtvQkFDckwsU0FBUyxFQUFFO3dCQUNULGlCQUFpQjt3QkFDakIsb0RBQW9EO3dCQUNwRCw4Q0FBOEM7d0JBQzlDLGdEQUFnRDtxQkFDakQ7aUJBQ0Y7dUlBV2MsaUJBQWlCO3NCQUE3QixLQUFLO2dCQVFPLGdCQUFnQjtzQkFBNUIsS0FBSztnQkFPTyx1QkFBdUI7c0JBQW5DLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvbnNTdG9yZU1vZGVsIH0gZnJvbSAnQGJhY2tiYXNlL2FjdGlvbnMtc3RvcmUtYW5nJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWN0aW9uc1Byb2R1Y3ROb3RpZmljYXRpb25zU2V0dGluZ3NSb3V0ZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYWN0aW9ucy1wcm9kdWN0LW5vdGlmaWNhdGlvbnMtc2V0dGluZ3Mtcm91dGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWN0aW9uc1Byb2R1Y3ROb3RpZmljYXRpb25zU2V0dGluZ3NEYXRhU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2FjdGlvbnMtcHJvZHVjdC1ub3RpZmljYXRpb25zLXNldHRpbmdzLWRhdGEuc2VydmljZSc7XG5pbXBvcnQgeyBBY3Rpb25zUHJvZHVjdE5vdGlmaWNhdGlvbnNTZXR0aW5nc1Byb3BlcnRpZXNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYWN0aW9ucy1wcm9kdWN0LW5vdGlmaWNhdGlvbnMtc2V0dGluZ3MtcHJvcGVydGllcy5zZXJ2aWNlJztcbmltcG9ydCB7IHNlY29uZHNUb01pbGxpc2Vjb25kcyB9IGZyb20gJ0BiYWNrYmFzZS9hY3Rpb25zLWNvbW1vbi1hbmcnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1hY3Rpb25zLXByb2R1Y3Qtbm90aWZpY2F0aW9ucy1zZXR0aW5ncy13aWRnZXQnLFxuICB0ZW1wbGF0ZTpcbiAgICAnPGJiLWFjdGlvbnMtcHJvZHVjdC1zZXR0aW5ncy1wYWdlIFtzcGVjaWZpY2F0aW9uSURzXT1cInNwZWNpZmljYXRpb25JRHMkIHwgYXN5bmNcIiBbbm90aWZpY2F0aW9uRGlzbWlzc1RpbWVdPVwibm90aWZpY2F0aW9uRGlzbWlzc1RpbWUkIHwgYXN5bmNcIj48L2JiLWFjdGlvbnMtcHJvZHVjdC1zZXR0aW5ncy1wYWdlPicsXG4gIHByb3ZpZGVyczogW1xuICAgIEFjdGlvbnNTdG9yZU1vZGVsLFxuICAgIEFjdGlvbnNQcm9kdWN0Tm90aWZpY2F0aW9uc1NldHRpbmdzUHJvcGVydGllc1NlcnZpY2UsXG4gICAgQWN0aW9uc1Byb2R1Y3ROb3RpZmljYXRpb25zU2V0dGluZ3NEYXRhU2VydmljZSxcbiAgICBBY3Rpb25zUHJvZHVjdE5vdGlmaWNhdGlvbnNTZXR0aW5nc1JvdXRlclNlcnZpY2UsXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIEFjdGlvbnNQcm9kdWN0Tm90aWZpY2F0aW9uc1NldHRpbmdzV2lkZ2V0Q29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSByZWFkb25seSBzcGVjaWZpY2F0aW9uSURzJCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZ1tdIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuICByZWFkb25seSBzcGVjaWZpY2F0aW9uSURzJCA9IHRoaXMuc3BlY2lmaWNhdGlvbklEcyQkLmFzT2JzZXJ2YWJsZSgpO1xuICBwcml2YXRlIHJlYWRvbmx5IG5vdGlmaWNhdGlvbkRpc21pc3NUaW1lJCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PG51bWJlciB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcbiAgcmVhZG9ubHkgbm90aWZpY2F0aW9uRGlzbWlzc1RpbWUkID0gdGhpcy5ub3RpZmljYXRpb25EaXNtaXNzVGltZSQkXG4gICAgLmFzT2JzZXJ2YWJsZSgpXG4gICAgLnBpcGUobWFwKHNlY29uZHMgPT4gKHNlY29uZHMgPyBzZWNvbmRzVG9NaWxsaXNlY29uZHMoc2Vjb25kcykgOiB1bmRlZmluZWQpKSk7XG4gIC8qKlxuICAgKiBJbnB1dCBmb3Igc2VsZWN0ZWQgYWNjb3VudCBpZC5cbiAgICovXG4gIEBJbnB1dCgpIHNldCBzZWxlY3RlZEFjY291bnRJZCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5yb3V0ZXJTZXJ2aWNlLnNlbGVjdGVkQWNjb3VudElkID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogU3BlY2lmaWNhdGlvbiBJRHMgdmFsdWUgc2V0dGVyLlxuICAgKiBDb25maWd1cmFibGUgdmlhIG1vZGVsIHByb3BlcnR5LlxuICAgKi9cbiAgQElucHV0KCkgc2V0IHNwZWNpZmljYXRpb25JRHModmFsdWU6IHN0cmluZ1tdIHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5zcGVjaWZpY2F0aW9uSURzJCQubmV4dCh2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogTm90aWZpY2F0aW9uIGRpc21pc3MgdGltZSB2YWx1ZSBzZXR0ZXJcbiAgICovXG4gIEBJbnB1dCgpIHNldCBub3RpZmljYXRpb25EaXNtaXNzVGltZSh2YWx1ZTogbnVtYmVyIHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5ub3RpZmljYXRpb25EaXNtaXNzVGltZSQkLm5leHQodmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSByb3V0ZXJTZXJ2aWNlOiBBY3Rpb25zUHJvZHVjdE5vdGlmaWNhdGlvbnNTZXR0aW5nc1JvdXRlclNlcnZpY2UpIHt9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XG4gICAgdGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xuICB9XG59XG4iXX0=