import { Component, Directive, Input } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { ProductKindNames } from '../../models/product-kind-names';
import { firstNonEmptyString } from '@backbase/actions-common-ang';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/payment-card-number-pipe";
import * as i2 from "@backbase/ui-ang/iban-pipe";
export class ActionsProductItemCardComponent {
    constructor() {
        /**
         * Product kind names enum.
         */
        this.productKindNames = ProductKindNames;
        /**
         * Configuration that determines how a payment card number should be formatted.
         */
        this.productNumberFormat = {
            length: 0,
            maskRange: [0, 12],
            segments: 4,
        };
    }
    /**
     * Method to get account number.
     *
     * @param args - accounts array
     */
    retrieveAccountNumber(...args) {
        const account = args[0];
        switch (account.productKindName) {
            case ProductKindNames.TermDeposit:
                return firstNonEmptyString(account.IBAN);
            case ProductKindNames.Loan:
            case ProductKindNames.CreditCard:
            case ProductKindNames.InvestmentAccount:
                return firstNonEmptyString(account.creditCardAccountNumber, account.IBAN, account.BBAN);
            case ProductKindNames.DebitCard:
                return firstNonEmptyString(account.creditCardAccountNumber);
            default:
                return firstNonEmptyString(account.IBAN, account.BBAN);
        }
    }
    /**
     * Method to get account alias.
     *
     * @param account - account data
     * @returns account alias name
     */
    getAlias(account) {
        return firstNonEmptyString(account.userPreferences && account.userPreferences.alias, account.bankAlias, account.name);
    }
}
ActionsProductItemCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductItemCardComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ActionsProductItemCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ActionsProductItemCardComponent, selector: "bb-actions-product-item-card", inputs: { account: "account" }, ngImport: i0, template: "<ng-container bbActionsProductItemCardCustomizableDirective [bbHostRef]=\"this\" [bbTemplateContext]=\"account\">\n</ng-container>\n\n<ng-template bbActionsProductItemCardCustomizableDirective let-hostRef let-account=\"context\">\n  <ng-container>\n    <div>\n      <div data-role=\"card-title\" class=\"bb-text-bold\" role=\"heading\" aria-level=\"2\">\n        {{ hostRef.getAlias(account) }}\n      </div>\n      <div\n        data-role=\"card-sub-title\"\n        class=\"text-small bb-text-support bb-block bb-block--xl\"\n        role=\"heading\"\n        aria-level=\"3\"\n      >\n        {{ hostRef.retrieveAccountNumber(account) | bbIban | paymentCardNumber: productNumberFormat }}\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n", directives: [{ type: i0.forwardRef(function () { return ActionsProductItemCardCustomizableDirective; }), selector: "[bbActionsProductItemCardCustomizableDirective]" }], pipes: { "paymentCardNumber": i0.forwardRef(function () { return i1.PaymentCardNumberPipe; }), "bbIban": i0.forwardRef(function () { return i2.BbIbanPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductItemCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-actions-product-item-card',
                    templateUrl: './actions-product-item-card.component.html',
                }]
        }], propDecorators: { account: [{
                type: Input
            }] } });
export class ActionsProductItemCardCustomizableDirective extends BbTemplate {
}
ActionsProductItemCardCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductItemCardCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ActionsProductItemCardCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ActionsProductItemCardCustomizableDirective, selector: "[bbActionsProductItemCardCustomizableDirective]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductItemCardCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbActionsProductItemCardCustomizableDirective]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy1wcm9kdWN0LWl0ZW0tY2FyZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FjdGlvbnMtcHJvZHVjdC1ub3RpZmljYXRpb25zLXNldHRpbmdzLXdpZGdldC1hbmcvc3JjL2NvbXBvbmVudHMvYWN0aW9ucy1wcm9kdWN0LWl0ZW0tY2FyZC9hY3Rpb25zLXByb2R1Y3QtaXRlbS1jYXJkLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYWN0aW9ucy1wcm9kdWN0LW5vdGlmaWNhdGlvbnMtc2V0dGluZ3Mtd2lkZ2V0LWFuZy9zcmMvY29tcG9uZW50cy9hY3Rpb25zLXByb2R1Y3QtaXRlbS1jYXJkL2FjdGlvbnMtcHJvZHVjdC1pdGVtLWNhcmQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTVELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVuRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7OztBQU1uRSxNQUFNLE9BQU8sK0JBQStCO0lBSjVDO1FBVUU7O1dBRUc7UUFDTSxxQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUU3Qzs7V0FFRztRQUNNLHdCQUFtQixHQUE0QjtZQUN0RCxNQUFNLEVBQUUsQ0FBQztZQUNULFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDbEIsUUFBUSxFQUFFLENBQUM7U0FDWixDQUFDO0tBdUNIO0lBckNDOzs7O09BSUc7SUFDSCxxQkFBcUIsQ0FBQyxHQUFHLElBQThCO1FBQ3JELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QixRQUFRLE9BQU8sQ0FBQyxlQUFlLEVBQUU7WUFDL0IsS0FBSyxnQkFBZ0IsQ0FBQyxXQUFXO2dCQUMvQixPQUFPLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUUzQyxLQUFLLGdCQUFnQixDQUFDLElBQUksQ0FBQztZQUMzQixLQUFLLGdCQUFnQixDQUFDLFVBQVUsQ0FBQztZQUNqQyxLQUFLLGdCQUFnQixDQUFDLGlCQUFpQjtnQkFDckMsT0FBTyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFMUYsS0FBSyxnQkFBZ0IsQ0FBQyxTQUFTO2dCQUM3QixPQUFPLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBRTlEO2dCQUNFLE9BQU8sbUJBQW1CLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUQ7SUFDSCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxRQUFRLENBQUMsT0FBK0I7UUFDdEMsT0FBTyxtQkFBbUIsQ0FDeEIsT0FBTyxDQUFDLGVBQWUsSUFBSSxPQUFPLENBQUMsZUFBZSxDQUFDLEtBQUssRUFDeEQsT0FBTyxDQUFDLFNBQVMsRUFDakIsT0FBTyxDQUFDLElBQUksQ0FDYixDQUFDO0lBQ0osQ0FBQzs7NkhBeERVLCtCQUErQjtpSEFBL0IsK0JBQStCLG9HQ1g1QyxvdkJBb0JBLDBERHFEYSwyQ0FBMkM7NEZBOUQzQywrQkFBK0I7a0JBSjNDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDhCQUE4QjtvQkFDeEMsV0FBVyxFQUFFLDRDQUE0QztpQkFDMUQ7OEJBS1UsT0FBTztzQkFBZixLQUFLOztBQTBEUixNQUFNLE9BQU8sMkNBQTRDLFNBQVEsVUFHaEU7O3lJQUhZLDJDQUEyQzs2SEFBM0MsMkNBQTJDOzRGQUEzQywyQ0FBMkM7a0JBSHZELFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGlEQUFpRDtpQkFDNUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIERpcmVjdGl2ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjY291bnRBcnJhbmdlbWVudEl0ZW0gfSBmcm9tICdAYmFja2Jhc2UvZGF0YS1hbmcvYXJyYW5nZW1lbnRzJztcbmltcG9ydCB7IEJiVGVtcGxhdGUgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvY29yZSc7XG5pbXBvcnQgeyBQcm9kdWN0S2luZE5hbWVzIH0gZnJvbSAnLi4vLi4vbW9kZWxzL3Byb2R1Y3Qta2luZC1uYW1lcyc7XG5pbXBvcnQgeyBQYXltZW50Q2FyZE51bWJlckZvcm1hdCB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvcGF5bWVudC1jYXJkLW51bWJlci1waXBlJztcbmltcG9ydCB7IGZpcnN0Tm9uRW1wdHlTdHJpbmcgfSBmcm9tICdAYmFja2Jhc2UvYWN0aW9ucy1jb21tb24tYW5nJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItYWN0aW9ucy1wcm9kdWN0LWl0ZW0tY2FyZCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9hY3Rpb25zLXByb2R1Y3QtaXRlbS1jYXJkLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgQWN0aW9uc1Byb2R1Y3RJdGVtQ2FyZENvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBBY2NvdW50IGl0ZW0uXG4gICAqL1xuICBASW5wdXQoKSBhY2NvdW50PzogQWNjb3VudEFycmFuZ2VtZW50SXRlbTtcblxuICAvKipcbiAgICogUHJvZHVjdCBraW5kIG5hbWVzIGVudW0uXG4gICAqL1xuICByZWFkb25seSBwcm9kdWN0S2luZE5hbWVzID0gUHJvZHVjdEtpbmROYW1lcztcblxuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiB0aGF0IGRldGVybWluZXMgaG93IGEgcGF5bWVudCBjYXJkIG51bWJlciBzaG91bGQgYmUgZm9ybWF0dGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgcHJvZHVjdE51bWJlckZvcm1hdDogUGF5bWVudENhcmROdW1iZXJGb3JtYXQgPSB7XG4gICAgbGVuZ3RoOiAwLFxuICAgIG1hc2tSYW5nZTogWzAsIDEyXSxcbiAgICBzZWdtZW50czogNCxcbiAgfTtcblxuICAvKipcbiAgICogTWV0aG9kIHRvIGdldCBhY2NvdW50IG51bWJlci5cbiAgICpcbiAgICogQHBhcmFtIGFyZ3MgLSBhY2NvdW50cyBhcnJheVxuICAgKi9cbiAgcmV0cmlldmVBY2NvdW50TnVtYmVyKC4uLmFyZ3M6IEFjY291bnRBcnJhbmdlbWVudEl0ZW1bXSkge1xuICAgIGNvbnN0IGFjY291bnQgPSBhcmdzWzBdO1xuICAgIHN3aXRjaCAoYWNjb3VudC5wcm9kdWN0S2luZE5hbWUpIHtcbiAgICAgIGNhc2UgUHJvZHVjdEtpbmROYW1lcy5UZXJtRGVwb3NpdDpcbiAgICAgICAgcmV0dXJuIGZpcnN0Tm9uRW1wdHlTdHJpbmcoYWNjb3VudC5JQkFOKTtcblxuICAgICAgY2FzZSBQcm9kdWN0S2luZE5hbWVzLkxvYW46XG4gICAgICBjYXNlIFByb2R1Y3RLaW5kTmFtZXMuQ3JlZGl0Q2FyZDpcbiAgICAgIGNhc2UgUHJvZHVjdEtpbmROYW1lcy5JbnZlc3RtZW50QWNjb3VudDpcbiAgICAgICAgcmV0dXJuIGZpcnN0Tm9uRW1wdHlTdHJpbmcoYWNjb3VudC5jcmVkaXRDYXJkQWNjb3VudE51bWJlciwgYWNjb3VudC5JQkFOLCBhY2NvdW50LkJCQU4pO1xuXG4gICAgICBjYXNlIFByb2R1Y3RLaW5kTmFtZXMuRGViaXRDYXJkOlxuICAgICAgICByZXR1cm4gZmlyc3ROb25FbXB0eVN0cmluZyhhY2NvdW50LmNyZWRpdENhcmRBY2NvdW50TnVtYmVyKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZpcnN0Tm9uRW1wdHlTdHJpbmcoYWNjb3VudC5JQkFOLCBhY2NvdW50LkJCQU4pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNZXRob2QgdG8gZ2V0IGFjY291bnQgYWxpYXMuXG4gICAqXG4gICAqIEBwYXJhbSBhY2NvdW50IC0gYWNjb3VudCBkYXRhXG4gICAqIEByZXR1cm5zIGFjY291bnQgYWxpYXMgbmFtZVxuICAgKi9cbiAgZ2V0QWxpYXMoYWNjb3VudDogQWNjb3VudEFycmFuZ2VtZW50SXRlbSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGZpcnN0Tm9uRW1wdHlTdHJpbmcoXG4gICAgICBhY2NvdW50LnVzZXJQcmVmZXJlbmNlcyAmJiBhY2NvdW50LnVzZXJQcmVmZXJlbmNlcy5hbGlhcyxcbiAgICAgIGFjY291bnQuYmFua0FsaWFzLFxuICAgICAgYWNjb3VudC5uYW1lLFxuICAgICk7XG4gIH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2JiQWN0aW9uc1Byb2R1Y3RJdGVtQ2FyZEN1c3RvbWl6YWJsZURpcmVjdGl2ZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBBY3Rpb25zUHJvZHVjdEl0ZW1DYXJkQ3VzdG9taXphYmxlRGlyZWN0aXZlIGV4dGVuZHMgQmJUZW1wbGF0ZTxcbiAgQWN0aW9uc1Byb2R1Y3RJdGVtQ2FyZENvbXBvbmVudCxcbiAgQWNjb3VudEFycmFuZ2VtZW50SXRlbSB8IHVuZGVmaW5lZFxuPiB7fVxuIiwiPG5nLWNvbnRhaW5lciBiYkFjdGlvbnNQcm9kdWN0SXRlbUNhcmRDdXN0b21pemFibGVEaXJlY3RpdmUgW2JiSG9zdFJlZl09XCJ0aGlzXCIgW2JiVGVtcGxhdGVDb250ZXh0XT1cImFjY291bnRcIj5cbjwvbmctY29udGFpbmVyPlxuXG48bmctdGVtcGxhdGUgYmJBY3Rpb25zUHJvZHVjdEl0ZW1DYXJkQ3VzdG9taXphYmxlRGlyZWN0aXZlIGxldC1ob3N0UmVmIGxldC1hY2NvdW50PVwiY29udGV4dFwiPlxuICA8bmctY29udGFpbmVyPlxuICAgIDxkaXY+XG4gICAgICA8ZGl2IGRhdGEtcm9sZT1cImNhcmQtdGl0bGVcIiBjbGFzcz1cImJiLXRleHQtYm9sZFwiIHJvbGU9XCJoZWFkaW5nXCIgYXJpYS1sZXZlbD1cIjJcIj5cbiAgICAgICAge3sgaG9zdFJlZi5nZXRBbGlhcyhhY2NvdW50KSB9fVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2XG4gICAgICAgIGRhdGEtcm9sZT1cImNhcmQtc3ViLXRpdGxlXCJcbiAgICAgICAgY2xhc3M9XCJ0ZXh0LXNtYWxsIGJiLXRleHQtc3VwcG9ydCBiYi1ibG9jayBiYi1ibG9jay0teGxcIlxuICAgICAgICByb2xlPVwiaGVhZGluZ1wiXG4gICAgICAgIGFyaWEtbGV2ZWw9XCIzXCJcbiAgICAgID5cbiAgICAgICAge3sgaG9zdFJlZi5yZXRyaWV2ZUFjY291bnROdW1iZXIoYWNjb3VudCkgfCBiYkliYW4gfCBwYXltZW50Q2FyZE51bWJlcjogcHJvZHVjdE51bWJlckZvcm1hdCB9fVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvbmctY29udGFpbmVyPlxuPC9uZy10ZW1wbGF0ZT5cbiJdfQ==