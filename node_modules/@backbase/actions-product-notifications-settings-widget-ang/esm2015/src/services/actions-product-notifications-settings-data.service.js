import { Injectable } from '@angular/core';
import { fromHttpResponse } from '@backbase/actions-common-ang';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/arrangements";
export class ActionsProductNotificationsSettingsDataService {
    constructor(accountHttpService) {
        this.accountHttpService = accountHttpService;
    }
    /**
     * Method to get account by ID.
     *
     * @param arrangementId - arrangement ID
     * @returns account data
     */
    getAccountById(arrangementId) {
        return this.accountHttpService.getArrangementById({ arrangementId }).pipe(map(fromHttpResponse));
    }
}
ActionsProductNotificationsSettingsDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsDataService, deps: [{ token: i1.ArrangementsHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
ActionsProductNotificationsSettingsDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ArrangementsHttpService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy1wcm9kdWN0LW5vdGlmaWNhdGlvbnMtc2V0dGluZ3MtZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hY3Rpb25zLXByb2R1Y3Qtbm90aWZpY2F0aW9ucy1zZXR0aW5ncy13aWRnZXQtYW5nL3NyYy9zZXJ2aWNlcy9hY3Rpb25zLXByb2R1Y3Qtbm90aWZpY2F0aW9ucy1zZXR0aW5ncy1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUdoRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUdyQyxNQUFNLE9BQU8sOENBQThDO0lBQ3pELFlBQTZCLGtCQUEyQztRQUEzQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQXlCO0lBQUcsQ0FBQztJQUU1RTs7Ozs7T0FLRztJQUNILGNBQWMsQ0FBQyxhQUFxQjtRQUNsQyxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFDbkcsQ0FBQzs7NElBWFUsOENBQThDO2dKQUE5Qyw4Q0FBOEM7NEZBQTlDLDhDQUE4QztrQkFEMUQsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZyb21IdHRwUmVzcG9uc2UgfSBmcm9tICdAYmFja2Jhc2UvYWN0aW9ucy1jb21tb24tYW5nJztcbmltcG9ydCB7IEFjY291bnRBcnJhbmdlbWVudEl0ZW0sIEFycmFuZ2VtZW50c0h0dHBTZXJ2aWNlIH0gZnJvbSAnQGJhY2tiYXNlL2RhdGEtYW5nL2FycmFuZ2VtZW50cyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBY3Rpb25zUHJvZHVjdE5vdGlmaWNhdGlvbnNTZXR0aW5nc0RhdGFTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhY2NvdW50SHR0cFNlcnZpY2U6IEFycmFuZ2VtZW50c0h0dHBTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBNZXRob2QgdG8gZ2V0IGFjY291bnQgYnkgSUQuXG4gICAqXG4gICAqIEBwYXJhbSBhcnJhbmdlbWVudElkIC0gYXJyYW5nZW1lbnQgSURcbiAgICogQHJldHVybnMgYWNjb3VudCBkYXRhXG4gICAqL1xuICBnZXRBY2NvdW50QnlJZChhcnJhbmdlbWVudElkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEFjY291bnRBcnJhbmdlbWVudEl0ZW0+IHtcbiAgICByZXR1cm4gdGhpcy5hY2NvdW50SHR0cFNlcnZpY2UuZ2V0QXJyYW5nZW1lbnRCeUlkKHsgYXJyYW5nZW1lbnRJZCB9KS5waXBlKG1hcChmcm9tSHR0cFJlc3BvbnNlKSk7XG4gIH1cbn1cbiJdfQ==