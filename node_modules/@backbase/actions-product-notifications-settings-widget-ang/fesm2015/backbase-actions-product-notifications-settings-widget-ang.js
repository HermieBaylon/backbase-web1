import * as i9 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Component, Input, Directive, Injectable, ViewChild, NgModule } from '@angular/core';
import * as i6 from '@backbase/actions-common-ang';
import { firstNonEmptyString, fromHttpResponse, ActionsBasePropertiesService, SpecificationIds, getPropertyValue, secondsToMilliseconds, ActionsCommonModule } from '@backbase/actions-common-ang';
import * as i1$2 from '@backbase/actions-store-ang';
import { ActionsStoreModel, ActionsStoreModule } from '@backbase/actions-store-ang';
import * as i1$3 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i8 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i2 from '@backbase/ui-ang/iban-pipe';
import { BbIbanPipeModule } from '@backbase/ui-ang/iban-pipe';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i7 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i1 from '@backbase/ui-ang/payment-card-number-pipe';
import { PaymentCardNumberModule } from '@backbase/ui-ang/payment-card-number-pipe';
import { ProductItemBasicAccountModule } from '@backbase/ui-ang/product-item-basic-account';
import { ProductItemCreditCardModule } from '@backbase/ui-ang/product-item-credit-card';
import { ProductItemCurrentAccountModule } from '@backbase/ui-ang/product-item-current-account';
import { ProductItemDebitCardModule } from '@backbase/ui-ang/product-item-debit-card';
import { ProductItemInvestmentAccountModule } from '@backbase/ui-ang/product-item-investment-account';
import { ProductItemLoanModule } from '@backbase/ui-ang/product-item-loan';
import { ProductItemSavingsAccountModule } from '@backbase/ui-ang/product-item-savings-account';
import { ProductItemTermDepositModule } from '@backbase/ui-ang/product-item-term-deposit';
import { Subject, ReplaySubject, of, BehaviorSubject, combineLatest } from 'rxjs';
import { map, switchMap, publishReplay, refCount, mapTo, startWith, first, withLatestFrom, catchError } from 'rxjs/operators';
import * as i1$1 from '@backbase/data-ang/arrangements';

var ProductKindNames;
(function (ProductKindNames) {
    ProductKindNames["CurrentAccount"] = "Current Account";
    ProductKindNames["SavingsAccount"] = "Savings Account";
    ProductKindNames["TermDeposit"] = "Term Deposit";
    ProductKindNames["Loan"] = "Loan";
    ProductKindNames["CreditCard"] = "Credit Card";
    ProductKindNames["DebitCard"] = "Debit Card";
    ProductKindNames["InvestmentAccount"] = "Investment Account";
})(ProductKindNames || (ProductKindNames = {}));

class ActionsProductItemCardComponent {
    constructor() {
        /**
         * Product kind names enum.
         */
        this.productKindNames = ProductKindNames;
        /**
         * Configuration that determines how a payment card number should be formatted.
         */
        this.productNumberFormat = {
            length: 0,
            maskRange: [0, 12],
            segments: 4,
        };
    }
    /**
     * Method to get account number.
     *
     * @param args - accounts array
     */
    retrieveAccountNumber(...args) {
        const account = args[0];
        switch (account.productKindName) {
            case ProductKindNames.TermDeposit:
                return firstNonEmptyString(account.IBAN);
            case ProductKindNames.Loan:
            case ProductKindNames.CreditCard:
            case ProductKindNames.InvestmentAccount:
                return firstNonEmptyString(account.creditCardAccountNumber, account.IBAN, account.BBAN);
            case ProductKindNames.DebitCard:
                return firstNonEmptyString(account.creditCardAccountNumber);
            default:
                return firstNonEmptyString(account.IBAN, account.BBAN);
        }
    }
    /**
     * Method to get account alias.
     *
     * @param account - account data
     * @returns account alias name
     */
    getAlias(account) {
        return firstNonEmptyString(account.userPreferences && account.userPreferences.alias, account.bankAlias, account.name);
    }
}
ActionsProductItemCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductItemCardComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ActionsProductItemCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ActionsProductItemCardComponent, selector: "bb-actions-product-item-card", inputs: { account: "account" }, ngImport: i0, template: "<ng-container bbActionsProductItemCardCustomizableDirective [bbHostRef]=\"this\" [bbTemplateContext]=\"account\">\n</ng-container>\n\n<ng-template bbActionsProductItemCardCustomizableDirective let-hostRef let-account=\"context\">\n  <ng-container>\n    <div>\n      <div data-role=\"card-title\" class=\"bb-text-bold\" role=\"heading\" aria-level=\"2\">\n        {{ hostRef.getAlias(account) }}\n      </div>\n      <div\n        data-role=\"card-sub-title\"\n        class=\"text-small bb-text-support bb-block bb-block--xl\"\n        role=\"heading\"\n        aria-level=\"3\"\n      >\n        {{ hostRef.retrieveAccountNumber(account) | bbIban | paymentCardNumber: productNumberFormat }}\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n", directives: [{ type: i0.forwardRef(function () { return ActionsProductItemCardCustomizableDirective; }), selector: "[bbActionsProductItemCardCustomizableDirective]" }], pipes: { "paymentCardNumber": i0.forwardRef(function () { return i1.PaymentCardNumberPipe; }), "bbIban": i0.forwardRef(function () { return i2.BbIbanPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductItemCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-actions-product-item-card',
                    templateUrl: './actions-product-item-card.component.html',
                }]
        }], propDecorators: { account: [{
                type: Input
            }] } });
class ActionsProductItemCardCustomizableDirective extends BbTemplate {
}
ActionsProductItemCardCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductItemCardCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ActionsProductItemCardCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ActionsProductItemCardCustomizableDirective, selector: "[bbActionsProductItemCardCustomizableDirective]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductItemCardCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbActionsProductItemCardCustomizableDirective]',
                }]
        }] });

class ActionsProductNotificationsSettingsRouterService {
    constructor() {
        this.productNotificationsSettingsSavedSubject = new Subject();
        /**
         * Stream of settings save events that trigger navigation.
         */
        this.settingsSavedNavigation$ = this.productNotificationsSettingsSavedSubject.asObservable();
        this.productNotificationsSettingsCancelledSubject = new Subject();
        /**
         * Stream of settings cancel events that trigger navigation.
         */
        this.settingsCancelledNavigation$ = this.productNotificationsSettingsCancelledSubject.asObservable();
        this.selectedAccountIdSubject = new ReplaySubject(1);
        /**
         * Stream with selected account IDs.
         */
        this.selectedAccountId$ = this.selectedAccountIdSubject.asObservable();
    }
    /**
     * Selected account ID setter.
     */
    set selectedAccountId(value) {
        this.selectedAccountIdSubject.next(value);
    }
    /**
     * Method to emit settings saved event in a stream.
     */
    emitSettingsSavedNavigation() {
        this.productNotificationsSettingsSavedSubject.next();
    }
    /**
     * Method to emit settings cancelled event in a stream.
     */
    emitSettingsCancelledNavigation() {
        this.productNotificationsSettingsCancelledSubject.next();
    }
}
ActionsProductNotificationsSettingsRouterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsRouterService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ActionsProductNotificationsSettingsRouterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsRouterService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsRouterService, decorators: [{
            type: Injectable
        }] });

class ActionsProductNotificationsSettingsDataService {
    constructor(accountHttpService) {
        this.accountHttpService = accountHttpService;
    }
    /**
     * Method to get account by ID.
     *
     * @param arrangementId - arrangement ID
     * @returns account data
     */
    getAccountById(arrangementId) {
        return this.accountHttpService.getArrangementById({ arrangementId }).pipe(map(fromHttpResponse));
    }
}
ActionsProductNotificationsSettingsDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsDataService, deps: [{ token: i1$1.ArrangementsHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
ActionsProductNotificationsSettingsDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$1.ArrangementsHttpService }]; } });

const DEFAULT_SPECIFICATION_IDS = '5, 6, 13, 14';
class ActionsProductNotificationsSettingsPropertiesService extends ActionsBasePropertiesService {
    constructor() {
        super();
    }
    /**
     * Method to get specification IDs.
     *
     * @returns specification IDs array
     */
    getSpecificationIDs() {
        return of(DEFAULT_SPECIFICATION_IDS).pipe(map(data => data.replace(/\s/g, '').split(',')));
    }
}
ActionsProductNotificationsSettingsPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsPropertiesService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ActionsProductNotificationsSettingsPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });

class ActionsProductSettingsPageComponent {
    constructor(store, routerService, widgetDataService, widgetPropertiesService) {
        this.store = store;
        this.routerService = routerService;
        this.widgetDataService = widgetDataService;
        this.widgetPropertiesService = widgetPropertiesService;
        this.notificationDismissTime$$ = new BehaviorSubject(undefined);
        this.specificationIDs$$ = new BehaviorSubject(undefined);
        /**
         * Stream of Specifications with action recipe.
         */
        this.specificationsWithActionRecipe$ = this.store.specificationsWithActionRecipe$;
        this.hasAccountLoadingError = new BehaviorSubject(false);
        /**
         * Stream of loading errors.
         */
        this.loadingError$ = combineLatest([
            this.store.actionRecipesError$,
            this.store.specificationsError$,
            this.hasAccountLoadingError,
        ]).pipe(map(errors => errors.find(Boolean)));
        /**
         * Specification IDs enum.
         */
        this.specificationIds = SpecificationIds;
        this.accountId$ = this.routerService.selectedAccountId$;
        this.account$ = this.accountId$.pipe(switchMap(id => this.getAccount(id)), publishReplay(), refCount());
        this.isLoading$ = combineLatest([
            this.store.actionRecipesLoading$,
            this.store.specificationsLoading$,
            this.account$.pipe(mapTo(false), startWith(true)),
        ]).pipe(map(loadings => loadings.some(Boolean)));
    }
    /**
     * Notification dismiss time value setter.
     * Configurable via model property.
     */
    set notificationDismissTime(value) {
        this.notificationDismissTime$$.next(value);
    }
    /**
     * Specification IDs value setter.
     * Configurable via model property.
     */
    set specificationIDs(value) {
        this.specificationIDs$$.next(value);
    }
    ngOnInit() {
        const specificationIdsStream = getPropertyValue(this.specificationIDs$$, this.widgetPropertiesService.getSpecificationIDs());
        this.accountId$.pipe(first(), withLatestFrom(specificationIdsStream)).subscribe(([accountId, specificationIDs]) => {
            const specificationIDsSet = new Set(specificationIDs);
            this.store.dispatchLoadSpecifications({ specificationIds: specificationIDsSet });
            this.store.dispatchLoadActionRecipes({
                specificationIds: specificationIDsSet,
                arrangementId: accountId,
            });
        });
    }
    /**
     * Method to submit action recipe form.
     *
     * @param formValue - action recipe form value
     */
    onSubmit(formValue) {
        const notificationDismissTime$ = getPropertyValue(this.notificationDismissTime$$, this.widgetPropertiesService.getNotificationDismissTimeProperty());
        combineLatest([this.accountId$, notificationDismissTime$])
            .pipe(first())
            .subscribe(([arrangementId, ttl]) => {
            const errorNotification = {
                header: Object.create(this.errorNotificationHeaderTemplate),
                message: Object.create(this.errorNotificationMessageTemplate),
                modifier: 'error',
                ttl,
            };
            this.store.dispatchSaveActionRecipe({
                actionRecipe: formValue,
                arrangementId,
                warningNotification: errorNotification,
            });
        });
    }
    getAccount(id) {
        return this.widgetDataService.getAccountById(id).pipe(catchError(() => {
            this.hasAccountLoadingError.next(true);
            return of({});
        }));
    }
}
ActionsProductSettingsPageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductSettingsPageComponent, deps: [{ token: i1$2.ActionsStoreModel }, { token: ActionsProductNotificationsSettingsRouterService }, { token: ActionsProductNotificationsSettingsDataService }, { token: ActionsProductNotificationsSettingsPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
ActionsProductSettingsPageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ActionsProductSettingsPageComponent, selector: "bb-actions-product-settings-page", inputs: { notificationDismissTime: "notificationDismissTime", specificationIDs: "specificationIDs" }, viewQueries: [{ propertyName: "errorNotificationHeaderTemplate", first: true, predicate: ["errorNotificationHeader"], descendants: true }, { propertyName: "errorNotificationMessageTemplate", first: true, predicate: ["errorNotificationMessage"], descendants: true }], ngImport: i0, template: "<ng-container\n  bbActionsProductSettingsPageCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    account: account$ | async,\n    loadingError: loadingError$ | async,\n    loading: isLoading$ | async,\n    specificationsWithAction: specificationsWithActionRecipe$ | async,\n    specificationIds: specificationIds\n  }\"\n></ng-container>\n\n<ng-template\n  bbActionsProductSettingsPageCustomizable\n  let-host\n  let-actions=\"context.actions\"\n  let-specifications=\"context.specifications\"\n  let-account=\"context.account\"\n  let-loadingError=\"context.loadingError\"\n  let-loading=\"context.loading\"\n  let-specificationsWithAction=\"context.specificationsWithAction\"\n  let-specificationIds=\"context.specificationIds\"\n>\n  <ng-container *ngIf=\"!loading; else loadingState\">\n    <ng-container *ngIf=\"!loadingError; else errorState\">\n      <bb-actions-product-item-card [account]=\"account\"></bb-actions-product-item-card>\n\n      <div class=\"bb-block bb-block--xl\">\n        <bb-actions-account-balance-recipe-form\n          *ngIf=\"specificationsWithAction[specificationIds.AccountBalance] as specificationWithAction\"\n          [account]=\"account\"\n          [specification]=\"specificationWithAction.specification\"\n          [actionRecipe]=\"specificationWithAction.actionRecipe\"\n          (submit)=\"host.onSubmit($event)\"\n        ></bb-actions-account-balance-recipe-form>\n      </div>\n\n      <div class=\"bb-block bb-block--xl\">\n        <bb-actions-transactions-recipe-form\n          *ngIf=\"specificationsWithAction[specificationIds.Transactions] as specificationWithAction\"\n          [specification]=\"specificationWithAction.specification\"\n          [actionRecipe]=\"specificationWithAction.actionRecipe\"\n          (submit)=\"host.onSubmit($event)\"\n        ></bb-actions-transactions-recipe-form>\n      </div>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #loadingState>\n    <div class=\"card\">\n      <bb-loading-indicator-ui\n        class=\"bb-state-container\"\n        loaderSize=\"lg\"\n        text=\"Loading...\"\n        i18n-text=\"Loading... text@@actions-product-settings-page.title\"\n      ></bb-loading-indicator-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #errorState>\n    <div class=\"card\">\n      <bb-empty-state-ui\n        class=\"bb-state-container\"\n        data-role=\"error-state\"\n        iconSize=\"xxl\"\n        iconModifier=\"error-outline\"\n        title=\"Unknown Error\"\n        i18n-title=\"\n          Actions product notifications settings are not loading title@@actions-product-settings-page.error-state.title\"\n        subtitle=\"Try to reload the page or contact the system administrator.\"\n        i18n-subtitle=\"\n          Actions product notifications settings are not loading\n          subtitle@@actions-product-settings-page.error-state.subtitle\"\n      >\n      </bb-empty-state-ui>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #errorNotificationHeader>\n  <ng-container bbActionsProductSettingsPageErrorNotificationHeaderCustomizable [bbHostRef]=\"this\"> </ng-container>\n</ng-template>\n\n<ng-template #errorNotificationMessage>\n  <ng-container bbActionsProductSettingsPageErrorNotificationMessageCustomizable [bbHostRef]=\"this\"> </ng-container>\n</ng-template>\n\n<ng-template bbActionsProductSettingsPageErrorNotificationHeaderCustomizable>\n  <span i18n=\"Couldn't save changes@@actions-product-settings-page.error-notification.header\"\n    >Couldn't make changes</span\n  >\n</ng-template>\n\n<ng-template bbActionsProductSettingsPageErrorNotificationMessageCustomizable>\n  <div i18n=\"Please try again later@@actions-product-settings-page.error-notification.message\">\n    Please try again later\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return ActionsProductItemCardComponent; }), selector: "bb-actions-product-item-card", inputs: ["account"] }, { type: i0.forwardRef(function () { return i6.ӨActionsAccountBalanceRecipeFormComponent; }), selector: "bb-actions-account-balance-recipe-form" }, { type: i0.forwardRef(function () { return i6.ӨActionsTransactionsRecipeFormComponent; }), selector: "bb-actions-transactions-recipe-form" }, { type: i0.forwardRef(function () { return i7.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i8.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return ActionsProductSettingsPageCustomizableDirective; }), selector: "[bbActionsProductSettingsPageCustomizable]" }, { type: i0.forwardRef(function () { return i9.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return ActionsProductSettingsPageErrorNotificationHeaderCustomizableDirective; }), selector: "[bbActionsProductSettingsPageErrorNotificationHeaderCustomizable]" }, { type: i0.forwardRef(function () { return ActionsProductSettingsPageErrorNotificationMessageCustomizableDirective; }), selector: "[bbActionsProductSettingsPageErrorNotificationMessageCustomizable]" }], pipes: { "async": i0.forwardRef(function () { return i9.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductSettingsPageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-actions-product-settings-page',
                    templateUrl: './actions-product-settings-page.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.ActionsStoreModel }, { type: ActionsProductNotificationsSettingsRouterService }, { type: ActionsProductNotificationsSettingsDataService }, { type: ActionsProductNotificationsSettingsPropertiesService }]; }, propDecorators: { notificationDismissTime: [{
                type: Input
            }], specificationIDs: [{
                type: Input
            }], errorNotificationHeaderTemplate: [{
                type: ViewChild,
                args: ['errorNotificationHeader', { static: false }]
            }], errorNotificationMessageTemplate: [{
                type: ViewChild,
                args: ['errorNotificationMessage', { static: false }]
            }] } });
class ActionsProductSettingsPageCustomizableDirective extends BbTemplate {
}
ActionsProductSettingsPageCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductSettingsPageCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ActionsProductSettingsPageCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ActionsProductSettingsPageCustomizableDirective, selector: "[bbActionsProductSettingsPageCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductSettingsPageCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbActionsProductSettingsPageCustomizable]',
                }]
        }] });
class ActionsProductSettingsPageErrorNotificationHeaderCustomizableDirective extends BbTemplate {
}
ActionsProductSettingsPageErrorNotificationHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductSettingsPageErrorNotificationHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ActionsProductSettingsPageErrorNotificationHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ActionsProductSettingsPageErrorNotificationHeaderCustomizableDirective, selector: "[bbActionsProductSettingsPageErrorNotificationHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductSettingsPageErrorNotificationHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbActionsProductSettingsPageErrorNotificationHeaderCustomizable]',
                }]
        }] });
class ActionsProductSettingsPageErrorNotificationMessageCustomizableDirective extends BbTemplate {
}
ActionsProductSettingsPageErrorNotificationMessageCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductSettingsPageErrorNotificationMessageCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ActionsProductSettingsPageErrorNotificationMessageCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: ActionsProductSettingsPageErrorNotificationMessageCustomizableDirective, selector: "[bbActionsProductSettingsPageErrorNotificationMessageCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductSettingsPageErrorNotificationMessageCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbActionsProductSettingsPageErrorNotificationMessageCustomizable]',
                }]
        }] });

class ActionsProductNotificationsSettingsWidgetComponent {
    constructor(routerService) {
        this.routerService = routerService;
        this.specificationIDs$$ = new BehaviorSubject(undefined);
        this.specificationIDs$ = this.specificationIDs$$.asObservable();
        this.notificationDismissTime$$ = new BehaviorSubject(undefined);
        this.notificationDismissTime$ = this.notificationDismissTime$$
            .asObservable()
            .pipe(map(seconds => (seconds ? secondsToMilliseconds(seconds) : undefined)));
        this.destroy$ = new Subject();
    }
    /**
     * Input for selected account id.
     */
    set selectedAccountId(value) {
        this.routerService.selectedAccountId = value;
    }
    /**
     * Specification IDs value setter.
     * Configurable via model property.
     */
    set specificationIDs(value) {
        this.specificationIDs$$.next(value);
    }
    /**
     * Notification dismiss time value setter
     */
    set notificationDismissTime(value) {
        this.notificationDismissTime$$.next(value);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
ActionsProductNotificationsSettingsWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsWidgetComponent, deps: [{ token: ActionsProductNotificationsSettingsRouterService }], target: i0.ɵɵFactoryTarget.Component });
ActionsProductNotificationsSettingsWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: ActionsProductNotificationsSettingsWidgetComponent, selector: "bb-actions-product-notifications-settings-widget", inputs: { selectedAccountId: "selectedAccountId", specificationIDs: "specificationIDs", notificationDismissTime: "notificationDismissTime" }, providers: [
        ActionsStoreModel,
        ActionsProductNotificationsSettingsPropertiesService,
        ActionsProductNotificationsSettingsDataService,
        ActionsProductNotificationsSettingsRouterService,
    ], ngImport: i0, template: '<bb-actions-product-settings-page [specificationIDs]="specificationIDs$ | async" [notificationDismissTime]="notificationDismissTime$ | async"></bb-actions-product-settings-page>', isInline: true, components: [{ type: ActionsProductSettingsPageComponent, selector: "bb-actions-product-settings-page", inputs: ["notificationDismissTime", "specificationIDs"] }], pipes: { "async": i9.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-actions-product-notifications-settings-widget',
                    template: '<bb-actions-product-settings-page [specificationIDs]="specificationIDs$ | async" [notificationDismissTime]="notificationDismissTime$ | async"></bb-actions-product-settings-page>',
                    providers: [
                        ActionsStoreModel,
                        ActionsProductNotificationsSettingsPropertiesService,
                        ActionsProductNotificationsSettingsDataService,
                        ActionsProductNotificationsSettingsRouterService,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: ActionsProductNotificationsSettingsRouterService }]; }, propDecorators: { selectedAccountId: [{
                type: Input
            }], specificationIDs: [{
                type: Input
            }], notificationDismissTime: [{
                type: Input
            }] } });

const pages = [ActionsProductSettingsPageComponent];
const components = [
    ...pages,
    ActionsProductNotificationsSettingsWidgetComponent,
    ActionsProductSettingsPageComponent,
    ActionsProductItemCardComponent,
];
const directives = [
    ActionsProductItemCardCustomizableDirective,
    ActionsProductSettingsPageCustomizableDirective,
    ActionsProductSettingsPageErrorNotificationHeaderCustomizableDirective,
    ActionsProductSettingsPageErrorNotificationMessageCustomizableDirective,
];
const uiModules = [
    EmptyStateModule,
    LoadingIndicatorModule,
    BbIbanPipeModule,
    ProductItemCurrentAccountModule,
    AmountModule,
    ButtonModule,
    ProductItemSavingsAccountModule,
    ProductItemTermDepositModule,
    ProductItemLoanModule,
    ProductItemCreditCardModule,
    ProductItemDebitCardModule,
    ProductItemInvestmentAccountModule,
    ProductItemBasicAccountModule,
    PaymentCardNumberModule,
];
class ActionsProductNotificationsSettingsWidgetModule {
}
ActionsProductNotificationsSettingsWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ActionsProductNotificationsSettingsWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsWidgetModule, declarations: [ActionsProductSettingsPageComponent, ActionsProductNotificationsSettingsWidgetComponent,
        ActionsProductSettingsPageComponent,
        ActionsProductItemCardComponent, ActionsProductItemCardCustomizableDirective,
        ActionsProductSettingsPageCustomizableDirective,
        ActionsProductSettingsPageErrorNotificationHeaderCustomizableDirective,
        ActionsProductSettingsPageErrorNotificationMessageCustomizableDirective], imports: [CommonModule,
        ActionsCommonModule,
        ActionsStoreModule, i1$3.BackbaseCoreModule, EmptyStateModule,
        LoadingIndicatorModule,
        BbIbanPipeModule,
        ProductItemCurrentAccountModule,
        AmountModule,
        ButtonModule,
        ProductItemSavingsAccountModule,
        ProductItemTermDepositModule,
        ProductItemLoanModule,
        ProductItemCreditCardModule,
        ProductItemDebitCardModule,
        ProductItemInvestmentAccountModule,
        ProductItemBasicAccountModule,
        PaymentCardNumberModule], exports: [ActionsProductSettingsPageComponent, ActionsProductNotificationsSettingsWidgetComponent,
        ActionsProductSettingsPageComponent,
        ActionsProductItemCardComponent, ActionsProductItemCardCustomizableDirective,
        ActionsProductSettingsPageCustomizableDirective,
        ActionsProductSettingsPageErrorNotificationHeaderCustomizableDirective,
        ActionsProductSettingsPageErrorNotificationMessageCustomizableDirective, EmptyStateModule,
        LoadingIndicatorModule,
        BbIbanPipeModule,
        ProductItemCurrentAccountModule,
        AmountModule,
        ButtonModule,
        ProductItemSavingsAccountModule,
        ProductItemTermDepositModule,
        ProductItemLoanModule,
        ProductItemCreditCardModule,
        ProductItemDebitCardModule,
        ProductItemInvestmentAccountModule,
        ProductItemBasicAccountModule,
        PaymentCardNumberModule] });
ActionsProductNotificationsSettingsWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsWidgetModule, imports: [[
            CommonModule,
            ActionsCommonModule,
            ActionsStoreModule,
            BackbaseCoreModule.withConfig({
                classMap: { ActionsProductNotificationsSettingsWidgetComponent },
            }),
            ...uiModules,
        ], EmptyStateModule,
        LoadingIndicatorModule,
        BbIbanPipeModule,
        ProductItemCurrentAccountModule,
        AmountModule,
        ButtonModule,
        ProductItemSavingsAccountModule,
        ProductItemTermDepositModule,
        ProductItemLoanModule,
        ProductItemCreditCardModule,
        ProductItemDebitCardModule,
        ProductItemInvestmentAccountModule,
        ProductItemBasicAccountModule,
        PaymentCardNumberModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsProductNotificationsSettingsWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components, ...directives],
                    imports: [
                        CommonModule,
                        ActionsCommonModule,
                        ActionsStoreModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { ActionsProductNotificationsSettingsWidgetComponent },
                        }),
                        ...uiModules,
                    ],
                    entryComponents: [...pages],
                    exports: [...components, ...directives, ...uiModules],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ActionsProductNotificationsSettingsWidgetComponent, ActionsProductNotificationsSettingsWidgetModule, ActionsProductSettingsPageComponent, ActionsProductSettingsPageCustomizableDirective, ActionsProductSettingsPageErrorNotificationHeaderCustomizableDirective, ActionsProductSettingsPageErrorNotificationMessageCustomizableDirective, ActionsProductItemCardComponent as ӨActionsProductItemCardComponent, ActionsProductItemCardCustomizableDirective as ӨActionsProductItemCardCustomizableDirective };
//# sourceMappingURL=backbase-actions-product-notifications-settings-widget-ang.js.map
