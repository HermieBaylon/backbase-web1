"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDataModuleVersion = exports.parseJsonFile = exports.getWorkspaceJson = exports.getLibInfo = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const workspace_models_1 = require("@schematics/angular/utility/workspace-models");
function getLibInfo(tree) {
    const angularJson = getWorkspaceJson(tree);
    return Object.values(angularJson.projects).map((project) => {
        var _a, _b, _c;
        if (typeof project === 'string') {
            project = parseJsonFile(tree, project);
        }
        return {
            root: project.root,
            sourceRoot: project.sourceRoot,
            isNx: !!((_c = (_b = (_a = project.architect) === null || _a === void 0 ? void 0 : _a.build) === null || _b === void 0 ? void 0 : _b.builder) === null || _c === void 0 ? void 0 : _c.startsWith('@nrwl/')),
            isLibrary: project.projectType === workspace_models_1.ProjectType.Library,
        };
    });
}
exports.getLibInfo = getLibInfo;
function getWorkspaceJson(tree) {
    const file = ['angular.json', 'workspace.json'].find((f) => tree.exists(f));
    if (!file) {
        throw new schematics_1.SchematicsException('Neither angular.json nor workspace.json exists');
    }
    return parseJsonFile(tree, file);
}
exports.getWorkspaceJson = getWorkspaceJson;
function parseJsonFile(tree, path) {
    return JSON.parse(tree.read(path).toString('utf8'));
}
exports.parseJsonFile = parseJsonFile;
function getDataModuleVersion(name, dataAngPackageJson) {
    const version = dataAngPackageJson.dependencies[name] || 'latest';
    return /^\d/.exec(version) ? `^${version}` : version;
}
exports.getDataModuleVersion = getDataModuleVersion;
