"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/schematics/testing");
const schematics_1 = require("@angular-devkit/schematics");
const core_1 = require("@angular-devkit/core");
const fixtures = {
    '/libs/foo/test.ts': `
  import { Whatever, ApprovalsHttpService, DataGroupsHttpService } from '@backbase/accesscontrol-http-ang';
  import { SomeFakeService } from '@backbase/fake-client-http-ang';
  import { ApprovalTypeAssignmentsHttpService, ApprovalsHttpService, ApprovalTypesHttpService, NotARealName } from '@backbase/approval-http-ang';
`,
    '/libs/foo/journey.module.ts': `
  import { CommonModule } from '@angular/common';
  import { ModuleWithProviders, NgModule } from '@angular/core';
  import { ReactiveFormsModule } from '@angular/forms';
  import { provideRoutes, RouterModule, Routes } from '@angular/router';

  export const defaultRoutes = []

  @NgModule({
    declarations: [],
    imports: [
      CommonModule,
      RouterModule,
      ReactiveFormsModule,
    ],
    exports: [],
  })
  export class ExampleJourneyModule {
    static forRoot(
      data: { [key: string]: any; routes: Routes } = { routes: defaultRoutes },
    ): ModuleWithProviders<ExampleJourneyModule> {
      return {
        ngModule: ExampleJourneyModule,
        providers: [provideRoutes(data.routes)],
      };
    }
  }
  `,
    '/libs/foo/package.json': JSON.stringify({
        name: '@backbase/foo-journey',
        something: {
            '@backbase/accesscontrol-http-ang': '^4.0.0',
            '@backbase/approval-http-ang': '^1.0.0',
        },
    }),
    '/libs/foo/index.ts': `
    export { ExampleJourneyModule } from './lib/test';
    export { Foo } from './src/bar';
  `,
    '/libs/foo/ng-package.json': JSON.stringify({
        $schema: '../../node_modules/ng-packagr/ng-package.schema.json',
        dest: '../../dist/libs/ach-positive-pay-journey',
        lib: {
            entryFile: 'src/index.ts',
        },
        allowedNonPeerDependencies: ['foo', 'bar'],
    }),
    '/libs/bar/test.ts': `
    import { X } from '@backbase/actions-http-ang';
    import { AccountsHttpService, BalancesHttpService } from '@backbase/arrangement-manager-http-ang';
  `,
    '/libs/bar/package.json': `{"name": "@backbase/bar-journey-ang"}`,
    '/libs/bar/journey.module.ts': `
  import { CommonModule } from '@angular/common';
  import { Something } from 'baz';
  @NgModule({
    declarations: [],
    imports: [],
    exports: [],
  })
  export class BarJourneyModule {
    static forRoot(
      data: { [key: string]: any; routes: Routes } = { routes: defaultRoutes },
    ): ModuleWithProviders<ExampleJourneyModule> {
      return {
        ngModule: ExampleJourneyModule,
        providers: [provideRoutes(data.routes)],
      };
    }
  }
  `,
    '/libs/bar/index.ts': ``,
    '/libs/bar/project.json': JSON.stringify({
        root: 'libs/bar',
        sourceRoot: 'libs/bar',
        projectType: 'library',
        architect: {
            build: { builder: '@nrwl/builder-mock' },
        },
    }),
    'package.json': JSON.stringify({
        name: 'package-project',
        dependencies: {
            '@backbase/actions-http-ang': '1.0.0',
            '@backbase/accesscontrol-http-ang': '2.0.0',
            '@backbase/approval-http-ang': '3.0.0',
        },
    }),
    '/libs/baz/public_api.ts': `
    export { Whatever } from './lib/whatever';
    export { Whatever2 } from './src/whatever2';
  `,
    '/libs/baz/test.ts': `
  import { SomeFakeService } from '@backbase/fake-client-http-ang';
  import { BillPayAccountsService } from '@backbase/billpay-http-ang';
`,
    '/libs/baz/package.json': `{"name": "baz"}`,
    '/libs/baz/library.module.ts': `
  import { CommonModule } from '@angular/common';
  @NgModule({
    declarations: [],
    imports: [],
    exports: [],
  })
  export class ExampleLibModule {}
  `,
    'angular.json': JSON.stringify({
        version: 1,
        projects: {
            foo: {
                projectType: 'library',
                root: 'libs/foo',
                sourceRoot: 'libs/foo',
                architect: {
                    build: { builder: '@nrwl/builder-mock' },
                },
            },
            bar: '/libs/bar/project.json',
            baz: {
                projectType: 'library',
                root: 'libs/baz',
                sourceRoot: 'libs/baz',
                architect: {
                    build: { builder: '@angular/builder-mock' },
                },
            },
        },
    }),
};
describe('remove-collection migration', () => {
    let result;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        const schematicRunner = new testing_1.SchematicTestRunner('migrations', require.resolve('../../../migrations.json'));
        const host = new core_1.virtualFs.test.TestHost(fixtures);
        const tree = new testing_1.UnitTestTree(new schematics_1.HostTree(host));
        result = yield schematicRunner.runSchematicAsync('independent-services', {}, tree).toPromise();
    }));
    it('should add imports to the journey module', () => {
        const tsContent = result.readContent('/libs/foo/journey.module.ts');
        expect(tsContent).toContain(`import { ApprovalsHttpService, DataGroupsHttpService } from '@backbase/accesscontrol-http-ang';`);
    });
    it('should not add any other imports to the journey module', () => {
        const tsContent = result.readContent('/libs/foo/journey.module.ts');
        expect(tsContent).not.toContain(`import { SomeFakeService } from '@backbase/fake-client-http-ang';`);
    });
    it('should only add valid http service imports', () => {
        const tsContent = result.readContent('/libs/foo/journey.module.ts');
        expect(tsContent).not.toContain(`Whatever`);
    });
    it('should take care of Service duplicated names', () => {
        const tsContent = result.readContent('/libs/foo/journey.module.ts');
        expect(tsContent).not.toContain(`import { ApprovalTypeAssignmentsHttpService, ApprovalsHttpService, ApprovalTypesHttpService } from '@backbase/approval-http-ang';`);
        expect(tsContent).toContain(`import { ApprovalTypeAssignmentsHttpService, ApprovalsHttpService as ApprovalApprovalsHttpService, ApprovalTypesHttpService } from '@backbase/approval-http-ang';`);
    });
    it('should add all http services to the journey module providers', () => {
        const tsContent = result.readContent('/libs/foo/journey.module.ts');
        expect(tsContent).toContain(`providers: [ApprovalsHttpService, DataGroupsHttpService, ApprovalTypeAssignmentsHttpService, ApprovalApprovalsHttpService, ApprovalTypesHttpService],`);
    });
    it('should add named exports of the BASE_PATH tokens to the public API of journey library', () => {
        const tsContent = result.readContent('/libs/foo/index.ts');
        console.log(tsContent);
        expect(tsContent).toContain(`export { ACCESS_CONTROL_BASE_PATH as FOO_JOURNEY_ACCESS_CONTROL_BASE_PATH } from '@backbase/accesscontrol-http-ang';`);
        expect(tsContent).toContain(`export { APPROVAL_BASE_PATH as FOO_JOURNEY_APPROVAL_BASE_PATH } from '@backbase/approval-http-ang';`);
    });
    it('should not add BASE_PATH tokens to the public API of library if it is not a journey', () => {
        const tsContent = result.readContent('/libs/baz/public_api.ts');
        expect(tsContent.trim()).toEqual(fixtures['/libs/baz/public_api.ts'].trim());
    });
    it('should add http clients to depepndencies of the library', () => {
        const packageJsonContent = result.readContent('/libs/foo/package.json');
        expect(JSON.parse(packageJsonContent).dependencies).toEqual({
            '@backbase/accesscontrol-http-ang': '^2.0.0',
            '@backbase/approval-http-ang': '^3.0.0',
        });
    });
    it('should remove httpClients from peer dependencies if any', () => {
        const packageJsonContent = result.readContent('/libs/foo/package.json');
        expect(JSON.parse(packageJsonContent).peerDependencies).toEqual({});
    });
    it('should add http clients to allowed depepndencies of the library', () => {
        const packageJsonContent = result.readContent('/libs/foo/ng-package.json');
        const allowedNonPeerDependencies = JSON.parse(packageJsonContent).allowedNonPeerDependencies;
        expect(allowedNonPeerDependencies).toContain('@backbase/accesscontrol-http-ang');
        expect(allowedNonPeerDependencies).toContain('@backbase/approval-http-ang');
    });
});
