"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const ast_utils_1 = require("@schematics/angular/utility/ast-utils");
const dependencies_1 = require("@schematics/angular/utility/dependencies");
const change_1 = require("@schematics/angular/utility/change");
const ts = require("typescript");
const fs_1 = require("fs");
const path_1 = require("path");
const utils_1 = require("../../../utils");
const entryPointMap = {
    '@backbase/data-ang/accesscontrol': '@backbase/accesscontrol-http-ang',
    '@backbase/data-ang/account-statements': '@backbase/account-statements-http-ang',
    '@backbase/data-ang/actions': '@backbase/actions-http-ang',
    '@backbase/data-ang/approval': '@backbase/approval-http-ang',
    '@backbase/data-ang/approvals': '@backbase/approval-http-ang',
    '@backbase/data-ang/arrangements': '@backbase/arrangement-manager-http-ang',
    '@backbase/data-ang/audit': '@backbase/audit-http-ang',
    '@backbase/data-ang/authorized-users': '@backbase/authorized-user-http-ang',
    '@backbase/data-ang/billpay': '@backbase/billpay-http-ang',
    '@backbase/data-ang/budgeting': '@backbase/budgeting-http-ang',
    '@backbase/data-ang/cards': '@backbase/cards-http-ang',
    '@backbase/data-ang/cash-flow': '@backbase/cashflow-http-ang',
    '@backbase/data-ang/cash-management': '@backbase/cash-management-http-ang',
    '@backbase/data-ang/categories-management': '@backbase/categories-management-http-ang',
    '@backbase/data-ang/comments': '@backbase/comments-http-ang',
    '@backbase/data-ang/comments-v2': '@backbase/comments-v2-client-ang',
    '@backbase/data-ang/consent': '@backbase/consent-http-ang',
    '@backbase/data-ang/contact-manager': '@backbase/contact-manager-http-ang',
    '@backbase/data-ang/device': '@backbase/device-http-ang',
    '@backbase/data-ang/device-management': '@backbase/device-http-ang',
    '@backbase/data-ang/employee': '@backbase/employee-http-ang',
    '@backbase/data-ang/engagement': '@backbase/engagement-http-ang',
    '@backbase/data-ang/financial-institution-manager': '@backbase/financial-institution-manager-http-ang',
    '@backbase/data-ang/impersonation-v1': '@backbase/impersonation-v1-client-ang',
    '@backbase/data-ang/letter-of-credit': '@backbase/letter-of-credit-http-ang',
    '@backbase/data-ang/limit': '@backbase/limit-http-ang',
    '@backbase/data-ang/limits': '@backbase/limit-http-ang',
    '@backbase/data-ang/loans': '@backbase/loans-http-ang',
    '@backbase/data-ang/messages': '@backbase/messages-http-ang',
    '@backbase/data-ang/notifications': '@backbase/notifications-http-ang',
    '@backbase/data-ang/payment-batch': '@backbase/payment-batch-http-ang',
    '@backbase/data-ang/payment-batch-template': '@backbase/payment-batch-template-http-ang',
    '@backbase/data-ang/payment-draft': '@backbase/payment-draft-http-ang',
    '@backbase/data-ang/payment-order': '@backbase/payment-order-http-ang',
    '@backbase/data-ang/payment-order-a2a': '@backbase/payment-order-a2a-http-ang',
    '@backbase/data-ang/payment-order-options': '@backbase/payment-order-options-http-ang',
    '@backbase/data-ang/payment-template': '@backbase/payment-template-http-ang',
    '@backbase/data-ang/places': '@backbase/places-http-ang',
    '@backbase/data-ang/pocket-tailor': '@backbase/pocket-tailor-http-ang',
    '@backbase/data-ang/portfolio-summary': '@backbase/portfolio-summary-http-ang',
    '@backbase/data-ang/portfolio-summary-instrument-view': '@backbase/portfolio-summary-instrument-view-http-ang',
    '@backbase/data-ang/positive-pay-ach-v1': '@backbase/positive-pay-ach-v1-client-ang',
    '@backbase/data-ang/positive-pay-check-v1': '@backbase/positive-pay-check-v1-client-ang',
    '@backbase/data-ang/rtc-v1': '@backbase/rtc-v1-client-ang',
    '@backbase/data-ang/saving-goals': '@backbase/saving-goals-http-ang',
    '@backbase/data-ang/self-enrollment': '@backbase/self-enrollment-http-ang',
    '@backbase/data-ang/stop-checks': '@backbase/stop-checks-http-ang',
    '@backbase/data-ang/trading-fx': '@backbase/tradingfx-http-ang',
    '@backbase/data-ang/tradingfx': '@backbase/tradingfx-http-ang',
    '@backbase/data-ang/transactions': '@backbase/transactions-http-ang',
    '@backbase/data-ang/user': '@backbase/user-http-ang',
    '@backbase/data-ang/user-profile-manager': '@backbase/user-profile-http-ang',
};
function default_1() {
    return () => __awaiter(this, void 0, void 0, function* () {
        const packageJsonBuf = yield fs_1.promises.readFile(path_1.resolve(__dirname, '../../../../../package.json'));
        const dataAngPackageJson = JSON.parse(packageJsonBuf.toString('utf8'));
        return (tree, context) => {
            const requiredLibs = utils_1.getLibInfo(tree).reduce((acc, lib) => {
                const libModules = {};
                if (lib.sourceRoot) {
                    tree.getDir(lib.sourceRoot).visit((file) => {
                        if (file.endsWith('.ts')) {
                            visitFile(tree, file).forEach((dataModule) => (libModules[dataModule] || (libModules[dataModule] = utils_1.getDataModuleVersion(dataModule, dataAngPackageJson))));
                        }
                    });
                }
                updateLibPackageJson(tree, libModules, lib.root, lib.isNx);
                acc = Object.assign(Object.assign({}, acc), libModules);
                return acc;
            }, {});
            updatePackageJson(tree, requiredLibs);
            context.addTask(new tasks_1.NodePackageInstallTask());
            return tree;
        };
    });
}
exports.default = default_1;
function isImportOrExport(node) {
    if (!node) {
        return false;
    }
    return ts.isImportDeclaration(node) || ts.isExportDeclaration(node);
}
function isDataAngModule(node) {
    return !!node && ts.isStringLiteral(node) && !!entryPointMap[node.text];
}
function visitFile(tree, file) {
    const buf = tree.read(file);
    if (!buf) {
        return [];
    }
    const source = ts.createSourceFile(file, buf.toString('utf8'), ts.ScriptTarget.Latest, true, ts.ScriptKind.TS);
    const nodes = ast_utils_1.findNodes(source, isImportOrExport)
        .map((node) => node.moduleSpecifier)
        .filter(isDataAngModule);
    const changes = nodes.map((node) => new change_1.ReplaceChange(file, node.getStart(), node.getText(), `'${entryPointMap[node.text]}'`));
    const recorder = tree.beginUpdate(file);
    change_1.applyToUpdateRecorder(recorder, changes);
    tree.commitUpdate(recorder);
    return nodes.map((node) => entryPointMap[node.text]);
}
function updatePackageJson(tree, requiredLibs) {
    dependencies_1.removePackageJsonDependency(tree, '@backbase/data-ang');
    Object.entries(requiredLibs).forEach(([name, version]) => {
        dependencies_1.addPackageJsonDependency(tree, {
            name,
            version,
            type: dependencies_1.NodeDependencyType.Default,
        });
    });
}
function updateLibPackageJson(tree, requiredLibs, libRoot, isNx) {
    if (!libRoot) {
        return;
    }
    const packageJsonPath = core_1.join(core_1.normalize(libRoot), 'package.json');
    if (!tree.exists(packageJsonPath)) {
        return;
    }
    const packageJson = utils_1.parseJsonFile(tree, packageJsonPath);
    const peerDependencies = (packageJson.peerDependencies || (packageJson.peerDependencies = {}));
    let changes = false;
    if (peerDependencies['@backbase/data-ang']) {
        delete peerDependencies['@backbase/data-ang'];
        changes = true;
    }
    if (!isNx) {
        packageJson.peerDependencies = Object.assign(Object.assign({}, peerDependencies), requiredLibs);
        changes = true;
    }
    if (changes) {
        tree.overwrite(packageJsonPath, JSON.stringify(packageJson, undefined, 2));
    }
}
