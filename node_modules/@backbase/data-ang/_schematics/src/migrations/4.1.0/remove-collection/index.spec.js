"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/schematics/testing");
const schematics_1 = require("@angular-devkit/schematics");
const core_1 = require("@angular-devkit/core");
const fixtures = {
    '/libs/foo/test.ts': `
import { Whatever } from '@backbase/data-ang/accesscontrol';
import { Something } from '@backbase/data-ang/device-management';
`,
    '/libs/foo/package.json': JSON.stringify({
        peerDependencies: {
            '@backbase/data-ang': '^4.0.0',
        }
    }),
    '/libs/bar/test.ts': `
import { X } from '@backbase/data-ang/actions';
`,
    '/libs/bar/project.json': JSON.stringify({
        root: 'libs/bar',
        sourceRoot: 'libs/bar'
    }),
    'package.json': JSON.stringify({
        dependencies: {
            '@backbase/data-ang': '4.0.0',
        },
    }),
    'angular.json': JSON.stringify({
        projects: {
            foo: {
                root: 'libs/foo',
                sourceRoot: 'libs/foo'
            },
            bar: '/libs/bar/project.json'
        }
    })
};
describe('remove-collection migration', () => {
    let result;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        const schematicRunner = new testing_1.SchematicTestRunner('migrations', require.resolve('../../../migrations.json'));
        const host = new core_1.virtualFs.test.TestHost(fixtures);
        const tree = new testing_1.UnitTestTree(new schematics_1.HostTree(host));
        result = yield schematicRunner.runSchematicAsync('remove-collection', {}, tree).toPromise();
    }));
    it('should update import sources', () => {
        const tsContent = result.readContent('/libs/foo/test.ts');
        expect(tsContent).toBe(`
import { Whatever } from '@backbase/accesscontrol-http-ang';
import { Something } from '@backbase/device-http-ang';
`);
    });
    it('should work for projects with nx-style separate project.json files', () => {
        const tsContent = result.readContent('/libs/bar/test.ts');
        expect(tsContent).toBe(`
import { X } from '@backbase/actions-http-ang';
`);
    });
    it('should uninstall data-ang', () => {
        const packageJson = JSON.parse(result.readContent('package.json'));
        expect(packageJson.dependencies['@backbase/data-ang']).toBeUndefined();
    });
    it('should install required data modules', () => {
        const packageJson = JSON.parse(result.readContent('package.json'));
        expect(packageJson.dependencies['@backbase/accesscontrol-http-ang']).toBeDefined();
        expect(packageJson.dependencies['@backbase/actions-http-ang']).toBeDefined();
        expect(packageJson.dependencies['@backbase/device-http-ang']).toBeDefined();
    });
    it('should remove the data-ang collection from lib peerDependencies', () => {
        const packageJson = JSON.parse(result.readContent('/libs/foo/package.json'));
        expect(packageJson.peerDependencies['@backbase/data-ang']).toBeUndefined();
    });
    it('should add the required data modules to lib peerDependencies', () => {
        const packageJson = JSON.parse(result.readContent('/libs/foo/package.json'));
        expect(packageJson.peerDependencies['@backbase/accesscontrol-http-ang']).toBeDefined();
        expect(packageJson.peerDependencies['@backbase/device-http-ang']).toBeDefined();
    });
    it('should not add to lib peerDependencies any data modules used by other libs but not used by the target lib', () => {
        const packageJson = JSON.parse(result.readContent('/libs/foo/package.json'));
        expect(packageJson.peerDependencies['@backbase/actions-http-ang']).toBeUndefined();
    });
});
