import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CreateCredentials } from '../model/models';
import { CreateEnrollment } from '../model/models';
import { StatusGetResponseBody } from '../model/models';
import { VerificationItem } from '../model/models';
import { VerificationRequestItem } from '../model/models';
import { SelfEnrollmentConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetUsernameByUsernameRequestParams {
    ["username"]: string;
}
export interface PostCredentialsRequestParams {
    ["createCredentials"]?: CreateCredentials;
}
export interface PostEnrollmentsRequestParams {
    ["createEnrollment"]?: CreateEnrollment;
}
export interface PostVerificationsRequestParams {
    ["verificationRequestItem"]?: Array<VerificationRequestItem>;
}
export declare class SelfEnrollmentService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: SelfEnrollmentConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: SelfEnrollmentConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getStatus(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<StatusGetResponseBody>;
    getStatus(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<StatusGetResponseBody>>;
    getStatus(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<StatusGetResponseBody>>;
    getStatusUrl(): string;
    getUsernameByUsername(requestParameters: GetUsernameByUsernameRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    getUsernameByUsername(requestParameters: GetUsernameByUsernameRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    getUsernameByUsername(requestParameters: GetUsernameByUsernameRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    getUsernameByUsernameUrl(requestParameters: GetUsernameByUsernameRequestParams): string;
    getVerifications(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<VerificationItem>>;
    getVerifications(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<VerificationItem>>>;
    getVerifications(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<VerificationItem>>>;
    getVerificationsUrl(): string;
    postCredentials(requestParameters: PostCredentialsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    postCredentials(requestParameters: PostCredentialsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    postCredentials(requestParameters: PostCredentialsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    postCredentialsUrl(requestParameters: PostCredentialsRequestParams): string;
    postEnrollments(requestParameters: PostEnrollmentsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    postEnrollments(requestParameters: PostEnrollmentsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    postEnrollments(requestParameters: PostEnrollmentsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    postEnrollmentsUrl(requestParameters: PostEnrollmentsRequestParams): string;
    postVerifications(requestParameters: PostVerificationsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    postVerifications(requestParameters: PostVerificationsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    postVerifications(requestParameters: PostVerificationsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    postVerificationsUrl(requestParameters: PostVerificationsRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<SelfEnrollmentService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<SelfEnrollmentService>;
}
