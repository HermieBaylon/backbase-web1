import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const SELF_ENROLLMENT_BASE_PATH = new InjectionToken('SELF_ENROLLMENT_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class SelfEnrollmentConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module SelfEnrollmentConfiguration');

class SelfEnrollmentApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('SelfEnrollmentApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: SelfEnrollmentApiModule,
            providers: [{ provide: SelfEnrollmentConfiguration, useFactory: configurationFactory }]
        };
    }
}
SelfEnrollmentApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SelfEnrollmentApiModule, deps: [{ token: SelfEnrollmentApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: SelfEnrollmentConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
SelfEnrollmentApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SelfEnrollmentApiModule });
SelfEnrollmentApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SelfEnrollmentApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SelfEnrollmentApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: SelfEnrollmentApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: SelfEnrollmentConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class SelfEnrollmentService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new SelfEnrollmentConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getStatus(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/status`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getStatusUrl() {
        return `${this.configuration.basePath}/client-api/v2/status`;
    }
    getUsernameByUsername(requestParameters, observe = 'body', reportProgress = false, options) {
        const _username = requestParameters["username"];
        if (_username === null || _username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getUsernameByUsername.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/credentials/existing/username/${encodeURIComponent(String(_username))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUsernameByUsernameUrl(requestParameters) {
        const _username = requestParameters["username"];
        if (_username === null || _username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getUsernameByUsername.');
        }
        return `${this.configuration.basePath}/client-api/v2/credentials/existing/username/${encodeURIComponent(String(_username))}`;
    }
    getVerifications(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/verifications`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getVerificationsUrl() {
        return `${this.configuration.basePath}/client-api/v2/verifications`;
    }
    postCredentials(requestParameters, observe = 'body', reportProgress = false, options) {
        const _createCredentials = requestParameters["createCredentials"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/credentials`, _createCredentials, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postCredentialsUrl(requestParameters) {
        const _createCredentials = requestParameters["createCredentials"];
        return `${this.configuration.basePath}/client-api/v2/credentials`;
    }
    postEnrollments(requestParameters, observe = 'body', reportProgress = false, options) {
        const _createEnrollment = requestParameters["createEnrollment"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/enrollments`, _createEnrollment, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postEnrollmentsUrl(requestParameters) {
        const _createEnrollment = requestParameters["createEnrollment"];
        return `${this.configuration.basePath}/client-api/v2/enrollments`;
    }
    postVerifications(requestParameters, observe = 'body', reportProgress = false, options) {
        const _verificationRequestItem = requestParameters["verificationRequestItem"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/verifications`, _verificationRequestItem, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postVerificationsUrl(requestParameters) {
        const _verificationRequestItem = requestParameters["verificationRequestItem"];
        return `${this.configuration.basePath}/client-api/v2/verifications`;
    }
}
SelfEnrollmentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SelfEnrollmentService, deps: [{ token: i1.HttpClient }, { token: SELF_ENROLLMENT_BASE_PATH, optional: true }, { token: SelfEnrollmentConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
SelfEnrollmentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SelfEnrollmentService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SelfEnrollmentService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [SELF_ENROLLMENT_BASE_PATH]
                }] }, { type: SelfEnrollmentConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const SelfEnrollmentServiceGetStatusMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/status",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "status": "IDENTIFIED"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    }]);
const SelfEnrollmentServiceGetUsernameByUsernameMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/credentials/existing/username/{username}",
        method: "GET",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const SelfEnrollmentServiceGetVerificationsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/verifications",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "question": {
                            "id": "12ghr44356-54mpkm65",
                            "text": "When did you open your Loan account?"
                        },
                        "answers": [{
                                "id": "wrghr44356-54mpkm65",
                                "text": "January 2017"
                            }, {
                                "id": "ds-0h-903285hb6",
                                "text": "March 2017"
                            }, {
                                "id": "34bkbdfs89sdfnj",
                                "text": "July 2017"
                            }, {
                                "id": "123-3456-nkbjhbdf",
                                "text": "None of the above"
                            }]
                    }, {
                        "question": {
                            "id": "12ghr44356-54mpkerwfvd5",
                            "text": "What state was your SSN issued in?"
                        },
                        "answers": [{
                                "id": "123kbbb43500fds",
                                "text": "New York"
                            }, {
                                "id": "453-65njb453-45657",
                                "text": "Virginia"
                            }, {
                                "id": "csgdf-35436njgf",
                                "text": "Missouri"
                            }, {
                                "id": "aaa-23454363jb634",
                                "text": "None of the above"
                            }]
                    }, {
                        "question": {
                            "id": "18hgdd8756-54botdf8876",
                            "text": "In 2017, your Car Loan was approved by which bank?"
                        },
                        "answers": [{
                                "id": "1mlfjur-i094s",
                                "text": "Bank of America"
                            }, {
                                "id": "473-65iiktnd93-433457",
                                "text": "Wells Fargo"
                            }, {
                                "id": "cujhf-356657ytjgf",
                                "text": "Chase"
                            }, {
                                "id": "abb-236678435jb634",
                                "text": "None of the above"
                            }]
                    }, {
                        "question": {
                            "id": "109jjhbft6-590-ouhgj345",
                            "text": "Which of the following cities has a current or former association to you?"
                        },
                        "answers": [{
                                "id": "19874yhrgsvdr5",
                                "text": "Houston"
                            }, {
                                "id": "4577-8576ijuth-45659",
                                "text": "Los Angeles"
                            }, {
                                "id": "cascadf-3554r66t-uu",
                                "text": "Chicago"
                            }, {
                                "id": "aga-264547789-jb634",
                                "text": "None of the above"
                            }]
                    }]
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const SelfEnrollmentServicePostCredentialsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/credentials",
        method: "POST",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    }]);
const SelfEnrollmentServicePostEnrollmentsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/enrollments",
        method: "POST",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const SelfEnrollmentServicePostVerificationsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/verifications",
        method: "POST",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const SelfEnrollmentServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/status",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "status": "IDENTIFIED"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/credentials/existing/username/{username}",
        method: "GET",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/verifications",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "question": {
                            "id": "12ghr44356-54mpkm65",
                            "text": "When did you open your Loan account?"
                        },
                        "answers": [{
                                "id": "wrghr44356-54mpkm65",
                                "text": "January 2017"
                            }, {
                                "id": "ds-0h-903285hb6",
                                "text": "March 2017"
                            }, {
                                "id": "34bkbdfs89sdfnj",
                                "text": "July 2017"
                            }, {
                                "id": "123-3456-nkbjhbdf",
                                "text": "None of the above"
                            }]
                    }, {
                        "question": {
                            "id": "12ghr44356-54mpkerwfvd5",
                            "text": "What state was your SSN issued in?"
                        },
                        "answers": [{
                                "id": "123kbbb43500fds",
                                "text": "New York"
                            }, {
                                "id": "453-65njb453-45657",
                                "text": "Virginia"
                            }, {
                                "id": "csgdf-35436njgf",
                                "text": "Missouri"
                            }, {
                                "id": "aaa-23454363jb634",
                                "text": "None of the above"
                            }]
                    }, {
                        "question": {
                            "id": "18hgdd8756-54botdf8876",
                            "text": "In 2017, your Car Loan was approved by which bank?"
                        },
                        "answers": [{
                                "id": "1mlfjur-i094s",
                                "text": "Bank of America"
                            }, {
                                "id": "473-65iiktnd93-433457",
                                "text": "Wells Fargo"
                            }, {
                                "id": "cujhf-356657ytjgf",
                                "text": "Chase"
                            }, {
                                "id": "abb-236678435jb634",
                                "text": "None of the above"
                            }]
                    }, {
                        "question": {
                            "id": "109jjhbft6-590-ouhgj345",
                            "text": "Which of the following cities has a current or former association to you?"
                        },
                        "answers": [{
                                "id": "19874yhrgsvdr5",
                                "text": "Houston"
                            }, {
                                "id": "4577-8576ijuth-45659",
                                "text": "Los Angeles"
                            }, {
                                "id": "cascadf-3554r66t-uu",
                                "text": "Chicago"
                            }, {
                                "id": "aga-264547789-jb634",
                                "text": "None of the above"
                            }]
                    }]
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/credentials",
        method: "POST",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/enrollments",
        method: "POST",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/verifications",
        method: "POST",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);

export { COLLECTION_FORMATS, CONFIG_TOKEN, SELF_ENROLLMENT_BASE_PATH, SelfEnrollmentApiModule, SelfEnrollmentConfiguration, SelfEnrollmentService, SelfEnrollmentServiceGetStatusMocksProvider, SelfEnrollmentServiceGetUsernameByUsernameMocksProvider, SelfEnrollmentServiceGetVerificationsMocksProvider, SelfEnrollmentServiceMocksProvider, SelfEnrollmentServicePostCredentialsMocksProvider, SelfEnrollmentServicePostEnrollmentsMocksProvider, SelfEnrollmentServicePostVerificationsMocksProvider };
//# sourceMappingURL=backbase-self-enrollment-http-ang.js.map
