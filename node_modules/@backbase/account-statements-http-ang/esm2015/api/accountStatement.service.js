import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { ACCOUNT_STATEMENT_BASE_PATH } from '../variables';
import { AccountStatementConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class AccountStatementHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new AccountStatementConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    downloadAccountStatements(requestParameters, observe = 'body', reportProgress = false, options) {
        const _uid = requestParameters["uid"];
        if (_uid === null || _uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling downloadAccountStatements.');
        }
        const _inline = requestParameters["inline"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_inline !== undefined && _inline !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _inline, 'inline');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'binary/octet-stream',
                'application/pdf',
                'text/plain',
                'text/csv',
                'application/rtf',
                'application/msword',
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                'application/vnd.ms-excel',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'application/xml',
                'image/png',
                'image/jpeg',
                'image/gif',
                'image/tiff',
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/account/statements/download/${encodeURIComponent(String(_uid))}`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    downloadAccountStatementsUrl(requestParameters) {
        const _uid = requestParameters["uid"];
        if (_uid === null || _uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling downloadAccountStatements.');
        }
        const _inline = requestParameters["inline"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_inline !== undefined && _inline !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _inline, 'inline');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/account/statements/download/${encodeURIComponent(String(_uid))}${queryString ? `?${queryString}` : ''}`;
    }
    getAccountStatements(requestParameters, observe = 'body', reportProgress = false, options) {
        const _accountId = requestParameters["accountId"];
        const _dateFrom = requestParameters["dateFrom"];
        const _dateTo = requestParameters["dateTo"];
        const _category = requestParameters["category"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_accountId !== undefined && _accountId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _accountId, 'accountId');
        }
        if (_dateFrom !== undefined && _dateFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dateFrom, 'dateFrom');
        }
        if (_dateTo !== undefined && _dateTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dateTo, 'dateTo');
        }
        if (_category) {
            _category.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'category');
            });
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/account/statements`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAccountStatementsUrl(requestParameters) {
        const _accountId = requestParameters["accountId"];
        const _dateFrom = requestParameters["dateFrom"];
        const _dateTo = requestParameters["dateTo"];
        const _category = requestParameters["category"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_accountId !== undefined && _accountId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _accountId, 'accountId');
        }
        if (_dateFrom !== undefined && _dateFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dateFrom, 'dateFrom');
        }
        if (_dateTo !== undefined && _dateTo !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dateTo, 'dateTo');
        }
        if (_category) {
            _category.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'category');
            });
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/account/statements${queryString ? `?${queryString}` : ''}`;
    }
    getCategories(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/account/statements/categories`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getCategoriesUrl() {
        return `${this.configuration.basePath}/client-api/v2/account/statements/categories`;
    }
    postAccountStatements(requestParameters, observe = 'body', reportProgress = false, options) {
        const _accountStatementsPostRequest = requestParameters["accountStatementsPostRequest"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/account/statements`, _accountStatementsPostRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postAccountStatementsUrl(requestParameters) {
        const _accountStatementsPostRequest = requestParameters["accountStatementsPostRequest"];
        return `${this.configuration.basePath}/client-api/v2/account/statements`;
    }
}
AccountStatementHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementHttpService, deps: [{ token: i1.HttpClient }, { token: ACCOUNT_STATEMENT_BASE_PATH, optional: true }, { token: i2.AccountStatementConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
AccountStatementHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ACCOUNT_STATEMENT_BASE_PATH]
                }] }, { type: i2.AccountStatementConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,