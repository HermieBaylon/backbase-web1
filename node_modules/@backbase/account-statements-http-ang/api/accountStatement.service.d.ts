import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AccountStatement } from '../model/models';
import { AccountStatementsCategoriesResponse } from '../model/models';
import { AccountStatementsPostRequest } from '../model/models';
import { AccountStatementConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DownloadAccountStatementsRequestParams {
    ["uid"]: string;
    ["inline"]?: boolean;
}
export interface GetAccountStatementsRequestParams {
    ["accountId"]?: string;
    ["dateFrom"]?: string;
    ["dateTo"]?: string;
    ["category"]?: Array<string>;
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
    ["orderBy"]?: string;
    ["direction"]?: 'ASC' | 'DESC';
}
export interface PostAccountStatementsRequestParams {
    ["accountStatementsPostRequest"]?: AccountStatementsPostRequest;
}
export declare class AccountStatementHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: AccountStatementConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: AccountStatementConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'binary/octet-stream';
    }): Observable<string>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'binary/octet-stream';
    }): Observable<HttpResponse<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'binary/octet-stream';
    }): Observable<HttpEvent<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/pdf';
    }): Observable<string>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/pdf';
    }): Observable<HttpResponse<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/pdf';
    }): Observable<HttpEvent<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/plain';
    }): Observable<string>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/plain';
    }): Observable<HttpResponse<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/plain';
    }): Observable<HttpEvent<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<string>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpResponse<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpEvent<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/rtf';
    }): Observable<string>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/rtf';
    }): Observable<HttpResponse<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/rtf';
    }): Observable<HttpEvent<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/msword';
    }): Observable<string>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/msword';
    }): Observable<HttpResponse<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/msword';
    }): Observable<HttpEvent<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
    }): Observable<string>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
    }): Observable<HttpResponse<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
    }): Observable<HttpEvent<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.ms-excel';
    }): Observable<string>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.ms-excel';
    }): Observable<HttpResponse<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.ms-excel';
    }): Observable<HttpEvent<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    }): Observable<string>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    }): Observable<HttpResponse<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    }): Observable<HttpEvent<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml';
    }): Observable<string>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml';
    }): Observable<HttpResponse<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml';
    }): Observable<HttpEvent<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/png';
    }): Observable<string>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/png';
    }): Observable<HttpResponse<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/png';
    }): Observable<HttpEvent<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/jpeg';
    }): Observable<string>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/jpeg';
    }): Observable<HttpResponse<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/jpeg';
    }): Observable<HttpEvent<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/gif';
    }): Observable<string>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/gif';
    }): Observable<HttpResponse<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/gif';
    }): Observable<HttpEvent<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/tiff';
    }): Observable<string>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/tiff';
    }): Observable<HttpResponse<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'image/tiff';
    }): Observable<HttpEvent<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<string>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<string>>;
    downloadAccountStatements(requestParameters: DownloadAccountStatementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<string>>;
    downloadAccountStatementsUrl(requestParameters: DownloadAccountStatementsRequestParams): string;
    getAccountStatements(requestParameters: GetAccountStatementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<AccountStatement>>;
    getAccountStatements(requestParameters: GetAccountStatementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<AccountStatement>>>;
    getAccountStatements(requestParameters: GetAccountStatementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<AccountStatement>>>;
    getAccountStatementsUrl(requestParameters: GetAccountStatementsRequestParams): string;
    getCategories(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<AccountStatementsCategoriesResponse>;
    getCategories(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<AccountStatementsCategoriesResponse>>;
    getCategories(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<AccountStatementsCategoriesResponse>>;
    getCategoriesUrl(): string;
    postAccountStatements(requestParameters: PostAccountStatementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<AccountStatement>>;
    postAccountStatements(requestParameters: PostAccountStatementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<AccountStatement>>>;
    postAccountStatements(requestParameters: PostAccountStatementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<AccountStatement>>>;
    postAccountStatementsUrl(requestParameters: PostAccountStatementsRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<AccountStatementHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AccountStatementHttpService>;
}
