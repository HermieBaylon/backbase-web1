import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const CredentialType = {
    TEXT: 'TEXT',
    PASSWORD: 'PASSWORD'
};

const FINANCIAL_INSTITUTION_MANAGER_BASE_PATH = new InjectionToken('FINANCIAL_INSTITUTION_MANAGER_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class FinancialInstitutionManagerConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module FinancialInstitutionManagerConfiguration');

class FinancialInstitutionManagerApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('FinancialInstitutionManagerApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: FinancialInstitutionManagerApiModule,
            providers: [{ provide: FinancialInstitutionManagerConfiguration, useFactory: configurationFactory }]
        };
    }
}
FinancialInstitutionManagerApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: FinancialInstitutionManagerApiModule, deps: [{ token: FinancialInstitutionManagerApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: FinancialInstitutionManagerConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
FinancialInstitutionManagerApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: FinancialInstitutionManagerApiModule });
FinancialInstitutionManagerApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: FinancialInstitutionManagerApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: FinancialInstitutionManagerApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: FinancialInstitutionManagerApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: FinancialInstitutionManagerConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class FinancialInstitutionManagerClientHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new FinancialInstitutionManagerConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getFinancialInstitutions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _ids = requestParameters["ids"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/financial-institutions`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getFinancialInstitutionsUrl(requestParameters) {
        const _ids = requestParameters["ids"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/financial-institutions${queryString ? `?${queryString}` : ''}`;
    }
}
FinancialInstitutionManagerClientHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: FinancialInstitutionManagerClientHttpService, deps: [{ token: i1.HttpClient }, { token: FINANCIAL_INSTITUTION_MANAGER_BASE_PATH, optional: true }, { token: FinancialInstitutionManagerConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
FinancialInstitutionManagerClientHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: FinancialInstitutionManagerClientHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: FinancialInstitutionManagerClientHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [FINANCIAL_INSTITUTION_MANAGER_BASE_PATH]
                }] }, { type: FinancialInstitutionManagerConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const FinancialInstitutionManagerClientHttpServiceGetFinancialInstitutionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/financial-institutions",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "financialInstitutions": [{
                            "id": 1,
                            "externalId": "11da7d70-ed15-11ea-adc1-0242ac120002",
                            "name": "ABN Amro",
                            "logo": "https://landportal.org/sites/landportal.org/files/styles/220heightmax/public/abn-amro-logo-vertikaal.png",
                            "credentials": [{
                                    "name": "username",
                                    "label": "Username",
                                    "type": "TEXT"
                                }, {
                                    "name": "password",
                                    "label": "Password",
                                    "type": "PASSWORD"
                                }]
                        }, {
                            "id": 2,
                            "externalId": "b149f34b-de04-4d79-83f6-9605d698a7b5",
                            "name": "ING",
                            "logo": "https://www.ing.com/static/ingdotcompresentation/static/images/ING_lion_RGB_200x200.png",
                            "credentials": [{
                                    "name": "username",
                                    "label": "Username",
                                    "type": "TEXT"
                                }, {
                                    "name": "password",
                                    "label": "Password",
                                    "type": "PASSWORD"
                                }]
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const FinancialInstitutionManagerClientHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/financial-institutions",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "financialInstitutions": [{
                            "id": 1,
                            "externalId": "11da7d70-ed15-11ea-adc1-0242ac120002",
                            "name": "ABN Amro",
                            "logo": "https://landportal.org/sites/landportal.org/files/styles/220heightmax/public/abn-amro-logo-vertikaal.png",
                            "credentials": [{
                                    "name": "username",
                                    "label": "Username",
                                    "type": "TEXT"
                                }, {
                                    "name": "password",
                                    "label": "Password",
                                    "type": "PASSWORD"
                                }]
                        }, {
                            "id": 2,
                            "externalId": "b149f34b-de04-4d79-83f6-9605d698a7b5",
                            "name": "ING",
                            "logo": "https://www.ing.com/static/ingdotcompresentation/static/images/ING_lion_RGB_200x200.png",
                            "credentials": [{
                                    "name": "username",
                                    "label": "Username",
                                    "type": "TEXT"
                                }, {
                                    "name": "password",
                                    "label": "Password",
                                    "type": "PASSWORD"
                                }]
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

export { COLLECTION_FORMATS, CONFIG_TOKEN, CredentialType, FINANCIAL_INSTITUTION_MANAGER_BASE_PATH, FinancialInstitutionManagerApiModule, FinancialInstitutionManagerClientHttpService, FinancialInstitutionManagerClientHttpServiceGetFinancialInstitutionsMocksProvider, FinancialInstitutionManagerClientHttpServiceMocksProvider, FinancialInstitutionManagerConfiguration };
//# sourceMappingURL=backbase-financial-institution-manager-http-ang.js.map
