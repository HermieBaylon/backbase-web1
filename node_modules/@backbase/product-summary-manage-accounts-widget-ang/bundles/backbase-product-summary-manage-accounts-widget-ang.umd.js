(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@backbase/foundation-ang/core'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/input-inline-edit'), require('@backbase/ui-ang/payment-card-number-pipe'), require('@backbase/ui-ang/amount'), require('@backbase/ui-ang/switch'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/notification'), require('@backbase/ui-ang/tooltip-directive'), require('@backbase/product-summary-ui'), require('@backbase/product-summary-common-ang'), require('rxjs'), require('rxjs/operators'), require('@backbase/data-ang/arrangements')) :
    typeof define === 'function' && define.amd ? define('@backbase/product-summary-manage-accounts-widget-ang', ['exports', '@angular/common', '@angular/core', '@angular/forms', '@backbase/foundation-ang/core', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/input-inline-edit', '@backbase/ui-ang/payment-card-number-pipe', '@backbase/ui-ang/amount', '@backbase/ui-ang/switch', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/notification', '@backbase/ui-ang/tooltip-directive', '@backbase/product-summary-ui', '@backbase/product-summary-common-ang', 'rxjs', 'rxjs/operators', '@backbase/data-ang/arrangements'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["product-summary-manage-accounts-widget-ang"] = {}), global.ng.common, global.ng.core, global.ng.forms, global.i1$2, global.i6$1, global.i2$1, global.paymentCardNumberPipe, global.i3$1, global.i4, global.i5$1, global.i2, global.i6, global.i1$1, global.i3, global.rxjs, global.rxjs.operators, global.i1));
})(this, (function (exports, i5, i0, i7, i1$2, i6$1, i2$1, paymentCardNumberPipe, i3$1, i4, i5$1, i2, i6, i1$1, i3, rxjs, operators, i1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i6__namespace$1 = /*#__PURE__*/_interopNamespace(i6$1);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3$1);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var ManageAccountNotFound = /** @class */ (function () {
        function ManageAccountNotFound(response) {
            this.response = response;
            this.kind = 'ManageAccountNotFound';
            this.messages = ((response.error || {}).errors || []).map(function (e) { return e.message; });
        }
        return ManageAccountNotFound;
    }());
    var ManageAccountBadRequest = /** @class */ (function () {
        function ManageAccountBadRequest(response) {
            this.response = response;
            this.kind = 'ManageAccountBadRequest';
            this.messages = ((response.error || {}).errors || []).map(function (e) { return e.message; });
        }
        return ManageAccountBadRequest;
    }());
    var ManageAccountAccessDenied = /** @class */ (function () {
        function ManageAccountAccessDenied(response) {
            this.response = response;
            this.kind = 'ManageAccountAccessDenied';
            this.messages = ((response.error || {}).errors || []).map(function (e) { return e.message; });
        }
        return ManageAccountAccessDenied;
    }());
    var ManageAccountUnknownError = /** @class */ (function () {
        function ManageAccountUnknownError(response) {
            this.response = response;
            this.kind = 'ManageAccountUnknownError';
            this.messages = [response.message];
        }
        return ManageAccountUnknownError;
    }());
    var ManageAccountConnectivityError = /** @class */ (function () {
        function ManageAccountConnectivityError(response) {
            this.response = response;
            this.kind = 'ManageAccountConnectivityError';
            this.messages = ((response.error || {}).errors || []).map(function (e) { return e.message; });
        }
        return ManageAccountConnectivityError;
    }());
    var parseError = function (error) {
        if (error.error instanceof ErrorEvent) {
            return new ManageAccountUnknownError(error);
        }
        else {
            switch (error.status) {
                case 0:
                    return new ManageAccountConnectivityError(error);
                case 401:
                    return new ManageAccountAccessDenied(error);
                case 403:
                    return new ManageAccountAccessDenied(error);
                case 400:
                    return new ManageAccountBadRequest(error);
                case 404:
                    return new ManageAccountNotFound(error);
                default:
                    return new ManageAccountUnknownError(error);
            }
        }
    };

    var toDataServiceForVisibility = function (state) {
        var visibility = state.userPreferences ? state.userPreferences.visible : state.visible;
        visibility = visibility !== undefined ? visibility : state.visible;
        return {
            arrangementId: state.id,
            visible: !visibility,
        };
    };
    var toDataServiceForAlias = function (alias, arrangementId) { return ({
        arrangementId: arrangementId,
        alias: alias,
    }); };
    /**
     * Service for fetching and storing the list of accounts
     *
     * This service relies on providers from `ProductSummaryManageAccountsWidgetModule`.
     *
     * @see ProductSummaryManageAccountsWidgetModule
     *
     * @usageNotes
     *
     * ### Ensure the ProductSummaryManageAccountsWidgetModule is imported to your component module
     *
     * ```ts
     * @NgModule({
     *   ...
     *   imports: [
     *     ...
     *     ProductSummaryManageAccountsWidgetModule,
     *   ],
     * })
     * export class MyWidgetModule {}
     * ```
     *
     * ### Inject this service into your component
     *
     * ```ts
     * @Component({
     *   ...
     *   providers: [ManageAccountsService],
     * })
     *  export class MyComponent {
     * ```
     */
    var ManageAccountsService = /** @class */ (function () {
        /**
         * Constructor
         *
         * @param productSummaryDataService
         * @param manageAccountDataService
         * @param notification
         */
        function ManageAccountsService(productSummaryDataService, manageAccountDataService, notification) {
            var _this = this;
            this.productSummaryDataService = productSummaryDataService;
            this.manageAccountDataService = manageAccountDataService;
            this.notification = notification;
            /**
             * If the fetching of the list failed, this property
             * holds the errors coming from the server
             */
            this.error = new rxjs.BehaviorSubject(undefined);
            /**
             * If errors occurred during patching arrangements record,
             * holds the errors coming from the server
             */
            this.updateError = new rxjs.BehaviorSubject(undefined);
            /**
             * Whether the widget is currently fetching data from the server
             */
            this.loading = new rxjs.BehaviorSubject(true);
            this.revokingComplete = new rxjs.BehaviorSubject(true);
            this.requestObject = new rxjs.ReplaySubject(1);
            /**
             * Available product summary items.
             */
            this.accountList = rxjs.combineLatest(this.requestObject, this.revokingComplete).pipe(operators.distinctUntilChanged(), 
            // resetting error and loading values
            operators.tap(function () { return _this.error.next(undefined); }), operators.tap(function () { return _this.loading.next(true); }), operators.switchMap(function (_a) {
                var _b = __read(_a, 1), requestObject = _b[0];
                return _this.getAccountList(requestObject);
            }), operators.scan(function (acc, curr) { return ({
                count: curr.count,
                items: _this.mergeResponses(acc, curr),
                params: curr.params,
            }); }), operators.catchError(function (error) {
                _this.error.next(error);
                return rxjs.of(undefined);
            }), operators.tap(function () { return _this.loading.next(false); }));
        }
        ManageAccountsService.prototype.getAccountList = function (requestObject) {
            var _this = this;
            var from = requestObject.from || 0;
            var paginationType = requestObject.paginationType || '';
            var requestObjWithoutPaginationType = Object.assign({}, requestObject);
            delete requestObjWithoutPaginationType.paginationType;
            return this.productSummaryDataService
                .getArrangementsByBusinessFunction(requestObjWithoutPaginationType, i3.HttpResponseType.RESPONSE)
                .pipe(operators.map(function (res) { return _this.mapResponseWithCount(res, { from: from, paginationType: paginationType }); }), operators.catchError(function (error) {
                throw parseError(error);
            }));
        };
        ManageAccountsService.prototype.patchArrangementsRecord = function (accountUserPreferences, errorTemplateRef, successTemplateRef) {
            var _this = this;
            return this.manageAccountDataService.updateUserPreferences({ accountUserPreferences: accountUserPreferences }).pipe(operators.take(1), operators.tap(function () { return _this.revokingComplete.next(true); }), operators.tap(function () { return _this.showNotification(successTemplateRef, 'success'); }), operators.catchError(function (updateError) {
                _this.updateError.next(parseError(updateError));
                _this.revokingComplete.next(true);
                _this.showNotification(errorTemplateRef, 'error');
                return rxjs.of(undefined);
            }));
        };
        /**
         * Toggles visibility of product summary item.
         *
         * @param request
         * @param errorTemplateRef
         * @param successTemplateRef
         */
        ManageAccountsService.prototype.toggleVisibility = function (request, errorTemplateRef, successTemplateRef) {
            this.patchArrangementsRecord(toDataServiceForVisibility(request), errorTemplateRef, successTemplateRef).subscribe();
        };
        /**
         * Updates alias of product summary item, by id.
         *
         * @param arrangementId
         * @param alias
         * @param errorTemplateRef
         * @param successTemplateRef
         */
        ManageAccountsService.prototype.updateAlias = function (arrangementId, alias, errorTemplateRef, successTemplateRef) {
            var payloadForAlias = toDataServiceForAlias(alias, arrangementId);
            this.patchArrangementsRecord(payloadForAlias, errorTemplateRef, successTemplateRef).subscribe();
        };
        /**
         * Subscribes the passed `requestObject` to the local `requestObject`
         *
         * @param requestObject
         */
        ManageAccountsService.prototype.getAccountsFrom = function (requestObject) {
            requestObject.subscribe(this.requestObject);
        };
        ManageAccountsService.prototype.showNotification = function (templateRef, modifier) {
            this.notification.showNotification({
                header: templateRef,
                message: '',
                modifier: modifier,
            });
        };
        ManageAccountsService.prototype.mergeResponses = function (acc, current) {
            if (acc &&
                acc.items &&
                current &&
                current.items &&
                acc.params.paginationType === i3.PaginationType.LOAD_MORE &&
                current.params.from !== 0) {
                return __spreadArray(__spreadArray([], __read(acc.items)), __read(current.items));
            }
            return current.items;
        };
        ManageAccountsService.prototype.mapResponseWithCount = function (response, _a) {
            var from = _a.from, paginationType = _a.paginationType;
            // eslint-disable-next-line no-null/no-null
            if (response.body === null) {
                throw new Error();
            }
            var headerCount = response.headers ? response.headers.get('x-total-count') : undefined;
            var counter = headerCount ? parseInt(headerCount, 10) : (response.body && response.body.length) || 0;
            return {
                count: counter,
                items: response.body || [],
                params: { from: from, paginationType: paginationType },
            };
        };
        return ManageAccountsService;
    }());
    ManageAccountsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageAccountsService, deps: [{ token: i1__namespace.ProductSummaryHttpService }, { token: i1__namespace.ArrangementsHttpService }, { token: i2__namespace.NotificationService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ManageAccountsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageAccountsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageAccountsService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.ProductSummaryHttpService }, { type: i1__namespace.ArrangementsHttpService }, { type: i2__namespace.NotificationService }]; } });

    var WidgetProperty = {
        BUSINESS_FUNCTION: 'businessFunction',
        RESOURCE_NAME: 'resourceName',
        PRIVILEGE_TYPE: 'privilege',
        SIZE: 'size',
        SHOW_ICONS: 'showIcons',
    };

    var defaultProperties = {
        businessFunction: 'Product Summary',
        resourceName: 'Product Summary',
        privilege: 'view',
        size: 20,
    };
    /**
     * State management for fetching and storing widget properties from its inputs
     *
     * This service relies on providers from `ProductSummaryManageAccountsWidgetModule`.
     *
     * @see ProductSummaryManageAccountsWidgetModule
     *
     * @usageNotes
     *
     * ### Ensure the ProductSummaryManageAccountsWidgetModule is imported to your component module
     *
     * ```ts
     * @NgModule({
     *   ...
     *   imports: [
     *     ...
     *     ProductSummaryManageAccountsWidgetModule,
     *   ],
     * })
     * export class MyWidgetModule {}
     * ```
     *
     * ### Inject this service into your component
     *
     * ```ts
     * @Component({
     *   ...
     *   providers: [ManageAccountsWidgetPropertiesService],
     * })
     *  export class MyComponent {
     * ```
     */
    var ManageAccountsWidgetPropertiesService = /** @class */ (function () {
        function ManageAccountsWidgetPropertiesService() {
            this.propertiesConfig$ = new rxjs.BehaviorSubject(defaultProperties);
        }
        Object.defineProperty(ManageAccountsWidgetPropertiesService.prototype, "widgetProperties", {
            get: function () {
                return this.propertiesConfig$;
            },
            enumerable: false,
            configurable: true
        });
        ManageAccountsWidgetPropertiesService.prototype.setConfig = function (config) {
            this.propertiesConfig$.next({
                businessFunction: config.businessFunction || defaultProperties.businessFunction,
                resourceName: config.resourceName || defaultProperties.resourceName,
                privilege: config.privilege || defaultProperties.privilege,
                size: config.size || defaultProperties.size,
            });
        };
        return ManageAccountsWidgetPropertiesService;
    }());
    ManageAccountsWidgetPropertiesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageAccountsWidgetPropertiesService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ManageAccountsWidgetPropertiesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageAccountsWidgetPropertiesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageAccountsWidgetPropertiesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return []; } });

    /**
     * A component for displaying an account item
     *
     * The following extension slots are available in this component:
     *
     * - `ManageAccountItemCustomizableDirective`
     *
     * @see ManageAccountItemCustomizableDirective
     *
     * @usageNotes
     *
     * ### Display details
     *
     * ```html
     * <bb-manage-account-item
     *   [item]="item"
     *   [productAliasMaxLength]="hostRef.aliasMaxLength"
     *   (toggleVisibility)="hostRef.toggleVisibility($event)"
     *   (updateAlias)="hostRef.updateAlias(item.id, $event)"
     * ></bb-manage-account-item>
     * ```
     *
     * @ngModule ProductSummaryManageAccountsWidgetModule
     */
    var ManageAccountItemComponent = /** @class */ (function (_super) {
        __extends(ManageAccountItemComponent, _super);
        /**
         * @internal
         */
        function ManageAccountItemComponent(element, changeDetector) {
            var _this = _super.call(this, element, changeDetector) || this;
            /**
             * @internal
             */
            _this.hostRef = _this;
            /**
             * Returns the `alias` of the passed `account`
             */
            _this.getAlias = i3.getAccountAlias;
            /**
             * Returns true if product has external info
             */
            _this.hasExternalInfo = i3.hasExternalInfo;
            /**
             * Defines whether the product kind icon should be displayed
             *
             * @default true
             */
            _this.showIcon = true;
            /**
             * Event (Output) that emits when item visibility is changed
             */
            _this.toggleVisibility = new i0.EventEmitter();
            /**
             * Event (Output) that emits when item alias is changed
             */
            _this.updateAlias = new i0.EventEmitter();
            return _this;
        }
        /**
         * Event handler for the `click` event of `bb-switch-ui`
         * emits the `item` to the `toggleVisibility` output
         *
         * @param item
         */
        ManageAccountItemComponent.prototype.updateVisibility = function (item) {
            this.toggleVisibility.emit(item);
        };
        /**
         * Event handler for the `accept` event of `bb-input-inline-edit-ui`
         * emits the `alias` to the `updateAlias`
         *
         * @param alias
         */
        ManageAccountItemComponent.prototype.onAliasUpdate = function (alias) {
            this.updateAlias.emit(alias);
        };
        /**
         * Returns visibility status of product summary item
         *
         * @param item
         */
        ManageAccountItemComponent.prototype.checkItemVisibility = function (item) {
            var visibility = item.userPreferences ? item.userPreferences.visible : item.visible;
            return visibility !== undefined ? visibility : item.visible;
        };
        return ManageAccountItemComponent;
    }(i3.ResponsiveContainerComponent));
    ManageAccountItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageAccountItemComponent, deps: [{ token: i0__namespace.ElementRef }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ManageAccountItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManageAccountItemComponent, selector: "bb-manage-account-item", inputs: { item: "item", productAliasMaxLength: "productAliasMaxLength", showIcon: "showIcon" }, outputs: { toggleVisibility: "toggleVisibility", updateAlias: "updateAlias" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-container\n  bbManageAccountItemCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"item\"\n>\n</ng-container>\n\n<ng-template\n  bbManageAccountItemCustomizable\n  let-hostRef\n  let-item=\"context\"\n>\n  <ng-container [ngSwitch]=\"hostRef.responsiveView\">\n    <!-- Mobile View -->\n    <ng-container *ngSwitchCase=\"'mobile'\">\n      <div class=\"row d-flex\">\n        <div class=\"col-12\" data-role=\"product-kind-info\">\n          <ng-container *ngIf=\"hostRef.hasExternalInfo(item)\">\n            <ng-container *ngTemplateOutlet=\"accountExternalInfo; context: { withLogo: hostRef.showIcon }\"></ng-container>\n          </ng-container>\n          <ng-container *ngTemplateOutlet=\"accountInternalInfo; context: { withLogo: (hostRef.showIcon && !hostRef.hasExternalInfo(item)) }\"></ng-container>\n          <div class=\"bb-block bb-block--xs\"></div>\n        </div>\n        <div class=\"col-12\">\n          <div class=\"bb-block bb-block--sm\"></div>\n          <ng-container *ngTemplateOutlet=\"changeVisibilityColumn\"></ng-container>\n        </div>\n      </div>\n    </ng-container>\n\n    <!-- Tablet View -->\n    <ng-container *ngSwitchCase=\"'tablet'\">\n      <div class=\"row d-flex align-items-center flex-nowrap\">\n        <div class=\"col p-0 pl-3 d-flex flex-basis-0 flex-grow-0\">\n          <ng-container *ngTemplateOutlet=\"accountLogo\"></ng-container>\n        </div>\n        <div class=\"col flex-grow-1 row align-items-center flex-wrap\">\n          <div class=\"col-12 col-md-6\" data-role=\"product-kind-info\">\n            <ng-container *ngIf=\"hostRef.hasExternalInfo(item)\">\n              <ng-container *ngTemplateOutlet=\"accountExternalInfo\"></ng-container>\n            </ng-container>\n            <ng-container *ngTemplateOutlet=\"accountInternalInfo; context: { withProductKindName: true }\"></ng-container>\n          </div>\n          <div class=\"col-12 col-md-auto flex-grow-1\">\n            <div class=\"bb-block bb-block--sm\"></div>\n            <ng-container *ngTemplateOutlet=\"changeVisibilityColumn\"></ng-container>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n\n    <!-- Screen View -->\n    <ng-container *ngSwitchDefault>\n      <div class=\"row d-flex align-items-center flex-nowrap\">\n        <div class=\"col p-0 pl-3 d-flex flex-basis-0 flex-grow-0\">\n          <ng-container *ngTemplateOutlet=\"accountLogo\"></ng-container>\n        </div>\n        <div class=\"col flex-grow-1 row align-items-center flex-wrap\">\n          <div class=\"col-12 col-md-6\" data-role=\"product-kind-info\">\n            <ng-container *ngIf=\"hostRef.hasExternalInfo(item)\">\n              <ng-container *ngTemplateOutlet=\"accountExternalInfo\"></ng-container>\n            </ng-container>\n            <ng-container *ngTemplateOutlet=\"accountInternalInfo\"></ng-container>\n          </div>\n          <div class=\"col\" data-role=\"account-kind-name\">\n            <bb-product-kind-name [name]=\"item.productKindName\"></bb-product-kind-name>\n          </div>\n          <div class=\"col-12 col-md-auto flex-grow-1\">\n            <ng-container *ngTemplateOutlet=\"changeVisibilityColumn\"></ng-container>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #accountLogo>\n    <bb-product-summary-account-logo\n      *ngIf=\"hostRef.showIcon\"\n      data-role=\"manage-account-item__logo\"\n      [logoSrc]=\"item?.financialInstitution?.logo\"\n      [productKindName]=\"item.productKindName\"\n      iconColor=\"secondary\"\n    ></bb-product-summary-account-logo>\n  </ng-template>\n\n  <ng-template #accountExternalInfo let-withLogo=\"withLogo\">\n    <div class=\"bb-block bb-block--xs bb-stack bb-stack--density-sm\">\n      <div class=\"bb-stack__item\" *ngIf=\"withLogo\">\n        <bb-product-summary-account-logo\n          data-role=\"manage-account-item__logo\"\n          [logoSrc]=\"item.financialInstitution?.logo\"\n          iconSize=\"sm\"\n          logoSize=\"sm\"\n          [productKindName]=\"item.productKindName\"\n          iconColor=\"secondary\"\n        ></bb-product-summary-account-logo>\n      </div>\n      <span class=\"bb-stack__item bb-text-support bb-subtitle bb-text-bold\"\n            *ngIf=\"item.financialInstitution?.name; else externalBankNameDefault\">{{item.financialInstitution?.name}}</span>\n      <ng-template #externalBankNameDefault>\n        <span class=\"bb-stack__item bb-text-support bb-subtitle bb-text-bold\"\n              i18n=\"External account|Default bank name for external accounts@@manage.account.item\">\n          External account\n        </span>\n      </ng-template>\n    </div>\n  </ng-template>\n\n  <ng-template #accountInternalInfo let-withLogo=\"withLogo\" let-withProductKindName=\"withProductKindName\">\n    <div *ngIf=\"withProductKindName\" class=\"bb-text-support bb-subtitle\" data-role=\"account-kind-name\">\n      <bb-product-kind-name [name]=\"item.productKindName\"></bb-product-kind-name>\n    </div>\n    <div\n      data-role=\"account-name\"\n      class=\"bb-block bb-block--xs bb-stack bb-stack--density-sm bb-text-bold break-word\"\n    >\n      <bb-product-summary-account-logo\n        data-role=\"manage-account-item__logo\"\n        *ngIf=\"withLogo\"\n        class=\"bb-stack__item\"\n        iconSize=\"sm\"\n        logoSize=\"sm\"\n        [productKindName]=\"item.productKindName\"\n        iconColor=\"secondary\"\n      ></bb-product-summary-account-logo>\n      <bb-input-inline-edit-ui\n        [inputText]=\"hostRef.getAlias(item)\"\n        [maxLength]=\"hostRef.productAliasMaxLength\"\n        [required]=\"false\"\n        (accept)=\"hostRef.onAliasUpdate($event)\"\n        ariaLabelEdit=\"Edit alias for {{hostRef.getAlias(item)}}\"\n        i18n-ariaLabelEdit=\"Edit alias|Inline editor aria label@@manage.account.item.alias-inline-edit.aria-label\"\n      ></bb-input-inline-edit-ui>\n    </div>\n    <bb-product-number\n      class=\"bb-text-support bb-subtitle\"\n      data-role=\"account-number\"\n      [product]=\"item\"\n    ></bb-product-number>\n    <bb-arrangement-state-indicator\n      *ngIf=\"item.state\"\n      [state]=\"item.state.state\"\n      [hideStateTextForMobile]=\"false\"\n      data-role=\"arrangement-state\"\n    ></bb-arrangement-state-indicator>\n  </ng-template>\n\n  <ng-template #changeVisibilityColumn>\n    <div class=\"bb-stack\">\n      <bb-amount-ui\n        data-role=\"account-amount\"\n        class=\"bb-stack__item bb-stack__item--push-right bb-highlight bb-stack__item--fill--md-down\"\n        [amount]=\"item.bookedBalance || item.principalAmount || item.currentInvestmentValue\"\n        [currency]=\"item.currency\"\n      ></bb-amount-ui>\n      <div class=\"bb-stack__item\">\n        <bb-switch-ui\n          class=\"bb-stack\"\n          (click)=\"hostRef.updateVisibility(item)\"\n          [ngModel]=\"hostRef.checkItemVisibility(item)\"\n          bbTooltip=\"Manage Visibility\"\n          i18n-bbTooltip=\"Manage account visibility|@@manage.account.item.switch.tooltip.showHide\"\n          triggers=\"hover, focus\"\n          aria-label=\"{{hostRef.getAlias(item)}} Visibility\"\n          i18n-aria-label=\"Account visibility|Accessibility label for the switching account visibility component\n              @@manage.account.item.switch.aria.label.showHide\"\n          aria-pressed=\"true\"\n        ></bb-switch-ui>\n      </div>\n    </div>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$1.ProductKindNameComponent; }), selector: "bb-product-kind-name", inputs: ["name", "isPlural"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.ProductSummaryAccountLogoComponent; }), selector: "bb-product-summary-account-logo", inputs: ["logoSrc", "productKindName", "defaultProductKindName", "iconColor", "iconSize", "logoSize"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.InputInlineEditComponent; }), selector: "bb-input-inline-edit-ui", inputs: ["state", "canEdit", "hasLoadingState", "inputInlineTemplate", "inputText", "maxLength", "minLength", "maxValue", "minValue", "autofocus", "ariaLabelAccept", "ariaLabelCancel", "ariaLabelEdit", "tooltipAccept", "tooltipCancel", "tooltipEdit", "autocomplete", "pattern", "hint"], outputs: ["stateChange", "cancel", "accept"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.ProductNumberComponent; }), selector: "bb-product-number", inputs: ["number", "product", "format", "type", "unmaskable", "masked"], outputs: ["mask", "unmask"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.ArrangementStateIndicatorComponent; }), selector: "bb-arrangement-state-indicator", inputs: ["state", "showActive", "showIcon", "hideStateTextForMobile"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.SwitchComponent; }), selector: "bb-switch-ui", inputs: ["labelPosition"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ManageAccountItemCustomizableDirective; }), selector: "[bbManageAccountItemCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i5__namespace.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }, { type: i0__namespace.forwardRef(function () { return i6__namespace.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i7__namespace.NgModel; }), selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageAccountItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-account-item',
                        templateUrl: 'manage-account-item.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { item: [{
                    type: i0.Input
                }], productAliasMaxLength: [{
                    type: i0.Input
                }], showIcon: [{
                    type: i0.Input
                }], toggleVisibility: [{
                    type: i0.Output
                }], updateAlias: [{
                    type: i0.Output
                }] } });
    /**
     * This is an extension slot to be used for customizing the entire component
     *
     * @usageNotes
     *
     * ### Customize the component
     *
     * ```html
     * <ng-template
     *   bbManageAccountItemCustomizable
     *   let-hostRef
     *   let-item="context">
     *   Your custom template here
     * </ng-template>
     * ```
     *
     * @NgModule ProductSummaryManageAccountsWidgetModule
     */
    var ManageAccountItemCustomizableDirective = /** @class */ (function (_super) {
        __extends(ManageAccountItemCustomizableDirective, _super);
        function ManageAccountItemCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ManageAccountItemCustomizableDirective;
    }(i1$2.BbTemplate));
    ManageAccountItemCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageAccountItemCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ManageAccountItemCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ManageAccountItemCustomizableDirective, selector: "[bbManageAccountItemCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageAccountItemCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbManageAccountItemCustomizable]',
                    }]
            }] });

    /**
     * Widget for displaying and managing accounts
     *
     * The following extension slots are available in this component:
     *
     * - `ProductSummaryManageAccountCustomizableDirective`
     * - `ProductSummaryManageAccountLoadingCustomizableDirective`
     * - `ManageAccountsFooterCustomizableDirective`
     *
     * @see `AccountsOverviewWidgetCustomizableDirective`
     * @see `ProductSummaryManageAccountLoadingCustomizableDirective`
     * @see `ManageAccountsFooterCustomizableDirective`
     *
     * @usageNotes
     *
     * ### Include this widget in your `AppModule`:
     *
     * ```typescript
     * @NgModule({
     *   imports: [
     *     ProductSummaryManageAccountsWidgetModule,
     *   ],
     *   ...
     * })
     * export class AppModule {}
     * ```
     *
     * ### Include this widget (standalone model)
     *
     * ```typescript
     * export const environment: Environment = {
     *   ...
     *   bootstrap: {
     *     pageModel: {
     *       name: 'root',
     *       properties: {},
     *       children: [
     *         {
     *           name: 'product-summary-accounts-overview-widget-ang',
     *           properties: {
     *              classId: 'ProductSummaryManageAccountsWidgetComponent',
     *              businessFunction: 'Product Summary',
     *              resourceName: 'Product Summary',
     *              privilege: 'view',
     *              size: 20,
     *              route: 'manage-accounts',
     *           },
     *         },
     *       ],
     *     },
     *   },
     * };
     *
     * @ngModule ProductSummaryManageAccountsWidgetModule
     * ```
     */
    var ProductSummaryManageAccountsWidgetComponent = /** @class */ (function () {
        /**
         * Constructor
         *
         * @param service
         * @param widgetPropertiesService
         * @param productsExternalInfoService
         * @param el
         */
        function ProductSummaryManageAccountsWidgetComponent(service, widgetPropertiesService, productsExternalInfoService, el) {
            var _this = this;
            this.service = service;
            this.widgetPropertiesService = widgetPropertiesService;
            this.productsExternalInfoService = productsExternalInfoService;
            this.el = el;
            /**
             * Subject for the garbage collector
             */
            this.gc$ = new rxjs.Subject();
            /**
             * @internal
             */
            this.hostRef = this;
            /**
             * ViewChild for `notificationError`
             */
            this.notificationErrorTemplate = '';
            /**
             * ViewChild for `notificationSuccess`
             */
            this.notificationSuccessTemplate = '';
            /**
             * Contains errors occurred during fetching accounts
             */
            this.error = this.service.error;
            /**
             * If errors occurred during patching arrangements record,
             * holds the errors coming from the server
             */
            this.updateError = this.service.updateError;
            /**
             * Available product summary items.
             */
            this.accounts = new rxjs.Observable(function (subscriber) {
                var subscriptions = [];
                subscriptions.push(_this.service.accountList.subscribe(function (accounts) {
                    var products = (accounts === null || accounts === void 0 ? void 0 : accounts.items) || [];
                    subscriber.next(accounts);
                    if (products.some(i3.hasExternalInfo)) {
                        subscriptions.push(_this.productsExternalInfoService
                            .getProductsWithExternalInfo(products)
                            .pipe(operators.map(function (productsWithExternalInfo) { return (Object.assign(Object.assign({}, accounts), { items: productsWithExternalInfo })); }))
                            .subscribe(subscriber));
                    }
                }, subscriber.error));
                return function () { return subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); }); };
            });
            /**
             * Whether the widget is currently fetching data from the server
             */
            this.loading = this.service.loading;
            /**
             * Maximum length of product item aliases
             */
            this.aliasMaxLength = i3.UserPreferencesValidationSettings.ALIAS_MAX_LENGTH;
            this.isSmallScreen = false;
            /**
             * Default business function
             */
            this.businessFunction = 'Product Summary';
            /**
             * Default resource name
             */
            this.resourceName = 'Product Summary';
            /**
             * "Default privilege type
             */
            this.privilege = 'view';
            /**
             * Number of accounts per page
             */
            this.size = 20;
            /**
             * Defines whether product kind icons should be displayed
             *
             * @default true
             */
            this.showIcons = true;
            /**
             * Default pagination parameters
             */
            this.paginationParams = new rxjs.BehaviorSubject({
                from: 0,
                size: 0,
                businessFunction: '',
                resourceName: '',
                privilege: '',
                paginationType: i3.PaginationType.PAGINATION,
            });
            this.requestParams = rxjs.combineLatest(this.paginationParams, this.widgetPropertiesService.widgetProperties).pipe(operators.takeUntil(this.gc$), operators.map(function (_a) {
                var _b = __read(_a, 2), paginationParams = _b[0], widgetProperties = _b[1];
                return ({
                    from: paginationParams.from || 0,
                    size: widgetProperties.size,
                    businessFunction: widgetProperties.businessFunction,
                    resourceName: widgetProperties.resourceName,
                    privilege: widgetProperties.privilege,
                    paginationType: paginationParams.paginationType,
                });
            }));
            /**
             * Joins the specified error messages to display on the template
             *
             * @param messages
             */
            this.processErrorMessages = i3.processErrorMessages;
        }
        /**
         * @internal
         */
        ProductSummaryManageAccountsWidgetComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.widgetPropertiesService.setConfig({
                businessFunction: this.businessFunction,
                resourceName: this.resourceName,
                privilege: this.privilege,
                size: this.size,
            });
            var containerWidth = this.el.nativeElement.children[0].getBoundingClientRect().width;
            this.isSmallScreen = containerWidth <= i3.SMALL_SCREEN_SIZE;
            this.widgetPropertiesService.widgetProperties
                .pipe(operators.takeUntil(this.gc$))
                .subscribe(function (widgetProperties) { return _this.initWidgetProperties(widgetProperties); });
        };
        /**
         * Cleanups just before Angular destroys the component.
         *
         * @returns
         */
        ProductSummaryManageAccountsWidgetComponent.prototype.ngOnDestroy = function () {
            this.gc$.next();
            this.gc$.complete();
        };
        ProductSummaryManageAccountsWidgetComponent.prototype.initWidgetProperties = function (properties) {
            var paginationType = this.isSmallScreen ? i3.PaginationType.LOAD_MORE : i3.PaginationType.PAGINATION;
            this.paginationParams.next(Object.assign(Object.assign({}, this.paginationParams.getValue()), { size: properties.size, paginationType: paginationType }));
            this.service.getAccountsFrom(this.requestParams);
        };
        /**
         * Toggles visibility of product summary item.
         *
         * @param item
         */
        ProductSummaryManageAccountsWidgetComponent.prototype.toggleVisibility = function (item) {
            this.service.toggleVisibility(item, this.notificationErrorTemplate, this.notificationSuccessTemplate);
        };
        /**
         * Updates alias of product summary item, by id.
         *
         * @param id
         * @param alias
         */
        ProductSummaryManageAccountsWidgetComponent.prototype.updateAlias = function (id, alias) {
            if (alias === void 0) { alias = ''; }
            this.service.updateAlias(id, alias, this.notificationErrorTemplate, this.notificationSuccessTemplate);
        };
        /**
         * Event handler for the `pageChange` event of `bb-product-summary-footer-ui`
         * emits the new `page` value to the `paginationParams`
         *
         * @param page
         */
        ProductSummaryManageAccountsWidgetComponent.prototype.onPageChange = function (page) {
            this.paginationParams.next(Object.assign(Object.assign({}, this.paginationParams.getValue()), { from: page }));
        };
        /**
         * Event handler for the `loadMore` event of `bb-product-summary-footer-ui`
         * updates the `from` property of `paginationParams`
         */
        ProductSummaryManageAccountsWidgetComponent.prototype.onLoadMore = function () {
            if (!this.loading.getValue()) {
                this.paginationParams.next(Object.assign(Object.assign({}, this.paginationParams.value), { from: this.paginationParams.value.from ? this.paginationParams.value.from + 1 : 1 }));
            }
        };
        return ProductSummaryManageAccountsWidgetComponent;
    }());
    ProductSummaryManageAccountsWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryManageAccountsWidgetComponent, deps: [{ token: ManageAccountsService }, { token: ManageAccountsWidgetPropertiesService }, { token: i3__namespace$1.ProductsExternalInfoService }, { token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ProductSummaryManageAccountsWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryManageAccountsWidgetComponent, selector: "bb-product-summary-manage-accounts-widget", inputs: { businessFunction: "businessFunction", resourceName: "resourceName", privilege: "privilege", size: "size", showIcons: "showIcons" }, providers: [ManageAccountsWidgetPropertiesService], viewQueries: [{ propertyName: "notificationErrorTemplate", first: true, predicate: ["notificationError"], descendants: true, static: true }, { propertyName: "notificationSuccessTemplate", first: true, predicate: ["notificationSuccess"], descendants: true, static: true }], ngImport: i0__namespace, template: "<div class=\"bb-block bb-block--full-width\">\n  <ng-container *ngIf=\"!(hostRef.error | async | bbIsDefined) && (accounts | async) as accounts; else loadingTemplate\">\n    <ng-container *ngIf=\"((hostRef.loading | async) === false); else loadingTemplate\">\n      <ng-container bbManageAccountCustomizable\n                    [bbHostRef]=\"hostRef\"\n                    [bbTemplateContext]=\"accounts\">\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</div>\n\n<!-- Manage Accounts template -->\n<ng-template\n  bbManageAccountCustomizable\n  let-hostRef\n  let-accounts=\"context\">\n  <div class=\"bb-block bb-block--xl\"\n       data-role=\"product-summary-manage-accounts-initial-message\"\n       i18n=\"Manage Products info|Manage Products info header label@@product.summary.manage.accounts.header.info\">\n    Below you can define which products will be shown in \"My accounts\" and/or edit their account names.\n  </div>\n\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <div class=\"bb-list bb-list--density-md\">\n        <div class=\"bb-list__item\"\n             *ngFor=\"let item of accounts.items\">\n          <bb-manage-account-item\n            [item]=\"item\"\n            [productAliasMaxLength]=\"hostRef.aliasMaxLength\"\n            [showIcon]=\"this.showIcons\"\n            (toggleVisibility)=\"hostRef.toggleVisibility($event)\"\n            (updateAlias)=\"hostRef.updateAlias(item.id, $event)\"\n          ></bb-manage-account-item>\n        </div>\n      </div>\n    </div>\n    <div class=\"card-footer\">\n      <ng-container\n        bbManageAccountsFooterCustomizable\n        [bbHostRef]=\"hostRef\"\n        [bbTemplateContext]=\"{\n            paginationParams: hostRef.paginationParams | async,\n            accounts: accounts\n          }\"\n      >\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #notificationError>\n  <span i18n=\"Failed to update Product|Error notification message@@product-summary-manage.notification.error\">\n    Failed to update Product\n  </span>\n  <span *ngIf=\"updateError | async as updateError\">\n    {{processErrorMessages(updateError.messages)}}\n  </span>\n</ng-template>\n\n<ng-template #notificationSuccess>\n  <span i18n=\"Successfully Updated|Success notification message@@product-summary-manage.notification.success\">\n    Successfully Updated\n  </span>\n</ng-template>\n\n\n<!-- Product summary loading template -->\n<ng-template #loadingTemplate>\n  <ng-container bbManageAccountLoadingCustomizable\n                [bbHostRef]=\"hostRef\">\n  </ng-container>\n</ng-template>\n\n<ng-template\n  bbManageAccountLoadingCustomizable\n  let-hostRef>\n  <ng-container *ngIf=\"hostRef.error | async as error; else loading\">\n    <bb-empty-state-ui\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      iconClasses=\"text-muted\"\n      title=\"\"\n      [subtitle]=\"hostRef.processErrorMessages(error.messages)\"\n    ></bb-empty-state-ui>\n  </ng-container>\n  <ng-template #loading>\n    <bb-loading-indicator-ui\n      text=\"Loading Accounts...\"\n      i18n-text=\"Loading Accounts...|Text for loading indicator@@product.details.loadingAccounts\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n</ng-template>\n\n<ng-template\n  bbManageAccountsFooterCustomizable\n  let-hostRef\n  let-accounts=\"context.accounts\"\n  let-paginationParams=\"context.paginationParams\">\n  <bb-product-summary-footer-ui\n    [page]=\"paginationParams?.from\"\n    [count]=\"accounts?.count\"\n    [hasMore]=\"accounts?.items?.length !== accounts?.count\"\n    [loading]=\"hostRef.loading | async\"\n    [paginationType]=\"paginationParams?.paginationType\"\n    [itemsPerPage]=\"paginationParams?.size\"\n    (pageChange)=\"hostRef.onPageChange($event)\"\n    (loadMore)=\"hostRef.onLoadMore($event)\"\n  ></bb-product-summary-footer-ui>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return ManageAccountItemComponent; }), selector: "bb-manage-account-item", inputs: ["item", "productAliasMaxLength", "showIcon"], outputs: ["toggleVisibility", "updateAlias"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace$1.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.ProductSummaryFooterComponent; }), selector: "bb-product-summary-footer-ui", inputs: ["page", "count", "itemsPerPage", "paginationType", "hasMore", "loading", "boundaryLinks", "directionLinks", "maxNavPages"], outputs: ["pageChange", "loadMore"] }], directives: [{ type: i0__namespace.forwardRef(function () { return i5__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return ProductSummaryManageAccountCustomizableDirective; }), selector: "[bbManageAccountCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i5__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0__namespace.forwardRef(function () { return ManageAccountsFooterCustomizableDirective; }), selector: "[bbManageAccountsFooterCustomizable]" }, { type: i0__namespace.forwardRef(function () { return ProductSummaryManageAccountLoadingCustomizableDirective; }), selector: "[bbManageAccountLoadingCustomizable]" }], pipes: { "bbIsDefined": i0__namespace.forwardRef(function () { return i3__namespace$1.IsDefinedPipe; }), "async": i0__namespace.forwardRef(function () { return i5__namespace.AsyncPipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryManageAccountsWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-product-summary-manage-accounts-widget',
                        templateUrl: 'product-summary-manage-accounts-widget.component.html',
                        providers: [ManageAccountsWidgetPropertiesService],
                    }]
            }], ctorParameters: function () { return [{ type: ManageAccountsService }, { type: ManageAccountsWidgetPropertiesService }, { type: i3__namespace$1.ProductsExternalInfoService }, { type: i0__namespace.ElementRef }]; }, propDecorators: { notificationErrorTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationError', { static: true }]
                }], notificationSuccessTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationSuccess', { static: true }]
                }], businessFunction: [{
                    type: i0.Input,
                    args: [WidgetProperty.BUSINESS_FUNCTION]
                }], resourceName: [{
                    type: i0.Input,
                    args: [WidgetProperty.RESOURCE_NAME]
                }], privilege: [{
                    type: i0.Input,
                    args: [WidgetProperty.PRIVILEGE_TYPE]
                }], size: [{
                    type: i0.Input,
                    args: [WidgetProperty.SIZE]
                }], showIcons: [{
                    type: i0.Input,
                    args: [WidgetProperty.SHOW_ICONS]
                }] } });
    /**
     * This is an extension slot to be used for customizing the entire widget
     *
     * @usageNotes
     *
     * ### Customize the widget
     *
     * ```html
     * <ng-template
     *   bbManageAccountCustomizable
     *   let-hostRef
     *   let-accounts="context">
     *   Your custom template here
     * </ng-template>
     * ```
     *
     * @NgModule ProductSummaryManageAccountsWidgetModule
     */
    var ProductSummaryManageAccountCustomizableDirective = /** @class */ (function (_super) {
        __extends(ProductSummaryManageAccountCustomizableDirective, _super);
        function ProductSummaryManageAccountCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ProductSummaryManageAccountCustomizableDirective;
    }(i1$2.BbTemplate));
    ProductSummaryManageAccountCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryManageAccountCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ProductSummaryManageAccountCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryManageAccountCustomizableDirective, selector: "[bbManageAccountCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryManageAccountCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbManageAccountCustomizable]',
                    }]
            }] });
    /**
     * This is an extension slot to be used for customizing the loading indicator
     *
     * @usageNotes
     *
     * ### Customize the loading indicator
     *
     * ```html
     * <ng-template
     *   bbManageAccountLoadingCustomizable
     *   let-hostRef>
     *   Your custom template here
     * </ng-template>
     * ```
     *
     * @NgModule ProductSummaryManageAccountsWidgetModule
     */
    var ProductSummaryManageAccountLoadingCustomizableDirective = /** @class */ (function (_super) {
        __extends(ProductSummaryManageAccountLoadingCustomizableDirective, _super);
        function ProductSummaryManageAccountLoadingCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ProductSummaryManageAccountLoadingCustomizableDirective;
    }(i1$2.BbTemplate));
    ProductSummaryManageAccountLoadingCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryManageAccountLoadingCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ProductSummaryManageAccountLoadingCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryManageAccountLoadingCustomizableDirective, selector: "[bbManageAccountLoadingCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryManageAccountLoadingCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbManageAccountLoadingCustomizable]',
                    }]
            }] });
    /**
     * This is an extension slot to be used for customizing the footer
     *
     * @usageNotes
     *
     * ### Customize the footer
     *
     * ```html
     * <ng-template
     *   bbManageAccountsFooterCustomizable
     *   let-hostRef
     *   let-accounts="context.accounts"
     *   let-paginationParams="context.paginationParams">
     *   Your custom template here
     * </ng-template>
     * ```
     *
     * @NgModule ProductSummaryManageAccountsWidgetModule
     */
    var ManageAccountsFooterCustomizableDirective = /** @class */ (function (_super) {
        __extends(ManageAccountsFooterCustomizableDirective, _super);
        function ManageAccountsFooterCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ManageAccountsFooterCustomizableDirective;
    }(i1$2.BbTemplate));
    ManageAccountsFooterCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageAccountsFooterCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ManageAccountsFooterCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ManageAccountsFooterCustomizableDirective, selector: "[bbManageAccountsFooterCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageAccountsFooterCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbManageAccountsFooterCustomizable]',
                    }]
            }] });

    var components = [ProductSummaryManageAccountsWidgetComponent, ManageAccountItemComponent];
    var directives = [
        ProductSummaryManageAccountCustomizableDirective,
        ManageAccountItemCustomizableDirective,
        ProductSummaryManageAccountLoadingCustomizableDirective,
        ManageAccountsFooterCustomizableDirective,
    ];
    var uiModules = [
        i5$1.EmptyStateModule,
        i6$1.LoadingIndicatorModule,
        i2$1.InputInlineEditModule,
        paymentCardNumberPipe.PaymentCardNumberModule,
        i3$1.AmountModule,
        i4.SwitchModule,
        i2.NotificationModule,
        i1$1.ArrangementStateIndicatorModule,
        i1$1.ProductSummaryAccountLogoModule,
        i1$1.ProductSummaryFooterModule,
        i1$1.ProductKindNameModule,
        i1$1.ProductNumberModule,
        i6.TooltipModule,
        i3.ValidationModule,
    ];
    /**
     * Exports the Widgets and UI components for managing accounts
     *
     * The following widgets are included in this module:
     *  - `ProductSummaryManageAccountsWidgetComponent`
     *
     * @see ProductSummaryManageAccountsWidgetComponent
     *
     * The following components are included in this module:
     * - `ManageAccountItemComponent`,
     *
     * @see `ManageAccountItemComponent`,
     *
     * @usageNotes
     *
     * ### Include the exported widgets in your `AppModule`:
     *
     * ```typescript
     * @NgModule({
     *   imports: [
     *     ProductSummaryManageAccountsWidgetModule,
     *   ],
     *   ...
     * })
     * export class AppModule {}
     * ```
     */
    var ProductSummaryManageAccountsWidgetModule = /** @class */ (function () {
        function ProductSummaryManageAccountsWidgetModule() {
        }
        return ProductSummaryManageAccountsWidgetModule;
    }());
    ProductSummaryManageAccountsWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryManageAccountsWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ProductSummaryManageAccountsWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryManageAccountsWidgetModule, declarations: [ProductSummaryManageAccountsWidgetComponent, ManageAccountItemComponent, ProductSummaryManageAccountCustomizableDirective,
            ManageAccountItemCustomizableDirective,
            ProductSummaryManageAccountLoadingCustomizableDirective,
            ManageAccountsFooterCustomizableDirective], imports: [i5.CommonModule,
            i7.FormsModule, i1__namespace$2.BackbaseCoreModule, i3.ProductSummaryCommon, i5$1.EmptyStateModule,
            i6$1.LoadingIndicatorModule,
            i2$1.InputInlineEditModule,
            paymentCardNumberPipe.PaymentCardNumberModule,
            i3$1.AmountModule,
            i4.SwitchModule,
            i2.NotificationModule,
            i1$1.ArrangementStateIndicatorModule,
            i1$1.ProductSummaryAccountLogoModule,
            i1$1.ProductSummaryFooterModule,
            i1$1.ProductKindNameModule,
            i1$1.ProductNumberModule,
            i6.TooltipModule,
            i3.ValidationModule], exports: [ProductSummaryManageAccountsWidgetComponent, ManageAccountItemComponent, ProductSummaryManageAccountCustomizableDirective,
            ManageAccountItemCustomizableDirective,
            ProductSummaryManageAccountLoadingCustomizableDirective,
            ManageAccountsFooterCustomizableDirective, i5$1.EmptyStateModule,
            i6$1.LoadingIndicatorModule,
            i2$1.InputInlineEditModule,
            paymentCardNumberPipe.PaymentCardNumberModule,
            i3$1.AmountModule,
            i4.SwitchModule,
            i2.NotificationModule,
            i1$1.ArrangementStateIndicatorModule,
            i1$1.ProductSummaryAccountLogoModule,
            i1$1.ProductSummaryFooterModule,
            i1$1.ProductKindNameModule,
            i1$1.ProductNumberModule,
            i6.TooltipModule,
            i3.ValidationModule] });
    ProductSummaryManageAccountsWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryManageAccountsWidgetModule, providers: [ManageAccountsService, i3.ProductsExternalInfoService], imports: [__spreadArray([
                i5.CommonModule,
                i7.FormsModule,
                i1$2.BackbaseCoreModule.withConfig({
                    classMap: {
                        ProductSummaryManageAccountsWidgetComponent: ProductSummaryManageAccountsWidgetComponent,
                    },
                }),
                i3.ProductSummaryCommon
            ], __read(uiModules)), i5$1.EmptyStateModule,
            i6$1.LoadingIndicatorModule,
            i2$1.InputInlineEditModule,
            paymentCardNumberPipe.PaymentCardNumberModule,
            i3$1.AmountModule,
            i4.SwitchModule,
            i2.NotificationModule,
            i1$1.ArrangementStateIndicatorModule,
            i1$1.ProductSummaryAccountLogoModule,
            i1$1.ProductSummaryFooterModule,
            i1$1.ProductKindNameModule,
            i1$1.ProductNumberModule,
            i6.TooltipModule,
            i3.ValidationModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryManageAccountsWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray([
                            i5.CommonModule,
                            i7.FormsModule,
                            i1$2.BackbaseCoreModule.withConfig({
                                classMap: {
                                    ProductSummaryManageAccountsWidgetComponent: ProductSummaryManageAccountsWidgetComponent,
                                },
                            }),
                            i3.ProductSummaryCommon
                        ], __read(uiModules)),
                        declarations: __spreadArray(__spreadArray([], __read(components)), __read(directives)),
                        exports: __spreadArray(__spreadArray(__spreadArray([], __read(components)), __read(directives)), __read(uiModules)),
                        providers: [ManageAccountsService, i3.ProductsExternalInfoService],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ManageAccountAccessDenied = ManageAccountAccessDenied;
    exports.ManageAccountBadRequest = ManageAccountBadRequest;
    exports.ManageAccountConnectivityError = ManageAccountConnectivityError;
    exports.ManageAccountItemComponent = ManageAccountItemComponent;
    exports.ManageAccountItemCustomizableDirective = ManageAccountItemCustomizableDirective;
    exports.ManageAccountNotFound = ManageAccountNotFound;
    exports.ManageAccountUnknownError = ManageAccountUnknownError;
    exports.ManageAccountsFooterCustomizableDirective = ManageAccountsFooterCustomizableDirective;
    exports.ManageAccountsService = ManageAccountsService;
    exports.ManageAccountsWidgetPropertiesService = ManageAccountsWidgetPropertiesService;
    exports.ProductSummaryManageAccountCustomizableDirective = ProductSummaryManageAccountCustomizableDirective;
    exports.ProductSummaryManageAccountLoadingCustomizableDirective = ProductSummaryManageAccountLoadingCustomizableDirective;
    exports.ProductSummaryManageAccountsWidgetComponent = ProductSummaryManageAccountsWidgetComponent;
    exports.ProductSummaryManageAccountsWidgetModule = ProductSummaryManageAccountsWidgetModule;
    exports.WidgetProperty = WidgetProperty;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-product-summary-manage-accounts-widget-ang.umd.js.map
