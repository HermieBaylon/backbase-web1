import { Component, Directive, ViewChild, Input, } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';
import { PaginationType, SMALL_SCREEN_SIZE, processErrorMessages, UserPreferencesValidationSettings, hasExternalInfo, } from '@backbase/product-summary-common-ang';
import { map, takeUntil } from 'rxjs/operators';
import { WidgetProperty } from '../model/constants';
import { ManageAccountsWidgetPropertiesService } from '../manage-accounts-widget-properties.service';
import * as i0 from "@angular/core";
import * as i1 from "../manage.service";
import * as i2 from "../manage-accounts-widget-properties.service";
import * as i3 from "@backbase/product-summary-common-ang";
import * as i4 from "../manage-account-item/manage-account-item.component";
import * as i5 from "@backbase/ui-ang/empty-state";
import * as i6 from "@backbase/ui-ang/loading-indicator";
import * as i7 from "@backbase/product-summary-ui";
import * as i8 from "@angular/common";
/**
 * Widget for displaying and managing accounts
 *
 * The following extension slots are available in this component:
 *
 * - `ProductSummaryManageAccountCustomizableDirective`
 * - `ProductSummaryManageAccountLoadingCustomizableDirective`
 * - `ManageAccountsFooterCustomizableDirective`
 *
 * @see `AccountsOverviewWidgetCustomizableDirective`
 * @see `ProductSummaryManageAccountLoadingCustomizableDirective`
 * @see `ManageAccountsFooterCustomizableDirective`
 *
 * @usageNotes
 *
 * ### Include this widget in your `AppModule`:
 *
 * ```typescript
 * @NgModule({
 *   imports: [
 *     ProductSummaryManageAccountsWidgetModule,
 *   ],
 *   ...
 * })
 * export class AppModule {}
 * ```
 *
 * ### Include this widget (standalone model)
 *
 * ```typescript
 * export const environment: Environment = {
 *   ...
 *   bootstrap: {
 *     pageModel: {
 *       name: 'root',
 *       properties: {},
 *       children: [
 *         {
 *           name: 'product-summary-accounts-overview-widget-ang',
 *           properties: {
 *              classId: 'ProductSummaryManageAccountsWidgetComponent',
 *              businessFunction: 'Product Summary',
 *              resourceName: 'Product Summary',
 *              privilege: 'view',
 *              size: 20,
 *              route: 'manage-accounts',
 *           },
 *         },
 *       ],
 *     },
 *   },
 * };
 *
 * @ngModule ProductSummaryManageAccountsWidgetModule
 * ```
 */
export class ProductSummaryManageAccountsWidgetComponent {
    /**
     * Constructor
     *
     * @param service
     * @param widgetPropertiesService
     * @param productsExternalInfoService
     * @param el
     */
    constructor(service, widgetPropertiesService, productsExternalInfoService, el) {
        this.service = service;
        this.widgetPropertiesService = widgetPropertiesService;
        this.productsExternalInfoService = productsExternalInfoService;
        this.el = el;
        /**
         * Subject for the garbage collector
         */
        this.gc$ = new Subject();
        /**
         * @internal
         */
        this.hostRef = this;
        /**
         * ViewChild for `notificationError`
         */
        this.notificationErrorTemplate = '';
        /**
         * ViewChild for `notificationSuccess`
         */
        this.notificationSuccessTemplate = '';
        /**
         * Contains errors occurred during fetching accounts
         */
        this.error = this.service.error;
        /**
         * If errors occurred during patching arrangements record,
         * holds the errors coming from the server
         */
        this.updateError = this.service.updateError;
        /**
         * Available product summary items.
         */
        this.accounts = new Observable(subscriber => {
            const subscriptions = [];
            subscriptions.push(this.service.accountList.subscribe((accounts) => {
                const products = (accounts === null || accounts === void 0 ? void 0 : accounts.items) || [];
                subscriber.next(accounts);
                if (products.some(hasExternalInfo)) {
                    subscriptions.push(this.productsExternalInfoService
                        .getProductsWithExternalInfo(products)
                        .pipe(map(productsWithExternalInfo => (Object.assign(Object.assign({}, accounts), { items: productsWithExternalInfo }))))
                        .subscribe(subscriber));
                }
            }, subscriber.error));
            return () => subscriptions.forEach(subscription => subscription.unsubscribe());
        });
        /**
         * Whether the widget is currently fetching data from the server
         */
        this.loading = this.service.loading;
        /**
         * Maximum length of product item aliases
         */
        this.aliasMaxLength = UserPreferencesValidationSettings.ALIAS_MAX_LENGTH;
        this.isSmallScreen = false;
        /**
         * Default business function
         */
        this.businessFunction = 'Product Summary';
        /**
         * Default resource name
         */
        this.resourceName = 'Product Summary';
        /**
         * "Default privilege type
         */
        this.privilege = 'view';
        /**
         * Number of accounts per page
         */
        this.size = 20;
        /**
         * Defines whether product kind icons should be displayed
         *
         * @default true
         */
        this.showIcons = true;
        /**
         * Default pagination parameters
         */
        this.paginationParams = new BehaviorSubject({
            from: 0,
            size: 0,
            businessFunction: '',
            resourceName: '',
            privilege: '',
            paginationType: PaginationType.PAGINATION,
        });
        this.requestParams = combineLatest(this.paginationParams, this.widgetPropertiesService.widgetProperties).pipe(takeUntil(this.gc$), map(([paginationParams, widgetProperties]) => ({
            from: paginationParams.from || 0,
            size: widgetProperties.size,
            businessFunction: widgetProperties.businessFunction,
            resourceName: widgetProperties.resourceName,
            privilege: widgetProperties.privilege,
            paginationType: paginationParams.paginationType,
        })));
        /**
         * Joins the specified error messages to display on the template
         *
         * @param messages
         */
        this.processErrorMessages = processErrorMessages;
    }
    /**
     * @internal
     */
    ngAfterViewInit() {
        this.widgetPropertiesService.setConfig({
            businessFunction: this.businessFunction,
            resourceName: this.resourceName,
            privilege: this.privilege,
            size: this.size,
        });
        const containerWidth = this.el.nativeElement.children[0].getBoundingClientRect().width;
        this.isSmallScreen = containerWidth <= SMALL_SCREEN_SIZE;
        this.widgetPropertiesService.widgetProperties
            .pipe(takeUntil(this.gc$))
            .subscribe(widgetProperties => this.initWidgetProperties(widgetProperties));
    }
    /**
     * Cleanups just before Angular destroys the component.
     *
     * @returns
     */
    ngOnDestroy() {
        this.gc$.next();
        this.gc$.complete();
    }
    initWidgetProperties(properties) {
        const paginationType = this.isSmallScreen ? PaginationType.LOAD_MORE : PaginationType.PAGINATION;
        this.paginationParams.next(Object.assign(Object.assign({}, this.paginationParams.getValue()), { size: properties.size, paginationType }));
        this.service.getAccountsFrom(this.requestParams);
    }
    /**
     * Toggles visibility of product summary item.
     *
     * @param item
     */
    toggleVisibility(item) {
        this.service.toggleVisibility(item, this.notificationErrorTemplate, this.notificationSuccessTemplate);
    }
    /**
     * Updates alias of product summary item, by id.
     *
     * @param id
     * @param alias
     */
    updateAlias(id, alias = '') {
        this.service.updateAlias(id, alias, this.notificationErrorTemplate, this.notificationSuccessTemplate);
    }
    /**
     * Event handler for the `pageChange` event of `bb-product-summary-footer-ui`
     * emits the new `page` value to the `paginationParams`
     *
     * @param page
     */
    onPageChange(page) {
        this.paginationParams.next(Object.assign(Object.assign({}, this.paginationParams.getValue()), { from: page }));
    }
    /**
     * Event handler for the `loadMore` event of `bb-product-summary-footer-ui`
     * updates the `from` property of `paginationParams`
     */
    onLoadMore() {
        if (!this.loading.getValue()) {
            this.paginationParams.next(Object.assign(Object.assign({}, this.paginationParams.value), { from: this.paginationParams.value.from ? this.paginationParams.value.from + 1 : 1 }));
        }
    }
}
ProductSummaryManageAccountsWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryManageAccountsWidgetComponent, deps: [{ token: i1.ManageAccountsService }, { token: i2.ManageAccountsWidgetPropertiesService }, { token: i3.ProductsExternalInfoService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
ProductSummaryManageAccountsWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryManageAccountsWidgetComponent, selector: "bb-product-summary-manage-accounts-widget", inputs: { businessFunction: "businessFunction", resourceName: "resourceName", privilege: "privilege", size: "size", showIcons: "showIcons" }, providers: [ManageAccountsWidgetPropertiesService], viewQueries: [{ propertyName: "notificationErrorTemplate", first: true, predicate: ["notificationError"], descendants: true, static: true }, { propertyName: "notificationSuccessTemplate", first: true, predicate: ["notificationSuccess"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"bb-block bb-block--full-width\">\n  <ng-container *ngIf=\"!(hostRef.error | async | bbIsDefined) && (accounts | async) as accounts; else loadingTemplate\">\n    <ng-container *ngIf=\"((hostRef.loading | async) === false); else loadingTemplate\">\n      <ng-container bbManageAccountCustomizable\n                    [bbHostRef]=\"hostRef\"\n                    [bbTemplateContext]=\"accounts\">\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</div>\n\n<!-- Manage Accounts template -->\n<ng-template\n  bbManageAccountCustomizable\n  let-hostRef\n  let-accounts=\"context\">\n  <div class=\"bb-block bb-block--xl\"\n       data-role=\"product-summary-manage-accounts-initial-message\"\n       i18n=\"Manage Products info|Manage Products info header label@@product.summary.manage.accounts.header.info\">\n    Below you can define which products will be shown in \"My accounts\" and/or edit their account names.\n  </div>\n\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <div class=\"bb-list bb-list--density-md\">\n        <div class=\"bb-list__item\"\n             *ngFor=\"let item of accounts.items\">\n          <bb-manage-account-item\n            [item]=\"item\"\n            [productAliasMaxLength]=\"hostRef.aliasMaxLength\"\n            [showIcon]=\"this.showIcons\"\n            (toggleVisibility)=\"hostRef.toggleVisibility($event)\"\n            (updateAlias)=\"hostRef.updateAlias(item.id, $event)\"\n          ></bb-manage-account-item>\n        </div>\n      </div>\n    </div>\n    <div class=\"card-footer\">\n      <ng-container\n        bbManageAccountsFooterCustomizable\n        [bbHostRef]=\"hostRef\"\n        [bbTemplateContext]=\"{\n            paginationParams: hostRef.paginationParams | async,\n            accounts: accounts\n          }\"\n      >\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #notificationError>\n  <span i18n=\"Failed to update Product|Error notification message@@product-summary-manage.notification.error\">\n    Failed to update Product\n  </span>\n  <span *ngIf=\"updateError | async as updateError\">\n    {{processErrorMessages(updateError.messages)}}\n  </span>\n</ng-template>\n\n<ng-template #notificationSuccess>\n  <span i18n=\"Successfully Updated|Success notification message@@product-summary-manage.notification.success\">\n    Successfully Updated\n  </span>\n</ng-template>\n\n\n<!-- Product summary loading template -->\n<ng-template #loadingTemplate>\n  <ng-container bbManageAccountLoadingCustomizable\n                [bbHostRef]=\"hostRef\">\n  </ng-container>\n</ng-template>\n\n<ng-template\n  bbManageAccountLoadingCustomizable\n  let-hostRef>\n  <ng-container *ngIf=\"hostRef.error | async as error; else loading\">\n    <bb-empty-state-ui\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      iconClasses=\"text-muted\"\n      title=\"\"\n      [subtitle]=\"hostRef.processErrorMessages(error.messages)\"\n    ></bb-empty-state-ui>\n  </ng-container>\n  <ng-template #loading>\n    <bb-loading-indicator-ui\n      text=\"Loading Accounts...\"\n      i18n-text=\"Loading Accounts...|Text for loading indicator@@product.details.loadingAccounts\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n</ng-template>\n\n<ng-template\n  bbManageAccountsFooterCustomizable\n  let-hostRef\n  let-accounts=\"context.accounts\"\n  let-paginationParams=\"context.paginationParams\">\n  <bb-product-summary-footer-ui\n    [page]=\"paginationParams?.from\"\n    [count]=\"accounts?.count\"\n    [hasMore]=\"accounts?.items?.length !== accounts?.count\"\n    [loading]=\"hostRef.loading | async\"\n    [paginationType]=\"paginationParams?.paginationType\"\n    [itemsPerPage]=\"paginationParams?.size\"\n    (pageChange)=\"hostRef.onPageChange($event)\"\n    (loadMore)=\"hostRef.onLoadMore($event)\"\n  ></bb-product-summary-footer-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i4.ManageAccountItemComponent; }), selector: "bb-manage-account-item", inputs: ["item", "productAliasMaxLength", "showIcon"], outputs: ["toggleVisibility", "updateAlias"] }, { type: i0.forwardRef(function () { return i5.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0.forwardRef(function () { return i6.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i7.ProductSummaryFooterComponent; }), selector: "bb-product-summary-footer-ui", inputs: ["page", "count", "itemsPerPage", "paginationType", "hasMore", "loading", "boundaryLinks", "directionLinks", "maxNavPages"], outputs: ["pageChange", "loadMore"] }], directives: [{ type: i0.forwardRef(function () { return i8.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return ProductSummaryManageAccountCustomizableDirective; }), selector: "[bbManageAccountCustomizable]" }, { type: i0.forwardRef(function () { return i8.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return ManageAccountsFooterCustomizableDirective; }), selector: "[bbManageAccountsFooterCustomizable]" }, { type: i0.forwardRef(function () { return ProductSummaryManageAccountLoadingCustomizableDirective; }), selector: "[bbManageAccountLoadingCustomizable]" }], pipes: { "bbIsDefined": i0.forwardRef(function () { return i3.IsDefinedPipe; }), "async": i0.forwardRef(function () { return i8.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryManageAccountsWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-summary-manage-accounts-widget',
                    templateUrl: 'product-summary-manage-accounts-widget.component.html',
                    providers: [ManageAccountsWidgetPropertiesService],
                }]
        }], ctorParameters: function () { return [{ type: i1.ManageAccountsService }, { type: i2.ManageAccountsWidgetPropertiesService }, { type: i3.ProductsExternalInfoService }, { type: i0.ElementRef }]; }, propDecorators: { notificationErrorTemplate: [{
                type: ViewChild,
                args: ['notificationError', { static: true }]
            }], notificationSuccessTemplate: [{
                type: ViewChild,
                args: ['notificationSuccess', { static: true }]
            }], businessFunction: [{
                type: Input,
                args: [WidgetProperty.BUSINESS_FUNCTION]
            }], resourceName: [{
                type: Input,
                args: [WidgetProperty.RESOURCE_NAME]
            }], privilege: [{
                type: Input,
                args: [WidgetProperty.PRIVILEGE_TYPE]
            }], size: [{
                type: Input,
                args: [WidgetProperty.SIZE]
            }], showIcons: [{
                type: Input,
                args: [WidgetProperty.SHOW_ICONS]
            }] } });
/**
 * This is an extension slot to be used for customizing the entire widget
 *
 * @usageNotes
 *
 * ### Customize the widget
 *
 * ```html
 * <ng-template
 *   bbManageAccountCustomizable
 *   let-hostRef
 *   let-accounts="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryManageAccountsWidgetModule
 */
export class ProductSummaryManageAccountCustomizableDirective extends BbTemplate {
}
ProductSummaryManageAccountCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryManageAccountCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryManageAccountCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryManageAccountCustomizableDirective, selector: "[bbManageAccountCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryManageAccountCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbManageAccountCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing the loading indicator
 *
 * @usageNotes
 *
 * ### Customize the loading indicator
 *
 * ```html
 * <ng-template
 *   bbManageAccountLoadingCustomizable
 *   let-hostRef>
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryManageAccountsWidgetModule
 */
export class ProductSummaryManageAccountLoadingCustomizableDirective extends BbTemplate {
}
ProductSummaryManageAccountLoadingCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryManageAccountLoadingCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryManageAccountLoadingCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryManageAccountLoadingCustomizableDirective, selector: "[bbManageAccountLoadingCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryManageAccountLoadingCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbManageAccountLoadingCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing the footer
 *
 * @usageNotes
 *
 * ### Customize the footer
 *
 * ```html
 * <ng-template
 *   bbManageAccountsFooterCustomizable
 *   let-hostRef
 *   let-accounts="context.accounts"
 *   let-paginationParams="context.paginationParams">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryManageAccountsWidgetModule
 */
export class ManageAccountsFooterCustomizableDirective extends BbTemplate {
}
ManageAccountsFooterCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageAccountsFooterCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ManageAccountsFooterCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ManageAccountsFooterCustomizableDirective, selector: "[bbManageAccountsFooterCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageAccountsFooterCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbManageAccountsFooterCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1zdW1tYXJ5LW1hbmFnZS1hY2NvdW50cy13aWRnZXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9wcm9kdWN0LXN1bW1hcnktbWFuYWdlLWFjY291bnRzLXdpZGdldC1hbmcvc3JjL3Byb2R1Y3Qtc3VtbWFyeS1tYW5hZ2UtYWNjb3VudHMtd2lkZ2V0L3Byb2R1Y3Qtc3VtbWFyeS1tYW5hZ2UtYWNjb3VudHMtd2lkZ2V0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvcHJvZHVjdC1zdW1tYXJ5LW1hbmFnZS1hY2NvdW50cy13aWRnZXQtYW5nL3NyYy9wcm9kdWN0LXN1bW1hcnktbWFuYWdlLWFjY291bnRzLXdpZGdldC9wcm9kdWN0LXN1bW1hcnktbWFuYWdlLWFjY291bnRzLXdpZGdldC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFNBQVMsRUFFVCxTQUFTLEVBRVQsS0FBSyxHQUdOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRzNFLE9BQU8sRUFHTCxjQUFjLEVBQ2QsaUJBQWlCLEVBQ2pCLG9CQUFvQixFQUNwQixpQ0FBaUMsRUFFakMsZUFBZSxHQUdoQixNQUFNLHNDQUFzQyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFaEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLDhDQUE4QyxDQUFDOzs7Ozs7Ozs7O0FBR3JHOzs7Ozs7Ozs7Ozs7Ozs7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QkFBOUMsS0FBSzt1QkFBQyxjQUFjLENBQUMsY0FBYztnQkFJUixJQUFJO3NCQUEvQixLQUFLO3VCQUFDLGNBQWMsQ0FBQyxJQUFJO2dCQU1RLFNBQVM7c0JBQTFDLEtBQUs7dUJBQUMsY0FBYyxDQUFDLFVBQVU7O0FBaUlsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFJSCxNQUFNLE9BQU8sZ0RBQWlELFNBQVEsVUFHckU7OzhJQUhZLGdEQUFnRDtrSUFBaEQsZ0RBQWdEOzRGQUFoRCxnREFBZ0Q7a0JBSDVELFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLCtCQUErQjtpQkFDMUM7O0FBS0Q7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFJSCxNQUFNLE9BQU8sdURBQXdELFNBQVEsVUFHNUU7O3FKQUhZLHVEQUF1RDt5SUFBdkQsdURBQXVEOzRGQUF2RCx1REFBdUQ7a0JBSG5FLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHNDQUFzQztpQkFDakQ7O0FBS0Q7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtCRztBQUlILE1BQU0sT0FBTyx5Q0FBMEMsU0FBUSxVQUc5RDs7dUlBSFkseUNBQXlDOzJIQUF6Qyx5Q0FBeUM7NEZBQXpDLHlDQUF5QztrQkFIckQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsc0NBQXNDO2lCQUNqRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRGlyZWN0aXZlLFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkLFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgT25EZXN0cm95LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJiVGVtcGxhdGUgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE1hbmFnZUFjY291bnRzU2VydmljZSB9IGZyb20gJy4uL21hbmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IE1hbmFnZUFjY291bnRFcnJvciB9IGZyb20gJy4uL21hbmFnZS1hY2NvdW50LWVycm9yJztcbmltcG9ydCB7XG4gIEFjY291bnRzLFxuICBHZXRQcm9kdWN0c3VtbWFyeVJlcXVlc3QsXG4gIFBhZ2luYXRpb25UeXBlLFxuICBTTUFMTF9TQ1JFRU5fU0laRSxcbiAgcHJvY2Vzc0Vycm9yTWVzc2FnZXMsXG4gIFVzZXJQcmVmZXJlbmNlc1ZhbGlkYXRpb25TZXR0aW5ncyxcbiAgUHJvZHVjdHNFeHRlcm5hbEluZm9TZXJ2aWNlLFxuICBoYXNFeHRlcm5hbEluZm8sXG4gIFByb2R1Y3RTdW1tYXJ5SXRlbSxcbiAgV2lkZ2V0UHJvcGVydGllcyxcbn0gZnJvbSAnQGJhY2tiYXNlL3Byb2R1Y3Qtc3VtbWFyeS1jb21tb24tYW5nJztcbmltcG9ydCB7IG1hcCwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgR2V0QXJyYW5nZW1lbnRzUmVxdWVzdFBhcmFtcyB9IGZyb20gJy4uL21vZGVsL3R5cGVzJztcbmltcG9ydCB7IFdpZGdldFByb3BlcnR5IH0gZnJvbSAnLi4vbW9kZWwvY29uc3RhbnRzJztcbmltcG9ydCB7IE1hbmFnZUFjY291bnRzV2lkZ2V0UHJvcGVydGllc1NlcnZpY2UgfSBmcm9tICcuLi9tYW5hZ2UtYWNjb3VudHMtd2lkZ2V0LXByb3BlcnRpZXMuc2VydmljZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBXaWRnZXQgZm9yIGRpc3BsYXlpbmcgYW5kIG1hbmFnaW5nIGFjY291bnRzXG4gKlxuICogVGhlIGZvbGxvd2luZyBleHRlbnNpb24gc2xvdHMgYXJlIGF2YWlsYWJsZSBpbiB0aGlzIGNvbXBvbmVudDpcbiAqXG4gKiAtIGBQcm9kdWN0U3VtbWFyeU1hbmFnZUFjY291bnRDdXN0b21pemFibGVEaXJlY3RpdmVgXG4gKiAtIGBQcm9kdWN0U3VtbWFyeU1hbmFnZUFjY291bnRMb2FkaW5nQ3VzdG9taXphYmxlRGlyZWN0aXZlYFxuICogLSBgTWFuYWdlQWNjb3VudHNGb290ZXJDdXN0b21pemFibGVEaXJlY3RpdmVgXG4gKlxuICogQHNlZSBgQWNjb3VudHNPdmVydmlld1dpZGdldEN1c3RvbWl6YWJsZURpcmVjdGl2ZWBcbiAqIEBzZWUgYFByb2R1Y3RTdW1tYXJ5TWFuYWdlQWNjb3VudExvYWRpbmdDdXN0b21pemFibGVEaXJlY3RpdmVgXG4gKiBAc2VlIGBNYW5hZ2VBY2NvdW50c0Zvb3RlckN1c3RvbWl6YWJsZURpcmVjdGl2ZWBcbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICpcbiAqICMjIyBJbmNsdWRlIHRoaXMgd2lkZ2V0IGluIHlvdXIgYEFwcE1vZHVsZWA6XG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogQE5nTW9kdWxlKHtcbiAqICAgaW1wb3J0czogW1xuICogICAgIFByb2R1Y3RTdW1tYXJ5TWFuYWdlQWNjb3VudHNXaWRnZXRNb2R1bGUsXG4gKiAgIF0sXG4gKiAgIC4uLlxuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBBcHBNb2R1bGUge31cbiAqIGBgYFxuICpcbiAqICMjIyBJbmNsdWRlIHRoaXMgd2lkZ2V0IChzdGFuZGFsb25lIG1vZGVsKVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGV4cG9ydCBjb25zdCBlbnZpcm9ubWVudDogRW52aXJvbm1lbnQgPSB7XG4gKiAgIC4uLlxuICogICBib290c3RyYXA6IHtcbiAqICAgICBwYWdlTW9kZWw6IHtcbiAqICAgICAgIG5hbWU6ICdyb290JyxcbiAqICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICogICAgICAgY2hpbGRyZW46IFtcbiAqICAgICAgICAge1xuICogICAgICAgICAgIG5hbWU6ICdwcm9kdWN0LXN1bW1hcnktYWNjb3VudHMtb3ZlcnZpZXctd2lkZ2V0LWFuZycsXG4gKiAgICAgICAgICAgcHJvcGVydGllczoge1xuICogICAgICAgICAgICAgIGNsYXNzSWQ6ICdQcm9kdWN0U3VtbWFyeU1hbmFnZUFjY291bnRzV2lkZ2V0Q29tcG9uZW50JyxcbiAqICAgICAgICAgICAgICBidXNpbmVzc0Z1bmN0aW9uOiAnUHJvZHVjdCBTdW1tYXJ5JyxcbiAqICAgICAgICAgICAgICByZXNvdXJjZU5hbWU6ICdQcm9kdWN0IFN1bW1hcnknLFxuICogICAgICAgICAgICAgIHByaXZpbGVnZTogJ3ZpZXcnLFxuICogICAgICAgICAgICAgIHNpemU6IDIwLFxuICogICAgICAgICAgICAgIHJvdXRlOiAnbWFuYWdlLWFjY291bnRzJyxcbiAqICAgICAgICAgICB9LFxuICogICAgICAgICB9LFxuICogICAgICAgXSxcbiAqICAgICB9LFxuICogICB9LFxuICogfTtcbiAqXG4gKiBAbmdNb2R1bGUgUHJvZHVjdFN1bW1hcnlNYW5hZ2VBY2NvdW50c1dpZGdldE1vZHVsZVxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLXByb2R1Y3Qtc3VtbWFyeS1tYW5hZ2UtYWNjb3VudHMtd2lkZ2V0JyxcbiAgdGVtcGxhdGVVcmw6ICdwcm9kdWN0LXN1bW1hcnktbWFuYWdlLWFjY291bnRzLXdpZGdldC5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVyczogW01hbmFnZUFjY291bnRzV2lkZ2V0UHJvcGVydGllc1NlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBQcm9kdWN0U3VtbWFyeU1hbmFnZUFjY291bnRzV2lkZ2V0Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgLyoqXG4gICAqIFN1YmplY3QgZm9yIHRoZSBnYXJiYWdlIGNvbGxlY3RvclxuICAgKi9cbiAgZ2MkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVhZG9ubHkgaG9zdFJlZjogUHJvZHVjdFN1bW1hcnlNYW5hZ2VBY2NvdW50c1dpZGdldENvbXBvbmVudCA9IHRoaXM7XG4gIC8qKlxuICAgKiBWaWV3Q2hpbGQgZm9yIGBub3RpZmljYXRpb25FcnJvcmBcbiAgICovXG4gIEBWaWV3Q2hpbGQoJ25vdGlmaWNhdGlvbkVycm9yJywgeyBzdGF0aWM6IHRydWUgfSkgbm90aWZpY2F0aW9uRXJyb3JUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PiB8IHN0cmluZyA9ICcnO1xuICAvKipcbiAgICogVmlld0NoaWxkIGZvciBgbm90aWZpY2F0aW9uU3VjY2Vzc2BcbiAgICovXG4gIEBWaWV3Q2hpbGQoJ25vdGlmaWNhdGlvblN1Y2Nlc3MnLCB7IHN0YXRpYzogdHJ1ZSB9KSBub3RpZmljYXRpb25TdWNjZXNzVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4gfCBzdHJpbmcgPSAnJztcbiAgLyoqXG4gICAqIENvbnRhaW5zIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgZmV0Y2hpbmcgYWNjb3VudHNcbiAgICovXG4gIHJlYWRvbmx5IGVycm9yOiBPYnNlcnZhYmxlPE1hbmFnZUFjY291bnRFcnJvciB8IHVuZGVmaW5lZD4gPSB0aGlzLnNlcnZpY2UuZXJyb3I7XG4gIC8qKlxuICAgKiBJZiBlcnJvcnMgb2NjdXJyZWQgZHVyaW5nIHBhdGNoaW5nIGFycmFuZ2VtZW50cyByZWNvcmQsXG4gICAqIGhvbGRzIHRoZSBlcnJvcnMgY29taW5nIGZyb20gdGhlIHNlcnZlclxuICAgKi9cbiAgcmVhZG9ubHkgdXBkYXRlRXJyb3I6IE9ic2VydmFibGU8TWFuYWdlQWNjb3VudEVycm9yIHwgdW5kZWZpbmVkPiA9IHRoaXMuc2VydmljZS51cGRhdGVFcnJvcjtcbiAgLyoqXG4gICAqIEF2YWlsYWJsZSBwcm9kdWN0IHN1bW1hcnkgaXRlbXMuXG4gICAqL1xuICByZWFkb25seSBhY2NvdW50czogT2JzZXJ2YWJsZTxBY2NvdW50cyB8IHVuZGVmaW5lZD4gPSBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmVyID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuICAgIHN1YnNjcmlwdGlvbnMucHVzaChcbiAgICAgIHRoaXMuc2VydmljZS5hY2NvdW50TGlzdC5zdWJzY3JpYmUoKGFjY291bnRzOiBBY2NvdW50cyB8IHVuZGVmaW5lZCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9kdWN0cyA9IGFjY291bnRzPy5pdGVtcyB8fCBbXTtcbiAgICAgICAgc3Vic2NyaWJlci5uZXh0KGFjY291bnRzKTtcblxuICAgICAgICBpZiAocHJvZHVjdHMuc29tZShoYXNFeHRlcm5hbEluZm8pKSB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9ucy5wdXNoKFxuICAgICAgICAgICAgdGhpcy5wcm9kdWN0c0V4dGVybmFsSW5mb1NlcnZpY2VcbiAgICAgICAgICAgICAgLmdldFByb2R1Y3RzV2l0aEV4dGVybmFsSW5mbzxQcm9kdWN0U3VtbWFyeUl0ZW0+KHByb2R1Y3RzKVxuICAgICAgICAgICAgICAucGlwZShtYXAocHJvZHVjdHNXaXRoRXh0ZXJuYWxJbmZvID0+ICh7IC4uLmFjY291bnRzLCBpdGVtczogcHJvZHVjdHNXaXRoRXh0ZXJuYWxJbmZvIH0gYXMgQWNjb3VudHMpKSlcbiAgICAgICAgICAgICAgLnN1YnNjcmliZShzdWJzY3JpYmVyKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LCBzdWJzY3JpYmVyLmVycm9yKSxcbiAgICApO1xuICAgIHJldHVybiAoKSA9PiBzdWJzY3JpcHRpb25zLmZvckVhY2goc3Vic2NyaXB0aW9uID0+IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHdpZGdldCBpcyBjdXJyZW50bHkgZmV0Y2hpbmcgZGF0YSBmcm9tIHRoZSBzZXJ2ZXJcbiAgICovXG4gIHJlYWRvbmx5IGxvYWRpbmc6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPiA9IHRoaXMuc2VydmljZS5sb2FkaW5nO1xuICAvKipcbiAgICogTWF4aW11bSBsZW5ndGggb2YgcHJvZHVjdCBpdGVtIGFsaWFzZXNcbiAgICovXG4gIHJlYWRvbmx5IGFsaWFzTWF4TGVuZ3RoID0gVXNlclByZWZlcmVuY2VzVmFsaWRhdGlvblNldHRpbmdzLkFMSUFTX01BWF9MRU5HVEg7XG5cbiAgcHJpdmF0ZSBpc1NtYWxsU2NyZWVuID0gZmFsc2U7XG4gIC8qKlxuICAgKiBEZWZhdWx0IGJ1c2luZXNzIGZ1bmN0aW9uXG4gICAqL1xuICBASW5wdXQoV2lkZ2V0UHJvcGVydHkuQlVTSU5FU1NfRlVOQ1RJT04pIGJ1c2luZXNzRnVuY3Rpb24gPSAnUHJvZHVjdCBTdW1tYXJ5JztcbiAgLyoqXG4gICAqIERlZmF1bHQgcmVzb3VyY2UgbmFtZVxuICAgKi9cbiAgQElucHV0KFdpZGdldFByb3BlcnR5LlJFU09VUkNFX05BTUUpIHJlc291cmNlTmFtZSA9ICdQcm9kdWN0IFN1bW1hcnknO1xuICAvKipcbiAgICogXCJEZWZhdWx0IHByaXZpbGVnZSB0eXBlXG4gICAqL1xuICBASW5wdXQoV2lkZ2V0UHJvcGVydHkuUFJJVklMRUdFX1RZUEUpIHByaXZpbGVnZSA9ICd2aWV3JztcbiAgLyoqXG4gICAqIE51bWJlciBvZiBhY2NvdW50cyBwZXIgcGFnZVxuICAgKi9cbiAgQElucHV0KFdpZGdldFByb3BlcnR5LlNJWkUpIHNpemUgPSAyMDtcbiAgLyoqXG4gICAqIERlZmluZXMgd2hldGhlciBwcm9kdWN0IGtpbmQgaWNvbnMgc2hvdWxkIGJlIGRpc3BsYXllZFxuICAgKlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBASW5wdXQoV2lkZ2V0UHJvcGVydHkuU0hPV19JQ09OUykgc2hvd0ljb25zID0gdHJ1ZTtcbiAgLyoqXG4gICAqIERlZmF1bHQgcGFnaW5hdGlvbiBwYXJhbWV0ZXJzXG4gICAqL1xuICByZWFkb25seSBwYWdpbmF0aW9uUGFyYW1zID0gbmV3IEJlaGF2aW9yU3ViamVjdDxHZXRQcm9kdWN0c3VtbWFyeVJlcXVlc3Q+KHtcbiAgICBmcm9tOiAwLFxuICAgIHNpemU6IDAsXG4gICAgYnVzaW5lc3NGdW5jdGlvbjogJycsXG4gICAgcmVzb3VyY2VOYW1lOiAnJyxcbiAgICBwcml2aWxlZ2U6ICcnLFxuICAgIHBhZ2luYXRpb25UeXBlOiBQYWdpbmF0aW9uVHlwZS5QQUdJTkFUSU9OLFxuICB9KTtcblxuICBwcml2YXRlIHJlcXVlc3RQYXJhbXM6IE9ic2VydmFibGU8R2V0QXJyYW5nZW1lbnRzUmVxdWVzdFBhcmFtcz4gPSBjb21iaW5lTGF0ZXN0KFxuICAgIHRoaXMucGFnaW5hdGlvblBhcmFtcyxcbiAgICB0aGlzLndpZGdldFByb3BlcnRpZXNTZXJ2aWNlLndpZGdldFByb3BlcnRpZXMsXG4gICkucGlwZShcbiAgICB0YWtlVW50aWwodGhpcy5nYyQpLFxuICAgIG1hcCgoW3BhZ2luYXRpb25QYXJhbXMsIHdpZGdldFByb3BlcnRpZXNdKSA9PiAoe1xuICAgICAgZnJvbTogcGFnaW5hdGlvblBhcmFtcy5mcm9tIHx8IDAsXG4gICAgICBzaXplOiB3aWRnZXRQcm9wZXJ0aWVzLnNpemUsXG4gICAgICBidXNpbmVzc0Z1bmN0aW9uOiB3aWRnZXRQcm9wZXJ0aWVzLmJ1c2luZXNzRnVuY3Rpb24sXG4gICAgICByZXNvdXJjZU5hbWU6IHdpZGdldFByb3BlcnRpZXMucmVzb3VyY2VOYW1lLFxuICAgICAgcHJpdmlsZWdlOiB3aWRnZXRQcm9wZXJ0aWVzLnByaXZpbGVnZSxcbiAgICAgIHBhZ2luYXRpb25UeXBlOiBwYWdpbmF0aW9uUGFyYW1zLnBhZ2luYXRpb25UeXBlLFxuICAgIH0pKSxcbiAgKTtcbiAgLyoqXG4gICAqIEpvaW5zIHRoZSBzcGVjaWZpZWQgZXJyb3IgbWVzc2FnZXMgdG8gZGlzcGxheSBvbiB0aGUgdGVtcGxhdGVcbiAgICpcbiAgICogQHBhcmFtIG1lc3NhZ2VzXG4gICAqL1xuICBwcm9jZXNzRXJyb3JNZXNzYWdlczogKG1lc3NhZ2VzOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCkgPT4gc3RyaW5nIHwgdW5kZWZpbmVkID0gcHJvY2Vzc0Vycm9yTWVzc2FnZXM7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLndpZGdldFByb3BlcnRpZXNTZXJ2aWNlLnNldENvbmZpZyh7XG4gICAgICBidXNpbmVzc0Z1bmN0aW9uOiB0aGlzLmJ1c2luZXNzRnVuY3Rpb24sXG4gICAgICByZXNvdXJjZU5hbWU6IHRoaXMucmVzb3VyY2VOYW1lLFxuICAgICAgcHJpdmlsZWdlOiB0aGlzLnByaXZpbGVnZSxcbiAgICAgIHNpemU6IHRoaXMuc2l6ZSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGNvbnRhaW5lcldpZHRoID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNoaWxkcmVuWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuICAgIHRoaXMuaXNTbWFsbFNjcmVlbiA9IGNvbnRhaW5lcldpZHRoIDw9IFNNQUxMX1NDUkVFTl9TSVpFO1xuXG4gICAgdGhpcy53aWRnZXRQcm9wZXJ0aWVzU2VydmljZS53aWRnZXRQcm9wZXJ0aWVzXG4gICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5nYyQpKVxuICAgICAgLnN1YnNjcmliZSh3aWRnZXRQcm9wZXJ0aWVzID0+IHRoaXMuaW5pdFdpZGdldFByb3BlcnRpZXMod2lkZ2V0UHJvcGVydGllcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFudXBzIGp1c3QgYmVmb3JlIEFuZ3VsYXIgZGVzdHJveXMgdGhlIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHJldHVybnNcbiAgICovXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZ2MkLm5leHQoKTtcbiAgICB0aGlzLmdjJC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0V2lkZ2V0UHJvcGVydGllcyhwcm9wZXJ0aWVzOiBXaWRnZXRQcm9wZXJ0aWVzKSB7XG4gICAgY29uc3QgcGFnaW5hdGlvblR5cGUgPSB0aGlzLmlzU21hbGxTY3JlZW4gPyBQYWdpbmF0aW9uVHlwZS5MT0FEX01PUkUgOiBQYWdpbmF0aW9uVHlwZS5QQUdJTkFUSU9OO1xuXG4gICAgdGhpcy5wYWdpbmF0aW9uUGFyYW1zLm5leHQoe1xuICAgICAgLi4udGhpcy5wYWdpbmF0aW9uUGFyYW1zLmdldFZhbHVlKCksXG4gICAgICBzaXplOiBwcm9wZXJ0aWVzLnNpemUsXG4gICAgICBwYWdpbmF0aW9uVHlwZSxcbiAgICB9KTtcblxuICAgIHRoaXMuc2VydmljZS5nZXRBY2NvdW50c0Zyb20odGhpcy5yZXF1ZXN0UGFyYW1zKTtcbiAgfVxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHNlcnZpY2VcbiAgICogQHBhcmFtIHdpZGdldFByb3BlcnRpZXNTZXJ2aWNlXG4gICAqIEBwYXJhbSBwcm9kdWN0c0V4dGVybmFsSW5mb1NlcnZpY2VcbiAgICogQHBhcmFtIGVsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNlcnZpY2U6IE1hbmFnZUFjY291bnRzU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHdpZGdldFByb3BlcnRpZXNTZXJ2aWNlOiBNYW5hZ2VBY2NvdW50c1dpZGdldFByb3BlcnRpZXNTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvZHVjdHNFeHRlcm5hbEluZm9TZXJ2aWNlOiBQcm9kdWN0c0V4dGVybmFsSW5mb1NlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBlbDogRWxlbWVudFJlZixcbiAgKSB7fVxuICAvKipcbiAgICogVG9nZ2xlcyB2aXNpYmlsaXR5IG9mIHByb2R1Y3Qgc3VtbWFyeSBpdGVtLlxuICAgKlxuICAgKiBAcGFyYW0gaXRlbVxuICAgKi9cbiAgdG9nZ2xlVmlzaWJpbGl0eShpdGVtOiBQcm9kdWN0U3VtbWFyeUl0ZW0pOiB2b2lkIHtcbiAgICB0aGlzLnNlcnZpY2UudG9nZ2xlVmlzaWJpbGl0eShpdGVtLCB0aGlzLm5vdGlmaWNhdGlvbkVycm9yVGVtcGxhdGUsIHRoaXMubm90aWZpY2F0aW9uU3VjY2Vzc1RlbXBsYXRlKTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyBhbGlhcyBvZiBwcm9kdWN0IHN1bW1hcnkgaXRlbSwgYnkgaWQuXG4gICAqXG4gICAqIEBwYXJhbSBpZFxuICAgKiBAcGFyYW0gYWxpYXNcbiAgICovXG4gIHVwZGF0ZUFsaWFzKGlkOiBzdHJpbmcsIGFsaWFzOiBzdHJpbmcgPSAnJyk6IHZvaWQge1xuICAgIHRoaXMuc2VydmljZS51cGRhdGVBbGlhcyhpZCwgYWxpYXMsIHRoaXMubm90aWZpY2F0aW9uRXJyb3JUZW1wbGF0ZSwgdGhpcy5ub3RpZmljYXRpb25TdWNjZXNzVGVtcGxhdGUpO1xuICB9XG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciB0aGUgYHBhZ2VDaGFuZ2VgIGV2ZW50IG9mIGBiYi1wcm9kdWN0LXN1bW1hcnktZm9vdGVyLXVpYFxuICAgKiBlbWl0cyB0aGUgbmV3IGBwYWdlYCB2YWx1ZSB0byB0aGUgYHBhZ2luYXRpb25QYXJhbXNgXG4gICAqXG4gICAqIEBwYXJhbSBwYWdlXG4gICAqL1xuICBvblBhZ2VDaGFuZ2UocGFnZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5wYWdpbmF0aW9uUGFyYW1zLm5leHQoe1xuICAgICAgLi4udGhpcy5wYWdpbmF0aW9uUGFyYW1zLmdldFZhbHVlKCksXG4gICAgICBmcm9tOiBwYWdlLFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciB0aGUgYGxvYWRNb3JlYCBldmVudCBvZiBgYmItcHJvZHVjdC1zdW1tYXJ5LWZvb3Rlci11aWBcbiAgICogdXBkYXRlcyB0aGUgYGZyb21gIHByb3BlcnR5IG9mIGBwYWdpbmF0aW9uUGFyYW1zYFxuICAgKi9cbiAgb25Mb2FkTW9yZSgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMubG9hZGluZy5nZXRWYWx1ZSgpKSB7XG4gICAgICB0aGlzLnBhZ2luYXRpb25QYXJhbXMubmV4dCh7XG4gICAgICAgIC4uLnRoaXMucGFnaW5hdGlvblBhcmFtcy52YWx1ZSxcbiAgICAgICAgZnJvbTogdGhpcy5wYWdpbmF0aW9uUGFyYW1zLnZhbHVlLmZyb20gPyB0aGlzLnBhZ2luYXRpb25QYXJhbXMudmFsdWUuZnJvbSArIDEgOiAxLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4vKipcbiAqIFRoaXMgaXMgYW4gZXh0ZW5zaW9uIHNsb3QgdG8gYmUgdXNlZCBmb3IgY3VzdG9taXppbmcgdGhlIGVudGlyZSB3aWRnZXRcbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICpcbiAqICMjIyBDdXN0b21pemUgdGhlIHdpZGdldFxuICpcbiAqIGBgYGh0bWxcbiAqIDxuZy10ZW1wbGF0ZVxuICogICBiYk1hbmFnZUFjY291bnRDdXN0b21pemFibGVcbiAqICAgbGV0LWhvc3RSZWZcbiAqICAgbGV0LWFjY291bnRzPVwiY29udGV4dFwiPlxuICogICBZb3VyIGN1c3RvbSB0ZW1wbGF0ZSBoZXJlXG4gKiA8L25nLXRlbXBsYXRlPlxuICogYGBgXG4gKlxuICogQE5nTW9kdWxlIFByb2R1Y3RTdW1tYXJ5TWFuYWdlQWNjb3VudHNXaWRnZXRNb2R1bGVcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2JiTWFuYWdlQWNjb3VudEN1c3RvbWl6YWJsZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBQcm9kdWN0U3VtbWFyeU1hbmFnZUFjY291bnRDdXN0b21pemFibGVEaXJlY3RpdmUgZXh0ZW5kcyBCYlRlbXBsYXRlPFxuICBQcm9kdWN0U3VtbWFyeU1hbmFnZUFjY291bnRzV2lkZ2V0Q29tcG9uZW50LFxuICBQcm9kdWN0U3VtbWFyeUl0ZW1cbj4ge31cbi8qKlxuICogVGhpcyBpcyBhbiBleHRlbnNpb24gc2xvdCB0byBiZSB1c2VkIGZvciBjdXN0b21pemluZyB0aGUgbG9hZGluZyBpbmRpY2F0b3JcbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICpcbiAqICMjIyBDdXN0b21pemUgdGhlIGxvYWRpbmcgaW5kaWNhdG9yXG4gKlxuICogYGBgaHRtbFxuICogPG5nLXRlbXBsYXRlXG4gKiAgIGJiTWFuYWdlQWNjb3VudExvYWRpbmdDdXN0b21pemFibGVcbiAqICAgbGV0LWhvc3RSZWY+XG4gKiAgIFlvdXIgY3VzdG9tIHRlbXBsYXRlIGhlcmVcbiAqIDwvbmctdGVtcGxhdGU+XG4gKiBgYGBcbiAqXG4gKiBATmdNb2R1bGUgUHJvZHVjdFN1bW1hcnlNYW5hZ2VBY2NvdW50c1dpZGdldE1vZHVsZVxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYmJNYW5hZ2VBY2NvdW50TG9hZGluZ0N1c3RvbWl6YWJsZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBQcm9kdWN0U3VtbWFyeU1hbmFnZUFjY291bnRMb2FkaW5nQ3VzdG9taXphYmxlRGlyZWN0aXZlIGV4dGVuZHMgQmJUZW1wbGF0ZTxcbiAgUHJvZHVjdFN1bW1hcnlNYW5hZ2VBY2NvdW50c1dpZGdldENvbXBvbmVudCxcbiAgdW5kZWZpbmVkXG4+IHt9XG4vKipcbiAqIFRoaXMgaXMgYW4gZXh0ZW5zaW9uIHNsb3QgdG8gYmUgdXNlZCBmb3IgY3VzdG9taXppbmcgdGhlIGZvb3RlclxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKlxuICogIyMjIEN1c3RvbWl6ZSB0aGUgZm9vdGVyXG4gKlxuICogYGBgaHRtbFxuICogPG5nLXRlbXBsYXRlXG4gKiAgIGJiTWFuYWdlQWNjb3VudHNGb290ZXJDdXN0b21pemFibGVcbiAqICAgbGV0LWhvc3RSZWZcbiAqICAgbGV0LWFjY291bnRzPVwiY29udGV4dC5hY2NvdW50c1wiXG4gKiAgIGxldC1wYWdpbmF0aW9uUGFyYW1zPVwiY29udGV4dC5wYWdpbmF0aW9uUGFyYW1zXCI+XG4gKiAgIFlvdXIgY3VzdG9tIHRlbXBsYXRlIGhlcmVcbiAqIDwvbmctdGVtcGxhdGU+XG4gKiBgYGBcbiAqXG4gKiBATmdNb2R1bGUgUHJvZHVjdFN1bW1hcnlNYW5hZ2VBY2NvdW50c1dpZGdldE1vZHVsZVxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYmJNYW5hZ2VBY2NvdW50c0Zvb3RlckN1c3RvbWl6YWJsZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBNYW5hZ2VBY2NvdW50c0Zvb3RlckN1c3RvbWl6YWJsZURpcmVjdGl2ZSBleHRlbmRzIEJiVGVtcGxhdGU8XG4gIFByb2R1Y3RTdW1tYXJ5TWFuYWdlQWNjb3VudHNXaWRnZXRDb21wb25lbnQsXG4gIHsgYWNjb3VudHM6IFByb2R1Y3RTdW1tYXJ5SXRlbVtdOyBwYWdpbmF0aW9uUGFyYW1zOiBHZXRQcm9kdWN0c3VtbWFyeVJlcXVlc3QgfVxuPiB7fVxuIiwiPGRpdiBjbGFzcz1cImJiLWJsb2NrIGJiLWJsb2NrLS1mdWxsLXdpZHRoXCI+XG4gIDxuZy1jb250YWluZXIgKm5nSWY9XCIhKGhvc3RSZWYuZXJyb3IgfCBhc3luYyB8IGJiSXNEZWZpbmVkKSAmJiAoYWNjb3VudHMgfCBhc3luYykgYXMgYWNjb3VudHM7IGVsc2UgbG9hZGluZ1RlbXBsYXRlXCI+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIigoaG9zdFJlZi5sb2FkaW5nIHwgYXN5bmMpID09PSBmYWxzZSk7IGVsc2UgbG9hZGluZ1RlbXBsYXRlXCI+XG4gICAgICA8bmctY29udGFpbmVyIGJiTWFuYWdlQWNjb3VudEN1c3RvbWl6YWJsZVxuICAgICAgICAgICAgICAgICAgICBbYmJIb3N0UmVmXT1cImhvc3RSZWZcIlxuICAgICAgICAgICAgICAgICAgICBbYmJUZW1wbGF0ZUNvbnRleHRdPVwiYWNjb3VudHNcIj5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvbmctY29udGFpbmVyPlxuICA8L25nLWNvbnRhaW5lcj5cbjwvZGl2PlxuXG48IS0tIE1hbmFnZSBBY2NvdW50cyB0ZW1wbGF0ZSAtLT5cbjxuZy10ZW1wbGF0ZVxuICBiYk1hbmFnZUFjY291bnRDdXN0b21pemFibGVcbiAgbGV0LWhvc3RSZWZcbiAgbGV0LWFjY291bnRzPVwiY29udGV4dFwiPlxuICA8ZGl2IGNsYXNzPVwiYmItYmxvY2sgYmItYmxvY2stLXhsXCJcbiAgICAgICBkYXRhLXJvbGU9XCJwcm9kdWN0LXN1bW1hcnktbWFuYWdlLWFjY291bnRzLWluaXRpYWwtbWVzc2FnZVwiXG4gICAgICAgaTE4bj1cIk1hbmFnZSBQcm9kdWN0cyBpbmZvfE1hbmFnZSBQcm9kdWN0cyBpbmZvIGhlYWRlciBsYWJlbEBAcHJvZHVjdC5zdW1tYXJ5Lm1hbmFnZS5hY2NvdW50cy5oZWFkZXIuaW5mb1wiPlxuICAgIEJlbG93IHlvdSBjYW4gZGVmaW5lIHdoaWNoIHByb2R1Y3RzIHdpbGwgYmUgc2hvd24gaW4gXCJNeSBhY2NvdW50c1wiIGFuZC9vciBlZGl0IHRoZWlyIGFjY291bnQgbmFtZXMuXG4gIDwvZGl2PlxuXG4gIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtbGdcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiYmItbGlzdCBiYi1saXN0LS1kZW5zaXR5LW1kXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJiYi1saXN0X19pdGVtXCJcbiAgICAgICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBhY2NvdW50cy5pdGVtc1wiPlxuICAgICAgICAgIDxiYi1tYW5hZ2UtYWNjb3VudC1pdGVtXG4gICAgICAgICAgICBbaXRlbV09XCJpdGVtXCJcbiAgICAgICAgICAgIFtwcm9kdWN0QWxpYXNNYXhMZW5ndGhdPVwiaG9zdFJlZi5hbGlhc01heExlbmd0aFwiXG4gICAgICAgICAgICBbc2hvd0ljb25dPVwidGhpcy5zaG93SWNvbnNcIlxuICAgICAgICAgICAgKHRvZ2dsZVZpc2liaWxpdHkpPVwiaG9zdFJlZi50b2dnbGVWaXNpYmlsaXR5KCRldmVudClcIlxuICAgICAgICAgICAgKHVwZGF0ZUFsaWFzKT1cImhvc3RSZWYudXBkYXRlQWxpYXMoaXRlbS5pZCwgJGV2ZW50KVwiXG4gICAgICAgICAgPjwvYmItbWFuYWdlLWFjY291bnQtaXRlbT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgYmJNYW5hZ2VBY2NvdW50c0Zvb3RlckN1c3RvbWl6YWJsZVxuICAgICAgICBbYmJIb3N0UmVmXT1cImhvc3RSZWZcIlxuICAgICAgICBbYmJUZW1wbGF0ZUNvbnRleHRdPVwie1xuICAgICAgICAgICAgcGFnaW5hdGlvblBhcmFtczogaG9zdFJlZi5wYWdpbmF0aW9uUGFyYW1zIHwgYXN5bmMsXG4gICAgICAgICAgICBhY2NvdW50czogYWNjb3VudHNcbiAgICAgICAgICB9XCJcbiAgICAgID5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvbmctdGVtcGxhdGU+XG5cbjxuZy10ZW1wbGF0ZSAjbm90aWZpY2F0aW9uRXJyb3I+XG4gIDxzcGFuIGkxOG49XCJGYWlsZWQgdG8gdXBkYXRlIFByb2R1Y3R8RXJyb3Igbm90aWZpY2F0aW9uIG1lc3NhZ2VAQHByb2R1Y3Qtc3VtbWFyeS1tYW5hZ2Uubm90aWZpY2F0aW9uLmVycm9yXCI+XG4gICAgRmFpbGVkIHRvIHVwZGF0ZSBQcm9kdWN0XG4gIDwvc3Bhbj5cbiAgPHNwYW4gKm5nSWY9XCJ1cGRhdGVFcnJvciB8IGFzeW5jIGFzIHVwZGF0ZUVycm9yXCI+XG4gICAge3twcm9jZXNzRXJyb3JNZXNzYWdlcyh1cGRhdGVFcnJvci5tZXNzYWdlcyl9fVxuICA8L3NwYW4+XG48L25nLXRlbXBsYXRlPlxuXG48bmctdGVtcGxhdGUgI25vdGlmaWNhdGlvblN1Y2Nlc3M+XG4gIDxzcGFuIGkxOG49XCJTdWNjZXNzZnVsbHkgVXBkYXRlZHxTdWNjZXNzIG5vdGlmaWNhdGlvbiBtZXNzYWdlQEBwcm9kdWN0LXN1bW1hcnktbWFuYWdlLm5vdGlmaWNhdGlvbi5zdWNjZXNzXCI+XG4gICAgU3VjY2Vzc2Z1bGx5IFVwZGF0ZWRcbiAgPC9zcGFuPlxuPC9uZy10ZW1wbGF0ZT5cblxuXG48IS0tIFByb2R1Y3Qgc3VtbWFyeSBsb2FkaW5nIHRlbXBsYXRlIC0tPlxuPG5nLXRlbXBsYXRlICNsb2FkaW5nVGVtcGxhdGU+XG4gIDxuZy1jb250YWluZXIgYmJNYW5hZ2VBY2NvdW50TG9hZGluZ0N1c3RvbWl6YWJsZVxuICAgICAgICAgICAgICAgIFtiYkhvc3RSZWZdPVwiaG9zdFJlZlwiPlxuICA8L25nLWNvbnRhaW5lcj5cbjwvbmctdGVtcGxhdGU+XG5cbjxuZy10ZW1wbGF0ZVxuICBiYk1hbmFnZUFjY291bnRMb2FkaW5nQ3VzdG9taXphYmxlXG4gIGxldC1ob3N0UmVmPlxuICA8bmctY29udGFpbmVyICpuZ0lmPVwiaG9zdFJlZi5lcnJvciB8IGFzeW5jIGFzIGVycm9yOyBlbHNlIGxvYWRpbmdcIj5cbiAgICA8YmItZW1wdHktc3RhdGUtdWlcbiAgICAgIGljb25TaXplPVwieHhsXCJcbiAgICAgIGljb25Nb2RpZmllcj1cImVycm9yLW91dGxpbmVcIlxuICAgICAgaWNvbkNsYXNzZXM9XCJ0ZXh0LW11dGVkXCJcbiAgICAgIHRpdGxlPVwiXCJcbiAgICAgIFtzdWJ0aXRsZV09XCJob3N0UmVmLnByb2Nlc3NFcnJvck1lc3NhZ2VzKGVycm9yLm1lc3NhZ2VzKVwiXG4gICAgPjwvYmItZW1wdHktc3RhdGUtdWk+XG4gIDwvbmctY29udGFpbmVyPlxuICA8bmctdGVtcGxhdGUgI2xvYWRpbmc+XG4gICAgPGJiLWxvYWRpbmctaW5kaWNhdG9yLXVpXG4gICAgICB0ZXh0PVwiTG9hZGluZyBBY2NvdW50cy4uLlwiXG4gICAgICBpMThuLXRleHQ9XCJMb2FkaW5nIEFjY291bnRzLi4ufFRleHQgZm9yIGxvYWRpbmcgaW5kaWNhdG9yQEBwcm9kdWN0LmRldGFpbHMubG9hZGluZ0FjY291bnRzXCJcbiAgICA+PC9iYi1sb2FkaW5nLWluZGljYXRvci11aT5cbiAgPC9uZy10ZW1wbGF0ZT5cbjwvbmctdGVtcGxhdGU+XG5cbjxuZy10ZW1wbGF0ZVxuICBiYk1hbmFnZUFjY291bnRzRm9vdGVyQ3VzdG9taXphYmxlXG4gIGxldC1ob3N0UmVmXG4gIGxldC1hY2NvdW50cz1cImNvbnRleHQuYWNjb3VudHNcIlxuICBsZXQtcGFnaW5hdGlvblBhcmFtcz1cImNvbnRleHQucGFnaW5hdGlvblBhcmFtc1wiPlxuICA8YmItcHJvZHVjdC1zdW1tYXJ5LWZvb3Rlci11aVxuICAgIFtwYWdlXT1cInBhZ2luYXRpb25QYXJhbXM/LmZyb21cIlxuICAgIFtjb3VudF09XCJhY2NvdW50cz8uY291bnRcIlxuICAgIFtoYXNNb3JlXT1cImFjY291bnRzPy5pdGVtcz8ubGVuZ3RoICE9PSBhY2NvdW50cz8uY291bnRcIlxuICAgIFtsb2FkaW5nXT1cImhvc3RSZWYubG9hZGluZyB8IGFzeW5jXCJcbiAgICBbcGFnaW5hdGlvblR5cGVdPVwicGFnaW5hdGlvblBhcmFtcz8ucGFnaW5hdGlvblR5cGVcIlxuICAgIFtpdGVtc1BlclBhZ2VdPVwicGFnaW5hdGlvblBhcmFtcz8uc2l6ZVwiXG4gICAgKHBhZ2VDaGFuZ2UpPVwiaG9zdFJlZi5vblBhZ2VDaGFuZ2UoJGV2ZW50KVwiXG4gICAgKGxvYWRNb3JlKT1cImhvc3RSZWYub25Mb2FkTW9yZSgkZXZlbnQpXCJcbiAgPjwvYmItcHJvZHVjdC1zdW1tYXJ5LWZvb3Rlci11aT5cbjwvbmctdGVtcGxhdGU+XG4iXX0=