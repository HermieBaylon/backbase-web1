import { Injectable } from '@angular/core';
import { BehaviorSubject, combineLatest, of, ReplaySubject } from 'rxjs';
import { catchError, distinctUntilChanged, map, scan, switchMap, take, tap } from 'rxjs/operators';
import { parseError } from './manage-account-error';
import { HttpResponseType, PaginationType, } from '@backbase/product-summary-common-ang';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/arrangements";
import * as i2 from "@backbase/ui-ang/notification";
const toDataServiceForVisibility = (state) => {
    let visibility = state.userPreferences ? state.userPreferences.visible : state.visible;
    visibility = visibility !== undefined ? visibility : state.visible;
    return {
        arrangementId: state.id,
        visible: !visibility,
    };
};
const toDataServiceForAlias = (alias, arrangementId) => ({
    arrangementId,
    alias,
});
/**
 * Service for fetching and storing the list of accounts
 *
 * This service relies on providers from `ProductSummaryManageAccountsWidgetModule`.
 *
 * @see ProductSummaryManageAccountsWidgetModule
 *
 * @usageNotes
 *
 * ### Ensure the ProductSummaryManageAccountsWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ProductSummaryManageAccountsWidgetModule,
 *   ],
 * })
 * export class MyWidgetModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ManageAccountsService],
 * })
 *  export class MyComponent {
 * ```
 */
export class ManageAccountsService {
    /**
     * Constructor
     *
     * @param productSummaryDataService
     * @param manageAccountDataService
     * @param notification
     */
    constructor(productSummaryDataService, manageAccountDataService, notification) {
        this.productSummaryDataService = productSummaryDataService;
        this.manageAccountDataService = manageAccountDataService;
        this.notification = notification;
        /**
         * If the fetching of the list failed, this property
         * holds the errors coming from the server
         */
        this.error = new BehaviorSubject(undefined);
        /**
         * If errors occurred during patching arrangements record,
         * holds the errors coming from the server
         */
        this.updateError = new BehaviorSubject(undefined);
        /**
         * Whether the widget is currently fetching data from the server
         */
        this.loading = new BehaviorSubject(true);
        this.revokingComplete = new BehaviorSubject(true);
        this.requestObject = new ReplaySubject(1);
        /**
         * Available product summary items.
         */
        this.accountList = combineLatest(this.requestObject, this.revokingComplete).pipe(distinctUntilChanged(), 
        // resetting error and loading values
        tap(() => this.error.next(undefined)), tap(() => this.loading.next(true)), switchMap(([requestObject]) => this.getAccountList(requestObject)), scan((acc, curr) => ({
            count: curr.count,
            items: this.mergeResponses(acc, curr),
            params: curr.params,
        })), catchError((error) => {
            this.error.next(error);
            return of(undefined);
        }), tap(() => this.loading.next(false)));
    }
    getAccountList(requestObject) {
        const from = requestObject.from || 0;
        const paginationType = requestObject.paginationType || '';
        const requestObjWithoutPaginationType = Object.assign({}, requestObject);
        delete requestObjWithoutPaginationType.paginationType;
        return this.productSummaryDataService
            .getArrangementsByBusinessFunction(requestObjWithoutPaginationType, HttpResponseType.RESPONSE)
            .pipe(map((res) => this.mapResponseWithCount(res, { from, paginationType })), catchError((error) => {
            throw parseError(error);
        }));
    }
    patchArrangementsRecord(accountUserPreferences, errorTemplateRef, successTemplateRef) {
        return this.manageAccountDataService.updateUserPreferences({ accountUserPreferences }).pipe(take(1), tap(() => this.revokingComplete.next(true)), tap(() => this.showNotification(successTemplateRef, 'success')), catchError((updateError) => {
            this.updateError.next(parseError(updateError));
            this.revokingComplete.next(true);
            this.showNotification(errorTemplateRef, 'error');
            return of(undefined);
        }));
    }
    /**
     * Toggles visibility of product summary item.
     *
     * @param request
     * @param errorTemplateRef
     * @param successTemplateRef
     */
    toggleVisibility(request, errorTemplateRef, successTemplateRef) {
        this.patchArrangementsRecord(toDataServiceForVisibility(request), errorTemplateRef, successTemplateRef).subscribe();
    }
    /**
     * Updates alias of product summary item, by id.
     *
     * @param arrangementId
     * @param alias
     * @param errorTemplateRef
     * @param successTemplateRef
     */
    updateAlias(arrangementId, alias, errorTemplateRef, successTemplateRef) {
        const payloadForAlias = toDataServiceForAlias(alias, arrangementId);
        this.patchArrangementsRecord(payloadForAlias, errorTemplateRef, successTemplateRef).subscribe();
    }
    /**
     * Subscribes the passed `requestObject` to the local `requestObject`
     *
     * @param requestObject
     */
    getAccountsFrom(requestObject) {
        requestObject.subscribe(this.requestObject);
    }
    showNotification(templateRef, modifier) {
        this.notification.showNotification({
            header: templateRef,
            message: '',
            modifier,
        });
    }
    mergeResponses(acc, current) {
        if (acc &&
            acc.items &&
            current &&
            current.items &&
            acc.params.paginationType === PaginationType.LOAD_MORE &&
            current.params.from !== 0) {
            return [...acc.items, ...current.items];
        }
        return current.items;
    }
    mapResponseWithCount(response, { from, paginationType }) {
        // eslint-disable-next-line no-null/no-null
        if (response.body === null) {
            throw new Error();
        }
        const headerCount = response.headers ? response.headers.get('x-total-count') : undefined;
        const counter = headerCount ? parseInt(headerCount, 10) : (response.body && response.body.length) || 0;
        return {
            count: counter,
            items: response.body || [],
            params: { from, paginationType },
        };
    }
}
ManageAccountsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageAccountsService, deps: [{ token: i1.ProductSummaryHttpService }, { token: i1.ArrangementsHttpService }, { token: i2.NotificationService }], target: i0.ɵɵFactoryTarget.Injectable });
ManageAccountsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageAccountsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageAccountsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ProductSummaryHttpService }, { type: i1.ArrangementsHttpService }, { type: i2.NotificationService }]; } });
//# sourceMappingURL=data:application/json;base64,