export class ManageAccountNotFound {
    constructor(response) {
        this.response = response;
        this.kind = 'ManageAccountNotFound';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
export class ManageAccountBadRequest {
    constructor(response) {
        this.response = response;
        this.kind = 'ManageAccountBadRequest';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
export class ManageAccountAccessDenied {
    constructor(response) {
        this.response = response;
        this.kind = 'ManageAccountAccessDenied';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
export class ManageAccountUnknownError {
    constructor(response) {
        this.response = response;
        this.kind = 'ManageAccountUnknownError';
        this.messages = [response.message];
    }
}
export class ManageAccountConnectivityError {
    constructor(response) {
        this.response = response;
        this.kind = 'ManageAccountConnectivityError';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
export const parseError = (error) => {
    if (error.error instanceof ErrorEvent) {
        return new ManageAccountUnknownError(error);
    }
    else {
        switch (error.status) {
            case 0:
                return new ManageAccountConnectivityError(error);
            case 401:
                return new ManageAccountAccessDenied(error);
            case 403:
                return new ManageAccountAccessDenied(error);
            case 400:
                return new ManageAccountBadRequest(error);
            case 404:
                return new ManageAccountNotFound(error);
            default:
                return new ManageAccountUnknownError(error);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlLWFjY291bnQtZXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3Byb2R1Y3Qtc3VtbWFyeS1tYW5hZ2UtYWNjb3VudHMtd2lkZ2V0LWFuZy9zcmMvbWFuYWdlLWFjY291bnQtZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLHFCQUFxQjtJQUdoQyxZQUFxQixRQUEyQjtRQUEzQixhQUFRLEdBQVIsUUFBUSxDQUFtQjtRQURoRCxTQUFJLEdBQTRCLHVCQUF1QixDQUFDO1FBRXRELElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25GLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyx1QkFBdUI7SUFHbEMsWUFBcUIsUUFBMkI7UUFBM0IsYUFBUSxHQUFSLFFBQVEsQ0FBbUI7UUFEaEQsU0FBSSxHQUE4Qix5QkFBeUIsQ0FBQztRQUUxRCxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuRixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8seUJBQXlCO0lBR3BDLFlBQXFCLFFBQTJCO1FBQTNCLGFBQVEsR0FBUixRQUFRLENBQW1CO1FBRGhELFNBQUksR0FBZ0MsMkJBQTJCLENBQUM7UUFFOUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkYsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLHlCQUF5QjtJQUdwQyxZQUFxQixRQUEyQjtRQUEzQixhQUFRLEdBQVIsUUFBUSxDQUFtQjtRQURoRCxTQUFJLEdBQWdDLDJCQUEyQixDQUFDO1FBRTlELElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLDhCQUE4QjtJQUd6QyxZQUFxQixRQUEyQjtRQUEzQixhQUFRLEdBQVIsUUFBUSxDQUFtQjtRQURoRCxTQUFJLEdBQXFDLGdDQUFnQyxDQUFDO1FBRXhFLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25GLENBQUM7Q0FDRjtBQVNELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLEtBQXdCLEVBQXNCLEVBQUU7SUFDekUsSUFBSSxLQUFLLENBQUMsS0FBSyxZQUFZLFVBQVUsRUFBRTtRQUNyQyxPQUFPLElBQUkseUJBQXlCLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDN0M7U0FBTTtRQUNMLFFBQVEsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNwQixLQUFLLENBQUM7Z0JBQ0osT0FBTyxJQUFJLDhCQUE4QixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ25ELEtBQUssR0FBRztnQkFDTixPQUFPLElBQUkseUJBQXlCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUMsS0FBSyxHQUFHO2dCQUNOLE9BQU8sSUFBSSx5QkFBeUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5QyxLQUFLLEdBQUc7Z0JBQ04sT0FBTyxJQUFJLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVDLEtBQUssR0FBRztnQkFDTixPQUFPLElBQUkscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDMUM7Z0JBQ0UsT0FBTyxJQUFJLHlCQUF5QixDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQy9DO0tBQ0Y7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuZXhwb3J0IGNsYXNzIE1hbmFnZUFjY291bnROb3RGb3VuZCB7XG4gIG1lc3NhZ2VzOiBzdHJpbmdbXTtcbiAga2luZDogJ01hbmFnZUFjY291bnROb3RGb3VuZCcgPSAnTWFuYWdlQWNjb3VudE5vdEZvdW5kJztcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcmVzcG9uc2U6IEh0dHBFcnJvclJlc3BvbnNlKSB7XG4gICAgdGhpcy5tZXNzYWdlcyA9ICgocmVzcG9uc2UuZXJyb3IgfHwge30pLmVycm9ycyB8fCBbXSkubWFwKChlOiBhbnkpID0+IGUubWVzc2FnZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1hbmFnZUFjY291bnRCYWRSZXF1ZXN0IHtcbiAgbWVzc2FnZXM6IHN0cmluZ1tdO1xuICBraW5kOiAnTWFuYWdlQWNjb3VudEJhZFJlcXVlc3QnID0gJ01hbmFnZUFjY291bnRCYWRSZXF1ZXN0JztcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcmVzcG9uc2U6IEh0dHBFcnJvclJlc3BvbnNlKSB7XG4gICAgdGhpcy5tZXNzYWdlcyA9ICgocmVzcG9uc2UuZXJyb3IgfHwge30pLmVycm9ycyB8fCBbXSkubWFwKChlOiBhbnkpID0+IGUubWVzc2FnZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1hbmFnZUFjY291bnRBY2Nlc3NEZW5pZWQge1xuICBtZXNzYWdlczogc3RyaW5nW107XG4gIGtpbmQ6ICdNYW5hZ2VBY2NvdW50QWNjZXNzRGVuaWVkJyA9ICdNYW5hZ2VBY2NvdW50QWNjZXNzRGVuaWVkJztcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcmVzcG9uc2U6IEh0dHBFcnJvclJlc3BvbnNlKSB7XG4gICAgdGhpcy5tZXNzYWdlcyA9ICgocmVzcG9uc2UuZXJyb3IgfHwge30pLmVycm9ycyB8fCBbXSkubWFwKChlOiBhbnkpID0+IGUubWVzc2FnZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1hbmFnZUFjY291bnRVbmtub3duRXJyb3Ige1xuICBtZXNzYWdlczogc3RyaW5nW107XG4gIGtpbmQ6ICdNYW5hZ2VBY2NvdW50VW5rbm93bkVycm9yJyA9ICdNYW5hZ2VBY2NvdW50VW5rbm93bkVycm9yJztcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcmVzcG9uc2U6IEh0dHBFcnJvclJlc3BvbnNlKSB7XG4gICAgdGhpcy5tZXNzYWdlcyA9IFtyZXNwb25zZS5tZXNzYWdlXTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTWFuYWdlQWNjb3VudENvbm5lY3Rpdml0eUVycm9yIHtcbiAgbWVzc2FnZXM6IHN0cmluZ1tdO1xuICBraW5kOiAnTWFuYWdlQWNjb3VudENvbm5lY3Rpdml0eUVycm9yJyA9ICdNYW5hZ2VBY2NvdW50Q29ubmVjdGl2aXR5RXJyb3InO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSByZXNwb25zZTogSHR0cEVycm9yUmVzcG9uc2UpIHtcbiAgICB0aGlzLm1lc3NhZ2VzID0gKChyZXNwb25zZS5lcnJvciB8fCB7fSkuZXJyb3JzIHx8IFtdKS5tYXAoKGU6IGFueSkgPT4gZS5tZXNzYWdlKTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBNYW5hZ2VBY2NvdW50RXJyb3IgPVxuICB8IE1hbmFnZUFjY291bnRBY2Nlc3NEZW5pZWRcbiAgfCBNYW5hZ2VBY2NvdW50QmFkUmVxdWVzdFxuICB8IE1hbmFnZUFjY291bnROb3RGb3VuZFxuICB8IE1hbmFnZUFjY291bnRDb25uZWN0aXZpdHlFcnJvclxuICB8IE1hbmFnZUFjY291bnRVbmtub3duRXJyb3I7XG5cbmV4cG9ydCBjb25zdCBwYXJzZUVycm9yID0gKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSk6IE1hbmFnZUFjY291bnRFcnJvciA9PiB7XG4gIGlmIChlcnJvci5lcnJvciBpbnN0YW5jZW9mIEVycm9yRXZlbnQpIHtcbiAgICByZXR1cm4gbmV3IE1hbmFnZUFjY291bnRVbmtub3duRXJyb3IoZXJyb3IpO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAoZXJyb3Iuc3RhdHVzKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiBuZXcgTWFuYWdlQWNjb3VudENvbm5lY3Rpdml0eUVycm9yKGVycm9yKTtcbiAgICAgIGNhc2UgNDAxOlxuICAgICAgICByZXR1cm4gbmV3IE1hbmFnZUFjY291bnRBY2Nlc3NEZW5pZWQoZXJyb3IpO1xuICAgICAgY2FzZSA0MDM6XG4gICAgICAgIHJldHVybiBuZXcgTWFuYWdlQWNjb3VudEFjY2Vzc0RlbmllZChlcnJvcik7XG4gICAgICBjYXNlIDQwMDpcbiAgICAgICAgcmV0dXJuIG5ldyBNYW5hZ2VBY2NvdW50QmFkUmVxdWVzdChlcnJvcik7XG4gICAgICBjYXNlIDQwNDpcbiAgICAgICAgcmV0dXJuIG5ldyBNYW5hZ2VBY2NvdW50Tm90Rm91bmQoZXJyb3IpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG5ldyBNYW5hZ2VBY2NvdW50VW5rbm93bkVycm9yKGVycm9yKTtcbiAgICB9XG4gIH1cbn07XG4iXX0=