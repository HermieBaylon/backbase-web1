import { TemplateRef } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { ArrangementsHttpService, ProductSummaryHttpService } from '@backbase/data-ang/arrangements';
import { NotificationService } from '@backbase/ui-ang/notification';
import { ManageAccountError } from './manage-account-error';
import { GetArrangementsRequestParams } from './model/types';
import { Accounts, ProductSummaryItem } from '@backbase/product-summary-common-ang';
import * as i0 from "@angular/core";
/**
 * Service for fetching and storing the list of accounts
 *
 * This service relies on providers from `ProductSummaryManageAccountsWidgetModule`.
 *
 * @see ProductSummaryManageAccountsWidgetModule
 *
 * @usageNotes
 *
 * ### Ensure the ProductSummaryManageAccountsWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ProductSummaryManageAccountsWidgetModule,
 *   ],
 * })
 * export class MyWidgetModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ManageAccountsService],
 * })
 *  export class MyComponent {
 * ```
 */
export declare class ManageAccountsService {
    private readonly productSummaryDataService;
    private readonly manageAccountDataService;
    private readonly notification;
    /**
     * Constructor
     *
     * @param productSummaryDataService
     * @param manageAccountDataService
     * @param notification
     */
    constructor(productSummaryDataService: ProductSummaryHttpService, manageAccountDataService: ArrangementsHttpService, notification: NotificationService);
    /**
     * If the fetching of the list failed, this property
     * holds the errors coming from the server
     */
    readonly error: BehaviorSubject<ManageAccountError | undefined>;
    /**
     * If errors occurred during patching arrangements record,
     * holds the errors coming from the server
     */
    readonly updateError: BehaviorSubject<ManageAccountError | undefined>;
    /**
     * Whether the widget is currently fetching data from the server
     */
    readonly loading: BehaviorSubject<boolean>;
    private readonly revokingComplete;
    private readonly requestObject;
    /**
     * Available product summary items.
     */
    readonly accountList: Observable<Accounts | undefined>;
    private getAccountList;
    private patchArrangementsRecord;
    /**
     * Toggles visibility of product summary item.
     *
     * @param request
     * @param errorTemplateRef
     * @param successTemplateRef
     */
    toggleVisibility(request: ProductSummaryItem, errorTemplateRef: TemplateRef<any> | string, successTemplateRef: TemplateRef<any> | string): void;
    /**
     * Updates alias of product summary item, by id.
     *
     * @param arrangementId
     * @param alias
     * @param errorTemplateRef
     * @param successTemplateRef
     */
    updateAlias(arrangementId: string, alias: string, errorTemplateRef: TemplateRef<any> | string, successTemplateRef: TemplateRef<any> | string): void;
    /**
     * Subscribes the passed `requestObject` to the local `requestObject`
     *
     * @param requestObject
     */
    getAccountsFrom(requestObject: Observable<GetArrangementsRequestParams>): void;
    private showNotification;
    private mergeResponses;
    private mapResponseWithCount;
    static ɵfac: i0.ɵɵFactoryDeclaration<ManageAccountsService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ManageAccountsService>;
}
