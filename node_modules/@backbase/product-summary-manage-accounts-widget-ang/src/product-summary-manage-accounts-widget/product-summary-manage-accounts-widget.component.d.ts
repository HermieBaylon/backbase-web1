import { TemplateRef, ElementRef, AfterViewInit, OnDestroy } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { ManageAccountsService } from '../manage.service';
import { ManageAccountError } from '../manage-account-error';
import { Accounts, GetProductsummaryRequest, ProductsExternalInfoService, ProductSummaryItem } from '@backbase/product-summary-common-ang';
import { ManageAccountsWidgetPropertiesService } from '../manage-accounts-widget-properties.service';
import * as i0 from "@angular/core";
/**
 * Widget for displaying and managing accounts
 *
 * The following extension slots are available in this component:
 *
 * - `ProductSummaryManageAccountCustomizableDirective`
 * - `ProductSummaryManageAccountLoadingCustomizableDirective`
 * - `ManageAccountsFooterCustomizableDirective`
 *
 * @see `AccountsOverviewWidgetCustomizableDirective`
 * @see `ProductSummaryManageAccountLoadingCustomizableDirective`
 * @see `ManageAccountsFooterCustomizableDirective`
 *
 * @usageNotes
 *
 * ### Include this widget in your `AppModule`:
 *
 * ```typescript
 * @NgModule({
 *   imports: [
 *     ProductSummaryManageAccountsWidgetModule,
 *   ],
 *   ...
 * })
 * export class AppModule {}
 * ```
 *
 * ### Include this widget (standalone model)
 *
 * ```typescript
 * export const environment: Environment = {
 *   ...
 *   bootstrap: {
 *     pageModel: {
 *       name: 'root',
 *       properties: {},
 *       children: [
 *         {
 *           name: 'product-summary-accounts-overview-widget-ang',
 *           properties: {
 *              classId: 'ProductSummaryManageAccountsWidgetComponent',
 *              businessFunction: 'Product Summary',
 *              resourceName: 'Product Summary',
 *              privilege: 'view',
 *              size: 20,
 *              route: 'manage-accounts',
 *           },
 *         },
 *       ],
 *     },
 *   },
 * };
 *
 * @ngModule ProductSummaryManageAccountsWidgetModule
 * ```
 */
export declare class ProductSummaryManageAccountsWidgetComponent implements AfterViewInit, OnDestroy {
    private readonly service;
    private readonly widgetPropertiesService;
    private readonly productsExternalInfoService;
    private readonly el;
    /**
     * Subject for the garbage collector
     */
    gc$: Subject<void>;
    /**
     * @internal
     */
    readonly hostRef: ProductSummaryManageAccountsWidgetComponent;
    /**
     * ViewChild for `notificationError`
     */
    notificationErrorTemplate: TemplateRef<any> | string;
    /**
     * ViewChild for `notificationSuccess`
     */
    notificationSuccessTemplate: TemplateRef<any> | string;
    /**
     * Contains errors occurred during fetching accounts
     */
    readonly error: Observable<ManageAccountError | undefined>;
    /**
     * If errors occurred during patching arrangements record,
     * holds the errors coming from the server
     */
    readonly updateError: Observable<ManageAccountError | undefined>;
    /**
     * Available product summary items.
     */
    readonly accounts: Observable<Accounts | undefined>;
    /**
     * Whether the widget is currently fetching data from the server
     */
    readonly loading: BehaviorSubject<boolean>;
    /**
     * Maximum length of product item aliases
     */
    readonly aliasMaxLength: number;
    private isSmallScreen;
    /**
     * Default business function
     */
    businessFunction: string;
    /**
     * Default resource name
     */
    resourceName: string;
    /**
     * "Default privilege type
     */
    privilege: string;
    /**
     * Number of accounts per page
     */
    size: number;
    /**
     * Defines whether product kind icons should be displayed
     *
     * @default true
     */
    showIcons: boolean;
    /**
     * Default pagination parameters
     */
    readonly paginationParams: BehaviorSubject<GetProductsummaryRequest>;
    private requestParams;
    /**
     * Joins the specified error messages to display on the template
     *
     * @param messages
     */
    processErrorMessages: (messages: string[] | undefined) => string | undefined;
    /**
     * @internal
     */
    ngAfterViewInit(): void;
    /**
     * Cleanups just before Angular destroys the component.
     *
     * @returns
     */
    ngOnDestroy(): void;
    private initWidgetProperties;
    /**
     * Constructor
     *
     * @param service
     * @param widgetPropertiesService
     * @param productsExternalInfoService
     * @param el
     */
    constructor(service: ManageAccountsService, widgetPropertiesService: ManageAccountsWidgetPropertiesService, productsExternalInfoService: ProductsExternalInfoService, el: ElementRef);
    /**
     * Toggles visibility of product summary item.
     *
     * @param item
     */
    toggleVisibility(item: ProductSummaryItem): void;
    /**
     * Updates alias of product summary item, by id.
     *
     * @param id
     * @param alias
     */
    updateAlias(id: string, alias?: string): void;
    /**
     * Event handler for the `pageChange` event of `bb-product-summary-footer-ui`
     * emits the new `page` value to the `paginationParams`
     *
     * @param page
     */
    onPageChange(page: number): void;
    /**
     * Event handler for the `loadMore` event of `bb-product-summary-footer-ui`
     * updates the `from` property of `paginationParams`
     */
    onLoadMore(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryManageAccountsWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ProductSummaryManageAccountsWidgetComponent, "bb-product-summary-manage-accounts-widget", never, { "businessFunction": "businessFunction"; "resourceName": "resourceName"; "privilege": "privilege"; "size": "size"; "showIcons": "showIcons"; }, {}, never, never>;
}
/**
 * This is an extension slot to be used for customizing the entire widget
 *
 * @usageNotes
 *
 * ### Customize the widget
 *
 * ```html
 * <ng-template
 *   bbManageAccountCustomizable
 *   let-hostRef
 *   let-accounts="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryManageAccountsWidgetModule
 */
export declare class ProductSummaryManageAccountCustomizableDirective extends BbTemplate<ProductSummaryManageAccountsWidgetComponent, ProductSummaryItem> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryManageAccountCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ProductSummaryManageAccountCustomizableDirective, "[bbManageAccountCustomizable]", never, {}, {}, never>;
}
/**
 * This is an extension slot to be used for customizing the loading indicator
 *
 * @usageNotes
 *
 * ### Customize the loading indicator
 *
 * ```html
 * <ng-template
 *   bbManageAccountLoadingCustomizable
 *   let-hostRef>
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryManageAccountsWidgetModule
 */
export declare class ProductSummaryManageAccountLoadingCustomizableDirective extends BbTemplate<ProductSummaryManageAccountsWidgetComponent, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryManageAccountLoadingCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ProductSummaryManageAccountLoadingCustomizableDirective, "[bbManageAccountLoadingCustomizable]", never, {}, {}, never>;
}
/**
 * This is an extension slot to be used for customizing the footer
 *
 * @usageNotes
 *
 * ### Customize the footer
 *
 * ```html
 * <ng-template
 *   bbManageAccountsFooterCustomizable
 *   let-hostRef
 *   let-accounts="context.accounts"
 *   let-paginationParams="context.paginationParams">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryManageAccountsWidgetModule
 */
export declare class ManageAccountsFooterCustomizableDirective extends BbTemplate<ProductSummaryManageAccountsWidgetComponent, {
    accounts: ProductSummaryItem[];
    paginationParams: GetProductsummaryRequest;
}> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ManageAccountsFooterCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ManageAccountsFooterCustomizableDirective, "[bbManageAccountsFooterCustomizable]", never, {}, {}, never>;
}
