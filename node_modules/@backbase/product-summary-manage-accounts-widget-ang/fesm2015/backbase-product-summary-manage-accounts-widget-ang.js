import * as i5 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Injectable, EventEmitter, Component, Input, Output, Directive, ViewChild, NgModule } from '@angular/core';
import * as i7 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i1$2 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i6$1 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i2$1 from '@backbase/ui-ang/input-inline-edit';
import { InputInlineEditModule } from '@backbase/ui-ang/input-inline-edit';
import { PaymentCardNumberModule } from '@backbase/ui-ang/payment-card-number-pipe';
import * as i3 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i4 from '@backbase/ui-ang/switch';
import { SwitchModule } from '@backbase/ui-ang/switch';
import * as i5$1 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i2 from '@backbase/ui-ang/notification';
import { NotificationModule } from '@backbase/ui-ang/notification';
import * as i6 from '@backbase/ui-ang/tooltip-directive';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';
import * as i1$1 from '@backbase/product-summary-ui';
import { ArrangementStateIndicatorModule, ProductSummaryAccountLogoModule, ProductSummaryFooterModule, ProductKindNameModule, ProductNumberModule } from '@backbase/product-summary-ui';
import * as i3$1 from '@backbase/product-summary-common-ang';
import { HttpResponseType, PaginationType, ResponsiveContainerComponent, getAccountAlias, hasExternalInfo, UserPreferencesValidationSettings, processErrorMessages, SMALL_SCREEN_SIZE, ValidationModule, ProductSummaryCommon, ProductsExternalInfoService } from '@backbase/product-summary-common-ang';
import { BehaviorSubject, ReplaySubject, combineLatest, of, Subject, Observable } from 'rxjs';
import { distinctUntilChanged, tap, switchMap, scan, catchError, map, take, takeUntil } from 'rxjs/operators';
import * as i1 from '@backbase/data-ang/arrangements';

class ManageAccountNotFound {
    constructor(response) {
        this.response = response;
        this.kind = 'ManageAccountNotFound';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
class ManageAccountBadRequest {
    constructor(response) {
        this.response = response;
        this.kind = 'ManageAccountBadRequest';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
class ManageAccountAccessDenied {
    constructor(response) {
        this.response = response;
        this.kind = 'ManageAccountAccessDenied';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
class ManageAccountUnknownError {
    constructor(response) {
        this.response = response;
        this.kind = 'ManageAccountUnknownError';
        this.messages = [response.message];
    }
}
class ManageAccountConnectivityError {
    constructor(response) {
        this.response = response;
        this.kind = 'ManageAccountConnectivityError';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
const parseError = (error) => {
    if (error.error instanceof ErrorEvent) {
        return new ManageAccountUnknownError(error);
    }
    else {
        switch (error.status) {
            case 0:
                return new ManageAccountConnectivityError(error);
            case 401:
                return new ManageAccountAccessDenied(error);
            case 403:
                return new ManageAccountAccessDenied(error);
            case 400:
                return new ManageAccountBadRequest(error);
            case 404:
                return new ManageAccountNotFound(error);
            default:
                return new ManageAccountUnknownError(error);
        }
    }
};

const toDataServiceForVisibility = (state) => {
    let visibility = state.userPreferences ? state.userPreferences.visible : state.visible;
    visibility = visibility !== undefined ? visibility : state.visible;
    return {
        arrangementId: state.id,
        visible: !visibility,
    };
};
const toDataServiceForAlias = (alias, arrangementId) => ({
    arrangementId,
    alias,
});
/**
 * Service for fetching and storing the list of accounts
 *
 * This service relies on providers from `ProductSummaryManageAccountsWidgetModule`.
 *
 * @see ProductSummaryManageAccountsWidgetModule
 *
 * @usageNotes
 *
 * ### Ensure the ProductSummaryManageAccountsWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ProductSummaryManageAccountsWidgetModule,
 *   ],
 * })
 * export class MyWidgetModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ManageAccountsService],
 * })
 *  export class MyComponent {
 * ```
 */
class ManageAccountsService {
    /**
     * Constructor
     *
     * @param productSummaryDataService
     * @param manageAccountDataService
     * @param notification
     */
    constructor(productSummaryDataService, manageAccountDataService, notification) {
        this.productSummaryDataService = productSummaryDataService;
        this.manageAccountDataService = manageAccountDataService;
        this.notification = notification;
        /**
         * If the fetching of the list failed, this property
         * holds the errors coming from the server
         */
        this.error = new BehaviorSubject(undefined);
        /**
         * If errors occurred during patching arrangements record,
         * holds the errors coming from the server
         */
        this.updateError = new BehaviorSubject(undefined);
        /**
         * Whether the widget is currently fetching data from the server
         */
        this.loading = new BehaviorSubject(true);
        this.revokingComplete = new BehaviorSubject(true);
        this.requestObject = new ReplaySubject(1);
        /**
         * Available product summary items.
         */
        this.accountList = combineLatest(this.requestObject, this.revokingComplete).pipe(distinctUntilChanged(), 
        // resetting error and loading values
        tap(() => this.error.next(undefined)), tap(() => this.loading.next(true)), switchMap(([requestObject]) => this.getAccountList(requestObject)), scan((acc, curr) => ({
            count: curr.count,
            items: this.mergeResponses(acc, curr),
            params: curr.params,
        })), catchError((error) => {
            this.error.next(error);
            return of(undefined);
        }), tap(() => this.loading.next(false)));
    }
    getAccountList(requestObject) {
        const from = requestObject.from || 0;
        const paginationType = requestObject.paginationType || '';
        const requestObjWithoutPaginationType = Object.assign({}, requestObject);
        delete requestObjWithoutPaginationType.paginationType;
        return this.productSummaryDataService
            .getArrangementsByBusinessFunction(requestObjWithoutPaginationType, HttpResponseType.RESPONSE)
            .pipe(map((res) => this.mapResponseWithCount(res, { from, paginationType })), catchError((error) => {
            throw parseError(error);
        }));
    }
    patchArrangementsRecord(accountUserPreferences, errorTemplateRef, successTemplateRef) {
        return this.manageAccountDataService.updateUserPreferences({ accountUserPreferences }).pipe(take(1), tap(() => this.revokingComplete.next(true)), tap(() => this.showNotification(successTemplateRef, 'success')), catchError((updateError) => {
            this.updateError.next(parseError(updateError));
            this.revokingComplete.next(true);
            this.showNotification(errorTemplateRef, 'error');
            return of(undefined);
        }));
    }
    /**
     * Toggles visibility of product summary item.
     *
     * @param request
     * @param errorTemplateRef
     * @param successTemplateRef
     */
    toggleVisibility(request, errorTemplateRef, successTemplateRef) {
        this.patchArrangementsRecord(toDataServiceForVisibility(request), errorTemplateRef, successTemplateRef).subscribe();
    }
    /**
     * Updates alias of product summary item, by id.
     *
     * @param arrangementId
     * @param alias
     * @param errorTemplateRef
     * @param successTemplateRef
     */
    updateAlias(arrangementId, alias, errorTemplateRef, successTemplateRef) {
        const payloadForAlias = toDataServiceForAlias(alias, arrangementId);
        this.patchArrangementsRecord(payloadForAlias, errorTemplateRef, successTemplateRef).subscribe();
    }
    /**
     * Subscribes the passed `requestObject` to the local `requestObject`
     *
     * @param requestObject
     */
    getAccountsFrom(requestObject) {
        requestObject.subscribe(this.requestObject);
    }
    showNotification(templateRef, modifier) {
        this.notification.showNotification({
            header: templateRef,
            message: '',
            modifier,
        });
    }
    mergeResponses(acc, current) {
        if (acc &&
            acc.items &&
            current &&
            current.items &&
            acc.params.paginationType === PaginationType.LOAD_MORE &&
            current.params.from !== 0) {
            return [...acc.items, ...current.items];
        }
        return current.items;
    }
    mapResponseWithCount(response, { from, paginationType }) {
        // eslint-disable-next-line no-null/no-null
        if (response.body === null) {
            throw new Error();
        }
        const headerCount = response.headers ? response.headers.get('x-total-count') : undefined;
        const counter = headerCount ? parseInt(headerCount, 10) : (response.body && response.body.length) || 0;
        return {
            count: counter,
            items: response.body || [],
            params: { from, paginationType },
        };
    }
}
ManageAccountsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageAccountsService, deps: [{ token: i1.ProductSummaryHttpService }, { token: i1.ArrangementsHttpService }, { token: i2.NotificationService }], target: i0.ɵɵFactoryTarget.Injectable });
ManageAccountsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageAccountsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageAccountsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ProductSummaryHttpService }, { type: i1.ArrangementsHttpService }, { type: i2.NotificationService }]; } });

const WidgetProperty = {
    BUSINESS_FUNCTION: 'businessFunction',
    RESOURCE_NAME: 'resourceName',
    PRIVILEGE_TYPE: 'privilege',
    SIZE: 'size',
    SHOW_ICONS: 'showIcons',
};

const defaultProperties = {
    businessFunction: 'Product Summary',
    resourceName: 'Product Summary',
    privilege: 'view',
    size: 20,
};
/**
 * State management for fetching and storing widget properties from its inputs
 *
 * This service relies on providers from `ProductSummaryManageAccountsWidgetModule`.
 *
 * @see ProductSummaryManageAccountsWidgetModule
 *
 * @usageNotes
 *
 * ### Ensure the ProductSummaryManageAccountsWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ProductSummaryManageAccountsWidgetModule,
 *   ],
 * })
 * export class MyWidgetModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ManageAccountsWidgetPropertiesService],
 * })
 *  export class MyComponent {
 * ```
 */
class ManageAccountsWidgetPropertiesService {
    constructor() {
        this.propertiesConfig$ = new BehaviorSubject(defaultProperties);
    }
    get widgetProperties() {
        return this.propertiesConfig$;
    }
    setConfig(config) {
        this.propertiesConfig$.next({
            businessFunction: config.businessFunction || defaultProperties.businessFunction,
            resourceName: config.resourceName || defaultProperties.resourceName,
            privilege: config.privilege || defaultProperties.privilege,
            size: config.size || defaultProperties.size,
        });
    }
}
ManageAccountsWidgetPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageAccountsWidgetPropertiesService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ManageAccountsWidgetPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageAccountsWidgetPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageAccountsWidgetPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });

/**
 * A component for displaying an account item
 *
 * The following extension slots are available in this component:
 *
 * - `ManageAccountItemCustomizableDirective`
 *
 * @see ManageAccountItemCustomizableDirective
 *
 * @usageNotes
 *
 * ### Display details
 *
 * ```html
 * <bb-manage-account-item
 *   [item]="item"
 *   [productAliasMaxLength]="hostRef.aliasMaxLength"
 *   (toggleVisibility)="hostRef.toggleVisibility($event)"
 *   (updateAlias)="hostRef.updateAlias(item.id, $event)"
 * ></bb-manage-account-item>
 * ```
 *
 * @ngModule ProductSummaryManageAccountsWidgetModule
 */
class ManageAccountItemComponent extends ResponsiveContainerComponent {
    /**
     * @internal
     */
    constructor(element, changeDetector) {
        super(element, changeDetector);
        /**
         * @internal
         */
        this.hostRef = this;
        /**
         * Returns the `alias` of the passed `account`
         */
        this.getAlias = getAccountAlias;
        /**
         * Returns true if product has external info
         */
        this.hasExternalInfo = hasExternalInfo;
        /**
         * Defines whether the product kind icon should be displayed
         *
         * @default true
         */
        this.showIcon = true;
        /**
         * Event (Output) that emits when item visibility is changed
         */
        this.toggleVisibility = new EventEmitter();
        /**
         * Event (Output) that emits when item alias is changed
         */
        this.updateAlias = new EventEmitter();
    }
    /**
     * Event handler for the `click` event of `bb-switch-ui`
     * emits the `item` to the `toggleVisibility` output
     *
     * @param item
     */
    updateVisibility(item) {
        this.toggleVisibility.emit(item);
    }
    /**
     * Event handler for the `accept` event of `bb-input-inline-edit-ui`
     * emits the `alias` to the `updateAlias`
     *
     * @param alias
     */
    onAliasUpdate(alias) {
        this.updateAlias.emit(alias);
    }
    /**
     * Returns visibility status of product summary item
     *
     * @param item
     */
    checkItemVisibility(item) {
        const visibility = item.userPreferences ? item.userPreferences.visible : item.visible;
        return visibility !== undefined ? visibility : item.visible;
    }
}
ManageAccountItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageAccountItemComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ManageAccountItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManageAccountItemComponent, selector: "bb-manage-account-item", inputs: { item: "item", productAliasMaxLength: "productAliasMaxLength", showIcon: "showIcon" }, outputs: { toggleVisibility: "toggleVisibility", updateAlias: "updateAlias" }, usesInheritance: true, ngImport: i0, template: "<ng-container\n  bbManageAccountItemCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"item\"\n>\n</ng-container>\n\n<ng-template\n  bbManageAccountItemCustomizable\n  let-hostRef\n  let-item=\"context\"\n>\n  <ng-container [ngSwitch]=\"hostRef.responsiveView\">\n    <!-- Mobile View -->\n    <ng-container *ngSwitchCase=\"'mobile'\">\n      <div class=\"row d-flex\">\n        <div class=\"col-12\" data-role=\"product-kind-info\">\n          <ng-container *ngIf=\"hostRef.hasExternalInfo(item)\">\n            <ng-container *ngTemplateOutlet=\"accountExternalInfo; context: { withLogo: hostRef.showIcon }\"></ng-container>\n          </ng-container>\n          <ng-container *ngTemplateOutlet=\"accountInternalInfo; context: { withLogo: (hostRef.showIcon && !hostRef.hasExternalInfo(item)) }\"></ng-container>\n          <div class=\"bb-block bb-block--xs\"></div>\n        </div>\n        <div class=\"col-12\">\n          <div class=\"bb-block bb-block--sm\"></div>\n          <ng-container *ngTemplateOutlet=\"changeVisibilityColumn\"></ng-container>\n        </div>\n      </div>\n    </ng-container>\n\n    <!-- Tablet View -->\n    <ng-container *ngSwitchCase=\"'tablet'\">\n      <div class=\"row d-flex align-items-center flex-nowrap\">\n        <div class=\"col p-0 pl-3 d-flex flex-basis-0 flex-grow-0\">\n          <ng-container *ngTemplateOutlet=\"accountLogo\"></ng-container>\n        </div>\n        <div class=\"col flex-grow-1 row align-items-center flex-wrap\">\n          <div class=\"col-12 col-md-6\" data-role=\"product-kind-info\">\n            <ng-container *ngIf=\"hostRef.hasExternalInfo(item)\">\n              <ng-container *ngTemplateOutlet=\"accountExternalInfo\"></ng-container>\n            </ng-container>\n            <ng-container *ngTemplateOutlet=\"accountInternalInfo; context: { withProductKindName: true }\"></ng-container>\n          </div>\n          <div class=\"col-12 col-md-auto flex-grow-1\">\n            <div class=\"bb-block bb-block--sm\"></div>\n            <ng-container *ngTemplateOutlet=\"changeVisibilityColumn\"></ng-container>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n\n    <!-- Screen View -->\n    <ng-container *ngSwitchDefault>\n      <div class=\"row d-flex align-items-center flex-nowrap\">\n        <div class=\"col p-0 pl-3 d-flex flex-basis-0 flex-grow-0\">\n          <ng-container *ngTemplateOutlet=\"accountLogo\"></ng-container>\n        </div>\n        <div class=\"col flex-grow-1 row align-items-center flex-wrap\">\n          <div class=\"col-12 col-md-6\" data-role=\"product-kind-info\">\n            <ng-container *ngIf=\"hostRef.hasExternalInfo(item)\">\n              <ng-container *ngTemplateOutlet=\"accountExternalInfo\"></ng-container>\n            </ng-container>\n            <ng-container *ngTemplateOutlet=\"accountInternalInfo\"></ng-container>\n          </div>\n          <div class=\"col\" data-role=\"account-kind-name\">\n            <bb-product-kind-name [name]=\"item.productKindName\"></bb-product-kind-name>\n          </div>\n          <div class=\"col-12 col-md-auto flex-grow-1\">\n            <ng-container *ngTemplateOutlet=\"changeVisibilityColumn\"></ng-container>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #accountLogo>\n    <bb-product-summary-account-logo\n      *ngIf=\"hostRef.showIcon\"\n      data-role=\"manage-account-item__logo\"\n      [logoSrc]=\"item?.financialInstitution?.logo\"\n      [productKindName]=\"item.productKindName\"\n      iconColor=\"secondary\"\n    ></bb-product-summary-account-logo>\n  </ng-template>\n\n  <ng-template #accountExternalInfo let-withLogo=\"withLogo\">\n    <div class=\"bb-block bb-block--xs bb-stack bb-stack--density-sm\">\n      <div class=\"bb-stack__item\" *ngIf=\"withLogo\">\n        <bb-product-summary-account-logo\n          data-role=\"manage-account-item__logo\"\n          [logoSrc]=\"item.financialInstitution?.logo\"\n          iconSize=\"sm\"\n          logoSize=\"sm\"\n          [productKindName]=\"item.productKindName\"\n          iconColor=\"secondary\"\n        ></bb-product-summary-account-logo>\n      </div>\n      <span class=\"bb-stack__item bb-text-support bb-subtitle bb-text-bold\"\n            *ngIf=\"item.financialInstitution?.name; else externalBankNameDefault\">{{item.financialInstitution?.name}}</span>\n      <ng-template #externalBankNameDefault>\n        <span class=\"bb-stack__item bb-text-support bb-subtitle bb-text-bold\"\n              i18n=\"External account|Default bank name for external accounts@@manage.account.item\">\n          External account\n        </span>\n      </ng-template>\n    </div>\n  </ng-template>\n\n  <ng-template #accountInternalInfo let-withLogo=\"withLogo\" let-withProductKindName=\"withProductKindName\">\n    <div *ngIf=\"withProductKindName\" class=\"bb-text-support bb-subtitle\" data-role=\"account-kind-name\">\n      <bb-product-kind-name [name]=\"item.productKindName\"></bb-product-kind-name>\n    </div>\n    <div\n      data-role=\"account-name\"\n      class=\"bb-block bb-block--xs bb-stack bb-stack--density-sm bb-text-bold break-word\"\n    >\n      <bb-product-summary-account-logo\n        data-role=\"manage-account-item__logo\"\n        *ngIf=\"withLogo\"\n        class=\"bb-stack__item\"\n        iconSize=\"sm\"\n        logoSize=\"sm\"\n        [productKindName]=\"item.productKindName\"\n        iconColor=\"secondary\"\n      ></bb-product-summary-account-logo>\n      <bb-input-inline-edit-ui\n        [inputText]=\"hostRef.getAlias(item)\"\n        [maxLength]=\"hostRef.productAliasMaxLength\"\n        [required]=\"false\"\n        (accept)=\"hostRef.onAliasUpdate($event)\"\n        ariaLabelEdit=\"Edit alias for {{hostRef.getAlias(item)}}\"\n        i18n-ariaLabelEdit=\"Edit alias|Inline editor aria label@@manage.account.item.alias-inline-edit.aria-label\"\n      ></bb-input-inline-edit-ui>\n    </div>\n    <bb-product-number\n      class=\"bb-text-support bb-subtitle\"\n      data-role=\"account-number\"\n      [product]=\"item\"\n    ></bb-product-number>\n    <bb-arrangement-state-indicator\n      *ngIf=\"item.state\"\n      [state]=\"item.state.state\"\n      [hideStateTextForMobile]=\"false\"\n      data-role=\"arrangement-state\"\n    ></bb-arrangement-state-indicator>\n  </ng-template>\n\n  <ng-template #changeVisibilityColumn>\n    <div class=\"bb-stack\">\n      <bb-amount-ui\n        data-role=\"account-amount\"\n        class=\"bb-stack__item bb-stack__item--push-right bb-highlight bb-stack__item--fill--md-down\"\n        [amount]=\"item.bookedBalance || item.principalAmount || item.currentInvestmentValue\"\n        [currency]=\"item.currency\"\n      ></bb-amount-ui>\n      <div class=\"bb-stack__item\">\n        <bb-switch-ui\n          class=\"bb-stack\"\n          (click)=\"hostRef.updateVisibility(item)\"\n          [ngModel]=\"hostRef.checkItemVisibility(item)\"\n          bbTooltip=\"Manage Visibility\"\n          i18n-bbTooltip=\"Manage account visibility|@@manage.account.item.switch.tooltip.showHide\"\n          triggers=\"hover, focus\"\n          aria-label=\"{{hostRef.getAlias(item)}} Visibility\"\n          i18n-aria-label=\"Account visibility|Accessibility label for the switching account visibility component\n              @@manage.account.item.switch.aria.label.showHide\"\n          aria-pressed=\"true\"\n        ></bb-switch-ui>\n      </div>\n    </div>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$1.ProductKindNameComponent; }), selector: "bb-product-kind-name", inputs: ["name", "isPlural"] }, { type: i0.forwardRef(function () { return i1$1.ProductSummaryAccountLogoComponent; }), selector: "bb-product-summary-account-logo", inputs: ["logoSrc", "productKindName", "defaultProductKindName", "iconColor", "iconSize", "logoSize"] }, { type: i0.forwardRef(function () { return i2$1.InputInlineEditComponent; }), selector: "bb-input-inline-edit-ui", inputs: ["state", "canEdit", "hasLoadingState", "inputInlineTemplate", "inputText", "maxLength", "minLength", "maxValue", "minValue", "autofocus", "ariaLabelAccept", "ariaLabelCancel", "ariaLabelEdit", "tooltipAccept", "tooltipCancel", "tooltipEdit", "autocomplete", "pattern", "hint"], outputs: ["stateChange", "cancel", "accept"] }, { type: i0.forwardRef(function () { return i1$1.ProductNumberComponent; }), selector: "bb-product-number", inputs: ["number", "product", "format", "type", "unmaskable", "masked"], outputs: ["mask", "unmask"] }, { type: i0.forwardRef(function () { return i1$1.ArrangementStateIndicatorComponent; }), selector: "bb-arrangement-state-indicator", inputs: ["state", "showActive", "showIcon", "hideStateTextForMobile"] }, { type: i0.forwardRef(function () { return i3.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0.forwardRef(function () { return i4.SwitchComponent; }), selector: "bb-switch-ui", inputs: ["labelPosition"] }], directives: [{ type: i0.forwardRef(function () { return ManageAccountItemCustomizableDirective; }), selector: "[bbManageAccountItemCustomizable]" }, { type: i0.forwardRef(function () { return i5.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i5.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i5.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i5.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return i5.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }, { type: i0.forwardRef(function () { return i6.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i7.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i7.NgModel; }), selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageAccountItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-account-item',
                    templateUrl: 'manage-account-item.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { item: [{
                type: Input
            }], productAliasMaxLength: [{
                type: Input
            }], showIcon: [{
                type: Input
            }], toggleVisibility: [{
                type: Output
            }], updateAlias: [{
                type: Output
            }] } });
/**
 * This is an extension slot to be used for customizing the entire component
 *
 * @usageNotes
 *
 * ### Customize the component
 *
 * ```html
 * <ng-template
 *   bbManageAccountItemCustomizable
 *   let-hostRef
 *   let-item="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryManageAccountsWidgetModule
 */
class ManageAccountItemCustomizableDirective extends BbTemplate {
}
ManageAccountItemCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageAccountItemCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ManageAccountItemCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ManageAccountItemCustomizableDirective, selector: "[bbManageAccountItemCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageAccountItemCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbManageAccountItemCustomizable]',
                }]
        }] });

/**
 * Widget for displaying and managing accounts
 *
 * The following extension slots are available in this component:
 *
 * - `ProductSummaryManageAccountCustomizableDirective`
 * - `ProductSummaryManageAccountLoadingCustomizableDirective`
 * - `ManageAccountsFooterCustomizableDirective`
 *
 * @see `AccountsOverviewWidgetCustomizableDirective`
 * @see `ProductSummaryManageAccountLoadingCustomizableDirective`
 * @see `ManageAccountsFooterCustomizableDirective`
 *
 * @usageNotes
 *
 * ### Include this widget in your `AppModule`:
 *
 * ```typescript
 * @NgModule({
 *   imports: [
 *     ProductSummaryManageAccountsWidgetModule,
 *   ],
 *   ...
 * })
 * export class AppModule {}
 * ```
 *
 * ### Include this widget (standalone model)
 *
 * ```typescript
 * export const environment: Environment = {
 *   ...
 *   bootstrap: {
 *     pageModel: {
 *       name: 'root',
 *       properties: {},
 *       children: [
 *         {
 *           name: 'product-summary-accounts-overview-widget-ang',
 *           properties: {
 *              classId: 'ProductSummaryManageAccountsWidgetComponent',
 *              businessFunction: 'Product Summary',
 *              resourceName: 'Product Summary',
 *              privilege: 'view',
 *              size: 20,
 *              route: 'manage-accounts',
 *           },
 *         },
 *       ],
 *     },
 *   },
 * };
 *
 * @ngModule ProductSummaryManageAccountsWidgetModule
 * ```
 */
class ProductSummaryManageAccountsWidgetComponent {
    /**
     * Constructor
     *
     * @param service
     * @param widgetPropertiesService
     * @param productsExternalInfoService
     * @param el
     */
    constructor(service, widgetPropertiesService, productsExternalInfoService, el) {
        this.service = service;
        this.widgetPropertiesService = widgetPropertiesService;
        this.productsExternalInfoService = productsExternalInfoService;
        this.el = el;
        /**
         * Subject for the garbage collector
         */
        this.gc$ = new Subject();
        /**
         * @internal
         */
        this.hostRef = this;
        /**
         * ViewChild for `notificationError`
         */
        this.notificationErrorTemplate = '';
        /**
         * ViewChild for `notificationSuccess`
         */
        this.notificationSuccessTemplate = '';
        /**
         * Contains errors occurred during fetching accounts
         */
        this.error = this.service.error;
        /**
         * If errors occurred during patching arrangements record,
         * holds the errors coming from the server
         */
        this.updateError = this.service.updateError;
        /**
         * Available product summary items.
         */
        this.accounts = new Observable(subscriber => {
            const subscriptions = [];
            subscriptions.push(this.service.accountList.subscribe((accounts) => {
                const products = (accounts === null || accounts === void 0 ? void 0 : accounts.items) || [];
                subscriber.next(accounts);
                if (products.some(hasExternalInfo)) {
                    subscriptions.push(this.productsExternalInfoService
                        .getProductsWithExternalInfo(products)
                        .pipe(map(productsWithExternalInfo => (Object.assign(Object.assign({}, accounts), { items: productsWithExternalInfo }))))
                        .subscribe(subscriber));
                }
            }, subscriber.error));
            return () => subscriptions.forEach(subscription => subscription.unsubscribe());
        });
        /**
         * Whether the widget is currently fetching data from the server
         */
        this.loading = this.service.loading;
        /**
         * Maximum length of product item aliases
         */
        this.aliasMaxLength = UserPreferencesValidationSettings.ALIAS_MAX_LENGTH;
        this.isSmallScreen = false;
        /**
         * Default business function
         */
        this.businessFunction = 'Product Summary';
        /**
         * Default resource name
         */
        this.resourceName = 'Product Summary';
        /**
         * "Default privilege type
         */
        this.privilege = 'view';
        /**
         * Number of accounts per page
         */
        this.size = 20;
        /**
         * Defines whether product kind icons should be displayed
         *
         * @default true
         */
        this.showIcons = true;
        /**
         * Default pagination parameters
         */
        this.paginationParams = new BehaviorSubject({
            from: 0,
            size: 0,
            businessFunction: '',
            resourceName: '',
            privilege: '',
            paginationType: PaginationType.PAGINATION,
        });
        this.requestParams = combineLatest(this.paginationParams, this.widgetPropertiesService.widgetProperties).pipe(takeUntil(this.gc$), map(([paginationParams, widgetProperties]) => ({
            from: paginationParams.from || 0,
            size: widgetProperties.size,
            businessFunction: widgetProperties.businessFunction,
            resourceName: widgetProperties.resourceName,
            privilege: widgetProperties.privilege,
            paginationType: paginationParams.paginationType,
        })));
        /**
         * Joins the specified error messages to display on the template
         *
         * @param messages
         */
        this.processErrorMessages = processErrorMessages;
    }
    /**
     * @internal
     */
    ngAfterViewInit() {
        this.widgetPropertiesService.setConfig({
            businessFunction: this.businessFunction,
            resourceName: this.resourceName,
            privilege: this.privilege,
            size: this.size,
        });
        const containerWidth = this.el.nativeElement.children[0].getBoundingClientRect().width;
        this.isSmallScreen = containerWidth <= SMALL_SCREEN_SIZE;
        this.widgetPropertiesService.widgetProperties
            .pipe(takeUntil(this.gc$))
            .subscribe(widgetProperties => this.initWidgetProperties(widgetProperties));
    }
    /**
     * Cleanups just before Angular destroys the component.
     *
     * @returns
     */
    ngOnDestroy() {
        this.gc$.next();
        this.gc$.complete();
    }
    initWidgetProperties(properties) {
        const paginationType = this.isSmallScreen ? PaginationType.LOAD_MORE : PaginationType.PAGINATION;
        this.paginationParams.next(Object.assign(Object.assign({}, this.paginationParams.getValue()), { size: properties.size, paginationType }));
        this.service.getAccountsFrom(this.requestParams);
    }
    /**
     * Toggles visibility of product summary item.
     *
     * @param item
     */
    toggleVisibility(item) {
        this.service.toggleVisibility(item, this.notificationErrorTemplate, this.notificationSuccessTemplate);
    }
    /**
     * Updates alias of product summary item, by id.
     *
     * @param id
     * @param alias
     */
    updateAlias(id, alias = '') {
        this.service.updateAlias(id, alias, this.notificationErrorTemplate, this.notificationSuccessTemplate);
    }
    /**
     * Event handler for the `pageChange` event of `bb-product-summary-footer-ui`
     * emits the new `page` value to the `paginationParams`
     *
     * @param page
     */
    onPageChange(page) {
        this.paginationParams.next(Object.assign(Object.assign({}, this.paginationParams.getValue()), { from: page }));
    }
    /**
     * Event handler for the `loadMore` event of `bb-product-summary-footer-ui`
     * updates the `from` property of `paginationParams`
     */
    onLoadMore() {
        if (!this.loading.getValue()) {
            this.paginationParams.next(Object.assign(Object.assign({}, this.paginationParams.value), { from: this.paginationParams.value.from ? this.paginationParams.value.from + 1 : 1 }));
        }
    }
}
ProductSummaryManageAccountsWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryManageAccountsWidgetComponent, deps: [{ token: ManageAccountsService }, { token: ManageAccountsWidgetPropertiesService }, { token: i3$1.ProductsExternalInfoService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
ProductSummaryManageAccountsWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryManageAccountsWidgetComponent, selector: "bb-product-summary-manage-accounts-widget", inputs: { businessFunction: "businessFunction", resourceName: "resourceName", privilege: "privilege", size: "size", showIcons: "showIcons" }, providers: [ManageAccountsWidgetPropertiesService], viewQueries: [{ propertyName: "notificationErrorTemplate", first: true, predicate: ["notificationError"], descendants: true, static: true }, { propertyName: "notificationSuccessTemplate", first: true, predicate: ["notificationSuccess"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"bb-block bb-block--full-width\">\n  <ng-container *ngIf=\"!(hostRef.error | async | bbIsDefined) && (accounts | async) as accounts; else loadingTemplate\">\n    <ng-container *ngIf=\"((hostRef.loading | async) === false); else loadingTemplate\">\n      <ng-container bbManageAccountCustomizable\n                    [bbHostRef]=\"hostRef\"\n                    [bbTemplateContext]=\"accounts\">\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</div>\n\n<!-- Manage Accounts template -->\n<ng-template\n  bbManageAccountCustomizable\n  let-hostRef\n  let-accounts=\"context\">\n  <div class=\"bb-block bb-block--xl\"\n       data-role=\"product-summary-manage-accounts-initial-message\"\n       i18n=\"Manage Products info|Manage Products info header label@@product.summary.manage.accounts.header.info\">\n    Below you can define which products will be shown in \"My accounts\" and/or edit their account names.\n  </div>\n\n  <div class=\"card card-lg\">\n    <div class=\"card-body\">\n      <div class=\"bb-list bb-list--density-md\">\n        <div class=\"bb-list__item\"\n             *ngFor=\"let item of accounts.items\">\n          <bb-manage-account-item\n            [item]=\"item\"\n            [productAliasMaxLength]=\"hostRef.aliasMaxLength\"\n            [showIcon]=\"this.showIcons\"\n            (toggleVisibility)=\"hostRef.toggleVisibility($event)\"\n            (updateAlias)=\"hostRef.updateAlias(item.id, $event)\"\n          ></bb-manage-account-item>\n        </div>\n      </div>\n    </div>\n    <div class=\"card-footer\">\n      <ng-container\n        bbManageAccountsFooterCustomizable\n        [bbHostRef]=\"hostRef\"\n        [bbTemplateContext]=\"{\n            paginationParams: hostRef.paginationParams | async,\n            accounts: accounts\n          }\"\n      >\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #notificationError>\n  <span i18n=\"Failed to update Product|Error notification message@@product-summary-manage.notification.error\">\n    Failed to update Product\n  </span>\n  <span *ngIf=\"updateError | async as updateError\">\n    {{processErrorMessages(updateError.messages)}}\n  </span>\n</ng-template>\n\n<ng-template #notificationSuccess>\n  <span i18n=\"Successfully Updated|Success notification message@@product-summary-manage.notification.success\">\n    Successfully Updated\n  </span>\n</ng-template>\n\n\n<!-- Product summary loading template -->\n<ng-template #loadingTemplate>\n  <ng-container bbManageAccountLoadingCustomizable\n                [bbHostRef]=\"hostRef\">\n  </ng-container>\n</ng-template>\n\n<ng-template\n  bbManageAccountLoadingCustomizable\n  let-hostRef>\n  <ng-container *ngIf=\"hostRef.error | async as error; else loading\">\n    <bb-empty-state-ui\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      iconClasses=\"text-muted\"\n      title=\"\"\n      [subtitle]=\"hostRef.processErrorMessages(error.messages)\"\n    ></bb-empty-state-ui>\n  </ng-container>\n  <ng-template #loading>\n    <bb-loading-indicator-ui\n      text=\"Loading Accounts...\"\n      i18n-text=\"Loading Accounts...|Text for loading indicator@@product.details.loadingAccounts\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n</ng-template>\n\n<ng-template\n  bbManageAccountsFooterCustomizable\n  let-hostRef\n  let-accounts=\"context.accounts\"\n  let-paginationParams=\"context.paginationParams\">\n  <bb-product-summary-footer-ui\n    [page]=\"paginationParams?.from\"\n    [count]=\"accounts?.count\"\n    [hasMore]=\"accounts?.items?.length !== accounts?.count\"\n    [loading]=\"hostRef.loading | async\"\n    [paginationType]=\"paginationParams?.paginationType\"\n    [itemsPerPage]=\"paginationParams?.size\"\n    (pageChange)=\"hostRef.onPageChange($event)\"\n    (loadMore)=\"hostRef.onLoadMore($event)\"\n  ></bb-product-summary-footer-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return ManageAccountItemComponent; }), selector: "bb-manage-account-item", inputs: ["item", "productAliasMaxLength", "showIcon"], outputs: ["toggleVisibility", "updateAlias"] }, { type: i0.forwardRef(function () { return i5$1.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0.forwardRef(function () { return i6$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i1$1.ProductSummaryFooterComponent; }), selector: "bb-product-summary-footer-ui", inputs: ["page", "count", "itemsPerPage", "paginationType", "hasMore", "loading", "boundaryLinks", "directionLinks", "maxNavPages"], outputs: ["pageChange", "loadMore"] }], directives: [{ type: i0.forwardRef(function () { return i5.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return ProductSummaryManageAccountCustomizableDirective; }), selector: "[bbManageAccountCustomizable]" }, { type: i0.forwardRef(function () { return i5.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return ManageAccountsFooterCustomizableDirective; }), selector: "[bbManageAccountsFooterCustomizable]" }, { type: i0.forwardRef(function () { return ProductSummaryManageAccountLoadingCustomizableDirective; }), selector: "[bbManageAccountLoadingCustomizable]" }], pipes: { "bbIsDefined": i0.forwardRef(function () { return i3$1.IsDefinedPipe; }), "async": i0.forwardRef(function () { return i5.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryManageAccountsWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-summary-manage-accounts-widget',
                    templateUrl: 'product-summary-manage-accounts-widget.component.html',
                    providers: [ManageAccountsWidgetPropertiesService],
                }]
        }], ctorParameters: function () { return [{ type: ManageAccountsService }, { type: ManageAccountsWidgetPropertiesService }, { type: i3$1.ProductsExternalInfoService }, { type: i0.ElementRef }]; }, propDecorators: { notificationErrorTemplate: [{
                type: ViewChild,
                args: ['notificationError', { static: true }]
            }], notificationSuccessTemplate: [{
                type: ViewChild,
                args: ['notificationSuccess', { static: true }]
            }], businessFunction: [{
                type: Input,
                args: [WidgetProperty.BUSINESS_FUNCTION]
            }], resourceName: [{
                type: Input,
                args: [WidgetProperty.RESOURCE_NAME]
            }], privilege: [{
                type: Input,
                args: [WidgetProperty.PRIVILEGE_TYPE]
            }], size: [{
                type: Input,
                args: [WidgetProperty.SIZE]
            }], showIcons: [{
                type: Input,
                args: [WidgetProperty.SHOW_ICONS]
            }] } });
/**
 * This is an extension slot to be used for customizing the entire widget
 *
 * @usageNotes
 *
 * ### Customize the widget
 *
 * ```html
 * <ng-template
 *   bbManageAccountCustomizable
 *   let-hostRef
 *   let-accounts="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryManageAccountsWidgetModule
 */
class ProductSummaryManageAccountCustomizableDirective extends BbTemplate {
}
ProductSummaryManageAccountCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryManageAccountCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryManageAccountCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryManageAccountCustomizableDirective, selector: "[bbManageAccountCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryManageAccountCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbManageAccountCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing the loading indicator
 *
 * @usageNotes
 *
 * ### Customize the loading indicator
 *
 * ```html
 * <ng-template
 *   bbManageAccountLoadingCustomizable
 *   let-hostRef>
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryManageAccountsWidgetModule
 */
class ProductSummaryManageAccountLoadingCustomizableDirective extends BbTemplate {
}
ProductSummaryManageAccountLoadingCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryManageAccountLoadingCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryManageAccountLoadingCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryManageAccountLoadingCustomizableDirective, selector: "[bbManageAccountLoadingCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryManageAccountLoadingCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbManageAccountLoadingCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing the footer
 *
 * @usageNotes
 *
 * ### Customize the footer
 *
 * ```html
 * <ng-template
 *   bbManageAccountsFooterCustomizable
 *   let-hostRef
 *   let-accounts="context.accounts"
 *   let-paginationParams="context.paginationParams">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryManageAccountsWidgetModule
 */
class ManageAccountsFooterCustomizableDirective extends BbTemplate {
}
ManageAccountsFooterCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageAccountsFooterCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ManageAccountsFooterCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ManageAccountsFooterCustomizableDirective, selector: "[bbManageAccountsFooterCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageAccountsFooterCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbManageAccountsFooterCustomizable]',
                }]
        }] });

const components = [ProductSummaryManageAccountsWidgetComponent, ManageAccountItemComponent];
const directives = [
    ProductSummaryManageAccountCustomizableDirective,
    ManageAccountItemCustomizableDirective,
    ProductSummaryManageAccountLoadingCustomizableDirective,
    ManageAccountsFooterCustomizableDirective,
];
const uiModules = [
    EmptyStateModule,
    LoadingIndicatorModule,
    InputInlineEditModule,
    PaymentCardNumberModule,
    AmountModule,
    SwitchModule,
    NotificationModule,
    ArrangementStateIndicatorModule,
    ProductSummaryAccountLogoModule,
    ProductSummaryFooterModule,
    ProductKindNameModule,
    ProductNumberModule,
    TooltipModule,
    ValidationModule,
];
/**
 * Exports the Widgets and UI components for managing accounts
 *
 * The following widgets are included in this module:
 *  - `ProductSummaryManageAccountsWidgetComponent`
 *
 * @see ProductSummaryManageAccountsWidgetComponent
 *
 * The following components are included in this module:
 * - `ManageAccountItemComponent`,
 *
 * @see `ManageAccountItemComponent`,
 *
 * @usageNotes
 *
 * ### Include the exported widgets in your `AppModule`:
 *
 * ```typescript
 * @NgModule({
 *   imports: [
 *     ProductSummaryManageAccountsWidgetModule,
 *   ],
 *   ...
 * })
 * export class AppModule {}
 * ```
 */
class ProductSummaryManageAccountsWidgetModule {
}
ProductSummaryManageAccountsWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryManageAccountsWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductSummaryManageAccountsWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryManageAccountsWidgetModule, declarations: [ProductSummaryManageAccountsWidgetComponent, ManageAccountItemComponent, ProductSummaryManageAccountCustomizableDirective,
        ManageAccountItemCustomizableDirective,
        ProductSummaryManageAccountLoadingCustomizableDirective,
        ManageAccountsFooterCustomizableDirective], imports: [CommonModule,
        FormsModule, i1$2.BackbaseCoreModule, ProductSummaryCommon, EmptyStateModule,
        LoadingIndicatorModule,
        InputInlineEditModule,
        PaymentCardNumberModule,
        AmountModule,
        SwitchModule,
        NotificationModule,
        ArrangementStateIndicatorModule,
        ProductSummaryAccountLogoModule,
        ProductSummaryFooterModule,
        ProductKindNameModule,
        ProductNumberModule,
        TooltipModule,
        ValidationModule], exports: [ProductSummaryManageAccountsWidgetComponent, ManageAccountItemComponent, ProductSummaryManageAccountCustomizableDirective,
        ManageAccountItemCustomizableDirective,
        ProductSummaryManageAccountLoadingCustomizableDirective,
        ManageAccountsFooterCustomizableDirective, EmptyStateModule,
        LoadingIndicatorModule,
        InputInlineEditModule,
        PaymentCardNumberModule,
        AmountModule,
        SwitchModule,
        NotificationModule,
        ArrangementStateIndicatorModule,
        ProductSummaryAccountLogoModule,
        ProductSummaryFooterModule,
        ProductKindNameModule,
        ProductNumberModule,
        TooltipModule,
        ValidationModule] });
ProductSummaryManageAccountsWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryManageAccountsWidgetModule, providers: [ManageAccountsService, ProductsExternalInfoService], imports: [[
            CommonModule,
            FormsModule,
            BackbaseCoreModule.withConfig({
                classMap: {
                    ProductSummaryManageAccountsWidgetComponent,
                },
            }),
            ProductSummaryCommon,
            ...uiModules,
        ], EmptyStateModule,
        LoadingIndicatorModule,
        InputInlineEditModule,
        PaymentCardNumberModule,
        AmountModule,
        SwitchModule,
        NotificationModule,
        ArrangementStateIndicatorModule,
        ProductSummaryAccountLogoModule,
        ProductSummaryFooterModule,
        ProductKindNameModule,
        ProductNumberModule,
        TooltipModule,
        ValidationModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryManageAccountsWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        BackbaseCoreModule.withConfig({
                            classMap: {
                                ProductSummaryManageAccountsWidgetComponent,
                            },
                        }),
                        ProductSummaryCommon,
                        ...uiModules,
                    ],
                    declarations: [...components, ...directives],
                    exports: [...components, ...directives, ...uiModules],
                    providers: [ManageAccountsService, ProductsExternalInfoService],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ManageAccountAccessDenied, ManageAccountBadRequest, ManageAccountConnectivityError, ManageAccountItemComponent, ManageAccountItemCustomizableDirective, ManageAccountNotFound, ManageAccountUnknownError, ManageAccountsFooterCustomizableDirective, ManageAccountsService, ManageAccountsWidgetPropertiesService, ProductSummaryManageAccountCustomizableDirective, ProductSummaryManageAccountLoadingCustomizableDirective, ProductSummaryManageAccountsWidgetComponent, ProductSummaryManageAccountsWidgetModule, WidgetProperty };
//# sourceMappingURL=backbase-product-summary-manage-accounts-widget-ang.js.map
