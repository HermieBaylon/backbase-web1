(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/actions-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["actions-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var DaysOfWeek = {
        MON: 'MON',
        TUE: 'TUE',
        WED: 'WED',
        THU: 'THU',
        FRI: 'FRI',
        SAT: 'SAT',
        SUN: 'SUN'
    };

    var HoursOfDay = {
        _0: '0',
        _1: '1',
        _2: '2',
        _3: '3',
        _4: '4',
        _5: '5',
        _6: '6',
        _7: '7',
        _8: '8',
        _9: '9',
        _10: '10',
        _11: '11',
        _12: '12',
        _13: '13',
        _14: '14',
        _15: '15',
        _16: '16',
        _17: '17',
        _18: '18',
        _19: '19',
        _20: '20',
        _21: '21',
        _22: '22',
        _23: '23'
    };

    var TemplateType = {
        REGULAR: 'REGULAR',
        DIGEST: 'DIGEST'
    };

    var ACTIONS_BASE_PATH = new i0.InjectionToken('ACTIONS_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var ActionsConfiguration = /** @class */ (function () {
        function ActionsConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        ActionsConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        ActionsConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        ActionsConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        ActionsConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return ActionsConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module ActionsConfiguration');

    var ActionsApiModule = /** @class */ (function () {
        function ActionsApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('ActionsApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        ActionsApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: ActionsApiModule,
                providers: [{ provide: ActionsConfiguration, useFactory: configurationFactory }]
            };
        };
        return ActionsApiModule;
    }());
    ActionsApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ActionsApiModule, deps: [{ token: ActionsApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: ActionsConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ActionsApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ActionsApiModule });
    ActionsApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ActionsApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ActionsApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: ActionsApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: ActionsConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var ActionRecipeSpecificationsHttpService = /** @class */ (function () {
        function ActionRecipeSpecificationsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new ActionsConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        ActionRecipeSpecificationsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        ActionRecipeSpecificationsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        ActionRecipeSpecificationsHttpService.prototype.getActionRecipeSpecifications = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _offset = requestParameters["offset"];
            var _limit = requestParameters["limit"];
            var _orderBy = requestParameters["orderBy"];
            var _direction = requestParameters["direction"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_offset !== undefined && _offset !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
            }
            if (_limit !== undefined && _limit !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
            }
            if (_orderBy !== undefined && _orderBy !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
            }
            if (_direction !== undefined && _direction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/action-recipe-specifications", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ActionRecipeSpecificationsHttpService.prototype.getActionRecipeSpecificationsUrl = function (requestParameters) {
            var _offset = requestParameters["offset"];
            var _limit = requestParameters["limit"];
            var _orderBy = requestParameters["orderBy"];
            var _direction = requestParameters["direction"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_offset !== undefined && _offset !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
            }
            if (_limit !== undefined && _limit !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
            }
            if (_orderBy !== undefined && _orderBy !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
            }
            if (_direction !== undefined && _direction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/action-recipe-specifications" + (queryString ? "?" + queryString : '');
        };
        return ActionRecipeSpecificationsHttpService;
    }());
    ActionRecipeSpecificationsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ActionRecipeSpecificationsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: ACTIONS_BASE_PATH, optional: true }, { token: ActionsConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ActionRecipeSpecificationsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ActionRecipeSpecificationsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ActionRecipeSpecificationsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ACTIONS_BASE_PATH]
                        }] }, { type: ActionsConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var ActionRecipeSpecificationsHttpServiceGetActionRecipeSpecificationsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/action-recipe-specifications",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "actionRecipeSpecifications": [{
                                "id": "1",
                                "name": "New Transaction",
                                "userDefinable": true,
                                "origin": "Transaction",
                                "type": "newTransaction",
                                "category": "arrangementBased",
                                "actions": [{
                                        "type": "notification",
                                        "severityLevel": "INFO",
                                        "route": {
                                            "whereTo": "transaction-view",
                                            "dataTemplate": "{\"id\": \"${transactions[0].id}\", \"arrangementId\": \"${transactions[0].arrangementId}\"}"
                                        },
                                        "templates": [{
                                                "locale": "en-US",
                                                "kind": "REGULAR",
                                                "path": "/pathto/template",
                                                "repository": "repository_id"
                                            }, {
                                                "locale": "en-US",
                                                "kind": "DIGEST",
                                                "path": "/pathto/template",
                                                "repository": "repository_id"
                                            }]
                                    }, {
                                        "type": "email",
                                        "templates": [{
                                                "locale": "en-US",
                                                "kind": "REGULAR",
                                                "path": "/pathto/template",
                                                "repository": "repository_id"
                                            }, {
                                                "locale": "en-US",
                                                "kind": "DIGEST",
                                                "path": "/pathto/template",
                                                "repository": "repository_id"
                                            }]
                                    }, {
                                        "type": "sms",
                                        "templates": [{
                                                "locale": "en-US",
                                                "kind": "REGULAR",
                                                "path": "/pathto/template",
                                                "repository": "repository_id"
                                            }, {
                                                "locale": "en-US",
                                                "kind": "DIGEST",
                                                "path": "/pathto/template",
                                                "repository": "repository_id"
                                            }]
                                    }, {
                                        "type": "push",
                                        "severityLevel": "INFO",
                                        "route": {
                                            "whereTo": "transaction-view",
                                            "dataTemplate": "{\"id\": \"${transactions[0].id}\", \"arrangementId\": \"${transactions[0].arrangementId}\"}"
                                        },
                                        "templates": [{
                                                "locale": "en-US",
                                                "kind": "REGULAR",
                                                "path": "/pathto/template",
                                                "repository": "repository_id"
                                            }, {
                                                "locale": "en-US",
                                                "kind": "DIGEST",
                                                "path": "/pathto/template",
                                                "repository": "repository_id"
                                            }]
                                    }],
                                "digestEnabled": true,
                                "recipeDefaults": {
                                    "amount": "0",
                                    "actions": [{
                                            "type": "notification"
                                        }, {
                                            "type": "push"
                                        }]
                                }
                            }, {
                                "id": "4",
                                "name": "Account Low Balance",
                                "userDefinable": true,
                                "type": "accountLowBalance",
                                "category": "arrangementBased",
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "email"
                                    }, {
                                        "type": "sms"
                                    }, {
                                        "type": "push"
                                    }],
                                "digestEnabled": false,
                                "recipeDefaults": {
                                    "amount": "200",
                                    "actions": [{
                                            "type": "notification"
                                        }, {
                                            "type": "push"
                                        }],
                                    "additions": {
                                        "type": "Cash Withdraw"
                                    }
                                }
                            }, {
                                "id": "5",
                                "name": "Payment Status Updated",
                                "userDefinable": true,
                                "type": "paymentStatusUpdated",
                                "category": "paymentStatusBased",
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }],
                                "digestEnabled": true,
                                "recipeDefaults": {
                                    "actions": [{
                                            "type": "notification"
                                        }, {
                                            "type": "push"
                                        }]
                                }
                            }, {
                                "id": "6",
                                "name": "Party Status Updated",
                                "userDefinable": true,
                                "type": "partyStatusUpdated",
                                "category": "partyStatusBased",
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }],
                                "digestEnabled": false,
                                "recipeDefaults": {
                                    "actions": [{
                                            "type": "notification"
                                        }, {
                                            "type": "push"
                                        }]
                                }
                            }, {
                                "id": "8",
                                "name": "Saving goal",
                                "type": "savingGoal",
                                "category": "userBased",
                                "userDefinable": true,
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }],
                                "digestEnabled": false
                            }, {
                                "id": "9",
                                "name": "Account statement is ready",
                                "type": "accountStatementIsReady",
                                "category": "arrangementBased",
                                "userDefinable": true,
                                "actions": [{
                                        "type": "email"
                                    }, {
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }],
                                "digestEnabled": false
                            }, {
                                "id": "10",
                                "name": "Account Low Balance Business",
                                "type": "accountLowBalance",
                                "category": "arrangementBased",
                                "userDefinable": true,
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }],
                                "digestEnabled": false,
                                "recipeDefaults": {
                                    "amount": "0",
                                    "actions": [{
                                            "type": "notification"
                                        }, {
                                            "type": "push"
                                        }]
                                }
                            }, {
                                "id": "13",
                                "name": "Payment to approve",
                                "type": "paymentToApprove",
                                "category": "paymentResourceBased",
                                "digestEnabled": false,
                                "recipeDefaults": {
                                    "actions": [{
                                            "type": "notification"
                                        }, {
                                            "type": "push"
                                        }],
                                    "additions": {
                                        "resource": "Payments"
                                    }
                                }
                            }, {
                                "id": "14",
                                "name": "Contact to approve",
                                "type": "contactToApprove",
                                "category": "contactResourceBased",
                                "digestEnabled": false,
                                "recipeDefaults": {
                                    "actions": [{
                                            "type": "notification"
                                        }, {
                                            "type": "push"
                                        }],
                                    "additions": {
                                        "resource": "Contacts"
                                    }
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ActionRecipeSpecificationsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/action-recipe-specifications",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "actionRecipeSpecifications": [{
                                "id": "1",
                                "name": "New Transaction",
                                "userDefinable": true,
                                "origin": "Transaction",
                                "type": "newTransaction",
                                "category": "arrangementBased",
                                "actions": [{
                                        "type": "notification",
                                        "severityLevel": "INFO",
                                        "route": {
                                            "whereTo": "transaction-view",
                                            "dataTemplate": "{\"id\": \"${transactions[0].id}\", \"arrangementId\": \"${transactions[0].arrangementId}\"}"
                                        },
                                        "templates": [{
                                                "locale": "en-US",
                                                "kind": "REGULAR",
                                                "path": "/pathto/template",
                                                "repository": "repository_id"
                                            }, {
                                                "locale": "en-US",
                                                "kind": "DIGEST",
                                                "path": "/pathto/template",
                                                "repository": "repository_id"
                                            }]
                                    }, {
                                        "type": "email",
                                        "templates": [{
                                                "locale": "en-US",
                                                "kind": "REGULAR",
                                                "path": "/pathto/template",
                                                "repository": "repository_id"
                                            }, {
                                                "locale": "en-US",
                                                "kind": "DIGEST",
                                                "path": "/pathto/template",
                                                "repository": "repository_id"
                                            }]
                                    }, {
                                        "type": "sms",
                                        "templates": [{
                                                "locale": "en-US",
                                                "kind": "REGULAR",
                                                "path": "/pathto/template",
                                                "repository": "repository_id"
                                            }, {
                                                "locale": "en-US",
                                                "kind": "DIGEST",
                                                "path": "/pathto/template",
                                                "repository": "repository_id"
                                            }]
                                    }, {
                                        "type": "push",
                                        "severityLevel": "INFO",
                                        "route": {
                                            "whereTo": "transaction-view",
                                            "dataTemplate": "{\"id\": \"${transactions[0].id}\", \"arrangementId\": \"${transactions[0].arrangementId}\"}"
                                        },
                                        "templates": [{
                                                "locale": "en-US",
                                                "kind": "REGULAR",
                                                "path": "/pathto/template",
                                                "repository": "repository_id"
                                            }, {
                                                "locale": "en-US",
                                                "kind": "DIGEST",
                                                "path": "/pathto/template",
                                                "repository": "repository_id"
                                            }]
                                    }],
                                "digestEnabled": true,
                                "recipeDefaults": {
                                    "amount": "0",
                                    "actions": [{
                                            "type": "notification"
                                        }, {
                                            "type": "push"
                                        }]
                                }
                            }, {
                                "id": "4",
                                "name": "Account Low Balance",
                                "userDefinable": true,
                                "type": "accountLowBalance",
                                "category": "arrangementBased",
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "email"
                                    }, {
                                        "type": "sms"
                                    }, {
                                        "type": "push"
                                    }],
                                "digestEnabled": false,
                                "recipeDefaults": {
                                    "amount": "200",
                                    "actions": [{
                                            "type": "notification"
                                        }, {
                                            "type": "push"
                                        }],
                                    "additions": {
                                        "type": "Cash Withdraw"
                                    }
                                }
                            }, {
                                "id": "5",
                                "name": "Payment Status Updated",
                                "userDefinable": true,
                                "type": "paymentStatusUpdated",
                                "category": "paymentStatusBased",
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }],
                                "digestEnabled": true,
                                "recipeDefaults": {
                                    "actions": [{
                                            "type": "notification"
                                        }, {
                                            "type": "push"
                                        }]
                                }
                            }, {
                                "id": "6",
                                "name": "Party Status Updated",
                                "userDefinable": true,
                                "type": "partyStatusUpdated",
                                "category": "partyStatusBased",
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }],
                                "digestEnabled": false,
                                "recipeDefaults": {
                                    "actions": [{
                                            "type": "notification"
                                        }, {
                                            "type": "push"
                                        }]
                                }
                            }, {
                                "id": "8",
                                "name": "Saving goal",
                                "type": "savingGoal",
                                "category": "userBased",
                                "userDefinable": true,
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }],
                                "digestEnabled": false
                            }, {
                                "id": "9",
                                "name": "Account statement is ready",
                                "type": "accountStatementIsReady",
                                "category": "arrangementBased",
                                "userDefinable": true,
                                "actions": [{
                                        "type": "email"
                                    }, {
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }],
                                "digestEnabled": false
                            }, {
                                "id": "10",
                                "name": "Account Low Balance Business",
                                "type": "accountLowBalance",
                                "category": "arrangementBased",
                                "userDefinable": true,
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }],
                                "digestEnabled": false,
                                "recipeDefaults": {
                                    "amount": "0",
                                    "actions": [{
                                            "type": "notification"
                                        }, {
                                            "type": "push"
                                        }]
                                }
                            }, {
                                "id": "13",
                                "name": "Payment to approve",
                                "type": "paymentToApprove",
                                "category": "paymentResourceBased",
                                "digestEnabled": false,
                                "recipeDefaults": {
                                    "actions": [{
                                            "type": "notification"
                                        }, {
                                            "type": "push"
                                        }],
                                    "additions": {
                                        "resource": "Payments"
                                    }
                                }
                            }, {
                                "id": "14",
                                "name": "Contact to approve",
                                "type": "contactToApprove",
                                "category": "contactResourceBased",
                                "digestEnabled": false,
                                "recipeDefaults": {
                                    "actions": [{
                                            "type": "notification"
                                        }, {
                                            "type": "push"
                                        }],
                                    "additions": {
                                        "resource": "Contacts"
                                    }
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    var ActionRecipesHttpService = /** @class */ (function () {
        function ActionRecipesHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new ActionsConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        ActionRecipesHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        ActionRecipesHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        ActionRecipesHttpService.prototype.deleteActionRecipe = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _recipeId = requestParameters["recipeId"];
            if (_recipeId === null || _recipeId === undefined) {
                throw new Error('Required parameter recipeId was null or undefined when calling deleteActionRecipe.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/action-recipes/" + encodeURIComponent(String(_recipeId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ActionRecipesHttpService.prototype.deleteActionRecipeUrl = function (requestParameters) {
            var _recipeId = requestParameters["recipeId"];
            if (_recipeId === null || _recipeId === undefined) {
                throw new Error('Required parameter recipeId was null or undefined when calling deleteActionRecipe.');
            }
            return this.configuration.basePath + "/client-api/v2/action-recipes/" + encodeURIComponent(String(_recipeId));
        };
        ActionRecipesHttpService.prototype.getActionRecipe = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _recipeId = requestParameters["recipeId"];
            if (_recipeId === null || _recipeId === undefined) {
                throw new Error('Required parameter recipeId was null or undefined when calling getActionRecipe.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/action-recipes/" + encodeURIComponent(String(_recipeId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ActionRecipesHttpService.prototype.getActionRecipeUrl = function (requestParameters) {
            var _recipeId = requestParameters["recipeId"];
            if (_recipeId === null || _recipeId === undefined) {
                throw new Error('Required parameter recipeId was null or undefined when calling getActionRecipe.');
            }
            return this.configuration.basePath + "/client-api/v2/action-recipes/" + encodeURIComponent(String(_recipeId));
        };
        ActionRecipesHttpService.prototype.getActionRecipes = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _specificationId = requestParameters["specificationId"];
            var _active = requestParameters["active"];
            var _offset = requestParameters["offset"];
            var _limit = requestParameters["limit"];
            var _orderBy = requestParameters["orderBy"];
            var _direction = requestParameters["direction"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_specificationId !== undefined && _specificationId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _specificationId, 'specificationId');
            }
            if (_active !== undefined && _active !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _active, 'active');
            }
            if (_offset !== undefined && _offset !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
            }
            if (_limit !== undefined && _limit !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
            }
            if (_orderBy !== undefined && _orderBy !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
            }
            if (_direction !== undefined && _direction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/action-recipes", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ActionRecipesHttpService.prototype.getActionRecipesUrl = function (requestParameters) {
            var _specificationId = requestParameters["specificationId"];
            var _active = requestParameters["active"];
            var _offset = requestParameters["offset"];
            var _limit = requestParameters["limit"];
            var _orderBy = requestParameters["orderBy"];
            var _direction = requestParameters["direction"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_specificationId !== undefined && _specificationId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _specificationId, 'specificationId');
            }
            if (_active !== undefined && _active !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _active, 'active');
            }
            if (_offset !== undefined && _offset !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
            }
            if (_limit !== undefined && _limit !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
            }
            if (_orderBy !== undefined && _orderBy !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
            }
            if (_direction !== undefined && _direction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/action-recipes" + (queryString ? "?" + queryString : '');
        };
        ActionRecipesHttpService.prototype.getActionsHistory = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _offset = requestParameters["offset"];
            var _limit = requestParameters["limit"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_offset !== undefined && _offset !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
            }
            if (_limit !== undefined && _limit !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/action-recipes/history", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ActionRecipesHttpService.prototype.getActionsHistoryUrl = function (requestParameters) {
            var _offset = requestParameters["offset"];
            var _limit = requestParameters["limit"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_offset !== undefined && _offset !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
            }
            if (_limit !== undefined && _limit !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/action-recipes/history" + (queryString ? "?" + queryString : '');
        };
        ActionRecipesHttpService.prototype.getActionsHistoryByUser = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _userId = requestParameters["userId"];
            if (_userId === null || _userId === undefined) {
                throw new Error('Required parameter userId was null or undefined when calling getActionsHistoryByUser.');
            }
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            var _offset = requestParameters["offset"];
            var _limit = requestParameters["limit"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
            }
            if (_offset !== undefined && _offset !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
            }
            if (_limit !== undefined && _limit !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/action-recipes/history/" + encodeURIComponent(String(_userId)), {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ActionRecipesHttpService.prototype.getActionsHistoryByUserUrl = function (requestParameters) {
            var _userId = requestParameters["userId"];
            if (_userId === null || _userId === undefined) {
                throw new Error('Required parameter userId was null or undefined when calling getActionsHistoryByUser.');
            }
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            var _offset = requestParameters["offset"];
            var _limit = requestParameters["limit"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
            }
            if (_offset !== undefined && _offset !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
            }
            if (_limit !== undefined && _limit !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/action-recipes/history/" + encodeURIComponent(String(_userId)) + (queryString ? "?" + queryString : '');
        };
        ActionRecipesHttpService.prototype.getPaymentStatuses = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/action-recipes/payment-statuses", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ActionRecipesHttpService.prototype.getPaymentStatusesUrl = function () {
            return this.configuration.basePath + "/client-api/v2/action-recipes/payment-statuses";
        };
        ActionRecipesHttpService.prototype.getPaymentTypes = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/action-recipes/payment-types", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ActionRecipesHttpService.prototype.getPaymentTypesUrl = function () {
            return this.configuration.basePath + "/client-api/v2/action-recipes/payment-types";
        };
        ActionRecipesHttpService.prototype.postActionRecipes = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _actionRecipesPostRequestBody = requestParameters["actionRecipesPostRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/action-recipes", _actionRecipesPostRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ActionRecipesHttpService.prototype.postActionRecipesUrl = function (requestParameters) {
            var _actionRecipesPostRequestBody = requestParameters["actionRecipesPostRequestBody"];
            return this.configuration.basePath + "/client-api/v2/action-recipes";
        };
        ActionRecipesHttpService.prototype.postActivationRequest = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _recipeId = requestParameters["recipeId"];
            if (_recipeId === null || _recipeId === undefined) {
                throw new Error('Required parameter recipeId was null or undefined when calling postActivationRequest.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/action-recipes/" + encodeURIComponent(String(_recipeId)) + "/activation-request", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ActionRecipesHttpService.prototype.postActivationRequestUrl = function (requestParameters) {
            var _recipeId = requestParameters["recipeId"];
            if (_recipeId === null || _recipeId === undefined) {
                throw new Error('Required parameter recipeId was null or undefined when calling postActivationRequest.');
            }
            return this.configuration.basePath + "/client-api/v2/action-recipes/" + encodeURIComponent(String(_recipeId)) + "/activation-request";
        };
        ActionRecipesHttpService.prototype.postDeactivationRequest = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _recipeId = requestParameters["recipeId"];
            if (_recipeId === null || _recipeId === undefined) {
                throw new Error('Required parameter recipeId was null or undefined when calling postDeactivationRequest.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/action-recipes/" + encodeURIComponent(String(_recipeId)) + "/deactivation-request", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ActionRecipesHttpService.prototype.postDeactivationRequestUrl = function (requestParameters) {
            var _recipeId = requestParameters["recipeId"];
            if (_recipeId === null || _recipeId === undefined) {
                throw new Error('Required parameter recipeId was null or undefined when calling postDeactivationRequest.');
            }
            return this.configuration.basePath + "/client-api/v2/action-recipes/" + encodeURIComponent(String(_recipeId)) + "/deactivation-request";
        };
        ActionRecipesHttpService.prototype.putActionRecipe = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _recipeId = requestParameters["recipeId"];
            if (_recipeId === null || _recipeId === undefined) {
                throw new Error('Required parameter recipeId was null or undefined when calling putActionRecipe.');
            }
            var _actionRecipePutRequestBody = requestParameters["actionRecipePutRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/action-recipes/" + encodeURIComponent(String(_recipeId)), _actionRecipePutRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ActionRecipesHttpService.prototype.putActionRecipeUrl = function (requestParameters) {
            var _recipeId = requestParameters["recipeId"];
            if (_recipeId === null || _recipeId === undefined) {
                throw new Error('Required parameter recipeId was null or undefined when calling putActionRecipe.');
            }
            var _actionRecipePutRequestBody = requestParameters["actionRecipePutRequestBody"];
            return this.configuration.basePath + "/client-api/v2/action-recipes/" + encodeURIComponent(String(_recipeId));
        };
        ActionRecipesHttpService.prototype.putBatchProcessing = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchProcessingPutRequestBody = requestParameters["batchProcessingPutRequestBody"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/action-recipes/batch", _batchProcessingPutRequestBody, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ActionRecipesHttpService.prototype.putBatchProcessingUrl = function (requestParameters) {
            var _batchProcessingPutRequestBody = requestParameters["batchProcessingPutRequestBody"];
            return this.configuration.basePath + "/client-api/v2/action-recipes/batch";
        };
        return ActionRecipesHttpService;
    }());
    ActionRecipesHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ActionRecipesHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: ACTIONS_BASE_PATH, optional: true }, { token: ActionsConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ActionRecipesHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ActionRecipesHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ActionRecipesHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ACTIONS_BASE_PATH]
                        }] }, { type: ActionsConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var ActionRecipesHttpServiceDeleteActionRecipeMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/action-recipes/{recipeId}",
            method: "DELETE",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ActionRecipesHttpServiceGetActionRecipeMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/action-recipes/{recipeId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "1",
                        "name": "Transaction > 100 EUR",
                        "active": true,
                        "specificationId": "1",
                        "userId": "kjordan",
                        "actions": [{
                                "type": "notification",
                                "enabled": true
                            }, {
                                "type": "email",
                                "enabled": false
                            }, {
                                "type": "sms",
                                "enabled": false
                            }, {
                                "type": "push",
                                "enabled": true
                            }],
                        "amount": "100",
                        "arrangementId": "123"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ActionRecipesHttpServiceGetActionRecipesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/action-recipes",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "totalCount": 20,
                        "actionRecipes": [{
                                "id": "1",
                                "name": "Transaction > 100 EUR",
                                "active": true,
                                "specificationId": "1",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "100",
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4691",
                                "createdOn": "2020-01-17T12:52:34.000+0000"
                            }, {
                                "id": "2",
                                "name": "Account Low Balance < 1000 EUR",
                                "active": true,
                                "specificationId": "4",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "300",
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4691",
                                "createdOn": "2020-01-17T12:52:34.000+0000"
                            }, {
                                "id": "3",
                                "name": "Transaction > 300 EUR",
                                "active": true,
                                "specificationId": "1",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "300",
                                "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                                "createdOn": "2020-01-17T12:52:34.000+0000"
                            }, {
                                "id": "4",
                                "name": "Account Low Balance < 1000 EUR",
                                "active": true,
                                "specificationId": "4",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "300",
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4692",
                                "createdOn": "2020-01-17T12:52:34.000+0000"
                            }, {
                                "id": "5",
                                "name": "Transaction > 100 EUR",
                                "active": true,
                                "specificationId": "1",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "100",
                                "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                                "createdOn": "2020-01-17T12:52:34.000+0000"
                            }, {
                                "id": "6",
                                "name": "Rounding rule",
                                "active": false,
                                "specificationId": "3",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "payment",
                                        "enabled": true
                                    }],
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4691",
                                "createdOn": "2020-01-17T12:52:34.000+0000",
                                "additions": {
                                    "targetArrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699"
                                }
                            }, {
                                "id": "7",
                                "name": "Account Low Balance < 1000 EUR",
                                "active": true,
                                "specificationId": "4",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "300",
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4692",
                                "createdOn": "2020-01-17T12:52:34.000+0000"
                            }, {
                                "id": "8",
                                "name": "Transaction > 100 EUR",
                                "active": true,
                                "specificationId": "1",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "100",
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-01-17T12:52:34.000+0000"
                            }, {
                                "id": "9",
                                "name": "Account Low Balance < 1000 EUR",
                                "active": true,
                                "specificationId": "4",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "300",
                                "arrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-01-17T12:52:34.000+0000"
                            }, {
                                "id": "10",
                                "name": "Transaction > 100 EUR",
                                "active": true,
                                "specificationId": "1",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "100",
                                "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-01-17T12:52:34.000+0000"
                            }, {
                                "id": "11",
                                "name": "Account Low Balance < 1000 EUR",
                                "active": true,
                                "specificationId": "4",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "300",
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-01-16T12:52:34.000+0000"
                            }, {
                                "id": "12",
                                "name": "Transaction > 100 EUR",
                                "active": true,
                                "specificationId": "1",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "100",
                                "arrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-01-16T12:52:34.000+0000"
                            }, {
                                "id": "13",
                                "name": "Account Low Balance < 1000 EUR",
                                "active": true,
                                "specificationId": "4",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "300",
                                "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-01-16T12:52:34.000+0000"
                            }, {
                                "id": "14",
                                "name": "Transaction > 100 EUR",
                                "active": true,
                                "specificationId": "1",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "100",
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-01-16T12:52:34.000+0000"
                            }, {
                                "id": "15",
                                "name": "Account Low Balance < 1000 EUR",
                                "active": true,
                                "specificationId": "4",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "300",
                                "arrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-01-16T12:52:34.000+0000"
                            }, {
                                "id": "16",
                                "name": "Rounding rule Example",
                                "active": true,
                                "specificationId": "3",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "payment",
                                        "enabled": true
                                    }],
                                "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                                "createdOn": "2020-01-16T12:52:34.000+0000",
                                "additions": {
                                    "targetArrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699"
                                }
                            }, {
                                "id": "17",
                                "name": "Payment Status Rejected",
                                "active": false,
                                "specificationId": "5",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "createdOn": "2020-01-16T12:52:34.000+0000",
                                "additions": {
                                    "paymentStatuses": "rejected"
                                }
                            }, {
                                "id": "18",
                                "name": "Payment Status Rejected",
                                "active": true,
                                "specificationId": "5",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "createdOn": "2020-01-16T12:52:34.000+0000",
                                "additions": {
                                    "paymentStatuses": "rejected"
                                }
                            }, {
                                "id": "19",
                                "name": "Contact Status Rejected",
                                "active": false,
                                "specificationId": "6",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "createdOn": "2020-01-16T12:52:34.000+0000",
                                "additions": {
                                    "partyStatuses": "rejected"
                                }
                            }, {
                                "id": "20",
                                "name": "Contact Status Rejected",
                                "active": true,
                                "specificationId": "6",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "createdOn": "2020-01-16T12:52:34.000+0000",
                                "additions": {
                                    "partyStatuses": "rejected"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ActionRecipesHttpServiceGetActionsHistoryMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/action-recipes/history",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "actionEventsHistory": [{
                                "alertName": "Low balance alert",
                                "deliveryMethod": "sms",
                                "alertDate": "2019-12-16T19:35:05.000+0000",
                                "alertText": "Warning! Your account balance is below 20 EUR.",
                                "destinations": ["+380987654321", "+380123456789"]
                            }, {
                                "alertName": "Low balance alert",
                                "deliveryMethod": "email",
                                "alertDate": "2019-12-16T19:25:05.000+0000",
                                "alertText": "Warning! Your account balance is below 20 EUR.",
                                "destinations": ["user@domain.com", "resu@domain.com"]
                            }, {
                                "alertName": "Low balance alert",
                                "deliveryMethod": "notification",
                                "alertDate": "2019-12-16T19:15:05.000+0000",
                                "alertText": "Warning! Your account balance is below 20 EUR.",
                                "destinations": ["User id - 'userId'"]
                            }, {
                                "alertName": "Party status updated alert",
                                "deliveryMethod": "notification",
                                "alertDate": "2019-12-16T19:10:05.000+0000",
                                "alertText": "Your contact 'Sarah' is active. You can find this in 'My Requests'",
                                "destinations": ["User id - 'Sarah', Service agreement id - '2b5b4bff-4135-4d18-b3fc-eb86d647dccd'"]
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ActionRecipesHttpServiceGetActionsHistoryByUserMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/action-recipes/history/{userId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "actionEventsHistory": [{
                                "alertName": "Low balance alert",
                                "deliveryMethod": "sms",
                                "alertDate": "2019-12-16T19:35:05.000+0000",
                                "alertText": "Warning! Your account balance is below 20 EUR.",
                                "destinations": ["+380987654321", "+380123456789"]
                            }, {
                                "alertName": "Low balance alert",
                                "deliveryMethod": "email",
                                "alertDate": "2019-12-16T19:25:05.000+0000",
                                "alertText": "Warning! Your account balance is below 20 EUR.",
                                "destinations": ["user@domain.com", "resu@domain.com"]
                            }, {
                                "alertName": "Low balance alert",
                                "deliveryMethod": "notification",
                                "alertDate": "2019-12-16T19:15:05.000+0000",
                                "alertText": "Warning! Your account balance is below 20 EUR.",
                                "destinations": ["User id - 'userId'"]
                            }, {
                                "alertName": "Party status updated alert",
                                "deliveryMethod": "notification",
                                "alertDate": "2019-12-16T19:10:05.000+0000",
                                "alertText": "Your contact 'Sarah' is active. You can find this in 'My Requests'",
                                "destinations": ["User id - 'Sarah', Service agreement id - '2b5b4bff-4135-4d18-b3fc-eb86d647dccd'"]
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ActionRecipesHttpServiceGetPaymentStatusesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/action-recipes/payment-statuses",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "paymentStatuses": ["DRAFT", "ENTERED", "READY", "ACCEPTED", "PROCESSED", "REJECTED", "CANCELLED"]
                    }
                },
            ]
        }]);
    var ActionRecipesHttpServiceGetPaymentTypesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/action-recipes/payment-types",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "paymentTypes": ["SEPA CT", "US Domestic Wire", "US Foreign Wire"]
                    }
                },
            ]
        }]);
    var ActionRecipesHttpServicePostActionRecipesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/action-recipes",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {
                        "id": "e92bbe7d-10cf-4d7c-b7b5-eadb7632812a"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ActionRecipesHttpServicePostActivationRequestMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/action-recipes/{recipeId}/activation-request",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ActionRecipesHttpServicePostDeactivationRequestMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/action-recipes/{recipeId}/deactivation-request",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ActionRecipesHttpServicePutActionRecipeMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/action-recipes/{recipeId}",
            method: "PUT",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ActionRecipesHttpServicePutBatchProcessingMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/action-recipes/batch",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "actionRecipes": [{
                                "id": "1",
                                "name": "TransactionExecuted for User",
                                "active": true,
                                "specificationId": "1",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }],
                                "amount": "100",
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-03-18T11:36:02.000+0000",
                                "recurrence": {
                                    "daysOfWeek": ["MON", "FRI"],
                                    "hoursOfDay": ["9", "17"],
                                    "quartzExpression": "0 0 9,17 ? * MON,FRI *"
                                }
                            }, {
                                "id": "2",
                                "name": "Account Low Balance < 1000 EUR",
                                "active": true,
                                "specificationId": "4",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": false
                                    }, {
                                        "type": "email",
                                        "enabled": true
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }],
                                "amount": "300",
                                "arrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-03-18T11:36:02.000+0000"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ActionRecipesHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/action-recipes/{recipeId}",
            method: "DELETE",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/action-recipes/{recipeId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "1",
                        "name": "Transaction > 100 EUR",
                        "active": true,
                        "specificationId": "1",
                        "userId": "kjordan",
                        "actions": [{
                                "type": "notification",
                                "enabled": true
                            }, {
                                "type": "email",
                                "enabled": false
                            }, {
                                "type": "sms",
                                "enabled": false
                            }, {
                                "type": "push",
                                "enabled": true
                            }],
                        "amount": "100",
                        "arrangementId": "123"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/action-recipes",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "totalCount": 20,
                        "actionRecipes": [{
                                "id": "1",
                                "name": "Transaction > 100 EUR",
                                "active": true,
                                "specificationId": "1",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "100",
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4691",
                                "createdOn": "2020-01-17T12:52:34.000+0000"
                            }, {
                                "id": "2",
                                "name": "Account Low Balance < 1000 EUR",
                                "active": true,
                                "specificationId": "4",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "300",
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4691",
                                "createdOn": "2020-01-17T12:52:34.000+0000"
                            }, {
                                "id": "3",
                                "name": "Transaction > 300 EUR",
                                "active": true,
                                "specificationId": "1",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "300",
                                "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                                "createdOn": "2020-01-17T12:52:34.000+0000"
                            }, {
                                "id": "4",
                                "name": "Account Low Balance < 1000 EUR",
                                "active": true,
                                "specificationId": "4",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "300",
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4692",
                                "createdOn": "2020-01-17T12:52:34.000+0000"
                            }, {
                                "id": "5",
                                "name": "Transaction > 100 EUR",
                                "active": true,
                                "specificationId": "1",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "100",
                                "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                                "createdOn": "2020-01-17T12:52:34.000+0000"
                            }, {
                                "id": "6",
                                "name": "Rounding rule",
                                "active": false,
                                "specificationId": "3",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "payment",
                                        "enabled": true
                                    }],
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4691",
                                "createdOn": "2020-01-17T12:52:34.000+0000",
                                "additions": {
                                    "targetArrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699"
                                }
                            }, {
                                "id": "7",
                                "name": "Account Low Balance < 1000 EUR",
                                "active": true,
                                "specificationId": "4",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "300",
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4692",
                                "createdOn": "2020-01-17T12:52:34.000+0000"
                            }, {
                                "id": "8",
                                "name": "Transaction > 100 EUR",
                                "active": true,
                                "specificationId": "1",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "100",
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-01-17T12:52:34.000+0000"
                            }, {
                                "id": "9",
                                "name": "Account Low Balance < 1000 EUR",
                                "active": true,
                                "specificationId": "4",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "300",
                                "arrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-01-17T12:52:34.000+0000"
                            }, {
                                "id": "10",
                                "name": "Transaction > 100 EUR",
                                "active": true,
                                "specificationId": "1",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "100",
                                "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-01-17T12:52:34.000+0000"
                            }, {
                                "id": "11",
                                "name": "Account Low Balance < 1000 EUR",
                                "active": true,
                                "specificationId": "4",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "300",
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-01-16T12:52:34.000+0000"
                            }, {
                                "id": "12",
                                "name": "Transaction > 100 EUR",
                                "active": true,
                                "specificationId": "1",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "100",
                                "arrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-01-16T12:52:34.000+0000"
                            }, {
                                "id": "13",
                                "name": "Account Low Balance < 1000 EUR",
                                "active": true,
                                "specificationId": "4",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "300",
                                "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-01-16T12:52:34.000+0000"
                            }, {
                                "id": "14",
                                "name": "Transaction > 100 EUR",
                                "active": true,
                                "specificationId": "1",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "100",
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-01-16T12:52:34.000+0000"
                            }, {
                                "id": "15",
                                "name": "Account Low Balance < 1000 EUR",
                                "active": true,
                                "specificationId": "4",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "amount": "300",
                                "arrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-01-16T12:52:34.000+0000"
                            }, {
                                "id": "16",
                                "name": "Rounding rule Example",
                                "active": true,
                                "specificationId": "3",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "payment",
                                        "enabled": true
                                    }],
                                "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                                "createdOn": "2020-01-16T12:52:34.000+0000",
                                "additions": {
                                    "targetArrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699"
                                }
                            }, {
                                "id": "17",
                                "name": "Payment Status Rejected",
                                "active": false,
                                "specificationId": "5",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "createdOn": "2020-01-16T12:52:34.000+0000",
                                "additions": {
                                    "paymentStatuses": "rejected"
                                }
                            }, {
                                "id": "18",
                                "name": "Payment Status Rejected",
                                "active": true,
                                "specificationId": "5",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "createdOn": "2020-01-16T12:52:34.000+0000",
                                "additions": {
                                    "paymentStatuses": "rejected"
                                }
                            }, {
                                "id": "19",
                                "name": "Contact Status Rejected",
                                "active": false,
                                "specificationId": "6",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": false
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "createdOn": "2020-01-16T12:52:34.000+0000",
                                "additions": {
                                    "partyStatuses": "rejected"
                                }
                            }, {
                                "id": "20",
                                "name": "Contact Status Rejected",
                                "active": true,
                                "specificationId": "6",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "push",
                                        "enabled": true
                                    }],
                                "createdOn": "2020-01-16T12:52:34.000+0000",
                                "additions": {
                                    "partyStatuses": "rejected"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/action-recipes/history",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "actionEventsHistory": [{
                                "alertName": "Low balance alert",
                                "deliveryMethod": "sms",
                                "alertDate": "2019-12-16T19:35:05.000+0000",
                                "alertText": "Warning! Your account balance is below 20 EUR.",
                                "destinations": ["+380987654321", "+380123456789"]
                            }, {
                                "alertName": "Low balance alert",
                                "deliveryMethod": "email",
                                "alertDate": "2019-12-16T19:25:05.000+0000",
                                "alertText": "Warning! Your account balance is below 20 EUR.",
                                "destinations": ["user@domain.com", "resu@domain.com"]
                            }, {
                                "alertName": "Low balance alert",
                                "deliveryMethod": "notification",
                                "alertDate": "2019-12-16T19:15:05.000+0000",
                                "alertText": "Warning! Your account balance is below 20 EUR.",
                                "destinations": ["User id - 'userId'"]
                            }, {
                                "alertName": "Party status updated alert",
                                "deliveryMethod": "notification",
                                "alertDate": "2019-12-16T19:10:05.000+0000",
                                "alertText": "Your contact 'Sarah' is active. You can find this in 'My Requests'",
                                "destinations": ["User id - 'Sarah', Service agreement id - '2b5b4bff-4135-4d18-b3fc-eb86d647dccd'"]
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/action-recipes/history/{userId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "actionEventsHistory": [{
                                "alertName": "Low balance alert",
                                "deliveryMethod": "sms",
                                "alertDate": "2019-12-16T19:35:05.000+0000",
                                "alertText": "Warning! Your account balance is below 20 EUR.",
                                "destinations": ["+380987654321", "+380123456789"]
                            }, {
                                "alertName": "Low balance alert",
                                "deliveryMethod": "email",
                                "alertDate": "2019-12-16T19:25:05.000+0000",
                                "alertText": "Warning! Your account balance is below 20 EUR.",
                                "destinations": ["user@domain.com", "resu@domain.com"]
                            }, {
                                "alertName": "Low balance alert",
                                "deliveryMethod": "notification",
                                "alertDate": "2019-12-16T19:15:05.000+0000",
                                "alertText": "Warning! Your account balance is below 20 EUR.",
                                "destinations": ["User id - 'userId'"]
                            }, {
                                "alertName": "Party status updated alert",
                                "deliveryMethod": "notification",
                                "alertDate": "2019-12-16T19:10:05.000+0000",
                                "alertText": "Your contact 'Sarah' is active. You can find this in 'My Requests'",
                                "destinations": ["User id - 'Sarah', Service agreement id - '2b5b4bff-4135-4d18-b3fc-eb86d647dccd'"]
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/action-recipes/payment-statuses",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "paymentStatuses": ["DRAFT", "ENTERED", "READY", "ACCEPTED", "PROCESSED", "REJECTED", "CANCELLED"]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/action-recipes/payment-types",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "paymentTypes": ["SEPA CT", "US Domestic Wire", "US Foreign Wire"]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/action-recipes",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {
                        "id": "e92bbe7d-10cf-4d7c-b7b5-eadb7632812a"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/action-recipes/{recipeId}/activation-request",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/action-recipes/{recipeId}/deactivation-request",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/action-recipes/{recipeId}",
            method: "PUT",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/action-recipes/batch",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "actionRecipes": [{
                                "id": "1",
                                "name": "TransactionExecuted for User",
                                "active": true,
                                "specificationId": "1",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": true
                                    }, {
                                        "type": "email",
                                        "enabled": false
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }],
                                "amount": "100",
                                "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-03-18T11:36:02.000+0000",
                                "recurrence": {
                                    "daysOfWeek": ["MON", "FRI"],
                                    "hoursOfDay": ["9", "17"],
                                    "quartzExpression": "0 0 9,17 ? * MON,FRI *"
                                }
                            }, {
                                "id": "2",
                                "name": "Account Low Balance < 1000 EUR",
                                "active": true,
                                "specificationId": "4",
                                "userId": "kjordan",
                                "actions": [{
                                        "type": "notification",
                                        "enabled": false
                                    }, {
                                        "type": "email",
                                        "enabled": true
                                    }, {
                                        "type": "sms",
                                        "enabled": false
                                    }],
                                "amount": "300",
                                "arrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                                "createdOn": "2020-03-18T11:36:02.000+0000"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    exports.ACTIONS_BASE_PATH = ACTIONS_BASE_PATH;
    exports.ActionRecipeSpecificationsHttpService = ActionRecipeSpecificationsHttpService;
    exports.ActionRecipeSpecificationsHttpServiceGetActionRecipeSpecificationsMocksProvider = ActionRecipeSpecificationsHttpServiceGetActionRecipeSpecificationsMocksProvider;
    exports.ActionRecipeSpecificationsHttpServiceMocksProvider = ActionRecipeSpecificationsHttpServiceMocksProvider;
    exports.ActionRecipesHttpService = ActionRecipesHttpService;
    exports.ActionRecipesHttpServiceDeleteActionRecipeMocksProvider = ActionRecipesHttpServiceDeleteActionRecipeMocksProvider;
    exports.ActionRecipesHttpServiceGetActionRecipeMocksProvider = ActionRecipesHttpServiceGetActionRecipeMocksProvider;
    exports.ActionRecipesHttpServiceGetActionRecipesMocksProvider = ActionRecipesHttpServiceGetActionRecipesMocksProvider;
    exports.ActionRecipesHttpServiceGetActionsHistoryByUserMocksProvider = ActionRecipesHttpServiceGetActionsHistoryByUserMocksProvider;
    exports.ActionRecipesHttpServiceGetActionsHistoryMocksProvider = ActionRecipesHttpServiceGetActionsHistoryMocksProvider;
    exports.ActionRecipesHttpServiceGetPaymentStatusesMocksProvider = ActionRecipesHttpServiceGetPaymentStatusesMocksProvider;
    exports.ActionRecipesHttpServiceGetPaymentTypesMocksProvider = ActionRecipesHttpServiceGetPaymentTypesMocksProvider;
    exports.ActionRecipesHttpServiceMocksProvider = ActionRecipesHttpServiceMocksProvider;
    exports.ActionRecipesHttpServicePostActionRecipesMocksProvider = ActionRecipesHttpServicePostActionRecipesMocksProvider;
    exports.ActionRecipesHttpServicePostActivationRequestMocksProvider = ActionRecipesHttpServicePostActivationRequestMocksProvider;
    exports.ActionRecipesHttpServicePostDeactivationRequestMocksProvider = ActionRecipesHttpServicePostDeactivationRequestMocksProvider;
    exports.ActionRecipesHttpServicePutActionRecipeMocksProvider = ActionRecipesHttpServicePutActionRecipeMocksProvider;
    exports.ActionRecipesHttpServicePutBatchProcessingMocksProvider = ActionRecipesHttpServicePutBatchProcessingMocksProvider;
    exports.ActionsApiModule = ActionsApiModule;
    exports.ActionsConfiguration = ActionsConfiguration;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.DaysOfWeek = DaysOfWeek;
    exports.HoursOfDay = HoursOfDay;
    exports.TemplateType = TemplateType;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-actions-http-ang.umd.js.map
