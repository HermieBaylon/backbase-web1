import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ActionRecipeGetResponseBody } from '../model/models';
import { ActionRecipePutRequestBody } from '../model/models';
import { ActionRecipesGetResponseBody } from '../model/models';
import { ActionRecipesPostRequestBody } from '../model/models';
import { ActionRecipesPostResponseBody } from '../model/models';
import { ActionsHistoryGetResponseBody } from '../model/models';
import { BatchProcessingPutRequestBody } from '../model/models';
import { BatchProcessingPutResponseBody } from '../model/models';
import { PaymentStatusesGetResponseBody } from '../model/models';
import { PaymentTypesGetResponseBody } from '../model/models';
import { ActionsConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteActionRecipeRequestParams {
    ["recipeId"]: string;
}
export interface GetActionRecipeRequestParams {
    ["recipeId"]: string;
}
export interface GetActionRecipesRequestParams {
    ["specificationId"]?: string;
    ["active"]?: boolean;
    ["offset"]?: number;
    ["limit"]?: number;
    ["orderBy"]?: string;
    ["direction"]?: 'ASC' | 'DESC';
}
export interface GetActionsHistoryRequestParams {
    ["offset"]?: number;
    ["limit"]?: number;
}
export interface GetActionsHistoryByUserRequestParams {
    ["userId"]: string;
    ["serviceAgreementId"]?: string;
    ["offset"]?: number;
    ["limit"]?: number;
}
export interface PostActionRecipesRequestParams {
    ["actionRecipesPostRequestBody"]?: ActionRecipesPostRequestBody;
}
export interface PostActivationRequestRequestParams {
    ["recipeId"]: string;
}
export interface PostDeactivationRequestRequestParams {
    ["recipeId"]: string;
}
export interface PutActionRecipeRequestParams {
    ["recipeId"]: string;
    ["actionRecipePutRequestBody"]?: ActionRecipePutRequestBody;
}
export interface PutBatchProcessingRequestParams {
    ["batchProcessingPutRequestBody"]?: BatchProcessingPutRequestBody;
}
export declare class ActionRecipesHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: ActionsConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: ActionsConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deleteActionRecipe(requestParameters: DeleteActionRecipeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteActionRecipe(requestParameters: DeleteActionRecipeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteActionRecipe(requestParameters: DeleteActionRecipeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteActionRecipeUrl(requestParameters: DeleteActionRecipeRequestParams): string;
    getActionRecipe(requestParameters: GetActionRecipeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ActionRecipeGetResponseBody>;
    getActionRecipe(requestParameters: GetActionRecipeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ActionRecipeGetResponseBody>>;
    getActionRecipe(requestParameters: GetActionRecipeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ActionRecipeGetResponseBody>>;
    getActionRecipeUrl(requestParameters: GetActionRecipeRequestParams): string;
    getActionRecipes(requestParameters: GetActionRecipesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ActionRecipesGetResponseBody>;
    getActionRecipes(requestParameters: GetActionRecipesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ActionRecipesGetResponseBody>>;
    getActionRecipes(requestParameters: GetActionRecipesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ActionRecipesGetResponseBody>>;
    getActionRecipesUrl(requestParameters: GetActionRecipesRequestParams): string;
    getActionsHistory(requestParameters: GetActionsHistoryRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ActionsHistoryGetResponseBody>;
    getActionsHistory(requestParameters: GetActionsHistoryRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ActionsHistoryGetResponseBody>>;
    getActionsHistory(requestParameters: GetActionsHistoryRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ActionsHistoryGetResponseBody>>;
    getActionsHistoryUrl(requestParameters: GetActionsHistoryRequestParams): string;
    getActionsHistoryByUser(requestParameters: GetActionsHistoryByUserRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ActionsHistoryGetResponseBody>;
    getActionsHistoryByUser(requestParameters: GetActionsHistoryByUserRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ActionsHistoryGetResponseBody>>;
    getActionsHistoryByUser(requestParameters: GetActionsHistoryByUserRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ActionsHistoryGetResponseBody>>;
    getActionsHistoryByUserUrl(requestParameters: GetActionsHistoryByUserRequestParams): string;
    getPaymentStatuses(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PaymentStatusesGetResponseBody>;
    getPaymentStatuses(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PaymentStatusesGetResponseBody>>;
    getPaymentStatuses(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PaymentStatusesGetResponseBody>>;
    getPaymentStatusesUrl(): string;
    getPaymentTypes(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PaymentTypesGetResponseBody>;
    getPaymentTypes(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PaymentTypesGetResponseBody>>;
    getPaymentTypes(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PaymentTypesGetResponseBody>>;
    getPaymentTypesUrl(): string;
    postActionRecipes(requestParameters: PostActionRecipesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ActionRecipesPostResponseBody>;
    postActionRecipes(requestParameters: PostActionRecipesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ActionRecipesPostResponseBody>>;
    postActionRecipes(requestParameters: PostActionRecipesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ActionRecipesPostResponseBody>>;
    postActionRecipesUrl(requestParameters: PostActionRecipesRequestParams): string;
    postActivationRequest(requestParameters: PostActivationRequestRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    postActivationRequest(requestParameters: PostActivationRequestRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    postActivationRequest(requestParameters: PostActivationRequestRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    postActivationRequestUrl(requestParameters: PostActivationRequestRequestParams): string;
    postDeactivationRequest(requestParameters: PostDeactivationRequestRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    postDeactivationRequest(requestParameters: PostDeactivationRequestRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    postDeactivationRequest(requestParameters: PostDeactivationRequestRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    postDeactivationRequestUrl(requestParameters: PostDeactivationRequestRequestParams): string;
    putActionRecipe(requestParameters: PutActionRecipeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    putActionRecipe(requestParameters: PutActionRecipeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    putActionRecipe(requestParameters: PutActionRecipeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    putActionRecipeUrl(requestParameters: PutActionRecipeRequestParams): string;
    putBatchProcessing(requestParameters: PutBatchProcessingRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchProcessingPutResponseBody>;
    putBatchProcessing(requestParameters: PutBatchProcessingRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchProcessingPutResponseBody>>;
    putBatchProcessing(requestParameters: PutBatchProcessingRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchProcessingPutResponseBody>>;
    putBatchProcessingUrl(requestParameters: PutBatchProcessingRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<ActionRecipesHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ActionRecipesHttpService>;
}
