import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { ACTIONS_BASE_PATH } from '../variables';
import { ActionsConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class ActionRecipesHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ActionsConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteActionRecipe(requestParameters, observe = 'body', reportProgress = false, options) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling deleteActionRecipe.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteActionRecipeUrl(requestParameters) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling deleteActionRecipe.');
        }
        return `${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}`;
    }
    getActionRecipe(requestParameters, observe = 'body', reportProgress = false, options) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling getActionRecipe.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getActionRecipeUrl(requestParameters) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling getActionRecipe.');
        }
        return `${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}`;
    }
    getActionRecipes(requestParameters, observe = 'body', reportProgress = false, options) {
        const _specificationId = requestParameters["specificationId"];
        const _active = requestParameters["active"];
        const _offset = requestParameters["offset"];
        const _limit = requestParameters["limit"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_specificationId !== undefined && _specificationId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _specificationId, 'specificationId');
        }
        if (_active !== undefined && _active !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _active, 'active');
        }
        if (_offset !== undefined && _offset !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
        }
        if (_limit !== undefined && _limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/action-recipes`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getActionRecipesUrl(requestParameters) {
        const _specificationId = requestParameters["specificationId"];
        const _active = requestParameters["active"];
        const _offset = requestParameters["offset"];
        const _limit = requestParameters["limit"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_specificationId !== undefined && _specificationId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _specificationId, 'specificationId');
        }
        if (_active !== undefined && _active !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _active, 'active');
        }
        if (_offset !== undefined && _offset !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
        }
        if (_limit !== undefined && _limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/action-recipes${queryString ? `?${queryString}` : ''}`;
    }
    getActionsHistory(requestParameters, observe = 'body', reportProgress = false, options) {
        const _offset = requestParameters["offset"];
        const _limit = requestParameters["limit"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_offset !== undefined && _offset !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
        }
        if (_limit !== undefined && _limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/action-recipes/history`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getActionsHistoryUrl(requestParameters) {
        const _offset = requestParameters["offset"];
        const _limit = requestParameters["limit"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_offset !== undefined && _offset !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
        }
        if (_limit !== undefined && _limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/action-recipes/history${queryString ? `?${queryString}` : ''}`;
    }
    getActionsHistoryByUser(requestParameters, observe = 'body', reportProgress = false, options) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getActionsHistoryByUser.');
        }
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        const _offset = requestParameters["offset"];
        const _limit = requestParameters["limit"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        if (_offset !== undefined && _offset !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
        }
        if (_limit !== undefined && _limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/action-recipes/history/${encodeURIComponent(String(_userId))}`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getActionsHistoryByUserUrl(requestParameters) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getActionsHistoryByUser.');
        }
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        const _offset = requestParameters["offset"];
        const _limit = requestParameters["limit"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        if (_offset !== undefined && _offset !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
        }
        if (_limit !== undefined && _limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/action-recipes/history/${encodeURIComponent(String(_userId))}${queryString ? `?${queryString}` : ''}`;
    }
    getPaymentStatuses(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/action-recipes/payment-statuses`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPaymentStatusesUrl() {
        return `${this.configuration.basePath}/client-api/v2/action-recipes/payment-statuses`;
    }
    getPaymentTypes(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/action-recipes/payment-types`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPaymentTypesUrl() {
        return `${this.configuration.basePath}/client-api/v2/action-recipes/payment-types`;
    }
    postActionRecipes(requestParameters, observe = 'body', reportProgress = false, options) {
        const _actionRecipesPostRequestBody = requestParameters["actionRecipesPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/action-recipes`, _actionRecipesPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postActionRecipesUrl(requestParameters) {
        const _actionRecipesPostRequestBody = requestParameters["actionRecipesPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/action-recipes`;
    }
    postActivationRequest(requestParameters, observe = 'body', reportProgress = false, options) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling postActivationRequest.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}/activation-request`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postActivationRequestUrl(requestParameters) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling postActivationRequest.');
        }
        return `${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}/activation-request`;
    }
    postDeactivationRequest(requestParameters, observe = 'body', reportProgress = false, options) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling postDeactivationRequest.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}/deactivation-request`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postDeactivationRequestUrl(requestParameters) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling postDeactivationRequest.');
        }
        return `${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}/deactivation-request`;
    }
    putActionRecipe(requestParameters, observe = 'body', reportProgress = false, options) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling putActionRecipe.');
        }
        const _actionRecipePutRequestBody = requestParameters["actionRecipePutRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}`, _actionRecipePutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putActionRecipeUrl(requestParameters) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling putActionRecipe.');
        }
        const _actionRecipePutRequestBody = requestParameters["actionRecipePutRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}`;
    }
    putBatchProcessing(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchProcessingPutRequestBody = requestParameters["batchProcessingPutRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/action-recipes/batch`, _batchProcessingPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putBatchProcessingUrl(requestParameters) {
        const _batchProcessingPutRequestBody = requestParameters["batchProcessingPutRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/action-recipes/batch`;
    }
}
ActionRecipesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ActionRecipesHttpService, deps: [{ token: i1.HttpClient }, { token: ACTIONS_BASE_PATH, optional: true }, { token: i2.ActionsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ActionRecipesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ActionRecipesHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ActionRecipesHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ACTIONS_BASE_PATH]
                }] }, { type: i2.ActionsConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,