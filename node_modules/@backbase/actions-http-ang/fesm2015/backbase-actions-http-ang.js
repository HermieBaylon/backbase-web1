import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const DaysOfWeek = {
    MON: 'MON',
    TUE: 'TUE',
    WED: 'WED',
    THU: 'THU',
    FRI: 'FRI',
    SAT: 'SAT',
    SUN: 'SUN'
};

const HoursOfDay = {
    _0: '0',
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    _10: '10',
    _11: '11',
    _12: '12',
    _13: '13',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _19: '19',
    _20: '20',
    _21: '21',
    _22: '22',
    _23: '23'
};

const TemplateType = {
    REGULAR: 'REGULAR',
    DIGEST: 'DIGEST'
};

const ACTIONS_BASE_PATH = new InjectionToken('ACTIONS_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class ActionsConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module ActionsConfiguration');

class ActionsApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('ActionsApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: ActionsApiModule,
            providers: [{ provide: ActionsConfiguration, useFactory: configurationFactory }]
        };
    }
}
ActionsApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ActionsApiModule, deps: [{ token: ActionsApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: ActionsConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
ActionsApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ActionsApiModule });
ActionsApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ActionsApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ActionsApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: ActionsApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: ActionsConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class ActionRecipeSpecificationsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ActionsConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getActionRecipeSpecifications(requestParameters, observe = 'body', reportProgress = false, options) {
        const _offset = requestParameters["offset"];
        const _limit = requestParameters["limit"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_offset !== undefined && _offset !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
        }
        if (_limit !== undefined && _limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/action-recipe-specifications`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getActionRecipeSpecificationsUrl(requestParameters) {
        const _offset = requestParameters["offset"];
        const _limit = requestParameters["limit"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_offset !== undefined && _offset !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
        }
        if (_limit !== undefined && _limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/action-recipe-specifications${queryString ? `?${queryString}` : ''}`;
    }
}
ActionRecipeSpecificationsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ActionRecipeSpecificationsHttpService, deps: [{ token: i1.HttpClient }, { token: ACTIONS_BASE_PATH, optional: true }, { token: ActionsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ActionRecipeSpecificationsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ActionRecipeSpecificationsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ActionRecipeSpecificationsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ACTIONS_BASE_PATH]
                }] }, { type: ActionsConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const ActionRecipeSpecificationsHttpServiceGetActionRecipeSpecificationsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/action-recipe-specifications",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "actionRecipeSpecifications": [{
                            "id": "1",
                            "name": "New Transaction",
                            "userDefinable": true,
                            "origin": "Transaction",
                            "type": "newTransaction",
                            "category": "arrangementBased",
                            "actions": [{
                                    "type": "notification",
                                    "severityLevel": "INFO",
                                    "route": {
                                        "whereTo": "transaction-view",
                                        "dataTemplate": "{\"id\": \"${transactions[0].id}\", \"arrangementId\": \"${transactions[0].arrangementId}\"}"
                                    },
                                    "templates": [{
                                            "locale": "en-US",
                                            "kind": "REGULAR",
                                            "path": "/pathto/template",
                                            "repository": "repository_id"
                                        }, {
                                            "locale": "en-US",
                                            "kind": "DIGEST",
                                            "path": "/pathto/template",
                                            "repository": "repository_id"
                                        }]
                                }, {
                                    "type": "email",
                                    "templates": [{
                                            "locale": "en-US",
                                            "kind": "REGULAR",
                                            "path": "/pathto/template",
                                            "repository": "repository_id"
                                        }, {
                                            "locale": "en-US",
                                            "kind": "DIGEST",
                                            "path": "/pathto/template",
                                            "repository": "repository_id"
                                        }]
                                }, {
                                    "type": "sms",
                                    "templates": [{
                                            "locale": "en-US",
                                            "kind": "REGULAR",
                                            "path": "/pathto/template",
                                            "repository": "repository_id"
                                        }, {
                                            "locale": "en-US",
                                            "kind": "DIGEST",
                                            "path": "/pathto/template",
                                            "repository": "repository_id"
                                        }]
                                }, {
                                    "type": "push",
                                    "severityLevel": "INFO",
                                    "route": {
                                        "whereTo": "transaction-view",
                                        "dataTemplate": "{\"id\": \"${transactions[0].id}\", \"arrangementId\": \"${transactions[0].arrangementId}\"}"
                                    },
                                    "templates": [{
                                            "locale": "en-US",
                                            "kind": "REGULAR",
                                            "path": "/pathto/template",
                                            "repository": "repository_id"
                                        }, {
                                            "locale": "en-US",
                                            "kind": "DIGEST",
                                            "path": "/pathto/template",
                                            "repository": "repository_id"
                                        }]
                                }],
                            "digestEnabled": true,
                            "recipeDefaults": {
                                "amount": "0",
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }]
                            }
                        }, {
                            "id": "4",
                            "name": "Account Low Balance",
                            "userDefinable": true,
                            "type": "accountLowBalance",
                            "category": "arrangementBased",
                            "actions": [{
                                    "type": "notification"
                                }, {
                                    "type": "email"
                                }, {
                                    "type": "sms"
                                }, {
                                    "type": "push"
                                }],
                            "digestEnabled": false,
                            "recipeDefaults": {
                                "amount": "200",
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }],
                                "additions": {
                                    "type": "Cash Withdraw"
                                }
                            }
                        }, {
                            "id": "5",
                            "name": "Payment Status Updated",
                            "userDefinable": true,
                            "type": "paymentStatusUpdated",
                            "category": "paymentStatusBased",
                            "actions": [{
                                    "type": "notification"
                                }, {
                                    "type": "push"
                                }],
                            "digestEnabled": true,
                            "recipeDefaults": {
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }]
                            }
                        }, {
                            "id": "6",
                            "name": "Party Status Updated",
                            "userDefinable": true,
                            "type": "partyStatusUpdated",
                            "category": "partyStatusBased",
                            "actions": [{
                                    "type": "notification"
                                }, {
                                    "type": "push"
                                }],
                            "digestEnabled": false,
                            "recipeDefaults": {
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }]
                            }
                        }, {
                            "id": "8",
                            "name": "Saving goal",
                            "type": "savingGoal",
                            "category": "userBased",
                            "userDefinable": true,
                            "actions": [{
                                    "type": "notification"
                                }, {
                                    "type": "push"
                                }],
                            "digestEnabled": false
                        }, {
                            "id": "9",
                            "name": "Account statement is ready",
                            "type": "accountStatementIsReady",
                            "category": "arrangementBased",
                            "userDefinable": true,
                            "actions": [{
                                    "type": "email"
                                }, {
                                    "type": "notification"
                                }, {
                                    "type": "push"
                                }],
                            "digestEnabled": false
                        }, {
                            "id": "10",
                            "name": "Account Low Balance Business",
                            "type": "accountLowBalance",
                            "category": "arrangementBased",
                            "userDefinable": true,
                            "actions": [{
                                    "type": "notification"
                                }, {
                                    "type": "push"
                                }],
                            "digestEnabled": false,
                            "recipeDefaults": {
                                "amount": "0",
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }]
                            }
                        }, {
                            "id": "13",
                            "name": "Payment to approve",
                            "type": "paymentToApprove",
                            "category": "paymentResourceBased",
                            "digestEnabled": false,
                            "recipeDefaults": {
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }],
                                "additions": {
                                    "resource": "Payments"
                                }
                            }
                        }, {
                            "id": "14",
                            "name": "Contact to approve",
                            "type": "contactToApprove",
                            "category": "contactResourceBased",
                            "digestEnabled": false,
                            "recipeDefaults": {
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }],
                                "additions": {
                                    "resource": "Contacts"
                                }
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    }]);
const ActionRecipeSpecificationsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/action-recipe-specifications",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "actionRecipeSpecifications": [{
                            "id": "1",
                            "name": "New Transaction",
                            "userDefinable": true,
                            "origin": "Transaction",
                            "type": "newTransaction",
                            "category": "arrangementBased",
                            "actions": [{
                                    "type": "notification",
                                    "severityLevel": "INFO",
                                    "route": {
                                        "whereTo": "transaction-view",
                                        "dataTemplate": "{\"id\": \"${transactions[0].id}\", \"arrangementId\": \"${transactions[0].arrangementId}\"}"
                                    },
                                    "templates": [{
                                            "locale": "en-US",
                                            "kind": "REGULAR",
                                            "path": "/pathto/template",
                                            "repository": "repository_id"
                                        }, {
                                            "locale": "en-US",
                                            "kind": "DIGEST",
                                            "path": "/pathto/template",
                                            "repository": "repository_id"
                                        }]
                                }, {
                                    "type": "email",
                                    "templates": [{
                                            "locale": "en-US",
                                            "kind": "REGULAR",
                                            "path": "/pathto/template",
                                            "repository": "repository_id"
                                        }, {
                                            "locale": "en-US",
                                            "kind": "DIGEST",
                                            "path": "/pathto/template",
                                            "repository": "repository_id"
                                        }]
                                }, {
                                    "type": "sms",
                                    "templates": [{
                                            "locale": "en-US",
                                            "kind": "REGULAR",
                                            "path": "/pathto/template",
                                            "repository": "repository_id"
                                        }, {
                                            "locale": "en-US",
                                            "kind": "DIGEST",
                                            "path": "/pathto/template",
                                            "repository": "repository_id"
                                        }]
                                }, {
                                    "type": "push",
                                    "severityLevel": "INFO",
                                    "route": {
                                        "whereTo": "transaction-view",
                                        "dataTemplate": "{\"id\": \"${transactions[0].id}\", \"arrangementId\": \"${transactions[0].arrangementId}\"}"
                                    },
                                    "templates": [{
                                            "locale": "en-US",
                                            "kind": "REGULAR",
                                            "path": "/pathto/template",
                                            "repository": "repository_id"
                                        }, {
                                            "locale": "en-US",
                                            "kind": "DIGEST",
                                            "path": "/pathto/template",
                                            "repository": "repository_id"
                                        }]
                                }],
                            "digestEnabled": true,
                            "recipeDefaults": {
                                "amount": "0",
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }]
                            }
                        }, {
                            "id": "4",
                            "name": "Account Low Balance",
                            "userDefinable": true,
                            "type": "accountLowBalance",
                            "category": "arrangementBased",
                            "actions": [{
                                    "type": "notification"
                                }, {
                                    "type": "email"
                                }, {
                                    "type": "sms"
                                }, {
                                    "type": "push"
                                }],
                            "digestEnabled": false,
                            "recipeDefaults": {
                                "amount": "200",
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }],
                                "additions": {
                                    "type": "Cash Withdraw"
                                }
                            }
                        }, {
                            "id": "5",
                            "name": "Payment Status Updated",
                            "userDefinable": true,
                            "type": "paymentStatusUpdated",
                            "category": "paymentStatusBased",
                            "actions": [{
                                    "type": "notification"
                                }, {
                                    "type": "push"
                                }],
                            "digestEnabled": true,
                            "recipeDefaults": {
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }]
                            }
                        }, {
                            "id": "6",
                            "name": "Party Status Updated",
                            "userDefinable": true,
                            "type": "partyStatusUpdated",
                            "category": "partyStatusBased",
                            "actions": [{
                                    "type": "notification"
                                }, {
                                    "type": "push"
                                }],
                            "digestEnabled": false,
                            "recipeDefaults": {
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }]
                            }
                        }, {
                            "id": "8",
                            "name": "Saving goal",
                            "type": "savingGoal",
                            "category": "userBased",
                            "userDefinable": true,
                            "actions": [{
                                    "type": "notification"
                                }, {
                                    "type": "push"
                                }],
                            "digestEnabled": false
                        }, {
                            "id": "9",
                            "name": "Account statement is ready",
                            "type": "accountStatementIsReady",
                            "category": "arrangementBased",
                            "userDefinable": true,
                            "actions": [{
                                    "type": "email"
                                }, {
                                    "type": "notification"
                                }, {
                                    "type": "push"
                                }],
                            "digestEnabled": false
                        }, {
                            "id": "10",
                            "name": "Account Low Balance Business",
                            "type": "accountLowBalance",
                            "category": "arrangementBased",
                            "userDefinable": true,
                            "actions": [{
                                    "type": "notification"
                                }, {
                                    "type": "push"
                                }],
                            "digestEnabled": false,
                            "recipeDefaults": {
                                "amount": "0",
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }]
                            }
                        }, {
                            "id": "13",
                            "name": "Payment to approve",
                            "type": "paymentToApprove",
                            "category": "paymentResourceBased",
                            "digestEnabled": false,
                            "recipeDefaults": {
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }],
                                "additions": {
                                    "resource": "Payments"
                                }
                            }
                        }, {
                            "id": "14",
                            "name": "Contact to approve",
                            "type": "contactToApprove",
                            "category": "contactResourceBased",
                            "digestEnabled": false,
                            "recipeDefaults": {
                                "actions": [{
                                        "type": "notification"
                                    }, {
                                        "type": "push"
                                    }],
                                "additions": {
                                    "resource": "Contacts"
                                }
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
        ]
    },
]);

class ActionRecipesHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ActionsConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteActionRecipe(requestParameters, observe = 'body', reportProgress = false, options) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling deleteActionRecipe.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteActionRecipeUrl(requestParameters) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling deleteActionRecipe.');
        }
        return `${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}`;
    }
    getActionRecipe(requestParameters, observe = 'body', reportProgress = false, options) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling getActionRecipe.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getActionRecipeUrl(requestParameters) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling getActionRecipe.');
        }
        return `${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}`;
    }
    getActionRecipes(requestParameters, observe = 'body', reportProgress = false, options) {
        const _specificationId = requestParameters["specificationId"];
        const _active = requestParameters["active"];
        const _offset = requestParameters["offset"];
        const _limit = requestParameters["limit"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_specificationId !== undefined && _specificationId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _specificationId, 'specificationId');
        }
        if (_active !== undefined && _active !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _active, 'active');
        }
        if (_offset !== undefined && _offset !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
        }
        if (_limit !== undefined && _limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/action-recipes`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getActionRecipesUrl(requestParameters) {
        const _specificationId = requestParameters["specificationId"];
        const _active = requestParameters["active"];
        const _offset = requestParameters["offset"];
        const _limit = requestParameters["limit"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_specificationId !== undefined && _specificationId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _specificationId, 'specificationId');
        }
        if (_active !== undefined && _active !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _active, 'active');
        }
        if (_offset !== undefined && _offset !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
        }
        if (_limit !== undefined && _limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/action-recipes${queryString ? `?${queryString}` : ''}`;
    }
    getActionsHistory(requestParameters, observe = 'body', reportProgress = false, options) {
        const _offset = requestParameters["offset"];
        const _limit = requestParameters["limit"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_offset !== undefined && _offset !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
        }
        if (_limit !== undefined && _limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/action-recipes/history`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getActionsHistoryUrl(requestParameters) {
        const _offset = requestParameters["offset"];
        const _limit = requestParameters["limit"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_offset !== undefined && _offset !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
        }
        if (_limit !== undefined && _limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/action-recipes/history${queryString ? `?${queryString}` : ''}`;
    }
    getActionsHistoryByUser(requestParameters, observe = 'body', reportProgress = false, options) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getActionsHistoryByUser.');
        }
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        const _offset = requestParameters["offset"];
        const _limit = requestParameters["limit"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        if (_offset !== undefined && _offset !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
        }
        if (_limit !== undefined && _limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/action-recipes/history/${encodeURIComponent(String(_userId))}`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getActionsHistoryByUserUrl(requestParameters) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getActionsHistoryByUser.');
        }
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        const _offset = requestParameters["offset"];
        const _limit = requestParameters["limit"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        if (_offset !== undefined && _offset !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _offset, 'offset');
        }
        if (_limit !== undefined && _limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _limit, 'limit');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/action-recipes/history/${encodeURIComponent(String(_userId))}${queryString ? `?${queryString}` : ''}`;
    }
    getPaymentStatuses(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/action-recipes/payment-statuses`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPaymentStatusesUrl() {
        return `${this.configuration.basePath}/client-api/v2/action-recipes/payment-statuses`;
    }
    getPaymentTypes(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/action-recipes/payment-types`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPaymentTypesUrl() {
        return `${this.configuration.basePath}/client-api/v2/action-recipes/payment-types`;
    }
    postActionRecipes(requestParameters, observe = 'body', reportProgress = false, options) {
        const _actionRecipesPostRequestBody = requestParameters["actionRecipesPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/action-recipes`, _actionRecipesPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postActionRecipesUrl(requestParameters) {
        const _actionRecipesPostRequestBody = requestParameters["actionRecipesPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/action-recipes`;
    }
    postActivationRequest(requestParameters, observe = 'body', reportProgress = false, options) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling postActivationRequest.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}/activation-request`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postActivationRequestUrl(requestParameters) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling postActivationRequest.');
        }
        return `${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}/activation-request`;
    }
    postDeactivationRequest(requestParameters, observe = 'body', reportProgress = false, options) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling postDeactivationRequest.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}/deactivation-request`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postDeactivationRequestUrl(requestParameters) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling postDeactivationRequest.');
        }
        return `${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}/deactivation-request`;
    }
    putActionRecipe(requestParameters, observe = 'body', reportProgress = false, options) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling putActionRecipe.');
        }
        const _actionRecipePutRequestBody = requestParameters["actionRecipePutRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}`, _actionRecipePutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putActionRecipeUrl(requestParameters) {
        const _recipeId = requestParameters["recipeId"];
        if (_recipeId === null || _recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling putActionRecipe.');
        }
        const _actionRecipePutRequestBody = requestParameters["actionRecipePutRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/action-recipes/${encodeURIComponent(String(_recipeId))}`;
    }
    putBatchProcessing(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchProcessingPutRequestBody = requestParameters["batchProcessingPutRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/action-recipes/batch`, _batchProcessingPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putBatchProcessingUrl(requestParameters) {
        const _batchProcessingPutRequestBody = requestParameters["batchProcessingPutRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/action-recipes/batch`;
    }
}
ActionRecipesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ActionRecipesHttpService, deps: [{ token: i1.HttpClient }, { token: ACTIONS_BASE_PATH, optional: true }, { token: ActionsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ActionRecipesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ActionRecipesHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ActionRecipesHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ACTIONS_BASE_PATH]
                }] }, { type: ActionsConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const ActionRecipesHttpServiceDeleteActionRecipeMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/action-recipes/{recipeId}",
        method: "DELETE",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const ActionRecipesHttpServiceGetActionRecipeMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/action-recipes/{recipeId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "1",
                    "name": "Transaction > 100 EUR",
                    "active": true,
                    "specificationId": "1",
                    "userId": "kjordan",
                    "actions": [{
                            "type": "notification",
                            "enabled": true
                        }, {
                            "type": "email",
                            "enabled": false
                        }, {
                            "type": "sms",
                            "enabled": false
                        }, {
                            "type": "push",
                            "enabled": true
                        }],
                    "amount": "100",
                    "arrangementId": "123"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const ActionRecipesHttpServiceGetActionRecipesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/action-recipes",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "totalCount": 20,
                    "actionRecipes": [{
                            "id": "1",
                            "name": "Transaction > 100 EUR",
                            "active": true,
                            "specificationId": "1",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "100",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4691",
                            "createdOn": "2020-01-17T12:52:34.000+0000"
                        }, {
                            "id": "2",
                            "name": "Account Low Balance < 1000 EUR",
                            "active": true,
                            "specificationId": "4",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "300",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4691",
                            "createdOn": "2020-01-17T12:52:34.000+0000"
                        }, {
                            "id": "3",
                            "name": "Transaction > 300 EUR",
                            "active": true,
                            "specificationId": "1",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "300",
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                            "createdOn": "2020-01-17T12:52:34.000+0000"
                        }, {
                            "id": "4",
                            "name": "Account Low Balance < 1000 EUR",
                            "active": true,
                            "specificationId": "4",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "300",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4692",
                            "createdOn": "2020-01-17T12:52:34.000+0000"
                        }, {
                            "id": "5",
                            "name": "Transaction > 100 EUR",
                            "active": true,
                            "specificationId": "1",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "100",
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                            "createdOn": "2020-01-17T12:52:34.000+0000"
                        }, {
                            "id": "6",
                            "name": "Rounding rule",
                            "active": false,
                            "specificationId": "3",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "payment",
                                    "enabled": true
                                }],
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4691",
                            "createdOn": "2020-01-17T12:52:34.000+0000",
                            "additions": {
                                "targetArrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699"
                            }
                        }, {
                            "id": "7",
                            "name": "Account Low Balance < 1000 EUR",
                            "active": true,
                            "specificationId": "4",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "300",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4692",
                            "createdOn": "2020-01-17T12:52:34.000+0000"
                        }, {
                            "id": "8",
                            "name": "Transaction > 100 EUR",
                            "active": true,
                            "specificationId": "1",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "100",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-01-17T12:52:34.000+0000"
                        }, {
                            "id": "9",
                            "name": "Account Low Balance < 1000 EUR",
                            "active": true,
                            "specificationId": "4",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "300",
                            "arrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-01-17T12:52:34.000+0000"
                        }, {
                            "id": "10",
                            "name": "Transaction > 100 EUR",
                            "active": true,
                            "specificationId": "1",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "100",
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-01-17T12:52:34.000+0000"
                        }, {
                            "id": "11",
                            "name": "Account Low Balance < 1000 EUR",
                            "active": true,
                            "specificationId": "4",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "300",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-01-16T12:52:34.000+0000"
                        }, {
                            "id": "12",
                            "name": "Transaction > 100 EUR",
                            "active": true,
                            "specificationId": "1",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "100",
                            "arrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-01-16T12:52:34.000+0000"
                        }, {
                            "id": "13",
                            "name": "Account Low Balance < 1000 EUR",
                            "active": true,
                            "specificationId": "4",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "300",
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-01-16T12:52:34.000+0000"
                        }, {
                            "id": "14",
                            "name": "Transaction > 100 EUR",
                            "active": true,
                            "specificationId": "1",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "100",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-01-16T12:52:34.000+0000"
                        }, {
                            "id": "15",
                            "name": "Account Low Balance < 1000 EUR",
                            "active": true,
                            "specificationId": "4",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "300",
                            "arrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-01-16T12:52:34.000+0000"
                        }, {
                            "id": "16",
                            "name": "Rounding rule Example",
                            "active": true,
                            "specificationId": "3",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "payment",
                                    "enabled": true
                                }],
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                            "createdOn": "2020-01-16T12:52:34.000+0000",
                            "additions": {
                                "targetArrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699"
                            }
                        }, {
                            "id": "17",
                            "name": "Payment Status Rejected",
                            "active": false,
                            "specificationId": "5",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "createdOn": "2020-01-16T12:52:34.000+0000",
                            "additions": {
                                "paymentStatuses": "rejected"
                            }
                        }, {
                            "id": "18",
                            "name": "Payment Status Rejected",
                            "active": true,
                            "specificationId": "5",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "createdOn": "2020-01-16T12:52:34.000+0000",
                            "additions": {
                                "paymentStatuses": "rejected"
                            }
                        }, {
                            "id": "19",
                            "name": "Contact Status Rejected",
                            "active": false,
                            "specificationId": "6",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "createdOn": "2020-01-16T12:52:34.000+0000",
                            "additions": {
                                "partyStatuses": "rejected"
                            }
                        }, {
                            "id": "20",
                            "name": "Contact Status Rejected",
                            "active": true,
                            "specificationId": "6",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "createdOn": "2020-01-16T12:52:34.000+0000",
                            "additions": {
                                "partyStatuses": "rejected"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const ActionRecipesHttpServiceGetActionsHistoryMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/action-recipes/history",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "actionEventsHistory": [{
                            "alertName": "Low balance alert",
                            "deliveryMethod": "sms",
                            "alertDate": "2019-12-16T19:35:05.000+0000",
                            "alertText": "Warning! Your account balance is below 20 EUR.",
                            "destinations": ["+380987654321", "+380123456789"]
                        }, {
                            "alertName": "Low balance alert",
                            "deliveryMethod": "email",
                            "alertDate": "2019-12-16T19:25:05.000+0000",
                            "alertText": "Warning! Your account balance is below 20 EUR.",
                            "destinations": ["user@domain.com", "resu@domain.com"]
                        }, {
                            "alertName": "Low balance alert",
                            "deliveryMethod": "notification",
                            "alertDate": "2019-12-16T19:15:05.000+0000",
                            "alertText": "Warning! Your account balance is below 20 EUR.",
                            "destinations": ["User id - 'userId'"]
                        }, {
                            "alertName": "Party status updated alert",
                            "deliveryMethod": "notification",
                            "alertDate": "2019-12-16T19:10:05.000+0000",
                            "alertText": "Your contact 'Sarah' is active. You can find this in 'My Requests'",
                            "destinations": ["User id - 'Sarah', Service agreement id - '2b5b4bff-4135-4d18-b3fc-eb86d647dccd'"]
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const ActionRecipesHttpServiceGetActionsHistoryByUserMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/action-recipes/history/{userId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "actionEventsHistory": [{
                            "alertName": "Low balance alert",
                            "deliveryMethod": "sms",
                            "alertDate": "2019-12-16T19:35:05.000+0000",
                            "alertText": "Warning! Your account balance is below 20 EUR.",
                            "destinations": ["+380987654321", "+380123456789"]
                        }, {
                            "alertName": "Low balance alert",
                            "deliveryMethod": "email",
                            "alertDate": "2019-12-16T19:25:05.000+0000",
                            "alertText": "Warning! Your account balance is below 20 EUR.",
                            "destinations": ["user@domain.com", "resu@domain.com"]
                        }, {
                            "alertName": "Low balance alert",
                            "deliveryMethod": "notification",
                            "alertDate": "2019-12-16T19:15:05.000+0000",
                            "alertText": "Warning! Your account balance is below 20 EUR.",
                            "destinations": ["User id - 'userId'"]
                        }, {
                            "alertName": "Party status updated alert",
                            "deliveryMethod": "notification",
                            "alertDate": "2019-12-16T19:10:05.000+0000",
                            "alertText": "Your contact 'Sarah' is active. You can find this in 'My Requests'",
                            "destinations": ["User id - 'Sarah', Service agreement id - '2b5b4bff-4135-4d18-b3fc-eb86d647dccd'"]
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const ActionRecipesHttpServiceGetPaymentStatusesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/action-recipes/payment-statuses",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "paymentStatuses": ["DRAFT", "ENTERED", "READY", "ACCEPTED", "PROCESSED", "REJECTED", "CANCELLED"]
                }
            },
        ]
    }]);
const ActionRecipesHttpServiceGetPaymentTypesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/action-recipes/payment-types",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "paymentTypes": ["SEPA CT", "US Domestic Wire", "US Foreign Wire"]
                }
            },
        ]
    }]);
const ActionRecipesHttpServicePostActionRecipesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/action-recipes",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {
                    "id": "e92bbe7d-10cf-4d7c-b7b5-eadb7632812a"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const ActionRecipesHttpServicePostActivationRequestMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/action-recipes/{recipeId}/activation-request",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const ActionRecipesHttpServicePostDeactivationRequestMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/action-recipes/{recipeId}/deactivation-request",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const ActionRecipesHttpServicePutActionRecipeMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/action-recipes/{recipeId}",
        method: "PUT",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const ActionRecipesHttpServicePutBatchProcessingMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/action-recipes/batch",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "actionRecipes": [{
                            "id": "1",
                            "name": "TransactionExecuted for User",
                            "active": true,
                            "specificationId": "1",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }],
                            "amount": "100",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-03-18T11:36:02.000+0000",
                            "recurrence": {
                                "daysOfWeek": ["MON", "FRI"],
                                "hoursOfDay": ["9", "17"],
                                "quartzExpression": "0 0 9,17 ? * MON,FRI *"
                            }
                        }, {
                            "id": "2",
                            "name": "Account Low Balance < 1000 EUR",
                            "active": true,
                            "specificationId": "4",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": false
                                }, {
                                    "type": "email",
                                    "enabled": true
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }],
                            "amount": "300",
                            "arrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-03-18T11:36:02.000+0000"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const ActionRecipesHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/action-recipes/{recipeId}",
        method: "DELETE",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/action-recipes/{recipeId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "1",
                    "name": "Transaction > 100 EUR",
                    "active": true,
                    "specificationId": "1",
                    "userId": "kjordan",
                    "actions": [{
                            "type": "notification",
                            "enabled": true
                        }, {
                            "type": "email",
                            "enabled": false
                        }, {
                            "type": "sms",
                            "enabled": false
                        }, {
                            "type": "push",
                            "enabled": true
                        }],
                    "amount": "100",
                    "arrangementId": "123"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/action-recipes",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "totalCount": 20,
                    "actionRecipes": [{
                            "id": "1",
                            "name": "Transaction > 100 EUR",
                            "active": true,
                            "specificationId": "1",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "100",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4691",
                            "createdOn": "2020-01-17T12:52:34.000+0000"
                        }, {
                            "id": "2",
                            "name": "Account Low Balance < 1000 EUR",
                            "active": true,
                            "specificationId": "4",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "300",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4691",
                            "createdOn": "2020-01-17T12:52:34.000+0000"
                        }, {
                            "id": "3",
                            "name": "Transaction > 300 EUR",
                            "active": true,
                            "specificationId": "1",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "300",
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                            "createdOn": "2020-01-17T12:52:34.000+0000"
                        }, {
                            "id": "4",
                            "name": "Account Low Balance < 1000 EUR",
                            "active": true,
                            "specificationId": "4",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "300",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4692",
                            "createdOn": "2020-01-17T12:52:34.000+0000"
                        }, {
                            "id": "5",
                            "name": "Transaction > 100 EUR",
                            "active": true,
                            "specificationId": "1",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "100",
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                            "createdOn": "2020-01-17T12:52:34.000+0000"
                        }, {
                            "id": "6",
                            "name": "Rounding rule",
                            "active": false,
                            "specificationId": "3",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "payment",
                                    "enabled": true
                                }],
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4691",
                            "createdOn": "2020-01-17T12:52:34.000+0000",
                            "additions": {
                                "targetArrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699"
                            }
                        }, {
                            "id": "7",
                            "name": "Account Low Balance < 1000 EUR",
                            "active": true,
                            "specificationId": "4",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "300",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4692",
                            "createdOn": "2020-01-17T12:52:34.000+0000"
                        }, {
                            "id": "8",
                            "name": "Transaction > 100 EUR",
                            "active": true,
                            "specificationId": "1",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "100",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-01-17T12:52:34.000+0000"
                        }, {
                            "id": "9",
                            "name": "Account Low Balance < 1000 EUR",
                            "active": true,
                            "specificationId": "4",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "300",
                            "arrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-01-17T12:52:34.000+0000"
                        }, {
                            "id": "10",
                            "name": "Transaction > 100 EUR",
                            "active": true,
                            "specificationId": "1",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "100",
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-01-17T12:52:34.000+0000"
                        }, {
                            "id": "11",
                            "name": "Account Low Balance < 1000 EUR",
                            "active": true,
                            "specificationId": "4",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "300",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-01-16T12:52:34.000+0000"
                        }, {
                            "id": "12",
                            "name": "Transaction > 100 EUR",
                            "active": true,
                            "specificationId": "1",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "100",
                            "arrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-01-16T12:52:34.000+0000"
                        }, {
                            "id": "13",
                            "name": "Account Low Balance < 1000 EUR",
                            "active": true,
                            "specificationId": "4",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "300",
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-01-16T12:52:34.000+0000"
                        }, {
                            "id": "14",
                            "name": "Transaction > 100 EUR",
                            "active": true,
                            "specificationId": "1",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "100",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-01-16T12:52:34.000+0000"
                        }, {
                            "id": "15",
                            "name": "Account Low Balance < 1000 EUR",
                            "active": true,
                            "specificationId": "4",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "amount": "300",
                            "arrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-01-16T12:52:34.000+0000"
                        }, {
                            "id": "16",
                            "name": "Rounding rule Example",
                            "active": true,
                            "specificationId": "3",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "payment",
                                    "enabled": true
                                }],
                            "arrangementId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                            "createdOn": "2020-01-16T12:52:34.000+0000",
                            "additions": {
                                "targetArrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699"
                            }
                        }, {
                            "id": "17",
                            "name": "Payment Status Rejected",
                            "active": false,
                            "specificationId": "5",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "createdOn": "2020-01-16T12:52:34.000+0000",
                            "additions": {
                                "paymentStatuses": "rejected"
                            }
                        }, {
                            "id": "18",
                            "name": "Payment Status Rejected",
                            "active": true,
                            "specificationId": "5",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "createdOn": "2020-01-16T12:52:34.000+0000",
                            "additions": {
                                "paymentStatuses": "rejected"
                            }
                        }, {
                            "id": "19",
                            "name": "Contact Status Rejected",
                            "active": false,
                            "specificationId": "6",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": false
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "createdOn": "2020-01-16T12:52:34.000+0000",
                            "additions": {
                                "partyStatuses": "rejected"
                            }
                        }, {
                            "id": "20",
                            "name": "Contact Status Rejected",
                            "active": true,
                            "specificationId": "6",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "push",
                                    "enabled": true
                                }],
                            "createdOn": "2020-01-16T12:52:34.000+0000",
                            "additions": {
                                "partyStatuses": "rejected"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/action-recipes/history",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "actionEventsHistory": [{
                            "alertName": "Low balance alert",
                            "deliveryMethod": "sms",
                            "alertDate": "2019-12-16T19:35:05.000+0000",
                            "alertText": "Warning! Your account balance is below 20 EUR.",
                            "destinations": ["+380987654321", "+380123456789"]
                        }, {
                            "alertName": "Low balance alert",
                            "deliveryMethod": "email",
                            "alertDate": "2019-12-16T19:25:05.000+0000",
                            "alertText": "Warning! Your account balance is below 20 EUR.",
                            "destinations": ["user@domain.com", "resu@domain.com"]
                        }, {
                            "alertName": "Low balance alert",
                            "deliveryMethod": "notification",
                            "alertDate": "2019-12-16T19:15:05.000+0000",
                            "alertText": "Warning! Your account balance is below 20 EUR.",
                            "destinations": ["User id - 'userId'"]
                        }, {
                            "alertName": "Party status updated alert",
                            "deliveryMethod": "notification",
                            "alertDate": "2019-12-16T19:10:05.000+0000",
                            "alertText": "Your contact 'Sarah' is active. You can find this in 'My Requests'",
                            "destinations": ["User id - 'Sarah', Service agreement id - '2b5b4bff-4135-4d18-b3fc-eb86d647dccd'"]
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/action-recipes/history/{userId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "actionEventsHistory": [{
                            "alertName": "Low balance alert",
                            "deliveryMethod": "sms",
                            "alertDate": "2019-12-16T19:35:05.000+0000",
                            "alertText": "Warning! Your account balance is below 20 EUR.",
                            "destinations": ["+380987654321", "+380123456789"]
                        }, {
                            "alertName": "Low balance alert",
                            "deliveryMethod": "email",
                            "alertDate": "2019-12-16T19:25:05.000+0000",
                            "alertText": "Warning! Your account balance is below 20 EUR.",
                            "destinations": ["user@domain.com", "resu@domain.com"]
                        }, {
                            "alertName": "Low balance alert",
                            "deliveryMethod": "notification",
                            "alertDate": "2019-12-16T19:15:05.000+0000",
                            "alertText": "Warning! Your account balance is below 20 EUR.",
                            "destinations": ["User id - 'userId'"]
                        }, {
                            "alertName": "Party status updated alert",
                            "deliveryMethod": "notification",
                            "alertDate": "2019-12-16T19:10:05.000+0000",
                            "alertText": "Your contact 'Sarah' is active. You can find this in 'My Requests'",
                            "destinations": ["User id - 'Sarah', Service agreement id - '2b5b4bff-4135-4d18-b3fc-eb86d647dccd'"]
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/action-recipes/payment-statuses",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "paymentStatuses": ["DRAFT", "ENTERED", "READY", "ACCEPTED", "PROCESSED", "REJECTED", "CANCELLED"]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/action-recipes/payment-types",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "paymentTypes": ["SEPA CT", "US Domestic Wire", "US Foreign Wire"]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/action-recipes",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {
                    "id": "e92bbe7d-10cf-4d7c-b7b5-eadb7632812a"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/action-recipes/{recipeId}/activation-request",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/action-recipes/{recipeId}/deactivation-request",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/action-recipes/{recipeId}",
        method: "PUT",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/action-recipes/batch",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "actionRecipes": [{
                            "id": "1",
                            "name": "TransactionExecuted for User",
                            "active": true,
                            "specificationId": "1",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": true
                                }, {
                                    "type": "email",
                                    "enabled": false
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }],
                            "amount": "100",
                            "arrangementId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-03-18T11:36:02.000+0000",
                            "recurrence": {
                                "daysOfWeek": ["MON", "FRI"],
                                "hoursOfDay": ["9", "17"],
                                "quartzExpression": "0 0 9,17 ? * MON,FRI *"
                            }
                        }, {
                            "id": "2",
                            "name": "Account Low Balance < 1000 EUR",
                            "active": true,
                            "specificationId": "4",
                            "userId": "kjordan",
                            "actions": [{
                                    "type": "notification",
                                    "enabled": false
                                }, {
                                    "type": "email",
                                    "enabled": true
                                }, {
                                    "type": "sms",
                                    "enabled": false
                                }],
                            "amount": "300",
                            "arrangementId": "6cdb2224-8926-4b4d-a99f-1c9dfbbb4699",
                            "createdOn": "2020-03-18T11:36:02.000+0000"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);

export { ACTIONS_BASE_PATH, ActionRecipeSpecificationsHttpService, ActionRecipeSpecificationsHttpServiceGetActionRecipeSpecificationsMocksProvider, ActionRecipeSpecificationsHttpServiceMocksProvider, ActionRecipesHttpService, ActionRecipesHttpServiceDeleteActionRecipeMocksProvider, ActionRecipesHttpServiceGetActionRecipeMocksProvider, ActionRecipesHttpServiceGetActionRecipesMocksProvider, ActionRecipesHttpServiceGetActionsHistoryByUserMocksProvider, ActionRecipesHttpServiceGetActionsHistoryMocksProvider, ActionRecipesHttpServiceGetPaymentStatusesMocksProvider, ActionRecipesHttpServiceGetPaymentTypesMocksProvider, ActionRecipesHttpServiceMocksProvider, ActionRecipesHttpServicePostActionRecipesMocksProvider, ActionRecipesHttpServicePostActivationRequestMocksProvider, ActionRecipesHttpServicePostDeactivationRequestMocksProvider, ActionRecipesHttpServicePutActionRecipeMocksProvider, ActionRecipesHttpServicePutBatchProcessingMocksProvider, ActionsApiModule, ActionsConfiguration, COLLECTION_FORMATS, CONFIG_TOKEN, DaysOfWeek, HoursOfDay, TemplateType };
//# sourceMappingURL=backbase-actions-http-ang.js.map
