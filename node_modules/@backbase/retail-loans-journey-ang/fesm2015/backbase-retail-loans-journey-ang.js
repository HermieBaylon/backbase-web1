import * as i1$2 from '@angular/router';
import { provideRoutes, RouterModule } from '@angular/router';
import * as i3 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Optional, Inject, Directive, Component, ChangeDetectionStrategy, Input, EventEmitter, Output, NgModule } from '@angular/core';
import { CONDITIONS, EntitlementsModule } from '@backbase/foundation-ang/entitlements';
import * as i1$1 from '@backbase/loans-collection-ui-ang';
import { LoanDefaultViewType, LoanInfoItemType, LoanInfoDocumentsSectionComponent, LoanInfoTermItemComponent, LoanInfoCollateralSectionComponent, LoanInfoEscrowSectionComponent, LoanInfoComponent, getLoanAlias, LoanSummaryFormulaViewType, LoanPaymentInfoType, PaymentOptions, DestroyableComponent, LoanInfoPrintButtonModule, LoanItemNameModule, LoanInfoItemModule, LoansHeadingModule, LoansCollectionUiAngModule } from '@backbase/loans-collection-ui-ang';
import { AccountStatementBusinessWidgetModule } from '@backbase/account-statement-business-widget-ang';
import '@angular/localize/init';
import { PaginationType as PaginationType$1 } from '@backbase/account-statement-common-ang';
import { PaginationType } from '@backbase/transactions-common-ang';
import { map, pluck, filter, takeUntil, catchError, switchMap, tap, withLatestFrom } from 'rxjs/operators';
import * as i1 from '@ngrx/store';
import { createAction, props, createReducer, on, createFeatureSelector, createSelector, StoreModule } from '@ngrx/store';
import { InputInlineEditState } from '@backbase/ui-ang/input-inline-edit';
import * as i2 from '@backbase/ui-ang/header';
import * as i5 from '@backbase/product-summary-common-ang';
import { AccountAliasDisplayingLevel, ACCOUNT_ALIAS_DISPLAYING_LEVEL } from '@backbase/product-summary-common-ang';
import BigNumber from 'bignumber.js';
import * as i2$1 from '@backbase/remote-config-ang';
import * as i2$2 from '@backbase/transactions-list-widget-ang';
import { TransactionsListWidgetModule } from '@backbase/transactions-list-widget-ang';
import { combineLatest, of } from 'rxjs';
import * as i3$1 from '@backbase/ui-ang/media-query-lib';
import * as i7 from '@backbase/ui-ang/load-button';
import * as i8 from '@backbase/ui-ang/empty-state';
import * as i5$1 from '@backbase/ui-ang/modal';
import * as i1$3 from '@backbase/ui-ang/icon';
import * as i2$3 from '@backbase/ui-ang/button';
import * as i1$6 from '@ngrx/effects';
import { createEffect, ofType, EffectsModule } from '@ngrx/effects';
import * as i5$2 from '@backbase/ui-ang/notification';
import * as i1$4 from '@backbase/data-ang/arrangements';
import * as i1$5 from '@backbase/data-ang/loans';
import { setLoan } from '@backbase/loans-payment-config-ang';

/** Enum represents different possible loading states of ajax call */
var LoadingState;
(function (LoadingState) {
    LoadingState["Init"] = "Init";
    LoadingState["Loading"] = "Loading";
    LoadingState["Loaded"] = "Loaded";
})(LoadingState || (LoadingState = {}));

const loansConfigurationDefault = {
    transaction: {
        showCheckImages: true,
        showChangeCategory: true,
        showManageNotes: true,
        showControls: true,
        paginationType: PaginationType.PAGINATION,
        itemsPerPage: 10,
        maxNavPages: 3,
        enableDisputeAndInquiry: true,
        disputeEligibilityDays: 120,
        disputeTransactionTypes: 'Credit/Debit Card',
        disputeByBillingStatus: true,
        disputeTopicId: '',
        inquireTopicId: '',
    },
    accountStatement: {
        notificationDismissTime: 5,
        itemsPerPage: 10,
        paginationType: PaginationType$1.Pagination,
        sortingOrder: 'date',
        sortingDirection: 'DESC',
    },
    loanTypeMapping: {
        LineOfCredit: {
            viewType: LoanDefaultViewType.LineOfCredit,
            typeAlias: $localize `:Loan line of credit loan type alias@@loans.type.line-of-credit.alias:Line Of Credit`,
        },
        Mortgage: {
            viewType: LoanDefaultViewType.Mortgage,
            typeAlias: $localize `:Loan mortgage loan type alias@@loans.type.mortgage.alias:Mortgage Loan`,
        },
        TermLoan: {
            viewType: LoanDefaultViewType.TermLoan,
            typeAlias: $localize `:Loan term loan type alias@@loans.type.term.alias:Term Loan`,
        },
    },
    loansList: {
        itemsPerPage: 10,
        maxNavPages: 3,
    },
    paymentSchedule: {
        itemsPerPage: 10,
        maxNavPages: 3,
    },
};
const LoansJourneyConfigurationToken = new InjectionToken('LoansJourneyConfiguration injection token');
/**
 * @dynamic
 */
class LoansJourneyConfigurationService {
    constructor(config) {
        this.configuration = Object.assign(Object.assign({}, loansConfigurationDefault), config);
    }
    get transactionConfig() {
        return this.configuration.transaction;
    }
    get accountStatementConfig() {
        return this.configuration.accountStatement;
    }
    get loanTypeMapping() {
        return this.configuration.loanTypeMapping;
    }
    get loanList() {
        return this.configuration.loansList;
    }
    get paymentSchedule() {
        return this.configuration.paymentSchedule;
    }
}
/** @nocollapse */ LoansJourneyConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansJourneyConfigurationService, deps: [{ token: LoansJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ LoansJourneyConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansJourneyConfigurationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansJourneyConfigurationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LoansJourneyConfigurationToken]
                }] }]; } });

const titles = {
    sections: {
        general: $localize `:Loan info general section title@@loans.loan-info.section.general.title:General`,
        status: $localize `:Loan info status section title@@loans.loan-info.section.status.title:Status`,
        financialDetails: $localize `:Loan info financial details section title@@loans.loan-info.section.financial-details.title:Financial details`,
        documents: $localize `:Loan info documents section title@@loans.loan-info.section.documents.title:Documents`,
        collateral: $localize `:Loan info collateral section title@@loans.loan-info.section.collateral.title:Collateral`,
        escrow: $localize `:Loan info escrow section title@@loans.loan-info.section.escrow.title:Amount set aside for escrow`,
    },
    items: {
        name: $localize `:Loan info name item title@@loans.loan-info.item.name.title:Product name`,
        contractNumber: $localize `:Loan info contract number item title@@loans.loan-info.item.contract-number.title:Contract number`,
        branchCode: $localize `:Loan info branch code item title@@loans.loan-info.item.branch-code.title:Branch code`,
        currency: $localize `:Loan info branch currency item title@@loans.loan-info.item.currency.title:Currency`,
        defaultSettlementAccountName: $localize `:Loan info branch default settlement account name item title@@loans.loan-info.item.default-settlement-account-name.title:Default settlement account name`,
        defaultSettlementAccountNumber: $localize `:Loan info branch default settlement account number item title@@loans.loan-info.item.default-settlement-account-number.title:Default settlement account number`,
        startDate: $localize `:Loan info start date item title@@loans.loan-info.item.start-date.title:Start date`,
        maturityDate: $localize `:Loan info maturity date item title@@loans.loan-info.item.maturity-date.title:Maturity date`,
        type: $localize `:Loan info type item title@@loans.loan-info.item.type.title:Type`,
        accountNumber: $localize `:Loan info account number item title@@loans.loan-info.item.account-number.title:Account number`,
        borrowers: $localize `:Loan info borrowers item title@@loans.loan-info.item.borrowers.title:Borrower/s`,
        status: $localize `:Loan info status item title@@loans.loan-info.item.status.title:Loan status`,
        creditLimit: $localize `:Loan info credit limit item title@@loans.loan-info.item.credit-limit.title:Credit limit`,
        drawnAmount: $localize `:Loan info drawn amount item title@@loans.loan-info.item.drawn-amount.title:Drawn amount`,
        endDate: $localize `:Loan info end date item title@@loans.loan-info.item.end-date.title:End date`,
        availableBalance: $localize `:Loan info available balance item title@@loans.loan-info.item.available-balance.title:Available balance`,
        availableAmount: $localize `:Loan info available amount item title@@loans.loan-info.item.available-amount.title:Available amount`,
        outstandingAmount: $localize `:Loan info outstanding amount item title@@loans.loan-info.item.outstanding-amount.title:Outstanding amount`,
        paidAmount: $localize `:Loan info paid amount item title@@loans.loan-info.item.paid-amount.title:Paid amount`,
        owedAmount: $localize `:Loan info owed amount item title@@loans.loan-info.item.owed-amount.title:Owed amount`,
        feesDue: $localize `:Loan info fees due item title@@loans.loan-info.item.fees-due.title:Fees due`,
        interestDue: $localize `:Loan info interest due title@@loans.loan-info.interest-due.title:Interest due`,
        interestRate: $localize `:Loan info interest rate item title@@loans.loan-info.item.interest-rate.title:Interest rate`,
        overdueAmount: $localize `:Loan info overdue amount item title@@loans.loan-info.item.overdue-amount.title:Overdue amount`,
        accruedInterestAmount: $localize `:Loan info accrued interest amount item title@@loans.loan-info.item.accrued-interest-amount.title:Accrued interest amount`,
        originalPrincipal: $localize `:Loan info original principal title@@loans.loan-info.original-principal.title:Original principal`,
        remainingPrincipal: $localize `:Loan info remaining principal title@@loans.loan-info.remaining-principal.title:Remaining principal`,
        amountRepaid: $localize `:Loan info amount repaid title@@loans.loan-info.amount-repaid.title:Amount repaid`,
        totalOutstandingAmount: $localize `:Loan info total outstanding amount title@@loans.loan-info.total-outstanding-amount.title:Total outstanding amount`,
        principalPaymentFrequency: $localize `:Loan info principal payment frequency title@@loans.loan-info.principal-payment-frequency.title:Principal payment frequency`,
        interestPaymentFrequency: $localize `:Loan info interest payment frequency title@@loans.loan-info.interest-payment-frequency.title:Interest payment frequency`,
    },
};

const showAmountItem = (amountKey) => (loan) => Boolean(loan.currencyCode && loan[amountKey]);
const showCollaterals = (item) => { var _a; return Boolean((_a = item.collateral) === null || _a === void 0 ? void 0 : _a.some((collateralItem) => Object.values(collateralItem).some(Boolean))); };
const showBorrowers = (item) => { var _a; return Boolean((_a = item.borrower) === null || _a === void 0 ? void 0 : _a.length); };
const showDocuments = (item) => { var _a; return Boolean((_a = item.documents) === null || _a === void 0 ? void 0 : _a.some(({ documentId }) => documentId)); };
const showTerm = (item) => Boolean(item.termUnit && item.termCount);
const showDefaultSettlementAccountName = (item) => Boolean(item.defaultSettlementAccountName && item.defaultSettlementAccountNumber);
const showEscrowSection = (item) => Boolean(item.currencyCode && item.escrow && Object.values(item.escrow).some(Boolean));
const cssClasses = 'col-sm-6 col-12';
const generalSection = {
    title: titles.sections.general,
    items: [
        {
            cssClasses,
            title: titles.items.name,
            fieldKey: 'name',
            fieldType: LoanInfoItemType.String,
        },
        {
            cssClasses,
            title: titles.items.type,
            fieldKey: 'loanTypeAlias',
            fieldType: LoanInfoItemType.String,
        },
        {
            cssClasses,
            title: titles.items.contractNumber,
            fieldKey: 'contractNumber',
            fieldType: LoanInfoItemType.String,
        },
        {
            cssClasses,
            title: titles.items.accountNumber,
            fieldKey: 'accountNumber',
            fieldType: LoanInfoItemType.String,
        },
        {
            cssClasses,
            title: titles.items.branchCode,
            fieldKey: 'branchCode',
            fieldType: LoanInfoItemType.String,
        },
        {
            cssClasses,
            title: titles.items.currency,
            fieldKey: 'currencyCode',
            fieldType: LoanInfoItemType.String,
        },
        {
            cssClasses,
            title: titles.items.defaultSettlementAccountName,
            fieldKey: 'defaultSettlementAccountName',
            fieldType: LoanInfoItemType.String,
            showItem: showDefaultSettlementAccountName,
        },
        {
            cssClasses,
            title: titles.items.defaultSettlementAccountNumber,
            fieldKey: 'defaultSettlementAccountNumber',
            fieldType: LoanInfoItemType.String,
        },
        {
            cssClasses,
            title: titles.items.borrowers,
            fieldKey: 'borrower',
            fieldType: LoanInfoItemType.StringArray,
            showItem: showBorrowers,
        },
    ],
};
const statusSectionBaseItems = [
    {
        cssClasses,
        title: titles.items.status,
        fieldKey: 'loanStatus',
        fieldType: LoanInfoItemType.String,
    },
    {
        cssClasses,
        title: titles.items.startDate,
        fieldKey: 'startDate',
        fieldType: LoanInfoItemType.Date,
    },
];
const paymentInterestsSectionBaseItems = [
    {
        cssClasses,
        title: titles.items.feesDue,
        fieldKey: 'feesDue',
        fieldType: LoanInfoItemType.Amount,
        showItem: showAmountItem('feesDue'),
    },
    {
        cssClasses,
        title: titles.items.accruedInterestAmount,
        fieldKey: 'interestDue',
        fieldType: LoanInfoItemType.Amount,
        showItem: showAmountItem('interestDue'),
    },
    {
        cssClasses,
        title: titles.items.interestRate,
        fieldKey: 'interestRate',
        fieldType: LoanInfoItemType.Percent,
    },
    {
        cssClasses,
        title: titles.items.principalPaymentFrequency,
        fieldKey: 'paymentFrequency',
        fieldType: LoanInfoItemType.PaymentFrequency,
    },
    {
        cssClasses,
        title: titles.items.interestPaymentFrequency,
        fieldKey: 'interestPaymentFrequency',
        fieldType: LoanInfoItemType.PaymentFrequency,
    },
];
const outstandingAmountItem = {
    cssClasses,
    title: titles.items.outstandingAmount,
    fieldKey: 'outstandingAmount',
    fieldType: LoanInfoItemType.Amount,
    showItem: showAmountItem('outstandingAmount'),
};
const overdueAmountItem = {
    cssClasses,
    title: titles.items.overdueAmount,
    fieldKey: 'inArrearsAmount',
    fieldType: LoanInfoItemType.Amount,
    showItem: showAmountItem('inArrearsAmount'),
};
const documentsSection = {
    title: titles.sections.documents,
    items: [
        {
            cssClasses: 'col-sm-10 col-12',
            componentRef: LoanInfoDocumentsSectionComponent,
            showItem: showDocuments,
        },
    ],
};
const statusMortgageTermSection = {
    title: titles.sections.status,
    items: [
        ...statusSectionBaseItems,
        {
            cssClasses,
            title: titles.items.maturityDate,
            fieldKey: 'endDate',
            fieldType: LoanInfoItemType.Date,
        },
        {
            cssClasses: 'col-6',
            componentRef: LoanInfoTermItemComponent,
            showItem: showTerm,
        },
    ],
};
const financialDetailsMortgageTermSection = {
    title: titles.sections.financialDetails,
    items: [
        outstandingAmountItem,
        {
            cssClasses,
            title: titles.items.remainingPrincipal,
            fieldKey: 'drawnAmount',
            fieldType: LoanInfoItemType.Amount,
            showItem: showAmountItem('drawnAmount'),
        },
        {
            cssClasses,
            title: titles.items.amountRepaid,
            fieldKey: 'paidAmount',
            fieldType: LoanInfoItemType.Amount,
            showItem: showAmountItem('paidAmount'),
        },
        overdueAmountItem,
        {
            cssClasses,
            title: titles.items.originalPrincipal,
            fieldKey: 'creditLimit',
            fieldType: LoanInfoItemType.Amount,
            showItem: showAmountItem('creditLimit'),
        },
        ...paymentInterestsSectionBaseItems,
    ],
};
const colleteralSection = {
    title: titles.sections.collateral,
    items: [
        {
            cssClasses: 'col-12',
            componentRef: LoanInfoCollateralSectionComponent,
            showItem: showCollaterals,
        },
    ],
};
/**
 * Loan info config for LineOfCredit type
 */
const loanInfoLineOfCreditDataConfig = [
    generalSection,
    {
        title: titles.sections.status,
        items: [
            ...statusSectionBaseItems,
            {
                cssClasses,
                title: titles.items.endDate,
                fieldKey: 'endDate',
                fieldType: LoanInfoItemType.Date,
            },
        ],
    },
    {
        title: titles.sections.financialDetails,
        items: [
            outstandingAmountItem,
            overdueAmountItem,
            {
                cssClasses,
                title: titles.items.availableBalance,
                fieldKey: 'availableBalance',
                fieldType: LoanInfoItemType.Amount,
                showItem: showAmountItem('availableBalance'),
            },
            {
                cssClasses,
                title: titles.items.creditLimit,
                fieldKey: 'creditLimit',
                fieldType: LoanInfoItemType.Amount,
                showItem: showAmountItem('creditLimit'),
            },
            {
                cssClasses,
                title: titles.items.drawnAmount,
                fieldKey: 'drawnAmount',
                fieldType: LoanInfoItemType.Amount,
                showItem: showAmountItem('drawnAmount'),
            },
            ...paymentInterestsSectionBaseItems,
        ],
    },
    documentsSection,
];
/**
 * Loan info config for Mortgage loan
 */
const loanInfoMortgageDataConfig = [
    generalSection,
    statusMortgageTermSection,
    financialDetailsMortgageTermSection,
    {
        title: titles.sections.escrow,
        items: [
            {
                cssClasses: 'col-12',
                componentRef: LoanInfoEscrowSectionComponent,
                showItem: showEscrowSection,
            },
        ],
    },
    colleteralSection,
    documentsSection,
];
/**
 * Loan info config for Term loan
 */
const loanInfoTermDataConfig = [
    generalSection,
    statusMortgageTermSection,
    financialDetailsMortgageTermSection,
    colleteralSection,
    documentsSection,
];
function getLoanInfoDataConfig(viewType) {
    switch (viewType) {
        case LoanDefaultViewType.LineOfCredit:
            return loanInfoLineOfCreditDataConfig;
        case LoanDefaultViewType.TermLoan:
            return loanInfoTermDataConfig;
        case LoanDefaultViewType.Mortgage:
            return loanInfoMortgageDataConfig;
        default:
            throw new Error(`[bb-loans]: "${viewType}" view type is not configured`);
    }
}

/**
 * Helper function to extract error, if there is one.
 *
 * @param callState - call sate
 */
function getCallStateError(callState) {
    if (callState.error !== undefined) {
        return callState.error;
    }
    return null;
}
/**
 * Checks for initial state
 *
 * @param callStates - call states
 */
function isInitialState(...callStates) {
    return callStates.some((state) => state === LoadingState.Init);
}
/**
 * Checks for loading state
 *
 * @param callStates - call states
 */
function isLoadingState(...callStates) {
    return callStates.some((state) => state === LoadingState.Loading);
}
/**
 * Checks for error state
 *
 * @param callStates - call states
 */
function isErrorState(...callStates) {
    return callStates.some((state) => Object.prototype.hasOwnProperty.call(state, 'error'));
}
/**
 * Checks for loaded state
 *
 * @param callStates - call states
 */
function isLoadedState(...callStates) {
    return callStates.every((state) => state === LoadingState.Loaded);
}
/**
 * Operator state map operator
 *
 * @param fn - state mapper function
 */
function stateMap(fn) {
    return (source) => source.pipe(map((state) => fn.call(null, ...(Array.isArray(state) ? state : [state]))));
}

// Fetch loans
const loadLoans = createAction('[Loans API] fetch loans', props());
const loadLoansSuccess = createAction('[Loans API] fetch loans succeed', props());
const loadLoansError = createAction('[Loans API] fetch loans error', props());
// Fetch loan by id
const fetchLoanById = createAction('[Loans API] fetch loan by id', props());
const fetchLoanByIdSuccess = createAction('[Loans API] fetch loan by id succeed', props());
const fetchLoanByIdError = createAction('[Loans API] fetch loan by id error', props());
// Fetch amount of loans
const fetchAmountOfLoans = createAction('[Loans API] fetch amount of loans');
const fetchAmountOfLoansSuccess = createAction('[Loans API] fetch amount of loans succeed', props());
const fetchAmountOfLoansError = createAction('[Loans API] fetch amount of loans error');
// Update loan alias
const updateLoanAlias = createAction('[Product Summary API] Update alias', props());
const updateLoanAliasSuccess = createAction('[Product Summary API] Update alias succeed', props());
const updateLoanAliasError = createAction('[Product Summary API] Update alias error', props());
const updateLoanAliasCancel = createAction('[Effect] Cancel update alias request');

const storeKey = 'loansJourneyBase';
const initialState$1 = {
    loans: [],
    loansCurrentPage: 0,
    loansTotalCount: undefined,
    loansCallState: LoadingState.Init,
    loan: undefined,
    loanCallState: LoadingState.Init,
    aliasUpdateCallState: LoadingState.Init,
};
const _loansReducer = createReducer(initialState$1, on(loadLoans, (state, { page }) => (Object.assign(Object.assign({}, state), { loansCallState: LoadingState.Loading, loansCurrentPage: page }))), on(loadLoansSuccess, (state, { append, response: { items: loans, totalCount } }) => (Object.assign(Object.assign({}, state), { loans: append ? [...state.loans, ...loans] : loans, loansTotalCount: totalCount, loansCallState: LoadingState.Loaded }))), on(loadLoansError, (state, { error }) => (Object.assign(Object.assign({}, state), { loansCallState: { error } }))), on(fetchLoanById, (state) => (Object.assign(Object.assign({}, state), { loanCallState: LoadingState.Loading }))), on(fetchLoanByIdSuccess, (state, { loan }) => (Object.assign(Object.assign({}, state), { loan, loanCallState: LoadingState.Loaded }))), on(fetchLoanByIdError, (state, { error }) => (Object.assign(Object.assign({}, state), { loanCallState: { error } }))), on(fetchAmountOfLoansSuccess, (state, { totalCount }) => (Object.assign(Object.assign({}, state), { loansTotalCount: totalCount }))), on(fetchAmountOfLoansError, (state) => (Object.assign(Object.assign({}, state), { loansTotalCount: undefined }))), on(updateLoanAlias, (state) => (Object.assign(Object.assign({}, state), { aliasUpdateCallState: LoadingState.Loading }))), on(updateLoanAliasSuccess, (state) => (Object.assign(Object.assign({}, state), { aliasUpdateCallState: LoadingState.Loaded }))), on(updateLoanAliasError, (state, { error }) => (Object.assign(Object.assign({}, state), { aliasUpdateCallState: { error } }))));
function loansReducer(state, action) {
    return _loansReducer(state, action);
}

const getLoansState = createFeatureSelector(storeKey);
const selectLoans = createSelector(getLoansState, ({ loans }) => loans);
const selectLoansCallState = createSelector(getLoansState, ({ loansCallState }) => loansCallState);
const selectLoan = createSelector(getLoansState, ({ loan }) => loan);
const selectLoanCallState = createSelector(getLoansState, ({ loanCallState }) => loanCallState);
const selectShowNavigateToOverview = createSelector(getLoansState, ({ loansTotalCount }) => Boolean(loansTotalCount && loansTotalCount > 1));
const selectLoansCurrentPage = createSelector(getLoansState, ({ loansCurrentPage }) => loansCurrentPage);
const selectLoansTotalCount = createSelector(getLoansState, ({ loansTotalCount }) => loansTotalCount);
const selectAliasUpdateCallState = createSelector(getLoansState, ({ aliasUpdateCallState }) => aliasUpdateCallState);

class LoansStoreService {
    constructor(store) {
        this.store = store;
        /**
         * Stream of api call state for fetching loans
         */
        this.loansCallState$ = this.store.select(selectLoansCallState);
        /**
         * Stream of loans
         */
        this.loans$ = this.store.select(selectLoans);
        /**
         * Stream of api call state for fetching loan item
         */
        this.loanCallState$ = this.store.select(selectLoanCallState);
        /**
         * Stream of loan item
         */
        this.loan$ = this.store.select(selectLoan);
        /**
         * Stream indicates whether to show/hide navigate to overview button
         */
        this.showNavigateToOverview$ = this.store.select(selectShowNavigateToOverview);
        /**
         * Stream represents current loaded page for loan list
         */
        this.loansCurrentPage$ = this.store.select(selectLoansCurrentPage);
        /**
         * Stream represents total pages count for loan list
         */
        this.loansTotalCount$ = this.store.select(selectLoansTotalCount);
        /**
         * Stream of alias edit states (mapped from call state)
         */
        this.aliasEditState$ = this.store
            .select(selectAliasUpdateCallState)
            .pipe(map((callState) => (isLoadingState(callState) ? InputInlineEditState.LOADING : InputInlineEditState.IDLE)));
    }
    /**
     * Fetch loans
     */
    fetchLoans(page, append = false) {
        this.store.dispatch(loadLoans({ page, append }));
    }
    /**
     * Fetch loan by id
     */
    fetchLoanById(id) {
        this.store.dispatch(fetchLoanById({ id }));
    }
    /**
     * Fetch amount of loans
     */
    fetchAmountOfLoans() {
        this.store.dispatch(fetchAmountOfLoans());
    }
    /**
     * Update alias
     *
     * @param alias
     */
    updateAlias(alias) {
        this.store.dispatch(updateLoanAlias({ alias }));
    }
    /**
     * Cancel alias update
     */
    cancelAliasUpdate() {
        this.store.dispatch(updateLoanAliasCancel());
    }
}
/** @nocollapse */ LoansStoreService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansStoreService, deps: [{ token: i1.Store }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ LoansStoreService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansStoreService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansStoreService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Store }]; } });

// eslint-disable-next-line @angular-eslint/directive-class-suffix
class LoanDetailsBaseComponent {
    constructor(storeService) {
        this.storeService = storeService;
        /**
         * Loan details steam
         */
        this.loan$ = this.storeService.loan$;
        /**
         * Flag represents loading state
         */
        this.isLoading$ = this.storeService.loanCallState$.pipe(stateMap(isLoadingState));
        /**
         * Flag represents error state
         */
        this.isErrorState$ = this.storeService.loanCallState$.pipe(stateMap(isErrorState));
    }
}
/** @nocollapse */ LoanDetailsBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoanDetailsBaseComponent, deps: [{ token: LoansStoreService }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ LoanDetailsBaseComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: LoanDetailsBaseComponent, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoanDetailsBaseComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: LoansStoreService }]; } });

class LoanInfoRetailComponent extends LoanInfoComponent {
    ngOnChanges() {
        super.ngOnChanges();
        this.loanAlias = getLoanAlias(this.loan);
    }
}
/** @nocollapse */ LoanInfoRetailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoanInfoRetailComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ LoanInfoRetailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LoanInfoRetailComponent, selector: "bb-loan-info-retail", usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<div class=\"bb-loans-loan-info\">\n  <div class=\"bb-block bb-block--xl bb-stack justify-content-between\">\n    <bb-loan-item-name [headingLevel]=\"3\" [loanName]=\"loanAlias\"></bb-loan-item-name>\n    <bb-loan-info-print-button class=\"bb-loans-loan-info\"></bb-loan-info-print-button>\n  </div>\n\n  <div class=\"bb-list\">\n    <section\n      *ngFor=\"let section of sections; trackBy: trackByTitle\"\n      class=\"bb-list__item bb-card card-body\"\n      data-role=\"loan-info-section\"\n    >\n      <bb-header-ui\n        [heading]=\"section.title\"\n        headingType=\"h3\"\n        headingClasses=\"bb-block bb-block--lg\"\n        data-role=\"loan-info-section__header\"\n      ></bb-header-ui>\n\n      <div class=\"row bb-loans-loan-info__section\">\n        <div\n          *ngFor=\"let item of section.items\"\n          [ngClass]=\"item.cssClasses\"\n          class=\"bb-block bb-block--lg\"\n          data-role=\"loan-info-section__item-wrapper\"\n        >\n          <ng-container *ngIf=\"getTypedDataItem(item).fieldKey; else customItemRef\">\n            <bb-loan-info-item\n              data-role=\"loan-info-section__data-item\"\n              *ngIf=\"getTypedDataItem(item) as dataItem\"\n              [value]=\"loan[dataItem.fieldKey]\"\n              [title]=\"dataItem.title\"\n              [type]=\"dataItem.fieldType\"\n              [currencyCode]=\"loan.currencyCode\"\n              [isCurrencySymbolUsed]=\"!!isCurrencySymbolUsed\"\n            >\n            </bb-loan-info-item>\n          </ng-container>\n\n          <ng-template #customItemRef>\n            <ng-container\n              bbLoanInfoCustomSection\n              [componentRef]=\"getItemComponentRef(item)\"\n              [loan]=\"loan\"\n            ></ng-container>\n          </ng-template>\n        </div>\n      </div>\n    </section>\n  </div>\n</div>\n", components: [{ type: i1$1.LoanItemNameComponent, selector: "bb-loan-item-name", inputs: ["loanName", "headingLevel"] }, { type: i1$1.LoanInfoPrintButtonComponent, selector: "bb-loan-info-print-button" }, { type: i2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1$1.LoanInfoItemComponent, selector: "bb-loan-info-item", inputs: ["title", "value", "type", "currencyCode", "isCurrencySymbolUsed"] }], directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$1.LoanInfoCustomSectionDirective, selector: "[bbLoanInfoCustomSection]", inputs: ["componentRef", "loan"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoanInfoRetailComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-loan-info-retail',
                    templateUrl: 'loan-info-retail.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }] });

class LoanInfoWrapperComponent extends LoanDetailsBaseComponent {
    /**
     * Configuration for loan info container
     */
    getDataConfig({ viewType }) {
        return getLoanInfoDataConfig(viewType);
    }
}
/** @nocollapse */ LoanInfoWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoanInfoWrapperComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ LoanInfoWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LoanInfoWrapperComponent, selector: "bb-loan-info-wrapper", usesInheritance: true, ngImport: i0, template: "<bb-loans-main-container\n  [isLoadingState]=\"isLoading$ | async\"\n  [isErrorState]=\"isErrorState$ | async\"\n  rootWrapperClasses=\"\"\n  contentWrapperClasses=\"\"\n>\n  <bb-loan-info-retail\n    *ngIf=\"loan$ | async as loan\"\n    [loan]=\"loan\"\n    [dataConfig]=\"getDataConfig(loan)\"\n    [isCurrencySymbolUsed]=\"true\"\n  ></bb-loan-info-retail>\n</bb-loans-main-container>\n", components: [{ type: i1$1.LoansMainContainerComponent, selector: "bb-loans-main-container", inputs: ["isErrorState", "isLoadingState", "isEmptyState", "containerHeightFitToContent", "contentWrapperClasses", "rootWrapperClasses", "customErrorState", "customLoadingState", "customEmptyState"] }, { type: LoanInfoRetailComponent, selector: "bb-loan-info-retail" }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoanInfoWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-loan-info-wrapper',
                    templateUrl: './loan-info-wrapper.component.html',
                }]
        }] });

const LOAN_JOURNEY_COMMUNICATOR = new InjectionToken('bb-loans-journey-communication');

const iconsConfig = {
    [LoanDefaultViewType.LineOfCredit]: 'payments',
    [LoanDefaultViewType.Mortgage]: 'loans',
    [LoanDefaultViewType.TermLoan]: 'home',
};
const accountEditEntitlementsConfig = {
    [AccountAliasDisplayingLevel.USER]: 'ProductSummary.ProductSummary.edit',
    [AccountAliasDisplayingLevel.ACCOUNT]: 'ProductSummary.ManageArrangementAlias.edit',
};
function getFormulaViewType({ value: totalValue }, amounts) {
    const amountValues = amounts.reduce((accum, { value }) => {
        if (value) {
            accum.push(new BigNumber(value));
        }
        return accum;
    }, []);
    const moreThanThreeAmounts = amountValues.length > 3;
    if (totalValue) {
        const totalAmount = new BigNumber(totalValue);
        const amountValuesSum = amountValues.reduce((accum, val) => accum.plus(val), new BigNumber(0));
        if (totalAmount.isEqualTo(amountValuesSum)) {
            return moreThanThreeAmounts ? LoanSummaryFormulaViewType.CollapsibleList : LoanSummaryFormulaViewType.Equation;
        }
        else {
            return LoanSummaryFormulaViewType.OnlyTotal;
        }
    }
    else {
        return moreThanThreeAmounts
            ? LoanSummaryFormulaViewType.AmountsInRows
            : LoanSummaryFormulaViewType.AmountsInColumns;
    }
}
const getLoanSummaryFormulaDataConfig = (isLineOfCreditType) => ({ outstandingAmount, drawnAmount, interestDue, feesDue, currencyCode, inArrearsAmount }) => {
    const totalAmount = {
        value: outstandingAmount,
        title: titles.items.totalOutstandingAmount,
    };
    const amounts = [
        {
            value: drawnAmount,
            title: isLineOfCreditType ? titles.items.drawnAmount : titles.items.remainingPrincipal,
        },
        {
            value: inArrearsAmount,
            title: titles.items.overdueAmount,
        },
        {
            value: interestDue,
            title: titles.items.interestDue,
        },
        {
            value: feesDue,
            title: titles.items.feesDue,
        },
    ].filter(({ value }) => value);
    const shouldShow = Boolean(currencyCode && (totalAmount.value || amounts.length));
    const viewType = getFormulaViewType(totalAmount, amounts);
    return { totalAmount, amounts, shouldShow, viewType };
};
const detailsPaymentInfoFn = ({ isFullyRepaid, nextRepaymentDate, nextRepaymentAmount, }) => {
    if (isFullyRepaid) {
        return { paymentType: LoanPaymentInfoType.FullyPaid };
    }
    const isOverdueDate = Boolean(nextRepaymentDate && Date.parse(nextRepaymentDate) - new Date().setHours(0, 0, 0, 0) < 0);
    return {
        date: nextRepaymentDate,
        amount: nextRepaymentAmount,
        paymentType: isOverdueDate ? LoanPaymentInfoType.ScheduledLast : LoanPaymentInfoType.ScheduledNext,
    };
};
const isProgressBarDataShown = (owedAmount, availableAmount, totalAmount) => owedAmount.isGreaterThanOrEqualTo(0) &&
    availableAmount.isGreaterThanOrEqualTo(0) &&
    totalAmount.isGreaterThan(0) &&
    totalAmount.isEqualTo(owedAmount.plus(availableAmount));
const isAmountShown = (amount) => (amount ? amount.isGreaterThanOrEqualTo(0) : false);
const retailLoanSummaryTermLoanProgressDataConfig = {
    activeAmount: {
        fieldKey: 'drawnAmount',
        title: titles.items.owedAmount,
    },
    availableAmount: {
        fieldKey: 'paidAmount',
        title: titles.items.paidAmount,
    },
    totalAmount: {
        fieldKey: 'creditLimit',
        title: titles.items.creditLimit,
    },
    showData: ({ creditLimit, paidAmount, drawnAmount }) => {
        return creditLimit && paidAmount && drawnAmount
            ? isProgressBarDataShown(new BigNumber(drawnAmount), new BigNumber(paidAmount), new BigNumber(creditLimit))
            : false;
    },
};
const retailLoanSummaryLineOfCreditProgressDataConfig = {
    activeAmount: {
        fieldKey: 'drawnAmount',
        title: titles.items.owedAmount,
    },
    availableAmount: {
        fieldKey: 'availableBalance',
        title: titles.items.availableAmount,
    },
    totalAmount: {
        fieldKey: 'creditLimit',
        title: titles.items.creditLimit,
    },
    showData: ({ creditLimit, availableBalance, drawnAmount }) => {
        return creditLimit && availableBalance && drawnAmount
            ? isProgressBarDataShown(new BigNumber(drawnAmount), new BigNumber(availableBalance), new BigNumber(creditLimit))
            : false;
    },
};
const isMortgageTotalAmountShown = (totalAmount, owedAmount, availableAmount) => totalAmount.isGreaterThan(0) &&
    owedAmount.isGreaterThanOrEqualTo(0) &&
    availableAmount.isGreaterThanOrEqualTo(0) &&
    totalAmount.isEqualTo(owedAmount.plus(availableAmount));
const retailLoanSummaryMortgageTermProgressDataConfig = {
    activeAmount: {
        fieldKey: 'drawnAmount',
        title: titles.items.owedAmount,
    },
    availableAmount: {
        fieldKey: 'paidAmount',
        title: titles.items.paidAmount,
    },
    totalAmount: {
        fieldKey: 'creditLimit',
        title: titles.items.creditLimit,
    },
    showProgressBar: () => false,
    showActiveAmount: ({ drawnAmount }) => {
        const amount = drawnAmount && new BigNumber(drawnAmount);
        return amount ? isAmountShown(amount) : false;
    },
    showAvailableAmount: ({ paidAmount }) => {
        const amount = paidAmount && new BigNumber(paidAmount);
        return amount ? isAmountShown(amount) : false;
    },
    showTotalAmount: ({ creditLimit, paidAmount, drawnAmount }) => {
        return creditLimit && drawnAmount && paidAmount
            ? isMortgageTotalAmountShown(new BigNumber(creditLimit), new BigNumber(drawnAmount), new BigNumber(paidAmount))
            : false;
    },
};
const getChangedAmountFocus = (dataConfig) => {
    const { activeAmount, availableAmount, showActiveAmount, showAvailableAmount } = dataConfig;
    return Object.assign({}, dataConfig, {
        activeAmount: availableAmount,
        availableAmount: activeAmount,
        showActiveAmount: showAvailableAmount,
        showAvailableAmount: showActiveAmount,
    });
};
const retailLoanSummaryTermLoanDataConfig = {
    progressBar: retailLoanSummaryTermLoanProgressDataConfig,
    paymentInfo: detailsPaymentInfoFn,
    formula: getLoanSummaryFormulaDataConfig(false),
    icons: iconsConfig,
};
const retailLoanSummaryLineOfCreditDataConfig = {
    progressBar: retailLoanSummaryLineOfCreditProgressDataConfig,
    paymentInfo: detailsPaymentInfoFn,
    formula: getLoanSummaryFormulaDataConfig(true),
    icons: iconsConfig,
};
const retailLoanSummaryMortgageTermDataConfig = {
    progressBar: retailLoanSummaryMortgageTermProgressDataConfig,
    paymentInfo: detailsPaymentInfoFn,
    formula: getLoanSummaryFormulaDataConfig(false),
    icons: iconsConfig,
};
function getRetailLoanSummaryDataConfig(viewType, owedAmountFocus) {
    if (viewType === LoanDefaultViewType.TermLoan) {
        return owedAmountFocus
            ? retailLoanSummaryTermLoanDataConfig
            : Object.assign({}, retailLoanSummaryTermLoanDataConfig, {
                progressBar: getChangedAmountFocus(retailLoanSummaryTermLoanDataConfig.progressBar),
            });
    }
    if (viewType === LoanDefaultViewType.LineOfCredit) {
        return owedAmountFocus
            ? retailLoanSummaryLineOfCreditDataConfig
            : Object.assign({}, retailLoanSummaryLineOfCreditDataConfig, {
                progressBar: getChangedAmountFocus(retailLoanSummaryLineOfCreditDataConfig.progressBar),
            });
    }
    return retailLoanSummaryMortgageTermDataConfig;
}

class LoanSummaryComponent extends LoanDetailsBaseComponent {
    constructor(storeService, conditions, accountAliasDisplayingLevel, loanCommunication, remoteConfig) {
        super(storeService);
        this.conditions = conditions;
        this.accountAliasDisplayingLevel = accountAliasDisplayingLevel;
        this.loanCommunication = loanCommunication;
        this.remoteConfig = remoteConfig;
        /**
         * Stream represents edit states for loan alias
         */
        this.aliasEditState$ = this.storeService.aliasEditState$;
        this.PaymentOptions = PaymentOptions;
        this.LoanDefaultViewType = LoanDefaultViewType;
        this.accountAliasDisplayingLevel = accountAliasDisplayingLevel || AccountAliasDisplayingLevel.USER;
        this.canEditAlias = this.conditions.resolveEntitlements(accountEditEntitlementsConfig[this.accountAliasDisplayingLevel]);
    }
    /**
     * Loan id
     */
    set loanId(id) {
        this.storeService.fetchLoanById(id);
    }
    /**
     * Configuration for loan summary container
     */
    getDataConfig({ viewType }) {
        const owedAmountFocus = this.remoteConfig.getValue('owed_amount_focus');
        return getRetailLoanSummaryDataConfig(viewType, owedAmountFocus);
    }
    /**
     * Updates a loan alias
     *
     * @param name
     */
    onUpdateAlias(name) {
        this.storeService.updateAlias(name);
    }
    /**
     * Cancel(discard) current loan alias update
     */
    onCancelAliasUpdate() {
        this.storeService.cancelAliasUpdate();
    }
    onDrawAmount() {
        if (this.loanCommunication) {
            this.loanCommunication.navigateToLoanAdvance();
        }
        else {
            throw new Error('[bb-loans]: Communication service is missing');
        }
    }
    onPayDown() {
        if (this.loanCommunication) {
            this.loanCommunication.navigateToLoanPayment();
        }
        else {
            throw new Error('[bb-loans]: Communication service is missing');
        }
    }
    getAllowedPaymentOption(paymentOptionName, options) {
        var _a;
        return (!!((_a = options === null || options === void 0 ? void 0 : options.paymentOptions.find((option) => option.name === paymentOptionName)) === null || _a === void 0 ? void 0 : _a.allowed) && !!this.loanCommunication);
    }
}
/** @nocollapse */ LoanSummaryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoanSummaryComponent, deps: [{ token: LoansStoreService }, { token: CONDITIONS }, { token: ACCOUNT_ALIAS_DISPLAYING_LEVEL, optional: true }, { token: LOAN_JOURNEY_COMMUNICATOR, optional: true }, { token: i2$1.RemoteConfigService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ LoanSummaryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LoanSummaryComponent, selector: "bb-loan-summary", inputs: { loanId: "loanId" }, usesInheritance: true, ngImport: i0, template: "<bb-loans-main-container [isLoadingState]=\"isLoading$ | async\" [isErrorState]=\"isErrorState$ | async\">\n  <bb-retail-loan-summary-container\n    *ngIf=\"loan$ | async as loan\"\n    [loan]=\"loan\"\n    [dataConfig]=\"getDataConfig(loan)\"\n    [showPayDownButton]=\"getAllowedPaymentOption(PaymentOptions.LoanPayment, loan.paymentOptions)\"\n    [showDrawAmountButton]=\"getAllowedPaymentOption(PaymentOptions.LoanAdvance, loan.paymentOptions)\"\n    [showFormula]=\"false\"\n    [showInterestRateOnTop]=\"loan.loanType === LoanDefaultViewType.Mortgage\"\n    [owedAmountFocus]=\"owedAmountFocus\"\n    (updateAlias)=\"onUpdateAlias($event)\"\n    (cancelAliasUpdate)=\"onCancelAliasUpdate()\"\n    (drawAmount)=\"onDrawAmount()\"\n    (payDown)=\"onPayDown()\"\n  ></bb-retail-loan-summary-container>\n</bb-loans-main-container>\n", components: [{ type: i1$1.LoansMainContainerComponent, selector: "bb-loans-main-container", inputs: ["isErrorState", "isLoadingState", "isEmptyState", "containerHeightFitToContent", "contentWrapperClasses", "rootWrapperClasses", "customErrorState", "customLoadingState", "customEmptyState"] }, { type: i1$1.RetailLoanSummaryContainerComponent, selector: "bb-retail-loan-summary-container", inputs: ["showPayDownButton", "showDrawAmountButton", "showFormula", "showInterestRateOnTop", "owedAmountFocus"], outputs: ["drawAmount", "payDown", "updateAlias", "cancelAliasUpdate"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoanSummaryComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-loan-summary',
                    templateUrl: './loan-summary.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: LoansStoreService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [CONDITIONS]
                }] }, { type: i5.AccountAliasDisplayingLevel, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ACCOUNT_ALIAS_DISPLAYING_LEVEL]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LOAN_JOURNEY_COMMUNICATOR]
                }] }, { type: i2$1.RemoteConfigService }]; }, propDecorators: { loanId: [{
                type: Input
            }] } });

class LoanDetailsWrapperComponent {
    constructor(router, activatedRoute, storeService) {
        var _a, _b;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.storeService = storeService;
        /**
         * Stream of account ids from router params
         */
        this.accountId$ = this.activatedRoute.params.pipe(map(({ selectedAccount }) => selectedAccount));
        /**
         * Whether to show / hide navigate to overview btn
         */
        this.showNavigationButton$ = this.storeService.showNavigateToOverview$;
        /**
         * Array of tabs to be displayed
         */
        this.tabs = this.createRouteTabs(((_b = (_a = this.activatedRoute.snapshot) === null || _a === void 0 ? void 0 : _a.routeConfig) === null || _b === void 0 ? void 0 : _b.children) || []);
        this.storeService.fetchAmountOfLoans();
    }
    /**
     * Navigates to the list overview view
     *
     * TODO: set up relative routing
     */
    navigateToAccounts() {
        this.router.navigate(['my-accounts/list']);
    }
    createRouteTabs(routes) {
        return routes
            .filter(({ path, data }) => path && (data === null || data === void 0 ? void 0 : data.titleFn))
            .map(({ path, data }) => ({
            title: data.titleFn(),
            route: path,
        }));
    }
}
/** @nocollapse */ LoanDetailsWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoanDetailsWrapperComponent, deps: [{ token: i1$2.Router }, { token: i1$2.ActivatedRoute }, { token: LoansStoreService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ LoanDetailsWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LoanDetailsWrapperComponent, selector: "bb-loan-details-wrapper", ngImport: i0, template: "<div class=\"bb-layout__container d-block bb-block--xl mt-5 container-fluid container\">\n  <div class=\"bb-block bb-block--xl\">\n    <button\n      data-role=\"loans-heading-button__navigation\"\n      (click)=\"navigateToAccounts()\"\n      class=\"bb-stack justify-content-start bb-stack--density-sm btn-link-text btn-md btn\"\n    >\n      <i aria-hidden=\"true\" class=\"bb-icon bb-icon-arrow-back bb-icon--sm\"></i>\n      <span i18n-navigationButtonTitle=\"Loan details heading nav button title@@loans.details.heading.nav-button.title\"\n        >Back to My Accounts</span\n      >\n    </button>\n  </div>\n\n  <section class=\"bb-block bb-block--xl p--4\">\n    <h2 class=\"sr-only\" i18n=\"Loans details a11y section heading@@loans.details.section.a11y.heading\">Loan details</h2>\n    <bb-loan-summary *ngIf=\"accountId$ | async as accountId\" [loanId]=\"accountId\"></bb-loan-summary>\n  </section>\n\n  <div>\n    <div>\n      <div class=\"bb-card__body\">\n        <bb-loans-tabs data-role=\"loan-details__tabs\" [tabs]=\"tabs\"></bb-loans-tabs>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: LoanSummaryComponent, selector: "bb-loan-summary", inputs: ["loanId"] }, { type: i1$1.LoansTabsComponent, selector: "bb-loans-tabs", inputs: ["tabs"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoanDetailsWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-loan-details-wrapper',
                    templateUrl: './loan-details-wrapper.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.Router }, { type: i1$2.ActivatedRoute }, { type: LoansStoreService }]; } });

function safeStringify(value) {
    try {
        return JSON.stringify(value) || '';
    }
    catch (e) {
        console.warn(e);
        return '';
    }
}

class LoanTransactionsWrapperComponent {
    constructor(configurationService) {
        this.configurationService = configurationService;
        /**
         * Transaction table config
         */
        this.transactionConfig = this.configurationService.transactionConfig;
        /**
         * Transaction table initial filter options
         */
        this.initialFilterOptions = safeStringify(this.transactionConfig.initialFilterOptions);
        /**
         * Transaction table initial sort options
         */
        this.initialSortOptions = safeStringify(this.transactionConfig.initialSortOptions);
    }
}
/** @nocollapse */ LoanTransactionsWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoanTransactionsWrapperComponent, deps: [{ token: LoansJourneyConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ LoanTransactionsWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LoanTransactionsWrapperComponent, selector: "bb-loan-transactions-wrapper", ngImport: i0, template: "<bb-transactions-list-widget\n  [pageSize]=\"transactionConfig.itemsPerPage\"\n  [maxNavPages]=\"transactionConfig.maxNavPages\"\n  [showControls]=\"transactionConfig.showControls\"\n  [showManageNotes]=\"transactionConfig.showManageNotes\"\n  [showCheckImage]=\"transactionConfig.showCheckImages\"\n  [showChangeCategory]=\"transactionConfig.showChangeCategory\"\n  [showPendingTransactionsOnTop]=\"transactionConfig.showPendingOnTop\"\n  [paginationType]=\"transactionConfig.paginationType\"\n  [getOrPostEndpoints]=\"transactionConfig.endpointType\"\n  [googleAPIKey]=\"transactionConfig.apiKey\"\n  [initialFilterOptions]=\"initialFilterOptions\"\n  [initialSortOptions]=\"initialSortOptions\"\n  [disputeByBillingStatus]=\"transactionConfig.disputeByBillingStatus\"\n  [disputeEligibilityDays]=\"transactionConfig.disputeEligibilityDays\"\n  [disputeTopicId]=\"transactionConfig.disputeTopicId\"\n  [disputeTransactionTypes]=\"transactionConfig.disputeTransactionTypes\"\n  [enableDisputeAndInquiry]=\"$any(transactionConfig.enableDisputeAndInquiry)\"\n  [inquireTopicId]=\"transactionConfig.inquireTopicId\"\n>\n</bb-transactions-list-widget>\n", components: [{ type: i2$2.TransactionsListWidgetComponent, selector: "bb-transactions-list-widget" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoanTransactionsWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-loan-transactions-wrapper',
                    templateUrl: './loan-transactions-wrapper.component.html',
                }]
        }], ctorParameters: function () { return [{ type: LoansJourneyConfigurationService }]; } });

const loanIdParamKey = 'selectedAccount';
const scheduleIdParam = 'paymentScheduleId';

// Fetch amortized schedule
const fetchAmortizationSchedule = createAction('[Loans API] fetch amortization schedule', props());
const fetchAmortizationScheduleSuccess = createAction('[Loans API] fetch amortization schedule succeed', props());
const fetchAmortizationScheduleError = createAction('[Loans API] fetch amortization schedule ', props());
// Fetch amortized schedule payment by id
const fetchAmortizationPayment = createAction('[Loans API] fetch amortization schedule payment by id', props());
const fetchAmortizationPaymentSuccess = createAction('[Loans API] fetch amortization schedule payment succeed', props());
const fetchAmortizationPaymentError = createAction('[Loans API] fetch  amortization schedule payment failures', props());

const paymentScheduleStoreKey = 'loansJourneyPaymentSchedule';
const initialState = {
    amortizedPayments: [],
    amortizedPaymentsTotalCount: 0,
    amortizedPaymentsCurrenPage: 0,
    amortizedPaymentsCallState: LoadingState.Init,
    amortizedPayment: undefined,
    amortizedPaymentCallState: LoadingState.Init,
};
const reducer = createReducer(initialState, on(fetchAmortizationSchedule, (state, { params: { from } }) => (Object.assign(Object.assign({}, state), { amortizedPaymentsCallState: LoadingState.Loading, amortizedPaymentsCurrenPage: from }))), on(fetchAmortizationScheduleSuccess, (state, { append, response: { items, totalCount } }) => (Object.assign(Object.assign({}, state), { amortizedPayments: append ? [...state.amortizedPayments, ...items] : items, amortizedPaymentsTotalCount: totalCount, amortizedPaymentsCallState: LoadingState.Loaded }))), on(fetchAmortizationScheduleError, (state, { error }) => (Object.assign(Object.assign({}, state), { amortizedPaymentsCallState: { error } }))), on(fetchAmortizationPayment, (state) => (Object.assign(Object.assign({}, state), { amortizedPaymentCallState: LoadingState.Loading }))), on(fetchAmortizationPaymentSuccess, (state, { amortizedPayment }) => (Object.assign(Object.assign({}, state), { amortizedPayment, amortizedPaymentCallState: LoadingState.Loaded }))), on(fetchAmortizationPaymentError, (state, { error }) => (Object.assign(Object.assign({}, state), { amortizedPaymentCallState: { error } }))));
function paymentScheduleReducer(state, action) {
    return reducer(state, action);
}

const createPaymentScheduleSelector = (projector) => 
// eslint-disable-next-line @typescript-eslint/ban-types
createSelector(createFeatureSelector(paymentScheduleStoreKey), projector);
const selectAmortizedPayments = createPaymentScheduleSelector(({ amortizedPayments }) => amortizedPayments);
const selectAmortizedPaymentsCallState = createPaymentScheduleSelector(({ amortizedPaymentsCallState }) => amortizedPaymentsCallState);
const selectAmortizedPaymentsTotalCount = createPaymentScheduleSelector(({ amortizedPaymentsTotalCount }) => amortizedPaymentsTotalCount);
const selectAmortizedPaymentsCurrentPage = createPaymentScheduleSelector(({ amortizedPaymentsCurrenPage }) => amortizedPaymentsCurrenPage);
const selectAmortizedPayment = createPaymentScheduleSelector(({ amortizedPayment }) => amortizedPayment);
const selectAmortizedPaymentCallState = createPaymentScheduleSelector(({ amortizedPaymentCallState }) => amortizedPaymentCallState);

class PaymentScheduleStoreService {
    constructor(store) {
        this.store = store;
        /**
         * Stream of api call state for fetching scheduled amortized payments
         */
        this.amortizedPaymentsCallState$ = this.store.select(selectAmortizedPaymentsCallState);
        /**
         * Stream of scheduled amortized payments
         */
        this.amortizedPayments$ = this.store.select(selectAmortizedPayments);
        /**
         * Stream of api call state for fetching scheduled amortized payment
         */
        this.amortizedPaymentCallState$ = this.store.select(selectAmortizedPaymentCallState);
        /**
         * Stream of scheduled amortized payment
         */
        this.amortizedPayment$ = this.store.select(selectAmortizedPayment);
        /**
         * Stream represents total pages count for scheduled amortized payments
         */
        this.amortizedPaymentsTotalCount$ = this.store.select(selectAmortizedPaymentsTotalCount);
        /**
         * Stream represents current loaded page for payment schedule table/list
         */
        this.amortizedPaymentsCurrentPage$ = this.store.select(selectAmortizedPaymentsCurrentPage);
    }
    /**
     * Fetch amortized payment schedule
     */
    fetchAmortizationSchedule(params) {
        this.store.dispatch(fetchAmortizationSchedule({ params }));
    }
    /**
     * Fetch amortized payment
     */
    fetchAmortizationPayment(params) {
        this.store.dispatch(fetchAmortizationPayment({ params }));
    }
}
/** @nocollapse */ PaymentScheduleStoreService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentScheduleStoreService, deps: [{ token: i1.Store }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ PaymentScheduleStoreService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentScheduleStoreService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentScheduleStoreService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Store }]; } });

// TODO: move to separate and reorganize the flow
class PaymentScheduleWrapperComponent {
    constructor(configurationService, storeService, mediaQueryService, activatedRoute, router, remoteConfig) {
        this.configurationService = configurationService;
        this.storeService = storeService;
        this.mediaQueryService = mediaQueryService;
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.remoteConfig = remoteConfig;
        /**
         * Stream of Amortized Payments
         */
        this.amortizedPayments$ = this.storeService.amortizedPayments$;
        /**
         * Payment schedule configuration
         */
        this.scheduleConfig = this.configurationService.paymentSchedule;
        /**
         * Hide or show payment status in the table
         */
        this.showPaymentStatus = this.remoteConfig.getValue('show_payment_status_retail_loans');
        /**
         * Flag represents error state
         */
        this.isErrorState$ = this.storeService.amortizedPaymentsCallState$.pipe(stateMap(isErrorState));
        /**
         * Stream represents total amount of the pages
         */
        this.amortizedPaymentsTotalCount$ = this.storeService.amortizedPaymentsTotalCount$;
        /**
         * Stream represent current loaded page number
         */
        this.amortizedPaymentsCurrentPage$ = this.storeService.amortizedPaymentsCurrentPage$;
        /**
         * Flag represents the tablet screen resolution
         */
        this.isTabletResolution$ = this.mediaQueryService.isMediaBreakpointMatches('max-width', 'lg');
        this._isLoading$ = combineLatest([
            this.isTabletResolution$,
            this.storeService.amortizedPaymentsCallState$,
            this.amortizedPaymentsCurrentPage$,
        ]);
        /**
         * Flag represents page loading state
         */
        this.isPageLoading$ = this._isLoading$.pipe(map(([isTabletResolution, callState, currentPage]) => isLoadingState(callState) && !(isTabletResolution && currentPage > 0)));
        /**
         * Flag represents load more button loading state
         */
        this.isButtonLoading$ = this._isLoading$.pipe(map(([isTabletResolution, callState, currentPage]) => isLoadingState(callState) && isTabletResolution && currentPage > 0));
        /**
         * Flag represents visibility of load more button
         */
        this.isLoadMoreVisible$ = combineLatest([
            this.amortizedPaymentsCurrentPage$,
            this.amortizedPaymentsTotalCount$,
            this.amortizedPayments$,
        ]).pipe(map(([page, total, { length }]) => !(page === 0 && length === total)));
        /**
         * Flag represents empty state
         */
        this.isEmptyState$ = this.storeService.amortizedPaymentsTotalCount$.pipe(map((totalCount) => totalCount === 0));
        this.baseReqParams = {
            loanId: this.activatedRoute.snapshot.parent.params[loanIdParamKey],
            size: this.scheduleConfig.itemsPerPage,
            from: 0,
            append: false,
        };
        this.storeService.fetchAmortizationSchedule(this.baseReqParams);
    }
    /**
     * Load loans on pagination page changes
     *
     * @param page
     */
    onPageChange(page) {
        this.storeService.fetchAmortizationSchedule(Object.assign(Object.assign({}, this.baseReqParams), { from: page }));
    }
    /**
     * Load loans on load more button click
     *
     * @param from
     */
    onLoadMore({ from }) {
        this.storeService.fetchAmortizationSchedule(Object.assign(Object.assign({}, this.baseReqParams), { from, append: true }));
    }
    /**
     * Emits in item select
     */
    onItemSelect({ id }) {
        this.router.navigate([id], { relativeTo: this.activatedRoute });
    }
}
/** @nocollapse */ PaymentScheduleWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentScheduleWrapperComponent, deps: [{ token: LoansJourneyConfigurationService }, { token: PaymentScheduleStoreService }, { token: i3$1.MediaQueryService }, { token: i1$2.ActivatedRoute }, { token: i1$2.Router }, { token: i2$1.RemoteConfigService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentScheduleWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentScheduleWrapperComponent, selector: "bb-payment-schedule-wrapper", ngImport: i0, template: "<bb-loans-main-container\n  [isLoadingState]=\"isPageLoading$ | async\"\n  [isErrorState]=\"isErrorState$ | async\"\n  [isEmptyState]=\"isEmptyState$ | async\"\n  [customEmptyState]=\"customEmptyState\"\n  rootWrapperClasses=\"\"\n  contentWrapperClasses=\"\"\n>\n  <div class=\"bb-card\">\n    <div class=\"bb-card__body\">\n      <ng-container *ngIf=\"isTabletResolution$ | async; else desktop\">\n        <bb-loan-amortized-payment-schedule-list\n          [items]=\"(amortizedPayments$ | async)!\"\n          (selectItem)=\"onItemSelect($event)\"\n        ></bb-loan-amortized-payment-schedule-list>\n      </ng-container>\n\n      <bb-load-button-ui\n        *ngIf=\"isLoadMoreVisible$ | async\"\n        [from]=\"(amortizedPaymentsCurrentPage$ | async)!\"\n        [size]=\"scheduleConfig.itemsPerPage\"\n        [totalCount]=\"(amortizedPaymentsTotalCount$ | async)!\"\n        [isLoading]=\"(isButtonLoading$ | async)!\"\n        (paramChange)=\"onLoadMore($event)\"\n        class=\"bb-stack bb-stack--center\"\n        i18n=\"Load more button@loans.payment-schedule.load-more.btn\"\n        color=\"link\"\n        data-role=\"payment-schedule-wrapper__load-more-btn\"\n      >\n        Load more\n      </bb-load-button-ui>\n\n      <ng-template #desktop>\n        <bb-loan-amortized-payment-schedule-table\n          [items]=\"(amortizedPayments$ | async)!\"\n          (selectItem)=\"onItemSelect($event)\"\n          [showPaymentStatus]=\"showPaymentStatus\"\n        >\n        </bb-loan-amortized-payment-schedule-table>\n      </ng-template>\n    </div>\n  </div>\n  <router-outlet></router-outlet>\n</bb-loans-main-container>\n\n<ng-template #customEmptyState>\n  <div class=\"bb-state-container bb-state-container--min-height\" data-role=\"payment-schedule-wrapper__empty-state\">\n    <bb-empty-state-ui\n      title=\"No Upcoming Payments\"\n      i18n-title=\"Payment schedule empty state title@loans.payment-schedule.empty-state.title\"\n      subtitle=\"You don't have any upcoming payments to be displayed.\"\n      i18n-subtitle=\"Payment schedule empty state subtitle@loans.payment-schedule.empty-state.subtitle\"\n      iconModifier=\"loans\"\n      iconSize=\"xxl\"\n    >\n    </bb-empty-state-ui>\n  </div>\n</ng-template>\n", components: [{ type: i1$1.LoansMainContainerComponent, selector: "bb-loans-main-container", inputs: ["isErrorState", "isLoadingState", "isEmptyState", "containerHeightFitToContent", "contentWrapperClasses", "rootWrapperClasses", "customErrorState", "customLoadingState", "customEmptyState"] }, { type: i1$1.LoanAmortizedPaymentScheduleListComponent, selector: "bb-loan-amortized-payment-schedule-list" }, { type: i7.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i1$1.LoanAmortizedPaymentScheduleTableComponent, selector: "bb-loan-amortized-payment-schedule-table", inputs: ["showPaymentStatus"] }, { type: i8.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$2.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }], pipes: { "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentScheduleWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-schedule-wrapper',
                    templateUrl: './payment-schedule-wrapper.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: LoansJourneyConfigurationService }, { type: PaymentScheduleStoreService }, { type: i3$1.MediaQueryService }, { type: i1$2.ActivatedRoute }, { type: i1$2.Router }, { type: i2$1.RemoteConfigService }]; } });

class PaymentScheduleDetailsModalHeaderComponent {
    constructor() {
        /**
         * Emits on print button click
         */
        this.printModal = new EventEmitter();
        /**
         * Emits on close modal
         */
        this.closeModal = new EventEmitter();
    }
}
/** @nocollapse */ PaymentScheduleDetailsModalHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentScheduleDetailsModalHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentScheduleDetailsModalHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentScheduleDetailsModalHeaderComponent, selector: "bb-payment-schedule-details-modal-header", outputs: { printModal: "printModal", closeModal: "closeModal" }, ngImport: i0, template: "<h3\n  class=\"modal-title bb-stack__item bb-stack__item--fill\"\n  i18n=\"Payment schedule details modal header title@loans.payment-schedule-details.modal.header.title\"\n>\n  Automatic loan payment\n</h3>\n\n<button\n  bbButton\n  type=\"button\"\n  color=\"unstyled\"\n  class=\"bb-stack__item bb-stack__item--spacing-lg\"\n  aria-label=\"Print\"\n  i18n-aria-label=\"\n    Payment schedule details modal header print button aria\n    label@loans.payment-schedule-details.modal.header.print-btn.aria-label\n  \"\n  data-role=\"bb-loan-payment-schedule-details-modal-header__print-btn\"\n  (click)=\"printModal.emit()\"\n>\n  <bb-icon-ui name=\"print\"></bb-icon-ui>\n</button>\n<button\n  bbButton\n  type=\"button\"\n  color=\"unstyled\"\n  class=\"bb-stack__item\"\n  aria-label=\"Close\"\n  i18n-aria-label=\"\n    Payment schedule details modal header close button aria\n    label@loans.payment-schedule-details.modal.header.close-btn.aria-label\n  \"\n  data-role=\"bb-loan-payment-schedule-details-modal-header__close-btn\"\n  (click)=\"closeModal.emit()\"\n>\n  <bb-icon-ui name=\"clear\"></bb-icon-ui>\n</button>\n", components: [{ type: i1$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2$3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentScheduleDetailsModalHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-schedule-details-modal-header',
                    templateUrl: './payment-schedule-details-modal-header.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { printModal: [{
                type: Output
            }], closeModal: [{
                type: Output
            }] } });

/**
 * @dynamic
 */
class PaymentScheduleDetailsWrapperComponent extends DestroyableComponent {
    constructor(activatedRoute, router, paymentScheduleStoreService, loansStoreService, document, remoteConfig) {
        super();
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.paymentScheduleStoreService = paymentScheduleStoreService;
        this.loansStoreService = loansStoreService;
        this.document = document;
        this.remoteConfig = remoteConfig;
        this.callStates$ = combineLatest([
            this.paymentScheduleStoreService.amortizedPaymentCallState$,
            this.loansStoreService.loanCallState$,
        ]);
        /**
         *  Stream of payment id param
         */
        this.paymentId$ = this.activatedRoute.params.pipe(pluck(scheduleIdParam));
        /**
         * Stream of scheduled amortized payment
         */
        this.amortizedPayment$ = this.paymentScheduleStoreService.amortizedPayment$;
        /**
         * Flag represents loading state
         */
        this.isLoading$ = this.callStates$.pipe(stateMap(isLoadingState));
        /**
         * Flag represents error state
         */
        this.isErrorState$ = this.callStates$.pipe(stateMap(isErrorState));
        /**
         * Stream of loan
         */
        this.loan$ = this.loansStoreService.loan$;
        /**
         * Hide or show payment status
         */
        this.showPaymentStatus = this.remoteConfig.getValue('show_payment_status_retail_loans');
        /**
         * Modal options
         */
        this.modalOptions = {
            backdrop: 'static',
            keyboard: true,
            centered: true,
            ariaDescribedBy: 'bb-payment-schedule-details-modal-body',
        };
        combineLatest([this.paymentId$, this.loan$])
            .pipe(filter(([, loan]) => Boolean(loan)), takeUntil(this.componentDestroyed$))
            .subscribe(([amortizationPaymentId, loan]) => {
            this.paymentScheduleStoreService.fetchAmortizationPayment({ loanId: loan.id, amortizationPaymentId });
        });
    }
    onCloseModal() {
        this.router.navigate(['..'], { relativeTo: this.activatedRoute });
    }
    onPrint() {
        var _a;
        (_a = this.document.defaultView) === null || _a === void 0 ? void 0 : _a.print();
    }
}
/** @nocollapse */ PaymentScheduleDetailsWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentScheduleDetailsWrapperComponent, deps: [{ token: i1$2.ActivatedRoute }, { token: i1$2.Router }, { token: PaymentScheduleStoreService }, { token: LoansStoreService }, { token: DOCUMENT }, { token: i2$1.RemoteConfigService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentScheduleDetailsWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentScheduleDetailsWrapperComponent, selector: "bb-payment-schedule-details-wrapper", usesInheritance: true, ngImport: i0, template: "<bb-modal-ui\n  [modalOptions]=\"modalOptions\"\n  [isOpen]=\"true\"\n  (isOpenChange)=\"onCloseModal()\"\n  data-role=\"bb-loan-payment-schedule-details-modal\"\n>\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <bb-payment-schedule-details-modal-header\n        class=\"bb-stack\"\n        data-role=\"bb-loan-payment-schedule-details-modal__header\"\n        (closeModal)=\"onCloseModal()\"\n        (printModal)=\"onPrint()\"\n      ></bb-payment-schedule-details-modal-header>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <bb-loans-main-container\n        [isLoadingState]=\"isLoading$ | async\"\n        [isErrorState]=\"isErrorState$ | async\"\n        [containerHeightFitToContent]=\"true\"\n        rootWrapperClasses=\"\"\n        contentWrapperClasses=\"\"\n      >\n        <bb-loan-amortized-payment-schedule-details\n          data-role=\"bb-loan-payment-schedule-details-modal__body\"\n          *ngIf=\"amortizedPayment$ | async as amortizedPayment\"\n          [amortizationPayment]=\"amortizedPayment\"\n          [loan]=\"(loan$ | async)!\"\n          [id]=\"modalOptions.ariaDescribedBy\"\n          [showStatus]=\"showPaymentStatus\"\n        ></bb-loan-amortized-payment-schedule-details>\n      </bb-loans-main-container>\n    </ng-template>\n  </bb-modal-body-ui>\n</bb-modal-ui>\n", components: [{ type: i5$1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i5$1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: PaymentScheduleDetailsModalHeaderComponent, selector: "bb-payment-schedule-details-modal-header", outputs: ["printModal", "closeModal"] }, { type: i5$1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1$1.LoansMainContainerComponent, selector: "bb-loans-main-container", inputs: ["isErrorState", "isLoadingState", "isEmptyState", "containerHeightFitToContent", "contentWrapperClasses", "rootWrapperClasses", "customErrorState", "customLoadingState", "customEmptyState"] }, { type: i1$1.LoanAmortizedPaymentScheduleDetailsComponent, selector: "bb-loan-amortized-payment-schedule-details", inputs: ["amortizationPayment", "loan", "showStatus"] }], directives: [{ type: i5$1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i5$1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentScheduleDetailsWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-schedule-details-wrapper',
                    templateUrl: './payment-schedule-details-wrapper.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$2.ActivatedRoute }, { type: i1$2.Router }, { type: PaymentScheduleStoreService }, { type: LoansStoreService }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i2$1.RemoteConfigService }]; } });

// To prevent error on package:apps process
const tabs = {
    transactions: () => $localize `:Loan details transactions tab title@@loans.details.tab.transactions.title:Transactions`,
    statements: () => $localize `:Loan details account statements tab title@@loans.details.tab.statements.title:Statements`,
    loanInfo: () => $localize `:Loan details info tab title@@loans.details.tab.loan-info.title:Loan info`,
    paymentSchedule: () => $localize `:Loan details payment schedule tab title@@loans.details.tab.payment-schedule.title:Payment schedule`,
};
const loansRoutes = [
    {
        path: `:${loanIdParamKey}`,
        component: LoanDetailsWrapperComponent,
        children: [
            {
                path: '',
                redirectTo: 'transactions',
                pathMatch: 'full',
            },
            {
                path: 'transactions',
                component: LoanTransactionsWrapperComponent,
                data: { titleFn: tabs.transactions },
            },
            {
                path: 'info',
                component: LoanInfoWrapperComponent,
                data: { titleFn: tabs.loanInfo },
            },
            {
                path: 'payment-schedule',
                component: PaymentScheduleWrapperComponent,
                data: { titleFn: tabs.paymentSchedule },
                children: [{ path: `:${scheduleIdParam}`, component: PaymentScheduleDetailsWrapperComponent }],
            },
        ],
    },
];

/**
 * catchError with error logging operator
 *
 * @param fn - callback function
 */
function catchErrorWithLog(fn) {
    return (source) => source.pipe(catchError((state) => {
        console.error(state);
        return fn(state);
    }));
}

class ArrangementsService {
    constructor(arrangementsHttpService) {
        this.arrangementsHttpService = arrangementsHttpService;
    }
    updateUserPreferences(arrangementId, alias) {
        return this.arrangementsHttpService.updateUserPreferences({ accountUserPreferences: { alias, arrangementId } });
    }
}
/** @nocollapse */ ArrangementsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementsService, deps: [{ token: i1$4.ArrangementsHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ArrangementsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$4.ArrangementsHttpService }]; } });

class LoanMapperService {
    constructor(configuration) {
        this.configuration = configuration;
        /**
         * Loan mapper func
         */
        this.toLoanModel = this._toLoanModel.bind(this);
    }
    _toLoanModel(loan) {
        const loanType = loan.loanType;
        const config = this.configuration.loanTypeMapping[loanType];
        if (!config) {
            throw new Error(`[bb-loans]: "${loanType}" type was not configured for loans journey`);
        }
        return Object.assign(Object.assign({}, loan), { viewType: config.viewType, loanTypeAlias: config.typeAlias || loanType });
    }
}
/** @nocollapse */ LoanMapperService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoanMapperService, deps: [{ token: LoansJourneyConfigurationService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ LoanMapperService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoanMapperService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoanMapperService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: LoansJourneyConfigurationService }]; } });

class LoansService {
    constructor(loansHttpService, loanMapper, configurationService) {
        this.loansHttpService = loansHttpService;
        this.loanMapper = loanMapper;
        this.configurationService = configurationService;
    }
    getLoans(from) {
        const size = this.configurationService.loanList.itemsPerPage;
        return this.loansHttpService.getLoans({ from, size }, 'response').pipe(map((response) => ({
            items: response.body.loans.map(this.loanMapper.toLoanModel),
            totalCount: this.getTotalCount(response),
        })));
    }
    getLoanById(loanId) {
        return this.loansHttpService.getLoanById({ loanId }).pipe(map(this.loanMapper.toLoanModel));
    }
    getLoansAmount() {
        return this.loansHttpService.headLoans('response').pipe(map(this.getTotalCount));
    }
    getAmortizationSchedule(params) {
        return this.loansHttpService.getAmortizationSchedule(params, 'response').pipe(map((response) => ({
            items: response.body.payments,
            totalCount: this.getTotalCount(response),
        })));
    }
    getAmortizationPayment(params) {
        return this.loansHttpService.getAmortizationPayment(params);
    }
    getTotalCount({ headers }) {
        const totalCount = headers.get('x-total-count');
        if (!totalCount) {
            throw new Error('[bb-loans]: Invalid `x-total-count` header param');
        }
        return parseInt(totalCount, 10);
    }
}
/** @nocollapse */ LoansService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansService, deps: [{ token: i1$5.LoansHttpService }, { token: LoanMapperService }, { token: LoansJourneyConfigurationService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ LoansService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$5.LoansHttpService }, { type: LoanMapperService }, { type: LoansJourneyConfigurationService }]; } });

const notificationsTitlesConfig = {
    updateAliasSuccess: $localize `:Loan update alias success notification title@@loans.notifications.alias-update.success.title:Account Alias updated successfully`,
    updateAliasToDefaultSuccess: $localize `:Loan update alias to product name success notification title@@loans.notifications.alias-update-to-product-name.success.title:Account Alias reset to default product name`,
    updateAliasError: $localize `:Loan update alias error notification title@@loans.notifications.alias-update.error.title:An unexpected error occurred while performing this action`,
};

class LoansEffects {
    constructor(actions$, store, loansService, arrangementsService, notificationService, router) {
        this.actions$ = actions$;
        this.store = store;
        this.loansService = loansService;
        this.arrangementsService = arrangementsService;
        this.notificationService = notificationService;
        this.router = router;
        this.fetchLoans$ = createEffect(() => this.actions$.pipe(ofType(loadLoans), switchMap(({ page, append }) => this.loansService.getLoans(page).pipe(map((response) => loadLoansSuccess({ response, append })), catchErrorWithLog((error) => of(loadLoansError({ error: error.message || 'Loans fetch error' })))))));
        this.redirectToDetailsFromList$ = createEffect(() => this.actions$.pipe(ofType(loadLoansSuccess), tap(({ response: { totalCount, items } }) => {
            if (totalCount === 1) {
                this.router.navigateByUrl('loans/details/' + items[0].id);
            }
        })), { dispatch: false });
        this.fetchLoanById$ = createEffect(() => this.actions$.pipe(ofType(fetchLoanById), switchMap(({ id }) => this.loansService.getLoanById(id).pipe(map((loan) => {
            setLoan(loan);
            return fetchLoanByIdSuccess({ loan });
        }), catchErrorWithLog((error) => of(fetchLoanByIdError({ error: error.message || 'Loan fetch error' })))))));
        this.fetchAmountOfLoans$ = createEffect(() => this.actions$.pipe(ofType(fetchAmountOfLoans), withLatestFrom(this.store.select(selectLoansTotalCount)), switchMap(([, totalCountFromStore]) => {
            if (totalCountFromStore !== undefined) {
                return of(fetchAmountOfLoansSuccess({ totalCount: totalCountFromStore }));
            }
            return this.loansService.getLoansAmount().pipe(map((totalCount) => fetchAmountOfLoansSuccess({ totalCount })), catchError(() => this.loansService.getLoans(0).pipe(map(({ totalCount }) => fetchAmountOfLoansSuccess({ totalCount })), catchErrorWithLog(() => of(fetchAmountOfLoansError())))));
        })));
        this.updateLoanAlias$ = createEffect(() => this.actions$.pipe(ofType(updateLoanAlias), withLatestFrom(this.store.select(selectLoan)), switchMap(([{ alias }, loan]) => {
            const id = loan.id;
            return this.arrangementsService.updateUserPreferences(id, alias).pipe(map(() => updateLoanAliasSuccess({ alias, id })), catchError((error) => of(updateLoanAliasError({ error: error.message || 'Update alias error' }))), takeUntil(this.actions$.pipe(ofType(updateLoanAliasCancel))));
        })));
        this.updateLoanAfterAliasUpdate$ = createEffect(() => this.actions$.pipe(ofType(updateLoanAliasSuccess), map(({ id }) => fetchLoanById({ id }))));
        this.notifyAliasUpdateSuccess$ = createEffect(() => this.actions$.pipe(ofType(updateLoanAliasSuccess), tap(({ alias }) => this.notificationService.showNotification({
            header: alias
                ? notificationsTitlesConfig.updateAliasSuccess
                : notificationsTitlesConfig.updateAliasToDefaultSuccess,
            message: '',
            modifier: 'success',
        }))), { dispatch: false });
        this.notifyAliasUpdateError$ = createEffect(() => this.actions$.pipe(ofType(updateLoanAliasError), tap(() => this.notificationService.showNotification({
            header: notificationsTitlesConfig.updateAliasError,
            message: '',
            modifier: 'error',
        }))), { dispatch: false });
    }
}
/** @nocollapse */ LoansEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansEffects, deps: [{ token: i1$6.Actions }, { token: i1.Store }, { token: LoansService }, { token: ArrangementsService }, { token: i5$2.NotificationService }, { token: i1$2.Router }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ LoansEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$6.Actions }, { type: i1.Store }, { type: LoansService }, { type: ArrangementsService }, { type: i5$2.NotificationService }, { type: i1$2.Router }]; } });

class LoansStoreModule {
}
/** @nocollapse */ LoansStoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansStoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ LoansStoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansStoreModule, imports: [i1.StoreFeatureModule, i1$6.EffectsFeatureModule] });
/** @nocollapse */ LoansStoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansStoreModule, providers: [LoansStoreService], imports: [[StoreModule.forFeature(storeKey, loansReducer), EffectsModule.forFeature([LoansEffects])]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansStoreModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [StoreModule.forFeature(storeKey, loansReducer), EffectsModule.forFeature([LoansEffects])],
                    providers: [LoansStoreService],
                }]
        }] });

class PaymentScheduleEffects {
    constructor(actions$, loansService) {
        this.actions$ = actions$;
        this.loansService = loansService;
        this.fetchAmortizationSchedule$ = createEffect(() => this.actions$.pipe(ofType(fetchAmortizationSchedule), switchMap(({ params: { loanId, from, append, size } }) => this.loansService.getAmortizationSchedule({ from, size, loanId }).pipe(map((response) => fetchAmortizationScheduleSuccess({ response, append })), catchErrorWithLog((error) => of(fetchAmortizationScheduleError({ error: error.message || 'Amortization schedule fetch error' })))))));
        this.fetchAmortizationPayment$ = createEffect(() => this.actions$.pipe(ofType(fetchAmortizationPayment), switchMap(({ params }) => this.loansService.getAmortizationPayment(params).pipe(map((amortizedPayment) => fetchAmortizationPaymentSuccess({ amortizedPayment })), catchErrorWithLog((error) => of(fetchAmortizationPaymentError({ error: error.message || 'Amortization payment fetch error' })))))));
    }
}
/** @nocollapse */ PaymentScheduleEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentScheduleEffects, deps: [{ token: i1$6.Actions }, { token: LoansService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ PaymentScheduleEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentScheduleEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentScheduleEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$6.Actions }, { type: LoansService }]; } });

class PaymentScheduleStoreModule {
}
/** @nocollapse */ PaymentScheduleStoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentScheduleStoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ PaymentScheduleStoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentScheduleStoreModule, imports: [i1.StoreFeatureModule, i1$6.EffectsFeatureModule] });
/** @nocollapse */ PaymentScheduleStoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentScheduleStoreModule, providers: [PaymentScheduleStoreService], imports: [[
            StoreModule.forFeature(paymentScheduleStoreKey, paymentScheduleReducer),
            EffectsModule.forFeature([PaymentScheduleEffects]),
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentScheduleStoreModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        StoreModule.forFeature(paymentScheduleStoreKey, paymentScheduleReducer),
                        EffectsModule.forFeature([PaymentScheduleEffects]),
                    ],
                    providers: [PaymentScheduleStoreService],
                }]
        }] });

const components = [
    LoanDetailsWrapperComponent,
    LoanSummaryComponent,
    LoanTransactionsWrapperComponent,
    LoanInfoWrapperComponent,
    PaymentScheduleWrapperComponent,
    PaymentScheduleDetailsWrapperComponent,
    PaymentScheduleDetailsModalHeaderComponent,
    LoanInfoRetailComponent,
];
const modules = [
    LoanInfoPrintButtonModule,
    LoanItemNameModule,
    TransactionsListWidgetModule,
    LoanInfoItemModule,
    LoansHeadingModule,
    LoansCollectionUiAngModule,
    AccountStatementBusinessWidgetModule,
];
class LoansJourneyModule {
    static forRoot(data = { routes: loansRoutes }) {
        return {
            ngModule: LoansJourneyModule,
            providers: [provideRoutes(data.routes)],
        };
    }
}
/** @nocollapse */ LoansJourneyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansJourneyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ LoansJourneyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansJourneyModule, declarations: [LoanDetailsWrapperComponent,
        LoanSummaryComponent,
        LoanTransactionsWrapperComponent,
        LoanInfoWrapperComponent,
        PaymentScheduleWrapperComponent,
        PaymentScheduleDetailsWrapperComponent,
        PaymentScheduleDetailsModalHeaderComponent,
        LoanInfoRetailComponent], imports: [CommonModule, RouterModule, LoansStoreModule, PaymentScheduleStoreModule, EntitlementsModule, LoanInfoPrintButtonModule,
        LoanItemNameModule,
        TransactionsListWidgetModule,
        LoanInfoItemModule,
        LoansHeadingModule,
        LoansCollectionUiAngModule,
        AccountStatementBusinessWidgetModule], exports: [LoanDetailsWrapperComponent,
        LoanSummaryComponent,
        LoanTransactionsWrapperComponent,
        LoanInfoWrapperComponent,
        PaymentScheduleWrapperComponent,
        PaymentScheduleDetailsWrapperComponent,
        PaymentScheduleDetailsModalHeaderComponent,
        LoanInfoRetailComponent, LoanInfoPrintButtonModule,
        LoanItemNameModule,
        TransactionsListWidgetModule,
        LoanInfoItemModule,
        LoansHeadingModule,
        LoansCollectionUiAngModule,
        AccountStatementBusinessWidgetModule] });
/** @nocollapse */ LoansJourneyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansJourneyModule, providers: [LoansJourneyConfigurationService, LoanMapperService, LoansService, ArrangementsService], imports: [[CommonModule, RouterModule, LoansStoreModule, PaymentScheduleStoreModule, EntitlementsModule, ...modules], LoanInfoPrintButtonModule,
        LoanItemNameModule,
        TransactionsListWidgetModule,
        LoanInfoItemModule,
        LoansHeadingModule,
        LoansCollectionUiAngModule,
        AccountStatementBusinessWidgetModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansJourneyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components],
                    imports: [CommonModule, RouterModule, LoansStoreModule, PaymentScheduleStoreModule, EntitlementsModule, ...modules],
                    exports: [...components, ...modules],
                    providers: [LoansJourneyConfigurationService, LoanMapperService, LoansService, ArrangementsService],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { LOAN_JOURNEY_COMMUNICATOR, LoadingState, LoanDetailsBaseComponent, LoanDetailsWrapperComponent, LoanInfoRetailComponent, LoanInfoWrapperComponent, LoanSummaryComponent, LoanTransactionsWrapperComponent, LoansJourneyConfigurationService, LoansJourneyConfigurationToken, LoansJourneyModule, LoansStoreService, PaymentScheduleDetailsModalHeaderComponent, PaymentScheduleDetailsWrapperComponent, PaymentScheduleStoreService, PaymentScheduleWrapperComponent, loansConfigurationDefault, loansRoutes };
//# sourceMappingURL=backbase-retail-loans-journey-ang.js.map
