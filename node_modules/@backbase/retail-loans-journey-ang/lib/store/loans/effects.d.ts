import { Router } from '@angular/router';
import { Actions } from '@ngrx/effects';
import { Store } from '@ngrx/store';
import { Loan } from '@backbase/loans-collection-ui-ang';
import { NotificationService } from '@backbase/ui-ang/notification';
import { LoansStoreState } from './store.model';
import { ArrangementsService } from '../../services/arrangements.service';
import { LoansService } from '../../services/loans.service';
import * as i0 from "@angular/core";
export declare class LoansEffects {
    private readonly actions$;
    private readonly store;
    private readonly loansService;
    private readonly arrangementsService;
    private readonly notificationService;
    private readonly router;
    constructor(actions$: Actions, store: Store<LoansStoreState>, loansService: LoansService, arrangementsService: ArrangementsService, notificationService: NotificationService, router: Router);
    fetchLoans$: import("rxjs").Observable<({
        response: import("@backbase/retail-loans-journey-ang").LoansResponse;
        append: boolean;
    } & import("@ngrx/store/src/models").TypedAction<"[Loans API] fetch loans succeed">) | ({
        error: string;
    } & import("@ngrx/store/src/models").TypedAction<"[Loans API] fetch loans error">)> & import("@ngrx/effects").CreateEffectMetadata;
    redirectToDetailsFromList$: import("rxjs").Observable<{
        response: import("@backbase/retail-loans-journey-ang").LoansResponse;
        append: boolean;
    } & import("@ngrx/store/src/models").TypedAction<"[Loans API] fetch loans succeed">> & import("@ngrx/effects").CreateEffectMetadata;
    fetchLoanById$: import("rxjs").Observable<({
        loan: Loan;
    } & import("@ngrx/store/src/models").TypedAction<"[Loans API] fetch loan by id succeed">) | ({
        error: string;
    } & import("@ngrx/store/src/models").TypedAction<"[Loans API] fetch loan by id error">)> & import("@ngrx/effects").CreateEffectMetadata;
    fetchAmountOfLoans$: import("rxjs").Observable<import("@ngrx/store/src/models").TypedAction<"[Loans API] fetch amount of loans error"> | ({
        totalCount: number;
    } & import("@ngrx/store/src/models").TypedAction<"[Loans API] fetch amount of loans succeed">)> & import("@ngrx/effects").CreateEffectMetadata;
    updateLoanAlias$: import("rxjs").Observable<({
        alias: string;
        id: string;
    } & import("@ngrx/store/src/models").TypedAction<"[Product Summary API] Update alias succeed">) | ({
        error: string;
    } & import("@ngrx/store/src/models").TypedAction<"[Product Summary API] Update alias error">)> & import("@ngrx/effects").CreateEffectMetadata;
    updateLoanAfterAliasUpdate$: import("rxjs").Observable<{
        id: string;
    } & import("@ngrx/store/src/models").TypedAction<"[Loans API] fetch loan by id">> & import("@ngrx/effects").CreateEffectMetadata;
    notifyAliasUpdateSuccess$: import("rxjs").Observable<{
        alias: string;
        id: string;
    } & import("@ngrx/store/src/models").TypedAction<"[Product Summary API] Update alias succeed">> & import("@ngrx/effects").CreateEffectMetadata;
    notifyAliasUpdateError$: import("rxjs").Observable<{
        error: string;
    } & import("@ngrx/store/src/models").TypedAction<"[Product Summary API] Update alias error">> & import("@ngrx/effects").CreateEffectMetadata;
    static ɵfac: i0.ɵɵFactoryDeclaration<LoansEffects, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<LoansEffects>;
}
