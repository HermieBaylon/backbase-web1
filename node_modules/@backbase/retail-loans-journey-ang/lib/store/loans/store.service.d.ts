import { Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import { Loan } from '@backbase/loans-collection-ui-ang';
import { InputInlineEditState } from '@backbase/ui-ang/input-inline-edit';
import { CallState } from '../../models/call-state.model';
import { LoansStoreState } from './store.model';
import * as i0 from "@angular/core";
export declare class LoansStoreService {
    private readonly store;
    /**
     * Stream of api call state for fetching loans
     */
    readonly loansCallState$: Observable<CallState>;
    /**
     * Stream of loans
     */
    readonly loans$: Observable<Loan[]>;
    /**
     * Stream of api call state for fetching loan item
     */
    readonly loanCallState$: Observable<CallState>;
    /**
     * Stream of loan item
     */
    readonly loan$: Observable<Loan | undefined>;
    /**
     * Stream indicates whether to show/hide navigate to overview button
     */
    readonly showNavigateToOverview$: Observable<boolean>;
    /**
     * Stream represents current loaded page for loan list
     */
    readonly loansCurrentPage$: Observable<number>;
    /**
     * Stream represents total pages count for loan list
     */
    readonly loansTotalCount$: Observable<number | undefined>;
    /**
     * Stream of alias edit states (mapped from call state)
     */
    readonly aliasEditState$: Observable<InputInlineEditState>;
    constructor(store: Store<LoansStoreState>);
    /**
     * Fetch loans
     */
    fetchLoans(page: number, append?: boolean): void;
    /**
     * Fetch loan by id
     */
    fetchLoanById(id: string): void;
    /**
     * Fetch amount of loans
     */
    fetchAmountOfLoans(): void;
    /**
     * Update alias
     *
     * @param alias
     */
    updateAlias(alias: string): void;
    /**
     * Cancel alias update
     */
    cancelAliasUpdate(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<LoansStoreService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<LoansStoreService>;
}
