import { Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import { PresentationAmortizationPayment, GetAmortizationPaymentRequestParams } from '@backbase/data-ang/loans';
import { CallState } from '../../models/call-state.model';
import { GetAmortizationScheduleParams, PaymentScheduleState } from './store.model';
import * as i0 from "@angular/core";
export declare class PaymentScheduleStoreService {
    private readonly store;
    /**
     * Stream of api call state for fetching scheduled amortized payments
     */
    readonly amortizedPaymentsCallState$: Observable<CallState>;
    /**
     * Stream of scheduled amortized payments
     */
    readonly amortizedPayments$: Observable<PresentationAmortizationPayment[]>;
    /**
     * Stream of api call state for fetching scheduled amortized payment
     */
    readonly amortizedPaymentCallState$: Observable<CallState>;
    /**
     * Stream of scheduled amortized payment
     */
    readonly amortizedPayment$: Observable<PresentationAmortizationPayment | undefined>;
    /**
     * Stream represents total pages count for scheduled amortized payments
     */
    readonly amortizedPaymentsTotalCount$: Observable<number>;
    /**
     * Stream represents current loaded page for payment schedule table/list
     */
    readonly amortizedPaymentsCurrentPage$: Observable<number>;
    constructor(store: Store<PaymentScheduleState>);
    /**
     * Fetch amortized payment schedule
     */
    fetchAmortizationSchedule(params: GetAmortizationScheduleParams): void;
    /**
     * Fetch amortized payment
     */
    fetchAmortizationPayment(params: GetAmortizationPaymentRequestParams): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentScheduleStoreService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PaymentScheduleStoreService>;
}
