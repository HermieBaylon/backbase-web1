import { InjectionToken, OnDestroy } from '@angular/core';
import { TransactionClientHttpService } from '@backbase/data-ang/transactions';
import { BehaviorSubject, Observable } from 'rxjs';
import { TransactionsListOptions } from '../model/transactions-list-options.model';
import { TransactionsFilterOptions } from '../model/transactions-filter-options.model';
import { TransactionsList } from '../model/transactions-list.model';
import { TransactionsSortOptions } from '../model/transactions-sort-options.model';
import { AccountsService } from './accounts.service';
import { HttpResponse } from '@angular/common/http';
import { EndpointType } from './widget-properties.service';
import { DeprecationsService } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
export declare enum LoadingState {
    NotLoaded = "NotLoaded",
    LoadingMore = "LoadingMore",
    LoadingPage = "LoadingPage",
    Loading = "Loading",
    Loaded = "Loaded"
}
export declare const showDetailsConfigToken: InjectionToken<boolean>;
export declare class TransactionsService implements OnDestroy {
    private readonly transactionsDataHttpService;
    private readonly accountService;
    private readonly deprecationsService;
    private readonly locale;
    private readonly selectedAccount;
    private readonly pageSize;
    private readonly initialListOptions;
    private readonly options;
    private readonly listRefresh;
    private readonly listOptions;
    private readonly exportOptions;
    private readonly showPendingTransactionsOnTop;
    private readonly getOrPostEndpoint;
    private readonly transactionsList;
    readonly loadingState: BehaviorSubject<LoadingState>;
    readonly isFilterApplied: Observable<boolean>;
    readonly isSearchApplied: Observable<boolean>;
    private loadTransactions;
    private exportTransactions;
    search(query: string): void;
    clearSearch(): void;
    filter(filterOptions: TransactionsFilterOptions): void;
    clearFilter(): void;
    exportToType(type: string): Observable<HttpResponse<Blob>>;
    loadMore(): void;
    sort(sortOptions: TransactionsSortOptions): void;
    pageChange(page: number): void;
    getTransactionsFrom(selectedAccount: Observable<string[]>, pageSize: Observable<number>, initialListOptions?: Observable<Partial<TransactionsListOptions>>, showPendingTransactionsOnTop?: Observable<boolean>, getOrPostEndpoint?: Observable<EndpointType>): void;
    getCurrentPage(): Observable<number>;
    getTransactionsList(): Observable<TransactionsList>;
    retryFiltering(): void;
    refreshTransactions(): void;
    private get isUsingPostEndpoints();
    ngOnDestroy(): void;
    constructor(transactionsDataHttpService: TransactionClientHttpService, accountService: AccountsService, deprecationsService: DeprecationsService, locale: string);
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionsService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TransactionsService>;
}
