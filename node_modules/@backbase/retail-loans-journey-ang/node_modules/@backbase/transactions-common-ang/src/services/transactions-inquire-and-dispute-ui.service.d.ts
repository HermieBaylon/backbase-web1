import { InquireAndDisputeFile, InquireAndDisputeTopics, Message, MessageForm } from '../model/messages.model';
import { TransactionsDetailsLoadingState } from '../model/transactions-details.model';
import { MessagesService } from '../services/messages.service';
import '@angular/localize/init';
import { Observable } from 'rxjs';
import { Transaction } from '../model/transaction.model';
import * as i0 from "@angular/core";
export declare class TransactionsInquireAndDisputeUIService {
    private readonly messagesService;
    private showReportSubject;
    private readonly DEFAULT_MESSAGE;
    showReport: Observable<boolean>;
    message: MessageForm;
    reportState: TransactionsDetailsLoadingState;
    private subjectReportMap;
    formatMessage(messageForm: MessageForm, defaultBody: string, inquireAndDisputeTopics: InquireAndDisputeTopics, transaction: Transaction | undefined): Message;
    saveReport(message: Message): Observable<Message | undefined>;
    showReportForm(display: boolean): void;
    cancelReport(): void;
    fileChange(file: File): Observable<string>;
    deleteReportForm(): void;
    fileRemoved(attachment: InquireAndDisputeFile): Observable<string[]>;
    removeAllFiles(): void;
    constructor(messagesService: MessagesService);
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionsInquireAndDisputeUIService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TransactionsInquireAndDisputeUIService>;
}
