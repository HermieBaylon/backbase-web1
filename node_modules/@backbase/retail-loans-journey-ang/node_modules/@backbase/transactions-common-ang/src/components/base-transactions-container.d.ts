import { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';
import { TransactionsBackendError } from '../model/transactions-backend-error.model';
import { TransactionsFilterOptions } from '../model/transactions-filter-options.model';
import { TransactionsList } from '../model/transactions-list.model';
import { LoadingState, TransactionsService } from '../services/transactions.service';
import { EndpointType, PaginationType, WidgetPropertiesService } from '../services/widget-properties.service';
import { Pubsub } from '@backbase/foundation-ang/web-sdk';
import { TransactionsSortOptions } from '../model/transactions-sort-options.model';
import { TransactionsExportConfig, TransactionsExportTypeElement } from '../model/transactions-export-options.model';
import { PendingTransactionsService } from '../services/pending-transactions.service';
import { TransactionCheckImageResponse } from '../model/transactions-check-images.model';
import { Transaction } from '../model/transaction.model';
import { TransactionDetailsService } from '../services/transaction-details.service';
import { TransactionsDetailsLoading } from '../model/transactions-details.model';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { HttpErrorResponse } from '@angular/common/http';
import { InquireAndDisputeTopics } from '../model/messages.model';
import { AvailableFilters, AvailableFiltersConfig } from '../model/available-filters.model';
import { AvailableFiltersConfigService } from '../services/available-filters-config.service';
import { NotificationService } from '@backbase/ui-ang/notification';
import * as i0 from "@angular/core";
export declare class BaseTransactionsContainer implements OnInit, OnDestroy {
    protected readonly model: TransactionsService;
    protected readonly widgetProperties: WidgetPropertiesService;
    protected readonly cd: ChangeDetectorRef;
    protected readonly eventBusService: Pubsub;
    protected readonly notificationService: NotificationService;
    protected readonly pendingTransactionsService: PendingTransactionsService;
    protected readonly transactionDetailsService: TransactionDetailsService;
    protected readonly availableFiltersConfigService: AvailableFiltersConfigService;
    protected readonly showDetailsConfig?: boolean | undefined;
    notificationErrorUpdateHeaderTemplate: TemplateRef<string> | undefined;
    notificationErrorUpdateMessageTemplate: TemplateRef<string> | undefined;
    notificationServerErrorHeader: TemplateRef<string> | undefined;
    notificationServerErrorMessage: TemplateRef<string> | undefined;
    /**
     * Reference to instance of customizable component.
     */
    readonly hostRef: this;
    private readonly apiKeySubject;
    /**
     * API key needed for the google maps to work.
     */
    set googleAPIKey(key: string | undefined);
    /**
     * Observable of the arrangement ID this component should retrieve the transactions for.
     */
    selectedAccount: Observable<Array<string>> | undefined;
    /**
     * Observable of options to initialize the filter with.  By default, it is empty.
     */
    initialFilterOptions: Observable<TransactionsFilterOptions>;
    /**
     * Observable of options to initialize the sort options with.  By default, it is empty.
     */
    initialSortOptions: Observable<TransactionsSortOptions | undefined>;
    /**
     * input parameters that will take the place of model properties--
     */
    set pageSizeValue(value: number);
    set maxNavPagesValue(value: number);
    set paginationTypeValue(value: string);
    set showControlsValue(value: boolean);
    set showChangeCategoryValue(value: boolean);
    set showPendingTransactionsOnTopValue(value: boolean);
    set showCheckImageValue(value: boolean);
    set showManageNotesValue(value: boolean);
    set getOrPostEndpointsValue(value: EndpointType);
    set disputeByBillingStatusValue(value: string | boolean);
    set disputeEligibilityDaysValue(value: number);
    set disputeTransactionTypesValue(value: string | undefined);
    set enableDisputeAndInquiryValue(value: string | boolean);
    set availableFiltersValue(availableFiltersConfig: AvailableFiltersConfig);
    inquireTopicIdValue: string | undefined;
    disputeTopicIdValue: string | undefined;
    transactionSelected: EventEmitter<any>;
    transactionsLoaded: EventEmitter<TransactionsList | null>;
    private pageSizeSubject;
    private maxNavPagesSubject;
    private paginationTypeSubject;
    private showControlsSubject;
    private showChangeCategorySubject;
    private showPendingTransactionsOnTopSubject;
    private showCheckImageSubject;
    private showManageNotesSubject;
    private getOrPostEndpointsSubject;
    private disputeByBillingStatusSubject;
    private disputeEligibilityDaysSubject;
    private disputeTransactionTypesSubject;
    private enableDisputeAndInquirySubject;
    private inquireTopicIdSubject;
    private disputeTopicIdSubject;
    /** end input parameters--- */
    /**
     * Information about the backend error, if it occurs.
     */
    /**
     * @deprecated will be removed in 11.0.0
     */
    get error(): TransactionsBackendError | undefined;
    errors: TransactionsBackendError[] | undefined;
    /**
     * Observable of the transactions list.
     */
    transactionsList: Observable<TransactionsList | null> | undefined;
    /**
     * Observable of the transactions list.
     */
    pendingTransactionsList: Observable<TransactionsList | null> | undefined;
    /**
     * Observable of the current page.
     */
    currentPage: Observable<number> | undefined;
    /**
     * Observable of the loading state of the service.
     */
    loadingState: Observable<LoadingState> | undefined;
    /**
     * Observable of the loading state of the pending transactions service.
     */
    loadingPendingState: Observable<LoadingState> | undefined;
    loadingDetails: Observable<TransactionsDetailsLoading> | undefined;
    /**
     * Events registered to transactions widgets
     */
    private registeredRefreshTransactionsListEvents;
    private unsubscribeSubject;
    /**
     * Subject that listens the transactionsList observable and provides the export types
     */
    exportConfig: BehaviorSubject<TransactionsExportConfig>;
    exportErrorMessagesRef: {
        [key: string]: TemplateRef<string> | undefined;
    };
    storedExportType: TransactionsExportTypeElement | undefined;
    numberOfResultsFound: ReplaySubject<number>;
    numberOfResultsDisplayed: ReplaySubject<number>;
    checkImagesList: Observable<TransactionCheckImageResponse> | undefined;
    transactionDetailsLoadingStatus: Observable<TransactionsDetailsLoading> | undefined;
    availableFiltersConfig: ReplaySubject<AvailableFiltersConfig>;
    availableFilters: Observable<AvailableFilters>;
    private readonly refreshTransactionsListHandler;
    private clearRefreshTransactionsListEvents;
    retry(): void;
    ngOnDestroy(): void;
    /**
     * @deprecated will be removed in 11.0.0
     */
    handleError: (errorResponse: HttpErrorResponse) => Observable<{
        items: never[];
        totalCount: number;
    }>;
    get pageSize(): Observable<number>;
    get maxNavPages(): Observable<number>;
    get showControls(): Observable<boolean>;
    get isFilterApplied(): Observable<boolean>;
    get isSearchApplied(): Observable<boolean>;
    get paginationType(): Observable<PaginationType>;
    get showPendingTransactionsOnTop(): Observable<boolean>;
    get showChangeCategory(): Observable<boolean>;
    get showCheckImage(): Observable<boolean>;
    get showManageNotes(): Observable<boolean>;
    get getOrPostEndpoint(): Observable<EndpointType>;
    get gmapsAPIKey(): Observable<string>;
    get enableDisputeAndInquiry(): Observable<boolean>;
    get disputeByBillingStatus(): Observable<boolean>;
    get disputeEligibilityDays(): Observable<number>;
    get disputeTransactionTypes(): Observable<Array<string>>;
    private inquireTopicId;
    private disputeTopicId;
    inquireAndDisputeTopics: Observable<InquireAndDisputeTopics>;
    onLoadMore(): void;
    ngOnInit(): void;
    private configureTransctionsDetailsOutputBehaviour;
    private sumTransactionsResults;
    onPageChange(page: number): void;
    onSearch(query: string): void;
    onFilter(filterOptions: TransactionsFilterOptions): void;
    onSort(sortOptions: TransactionsSortOptions): void;
    onPrint(): void;
    onExport(exportType: TransactionsExportTypeElement): void;
    onDetailOpen(transaction: Transaction): void;
    private pushNotification;
    constructor(model: TransactionsService, widgetProperties: WidgetPropertiesService, cd: ChangeDetectorRef, eventBusService: Pubsub, notificationService: NotificationService, pendingTransactionsService: PendingTransactionsService, transactionDetailsService: TransactionDetailsService, availableFiltersConfigService: AvailableFiltersConfigService, showDetailsConfig?: boolean | undefined);
    static ɵfac: i0.ɵɵFactoryDeclaration<BaseTransactionsContainer, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BaseTransactionsContainer, never, never, { "googleAPIKey": "googleAPIKey"; "selectedAccount": "selectedAccount"; "initialFilterOptions": "initialFilterOptions"; "initialSortOptions": "initialSortOptions"; "pageSizeValue": "pageSize"; "maxNavPagesValue": "maxNavPages"; "paginationTypeValue": "paginationType"; "showControlsValue": "showControls"; "showChangeCategoryValue": "showChangeCategory"; "showPendingTransactionsOnTopValue": "showPendingTransactionsOnTop"; "showCheckImageValue": "showCheckImage"; "showManageNotesValue": "showManageNotes"; "getOrPostEndpointsValue": "getOrPostEndpoints"; "disputeByBillingStatusValue": "disputeByBillingStatus"; "disputeEligibilityDaysValue": "disputeEligibilityDays"; "disputeTransactionTypesValue": "disputeTransactionTypes"; "enableDisputeAndInquiryValue": "enableDisputeAndInquiry"; "availableFiltersValue": "availableFiltersConfig"; "inquireTopicIdValue": "inquireTopicId"; "disputeTopicIdValue": "disputeTopicId"; }, { "transactionSelected": "transactionSelected"; "transactionsLoaded": "transactionsLoaded"; }, never>;
}
export declare class TransactionsNoAccountSelectedStateCustomizableDirective extends BbTemplate<BaseTransactionsContainer, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionsNoAccountSelectedStateCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TransactionsNoAccountSelectedStateCustomizableDirective, "[bbTransactionsNoAccountSelectedStateCustomizable]", never, {}, {}, never>;
}
export declare class TransactionsErrorStateCustomizableDirective extends BbTemplate<BaseTransactionsContainer, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionsErrorStateCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TransactionsErrorStateCustomizableDirective, "[bbTransactionsErrorStateCustomizable]", never, {}, {}, never>;
}
