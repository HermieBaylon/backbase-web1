import { EventEmitter, OnInit, ElementRef, ViewContainerRef, OnDestroy } from '@angular/core';
import { DocumentRefSrc, DocumentViewerOptions, DocumentViewerType, NavigationState, Styles } from '../../../model/UI/document-viewer-commons';
import { Observable, BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
export declare class DocumentViewerContainerComponent implements OnInit, OnDestroy {
    private readonly elemRef;
    documentRefSrcs: DocumentRefSrc[];
    set activeDocumentRefIdx(idx: number);
    options?: DocumentViewerOptions;
    close: EventEmitter<void>;
    readonly viewContainer: ViewContainerRef;
    documentSrc$: Observable<string>;
    documentFilename$: Observable<string>;
    documentFiletype$: Observable<DocumentViewerType>;
    navigationState$: Observable<NavigationState>;
    readonly isLoading$: BehaviorSubject<boolean>;
    readonly isHttpError$: BehaviorSubject<boolean>;
    readonly documentType: typeof DocumentViewerType;
    /**
     * Internal
     */
    private readonly activeDocumentRefIdx$;
    private readonly destroy$;
    constructor(elemRef: ElementRef);
    get containerStyles(): Styles | undefined;
    get viewerScale(): number | undefined;
    ngOnInit(): void;
    ngOnDestroy(): void;
    onEscape(): void;
    closeDialog(): void;
    onNavigate(idx: number): void;
    private setDocumentRefChangeSources;
    private setFocus;
    static ɵfac: i0.ɵɵFactoryDeclaration<DocumentViewerContainerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DocumentViewerContainerComponent, "bb-document-viewer-container", never, { "documentRefSrcs": "documentRefSrcs"; "activeDocumentRefIdx": "activeDocumentRefIdx"; "options": "options"; }, { "close": "close"; }, never, never>;
}
