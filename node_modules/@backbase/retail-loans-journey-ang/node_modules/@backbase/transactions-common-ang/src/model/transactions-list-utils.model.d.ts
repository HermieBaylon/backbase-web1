import { HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { TransactionsListOptions, OnLoadAction } from './transactions-list-options.model';
import { TransactionsList } from './transactions-list.model';
export declare const deepEqual: (x: any, y: any) => boolean;
export declare const cacheRequest: <Params, Result>(request: (params: Params) => Observable<Result>) => (source: Observable<Params>) => Observable<Result>;
export declare const multipleAccountsPredicate: (listOptions: TransactionsListOptions) => () => boolean;
export declare const onLoadTransactions: (acc: TransactionsList, curr: {
    transactionsList: TransactionsList;
    onLoad: OnLoadAction;
}) => TransactionsList | {
    httpResponseError: undefined;
    unavailableExportTypesReasonsHeader?: import("@backbase/transactions-common-ang").UnavailableExportTypeReasons | undefined;
    availableExportTypesHeader?: string | undefined;
    sort?: import("@backbase/transactions-common-ang").TransactionsSortOptions | undefined;
    items: import("@backbase/transactions-common-ang").Transaction[];
    totalCount: number;
};
export declare const getNameFromContentDispositionHeader: (response: HttpResponse<Blob>) => string;
