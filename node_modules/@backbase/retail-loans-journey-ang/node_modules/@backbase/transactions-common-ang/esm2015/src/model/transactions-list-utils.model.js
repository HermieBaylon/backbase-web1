import { switchMap, publishReplay, refCount } from 'rxjs/operators';
import { OnLoadAction } from './transactions-list-options.model';
import { TransactionsList } from './transactions-list.model';
export const deepEqual = (x, y) => {
    const ok = Object.keys;
    const tx = typeof x;
    const ty = typeof y;
    return x && y && tx === 'object' && tx === ty
        ? ok(x).length === ok(y).length && ok(x).every((key) => deepEqual(x[key], y[key]))
        : x === y;
};
export const cacheRequest = (request) => (source) => source.pipe(switchMap(request), publishReplay(1), refCount());
export const multipleAccountsPredicate = (listOptions) => () => Array.isArray(listOptions.account.arrangementId);
export const onLoadTransactions = (acc, curr) => curr.onLoad === OnLoadAction.Append ? TransactionsList.concat(acc, curr.transactionsList) : curr.transactionsList;
export const getNameFromContentDispositionHeader = (response) => {
    const contentDisposition = response.headers.get('Content-Disposition');
    let fileName = '';
    if (contentDisposition) {
        const result = /filename[^;=\n]*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/i.exec(contentDisposition);
        fileName = result ? result[2] : '';
    }
    return fileName;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb25zLWxpc3QtdXRpbHMubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3RyYW5zYWN0aW9ucy1jb21tb24tYW5nL3NyYy9tb2RlbC90cmFuc2FjdGlvbnMtbGlzdC11dGlscy5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRSxPQUFPLEVBQTJCLFlBQVksRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzFGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRTdELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQU0sRUFBRSxDQUFNLEVBQVcsRUFBRTtJQUNuRCxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ3ZCLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxDQUFDO0lBQ3BCLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxDQUFDO0lBRXBCLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssUUFBUSxJQUFJLEVBQUUsS0FBSyxFQUFFO1FBQzNDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNsRixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FDdkIsQ0FBaUIsT0FBK0MsRUFBRSxFQUFFLENBQ3BFLENBQUMsTUFBMEIsRUFBc0IsRUFBRSxDQUNqRCxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUVsRSxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxDQUFDLFdBQW9DLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUN0RixLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFFbkQsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsQ0FDaEMsR0FBcUIsRUFDckIsSUFBa0UsRUFDbEUsRUFBRSxDQUNGLElBQUksQ0FBQyxNQUFNLEtBQUssWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDO0FBRXBILE1BQU0sQ0FBQyxNQUFNLG1DQUFtQyxHQUFHLENBQUMsUUFBNEIsRUFBRSxFQUFFO0lBQ2xGLE1BQU0sa0JBQWtCLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUN2RSxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDbEIsSUFBSSxrQkFBa0IsRUFBRTtRQUN0QixNQUFNLE1BQU0sR0FBRyxrRUFBa0UsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUMzRyxRQUFRLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztLQUNwQztJQUVELE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHN3aXRjaE1hcCwgcHVibGlzaFJlcGxheSwgcmVmQ291bnQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBUcmFuc2FjdGlvbnNMaXN0T3B0aW9ucywgT25Mb2FkQWN0aW9uIH0gZnJvbSAnLi90cmFuc2FjdGlvbnMtbGlzdC1vcHRpb25zLm1vZGVsJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uc0xpc3QgfSBmcm9tICcuL3RyYW5zYWN0aW9ucy1saXN0Lm1vZGVsJztcblxuZXhwb3J0IGNvbnN0IGRlZXBFcXVhbCA9ICh4OiBhbnksIHk6IGFueSk6IGJvb2xlYW4gPT4ge1xuICBjb25zdCBvayA9IE9iamVjdC5rZXlzO1xuICBjb25zdCB0eCA9IHR5cGVvZiB4O1xuICBjb25zdCB0eSA9IHR5cGVvZiB5O1xuXG4gIHJldHVybiB4ICYmIHkgJiYgdHggPT09ICdvYmplY3QnICYmIHR4ID09PSB0eVxuICAgID8gb2soeCkubGVuZ3RoID09PSBvayh5KS5sZW5ndGggJiYgb2soeCkuZXZlcnkoKGtleSkgPT4gZGVlcEVxdWFsKHhba2V5XSwgeVtrZXldKSlcbiAgICA6IHggPT09IHk7XG59O1xuXG5leHBvcnQgY29uc3QgY2FjaGVSZXF1ZXN0ID1cbiAgPFBhcmFtcywgUmVzdWx0PihyZXF1ZXN0OiAocGFyYW1zOiBQYXJhbXMpID0+IE9ic2VydmFibGU8UmVzdWx0PikgPT5cbiAgKHNvdXJjZTogT2JzZXJ2YWJsZTxQYXJhbXM+KTogT2JzZXJ2YWJsZTxSZXN1bHQ+ID0+XG4gICAgc291cmNlLnBpcGUoc3dpdGNoTWFwKHJlcXVlc3QpLCBwdWJsaXNoUmVwbGF5KDEpLCByZWZDb3VudCgpKTtcblxuZXhwb3J0IGNvbnN0IG11bHRpcGxlQWNjb3VudHNQcmVkaWNhdGUgPSAobGlzdE9wdGlvbnM6IFRyYW5zYWN0aW9uc0xpc3RPcHRpb25zKSA9PiAoKSA9PlxuICBBcnJheS5pc0FycmF5KGxpc3RPcHRpb25zLmFjY291bnQuYXJyYW5nZW1lbnRJZCk7XG5cbmV4cG9ydCBjb25zdCBvbkxvYWRUcmFuc2FjdGlvbnMgPSAoXG4gIGFjYzogVHJhbnNhY3Rpb25zTGlzdCxcbiAgY3VycjogeyB0cmFuc2FjdGlvbnNMaXN0OiBUcmFuc2FjdGlvbnNMaXN0OyBvbkxvYWQ6IE9uTG9hZEFjdGlvbiB9LFxuKSA9PlxuICBjdXJyLm9uTG9hZCA9PT0gT25Mb2FkQWN0aW9uLkFwcGVuZCA/IFRyYW5zYWN0aW9uc0xpc3QuY29uY2F0KGFjYywgY3Vyci50cmFuc2FjdGlvbnNMaXN0KSA6IGN1cnIudHJhbnNhY3Rpb25zTGlzdDtcblxuZXhwb3J0IGNvbnN0IGdldE5hbWVGcm9tQ29udGVudERpc3Bvc2l0aW9uSGVhZGVyID0gKHJlc3BvbnNlOiBIdHRwUmVzcG9uc2U8QmxvYj4pID0+IHtcbiAgY29uc3QgY29udGVudERpc3Bvc2l0aW9uID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ0NvbnRlbnQtRGlzcG9zaXRpb24nKTtcbiAgbGV0IGZpbGVOYW1lID0gJyc7XG4gIGlmIChjb250ZW50RGlzcG9zaXRpb24pIHtcbiAgICBjb25zdCByZXN1bHQgPSAvZmlsZW5hbWVbXjs9XFxuXSo9KD86KFxcXFw/WydcIl0pKC4qPylcXDF8KD86W15cXHNdKycuKj8nKT8oW147XFxuXSopKS9pLmV4ZWMoY29udGVudERpc3Bvc2l0aW9uKTtcbiAgICBmaWxlTmFtZSA9IHJlc3VsdCA/IHJlc3VsdFsyXSA6ICcnO1xuICB9XG5cbiAgcmV0dXJuIGZpbGVOYW1lO1xufTtcbiJdfQ==