/* eslint-disable no-redeclare*/
export var TransactionsFilterOptions;
(function (TransactionsFilterOptions) {
    function isEmpty(options) {
        return Object.values(options)
            .filter((value) => typeof value !== 'undefined')
            .every((value) => !value || (typeof value === 'object' && isEmpty(value)));
    }
    TransactionsFilterOptions.isEmpty = isEmpty;
    // converts a Date object to `dddd-MM-yy` string format
    // eslint-disable-next-line complexity
    const formatDate = (date) => {
        const year = date.getFullYear().toString();
        const month = (date.getMonth() + 1).toString();
        const day = date.getDate().toString();
        return `${year}-${month[1] ? month : '0' + month[0]}-${day[1] ? day : '0' + day[0]}`;
    };
    function toHttpGetParams(options = {}) {
        const params = {};
        const setIfExists = (paramName, conditionFn, valueFn) => {
            if (conditionFn(options)) {
                params[paramName] = valueFn(options);
            }
        };
        setIfExists('creditDebitIndicator', (option) => option.creditDebitIndicator !== undefined && option.creditDebitIndicator.value !== undefined, (option) => option.creditDebitIndicator.value);
        setIfExists('types', (option) => option.type !== undefined && option.type.value !== undefined, (option) => (Array.isArray(option.type.value) ? option.type.value : [option.type.value]));
        setIfExists('billingStatus', (option) => option.billingStatus !== undefined && option.billingStatus.value !== undefined, (option) => option.billingStatus.value);
        setIfExists('amountGreaterThan', (option) => option.amount && option.amount.from, (option) => option.amount.from);
        setIfExists('amountLessThan', (option) => option.amount && option.amount.to, (option) => option.amount.to);
        setIfExists('bookingDateGreaterThan', (option) => option.date && option.date.from && Object.keys(option.date.from).length, (option) => formatDate(new Date(option.date.from)));
        setIfExists('bookingDateLessThan', (option) => option.date && option.date.to && Object.keys(option.date.to).length, (option) => formatDate(new Date(option.date.to)));
        setIfExists('fromCheckSerialNumber', (option) => option.checkSerialNumber && option.checkSerialNumber.from, (option) => option.checkSerialNumber.from);
        setIfExists('toCheckSerialNumber', (option) => option.checkSerialNumber && option.checkSerialNumber.to, (option) => option.checkSerialNumber.to);
        return params;
    }
    TransactionsFilterOptions.toHttpGetParams = toHttpGetParams;
    // eslint-disable-next-line complexity
    function fromHttpGetParams(params) {
        const options = {};
        if (params.creditDebitIndicator) {
            options.creditDebitIndicator = { value: params.creditDebitIndicator };
        }
        if (params.type) {
            if (Array.isArray(params.type)) {
                options.types = params.type.map((value) => ({ value }));
            }
            else {
                options.types = { value: params.type };
            }
        }
        if (params.billingStatus) {
            options.billingStatus = { value: params.billingStatus };
        }
        if (params.amountGreaterThan) {
            options.amount = { from: parseInt(params.amountGreaterThan, 10) };
        }
        if (params.amountLessThan) {
            options.amount = Object.assign(Object.assign({}, options.amount), { to: parseInt(params.amountLessThan, 10) });
        }
        if (params.bookingDateGreaterThan) {
            options.date = {
                from: params.bookingDateGreaterThan,
            };
        }
        if (params.bookingDateLessThan) {
            options.date = Object.assign(Object.assign({}, options.date), { to: params.bookingDateLessThan });
        }
        if (params.fromCheckSerialNumber) {
            options.checkSerialNumber = {
                from: parseInt(params.fromCheckSerialNumber, 10),
            };
        }
        if (params.toCheckSerialNumber) {
            options.checkSerialNumber = Object.assign(Object.assign({}, options.checkSerialNumber), { to: parseInt(params.toCheckSerialNumber, 10) });
        }
        return options;
    }
    TransactionsFilterOptions.fromHttpGetParams = fromHttpGetParams;
})(TransactionsFilterOptions || (TransactionsFilterOptions = {}));
/* eslint-enable no-redeclare*/
//# sourceMappingURL=data:application/json;base64,