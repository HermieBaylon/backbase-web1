import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../services/dom-attributes.service";
export class DynamicIdDirective {
    constructor(_elRef, _renderer, domAttributesService, cd) {
        this._elRef = _elRef;
        this._renderer = _renderer;
        this.domAttributesService = domAttributesService;
        this.cd = cd;
    }
    ngOnInit() {
        setTimeout(() => {
            this._renderer.setAttribute(this._elRef.nativeElement, 'id', this.domAttributesService.nextId(this.bbDynamicId));
            this.cd.markForCheck();
        });
    }
}
DynamicIdDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DynamicIdDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.DomAttributesService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
DynamicIdDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DynamicIdDirective, selector: "[bbDynamicId]", inputs: { bbDynamicId: "bbDynamicId" }, exportAs: ["bbDynamicId"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DynamicIdDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbDynamicId]',
                    exportAs: 'bbDynamicId',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.DomAttributesService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { bbDynamicId: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1pZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3RyYW5zYWN0aW9ucy1jb21tb24tYW5nL3NyYy9jb21wb25lbnRzL2R5bmFtaWMtaWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFvRCxNQUFNLGVBQWUsQ0FBQzs7O0FBT25HLE1BQU0sT0FBTyxrQkFBa0I7SUFDN0IsWUFDbUIsTUFBa0IsRUFDbEIsU0FBb0IsRUFDcEIsb0JBQTBDLEVBQzFDLEVBQXFCO1FBSHJCLFdBQU0sR0FBTixNQUFNLENBQVk7UUFDbEIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBQzFDLE9BQUUsR0FBRixFQUFFLENBQW1CO0lBQ3JDLENBQUM7SUFJSixRQUFRO1FBQ04sVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ2pILElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztnSEFmVSxrQkFBa0I7b0dBQWxCLGtCQUFrQjs0RkFBbEIsa0JBQWtCO2tCQUo5QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6QixRQUFRLEVBQUUsYUFBYTtpQkFDeEI7NExBU1UsV0FBVztzQkFBbkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgT25Jbml0LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tQXR0cmlidXRlc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9kb20tYXR0cmlidXRlcy5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2JiRHluYW1pY0lkXScsXG4gIGV4cG9ydEFzOiAnYmJEeW5hbWljSWQnLFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljSWREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9lbFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9yZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZG9tQXR0cmlidXRlc1NlcnZpY2U6IERvbUF0dHJpYnV0ZXNTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxuICApIHt9XG5cbiAgQElucHV0KCkgYmJEeW5hbWljSWQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICBuZ09uSW5pdCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLl9lbFJlZi5uYXRpdmVFbGVtZW50LCAnaWQnLCB0aGlzLmRvbUF0dHJpYnV0ZXNTZXJ2aWNlLm5leHRJZCh0aGlzLmJiRHluYW1pY0lkKSk7XG4gICAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=