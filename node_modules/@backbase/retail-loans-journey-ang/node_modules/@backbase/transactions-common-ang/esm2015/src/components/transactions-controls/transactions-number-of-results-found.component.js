import { ChangeDetectionStrategy, Component, Directive, Input } from '@angular/core';
import { LoadingState } from '../../services/transactions.service';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class TransactionsNumberOfResultsFoundComponent {
    constructor() {
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        /**
         * Number of results found after filtering or searching.
         */
        this.numberOfResultsFound = 0;
        /**
         * The loading state of the transactions list.
         */
        this.loadingState = LoadingState.NotLoaded;
        /**
         * Whether filter is applied or not.
         */
        this.isFilterApplied = false;
        /**
         * Whether search is applied or not.
         */
        this.isSearchApplied = false;
    }
    /**
     * Whether loading has finished or not.
     */
    get isLoaded() {
        return this.loadingState === LoadingState.Loaded;
    }
}
TransactionsNumberOfResultsFoundComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsNumberOfResultsFoundComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TransactionsNumberOfResultsFoundComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsNumberOfResultsFoundComponent, selector: "bb-transactions-number-of-results-found", inputs: { numberOfResultsFound: "numberOfResultsFound", loadingState: "loadingState", isFilterApplied: "isFilterApplied", isSearchApplied: "isSearchApplied" }, ngImport: i0, template: "<ng-container\n  bbTransactionsNumberOfResultsFoundCustomizable\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n\n\n<ng-template bbTransactionsNumberOfResultsFoundCustomizable let-hostRef>\n  <div\n    class=\"bb-card__header bb-subtitle\"\n    [ngClass]=\"{ 'sr-only': hostRef.numberOfResultsFound <= 0 }\"\n    i18n=\"Number of results found for the applied filter@@transactions.list.numberOfResultsFound\"\n    *ngIf=\"hostRef.isLoaded && (hostRef.isFilterApplied || hostRef.isSearchApplied)\"\n    aria-live=\"assertive\"\n  >\n    {hostRef.numberOfResultsFound, plural, =0 {No results} =1 {1 result} other {{{ hostRef.numberOfResultsFound }} results}} found\n  </div>\n</ng-template>", directives: [{ type: i0.forwardRef(function () { return TransactionsNumberOfResultsFoundCustomizableDirective; }), selector: "[bbTransactionsNumberOfResultsFoundCustomizable]" }, { type: i0.forwardRef(function () { return i1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i1.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsNumberOfResultsFoundComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transactions-number-of-results-found',
                    templateUrl: 'transactions-number-of-results-found.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { numberOfResultsFound: [{
                type: Input
            }], loadingState: [{
                type: Input
            }], isFilterApplied: [{
                type: Input
            }], isSearchApplied: [{
                type: Input
            }] } });
export class TransactionsNumberOfResultsFoundCustomizableDirective extends BbTemplate {
}
TransactionsNumberOfResultsFoundCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsNumberOfResultsFoundCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsNumberOfResultsFoundCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsNumberOfResultsFoundCustomizableDirective, selector: "[bbTransactionsNumberOfResultsFoundCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsNumberOfResultsFoundCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsNumberOfResultsFoundCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb25zLW51bWJlci1vZi1yZXN1bHRzLWZvdW5kLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdHJhbnNhY3Rpb25zLWNvbW1vbi1hbmcvc3JjL2NvbXBvbmVudHMvdHJhbnNhY3Rpb25zLWNvbnRyb2xzL3RyYW5zYWN0aW9ucy1udW1iZXItb2YtcmVzdWx0cy1mb3VuZC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3RyYW5zYWN0aW9ucy1jb21tb24tYW5nL3NyYy9jb21wb25lbnRzL3RyYW5zYWN0aW9ucy1jb250cm9scy90cmFuc2FjdGlvbnMtbnVtYmVyLW9mLXJlc3VsdHMtZm91bmQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUNuRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7OztBQU8zRCxNQUFNLE9BQU8seUNBQXlDO0lBTHREO1FBTUU7O1dBRUc7UUFDTSxZQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3hCOztXQUVHO1FBQ00seUJBQW9CLEdBQUcsQ0FBQyxDQUFDO1FBQ2xDOztXQUVHO1FBQ00saUJBQVksR0FBaUIsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUM3RDs7V0FFRztRQUNNLG9CQUFlLEdBQUcsS0FBSyxDQUFDO1FBQ2pDOztXQUVHO1FBQ00sb0JBQWUsR0FBRyxLQUFLLENBQUM7S0FRbEM7SUFOQzs7T0FFRztJQUNILElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFlBQVksS0FBSyxZQUFZLENBQUMsTUFBTSxDQUFDO0lBQ25ELENBQUM7O3VJQTNCVSx5Q0FBeUM7MkhBQXpDLHlDQUF5QywrT0NUdEQsZ3JCQWdCYywwREQwQkQscURBQXFEOzRGQWpDckQseUNBQXlDO2tCQUxyRCxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx5Q0FBeUM7b0JBQ25ELFdBQVcsRUFBRSxxREFBcUQ7b0JBQ2xFLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNoRDs4QkFTVSxvQkFBb0I7c0JBQTVCLEtBQUs7Z0JBSUcsWUFBWTtzQkFBcEIsS0FBSztnQkFJRyxlQUFlO3NCQUF2QixLQUFLO2dCQUlHLGVBQWU7c0JBQXZCLEtBQUs7O0FBYVIsTUFBTSxPQUFPLHFEQUFzRCxTQUFRLFVBRzFFOzttSkFIWSxxREFBcUQ7dUlBQXJELHFEQUFxRDs0RkFBckQscURBQXFEO2tCQUhqRSxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxrREFBa0Q7aUJBQzdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRGlyZWN0aXZlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9hZGluZ1N0YXRlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvdHJhbnNhY3Rpb25zLnNlcnZpY2UnO1xuaW1wb3J0IHsgQmJUZW1wbGF0ZSB9IGZyb20gJ0BiYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItdHJhbnNhY3Rpb25zLW51bWJlci1vZi1yZXN1bHRzLWZvdW5kJyxcbiAgdGVtcGxhdGVVcmw6ICd0cmFuc2FjdGlvbnMtbnVtYmVyLW9mLXJlc3VsdHMtZm91bmQuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgVHJhbnNhY3Rpb25zTnVtYmVyT2ZSZXN1bHRzRm91bmRDb21wb25lbnQge1xuICAvKipcbiAgICogUmVmZXJlbmNlIHRvIGluc3RhbmNlIG9mIGN1c3RvbWl6YWJsZSBjb21wb25lbnQuXG4gICAqL1xuICByZWFkb25seSBob3N0UmVmID0gdGhpcztcbiAgLyoqXG4gICAqIE51bWJlciBvZiByZXN1bHRzIGZvdW5kIGFmdGVyIGZpbHRlcmluZyBvciBzZWFyY2hpbmcuXG4gICAqL1xuICBASW5wdXQoKSBudW1iZXJPZlJlc3VsdHNGb3VuZCA9IDA7XG4gIC8qKlxuICAgKiBUaGUgbG9hZGluZyBzdGF0ZSBvZiB0aGUgdHJhbnNhY3Rpb25zIGxpc3QuXG4gICAqL1xuICBASW5wdXQoKSBsb2FkaW5nU3RhdGU6IExvYWRpbmdTdGF0ZSA9IExvYWRpbmdTdGF0ZS5Ob3RMb2FkZWQ7XG4gIC8qKlxuICAgKiBXaGV0aGVyIGZpbHRlciBpcyBhcHBsaWVkIG9yIG5vdC5cbiAgICovXG4gIEBJbnB1dCgpIGlzRmlsdGVyQXBwbGllZCA9IGZhbHNlO1xuICAvKipcbiAgICogV2hldGhlciBzZWFyY2ggaXMgYXBwbGllZCBvciBub3QuXG4gICAqL1xuICBASW5wdXQoKSBpc1NlYXJjaEFwcGxpZWQgPSBmYWxzZTtcblxuICAvKipcbiAgICogV2hldGhlciBsb2FkaW5nIGhhcyBmaW5pc2hlZCBvciBub3QuXG4gICAqL1xuICBnZXQgaXNMb2FkZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubG9hZGluZ1N0YXRlID09PSBMb2FkaW5nU3RhdGUuTG9hZGVkO1xuICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tiYlRyYW5zYWN0aW9uc051bWJlck9mUmVzdWx0c0ZvdW5kQ3VzdG9taXphYmxlXScsXG59KVxuZXhwb3J0IGNsYXNzIFRyYW5zYWN0aW9uc051bWJlck9mUmVzdWx0c0ZvdW5kQ3VzdG9taXphYmxlRGlyZWN0aXZlIGV4dGVuZHMgQmJUZW1wbGF0ZTxcbiAgVHJhbnNhY3Rpb25zTnVtYmVyT2ZSZXN1bHRzRm91bmRDb21wb25lbnQsXG4gIHVuZGVmaW5lZFxuPiB7fVxuIiwiPG5nLWNvbnRhaW5lclxuICBiYlRyYW5zYWN0aW9uc051bWJlck9mUmVzdWx0c0ZvdW5kQ3VzdG9taXphYmxlXG4gIFtiYkhvc3RSZWZdPVwiaG9zdFJlZlwiXG4+PC9uZy1jb250YWluZXI+XG5cblxuPG5nLXRlbXBsYXRlIGJiVHJhbnNhY3Rpb25zTnVtYmVyT2ZSZXN1bHRzRm91bmRDdXN0b21pemFibGUgbGV0LWhvc3RSZWY+XG4gIDxkaXZcbiAgICBjbGFzcz1cImJiLWNhcmRfX2hlYWRlciBiYi1zdWJ0aXRsZVwiXG4gICAgW25nQ2xhc3NdPVwieyAnc3Itb25seSc6IGhvc3RSZWYubnVtYmVyT2ZSZXN1bHRzRm91bmQgPD0gMCB9XCJcbiAgICBpMThuPVwiTnVtYmVyIG9mIHJlc3VsdHMgZm91bmQgZm9yIHRoZSBhcHBsaWVkIGZpbHRlckBAdHJhbnNhY3Rpb25zLmxpc3QubnVtYmVyT2ZSZXN1bHRzRm91bmRcIlxuICAgICpuZ0lmPVwiaG9zdFJlZi5pc0xvYWRlZCAmJiAoaG9zdFJlZi5pc0ZpbHRlckFwcGxpZWQgfHwgaG9zdFJlZi5pc1NlYXJjaEFwcGxpZWQpXCJcbiAgICBhcmlhLWxpdmU9XCJhc3NlcnRpdmVcIlxuICA+XG4gICAge2hvc3RSZWYubnVtYmVyT2ZSZXN1bHRzRm91bmQsIHBsdXJhbCwgPTAge05vIHJlc3VsdHN9ID0xIHsxIHJlc3VsdH0gb3RoZXIge3t7IGhvc3RSZWYubnVtYmVyT2ZSZXN1bHRzRm91bmQgfX0gcmVzdWx0c319IGZvdW5kXG4gIDwvZGl2PlxuPC9uZy10ZW1wbGF0ZT4iXX0=