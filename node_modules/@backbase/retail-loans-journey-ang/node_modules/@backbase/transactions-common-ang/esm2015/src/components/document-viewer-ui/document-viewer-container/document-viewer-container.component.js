import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, HostListener, ViewContainerRef, ViewChild, } from '@angular/core';
import { DocumentViewerType, DOCUMENT_LOAD_DELAY_MS, } from '../../../model/UI/document-viewer-commons';
import { ReplaySubject, combineLatest, timer, BehaviorSubject, Subject } from 'rxjs';
import { catchError, distinctUntilChanged, finalize, map, share, switchMap, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../document-viewer-header/document-viewer-header.component";
import * as i2 from "../image-viewer/image-viewer.component";
import * as i3 from "@backbase/ui-ang/loading-indicator";
import * as i4 from "@backbase/ui-ang/empty-state";
import * as i5 from "@angular/cdk/a11y";
import * as i6 from "@angular/common";
export class DocumentViewerContainerComponent {
    constructor(elemRef) {
        this.elemRef = elemRef;
        this.documentRefSrcs = [];
        this.close = new EventEmitter();
        this.isLoading$ = new BehaviorSubject(false);
        this.isHttpError$ = new BehaviorSubject(false);
        this.documentType = DocumentViewerType;
        /**
         * Internal
         */
        this.activeDocumentRefIdx$ = new ReplaySubject(1);
        this.destroy$ = new Subject();
    }
    set activeDocumentRefIdx(idx) {
        this.activeDocumentRefIdx$.next(idx);
    }
    get containerStyles() {
        var _a, _b;
        return (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.container) === null || _b === void 0 ? void 0 : _b.styles;
    }
    get viewerScale() {
        var _a;
        return (_a = this.options) === null || _a === void 0 ? void 0 : _a.scale;
    }
    ngOnInit() {
        this.setDocumentRefChangeSources();
        this.setFocus();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onEscape() {
        this.close.emit();
    }
    closeDialog() {
        this.close.emit();
    }
    onNavigate(idx) {
        this.activeDocumentRefIdx$.next(idx);
    }
    setDocumentRefChangeSources() {
        this.documentSrc$ = this.activeDocumentRefIdx$.pipe(distinctUntilChanged(), tap(() => {
            this.isLoading$.next(true);
            this.isHttpError$.next(false);
        }), switchMap((idx) => combineLatest([this.documentRefSrcs[idx].src, timer(DOCUMENT_LOAD_DELAY_MS)]).pipe(map(([src]) => src), finalize(() => {
            this.isLoading$.next(false);
        }))), catchError((error) => {
            this.isHttpError$.next(true);
            throw error;
        }), share());
        this.documentFilename$ = this.activeDocumentRefIdx$.pipe(map((idx) => this.documentRefSrcs[idx].filename));
        this.documentFiletype$ = this.activeDocumentRefIdx$.pipe(map((idx) => this.documentRefSrcs[idx].filetype));
        this.navigationState$ = this.activeDocumentRefIdx$.pipe(map((idx) => ({ currIdx: idx, total: this.documentRefSrcs.length })));
    }
    setFocus() {
        this.elemRef.nativeElement.focus();
    }
}
DocumentViewerContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DocumentViewerContainerComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
DocumentViewerContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DocumentViewerContainerComponent, selector: "bb-document-viewer-container", inputs: { documentRefSrcs: "documentRefSrcs", activeDocumentRefIdx: "activeDocumentRefIdx", options: "options" }, outputs: { close: "close" }, host: { listeners: { "document:keydown.escape": "onEscape()" } }, viewQueries: [{ propertyName: "viewContainer", first: true, predicate: ["viewerContainer"], descendants: true, read: ViewContainerRef, static: true }], ngImport: i0, template: "<div \n  class=\"bb-document-viewer-container show\" \n  role=\"dialog\" \n  aria-modal=\"true\" \n  tabindex=\"-1\" \n  [ngStyle]=\"containerStyles\" \n  cdkTrapFocus\n  cdkTrapFocusAutoCapture=\"true\"\n  >\n  <div class=\"bb-document-viewer-container__wrapper\">\n    <bb-document-viewer-header \n      data-role=\"document-viewer-header\"\n      [filename]=\"documentFilename$ | async\" \n      [source]=\"documentSrc$ | async\"\n      [filetype]=\"documentFiletype$ | async\" \n      [isLoading]=\"isLoading$ | async\" \n      (close)=\"close.emit()\"\n    ></bb-document-viewer-header>\n\n    <ng-container *ngIf=\"documentSrc$ | async as source\">\n      <ng-container *ngIf=\"!(isLoading$ | async) && !(isHttpError$ | async)\">\n        <div \n          class=\"bb-document-viewer-container-image\" \n          *ngIf=\"documentFiletype$ | async as documentFiletype\"\n          (click)=\"closeDialog()\"\n        >\n          <bb-image-viewer \n            data-role=\"document-viewer-image\"\n            [source]=\"source\" \n            [navigationState]=\"navigationState$ | async\"\n            (navigate)=\"onNavigate($event)\"\n          ></bb-image-viewer>\n        </div>\n      </ng-container>\n    </ng-container>\n\n    <bb-loading-indicator-ui \n      *ngIf=\"isLoading$ | async\"\n      class=\"bb-document-viewer-container__state\" \n      data-role=\"document-viewer-loading-state\"\n      loaderSize=\"lg\">\n    </bb-loading-indicator-ui>\n\n    <bb-empty-state-ui \n      *ngIf=\"!(isLoading$ | async) && (isHttpError$ | async)\" \n      data-role=\"document-viewer-error-state\"\n      class=\"bb-document-viewer-container__state\" \n      iconColor=\"white\"\n      iconModifier=\"error-outline\"\n      iconSize=\"xxl\"\n      title=\"Unknown Error\" \n      i18n-title=\"Unknown http error title@@document-viewer-component.uknown-error-title\"\n      subtitle=\"Try to reload the page or contact the system administrator\" \n      i18n-subtitle=\"Try to reload the page or contact the system administrator@@document-viewer-component.uknown-error-subtitle\" \n    ></bb-empty-state-ui>\n  </div>\n</div>\n", components: [{ type: i1.DocumentViewerHeaderComponent, selector: "bb-document-viewer-header", inputs: ["filename", "filetype", "source", "isLoading"], outputs: ["close"] }, { type: i2.ImageViewerComponent, selector: "bb-image-viewer", inputs: ["source", "navigationState"], outputs: ["navigate"] }, { type: i3.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i4.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i5.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }, { type: i6.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i6.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DocumentViewerContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-document-viewer-container',
                    templateUrl: './document-viewer-container.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { documentRefSrcs: [{
                type: Input
            }], activeDocumentRefIdx: [{
                type: Input
            }], options: [{
                type: Input
            }], close: [{
                type: Output
            }], viewContainer: [{
                type: ViewChild,
                args: ['viewerContainer', { static: true, read: ViewContainerRef }]
            }], onEscape: [{
                type: HostListener,
                args: ['document:keydown.escape']
            }] } });
//# sourceMappingURL=data:application/json;base64,