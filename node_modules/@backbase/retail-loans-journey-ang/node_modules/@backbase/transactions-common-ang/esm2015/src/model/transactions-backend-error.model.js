/* eslint-disable no-redeclare*/
export var TransactionsBackendError;
(function (TransactionsBackendError) {
    const getMessageFromResponse = (error) => {
        const responseBody = error.error;
        if (Array.isArray(responseBody === null || responseBody === void 0 ? void 0 : responseBody.errors)) {
            return responseBody.errors.map((data) => {
                const { context = {} } = data;
                const message = data.message.replace(/{[_a-zA-Z][_a-zA-Z0-9]*}/g, (match) => {
                    const result = context[match.replace(/[\{\}']+/g, '')];
                    return result !== undefined ? result : match;
                });
                return `Error ${error.status}: ${message}`;
            });
        }
        else {
            return undefined;
        }
    };
    /* eslint-enable no-redeclare*/
    /**
     * @name fromHttpErrorResponse
     * @param errorResponse The error response
     * @returns An object containing a user-friendly error message
     *
     * @description
     * Parse an HttpErrorResponse and return a TransactionsError object that can be used to display a
     * user-friendly error message.
     */
    TransactionsBackendError.fromHttpErrorResponse = (errorResponse) => {
        if (errorResponse.error instanceof ErrorEvent) {
            // Client-side or network error.
            return {
                message: 'An unexpected error occurred',
            };
        }
        else {
            const error = getMessageFromResponse(errorResponse) || [];
            return {
                message: error[0] || `Error ${errorResponse.status}`,
            };
        }
    };
    TransactionsBackendError.fromHttpErrorsResponse = (errorResponse) => {
        if (errorResponse.error instanceof ErrorEvent || !errorResponse.status) {
            // Client-side or network error.
            return [
                {
                    message: 'An unexpected error occurred',
                },
            ];
        }
        else {
            const errors = getMessageFromResponse(errorResponse) || [`Error ${errorResponse.status}`];
            return errors.map((message) => ({ message }));
        }
    };
})(TransactionsBackendError || (TransactionsBackendError = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb25zLWJhY2tlbmQtZXJyb3IubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3RyYW5zYWN0aW9ucy1jb21tb24tYW5nL3NyYy9tb2RlbC90cmFuc2FjdGlvbnMtYmFja2VuZC1lcnJvci5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFXQSxnQ0FBZ0M7QUFDaEMsTUFBTSxLQUFXLHdCQUF3QixDQXlEeEM7QUF6REQsV0FBaUIsd0JBQXdCO0lBQ3ZDLE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxLQUF3QixFQUF3QixFQUFFO1FBQ2hGLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDakMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksYUFBWixZQUFZLHVCQUFaLFlBQVksQ0FBRSxNQUFNLENBQUMsRUFBRTtZQUN2QyxPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBOEIsRUFBRSxFQUFFO2dCQUNoRSxNQUFNLEVBQUUsT0FBTyxHQUFHLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDOUIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsMkJBQTJCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtvQkFDMUUsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBRXZELE9BQU8sTUFBTSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7Z0JBQy9DLENBQUMsQ0FBQyxDQUFDO2dCQUVILE9BQU8sU0FBUyxLQUFLLENBQUMsTUFBTSxLQUFLLE9BQU8sRUFBRSxDQUFDO1lBQzdDLENBQUMsQ0FBQyxDQUFDO1NBQ0o7YUFBTTtZQUNMLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQyxDQUFDO0lBQ0YsK0JBQStCO0lBQy9COzs7Ozs7OztPQVFHO0lBQ1UsOENBQXFCLEdBQUcsQ0FBQyxhQUFnQyxFQUE0QixFQUFFO1FBQ2xHLElBQUksYUFBYSxDQUFDLEtBQUssWUFBWSxVQUFVLEVBQUU7WUFDN0MsZ0NBQWdDO1lBQ2hDLE9BQU87Z0JBQ0wsT0FBTyxFQUFFLDhCQUE4QjthQUN4QyxDQUFDO1NBQ0g7YUFBTTtZQUNMLE1BQU0sS0FBSyxHQUFHLHNCQUFzQixDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUUxRCxPQUFPO2dCQUNMLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxhQUFhLENBQUMsTUFBTSxFQUFFO2FBQ3JELENBQUM7U0FDSDtJQUNILENBQUMsQ0FBQztJQUVXLCtDQUFzQixHQUFHLENBQUMsYUFBZ0MsRUFBOEIsRUFBRTtRQUNyRyxJQUFJLGFBQWEsQ0FBQyxLQUFLLFlBQVksVUFBVSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRTtZQUN0RSxnQ0FBZ0M7WUFDaEMsT0FBTztnQkFDTDtvQkFDRSxPQUFPLEVBQUUsOEJBQThCO2lCQUN4QzthQUNGLENBQUM7U0FDSDthQUFNO1lBQ0wsTUFBTSxNQUFNLEdBQUcsc0JBQXNCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBRTFGLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztTQUMvQztJQUNILENBQUMsQ0FBQztBQUNKLENBQUMsRUF6RGdCLHdCQUF3QixLQUF4Qix3QkFBd0IsUUF5RHhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbi8qKlxuICogVGhpcyBpbnRlcmZhY2UgaXMgdXNlZCBieSB0aGUgdGVtcGxhdGUgdG8gZGlzcGxheSB3aGF0IGlzIHdyb25nIHRvIHRoZSB1c2VyLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zYWN0aW9uc0JhY2tlbmRFcnJvciB7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAga2V5Pzogc3RyaW5nO1xuICBjb250ZXh0PzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVkZWNsYXJlKi9cbmV4cG9ydCBuYW1lc3BhY2UgVHJhbnNhY3Rpb25zQmFja2VuZEVycm9yIHtcbiAgY29uc3QgZ2V0TWVzc2FnZUZyb21SZXNwb25zZSA9IChlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2VCb2R5ID0gZXJyb3IuZXJyb3I7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVzcG9uc2VCb2R5Py5lcnJvcnMpKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2VCb2R5LmVycm9ycy5tYXAoKGRhdGE6IFRyYW5zYWN0aW9uc0JhY2tlbmRFcnJvcikgPT4ge1xuICAgICAgICBjb25zdCB7IGNvbnRleHQgPSB7fSB9ID0gZGF0YTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGRhdGEubWVzc2FnZS5yZXBsYWNlKC97W19hLXpBLVpdW19hLXpBLVowLTldKn0vZywgKG1hdGNoKSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gY29udGV4dFttYXRjaC5yZXBsYWNlKC9bXFx7XFx9J10rL2csICcnKV07XG5cbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICE9PSB1bmRlZmluZWQgPyByZXN1bHQgOiBtYXRjaDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGBFcnJvciAke2Vycm9yLnN0YXR1c306ICR7bWVzc2FnZX1gO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXJlZGVjbGFyZSovXG4gIC8qKlxuICAgKiBAbmFtZSBmcm9tSHR0cEVycm9yUmVzcG9uc2VcbiAgICogQHBhcmFtIGVycm9yUmVzcG9uc2UgVGhlIGVycm9yIHJlc3BvbnNlXG4gICAqIEByZXR1cm5zIEFuIG9iamVjdCBjb250YWluaW5nIGEgdXNlci1mcmllbmRseSBlcnJvciBtZXNzYWdlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBQYXJzZSBhbiBIdHRwRXJyb3JSZXNwb25zZSBhbmQgcmV0dXJuIGEgVHJhbnNhY3Rpb25zRXJyb3Igb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gZGlzcGxheSBhXG4gICAqIHVzZXItZnJpZW5kbHkgZXJyb3IgbWVzc2FnZS5cbiAgICovXG4gIGV4cG9ydCBjb25zdCBmcm9tSHR0cEVycm9yUmVzcG9uc2UgPSAoZXJyb3JSZXNwb25zZTogSHR0cEVycm9yUmVzcG9uc2UpOiBUcmFuc2FjdGlvbnNCYWNrZW5kRXJyb3IgPT4ge1xuICAgIGlmIChlcnJvclJlc3BvbnNlLmVycm9yIGluc3RhbmNlb2YgRXJyb3JFdmVudCkge1xuICAgICAgLy8gQ2xpZW50LXNpZGUgb3IgbmV0d29yayBlcnJvci5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6ICdBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkJyxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGVycm9yID0gZ2V0TWVzc2FnZUZyb21SZXNwb25zZShlcnJvclJlc3BvbnNlKSB8fCBbXTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWVzc2FnZTogZXJyb3JbMF0gfHwgYEVycm9yICR7ZXJyb3JSZXNwb25zZS5zdGF0dXN9YCxcbiAgICAgIH07XG4gICAgfVxuICB9O1xuXG4gIGV4cG9ydCBjb25zdCBmcm9tSHR0cEVycm9yc1Jlc3BvbnNlID0gKGVycm9yUmVzcG9uc2U6IEh0dHBFcnJvclJlc3BvbnNlKTogVHJhbnNhY3Rpb25zQmFja2VuZEVycm9yW10gPT4ge1xuICAgIGlmIChlcnJvclJlc3BvbnNlLmVycm9yIGluc3RhbmNlb2YgRXJyb3JFdmVudCB8fCAhZXJyb3JSZXNwb25zZS5zdGF0dXMpIHtcbiAgICAgIC8vIENsaWVudC1zaWRlIG9yIG5ldHdvcmsgZXJyb3IuXG4gICAgICByZXR1cm4gW1xuICAgICAgICB7XG4gICAgICAgICAgbWVzc2FnZTogJ0FuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQnLFxuICAgICAgICB9LFxuICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZXJyb3JzID0gZ2V0TWVzc2FnZUZyb21SZXNwb25zZShlcnJvclJlc3BvbnNlKSB8fCBbYEVycm9yICR7ZXJyb3JSZXNwb25zZS5zdGF0dXN9YF07XG5cbiAgICAgIHJldHVybiBlcnJvcnMubWFwKChtZXNzYWdlKSA9PiAoeyBtZXNzYWdlIH0pKTtcbiAgICB9XG4gIH07XG59XG4iXX0=