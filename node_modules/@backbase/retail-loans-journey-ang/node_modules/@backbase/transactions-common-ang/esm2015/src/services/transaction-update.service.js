import { Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/transactions";
export class TransactionUpdateService {
    constructor(transactionsDataHttpService) {
        this.transactionsDataHttpService = transactionsDataHttpService;
    }
    handleError(error) {
        if (error.error instanceof ErrorEvent) {
            // A client-side or network error occurred.  Handle it accordingly.
            console.error('An error occurred:', error.error.message);
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong.
            console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);
        }
        // Return an observable with a user-facing error message.
        return throwError('Something bad happened; please try again later.');
    }
    update(transaction, update) {
        if (typeof transaction.id === 'undefined' || typeof transaction.arrangementId === 'undefined') {
            return throwError('updateNotes: invalid transaction');
        }
        return this.transactionsDataHttpService
            .patchTransactions({
            transactionsClientPatchRequestBody: [
                {
                    id: transaction.id,
                    arrangementId: transaction.arrangementId,
                    notes: update.notes,
                    disputeStatus: update.disputeStatus,
                    category: update.category,
                },
            ],
        }, 'response')
            .pipe(catchError(this.handleError));
    }
    setDisputeStatus(transaction, disputeStatus) {
        return this.update(transaction, { disputeStatus });
    }
    updateNotes(transaction, notes) {
        return this.update(transaction, { notes });
    }
}
TransactionUpdateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionUpdateService, deps: [{ token: i1.TransactionClientHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
TransactionUpdateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionUpdateService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionUpdateService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.TransactionClientHttpService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24tdXBkYXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3RyYW5zYWN0aW9ucy1jb21tb24tYW5nL3NyYy9zZXJ2aWNlcy90cmFuc2FjdGlvbi11cGRhdGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxVQUFVLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFLNUMsTUFBTSxPQUFPLHdCQUF3QjtJQThDbkMsWUFBNkIsMkJBQXlEO1FBQXpELGdDQUEyQixHQUEzQiwyQkFBMkIsQ0FBOEI7SUFBRyxDQUFDO0lBN0NsRixXQUFXLENBQUMsS0FBd0I7UUFDMUMsSUFBSSxLQUFLLENBQUMsS0FBSyxZQUFZLFVBQVUsRUFBRTtZQUNyQyxtRUFBbUU7WUFDbkUsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzFEO2FBQU07WUFDTCxzREFBc0Q7WUFDdEQsNkRBQTZEO1lBQzdELE9BQU8sQ0FBQyxLQUFLLENBQUMseUJBQXlCLEtBQUssQ0FBQyxNQUFNLElBQUksR0FBRyxhQUFhLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZGO1FBRUQseURBQXlEO1FBQ3pELE9BQU8sVUFBVSxDQUFDLGlEQUFpRCxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUF3QixFQUFFLE1BQTRCO1FBQzNELElBQUksT0FBTyxXQUFXLENBQUMsRUFBRSxLQUFLLFdBQVcsSUFBSSxPQUFPLFdBQVcsQ0FBQyxhQUFhLEtBQUssV0FBVyxFQUFFO1lBQzdGLE9BQU8sVUFBVSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7U0FDdkQ7UUFFRCxPQUFPLElBQUksQ0FBQywyQkFBMkI7YUFDcEMsaUJBQWlCLENBQ2hCO1lBQ0Usa0NBQWtDLEVBQUU7Z0JBQ2xDO29CQUNFLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRTtvQkFDbEIsYUFBYSxFQUFFLFdBQVcsQ0FBQyxhQUFhO29CQUN4QyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUs7b0JBQ25CLGFBQWEsRUFBRSxNQUFNLENBQUMsYUFBYTtvQkFDbkMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRO2lCQUMxQjthQUNGO1NBQ0YsRUFDRCxVQUFVLENBQ1g7YUFDQSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxXQUF3QixFQUFFLGFBQTRCO1FBQ3JFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxXQUFXLENBQUMsV0FBd0IsRUFBRSxLQUFhO1FBQ2pELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7O3NIQTVDVSx3QkFBd0I7MEhBQXhCLHdCQUF3Qjs0RkFBeEIsd0JBQXdCO2tCQURwQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cFJlc3BvbnNlLCBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IERpc3B1dGVTdGF0dXMsIFRyYW5zYWN0aW9uQ2xpZW50SHR0cFNlcnZpY2UgfSBmcm9tICdAYmFja2Jhc2UvZGF0YS1hbmcvdHJhbnNhY3Rpb25zJztcbmltcG9ydCB7IHRocm93RXJyb3IsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFRyYW5zYWN0aW9uIH0gZnJvbSAnLi4vbW9kZWwvdHJhbnNhY3Rpb24ubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVHJhbnNhY3Rpb25VcGRhdGVTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHtcbiAgICBpZiAoZXJyb3IuZXJyb3IgaW5zdGFuY2VvZiBFcnJvckV2ZW50KSB7XG4gICAgICAvLyBBIGNsaWVudC1zaWRlIG9yIG5ldHdvcmsgZXJyb3Igb2NjdXJyZWQuICBIYW5kbGUgaXQgYWNjb3JkaW5nbHkuXG4gICAgICBjb25zb2xlLmVycm9yKCdBbiBlcnJvciBvY2N1cnJlZDonLCBlcnJvci5lcnJvci5tZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlIGJhY2tlbmQgcmV0dXJuZWQgYW4gdW5zdWNjZXNzZnVsIHJlc3BvbnNlIGNvZGUuXG4gICAgICAvLyBUaGUgcmVzcG9uc2UgYm9keSBtYXkgY29udGFpbiBjbHVlcyBhcyB0byB3aGF0IHdlbnQgd3JvbmcuXG4gICAgICBjb25zb2xlLmVycm9yKGBCYWNrZW5kIHJldHVybmVkIGNvZGUgJHtlcnJvci5zdGF0dXN9LCBgICsgYGJvZHkgd2FzOiAke2Vycm9yLmVycm9yfWApO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBvYnNlcnZhYmxlIHdpdGggYSB1c2VyLWZhY2luZyBlcnJvciBtZXNzYWdlLlxuICAgIHJldHVybiB0aHJvd0Vycm9yKCdTb21ldGhpbmcgYmFkIGhhcHBlbmVkOyBwbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicpO1xuICB9XG5cbiAgdXBkYXRlKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbiwgdXBkYXRlOiBQYXJ0aWFsPFRyYW5zYWN0aW9uPik6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPGFueT4+IHtcbiAgICBpZiAodHlwZW9mIHRyYW5zYWN0aW9uLmlkID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgdHJhbnNhY3Rpb24uYXJyYW5nZW1lbnRJZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0aHJvd0Vycm9yKCd1cGRhdGVOb3RlczogaW52YWxpZCB0cmFuc2FjdGlvbicpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRyYW5zYWN0aW9uc0RhdGFIdHRwU2VydmljZVxuICAgICAgLnBhdGNoVHJhbnNhY3Rpb25zKFxuICAgICAgICB7XG4gICAgICAgICAgdHJhbnNhY3Rpb25zQ2xpZW50UGF0Y2hSZXF1ZXN0Qm9keTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpZDogdHJhbnNhY3Rpb24uaWQsXG4gICAgICAgICAgICAgIGFycmFuZ2VtZW50SWQ6IHRyYW5zYWN0aW9uLmFycmFuZ2VtZW50SWQsXG4gICAgICAgICAgICAgIG5vdGVzOiB1cGRhdGUubm90ZXMsXG4gICAgICAgICAgICAgIGRpc3B1dGVTdGF0dXM6IHVwZGF0ZS5kaXNwdXRlU3RhdHVzLFxuICAgICAgICAgICAgICBjYXRlZ29yeTogdXBkYXRlLmNhdGVnb3J5LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncmVzcG9uc2UnLFxuICAgICAgKVxuICAgICAgLnBpcGUoY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKSk7XG4gIH1cblxuICBzZXREaXNwdXRlU3RhdHVzKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbiwgZGlzcHV0ZVN0YXR1czogRGlzcHV0ZVN0YXR1cykge1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZSh0cmFuc2FjdGlvbiwgeyBkaXNwdXRlU3RhdHVzIH0pO1xuICB9XG5cbiAgdXBkYXRlTm90ZXModHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uLCBub3Rlczogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlKHRyYW5zYWN0aW9uLCB7IG5vdGVzIH0pO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSB0cmFuc2FjdGlvbnNEYXRhSHR0cFNlcnZpY2U6IFRyYW5zYWN0aW9uQ2xpZW50SHR0cFNlcnZpY2UpIHt9XG59XG4iXX0=