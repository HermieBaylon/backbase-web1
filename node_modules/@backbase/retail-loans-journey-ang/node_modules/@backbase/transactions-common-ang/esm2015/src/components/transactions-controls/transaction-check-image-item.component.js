import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "./accessibility-keyboard.directive";
import * as i4 from "@angular/common";
export class TransactionCheckImageItemComponent {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.sideText = '';
        this.imageAlt = '';
        this.selectImage = new EventEmitter();
    }
    get imageFileName() {
        const fileType = this.image ? this.image.mimeType.replace('image/', '') : '';
        const side = this.image ? this.image.side : '';
        return `${this.imageCheckNumber}-${side}.${fileType}`;
    }
    get formatedImageSource() {
        const mimeType = this.image ? this.image.mimeType : '';
        const content = this.image ? this.image.content : '';
        return `data:${mimeType};base64,${content}`;
    }
    get imageCheckNumber() {
        return this.transaction && this.transaction.checkSerialNumber;
    }
    createImageSource() {
        return this.sanitizer.bypassSecurityTrustResourceUrl(this.formatedImageSource);
    }
    toggleDocumentViewer() {
        this.selectImage.emit();
    }
}
TransactionCheckImageItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionCheckImageItemComponent, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
TransactionCheckImageItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionCheckImageItemComponent, selector: "bb-transaction-check-image-item", inputs: { image: "image", transaction: "transaction", sideText: "sideText", imageAlt: "imageAlt" }, outputs: { selectImage: "selectImage" }, ngImport: i0, template: "<ng-container>\n  <span>{{sideText}}</span>\n  <div\n    role=\"img\"\n    data-role=\"check-image-item\"\n    class=\"bb-check-img-container\" \n    (click)=\"!!image && toggleDocumentViewer()\" \n    attr.aria-label=\"{{sideText}} image container\"\n    i18n-aria-label=\"Image container for front or back check image@@transaction-check-image-item.aria-label.image-container\"\n    bbAccessibilityKeyboard\n  >\n    <ng-container *ngIf=\"!!image else noImage\">\n      <div class=\"bb-check-img-container-state\">\n        <div class=\"bb-check-img-container-state__container\">\n          <bb-icon-ui \n            name=\"remove-red-eye\" \n            size=\"lg\" \n            color=\"white\"\n            aria-label=\"Expand Image\"\n            i18n-aria-label=\"Expand image@@transaction-check-image-item.aria-label.expand-icon\"\n          ></bb-icon-ui>\n        </div>\n      </div>\n      <img class=\"bb-check-img-container__img\" alt={{imageAlt}} [src]=\"createImageSource()\">\n    </ng-container>\n  </div>\n</ng-container>\n\n<ng-template #noImage>\n  <div class=\"bb-check-no-img\">\n    <div class=\"bb-check-no-img__icon\">\n      <bb-icon-ui\n        name=\"broken-image\" \n        size=\"lg\"\n        aria-label=\"No image\"\n        i18n-aria-label=\"No image@@transaction-check-image-item.aria-label.no-image-icon\"\n      ></bb-icon-ui>\n    </div>\n  </div>\n</ng-template>", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.AccessibilityKeyboardDirective, selector: "[bbAccessibilityKeyboard]" }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionCheckImageItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-check-image-item',
                    templateUrl: 'transaction-check-image-item.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; }, propDecorators: { image: [{
                type: Input
            }], transaction: [{
                type: Input
            }], sideText: [{
                type: Input
            }], imageAlt: [{
                type: Input
            }], selectImage: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24tY2hlY2staW1hZ2UtaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3RyYW5zYWN0aW9ucy1jb21tb24tYW5nL3NyYy9jb21wb25lbnRzL3RyYW5zYWN0aW9ucy1jb250cm9scy90cmFuc2FjdGlvbi1jaGVjay1pbWFnZS1pdGVtLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdHJhbnNhY3Rpb25zLWNvbW1vbi1hbmcvc3JjL2NvbXBvbmVudHMvdHJhbnNhY3Rpb25zLWNvbnRyb2xzL3RyYW5zYWN0aW9uLWNoZWNrLWltYWdlLWl0ZW0uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7O0FBVWhHLE1BQU0sT0FBTyxrQ0FBa0M7SUFrQzdDLFlBQTZCLFNBQXVCO1FBQXZCLGNBQVMsR0FBVCxTQUFTLENBQWM7UUEvQjNDLGFBQVEsR0FBRyxFQUFFLENBQUM7UUFDZCxhQUFRLEdBQUcsRUFBRSxDQUFDO1FBRWIsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO0lBNEJNLENBQUM7SUExQnhELElBQUksYUFBYTtRQUNmLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUM3RSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBRS9DLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLElBQUksSUFBSSxJQUFJLFFBQVEsRUFBRSxDQUFDO0lBQ3hELENBQUM7SUFFRCxJQUFJLG1CQUFtQjtRQUNyQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3ZELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFckQsT0FBTyxRQUFRLFFBQVEsV0FBVyxPQUFPLEVBQUUsQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFBWSxnQkFBZ0I7UUFDMUIsT0FBTyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUM7SUFDaEUsQ0FBQztJQUVELGlCQUFpQjtRQUNmLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyw4QkFBOEIsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNqRixDQUFDO0lBRUQsb0JBQW9CO1FBQ2xCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7Z0lBaENVLGtDQUFrQztvSEFBbEMsa0NBQWtDLG9OQ1YvQywyM0NBdUNjOzRGRDdCRCxrQ0FBa0M7a0JBTDlDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGlDQUFpQztvQkFDM0MsV0FBVyxFQUFFLDZDQUE2QztvQkFDMUQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEO21HQUVVLEtBQUs7c0JBQWIsS0FBSztnQkFDRyxXQUFXO3NCQUFuQixLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csUUFBUTtzQkFBaEIsS0FBSztnQkFFSSxXQUFXO3NCQUFwQixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmFuc2FjdGlvbiB9IGZyb20gJy4uLy4uL21vZGVsL3RyYW5zYWN0aW9uLm1vZGVsJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uc0NoZWNrSW1hZ2UgfSBmcm9tICcuLi8uLi9tb2RlbC90cmFuc2FjdGlvbnMtY2hlY2staW1hZ2VzLm1vZGVsJztcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi10cmFuc2FjdGlvbi1jaGVjay1pbWFnZS1pdGVtJyxcbiAgdGVtcGxhdGVVcmw6ICd0cmFuc2FjdGlvbi1jaGVjay1pbWFnZS1pdGVtLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFRyYW5zYWN0aW9uQ2hlY2tJbWFnZUl0ZW1Db21wb25lbnQge1xuICBASW5wdXQoKSBpbWFnZTogVHJhbnNhY3Rpb25zQ2hlY2tJbWFnZSB8IHVuZGVmaW5lZDtcbiAgQElucHV0KCkgdHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uIHwgdW5kZWZpbmVkO1xuICBASW5wdXQoKSBzaWRlVGV4dCA9ICcnO1xuICBASW5wdXQoKSBpbWFnZUFsdCA9ICcnO1xuXG4gIEBPdXRwdXQoKSBzZWxlY3RJbWFnZSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICBnZXQgaW1hZ2VGaWxlTmFtZSgpIHtcbiAgICBjb25zdCBmaWxlVHlwZSA9IHRoaXMuaW1hZ2UgPyB0aGlzLmltYWdlLm1pbWVUeXBlLnJlcGxhY2UoJ2ltYWdlLycsICcnKSA6ICcnO1xuICAgIGNvbnN0IHNpZGUgPSB0aGlzLmltYWdlID8gdGhpcy5pbWFnZS5zaWRlIDogJyc7XG5cbiAgICByZXR1cm4gYCR7dGhpcy5pbWFnZUNoZWNrTnVtYmVyfS0ke3NpZGV9LiR7ZmlsZVR5cGV9YDtcbiAgfVxuXG4gIGdldCBmb3JtYXRlZEltYWdlU291cmNlKCkge1xuICAgIGNvbnN0IG1pbWVUeXBlID0gdGhpcy5pbWFnZSA/IHRoaXMuaW1hZ2UubWltZVR5cGUgOiAnJztcbiAgICBjb25zdCBjb250ZW50ID0gdGhpcy5pbWFnZSA/IHRoaXMuaW1hZ2UuY29udGVudCA6ICcnO1xuXG4gICAgcmV0dXJuIGBkYXRhOiR7bWltZVR5cGV9O2Jhc2U2NCwke2NvbnRlbnR9YDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IGltYWdlQ2hlY2tOdW1iZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNhY3Rpb24gJiYgdGhpcy50cmFuc2FjdGlvbi5jaGVja1NlcmlhbE51bWJlcjtcbiAgfVxuXG4gIGNyZWF0ZUltYWdlU291cmNlKCkge1xuICAgIHJldHVybiB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0UmVzb3VyY2VVcmwodGhpcy5mb3JtYXRlZEltYWdlU291cmNlKTtcbiAgfVxuXG4gIHRvZ2dsZURvY3VtZW50Vmlld2VyKCkge1xuICAgIHRoaXMuc2VsZWN0SW1hZ2UuZW1pdCgpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcikge31cbn1cbiIsIjxuZy1jb250YWluZXI+XG4gIDxzcGFuPnt7c2lkZVRleHR9fTwvc3Bhbj5cbiAgPGRpdlxuICAgIHJvbGU9XCJpbWdcIlxuICAgIGRhdGEtcm9sZT1cImNoZWNrLWltYWdlLWl0ZW1cIlxuICAgIGNsYXNzPVwiYmItY2hlY2staW1nLWNvbnRhaW5lclwiIFxuICAgIChjbGljayk9XCIhIWltYWdlICYmIHRvZ2dsZURvY3VtZW50Vmlld2VyKClcIiBcbiAgICBhdHRyLmFyaWEtbGFiZWw9XCJ7e3NpZGVUZXh0fX0gaW1hZ2UgY29udGFpbmVyXCJcbiAgICBpMThuLWFyaWEtbGFiZWw9XCJJbWFnZSBjb250YWluZXIgZm9yIGZyb250IG9yIGJhY2sgY2hlY2sgaW1hZ2VAQHRyYW5zYWN0aW9uLWNoZWNrLWltYWdlLWl0ZW0uYXJpYS1sYWJlbC5pbWFnZS1jb250YWluZXJcIlxuICAgIGJiQWNjZXNzaWJpbGl0eUtleWJvYXJkXG4gID5cbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiISFpbWFnZSBlbHNlIG5vSW1hZ2VcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJiYi1jaGVjay1pbWctY29udGFpbmVyLXN0YXRlXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJiYi1jaGVjay1pbWctY29udGFpbmVyLXN0YXRlX19jb250YWluZXJcIj5cbiAgICAgICAgICA8YmItaWNvbi11aSBcbiAgICAgICAgICAgIG5hbWU9XCJyZW1vdmUtcmVkLWV5ZVwiIFxuICAgICAgICAgICAgc2l6ZT1cImxnXCIgXG4gICAgICAgICAgICBjb2xvcj1cIndoaXRlXCJcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJFeHBhbmQgSW1hZ2VcIlxuICAgICAgICAgICAgaTE4bi1hcmlhLWxhYmVsPVwiRXhwYW5kIGltYWdlQEB0cmFuc2FjdGlvbi1jaGVjay1pbWFnZS1pdGVtLmFyaWEtbGFiZWwuZXhwYW5kLWljb25cIlxuICAgICAgICAgID48L2JiLWljb24tdWk+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8aW1nIGNsYXNzPVwiYmItY2hlY2staW1nLWNvbnRhaW5lcl9faW1nXCIgYWx0PXt7aW1hZ2VBbHR9fSBbc3JjXT1cImNyZWF0ZUltYWdlU291cmNlKClcIj5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgPC9kaXY+XG48L25nLWNvbnRhaW5lcj5cblxuPG5nLXRlbXBsYXRlICNub0ltYWdlPlxuICA8ZGl2IGNsYXNzPVwiYmItY2hlY2stbm8taW1nXCI+XG4gICAgPGRpdiBjbGFzcz1cImJiLWNoZWNrLW5vLWltZ19faWNvblwiPlxuICAgICAgPGJiLWljb24tdWlcbiAgICAgICAgbmFtZT1cImJyb2tlbi1pbWFnZVwiIFxuICAgICAgICBzaXplPVwibGdcIlxuICAgICAgICBhcmlhLWxhYmVsPVwiTm8gaW1hZ2VcIlxuICAgICAgICBpMThuLWFyaWEtbGFiZWw9XCJObyBpbWFnZUBAdHJhbnNhY3Rpb24tY2hlY2staW1hZ2UtaXRlbS5hcmlhLWxhYmVsLm5vLWltYWdlLWljb25cIlxuICAgICAgPjwvYmItaWNvbi11aT5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L25nLXRlbXBsYXRlPiJdfQ==