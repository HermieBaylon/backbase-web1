import { Injectable } from '@angular/core';
import { combineLatest, ReplaySubject } from 'rxjs';
import { map } from 'rxjs/operators';
import { defaultAvailableFiltersConfig } from '../constants';
import * as i0 from "@angular/core";
import * as i1 from "./accounts.service";
export class AvailableFiltersConfigService {
    constructor(accountsService) {
        this.accountsService = accountsService;
        this.availableFiltersConfig$ = new ReplaySubject(1);
        this.selectedAccounts$ = new ReplaySubject(1);
        this.productSummary$ = this.getProductSummaryForSelectedAccounts();
        this.availableFilters$ = this.getAvailableFilters();
    }
    setFilterConfigurationAndAccount(availableFiltersConfig, selectedAccounts) {
        availableFiltersConfig.subscribe(this.availableFiltersConfig$);
        selectedAccounts.subscribe(this.selectedAccounts$);
    }
    getProductSummaryForSelectedAccounts() {
        return combineLatest([this.accountsService.getProductSummary(), this.selectedAccounts$]).pipe(map(([productSummaryItems, selectedAccounts]) => productSummaryItems.filter((productSummaryItem) => selectedAccounts === null || selectedAccounts === void 0 ? void 0 : selectedAccounts.includes(productSummaryItem.id))));
    }
    getAvailableFilters() {
        return combineLatest([this.availableFiltersConfig$, this.productSummary$]).pipe(map(([availableFiltersConfig, productSummaryItems]) => {
            const availableFilters = productSummaryItems.reduce((filters, productSummaryItem) => filters.concat(this.getFiltersFromConfigs(productSummaryItem, availableFiltersConfig)), []);
            return Array.from(new Set(availableFilters));
        }));
    }
    getFiltersFromConfigs(productSummaryItem, availableFiltersConfig) {
        var _a;
        const availableFilters = (_a = this.getFiltersFromConfigObject(availableFiltersConfig, productSummaryItem)) !== null && _a !== void 0 ? _a : this.getFiltersFromConfigObject(defaultAvailableFiltersConfig, productSummaryItem);
        return availableFilters !== null && availableFilters !== void 0 ? availableFilters : defaultAvailableFiltersConfig.defaultFilters;
    }
    getFiltersFromConfigObject(config, productSummaryItem) {
        if (productSummaryItem.productKindName !== undefined) {
            const productKind = config[productSummaryItem.productKindName];
            if (productKind === undefined)
                return undefined;
            if (Array.isArray(productKind))
                return productKind;
            if (productSummaryItem.productTypeName === undefined)
                return undefined;
            return productKind[productSummaryItem.productTypeName];
        }
        return undefined;
    }
}
AvailableFiltersConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AvailableFiltersConfigService, deps: [{ token: i1.AccountsService }], target: i0.ɵɵFactoryTarget.Injectable });
AvailableFiltersConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AvailableFiltersConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AvailableFiltersConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.AccountsService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhaWxhYmxlLWZpbHRlcnMtY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3RyYW5zYWN0aW9ucy1jb21tb24tYW5nL3NyYy9zZXJ2aWNlcy9hdmFpbGFibGUtZmlsdGVycy1jb25maWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxhQUFhLEVBQWMsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxjQUFjLENBQUM7OztBQUs3RCxNQUFNLE9BQU8sNkJBQTZCO0lBUXhDLFlBQTZCLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUo1Qyw0QkFBdUIsR0FDdEMsSUFBSSxhQUFhLENBQXlCLENBQUMsQ0FBQyxDQUFDO1FBQzlCLHNCQUFpQixHQUE0QixJQUFJLGFBQWEsQ0FBVyxDQUFDLENBQUMsQ0FBQztRQUczRixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxDQUFDO1FBQ25FLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUN0RCxDQUFDO0lBRUQsZ0NBQWdDLENBQzlCLHNCQUEwRCxFQUMxRCxnQkFBc0M7UUFFdEMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQy9ELGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRU8sb0NBQW9DO1FBQzFDLE9BQU8sYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUMzRixHQUFHLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixFQUFFLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxDQUM5QyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxrQkFBc0MsRUFBRSxFQUFFLENBQ3BFLGdCQUFnQixhQUFoQixnQkFBZ0IsdUJBQWhCLGdCQUFnQixDQUFFLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FDbEQsQ0FDRixDQUNGLENBQUM7SUFDSixDQUFDO0lBRU8sbUJBQW1CO1FBQ3pCLE9BQU8sYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDN0UsR0FBRyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsRUFBRSxtQkFBbUIsQ0FBQyxFQUFFLEVBQUU7WUFDcEQsTUFBTSxnQkFBZ0IsR0FBcUIsbUJBQW1CLENBQUMsTUFBTSxDQUNuRSxDQUFDLE9BQXlCLEVBQUUsa0JBQXNDLEVBQW9CLEVBQUUsQ0FDdEYsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsa0JBQWtCLEVBQUUsc0JBQXNCLENBQUMsQ0FBQyxFQUN4RixFQUFFLENBQ0gsQ0FBQztZQUVGLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7UUFDL0MsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFTyxxQkFBcUIsQ0FDM0Isa0JBQXNDLEVBQ3RDLHNCQUE4Qzs7UUFFOUMsTUFBTSxnQkFBZ0IsR0FDcEIsTUFBQSxJQUFJLENBQUMsMEJBQTBCLENBQUMsc0JBQXNCLEVBQUUsa0JBQWtCLENBQUMsbUNBQzNFLElBQUksQ0FBQywwQkFBMEIsQ0FBQyw2QkFBNkIsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBRXJGLE9BQU8sZ0JBQWdCLGFBQWhCLGdCQUFnQixjQUFoQixnQkFBZ0IsR0FBSyw2QkFBNkIsQ0FBQyxjQUFtQyxDQUFDO0lBQ2hHLENBQUM7SUFFTywwQkFBMEIsQ0FDaEMsTUFBOEIsRUFDOUIsa0JBQXNDO1FBRXRDLElBQUksa0JBQWtCLENBQUMsZUFBZSxLQUFLLFNBQVMsRUFBRTtZQUNwRCxNQUFNLFdBQVcsR0FBNEIsTUFBTSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBRXhGLElBQUksV0FBVyxLQUFLLFNBQVM7Z0JBQUUsT0FBTyxTQUFTLENBQUM7WUFFaEQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztnQkFBRSxPQUFPLFdBQVcsQ0FBQztZQUVuRCxJQUFJLGtCQUFrQixDQUFDLGVBQWUsS0FBSyxTQUFTO2dCQUFFLE9BQU8sU0FBUyxDQUFDO1lBRXZFLE9BQU8sV0FBVyxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQ3hEO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQzs7MkhBekVVLDZCQUE2QjsrSEFBN0IsNkJBQTZCOzRGQUE3Qiw2QkFBNkI7a0JBRHpDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBdmFpbGFibGVGaWx0ZXJzLCBBdmFpbGFibGVGaWx0ZXJzQ29uZmlnLCBQcm9kdWN0S2luZCB9IGZyb20gJy4uL21vZGVsL2F2YWlsYWJsZS1maWx0ZXJzLm1vZGVsJztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGRlZmF1bHRBdmFpbGFibGVGaWx0ZXJzQ29uZmlnIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IFByb2R1Y3RTdW1tYXJ5SXRlbSB9IGZyb20gJ0BiYWNrYmFzZS9kYXRhLWFuZy9hcnJhbmdlbWVudHMnO1xuaW1wb3J0IHsgQWNjb3VudHNTZXJ2aWNlIH0gZnJvbSAnLi9hY2NvdW50cy5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEF2YWlsYWJsZUZpbHRlcnNDb25maWdTZXJ2aWNlIHtcbiAgYXZhaWxhYmxlRmlsdGVycyQ6IE9ic2VydmFibGU8QXZhaWxhYmxlRmlsdGVycz47XG5cbiAgcHJpdmF0ZSBwcm9kdWN0U3VtbWFyeSQ6IE9ic2VydmFibGU8UHJvZHVjdFN1bW1hcnlJdGVtW10+O1xuICBwcml2YXRlIHJlYWRvbmx5IGF2YWlsYWJsZUZpbHRlcnNDb25maWckOiBSZXBsYXlTdWJqZWN0PEF2YWlsYWJsZUZpbHRlcnNDb25maWc+ID1cbiAgICBuZXcgUmVwbGF5U3ViamVjdDxBdmFpbGFibGVGaWx0ZXJzQ29uZmlnPigxKTtcbiAgcHJpdmF0ZSByZWFkb25seSBzZWxlY3RlZEFjY291bnRzJDogUmVwbGF5U3ViamVjdDxzdHJpbmdbXT4gPSBuZXcgUmVwbGF5U3ViamVjdDxzdHJpbmdbXT4oMSk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhY2NvdW50c1NlcnZpY2U6IEFjY291bnRzU2VydmljZSkge1xuICAgIHRoaXMucHJvZHVjdFN1bW1hcnkkID0gdGhpcy5nZXRQcm9kdWN0U3VtbWFyeUZvclNlbGVjdGVkQWNjb3VudHMoKTtcbiAgICB0aGlzLmF2YWlsYWJsZUZpbHRlcnMkID0gdGhpcy5nZXRBdmFpbGFibGVGaWx0ZXJzKCk7XG4gIH1cblxuICBzZXRGaWx0ZXJDb25maWd1cmF0aW9uQW5kQWNjb3VudChcbiAgICBhdmFpbGFibGVGaWx0ZXJzQ29uZmlnOiBPYnNlcnZhYmxlPEF2YWlsYWJsZUZpbHRlcnNDb25maWc+LFxuICAgIHNlbGVjdGVkQWNjb3VudHM6IE9ic2VydmFibGU8c3RyaW5nW10+LFxuICApOiB2b2lkIHtcbiAgICBhdmFpbGFibGVGaWx0ZXJzQ29uZmlnLnN1YnNjcmliZSh0aGlzLmF2YWlsYWJsZUZpbHRlcnNDb25maWckKTtcbiAgICBzZWxlY3RlZEFjY291bnRzLnN1YnNjcmliZSh0aGlzLnNlbGVjdGVkQWNjb3VudHMkKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UHJvZHVjdFN1bW1hcnlGb3JTZWxlY3RlZEFjY291bnRzKCk6IE9ic2VydmFibGU8UHJvZHVjdFN1bW1hcnlJdGVtW10+IHtcbiAgICByZXR1cm4gY29tYmluZUxhdGVzdChbdGhpcy5hY2NvdW50c1NlcnZpY2UuZ2V0UHJvZHVjdFN1bW1hcnkoKSwgdGhpcy5zZWxlY3RlZEFjY291bnRzJF0pLnBpcGUoXG4gICAgICBtYXAoKFtwcm9kdWN0U3VtbWFyeUl0ZW1zLCBzZWxlY3RlZEFjY291bnRzXSkgPT5cbiAgICAgICAgcHJvZHVjdFN1bW1hcnlJdGVtcy5maWx0ZXIoKHByb2R1Y3RTdW1tYXJ5SXRlbTogUHJvZHVjdFN1bW1hcnlJdGVtKSA9PlxuICAgICAgICAgIHNlbGVjdGVkQWNjb3VudHM/LmluY2x1ZGVzKHByb2R1Y3RTdW1tYXJ5SXRlbS5pZCksXG4gICAgICAgICksXG4gICAgICApLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGdldEF2YWlsYWJsZUZpbHRlcnMoKTogT2JzZXJ2YWJsZTxBdmFpbGFibGVGaWx0ZXJzPiB7XG4gICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QoW3RoaXMuYXZhaWxhYmxlRmlsdGVyc0NvbmZpZyQsIHRoaXMucHJvZHVjdFN1bW1hcnkkXSkucGlwZShcbiAgICAgIG1hcCgoW2F2YWlsYWJsZUZpbHRlcnNDb25maWcsIHByb2R1Y3RTdW1tYXJ5SXRlbXNdKSA9PiB7XG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZUZpbHRlcnM6IEF2YWlsYWJsZUZpbHRlcnMgPSBwcm9kdWN0U3VtbWFyeUl0ZW1zLnJlZHVjZShcbiAgICAgICAgICAoZmlsdGVyczogQXZhaWxhYmxlRmlsdGVycywgcHJvZHVjdFN1bW1hcnlJdGVtOiBQcm9kdWN0U3VtbWFyeUl0ZW0pOiBBdmFpbGFibGVGaWx0ZXJzID0+XG4gICAgICAgICAgICBmaWx0ZXJzLmNvbmNhdCh0aGlzLmdldEZpbHRlcnNGcm9tQ29uZmlncyhwcm9kdWN0U3VtbWFyeUl0ZW0sIGF2YWlsYWJsZUZpbHRlcnNDb25maWcpKSxcbiAgICAgICAgICBbXSxcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KGF2YWlsYWJsZUZpbHRlcnMpKTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGdldEZpbHRlcnNGcm9tQ29uZmlncyhcbiAgICBwcm9kdWN0U3VtbWFyeUl0ZW06IFByb2R1Y3RTdW1tYXJ5SXRlbSxcbiAgICBhdmFpbGFibGVGaWx0ZXJzQ29uZmlnOiBBdmFpbGFibGVGaWx0ZXJzQ29uZmlnLFxuICApOiBBdmFpbGFibGVGaWx0ZXJzIHtcbiAgICBjb25zdCBhdmFpbGFibGVGaWx0ZXJzOiBBdmFpbGFibGVGaWx0ZXJzIHwgdW5kZWZpbmVkID1cbiAgICAgIHRoaXMuZ2V0RmlsdGVyc0Zyb21Db25maWdPYmplY3QoYXZhaWxhYmxlRmlsdGVyc0NvbmZpZywgcHJvZHVjdFN1bW1hcnlJdGVtKSA/P1xuICAgICAgdGhpcy5nZXRGaWx0ZXJzRnJvbUNvbmZpZ09iamVjdChkZWZhdWx0QXZhaWxhYmxlRmlsdGVyc0NvbmZpZywgcHJvZHVjdFN1bW1hcnlJdGVtKTtcblxuICAgIHJldHVybiBhdmFpbGFibGVGaWx0ZXJzID8/IChkZWZhdWx0QXZhaWxhYmxlRmlsdGVyc0NvbmZpZy5kZWZhdWx0RmlsdGVycyBhcyBBdmFpbGFibGVGaWx0ZXJzKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RmlsdGVyc0Zyb21Db25maWdPYmplY3QoXG4gICAgY29uZmlnOiBBdmFpbGFibGVGaWx0ZXJzQ29uZmlnLFxuICAgIHByb2R1Y3RTdW1tYXJ5SXRlbTogUHJvZHVjdFN1bW1hcnlJdGVtLFxuICApOiBBdmFpbGFibGVGaWx0ZXJzIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAocHJvZHVjdFN1bW1hcnlJdGVtLnByb2R1Y3RLaW5kTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBwcm9kdWN0S2luZDogUHJvZHVjdEtpbmQgfCB1bmRlZmluZWQgPSBjb25maWdbcHJvZHVjdFN1bW1hcnlJdGVtLnByb2R1Y3RLaW5kTmFtZV07XG5cbiAgICAgIGlmIChwcm9kdWN0S2luZCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9kdWN0S2luZCkpIHJldHVybiBwcm9kdWN0S2luZDtcblxuICAgICAgaWYgKHByb2R1Y3RTdW1tYXJ5SXRlbS5wcm9kdWN0VHlwZU5hbWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgICAgcmV0dXJuIHByb2R1Y3RLaW5kW3Byb2R1Y3RTdW1tYXJ5SXRlbS5wcm9kdWN0VHlwZU5hbWVdO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdfQ==