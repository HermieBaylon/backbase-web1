import { map, pluck } from 'rxjs/operators';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { TransactionsFilterOptions } from '../model/transactions-filter-options.model';
import { Input, Directive, Output, EventEmitter } from '@angular/core';
import { defaultAvailableFiltersConfig, deserialize, filterInputParameters, parseSortOptions } from '../constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../services/widget-properties.service";
/* eslint-disable */
export class BaseTransactionsWidget {
    constructor(route, widgetProperties) {
        this.route = route;
        this.widgetProperties = widgetProperties;
        this.enableDisputeAndInquiry = false;
        this.availableFiltersConfig = defaultAvailableFiltersConfig;
        this.transactionSelected = new EventEmitter();
        this.transactionsLoaded = new EventEmitter();
        this.initialFilterOptionsSubject = new BehaviorSubject(undefined);
        this.initialSortOptionsSubject = new BehaviorSubject(undefined);
        this.selectedAccount = this.getRouteParam(this.route, 'selectedAccount').pipe(map((selectedAccount) => selectedAccount), map((selectedAccount) => typeof selectedAccount !== 'undefined' && selectedAccount.includes(',')
            ? selectedAccount.split(',')
            : selectedAccount));
    }
    set initialFilterOptionsValue(value) {
        const deseralizedValue = deserialize(value);
        this.initialFilterOptionsSubject.next(TransactionsFilterOptions.fromHttpGetParams(deseralizedValue));
    }
    set initialSortOptionsValue(value) {
        const options = parseSortOptions(value);
        this.initialSortOptionsSubject.next(options);
    }
    getRouteParam(route, param) {
        const paramValue = route.paramMap.pipe(pluck('params', param));
        if (!route.parent) {
            return paramValue;
        }
        // Ensure that level that has actual value keeps it from being cleared.
        return combineLatest([paramValue, this.getRouteParam(route.parent, param)]).pipe(map((params) => params[0] || params[1]));
    }
    get initialFilterOptions() {
        return filterInputParameters(this.initialFilterOptionsSubject.asObservable(), this.widgetProperties.initialFilterOptions);
    }
    get initialSortOptions() {
        return filterInputParameters(this.initialSortOptionsSubject.asObservable(), this.widgetProperties.initialSortOptions);
    }
    onDetailOpen(transaction) {
        this.transactionSelected.emit(transaction);
    }
    onTransactionsLoaded(transactionsList) {
        this.transactionsLoaded.emit(transactionsList);
    }
}
BaseTransactionsWidget.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BaseTransactionsWidget, deps: [{ token: i1.ActivatedRoute }, { token: i2.WidgetPropertiesService }], target: i0.ɵɵFactoryTarget.Directive });
BaseTransactionsWidget.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BaseTransactionsWidget, inputs: { googleAPIKey: "googleAPIKey", initialFilterOptionsValue: ["initialFilterOptions", "initialFilterOptionsValue"], initialSortOptionsValue: ["initialSortOptions", "initialSortOptionsValue"], pageSize: "pageSize", maxNavPages: "maxNavPages", paginationType: "paginationType", showControls: "showControls", showChangeCategory: "showChangeCategory", showPendingTransactionsOnTop: "showPendingTransactionsOnTop", showCheckImage: "showCheckImage", showManageNotes: "showManageNotes", getOrPostEndpoints: "getOrPostEndpoints", enableDisputeAndInquiry: "enableDisputeAndInquiry", disputeByBillingStatus: "disputeByBillingStatus", disputeEligibilityDays: "disputeEligibilityDays", disputeTransactionTypes: "disputeTransactionTypes", inquireTopicId: "inquireTopicId", disputeTopicId: "disputeTopicId", availableFiltersConfig: "availableFiltersConfig" }, outputs: { transactionSelected: "transactionSelected", transactionsLoaded: "transactionsLoaded" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BaseTransactionsWidget, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.WidgetPropertiesService }]; }, propDecorators: { googleAPIKey: [{
                type: Input
            }], initialFilterOptionsValue: [{
                type: Input,
                args: ['initialFilterOptions']
            }], initialSortOptionsValue: [{
                type: Input,
                args: ['initialSortOptions']
            }], pageSize: [{
                type: Input
            }], maxNavPages: [{
                type: Input
            }], paginationType: [{
                type: Input
            }], showControls: [{
                type: Input
            }], showChangeCategory: [{
                type: Input
            }], showPendingTransactionsOnTop: [{
                type: Input
            }], showCheckImage: [{
                type: Input
            }], showManageNotes: [{
                type: Input
            }], getOrPostEndpoints: [{
                type: Input
            }], enableDisputeAndInquiry: [{
                type: Input
            }], disputeByBillingStatus: [{
                type: Input
            }], disputeEligibilityDays: [{
                type: Input
            }], disputeTransactionTypes: [{
                type: Input
            }], inquireTopicId: [{
                type: Input
            }], disputeTopicId: [{
                type: Input
            }], availableFiltersConfig: [{
                type: Input
            }], transactionSelected: [{
                type: Output
            }], transactionsLoaded: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,