import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import { b64Encode } from '../constants';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/messages";
export class MessagesService {
    constructor(messageCenterHttpService) {
        this.messageCenterHttpService = messageCenterHttpService;
        // TODO: default message is out of scope
        this.defaultMessage = of({
            body: b64Encode('test message'),
            subject: 'no subject',
            topic: 'no topic',
            sender: {
                name: 'test sender',
            },
        });
    }
    saveMessages(message) {
        return this.messageCenterHttpService.postMessages({ presentationMessagePostRequestBody: message });
    }
    saveAttachment(attachment) {
        return this.messageCenterHttpService.postMessageAttachments({ attachment }).pipe(map((data) => data.id));
    }
    deleteAttachments(attachmentIds) {
        return this.messageCenterHttpService
            .deleteMessageAttachments({ ids: attachmentIds })
            .pipe(map((data) => data.deleted));
    }
    createDefaultBody(transaction) {
        var _a, _b;
        return `transactionID: ${transaction.id}
referenceNumber: ${transaction.reference}
arranagementID: ${transaction.arrangementId}
bookingDate: ${transaction.bookingDate}
amount: ${(_a = transaction.transactionAmountCurrency) === null || _a === void 0 ? void 0 : _a.amount}
merchantName: ${(_b = transaction.merchant) === null || _b === void 0 ? void 0 : _b.name}
counterpartyName: ${transaction.counterPartyName}
description: ${transaction.description}
type: ${transaction.type}`;
    }
}
MessagesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MessagesService, deps: [{ token: i1.MessagecenterHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
MessagesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MessagesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MessagesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.MessagecenterHttpService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdHJhbnNhY3Rpb25zLWNvbW1vbi1hbmcvc3JjL3NlcnZpY2VzL21lc3NhZ2VzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDOzs7QUFLekMsTUFBTSxPQUFPLGVBQWU7SUFDMUIsWUFBNkIsd0JBQWtEO1FBQWxELDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUE0Qi9FLHdDQUF3QztRQUN4QyxtQkFBYyxHQUF3QixFQUFFLENBQUM7WUFDdkMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxjQUFjLENBQUM7WUFDL0IsT0FBTyxFQUFFLFlBQVk7WUFDckIsS0FBSyxFQUFFLFVBQVU7WUFDakIsTUFBTSxFQUFFO2dCQUNOLElBQUksRUFBRSxhQUFhO2FBQ3BCO1NBQ0YsQ0FBQyxDQUFDO0lBcEMrRSxDQUFDO0lBRW5GLFlBQVksQ0FBQyxPQUFnQjtRQUMzQixPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxZQUFZLENBQUMsRUFBRSxrQ0FBa0MsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ3JHLENBQUM7SUFFRCxjQUFjLENBQUMsVUFBZ0I7UUFDN0IsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUMsc0JBQXNCLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNHLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxhQUE0QjtRQUM1QyxPQUFPLElBQUksQ0FBQyx3QkFBd0I7YUFDakMsd0JBQXdCLENBQUMsRUFBRSxHQUFHLEVBQUUsYUFBYSxFQUFFLENBQUM7YUFDaEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELGlCQUFpQixDQUFDLFdBQXdCOztRQUN4QyxPQUFPLGtCQUFrQixXQUFXLENBQUMsRUFBRTttQkFDeEIsV0FBVyxDQUFDLFNBQVM7a0JBQ3RCLFdBQVcsQ0FBQyxhQUFhO2VBQzVCLFdBQVcsQ0FBQyxXQUFXO1VBQzVCLE1BQUEsV0FBVyxDQUFDLHlCQUF5QiwwQ0FBRSxNQUFNO2dCQUN2QyxNQUFBLFdBQVcsQ0FBQyxRQUFRLDBDQUFFLElBQUk7b0JBQ3RCLFdBQVcsQ0FBQyxnQkFBZ0I7ZUFDakMsV0FBVyxDQUFDLFdBQVc7UUFDOUIsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pCLENBQUM7OzZHQTNCVSxlQUFlO2lIQUFmLGVBQWU7NEZBQWYsZUFBZTtrQkFEM0IsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1lc3NhZ2VjZW50ZXJIdHRwU2VydmljZSB9IGZyb20gJ0BiYWNrYmFzZS9kYXRhLWFuZy9tZXNzYWdlcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgYjY0RW5jb2RlIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IE1lc3NhZ2UsIE1lc3NhZ2VzUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbC9tZXNzYWdlcy5tb2RlbCc7XG5pbXBvcnQgeyBUcmFuc2FjdGlvbiB9IGZyb20gJy4uL21vZGVsL3RyYW5zYWN0aW9uLm1vZGVsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VzU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgbWVzc2FnZUNlbnRlckh0dHBTZXJ2aWNlOiBNZXNzYWdlY2VudGVySHR0cFNlcnZpY2UpIHt9XG5cbiAgc2F2ZU1lc3NhZ2VzKG1lc3NhZ2U6IE1lc3NhZ2UpOiBPYnNlcnZhYmxlPE1lc3NhZ2VzUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlQ2VudGVySHR0cFNlcnZpY2UucG9zdE1lc3NhZ2VzKHsgcHJlc2VudGF0aW9uTWVzc2FnZVBvc3RSZXF1ZXN0Qm9keTogbWVzc2FnZSB9KTtcbiAgfVxuXG4gIHNhdmVBdHRhY2htZW50KGF0dGFjaG1lbnQ6IEJsb2IpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VDZW50ZXJIdHRwU2VydmljZS5wb3N0TWVzc2FnZUF0dGFjaG1lbnRzKHsgYXR0YWNobWVudCB9KS5waXBlKG1hcCgoZGF0YSkgPT4gZGF0YS5pZCkpO1xuICB9XG5cbiAgZGVsZXRlQXR0YWNobWVudHMoYXR0YWNobWVudElkczogQXJyYXk8c3RyaW5nPik6IE9ic2VydmFibGU8QXJyYXk8c3RyaW5nPj4ge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VDZW50ZXJIdHRwU2VydmljZVxuICAgICAgLmRlbGV0ZU1lc3NhZ2VBdHRhY2htZW50cyh7IGlkczogYXR0YWNobWVudElkcyB9KVxuICAgICAgLnBpcGUobWFwKChkYXRhKSA9PiBkYXRhLmRlbGV0ZWQpKTtcbiAgfVxuXG4gIGNyZWF0ZURlZmF1bHRCb2R5KHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbikge1xuICAgIHJldHVybiBgdHJhbnNhY3Rpb25JRDogJHt0cmFuc2FjdGlvbi5pZH1cbnJlZmVyZW5jZU51bWJlcjogJHt0cmFuc2FjdGlvbi5yZWZlcmVuY2V9XG5hcnJhbmFnZW1lbnRJRDogJHt0cmFuc2FjdGlvbi5hcnJhbmdlbWVudElkfVxuYm9va2luZ0RhdGU6ICR7dHJhbnNhY3Rpb24uYm9va2luZ0RhdGV9XG5hbW91bnQ6ICR7dHJhbnNhY3Rpb24udHJhbnNhY3Rpb25BbW91bnRDdXJyZW5jeT8uYW1vdW50fVxubWVyY2hhbnROYW1lOiAke3RyYW5zYWN0aW9uLm1lcmNoYW50Py5uYW1lfVxuY291bnRlcnBhcnR5TmFtZTogJHt0cmFuc2FjdGlvbi5jb3VudGVyUGFydHlOYW1lfVxuZGVzY3JpcHRpb246ICR7dHJhbnNhY3Rpb24uZGVzY3JpcHRpb259XG50eXBlOiAke3RyYW5zYWN0aW9uLnR5cGV9YDtcbiAgfVxuXG4gIC8vIFRPRE86IGRlZmF1bHQgbWVzc2FnZSBpcyBvdXQgb2Ygc2NvcGVcbiAgZGVmYXVsdE1lc3NhZ2U6IE9ic2VydmFibGU8TWVzc2FnZT4gPSBvZih7XG4gICAgYm9keTogYjY0RW5jb2RlKCd0ZXN0IG1lc3NhZ2UnKSxcbiAgICBzdWJqZWN0OiAnbm8gc3ViamVjdCcsXG4gICAgdG9waWM6ICdubyB0b3BpYycsXG4gICAgc2VuZGVyOiB7XG4gICAgICBuYW1lOiAndGVzdCBzZW5kZXInLFxuICAgIH0sXG4gIH0pO1xufVxuIl19