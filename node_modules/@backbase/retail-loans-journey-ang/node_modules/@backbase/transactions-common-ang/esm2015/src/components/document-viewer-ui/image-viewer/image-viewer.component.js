import { ChangeDetectionStrategy, Component, Output, EventEmitter, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "../document-viewer-interactor/document-viewer-interactor.component";
const ZOOM_FACTOR = 1.1;
const ZOOM_IN_THRESHOLD = 4;
const ZOOM_OUT_THRESHOLD = 0.1;
export class ImageViewerComponent {
    constructor(domSanitizer) {
        this.domSanitizer = domSanitizer;
        this.navigationState = { currIdx: 0, total: 0 };
        this.navigate = new EventEmitter();
        this.imageUiState = { scale: 1 };
    }
    set source(src) {
        if (src) {
            this.revokeObjectURLIfNeeded();
            this.imageObjectUrl = src;
            this.imageObjectTrustedUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(this.imageObjectUrl);
        }
    }
    get canZoomOut() {
        return this.imageUiState.scale >= ZOOM_OUT_THRESHOLD;
    }
    get canZoomIn() {
        return this.imageUiState.scale <= ZOOM_IN_THRESHOLD;
    }
    get scale() {
        return this.domSanitizer.bypassSecurityTrustStyle(`scale(${this.imageUiState.scale})`);
    }
    ngOnDestroy() {
        this.revokeObjectURLIfNeeded();
    }
    zoomIn() {
        if (this.canZoomIn) {
            this.imageUiState.scale *= ZOOM_FACTOR;
        }
    }
    zoomOut() {
        if (this.canZoomOut) {
            this.imageUiState.scale /= ZOOM_FACTOR;
        }
    }
    revokeObjectURLIfNeeded() {
        if (this.imageObjectUrl) {
            window.URL.revokeObjectURL(this.imageObjectUrl);
        }
    }
}
ImageViewerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ImageViewerComponent, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
ImageViewerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ImageViewerComponent, selector: "bb-image-viewer", inputs: { source: "source", navigationState: "navigationState" }, outputs: { navigate: "navigate" }, ngImport: i0, template: "<div class=\"bb-img-viewer-container bb-stack bb-stack--center\">\n  <img \n    #imgRef \n    class=\"bb-img-viewer-container__img\" \n    [style.transform]=\"scale\" \n    [src]=\"imageObjectTrustedUrl\"\n    alt='Transaction check image' \n    (click)=\"$event.stopPropagation()\"\n  >\n</div>\n<bb-document-viewer-interactor\n[navigationState]=\"navigationState\" \n[canZoomOut]=\"canZoomOut\" \n[canZoomIn]=\"canZoomIn\"\n(navigate)=\"navigate.emit($event)\" \n(zoomIn)=\"zoomIn()\" \n(zoomOut)=\"zoomOut()\"\n></bb-document-viewer-interactor>\n\n", components: [{ type: i2.DocumentViewerInteractorComponent, selector: "bb-document-viewer-interactor", inputs: ["navigationState", "canZoomOut", "canZoomIn"], outputs: ["navigate", "zoomIn", "zoomOut"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ImageViewerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-image-viewer',
                    templateUrl: './image-viewer.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; }, propDecorators: { source: [{
                type: Input
            }], navigationState: [{
                type: Input
            }], navigate: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Utdmlld2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdHJhbnNhY3Rpb25zLWNvbW1vbi1hbmcvc3JjL2NvbXBvbmVudHMvZG9jdW1lbnQtdmlld2VyLXVpL2ltYWdlLXZpZXdlci9pbWFnZS12aWV3ZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy90cmFuc2FjdGlvbnMtY29tbW9uLWFuZy9zcmMvY29tcG9uZW50cy9kb2N1bWVudC12aWV3ZXItdWkvaW1hZ2Utdmlld2VyL2ltYWdlLXZpZXdlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sZUFBZSxDQUFDOzs7O0FBUTNHLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUN4QixNQUFNLGlCQUFpQixHQUFHLENBQUMsQ0FBQztBQUM1QixNQUFNLGtCQUFrQixHQUFHLEdBQUcsQ0FBQztBQU8vQixNQUFNLE9BQU8sb0JBQW9CO0lBbUIvQixZQUE2QixZQUEwQjtRQUExQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQVY5QyxvQkFBZSxHQUFvQixFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQzNELGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBRWhELGlCQUFZLEdBQWlCLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDO0lBT2dCLENBQUM7SUFsQjNELElBQWEsTUFBTSxDQUFDLEdBQXVCO1FBQ3pDLElBQUksR0FBRyxFQUFFO1lBQ1AsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7WUFDL0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxHQUFHLENBQUM7WUFFMUIsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsOEJBQThCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQ3BHO0lBQ0gsQ0FBQztJQWFELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLElBQUksa0JBQWtCLENBQUM7SUFDdkQsQ0FBQztJQUVELElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLElBQUksaUJBQWlCLENBQUM7SUFDdEQsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyx3QkFBd0IsQ0FBQyxTQUFTLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUN6RixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxNQUFNO1FBQ0osSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxJQUFJLFdBQVcsQ0FBQztTQUN4QztJQUNILENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25CLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxJQUFJLFdBQVcsQ0FBQztTQUN4QztJQUNILENBQUM7SUFFTyx1QkFBdUI7UUFDN0IsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3ZCLE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUNqRDtJQUNILENBQUM7O2tIQXJEVSxvQkFBb0I7c0dBQXBCLG9CQUFvQiw0SkNqQmpDLHlpQkFtQkE7NEZERmEsb0JBQW9CO2tCQUxoQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLFdBQVcsRUFBRSwrQkFBK0I7b0JBQzVDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNoRDttR0FFYyxNQUFNO3NCQUFsQixLQUFLO2dCQVFHLGVBQWU7c0JBQXZCLEtBQUs7Z0JBQ0ksUUFBUTtzQkFBakIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVTdHlsZSwgU2FmZVVybCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgTmF2aWdhdGlvblN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvVUkvZG9jdW1lbnQtdmlld2VyLWNvbW1vbnMnO1xuXG5pbnRlcmZhY2UgSW1hZ2VVSVN0YXRlIHtcbiAgc2NhbGU6IG51bWJlcjtcbn1cblxuY29uc3QgWk9PTV9GQUNUT1IgPSAxLjE7XG5jb25zdCBaT09NX0lOX1RIUkVTSE9MRCA9IDQ7XG5jb25zdCBaT09NX09VVF9USFJFU0hPTEQgPSAwLjE7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWltYWdlLXZpZXdlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9pbWFnZS12aWV3ZXIuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgSW1hZ2VWaWV3ZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBASW5wdXQoKSBzZXQgc291cmNlKHNyYzogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHNyYykge1xuICAgICAgdGhpcy5yZXZva2VPYmplY3RVUkxJZk5lZWRlZCgpO1xuICAgICAgdGhpcy5pbWFnZU9iamVjdFVybCA9IHNyYztcblxuICAgICAgdGhpcy5pbWFnZU9iamVjdFRydXN0ZWRVcmwgPSB0aGlzLmRvbVNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0UmVzb3VyY2VVcmwodGhpcy5pbWFnZU9iamVjdFVybCk7XG4gICAgfVxuICB9XG4gIEBJbnB1dCgpIG5hdmlnYXRpb25TdGF0ZTogTmF2aWdhdGlvblN0YXRlID0geyBjdXJySWR4OiAwLCB0b3RhbDogMCB9O1xuICBAT3V0cHV0KCkgbmF2aWdhdGUgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcbiAgaW1hZ2VPYmplY3RUcnVzdGVkVXJsOiBTYWZlVXJsIHwgdW5kZWZpbmVkO1xuICBpbWFnZVVpU3RhdGU6IEltYWdlVUlTdGF0ZSA9IHsgc2NhbGU6IDEgfTtcblxuICAvKipcbiAgICogSW50ZXJuYWxcbiAgICovXG4gIHByaXZhdGUgaW1hZ2VPYmplY3RVcmw6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyKSB7fVxuXG4gIGdldCBjYW5ab29tT3V0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmltYWdlVWlTdGF0ZS5zY2FsZSA+PSBaT09NX09VVF9USFJFU0hPTEQ7XG4gIH1cblxuICBnZXQgY2FuWm9vbUluKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmltYWdlVWlTdGF0ZS5zY2FsZSA8PSBaT09NX0lOX1RIUkVTSE9MRDtcbiAgfVxuXG4gIGdldCBzY2FsZSgpOiBTYWZlU3R5bGUge1xuICAgIHJldHVybiB0aGlzLmRvbVNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0U3R5bGUoYHNjYWxlKCR7dGhpcy5pbWFnZVVpU3RhdGUuc2NhbGV9KWApO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5yZXZva2VPYmplY3RVUkxJZk5lZWRlZCgpO1xuICB9XG5cbiAgem9vbUluKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNhblpvb21Jbikge1xuICAgICAgdGhpcy5pbWFnZVVpU3RhdGUuc2NhbGUgKj0gWk9PTV9GQUNUT1I7XG4gICAgfVxuICB9XG5cbiAgem9vbU91dCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jYW5ab29tT3V0KSB7XG4gICAgICB0aGlzLmltYWdlVWlTdGF0ZS5zY2FsZSAvPSBaT09NX0ZBQ1RPUjtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJldm9rZU9iamVjdFVSTElmTmVlZGVkKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmltYWdlT2JqZWN0VXJsKSB7XG4gICAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh0aGlzLmltYWdlT2JqZWN0VXJsKTtcbiAgICB9XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJiYi1pbWctdmlld2VyLWNvbnRhaW5lciBiYi1zdGFjayBiYi1zdGFjay0tY2VudGVyXCI+XG4gIDxpbWcgXG4gICAgI2ltZ1JlZiBcbiAgICBjbGFzcz1cImJiLWltZy12aWV3ZXItY29udGFpbmVyX19pbWdcIiBcbiAgICBbc3R5bGUudHJhbnNmb3JtXT1cInNjYWxlXCIgXG4gICAgW3NyY109XCJpbWFnZU9iamVjdFRydXN0ZWRVcmxcIlxuICAgIGFsdD0nVHJhbnNhY3Rpb24gY2hlY2sgaW1hZ2UnIFxuICAgIChjbGljayk9XCIkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcIlxuICA+XG48L2Rpdj5cbjxiYi1kb2N1bWVudC12aWV3ZXItaW50ZXJhY3RvclxuW25hdmlnYXRpb25TdGF0ZV09XCJuYXZpZ2F0aW9uU3RhdGVcIiBcbltjYW5ab29tT3V0XT1cImNhblpvb21PdXRcIiBcbltjYW5ab29tSW5dPVwiY2FuWm9vbUluXCJcbihuYXZpZ2F0ZSk9XCJuYXZpZ2F0ZS5lbWl0KCRldmVudClcIiBcbih6b29tSW4pPVwiem9vbUluKClcIiBcbih6b29tT3V0KT1cInpvb21PdXQoKVwiXG4+PC9iYi1kb2N1bWVudC12aWV3ZXItaW50ZXJhY3Rvcj5cblxuIl19