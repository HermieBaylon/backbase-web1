import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { of } from 'rxjs';
import { getKeyCode, KEY_CODES } from '../../model/UI/document-viewer-commons';
import * as i0 from "@angular/core";
import * as i1 from "../document-viewer-ui/document-viewer-backdrop/document-viewer-backdrop.component";
import * as i2 from "../document-viewer-ui/document-viewer-container/document-viewer-container.component";
import * as i3 from "@angular/cdk/a11y";
export class TransactionCheckImageDocumentViewerComponent {
    constructor() {
        this.closeViewer = new EventEmitter();
    }
    toDocumentRefSrc(...images) {
        return images
            .filter((item) => !!item)
            .map((image) => {
            const { mimeType, content, side } = image;
            const fileType = image === null || image === void 0 ? void 0 : image.mimeType.replace('image/', '');
            const filename = `${this.imageCheckNumber}-${side}.${fileType}`;
            return {
                filename,
                filetype: image === null || image === void 0 ? void 0 : image.mimeType,
                src: of(`data:${mimeType};base64,${content}`),
            };
        });
    }
    get imagesRefsSrc() {
        return this.toDocumentRefSrc(this.imageFront, this.imageBack);
    }
    closeDocumentViewer() {
        this.closeViewer.emit();
    }
    trapKeyEvent(event) {
        if (getKeyCode(event) !== KEY_CODES.ESCAPE) {
            event.stopPropagation();
        }
    }
}
TransactionCheckImageDocumentViewerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionCheckImageDocumentViewerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TransactionCheckImageDocumentViewerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionCheckImageDocumentViewerComponent, selector: "bb-transaction-check-image-document-viewer", inputs: { imageCheckNumber: "imageCheckNumber", imageFront: "imageFront", imageBack: "imageBack", position: "position" }, outputs: { closeViewer: "closeViewer" }, ngImport: i0, template: "<div\n  (keydown)=\"trapKeyEvent($event)\"\n  (keyup)=\"trapKeyEvent($event)\"\n>\n  <bb-document-viewer-backdrop></bb-document-viewer-backdrop>\n  <bb-document-viewer-container\n    [documentRefSrcs]=\"imagesRefsSrc\"\n    [activeDocumentRefIdx]=\"position\"\n    cdkTrapFocus\n    (close)=\"closeDocumentViewer()\"\n  ></bb-document-viewer-container>\n</div>\n", components: [{ type: i1.DocumentViewerBackdropComponent, selector: "bb-document-viewer-backdrop", inputs: ["options"] }, { type: i2.DocumentViewerContainerComponent, selector: "bb-document-viewer-container", inputs: ["documentRefSrcs", "activeDocumentRefIdx", "options"], outputs: ["close"] }], directives: [{ type: i3.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionCheckImageDocumentViewerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-check-image-document-viewer',
                    templateUrl: 'transaction-check-image-document-viewer.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { imageCheckNumber: [{
                type: Input
            }], imageFront: [{
                type: Input
            }], imageBack: [{
                type: Input
            }], position: [{
                type: Input
            }], closeViewer: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24tY2hlY2staW1hZ2UtZG9jdW1lbnQtdmlld2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdHJhbnNhY3Rpb25zLWNvbW1vbi1hbmcvc3JjL2NvbXBvbmVudHMvdHJhbnNhY3Rpb25zLWNvbnRyb2xzL3RyYW5zYWN0aW9uLWNoZWNrLWltYWdlLWRvY3VtZW50LXZpZXdlci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3RyYW5zYWN0aW9ucy1jb21tb24tYW5nL3NyYy9jb21wb25lbnRzL3RyYW5zYWN0aW9ucy1jb250cm9scy90cmFuc2FjdGlvbi1jaGVjay1pbWFnZS1kb2N1bWVudC12aWV3ZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRyxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTFCLE9BQU8sRUFBa0IsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLHdDQUF3QyxDQUFDOzs7OztBQVEvRixNQUFNLE9BQU8sNENBQTRDO0lBTHpEO1FBV1ksZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO0tBK0JsRDtJQTdCUyxnQkFBZ0IsQ0FBQyxHQUFHLE1BQTRCO1FBQ3RELE9BQU8sTUFBTTthQUNWLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQzthQUN4QixHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNiLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLEtBQStCLENBQUM7WUFDcEUsTUFBTSxRQUFRLEdBQUcsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZELE1BQU0sUUFBUSxHQUFHLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUVoRSxPQUFPO2dCQUNMLFFBQVE7Z0JBQ1IsUUFBUSxFQUFFLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxRQUFlO2dCQUNoQyxHQUFHLEVBQUUsRUFBRSxDQUFDLFFBQVEsUUFBUSxXQUFXLE9BQU8sRUFBRSxDQUFDO2FBQzlDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxJQUFJLGFBQWE7UUFDZixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsbUJBQW1CO1FBQ2pCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELFlBQVksQ0FBQyxLQUFvQjtRQUMvQixJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxTQUFTLENBQUMsTUFBTSxFQUFFO1lBQzFDLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUN6QjtJQUNILENBQUM7OzBJQXBDVSw0Q0FBNEM7OEhBQTVDLDRDQUE0QyxxUENYekQsNFdBWUE7NEZERGEsNENBQTRDO2tCQUx4RCxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSw0Q0FBNEM7b0JBQ3RELFdBQVcsRUFBRSx3REFBd0Q7b0JBQ3JFLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNoRDs4QkFFVSxnQkFBZ0I7c0JBQXhCLEtBQUs7Z0JBQ0csVUFBVTtzQkFBbEIsS0FBSztnQkFDRyxTQUFTO3NCQUFqQixLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBRUksV0FBVztzQkFBcEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uc0NoZWNrSW1hZ2UgfSBmcm9tICcuLi8uLi9tb2RlbC90cmFuc2FjdGlvbnMtY2hlY2staW1hZ2VzLm1vZGVsJztcbmltcG9ydCB7IERvY3VtZW50UmVmU3JjLCBnZXRLZXlDb2RlLCBLRVlfQ09ERVMgfSBmcm9tICcuLi8uLi9tb2RlbC9VSS9kb2N1bWVudC12aWV3ZXItY29tbW9ucyc7XG50eXBlIE9wdGlvbmFsQ2hlY2tJbWFnZSA9IFRyYW5zYWN0aW9uc0NoZWNrSW1hZ2UgfCB1bmRlZmluZWQ7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLXRyYW5zYWN0aW9uLWNoZWNrLWltYWdlLWRvY3VtZW50LXZpZXdlcicsXG4gIHRlbXBsYXRlVXJsOiAndHJhbnNhY3Rpb24tY2hlY2staW1hZ2UtZG9jdW1lbnQtdmlld2VyLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFRyYW5zYWN0aW9uQ2hlY2tJbWFnZURvY3VtZW50Vmlld2VyQ29tcG9uZW50IHtcbiAgQElucHV0KCkgaW1hZ2VDaGVja051bWJlcjogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBASW5wdXQoKSBpbWFnZUZyb250OiBUcmFuc2FjdGlvbnNDaGVja0ltYWdlIHwgdW5kZWZpbmVkO1xuICBASW5wdXQoKSBpbWFnZUJhY2s6IFRyYW5zYWN0aW9uc0NoZWNrSW1hZ2UgfCB1bmRlZmluZWQ7XG4gIEBJbnB1dCgpIHBvc2l0aW9uOiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cbiAgQE91dHB1dCgpIGNsb3NlVmlld2VyID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIHByaXZhdGUgdG9Eb2N1bWVudFJlZlNyYyguLi5pbWFnZXM6IE9wdGlvbmFsQ2hlY2tJbWFnZVtdKTogRG9jdW1lbnRSZWZTcmNbXSB7XG4gICAgcmV0dXJuIGltYWdlc1xuICAgICAgLmZpbHRlcigoaXRlbSkgPT4gISFpdGVtKVxuICAgICAgLm1hcCgoaW1hZ2UpID0+IHtcbiAgICAgICAgY29uc3QgeyBtaW1lVHlwZSwgY29udGVudCwgc2lkZSB9ID0gaW1hZ2UgYXMgVHJhbnNhY3Rpb25zQ2hlY2tJbWFnZTtcbiAgICAgICAgY29uc3QgZmlsZVR5cGUgPSBpbWFnZT8ubWltZVR5cGUucmVwbGFjZSgnaW1hZ2UvJywgJycpO1xuICAgICAgICBjb25zdCBmaWxlbmFtZSA9IGAke3RoaXMuaW1hZ2VDaGVja051bWJlcn0tJHtzaWRlfS4ke2ZpbGVUeXBlfWA7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBmaWxlbmFtZSxcbiAgICAgICAgICBmaWxldHlwZTogaW1hZ2U/Lm1pbWVUeXBlIGFzIGFueSxcbiAgICAgICAgICBzcmM6IG9mKGBkYXRhOiR7bWltZVR5cGV9O2Jhc2U2NCwke2NvbnRlbnR9YCksXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgfVxuXG4gIGdldCBpbWFnZXNSZWZzU3JjKCkge1xuICAgIHJldHVybiB0aGlzLnRvRG9jdW1lbnRSZWZTcmModGhpcy5pbWFnZUZyb250LCB0aGlzLmltYWdlQmFjayk7XG4gIH1cblxuICBjbG9zZURvY3VtZW50Vmlld2VyKCkge1xuICAgIHRoaXMuY2xvc2VWaWV3ZXIuZW1pdCgpO1xuICB9XG5cbiAgdHJhcEtleUV2ZW50KGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgaWYgKGdldEtleUNvZGUoZXZlbnQpICE9PSBLRVlfQ09ERVMuRVNDQVBFKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cbn1cbiIsIjxkaXZcbiAgKGtleWRvd24pPVwidHJhcEtleUV2ZW50KCRldmVudClcIlxuICAoa2V5dXApPVwidHJhcEtleUV2ZW50KCRldmVudClcIlxuPlxuICA8YmItZG9jdW1lbnQtdmlld2VyLWJhY2tkcm9wPjwvYmItZG9jdW1lbnQtdmlld2VyLWJhY2tkcm9wPlxuICA8YmItZG9jdW1lbnQtdmlld2VyLWNvbnRhaW5lclxuICAgIFtkb2N1bWVudFJlZlNyY3NdPVwiaW1hZ2VzUmVmc1NyY1wiXG4gICAgW2FjdGl2ZURvY3VtZW50UmVmSWR4XT1cInBvc2l0aW9uXCJcbiAgICBjZGtUcmFwRm9jdXNcbiAgICAoY2xvc2UpPVwiY2xvc2VEb2N1bWVudFZpZXdlcigpXCJcbiAgPjwvYmItZG9jdW1lbnQtdmlld2VyLWNvbnRhaW5lcj5cbjwvZGl2PlxuIl19