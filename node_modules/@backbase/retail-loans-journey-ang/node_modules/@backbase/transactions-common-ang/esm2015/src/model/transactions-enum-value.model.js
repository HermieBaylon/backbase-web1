/* eslint-disable no-redeclare*/
export var TransactionsEnumValue;
(function (TransactionsEnumValue) {
    function toTitleCase(text) {
        if (!text) {
            return '';
        }
        return `${text.charAt(0).toUpperCase()}${text.substr(1).toLowerCase()}`;
    }
    // Until Angular supports i18n in typescript, this is the way to go
    function processEnumValue(enumValue) {
        switch (enumValue.value) {
            case 'CRDT':
                return Object.assign(Object.assign({}, enumValue), { name: 'Credit' });
            case 'DBIT':
                return Object.assign(Object.assign({}, enumValue), { name: 'Debit' });
            case 'BILLED':
            case 'UNBILLED':
            case 'PENDING':
                return Object.assign(Object.assign({}, enumValue), { name: enumValue.name || toTitleCase(enumValue.value) });
            default:
                return Object.assign(Object.assign({}, enumValue), { name: enumValue.name || enumValue.value });
        }
    }
    function processEnumValues(enumValues) {
        return enumValues.map(processEnumValue);
    }
    function fromHttpResponse(response) {
        return processEnumValues(response.body || []);
    }
    TransactionsEnumValue.fromHttpResponse = fromHttpResponse;
})(TransactionsEnumValue || (TransactionsEnumValue = {}));
/* eslint-enable no-redeclare*/
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb25zLWVudW0tdmFsdWUubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3RyYW5zYWN0aW9ucy1jb21tb24tYW5nL3NyYy9tb2RlbC90cmFuc2FjdGlvbnMtZW51bS12YWx1ZS5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxnQ0FBZ0M7QUFDaEMsTUFBTSxLQUFXLHFCQUFxQixDQThDckM7QUE5Q0QsV0FBaUIscUJBQXFCO0lBQ3BDLFNBQVMsV0FBVyxDQUFDLElBQXdCO1FBQzNDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVCxPQUFPLEVBQUUsQ0FBQztTQUNYO1FBRUQsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO0lBQzFFLENBQUM7SUFFRCxtRUFBbUU7SUFDbkUsU0FBUyxnQkFBZ0IsQ0FBQyxTQUFnQztRQUN4RCxRQUFRLFNBQVMsQ0FBQyxLQUFLLEVBQUU7WUFDdkIsS0FBSyxNQUFNO2dCQUNULHVDQUNLLFNBQVMsS0FDWixJQUFJLEVBQUUsUUFBUSxJQUNkO1lBQ0osS0FBSyxNQUFNO2dCQUNULHVDQUNLLFNBQVMsS0FDWixJQUFJLEVBQUUsT0FBTyxJQUNiO1lBQ0osS0FBSyxRQUFRLENBQUM7WUFDZCxLQUFLLFVBQVUsQ0FBQztZQUNoQixLQUFLLFNBQVM7Z0JBQ1osdUNBQ0ssU0FBUyxLQUNaLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxJQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQ3BEO1lBQ0o7Z0JBQ0UsdUNBQ0ssU0FBUyxLQUNaLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxJQUFJLFNBQVMsQ0FBQyxLQUFLLElBQ3ZDO1NBQ0w7SUFDSCxDQUFDO0lBRUQsU0FBUyxpQkFBaUIsQ0FBQyxVQUF3QztRQUNqRSxPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsU0FBZ0IsZ0JBQWdCLENBQzlCLFFBQWtFO1FBRWxFLE9BQU8saUJBQWlCLENBQUUsUUFBUSxDQUFDLElBQWlDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUplLHNDQUFnQixtQkFJL0IsQ0FBQTtBQUNILENBQUMsRUE5Q2dCLHFCQUFxQixLQUFyQixxQkFBcUIsUUE4Q3JDO0FBQ0QsK0JBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgRW51bVZhbHVlc0J5QXR0cmlidXRlTmFtZUdldFJlc3BvbnNlQm9keSB9IGZyb20gJ0BiYWNrYmFzZS9kYXRhLWFuZy90cmFuc2FjdGlvbnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zYWN0aW9uc0VudW1WYWx1ZSB7XG4gIHZhbHVlPzogc3RyaW5nO1xuICBuYW1lPzogc3RyaW5nO1xufVxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVkZWNsYXJlKi9cbmV4cG9ydCBuYW1lc3BhY2UgVHJhbnNhY3Rpb25zRW51bVZhbHVlIHtcbiAgZnVuY3Rpb24gdG9UaXRsZUNhc2UodGV4dDogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKCF0ZXh0KSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGAke3RleHQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCl9JHt0ZXh0LnN1YnN0cigxKS50b0xvd2VyQ2FzZSgpfWA7XG4gIH1cblxuICAvLyBVbnRpbCBBbmd1bGFyIHN1cHBvcnRzIGkxOG4gaW4gdHlwZXNjcmlwdCwgdGhpcyBpcyB0aGUgd2F5IHRvIGdvXG4gIGZ1bmN0aW9uIHByb2Nlc3NFbnVtVmFsdWUoZW51bVZhbHVlOiBUcmFuc2FjdGlvbnNFbnVtVmFsdWUpIHtcbiAgICBzd2l0Y2ggKGVudW1WYWx1ZS52YWx1ZSkge1xuICAgICAgY2FzZSAnQ1JEVCc6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uZW51bVZhbHVlLFxuICAgICAgICAgIG5hbWU6ICdDcmVkaXQnLFxuICAgICAgICB9O1xuICAgICAgY2FzZSAnREJJVCc6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uZW51bVZhbHVlLFxuICAgICAgICAgIG5hbWU6ICdEZWJpdCcsXG4gICAgICAgIH07XG4gICAgICBjYXNlICdCSUxMRUQnOlxuICAgICAgY2FzZSAnVU5CSUxMRUQnOlxuICAgICAgY2FzZSAnUEVORElORyc6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uZW51bVZhbHVlLFxuICAgICAgICAgIG5hbWU6IGVudW1WYWx1ZS5uYW1lIHx8IHRvVGl0bGVDYXNlKGVudW1WYWx1ZS52YWx1ZSksXG4gICAgICAgIH07XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLmVudW1WYWx1ZSxcbiAgICAgICAgICBuYW1lOiBlbnVtVmFsdWUubmFtZSB8fCBlbnVtVmFsdWUudmFsdWUsXG4gICAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc0VudW1WYWx1ZXMoZW51bVZhbHVlczogQXJyYXk8VHJhbnNhY3Rpb25zRW51bVZhbHVlPikge1xuICAgIHJldHVybiBlbnVtVmFsdWVzLm1hcChwcm9jZXNzRW51bVZhbHVlKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBmcm9tSHR0cFJlc3BvbnNlKFxuICAgIHJlc3BvbnNlOiBIdHRwUmVzcG9uc2U8RW51bVZhbHVlc0J5QXR0cmlidXRlTmFtZUdldFJlc3BvbnNlQm9keVtdPixcbiAgKTogQXJyYXk8VHJhbnNhY3Rpb25zRW51bVZhbHVlPiB7XG4gICAgcmV0dXJuIHByb2Nlc3NFbnVtVmFsdWVzKChyZXNwb25zZS5ib2R5IGFzIEFycmF5PHsgdmFsdWU6IHN0cmluZyB9PikgfHwgW10pO1xuICB9XG59XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXJlZGVjbGFyZSovXG4iXX0=