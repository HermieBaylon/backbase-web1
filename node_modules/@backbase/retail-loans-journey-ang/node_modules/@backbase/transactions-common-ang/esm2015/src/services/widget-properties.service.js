import { Injectable, Optional } from '@angular/core';
import { defer, of } from 'rxjs';
import { catchError, map, publishReplay, refCount } from 'rxjs/operators';
import { deserialize, parseSortOptions } from '../constants';
import { TransactionsFilterOptions } from '../model/transactions-filter-options.model';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
const WidgetProperties = {
    pageSize: 'bb.transaction.pageSize',
    maxNavPages: 'bb.transaction.maxNavPages',
    paginationType: 'bb.transaction.paginationType',
    initialFilterOptions: 'bb.transaction.initialFilterOptions',
    initialSortOptions: 'bb.transaction.initialSortOptions',
    showControls: 'bb.transaction.showControls',
    showChangeCategory: 'bb.transaction.showChangeCategory',
    refreshTransactionsListEvents: 'event.refreshTransactionsList',
    showPendingTransactionsOnTop: 'bb.transaction.showPendingTransactionsOnTop',
    showCheckImage: 'bb.transaction.showCheckImage',
    gmapsAPIKey: 'bb.transaction.gmapsAPIKey',
    showManageNotes: 'bb.transaction.showManageNotes',
    getOrPostEndpoints: 'bb.transaction.getOrPostEndpoints',
    disputeByBillingStatus: 'disputeByBillingStatus',
    disputeEligibilityDays: 'disputeEligibilityDays',
    disputeTransactionTypes: 'disputeTransactionTypes',
    enableDisputeAndInquiry: 'enableDisputeAndInquiry',
    inquireTopicId: 'inquireTopicId',
    disputeTopicId: 'disputeTopicId',
};
export const defaultPageSize = 10;
export const defaultMaxNavPage = 3;
export const defaultInitialFilterOptions = '';
export const defaultInitialSortOptions = '';
export var PaginationType;
(function (PaginationType) {
    PaginationType["LOAD_MORE"] = "load-more";
    PaginationType["PAGINATION"] = "pagination";
    PaginationType["INFINITE_SCROLL"] = "infinite-scroll";
})(PaginationType || (PaginationType = {}));
export var EndpointType;
(function (EndpointType) {
    EndpointType["GET_REQUEST"] = "get-request";
    EndpointType["POST_REQUEST"] = "post-request";
})(EndpointType || (EndpointType = {}));
const defaultModelObservable = (value) => defer(() => of(value)).pipe(publishReplay(1), refCount());
export class WidgetPropertiesService {
    constructor(itemModel) {
        this.itemModel = itemModel;
    }
    get pageSize() {
        if (!this.itemModel) {
            return defaultModelObservable(defaultPageSize);
        }
        return this.itemModel.property(WidgetProperties.pageSize).pipe(map((propertyValue) => parseInt(propertyValue, 10)), map((pageSize) => (pageSize > 0 ? pageSize : defaultPageSize)));
    }
    get maxNavPages() {
        if (!this.itemModel) {
            return defaultModelObservable(defaultMaxNavPage);
        }
        return this.itemModel
            .property(WidgetProperties.maxNavPages)
            .pipe(map((propertyValue) => parseInt(propertyValue, 10)));
    }
    get paginationType() {
        if (!this.itemModel) {
            return defaultModelObservable(PaginationType.LOAD_MORE);
        }
        return this.itemModel
            .property(WidgetProperties.paginationType)
            .pipe(map((propertyValue) => propertyValue));
    }
    get initialFilterOptions() {
        if (!this.itemModel) {
            return defaultModelObservable({});
        }
        return this.itemModel.property(WidgetProperties.initialFilterOptions, defaultInitialFilterOptions).pipe(map(deserialize), map((params) => TransactionsFilterOptions.fromHttpGetParams(params)));
    }
    get initialSortOptions() {
        if (!this.itemModel) {
            return defaultModelObservable(parseSortOptions(defaultInitialSortOptions));
        }
        return this.itemModel.property(WidgetProperties.initialSortOptions, defaultInitialSortOptions).pipe(map(parseSortOptions), catchError((err) => {
            console.warn(`initialSortOptions property ignored: ${err}`);
            return of(undefined);
        }));
    }
    get showControls() {
        if (!this.itemModel) {
            return defaultModelObservable(true);
        }
        return this.itemModel
            .property(WidgetProperties.showControls)
            .pipe(map((propertyValue) => (typeof propertyValue === 'boolean' ? propertyValue : propertyValue === 'true')));
    }
    get showChangeCategory() {
        if (!this.itemModel) {
            return defaultModelObservable(true);
        }
        return this.itemModel
            .property(WidgetProperties.showChangeCategory)
            .pipe(map((propertyValue) => (typeof propertyValue === 'boolean' ? propertyValue : propertyValue === 'true')));
    }
    get refreshTransactionsListEvents() {
        if (!this.itemModel) {
            return defaultModelObservable('');
        }
        return this.itemModel
            .property(WidgetProperties.refreshTransactionsListEvents)
            .pipe(map((propertyValue) => propertyValue));
    }
    get showPendingTransactionsOnTop() {
        if (!this.itemModel) {
            return defaultModelObservable(false);
        }
        return this.itemModel
            .property(WidgetProperties.showPendingTransactionsOnTop)
            .pipe(map((propertyValue) => (typeof propertyValue === 'boolean' ? propertyValue : propertyValue === 'true')));
    }
    get showCheckImage() {
        if (!this.itemModel) {
            return defaultModelObservable(true);
        }
        return this.itemModel
            .property(WidgetProperties.showCheckImage)
            .pipe(map((propertyValue) => (typeof propertyValue === 'boolean' ? propertyValue : propertyValue === 'true')));
    }
    get showManageNotes() {
        if (!this.itemModel) {
            return defaultModelObservable(true);
        }
        return this.itemModel
            .property(WidgetProperties.showManageNotes)
            .pipe(map((propertyValue) => (typeof propertyValue === 'boolean' ? propertyValue : propertyValue === 'true')));
    }
    get getOrPostEndpoints() {
        if (!this.itemModel) {
            return defaultModelObservable(EndpointType.POST_REQUEST);
        }
        return this.itemModel
            .property(WidgetProperties.getOrPostEndpoints)
            .pipe(map((propertyValue) => propertyValue));
    }
    get gmapsAPIKey() {
        if (!this.itemModel) {
            return defaultModelObservable('');
        }
        return this.itemModel.property(WidgetProperties.gmapsAPIKey).pipe(map((propertyValue) => propertyValue));
    }
    get disputeByBillingStatus() {
        if (!this.itemModel) {
            return defaultModelObservable(true);
        }
        return this.itemModel
            .property(WidgetProperties.disputeByBillingStatus)
            .pipe(map((propertyValue) => (typeof propertyValue === 'boolean' ? propertyValue : propertyValue === 'true')));
    }
    get disputeEligibilityDays() {
        if (!this.itemModel) {
            return defaultModelObservable(120);
        }
        return this.itemModel
            .property(WidgetProperties.disputeEligibilityDays, '120')
            .pipe(map((propertyValue) => parseInt(propertyValue, 10)));
    }
    get disputeTransactionTypes() {
        if (!this.itemModel) {
            return defaultModelObservable(['Credit/Debit Card']);
        }
        return this.itemModel
            .property(WidgetProperties.disputeTransactionTypes, 'Credit/Debit Card')
            .pipe(map((propertyValue) => propertyValue.split(',')));
    }
    get enableDisputeAndInquiry() {
        if (!this.itemModel) {
            return defaultModelObservable(false);
        }
        return this.itemModel
            .property(WidgetProperties.enableDisputeAndInquiry)
            .pipe(map((propertyValue) => (typeof propertyValue === 'boolean' ? propertyValue : propertyValue === 'true')));
    }
    get inquireTopicId() {
        if (!this.itemModel) {
            return defaultModelObservable('');
        }
        return this.itemModel
            .property(WidgetProperties.inquireTopicId)
            .pipe(map((propertyValue) => propertyValue));
    }
    get disputeTopicId() {
        if (!this.itemModel) {
            return defaultModelObservable('');
        }
        return this.itemModel
            .property(WidgetProperties.disputeTopicId)
            .pipe(map((propertyValue) => propertyValue));
    }
}
WidgetPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: WidgetPropertiesService, deps: [{ token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
WidgetPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: WidgetPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: WidgetPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,