import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { TransactionsCheckImageSide, } from '../../model/transactions-check-images.model';
import { TransactionsDetailsLoadingState } from '../../model/transactions-details.model';
import * as i0 from "@angular/core";
import * as i1 from "./transaction-check-image-item.component";
import * as i2 from "./transaction-check-image-document-viewer.component";
import * as i3 from "@backbase/ui-ang/loading-indicator";
import * as i4 from "@angular/common";
export class TransactionCheckImageComponent {
    constructor() {
        this.loadingStateEnum = TransactionsDetailsLoadingState;
        /**
         * Index to display in the document viewer. For the purpose of hidding and showing
         * the viewer this will be base 1
         * when the value is 0 the document viewer will not be visible
         */
        this.index = 0;
    }
    /**
     * The check image object.
     */
    // eslint-disable-next-line
    set checkImagesList(value) {
        this.imageFront = value && value.images.find((data) => data.side === TransactionsCheckImageSide.FRONT);
        this.imageBack = value && value.images.find((data) => data.side === TransactionsCheckImageSide.BACK);
    }
    get hasErrors() {
        return (this.transactionDetailsLoadingStatus &&
            this.transactionDetailsLoadingStatus.checkImages &&
            this.transactionDetailsLoadingStatus.checkImages < 0);
    }
    get isDone() {
        return (this.transactionDetailsLoadingStatus &&
            this.transactionDetailsLoadingStatus.checkImages === TransactionsDetailsLoadingState.done);
    }
    onClose() {
        this.index = 0;
    }
    selectImage(index) {
        this.index = index;
    }
}
TransactionCheckImageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionCheckImageComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TransactionCheckImageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionCheckImageComponent, selector: "bb-transaction-check-image", inputs: { transaction: "transaction", checkImagesList: "checkImagesList", transactionDetailsLoadingStatus: "transactionDetailsLoadingStatus" }, ngImport: i0, template: "<ng-container *ngIf=\"isDone || hasErrors; else loadingState\">\n  <div class=\"bb-stack bb-stack--wrap\">\n    <div class=\"bb-stack__item\">\n      <bb-transaction-check-image-item\n        *ngIf=\"!!imageFront || hasErrors\"\n        [image]=\"imageFront\"\n        data-role=\"check-image-item-front\"\n        (selectImage)=\"selectImage(1)\"\n        [transaction]=\"transaction\"\n        sideText=\"Front\"\n        imageAlt=\"Front check image\"\n        i18n-sideText=\"Front side title of check image@@transactions.detail.check-image.front.title\"\n        i18n-imageAlt=\"Front side alt of check image@@transactions.detail.check-image.front.alt-image\"\n      ></bb-transaction-check-image-item>\n    </div>\n\n    <div class=\"bb-stack__item\">\n      <bb-transaction-check-image-item\n        *ngIf=\"!!imageBack || hasErrors\"\n        data-role=\"check-image-item-back\"\n        (selectImage)=\"selectImage(imageFront ? 2 : 1)\"\n        [image]=\"imageBack\"\n        [transaction]=\"transaction\"\n        sideText=\"Back\"\n        imageAlt=\"Back check image\"\n        i18n-sideText=\"Back side title of check image@@transactions.detail.check-image.back.title\"\n        i18n-imageAlt=\"Back side alt of check image@@transactions.detail.check-image.back.alt-image\"\n      ></bb-transaction-check-image-item>\n    </div>\n  </div>\n\n  <bb-transaction-check-image-document-viewer \n    *ngIf=\"index>0\"\n    data-role=\"check-image-document-viewer\"\n    [imageCheckNumber]=\"transaction?.checkSerialNumber\"\n    [imageFront]=\"imageFront\"\n    [imageBack]=\"imageBack\"\n    [position]=\"index-1\"\n    (closeViewer)=\"onClose()\"\n  ></bb-transaction-check-image-document-viewer>\n\n  <ng-container *ngIf=\"hasErrors\">\n    <span \n      i18n=\"Something went wrong@@transactions.detail.check-image.server-error\"\n      class=\"bb-input-validation-message\"\n      data-role=\"check-image-server-error-state\"\n      *ngIf=\"transactionDetailsLoadingStatus?.checkImages===loadingStateEnum?.serverError\"\n    >\n      Something went wrong. Please try again later.\n    </span>\n  \n    <span\n      i18n=\"Check images cannot be viewed at the moment@@transactions.detail.check-image.bad-request-error\"\n      class=\"bb-input-validation-message\"\n      data-role=\"check-image-bad-request-error-state\"\n      *ngIf=\"transactionDetailsLoadingStatus?.checkImages===loadingStateEnum?.badRequestError\"\n    >\n      Check images cannot be viewed at the moment, please try again later or contact your financial institution.\n    </span>\n  \n    <span\n      i18n=\"Check images cannot be viewed at the moment@@transactions.detail.check-image.not-found-error\"\n      class=\"bb-input-validation-message\"\n      data-role=\"check-image-not-found-error-state\"\n      *ngIf=\"transactionDetailsLoadingStatus?.checkImages===loadingStateEnum?.notFoundError\"\n    >\n      Check images cannot be viewed at the moment, please try again later or contact your financial institution.\n    </span>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>", components: [{ type: i1.TransactionCheckImageItemComponent, selector: "bb-transaction-check-image-item", inputs: ["image", "transaction", "sideText", "imageAlt"], outputs: ["selectImage"] }, { type: i2.TransactionCheckImageDocumentViewerComponent, selector: "bb-transaction-check-image-document-viewer", inputs: ["imageCheckNumber", "imageFront", "imageBack", "position"], outputs: ["closeViewer"] }, { type: i3.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionCheckImageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-check-image',
                    templateUrl: './transaction-check-image.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { transaction: [{
                type: Input
            }], checkImagesList: [{
                type: Input
            }], transactionDetailsLoadingStatus: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,