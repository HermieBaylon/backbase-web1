export var TransactionsExportErrorType;
(function (TransactionsExportErrorType) {
    TransactionsExportErrorType["MIXED_PRODUCT_KINDS"] = "MIXED_PRODUCT_KINDS";
    TransactionsExportErrorType["UNSUPPORTED_PRODUCT_KIND"] = "UNSUPPORTED_PRODUCT_KIND";
    TransactionsExportErrorType["TOO_MANY_ITEMS"] = "TOO_MANY_ITEMS";
    TransactionsExportErrorType["MULTIPLE_PRODUCTS"] = "MULTIPLE_PRODUCTS";
    TransactionsExportErrorType["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
})(TransactionsExportErrorType || (TransactionsExportErrorType = {}));
export function combineExportTypesConfig(exportConfig) {
    let exportTypesArr = [];
    const { availableExportTypesHeader = '', unavailableExportTypesReasonsHeader } = exportConfig;
    const availableExportTypesArray = availableExportTypesHeader.split(',');
    const availableTypes = availableExportTypesArray
        .filter((name) => name !== '')
        .map((name) => ({
        name,
        reason: undefined,
        isAvailable: true,
    }));
    if (unavailableExportTypesReasonsHeader) {
        const unavailableTypes = Object.keys(unavailableExportTypesReasonsHeader).map((name) => {
            if (unavailableExportTypesReasonsHeader && Array.isArray(unavailableExportTypesReasonsHeader[name])) {
                return {
                    name,
                    reason: unavailableExportTypesReasonsHeader[name][0],
                    isAvailable: false,
                };
            }
            return {
                name,
                reason: TransactionsExportErrorType.UNKNOWN_ERROR,
                isAvailable: false,
            };
        });
        exportTypesArr = [...availableTypes, ...unavailableTypes];
    }
    else {
        exportTypesArr = [...availableTypes];
    }
    return [...exportTypesArr].sort((left, right) => {
        if (left.name === right.name) {
            return 0;
        }
        return left.name > right.name ? 1 : -1;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb25zLWV4cG9ydC1vcHRpb25zLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy90cmFuc2FjdGlvbnMtY29tbW9uLWFuZy9zcmMvbW9kZWwvdHJhbnNhY3Rpb25zLWV4cG9ydC1vcHRpb25zLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9CQSxNQUFNLENBQU4sSUFBWSwyQkFNWDtBQU5ELFdBQVksMkJBQTJCO0lBQ3JDLDBFQUEyQyxDQUFBO0lBQzNDLG9GQUFxRCxDQUFBO0lBQ3JELGdFQUFpQyxDQUFBO0lBQ2pDLHNFQUF1QyxDQUFBO0lBQ3ZDLDhEQUErQixDQUFBO0FBQ2pDLENBQUMsRUFOVywyQkFBMkIsS0FBM0IsMkJBQTJCLFFBTXRDO0FBV0QsTUFBTSxVQUFVLHdCQUF3QixDQUFDLFlBQXNDO0lBQzdFLElBQUksY0FBYyxHQUFHLEVBQUUsQ0FBQztJQUN4QixNQUFNLEVBQUUsMEJBQTBCLEdBQUcsRUFBRSxFQUFFLG1DQUFtQyxFQUFFLEdBQUcsWUFBWSxDQUFDO0lBQzlGLE1BQU0seUJBQXlCLEdBQUcsMEJBQTBCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hFLE1BQU0sY0FBYyxHQUFHLHlCQUF5QjtTQUM3QyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUM7U0FDN0IsR0FBRyxDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3RCLElBQUk7UUFDSixNQUFNLEVBQUUsU0FBUztRQUNqQixXQUFXLEVBQUUsSUFBSTtLQUNsQixDQUFDLENBQUMsQ0FBQztJQUVOLElBQUksbUNBQW1DLEVBQUU7UUFDdkMsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLG1DQUFtQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDckYsSUFBSSxtQ0FBbUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLG1DQUFtQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7Z0JBQ25HLE9BQU87b0JBQ0wsSUFBSTtvQkFDSixNQUFNLEVBQUUsbUNBQW1DLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNwRCxXQUFXLEVBQUUsS0FBSztpQkFDbkIsQ0FBQzthQUNIO1lBRUQsT0FBTztnQkFDTCxJQUFJO2dCQUNKLE1BQU0sRUFBRSwyQkFBMkIsQ0FBQyxhQUFhO2dCQUNqRCxXQUFXLEVBQUUsS0FBSzthQUNuQixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxjQUFjLEdBQUcsQ0FBQyxHQUFHLGNBQWMsRUFBRSxHQUFHLGdCQUFnQixDQUFDLENBQUM7S0FDM0Q7U0FBTTtRQUNMLGNBQWMsR0FBRyxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUM7S0FDdEM7SUFFRCxPQUFPLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDOUMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFDNUIsT0FBTyxDQUFDLENBQUM7U0FDVjtRQUVELE9BQU8sSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zYWN0aW9uc0FjY291bnRPcHRpb25zIH0gZnJvbSAnLi90cmFuc2FjdGlvbnMtYWNjb3VudC1vcHRpb25zLm1vZGVsJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uc0ZpbHRlck9wdGlvbnMgfSBmcm9tICcuL3RyYW5zYWN0aW9ucy1maWx0ZXItb3B0aW9ucy5tb2RlbCc7XG5pbXBvcnQgeyBUcmFuc2FjdGlvbnNTZWFyY2hPcHRpb25zIH0gZnJvbSAnLi90cmFuc2FjdGlvbnMtc2VhcmNoLW9wdGlvbnMubW9kZWwnO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb25zU29ydE9wdGlvbnMgfSBmcm9tICcuL3RyYW5zYWN0aW9ucy1zb3J0LW9wdGlvbnMubW9kZWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zYWN0aW9uc0V4cG9ydE9wdGlvbnMge1xuICBhY2NvdW50OiBUcmFuc2FjdGlvbnNBY2NvdW50T3B0aW9ucztcbiAgc2VhcmNoPzogVHJhbnNhY3Rpb25zU2VhcmNoT3B0aW9ucztcbiAgZmlsdGVyPzogVHJhbnNhY3Rpb25zRmlsdGVyT3B0aW9ucztcbiAgc29ydD86IFRyYW5zYWN0aW9uc1NvcnRPcHRpb25zO1xuICBleHBvcnRUeXBlOiBzdHJpbmc7XG4gIGxvY2FsZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zYWN0aW9uc0V4cG9ydFR5cGVFbGVtZW50IHtcbiAgbmFtZTogc3RyaW5nO1xuICByZWFzb24/OiBUcmFuc2FjdGlvbnNFeHBvcnRFcnJvclR5cGU7XG4gIGlzQXZhaWxhYmxlOiBib29sZWFuO1xufVxuXG5leHBvcnQgZW51bSBUcmFuc2FjdGlvbnNFeHBvcnRFcnJvclR5cGUge1xuICBNSVhFRF9QUk9EVUNUX0tJTkRTID0gJ01JWEVEX1BST0RVQ1RfS0lORFMnLFxuICBVTlNVUFBPUlRFRF9QUk9EVUNUX0tJTkQgPSAnVU5TVVBQT1JURURfUFJPRFVDVF9LSU5EJyxcbiAgVE9PX01BTllfSVRFTVMgPSAnVE9PX01BTllfSVRFTVMnLFxuICBNVUxUSVBMRV9QUk9EVUNUUyA9ICdNVUxUSVBMRV9QUk9EVUNUUycsXG4gIFVOS05PV05fRVJST1IgPSAnVU5LTk9XTl9FUlJPUicsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVW5hdmFpbGFibGVFeHBvcnRUeXBlUmVhc29ucyB7XG4gIFtyZWFzb246IHN0cmluZ106IFRyYW5zYWN0aW9uc0V4cG9ydEVycm9yVHlwZVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zYWN0aW9uc0V4cG9ydENvbmZpZyB7XG4gIGF2YWlsYWJsZUV4cG9ydFR5cGVzSGVhZGVyPzogc3RyaW5nO1xuICB1bmF2YWlsYWJsZUV4cG9ydFR5cGVzUmVhc29uc0hlYWRlcj86IFVuYXZhaWxhYmxlRXhwb3J0VHlwZVJlYXNvbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lRXhwb3J0VHlwZXNDb25maWcoZXhwb3J0Q29uZmlnOiBUcmFuc2FjdGlvbnNFeHBvcnRDb25maWcpOiBUcmFuc2FjdGlvbnNFeHBvcnRUeXBlRWxlbWVudFtdIHtcbiAgbGV0IGV4cG9ydFR5cGVzQXJyID0gW107XG4gIGNvbnN0IHsgYXZhaWxhYmxlRXhwb3J0VHlwZXNIZWFkZXIgPSAnJywgdW5hdmFpbGFibGVFeHBvcnRUeXBlc1JlYXNvbnNIZWFkZXIgfSA9IGV4cG9ydENvbmZpZztcbiAgY29uc3QgYXZhaWxhYmxlRXhwb3J0VHlwZXNBcnJheSA9IGF2YWlsYWJsZUV4cG9ydFR5cGVzSGVhZGVyLnNwbGl0KCcsJyk7XG4gIGNvbnN0IGF2YWlsYWJsZVR5cGVzID0gYXZhaWxhYmxlRXhwb3J0VHlwZXNBcnJheVxuICAgIC5maWx0ZXIoKG5hbWUpID0+IG5hbWUgIT09ICcnKVxuICAgIC5tYXAoKG5hbWU6IHN0cmluZykgPT4gKHtcbiAgICAgIG5hbWUsXG4gICAgICByZWFzb246IHVuZGVmaW5lZCxcbiAgICAgIGlzQXZhaWxhYmxlOiB0cnVlLFxuICAgIH0pKTtcblxuICBpZiAodW5hdmFpbGFibGVFeHBvcnRUeXBlc1JlYXNvbnNIZWFkZXIpIHtcbiAgICBjb25zdCB1bmF2YWlsYWJsZVR5cGVzID0gT2JqZWN0LmtleXModW5hdmFpbGFibGVFeHBvcnRUeXBlc1JlYXNvbnNIZWFkZXIpLm1hcCgobmFtZSkgPT4ge1xuICAgICAgaWYgKHVuYXZhaWxhYmxlRXhwb3J0VHlwZXNSZWFzb25zSGVhZGVyICYmIEFycmF5LmlzQXJyYXkodW5hdmFpbGFibGVFeHBvcnRUeXBlc1JlYXNvbnNIZWFkZXJbbmFtZV0pKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICByZWFzb246IHVuYXZhaWxhYmxlRXhwb3J0VHlwZXNSZWFzb25zSGVhZGVyW25hbWVdWzBdLFxuICAgICAgICAgIGlzQXZhaWxhYmxlOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgcmVhc29uOiBUcmFuc2FjdGlvbnNFeHBvcnRFcnJvclR5cGUuVU5LTk9XTl9FUlJPUixcbiAgICAgICAgaXNBdmFpbGFibGU6IGZhbHNlLFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGV4cG9ydFR5cGVzQXJyID0gWy4uLmF2YWlsYWJsZVR5cGVzLCAuLi51bmF2YWlsYWJsZVR5cGVzXTtcbiAgfSBlbHNlIHtcbiAgICBleHBvcnRUeXBlc0FyciA9IFsuLi5hdmFpbGFibGVUeXBlc107XG4gIH1cblxuICByZXR1cm4gWy4uLmV4cG9ydFR5cGVzQXJyXS5zb3J0KChsZWZ0LCByaWdodCkgPT4ge1xuICAgIGlmIChsZWZ0Lm5hbWUgPT09IHJpZ2h0Lm5hbWUpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiBsZWZ0Lm5hbWUgPiByaWdodC5uYW1lID8gMSA6IC0xO1xuICB9KTtcbn1cbiJdfQ==