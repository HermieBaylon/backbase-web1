import { Input, Output, EventEmitter, Directive } from '@angular/core';
import * as i0 from "@angular/core";
// eslint-disable-next-line
export class BaseTransactionsControls {
    constructor() {
        /**
         * Whether a filter is applied on the transactions.
         */
        this.isFilterApplied = false;
        /**
         * Configurations for exporting transactions.
         */
        // eslint-disable-next-line
        this.exportConfig = [
            {
                name: 'CSV',
                isAvailable: true,
            },
            {
                name: 'OFX',
                isAvailable: true,
            },
        ];
        /**
         * Configuration parameter to show/hide filters
         */
        this.availableFilters = [];
        /**
         * EventEmitter for triggering a filter action.
         */
        this.filter = new EventEmitter();
        /**
         * EventEmitter for triggering a search action.
         */
        this.search = new EventEmitter();
        /**
         * EventEmitter for triggering an export action.
         */
        this.export = new EventEmitter();
        /**
         * Whether the filter form is shown.
         */
        this.isFilterOpen = false;
    }
    /**
     * Search event callback
     */
    onSearch(searchParam) {
        this.search.emit(searchParam);
    }
    /**
     * Filter event callback
     */
    onFilter(filterParams) {
        this.filter.emit(filterParams);
    }
    /**
     * Export event callback
     */
    onExport(type) {
        this.export.emit(type);
    }
    /**
     * Close event callback to hide the filters controls
     */
    onClose() {
        this.isFilterOpen = false;
    }
    /**
     * Toogle method to hide or show the filter form
     */
    toggleFilter() {
        this.isFilterOpen = !this.isFilterOpen;
    }
    ngOnInit() {
        if (typeof this.exportConfig === 'undefined') {
            throw new Error(`"exportConfig" input is required in "${this.constructor.name}"`);
        }
    }
}
BaseTransactionsControls.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BaseTransactionsControls, deps: [], target: i0.ɵɵFactoryTarget.Directive });
BaseTransactionsControls.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BaseTransactionsControls, inputs: { isFilterApplied: "isFilterApplied", exportConfig: "exportConfig", availableFilters: "availableFilters" }, outputs: { filter: "filter", search: "search", export: "export" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BaseTransactionsControls, decorators: [{
            type: Directive
        }], propDecorators: { isFilterApplied: [{
                type: Input
            }], exportConfig: [{
                type: Input
            }], availableFilters: [{
                type: Input
            }], filter: [{
                type: Output
            }], search: [{
                type: Output
            }], export: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS10cmFuc2FjdGlvbnMtY29udHJvbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3RyYW5zYWN0aW9ucy1jb21tb24tYW5nL3NyYy9jb21wb25lbnRzL2Jhc2UtdHJhbnNhY3Rpb25zLWNvbnRyb2xzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBVSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSy9FLDJCQUEyQjtBQUMzQixNQUFNLE9BQU8sd0JBQXdCO0lBRnJDO1FBR0U7O1dBRUc7UUFDTSxvQkFBZSxHQUFHLEtBQUssQ0FBQztRQUNqQzs7V0FFRztRQUNILDJCQUEyQjtRQUUzQixpQkFBWSxHQUFHO1lBQ2I7Z0JBQ0UsSUFBSSxFQUFFLEtBQUs7Z0JBQ1gsV0FBVyxFQUFFLElBQUk7YUFDbEI7WUFDRDtnQkFDRSxJQUFJLEVBQUUsS0FBSztnQkFDWCxXQUFXLEVBQUUsSUFBSTthQUNsQjtTQUNGLENBQUM7UUFDRjs7V0FFRztRQUNNLHFCQUFnQixHQUFxQixFQUFFLENBQUM7UUFFakQ7O1dBRUc7UUFDZ0IsV0FBTSxHQUFHLElBQUksWUFBWSxFQUE2QixDQUFDO1FBQzFFOztXQUVHO1FBQ2dCLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBQ3ZEOztXQUVHO1FBQ2dCLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBaUMsQ0FBQztRQUM5RTs7V0FFRztRQUNILGlCQUFZLEdBQUcsS0FBSyxDQUFDO0tBc0N0QjtJQXBDQzs7T0FFRztJQUNILFFBQVEsQ0FBQyxXQUFtQjtRQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLENBQUMsWUFBdUM7UUFDOUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUNEOztPQUVHO0lBQ0gsUUFBUSxDQUFDLElBQW1DO1FBQzFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFDRDs7T0FFRztJQUNILE9BQU87UUFDTCxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUM1QixDQUFDO0lBQ0Q7O09BRUc7SUFDSCxZQUFZO1FBQ1YsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDekMsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLE9BQU8sSUFBSSxDQUFDLFlBQVksS0FBSyxXQUFXLEVBQUU7WUFDNUMsTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1NBQ25GO0lBQ0gsQ0FBQzs7c0hBN0VVLHdCQUF3QjswR0FBeEIsd0JBQXdCOzRGQUF4Qix3QkFBd0I7a0JBRnBDLFNBQVM7OEJBTUMsZUFBZTtzQkFBdkIsS0FBSztnQkFNTixZQUFZO3NCQURYLEtBQUs7Z0JBY0csZ0JBQWdCO3NCQUF4QixLQUFLO2dCQUthLE1BQU07c0JBQXhCLE1BQU07Z0JBSVksTUFBTTtzQkFBeEIsTUFBTTtnQkFJWSxNQUFNO3NCQUF4QixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJhbnNhY3Rpb25zRXhwb3J0VHlwZUVsZW1lbnQgfSBmcm9tICcuLi9tb2RlbC90cmFuc2FjdGlvbnMtZXhwb3J0LW9wdGlvbnMubW9kZWwnO1xuaW1wb3J0IHsgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBPbkluaXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb25zRmlsdGVyT3B0aW9ucyB9IGZyb20gJy4uL21vZGVsL3RyYW5zYWN0aW9ucy1maWx0ZXItb3B0aW9ucy5tb2RlbCc7XG5pbXBvcnQgeyBBdmFpbGFibGVGaWx0ZXJzIH0gZnJvbSAnLi4vbW9kZWwvYXZhaWxhYmxlLWZpbHRlcnMubW9kZWwnO1xuXG5ARGlyZWN0aXZlKClcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZXhwb3J0IGNsYXNzIEJhc2VUcmFuc2FjdGlvbnNDb250cm9scyBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIC8qKlxuICAgKiBXaGV0aGVyIGEgZmlsdGVyIGlzIGFwcGxpZWQgb24gdGhlIHRyYW5zYWN0aW9ucy5cbiAgICovXG4gIEBJbnB1dCgpIGlzRmlsdGVyQXBwbGllZCA9IGZhbHNlO1xuICAvKipcbiAgICogQ29uZmlndXJhdGlvbnMgZm9yIGV4cG9ydGluZyB0cmFuc2FjdGlvbnMuXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgQElucHV0KClcbiAgZXhwb3J0Q29uZmlnID0gW1xuICAgIHtcbiAgICAgIG5hbWU6ICdDU1YnLFxuICAgICAgaXNBdmFpbGFibGU6IHRydWUsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnT0ZYJyxcbiAgICAgIGlzQXZhaWxhYmxlOiB0cnVlLFxuICAgIH0sXG4gIF07XG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIHBhcmFtZXRlciB0byBzaG93L2hpZGUgZmlsdGVyc1xuICAgKi9cbiAgQElucHV0KCkgYXZhaWxhYmxlRmlsdGVyczogQXZhaWxhYmxlRmlsdGVycyA9IFtdO1xuXG4gIC8qKlxuICAgKiBFdmVudEVtaXR0ZXIgZm9yIHRyaWdnZXJpbmcgYSBmaWx0ZXIgYWN0aW9uLlxuICAgKi9cbiAgQE91dHB1dCgpIHJlYWRvbmx5IGZpbHRlciA9IG5ldyBFdmVudEVtaXR0ZXI8VHJhbnNhY3Rpb25zRmlsdGVyT3B0aW9ucz4oKTtcbiAgLyoqXG4gICAqIEV2ZW50RW1pdHRlciBmb3IgdHJpZ2dlcmluZyBhIHNlYXJjaCBhY3Rpb24uXG4gICAqL1xuICBAT3V0cHV0KCkgcmVhZG9ubHkgc2VhcmNoID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG4gIC8qKlxuICAgKiBFdmVudEVtaXR0ZXIgZm9yIHRyaWdnZXJpbmcgYW4gZXhwb3J0IGFjdGlvbi5cbiAgICovXG4gIEBPdXRwdXQoKSByZWFkb25seSBleHBvcnQgPSBuZXcgRXZlbnRFbWl0dGVyPFRyYW5zYWN0aW9uc0V4cG9ydFR5cGVFbGVtZW50PigpO1xuICAvKipcbiAgICogV2hldGhlciB0aGUgZmlsdGVyIGZvcm0gaXMgc2hvd24uXG4gICAqL1xuICBpc0ZpbHRlck9wZW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogU2VhcmNoIGV2ZW50IGNhbGxiYWNrXG4gICAqL1xuICBvblNlYXJjaChzZWFyY2hQYXJhbTogc3RyaW5nKSB7XG4gICAgdGhpcy5zZWFyY2guZW1pdChzZWFyY2hQYXJhbSk7XG4gIH1cbiAgLyoqXG4gICAqIEZpbHRlciBldmVudCBjYWxsYmFja1xuICAgKi9cbiAgb25GaWx0ZXIoZmlsdGVyUGFyYW1zOiBUcmFuc2FjdGlvbnNGaWx0ZXJPcHRpb25zKSB7XG4gICAgdGhpcy5maWx0ZXIuZW1pdChmaWx0ZXJQYXJhbXMpO1xuICB9XG4gIC8qKlxuICAgKiBFeHBvcnQgZXZlbnQgY2FsbGJhY2tcbiAgICovXG4gIG9uRXhwb3J0KHR5cGU6IFRyYW5zYWN0aW9uc0V4cG9ydFR5cGVFbGVtZW50KSB7XG4gICAgdGhpcy5leHBvcnQuZW1pdCh0eXBlKTtcbiAgfVxuICAvKipcbiAgICogQ2xvc2UgZXZlbnQgY2FsbGJhY2sgdG8gaGlkZSB0aGUgZmlsdGVycyBjb250cm9sc1xuICAgKi9cbiAgb25DbG9zZSgpIHtcbiAgICB0aGlzLmlzRmlsdGVyT3BlbiA9IGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBUb29nbGUgbWV0aG9kIHRvIGhpZGUgb3Igc2hvdyB0aGUgZmlsdGVyIGZvcm1cbiAgICovXG4gIHRvZ2dsZUZpbHRlcigpIHtcbiAgICB0aGlzLmlzRmlsdGVyT3BlbiA9ICF0aGlzLmlzRmlsdGVyT3BlbjtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5leHBvcnRDb25maWcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiZXhwb3J0Q29uZmlnXCIgaW5wdXQgaXMgcmVxdWlyZWQgaW4gXCIke3RoaXMuY29uc3RydWN0b3IubmFtZX1cImApO1xuICAgIH1cbiAgfVxufVxuIl19