import { from, of, Subject } from 'rxjs';
import { TransactionsDetailsLoadingState } from '../model/transactions-details.model';
import '@angular/localize/init';
import { Injectable } from '@angular/core';
import { b64Encode } from '../constants';
import { catchError, map, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../services/messages.service";
/* eslint-disable  @typescript-eslint/no-non-null-assertion */
export class TransactionsInquireAndDisputeUIService {
    constructor(messagesService) {
        this.messagesService = messagesService;
        this.showReportSubject = new Subject();
        this.DEFAULT_MESSAGE = {
            attachments: [],
            body: '',
            topic: 'inquire',
        };
        this.showReport = this.showReportSubject.asObservable();
        this.message = Object.assign({}, this.DEFAULT_MESSAGE);
        this.reportState = TransactionsDetailsLoadingState.notStarted;
        this.subjectReportMap = {
            dispute: $localize `:Dispute subject@@transactions.dispute.subject:Transaction dispute raised on`,
            inquire: $localize `:Inquiry subject@@transactions.inquire.subject:Transaction inquiry raised on`,
        };
    }
    formatMessage(messageForm, defaultBody, inquireAndDisputeTopics, transaction) {
        const { topic = 'inquire', body = '', attachments = [] } = messageForm;
        return {
            body: b64Encode([defaultBody, body].join('\n')),
            topic: inquireAndDisputeTopics[topic],
            attachments: attachments.map((data) => data.id || ''),
            subject: `${this.subjectReportMap[topic]} ${transaction === null || transaction === void 0 ? void 0 : transaction.arrangementId}`,
        };
    }
    // TODO: Add unit tests when the functionality is complete
    saveReport(message) {
        this.reportState = TransactionsDetailsLoadingState.loading;
        return this.messagesService.saveMessages(message).pipe(map(() => {
            this.message = this.DEFAULT_MESSAGE;
            this.showReportForm(false);
            this.reportState = TransactionsDetailsLoadingState.done;
            return message;
        }), catchError(() => {
            this.reportState = TransactionsDetailsLoadingState.error;
            return of(undefined);
        }));
    }
    showReportForm(display) {
        this.showReportSubject.next(display);
    }
    cancelReport() {
        this.removeAllFiles();
        this.reportState = TransactionsDetailsLoadingState.notStarted;
        this.message = this.DEFAULT_MESSAGE;
        this.showReportForm(false);
    }
    fileChange(file) {
        let attachment = {
            name: file.name,
            size: file.size,
            content: from(file.arrayBuffer()),
        };
        const currentAttachments = this.message.attachments || [];
        this.message.attachments = [...currentAttachments, attachment];
        const state = this.reportState;
        this.reportState = TransactionsDetailsLoadingState.loading;
        return this.messagesService.saveAttachment(file).pipe(map((id) => {
            attachment = Object.assign({ id }, attachment);
            this.reportState = TransactionsDetailsLoadingState.notStarted;
            this.message.attachments = [...currentAttachments, attachment];
            return id;
        }), catchError(() => {
            this.reportState = state;
            this.message.attachments = [...currentAttachments];
            return of('');
            //TODO: add error message
        }));
    }
    deleteReportForm() {
        //TODO: this is just a placeholder for now
    }
    fileRemoved(attachment) {
        const { id = '' } = attachment;
        return this.messagesService.deleteAttachments([id]).pipe(tap(() => {
            this.message.attachments = this.message.attachments.filter((item) => item.id !== id);
        }));
    }
    removeAllFiles() {
        if (this.message.attachments.length > 0) {
            const files = this.message.attachments.map((item) => item.id || '');
            this.messagesService.deleteAttachments(files).subscribe({
                next: () => {
                    this.message.attachments = [];
                },
            });
        }
    }
}
TransactionsInquireAndDisputeUIService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsInquireAndDisputeUIService, deps: [{ token: i1.MessagesService }], target: i0.ɵɵFactoryTarget.Injectable });
TransactionsInquireAndDisputeUIService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsInquireAndDisputeUIService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsInquireAndDisputeUIService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.MessagesService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb25zLWlucXVpcmUtYW5kLWRpc3B1dGUtdWkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdHJhbnNhY3Rpb25zLWNvbW1vbi1hbmcvc3JjL3NlcnZpY2VzL3RyYW5zYWN0aW9ucy1pbnF1aXJlLWFuZC1kaXNwdXRlLXVpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBUXpDLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRXRGLE9BQU8sd0JBQXdCLENBQUM7QUFFaEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFFdEQsOERBQThEO0FBRzlELE1BQU0sT0FBTyxzQ0FBc0M7SUEySGpELFlBQTZCLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQTFIckQsc0JBQWlCLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztRQUNsQyxvQkFBZSxHQUFnQjtZQUM5QyxXQUFXLEVBQUUsRUFBRTtZQUNmLElBQUksRUFBRSxFQUFFO1lBQ1IsS0FBSyxFQUFFLFNBQVM7U0FDakIsQ0FBQztRQUVGLGVBQVUsR0FBd0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3hFLFlBQU8scUJBQXFCLElBQUksQ0FBQyxlQUFlLEVBQUc7UUFDbkQsZ0JBQVcsR0FBRywrQkFBK0IsQ0FBQyxVQUFVLENBQUM7UUFFakQscUJBQWdCLEdBQXFCO1lBQzNDLE9BQU8sRUFBRSxTQUFTLENBQUEsOEVBQThFO1lB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QyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFDckUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUM7Z0JBQ3RELElBQUksRUFBRSxHQUFHLEVBQUU7b0JBQ1QsSUFBSSxDQUFDLE9BQVEsQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO2dCQUNqQyxDQUFDO2FBQ0YsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOztvSUF6SFUsc0NBQXNDO3dJQUF0QyxzQ0FBc0M7NEZBQXRDLHNDQUFzQztrQkFEbEQsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZyb20sIG9mLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBJbnF1aXJlQW5kRGlzcHV0ZUZpbGUsXG4gIElucXVpcmVBbmREaXNwdXRlVG9waWNzLFxuICBNZXNzYWdlLFxuICBNZXNzYWdlRm9ybSxcbiAgU3ViamVjdFJlcG9ydE1hcCxcbn0gZnJvbSAnLi4vbW9kZWwvbWVzc2FnZXMubW9kZWwnO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb25zRGV0YWlsc0xvYWRpbmdTdGF0ZSB9IGZyb20gJy4uL21vZGVsL3RyYW5zYWN0aW9ucy1kZXRhaWxzLm1vZGVsJztcbmltcG9ydCB7IE1lc3NhZ2VzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL21lc3NhZ2VzLnNlcnZpY2UnO1xuaW1wb3J0ICdAYW5ndWxhci9sb2NhbGl6ZS9pbml0JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGI2NEVuY29kZSB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uIH0gZnJvbSAnLi4vbW9kZWwvdHJhbnNhY3Rpb24ubW9kZWwnO1xuLyogZXNsaW50LWRpc2FibGUgIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb24gKi9cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRyYW5zYWN0aW9uc0lucXVpcmVBbmREaXNwdXRlVUlTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzaG93UmVwb3J0U3ViamVjdCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgREVGQVVMVF9NRVNTQUdFOiBNZXNzYWdlRm9ybSA9IHtcbiAgICBhdHRhY2htZW50czogW10sXG4gICAgYm9keTogJycsXG4gICAgdG9waWM6ICdpbnF1aXJlJyxcbiAgfTtcblxuICBzaG93UmVwb3J0OiBPYnNlcnZhYmxlPGJvb2xlYW4+ID0gdGhpcy5zaG93UmVwb3J0U3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgbWVzc2FnZTogTWVzc2FnZUZvcm0gPSB7IC4uLnRoaXMuREVGQVVMVF9NRVNTQUdFIH07XG4gIHJlcG9ydFN0YXRlID0gVHJhbnNhY3Rpb25zRGV0YWlsc0xvYWRpbmdTdGF0ZS5ub3RTdGFydGVkO1xuXG4gIHByaXZhdGUgc3ViamVjdFJlcG9ydE1hcDogU3ViamVjdFJlcG9ydE1hcCA9IHtcbiAgICBkaXNwdXRlOiAkbG9jYWxpemVgOkRpc3B1dGUgc3ViamVjdEBAdHJhbnNhY3Rpb25zLmRpc3B1dGUuc3ViamVjdDpUcmFuc2FjdGlvbiBkaXNwdXRlIHJhaXNlZCBvbmAsXG4gICAgaW5xdWlyZTogJGxvY2FsaXplYDpJbnF1aXJ5IHN1YmplY3RAQHRyYW5zYWN0aW9ucy5pbnF1aXJlLnN1YmplY3Q6VHJhbnNhY3Rpb24gaW5xdWlyeSByYWlzZWQgb25gLFxuICB9O1xuXG4gIGZvcm1hdE1lc3NhZ2UoXG4gICAgbWVzc2FnZUZvcm06IE1lc3NhZ2VGb3JtLFxuICAgIGRlZmF1bHRCb2R5OiBzdHJpbmcsXG4gICAgaW5xdWlyZUFuZERpc3B1dGVUb3BpY3M6IElucXVpcmVBbmREaXNwdXRlVG9waWNzLFxuICAgIHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbiB8IHVuZGVmaW5lZCxcbiAgKTogTWVzc2FnZSB7XG4gICAgY29uc3QgeyB0b3BpYyA9ICdpbnF1aXJlJywgYm9keSA9ICcnLCBhdHRhY2htZW50cyA9IFtdIH0gPSBtZXNzYWdlRm9ybTtcblxuICAgIHJldHVybiB7XG4gICAgICBib2R5OiBiNjRFbmNvZGUoW2RlZmF1bHRCb2R5LCBib2R5XS5qb2luKCdcXG4nKSksXG4gICAgICB0b3BpYzogaW5xdWlyZUFuZERpc3B1dGVUb3BpY3NbdG9waWNdLFxuICAgICAgYXR0YWNobWVudHM6IGF0dGFjaG1lbnRzLm1hcCgoZGF0YSkgPT4gZGF0YS5pZCB8fCAnJyksXG4gICAgICBzdWJqZWN0OiBgJHt0aGlzLnN1YmplY3RSZXBvcnRNYXBbdG9waWNdfSAke3RyYW5zYWN0aW9uPy5hcnJhbmdlbWVudElkfWAsXG4gICAgfTtcbiAgfVxuXG4gIC8vIFRPRE86IEFkZCB1bml0IHRlc3RzIHdoZW4gdGhlIGZ1bmN0aW9uYWxpdHkgaXMgY29tcGxldGVcbiAgc2F2ZVJlcG9ydChtZXNzYWdlOiBNZXNzYWdlKTogT2JzZXJ2YWJsZTxNZXNzYWdlIHwgdW5kZWZpbmVkPiB7XG4gICAgdGhpcy5yZXBvcnRTdGF0ZSA9IFRyYW5zYWN0aW9uc0RldGFpbHNMb2FkaW5nU3RhdGUubG9hZGluZztcblxuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzU2VydmljZS5zYXZlTWVzc2FnZXMobWVzc2FnZSkucGlwZShcbiAgICAgIG1hcCgoKSA9PiB7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IHRoaXMuREVGQVVMVF9NRVNTQUdFO1xuICAgICAgICB0aGlzLnNob3dSZXBvcnRGb3JtKGZhbHNlKTtcbiAgICAgICAgdGhpcy5yZXBvcnRTdGF0ZSA9IFRyYW5zYWN0aW9uc0RldGFpbHNMb2FkaW5nU3RhdGUuZG9uZTtcblxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgIH0pLFxuICAgICAgY2F0Y2hFcnJvcigoKSA9PiB7XG4gICAgICAgIHRoaXMucmVwb3J0U3RhdGUgPSBUcmFuc2FjdGlvbnNEZXRhaWxzTG9hZGluZ1N0YXRlLmVycm9yO1xuXG4gICAgICAgIHJldHVybiBvZih1bmRlZmluZWQpO1xuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIHNob3dSZXBvcnRGb3JtKGRpc3BsYXk6IGJvb2xlYW4pIHtcbiAgICB0aGlzLnNob3dSZXBvcnRTdWJqZWN0Lm5leHQoZGlzcGxheSk7XG4gIH1cblxuICBjYW5jZWxSZXBvcnQoKSB7XG4gICAgdGhpcy5yZW1vdmVBbGxGaWxlcygpO1xuICAgIHRoaXMucmVwb3J0U3RhdGUgPSBUcmFuc2FjdGlvbnNEZXRhaWxzTG9hZGluZ1N0YXRlLm5vdFN0YXJ0ZWQ7XG4gICAgdGhpcy5tZXNzYWdlID0gdGhpcy5ERUZBVUxUX01FU1NBR0U7XG4gICAgdGhpcy5zaG93UmVwb3J0Rm9ybShmYWxzZSk7XG4gIH1cblxuICBmaWxlQ2hhbmdlKGZpbGU6IEZpbGUpIHtcbiAgICBsZXQgYXR0YWNobWVudDogSW5xdWlyZUFuZERpc3B1dGVGaWxlID0ge1xuICAgICAgbmFtZTogZmlsZS5uYW1lLFxuICAgICAgc2l6ZTogZmlsZS5zaXplLFxuICAgICAgY29udGVudDogZnJvbShmaWxlLmFycmF5QnVmZmVyKCkpLFxuICAgIH07XG5cbiAgICBjb25zdCBjdXJyZW50QXR0YWNobWVudHMgPSB0aGlzLm1lc3NhZ2UhLmF0dGFjaG1lbnRzIHx8IFtdO1xuXG4gICAgdGhpcy5tZXNzYWdlIS5hdHRhY2htZW50cyA9IFsuLi5jdXJyZW50QXR0YWNobWVudHMsIGF0dGFjaG1lbnRdO1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5yZXBvcnRTdGF0ZTtcbiAgICB0aGlzLnJlcG9ydFN0YXRlID0gVHJhbnNhY3Rpb25zRGV0YWlsc0xvYWRpbmdTdGF0ZS5sb2FkaW5nO1xuXG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZXNTZXJ2aWNlLnNhdmVBdHRhY2htZW50KGZpbGUpLnBpcGUoXG4gICAgICBtYXAoKGlkKSA9PiB7XG4gICAgICAgIGF0dGFjaG1lbnQgPSB7XG4gICAgICAgICAgaWQsXG4gICAgICAgICAgLi4uYXR0YWNobWVudCxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yZXBvcnRTdGF0ZSA9IFRyYW5zYWN0aW9uc0RldGFpbHNMb2FkaW5nU3RhdGUubm90U3RhcnRlZDtcbiAgICAgICAgdGhpcy5tZXNzYWdlIS5hdHRhY2htZW50cyA9IFsuLi5jdXJyZW50QXR0YWNobWVudHMsIGF0dGFjaG1lbnRdO1xuXG4gICAgICAgIHJldHVybiBpZDtcbiAgICAgIH0pLFxuICAgICAgY2F0Y2hFcnJvcigoKSA9PiB7XG4gICAgICAgIHRoaXMucmVwb3J0U3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgdGhpcy5tZXNzYWdlIS5hdHRhY2htZW50cyA9IFsuLi5jdXJyZW50QXR0YWNobWVudHNdO1xuXG4gICAgICAgIHJldHVybiBvZignJyk7XG4gICAgICAgIC8vVE9ETzogYWRkIGVycm9yIG1lc3NhZ2VcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBkZWxldGVSZXBvcnRGb3JtKCkge1xuICAgIC8vVE9ETzogdGhpcyBpcyBqdXN0IGEgcGxhY2Vob2xkZXIgZm9yIG5vd1xuICB9XG5cbiAgZmlsZVJlbW92ZWQoYXR0YWNobWVudDogSW5xdWlyZUFuZERpc3B1dGVGaWxlKSB7XG4gICAgY29uc3QgeyBpZCA9ICcnIH0gPSBhdHRhY2htZW50O1xuXG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZXNTZXJ2aWNlLmRlbGV0ZUF0dGFjaG1lbnRzKFtpZF0pLnBpcGUoXG4gICAgICB0YXAoKCkgPT4ge1xuICAgICAgICB0aGlzLm1lc3NhZ2UhLmF0dGFjaG1lbnRzID0gdGhpcy5tZXNzYWdlIS5hdHRhY2htZW50cy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uaWQgIT09IGlkKTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICByZW1vdmVBbGxGaWxlcygpIHtcbiAgICBpZiAodGhpcy5tZXNzYWdlIS5hdHRhY2htZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBmaWxlcyA9IHRoaXMubWVzc2FnZSEuYXR0YWNobWVudHMubWFwKChpdGVtKSA9PiBpdGVtLmlkIHx8ICcnKTtcbiAgICAgIHRoaXMubWVzc2FnZXNTZXJ2aWNlLmRlbGV0ZUF0dGFjaG1lbnRzKGZpbGVzKS5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5tZXNzYWdlIS5hdHRhY2htZW50cyA9IFtdO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBtZXNzYWdlc1NlcnZpY2U6IE1lc3NhZ2VzU2VydmljZSkge31cbn1cbi8qIGVzbGludC1lbmFibGUgIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb24gKi9cbiJdfQ==