import { Component, Input, ViewChild, ChangeDetectionStrategy, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../services/transactions-icon-categories-factory.service";
import * as i2 from "@angular/common";
export class TransactionCategoryIconComponent {
    constructor(transactionsIconCategoriesFactory, cd) {
        this.transactionsIconCategoriesFactory = transactionsIconCategoriesFactory;
        this.cd = cd;
        /**
         * Whether to show the icon in a circle.
         */
        this.circle = false;
        /* eslint-enable */
        /**
         * Determines if the image is done loading.
         */
        this.hasImageLoaded = false;
    }
    ngOnInit() {
        if (this.transaction === undefined) {
            throw new Error(`"transaction" input is required in "${this.constructor.name}"`);
        }
        this.transactionIcon = this.transactionsIconCategoriesFactory.create(this.transaction);
    }
    ngAfterViewInit() {
        if (this.categoryImage) {
            this.categoryImage.nativeElement.onload = () => {
                this.hasImageLoaded = true;
                this.cd.markForCheck();
            };
        }
    }
}
TransactionCategoryIconComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionCategoryIconComponent, deps: [{ token: i1.TransactionsIconCategoriesFactoryService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
TransactionCategoryIconComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionCategoryIconComponent, selector: "bb-transaction-category-icon", inputs: { transaction: "transaction", circle: "circle", size: "size" }, viewQueries: [{ propertyName: "categoryImage", first: true, predicate: ["categoryImage"], descendants: true }], ngImport: i0, template: "<div\n  aria-hidden=\"true\"\n  class=\"bb-transaction-category bb-transaction-category--enriched\"\n  title=\"{{ transaction?.merchant ? transaction?.merchant?.name : transactionIcon?.title }}\"\n  [ngClass]=\"[\n    circle ? 'bb-transaction-category-icon-circle' : 'bb-transaction-category-icon',\n    size ? 'bb-transaction-category--' + size : '',\n    !transaction?.merchant?.logo || !hasImageLoaded ? transactionIcon?.formatClassName() : ''\n  ]\"\n>\n  <img\n    class=\"bb-transaction-category__image\"\n    *ngIf=\"transaction?.merchant?.logo\" \n    [hidden]=\"!hasImageLoaded\" \n    [src]=\"transaction?.merchant?.logo\" \n    #categoryImage \n  />\n</div>\n", directives: [{ type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionCategoryIconComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-category-icon',
                    templateUrl: './transaction-category-icon.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.TransactionsIconCategoriesFactoryService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { transaction: [{
                type: Input
            }], circle: [{
                type: Input
            }], size: [{
                type: Input
            }], categoryImage: [{
                type: ViewChild,
                args: ['categoryImage']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24tY2F0ZWdvcnktaWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3RyYW5zYWN0aW9ucy1jb21tb24tYW5nL3NyYy9jb21wb25lbnRzL3RyYW5zYWN0aW9ucy1jb250cm9scy90cmFuc2FjdGlvbi1jYXRlZ29yeS1pY29uLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdHJhbnNhY3Rpb25zLWNvbW1vbi1hbmcvc3JjL2NvbXBvbmVudHMvdHJhbnNhY3Rpb25zLWNvbnRyb2xzL3RyYW5zYWN0aW9uLWNhdGVnb3J5LWljb24uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxLQUFLLEVBRUwsU0FBUyxFQUdULHVCQUF1QixHQUN4QixNQUFNLGVBQWUsQ0FBQzs7OztBQVV2QixNQUFNLE9BQU8sZ0NBQWdDO0lBNkMzQyxZQUNVLGlDQUEyRSxFQUNsRSxFQUFxQjtRQUQ5QixzQ0FBaUMsR0FBakMsaUNBQWlDLENBQTBDO1FBQ2xFLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBMUN4Qzs7V0FFRztRQUNNLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFPeEIsbUJBQW1CO1FBRW5COztXQUVHO1FBQ0gsbUJBQWMsR0FBRyxLQUFLLENBQUM7SUE0QnBCLENBQUM7SUFwQkosUUFBUTtRQUNOLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1NBQ2xGO1FBRUQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsaUNBQWlDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN6RixDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN0QixJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO2dCQUM3QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztnQkFDM0IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN6QixDQUFDLENBQUM7U0FDSDtJQUNILENBQUM7OzhIQTNDVSxnQ0FBZ0M7a0hBQWhDLGdDQUFnQyw0UENuQjdDLGdxQkFrQkE7NEZEQ2EsZ0NBQWdDO2tCQUw1QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSw4QkFBOEI7b0JBQ3hDLFdBQVcsRUFBRSw0Q0FBNEM7b0JBQ3pELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNoRDsrSkFLVSxXQUFXO3NCQUFuQixLQUFLO2dCQUlHLE1BQU07c0JBQWQsS0FBSztnQkFJRyxJQUFJO3NCQUFaLEtBQUs7Z0JBRXNCLGFBQWE7c0JBQXhDLFNBQVM7dUJBQUMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgT25Jbml0LFxuICBJbnB1dCxcbiAgRWxlbWVudFJlZixcbiAgVmlld0NoaWxkLFxuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb24gfSBmcm9tICcuLi8uLi9tb2RlbC90cmFuc2FjdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBCYXNlVHJhbnNhY3Rpb25JY29uIH0gZnJvbSAnLi4vLi4vbW9kZWwvdHJhbnNhY3Rpb24tY2F0ZWdvcnkubW9kZWwnO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb25zSWNvbkNhdGVnb3JpZXNGYWN0b3J5U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3RyYW5zYWN0aW9ucy1pY29uLWNhdGVnb3JpZXMtZmFjdG9yeS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItdHJhbnNhY3Rpb24tY2F0ZWdvcnktaWNvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi90cmFuc2FjdGlvbi1jYXRlZ29yeS1pY29uLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFRyYW5zYWN0aW9uQ2F0ZWdvcnlJY29uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcbiAgLyoqXG4gICAqIFRoZSB0cmFuc2FjdGlvbiB0aGlzIGNvbXBvbmVudCBzaG93cyB0aGUgY2F0ZWdvcnkgaWNvbiBvZi5cbiAgICovXG4gIEBJbnB1dCgpIHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbiB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc2hvdyB0aGUgaWNvbiBpbiBhIGNpcmNsZS5cbiAgICovXG4gIEBJbnB1dCgpIGNpcmNsZSA9IGZhbHNlO1xuICAvKipcbiAgICogV2hldGhlciB0byBzaG93IGRpZmZlcmVudCBzaXplcyBvZiBpY29ucy5cbiAgICovXG4gIEBJbnB1dCgpIHNpemU6ICdzbWFsbCcgfCAnbGFyZ2UnIHwgdW5kZWZpbmVkO1xuICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICBAVmlld0NoaWxkKCdjYXRlZ29yeUltYWdlJykgY2F0ZWdvcnlJbWFnZTogRWxlbWVudFJlZiB8IHVuZGVmaW5lZDtcbiAgLyogZXNsaW50LWVuYWJsZSAqL1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBpbWFnZSBpcyBkb25lIGxvYWRpbmcuXG4gICAqL1xuICBoYXNJbWFnZUxvYWRlZCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBDb250YWlucyB0aGUgdHJhbnNhY3Rpb24gY2xhc3MgbmFtZSB0aGF0IGhhcyB0byBiZSB1c2VkIHRvZ2V0aGVyXG4gICAqIHdpdGggdGhlIHRpdGxlIG9mIHRoZSBpY29uXG4gICAqL1xuICB0cmFuc2FjdGlvbkljb246IEJhc2VUcmFuc2FjdGlvbkljb24gfCB1bmRlZmluZWQ7XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMudHJhbnNhY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBcInRyYW5zYWN0aW9uXCIgaW5wdXQgaXMgcmVxdWlyZWQgaW4gXCIke3RoaXMuY29uc3RydWN0b3IubmFtZX1cImApO1xuICAgIH1cblxuICAgIHRoaXMudHJhbnNhY3Rpb25JY29uID0gdGhpcy50cmFuc2FjdGlvbnNJY29uQ2F0ZWdvcmllc0ZhY3RvcnkuY3JlYXRlKHRoaXMudHJhbnNhY3Rpb24pO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICh0aGlzLmNhdGVnb3J5SW1hZ2UpIHtcbiAgICAgIHRoaXMuY2F0ZWdvcnlJbWFnZS5uYXRpdmVFbGVtZW50Lm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5oYXNJbWFnZUxvYWRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKCk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdHJhbnNhY3Rpb25zSWNvbkNhdGVnb3JpZXNGYWN0b3J5OiBUcmFuc2FjdGlvbnNJY29uQ2F0ZWdvcmllc0ZhY3RvcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxuICApIHt9XG59XG4iLCI8ZGl2XG4gIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gIGNsYXNzPVwiYmItdHJhbnNhY3Rpb24tY2F0ZWdvcnkgYmItdHJhbnNhY3Rpb24tY2F0ZWdvcnktLWVucmljaGVkXCJcbiAgdGl0bGU9XCJ7eyB0cmFuc2FjdGlvbj8ubWVyY2hhbnQgPyB0cmFuc2FjdGlvbj8ubWVyY2hhbnQ/Lm5hbWUgOiB0cmFuc2FjdGlvbkljb24/LnRpdGxlIH19XCJcbiAgW25nQ2xhc3NdPVwiW1xuICAgIGNpcmNsZSA/ICdiYi10cmFuc2FjdGlvbi1jYXRlZ29yeS1pY29uLWNpcmNsZScgOiAnYmItdHJhbnNhY3Rpb24tY2F0ZWdvcnktaWNvbicsXG4gICAgc2l6ZSA/ICdiYi10cmFuc2FjdGlvbi1jYXRlZ29yeS0tJyArIHNpemUgOiAnJyxcbiAgICAhdHJhbnNhY3Rpb24/Lm1lcmNoYW50Py5sb2dvIHx8ICFoYXNJbWFnZUxvYWRlZCA/IHRyYW5zYWN0aW9uSWNvbj8uZm9ybWF0Q2xhc3NOYW1lKCkgOiAnJ1xuICBdXCJcbj5cbiAgPGltZ1xuICAgIGNsYXNzPVwiYmItdHJhbnNhY3Rpb24tY2F0ZWdvcnlfX2ltYWdlXCJcbiAgICAqbmdJZj1cInRyYW5zYWN0aW9uPy5tZXJjaGFudD8ubG9nb1wiIFxuICAgIFtoaWRkZW5dPVwiIWhhc0ltYWdlTG9hZGVkXCIgXG4gICAgW3NyY109XCJ0cmFuc2FjdGlvbj8ubWVyY2hhbnQ/LmxvZ29cIiBcbiAgICAjY2F0ZWdvcnlJbWFnZSBcbiAgLz5cbjwvZGl2PlxuIl19