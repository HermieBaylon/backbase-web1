{"version":3,"file":"oidc-auth.service.js","sourceRoot":"","sources":["../../../../../../libs/identity-auth/src/lib/oidc-auth/oidc-auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable, Optional } from '@angular/core';\nimport { AuthConfig, OAuthEvent, OAuthService, OAuthStorage, OAuthSuccessEvent } from 'angular-oauth2-oidc';\nimport { from, Observable, ReplaySubject } from 'rxjs';\nimport { filter, map, mapTo, take } from 'rxjs/operators';\nimport { WINDOW } from '../auth/auth.model';\nimport { AccessToken } from './oidc-auth.model';\n\n/** @internal */\n@Injectable()\nexport class ɵɵOidcAuthService {\n  private readonly window: Window;\n  private readonly authenticated$$ = new ReplaySubject<void>();\n\n  readonly storage = this.oAuthStorage;\n  readonly authConfig = this.oAuthConfig;\n  readonly events$ = this.oAuthService?.events;\n  readonly isAuthenticated$: Observable<boolean> = this.authenticated$$.pipe(\n    map(() => this.oAuthService.hasValidAccessToken()),\n  );\n  readonly accessToken$: Observable<AccessToken | undefined> = this.isAuthenticated$.pipe(\n    filter((loaded) => loaded),\n    map(() => {\n      const raw = this.oAuthService.getAccessToken();\n      return {\n        raw,\n        parsed: this.parseJwt(raw),\n      };\n    }),\n  );\n\n  // https://angular.io/guide/aot-metadata-errors#could-not-resolve-type\n  constructor(\n    @Optional() private readonly oAuthService: OAuthService,\n    @Inject(OAuthStorage) private readonly oAuthStorage: OAuthStorage,\n    @Inject(AuthConfig) private readonly oAuthConfig: AuthConfig,\n    @Inject(WINDOW) private readonly _window: any,\n  ) {\n    if (!oAuthService) {\n      throw new Error(\n        `In order to use ɵɵOidcAuthService, please include OAuthModule.forRoot() to your application module`,\n      );\n    }\n    this.window = this._window as Window;\n    this.oAuthService.events.subscribe((event: OAuthEvent) => {\n      switch (event.type) {\n        case 'discovery_document_loaded':\n        case 'token_received':\n        case 'logout':\n          this.authenticated$$.next();\n          break;\n        default:\n          break;\n      }\n    });\n  }\n\n  logout(redirectUri?: string): Promise<void> {\n    if (redirectUri) {\n      this.oAuthService.postLogoutRedirectUri = redirectUri;\n    }\n    this.oAuthService.logOut();\n\n    return this.oAuthService.events\n      .pipe(\n        filter((event) => event.type === 'logout'),\n        mapTo(undefined),\n        take(1),\n      )\n      .toPromise();\n  }\n\n  timeToLive(): number {\n    const expiration = this.oAuthService.getAccessTokenExpiration();\n\n    if (expiration) {\n      return expiration - Math.ceil(new Date().getTime() / 1000) + (this.oAuthService.clockSkewInSec || 0);\n    }\n\n    return -1;\n  }\n\n  refresh(): Promise<void> {\n    this.oAuthService.refreshToken();\n\n    return this.oAuthService.events\n      .pipe(\n        filter((event) => event.type === 'token_refreshed'),\n        mapTo(undefined),\n        take(1),\n      )\n      .toPromise();\n  }\n\n  loadDiscoveryDocument(): Promise<OAuthSuccessEvent> {\n    return this.oAuthService.loadDiscoveryDocument();\n  }\n\n  authorizationHeader(): string {\n    return this.oAuthService.authorizationHeader();\n  }\n\n  createReauthLoginUrl(scope: string, acr_values: string): Observable<string> {\n    return from(\n      (this.oAuthService as any).createLoginUrl(\n        '', // state\n        '', // login hint\n        location.href, // custom redirect uri\n        false, // no prompt\n        {\n          acr_values,\n          response_mode: 'fragment',\n        }, // params\n      ) as string,\n    ).pipe(\n      map((preUrl) => {\n        const urlParsed = new URL(preUrl);\n        urlParsed.searchParams.set('scope', `${urlParsed.searchParams.get('scope')} ${scope}`);\n        return urlParsed.href;\n      }),\n    );\n  }\n\n  private parseJwt(token: string): any {\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      return JSON.parse(this.window.atob(base64));\n    } catch (e) {\n      return undefined;\n    }\n  }\n}\n"]}