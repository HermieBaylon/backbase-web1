/* eslint-disable @typescript-eslint/ban-types */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/modal";
import * as i2 from "../header/header.component";
import * as i3 from "../action-pending/action-pending.component";
import * as i4 from "../error/error.component";
import * as i5 from "../hard-token/hard-token.component";
import * as i6 from "../oob-select-device/oob-select-device.component";
import * as i7 from "../oob-device/oob-device.component";
import * as i8 from "../sms-otp/sms-otp.component";
import * as i9 from "@angular/common";
export class TransactionSigningInterfaceComponent {
    constructor() {
        this.failure = new EventEmitter();
        this.postSuccess = new EventEmitter();
        this.poll = new EventEmitter();
        this.post = new EventEmitter();
        /**
         * Whether a signing is pending.
         */
        this.isPending = false;
        this.modalOptions = {
            keyboard: false,
            backdrop: 'static',
        };
    }
    /**
     * The data involved in the challenge.
     */
    get challengeData() {
        if (!this.currentChallengeData) {
            throw new Error('No current challenge data set');
        }
        return this.currentChallengeData;
    }
    set challengeData(newData) {
        this.previousChallengeData = this.currentChallengeData;
        this.currentChallengeData = Object.assign(Object.assign({}, this.previousChallengeData), newData);
    }
}
/** @nocollapse */ TransactionSigningInterfaceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningInterfaceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TransactionSigningInterfaceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningInterfaceComponent, selector: "bb-transaction-signing-interface", inputs: { isPending: "isPending", error: "error", transactionData: "transactionData", challengeType: "challengeType", enableResendPushNotification: "enableResendPushNotification", challengeError: "challengeError", challengeData: "challengeData" }, outputs: { failure: "failure", postSuccess: "postSuccess", poll: "poll", post: "post" }, ngImport: i0, template: "<bb-modal-ui [isOpen]=\"true\" [modalOptions]=\"modalOptions\">\n  <bb-modal-header-ui data-role=\"ts-modal\">\n    <ng-template bbCustomModalHeader>\n      <bb-transaction-signing-header [data]=\"transactionData\"></bb-transaction-signing-header>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <hr class=\"mt-0\" />\n      <bb-transaction-signing-action-pending *ngIf=\"isPending\"></bb-transaction-signing-action-pending>\n      <ng-container *ngIf=\"!isPending\">\n        <bb-transaction-signing-error\n          *ngIf=\"challengeError\"\n          [error]=\"challengeError\"\n          (closeModal)=\"failure.emit($event)\"\n        >\n        </bb-transaction-signing-error>\n        <bb-transaction-signing-hard-token\n          *ngIf=\"challengeType === 'hard-token-auth'\"\n          [data]=\"challengeData\"\n          [error]=\"error\"\n          (submitResponse)=\"post.emit($event)\"\n          (cancel)=\"post.emit({ responseType: 'confirmation-abort' })\"\n          (acceptError)=\"failure.emit($event)\"\n        >\n        </bb-transaction-signing-hard-token>\n        <bb-transaction-signing-oob-select-device\n          *ngIf=\"challengeType === 'oob-ts-select-device'\"\n          [data]=\"challengeData\"\n          [error]=\"error\"\n          (submitResponse)=\"post.emit($event)\"\n          (cancel)=\"post.emit({ responseType: 'confirmation-abort' })\"\n          (acceptError)=\"failure.emit($event)\"\n        >\n        </bb-transaction-signing-oob-select-device>\n        <bb-transaction-signing-oob-device\n          *ngIf=\"challengeType === 'oob-uaf-auth'\"\n          [data]=\"challengeData\"\n          [enableResendPushNotification]=\"enableResendPushNotification\"\n          [error]=\"error\"\n          (poll)=\"poll.emit({ responseType: 'system-poll' })\"\n          (cancel)=\"post.emit({ responseType: 'confirmation-abort' })\"\n          (acceptError)=\"failure.emit($event)\"\n          (resend)=\"post.emit({ responseType: 'pn-resend' })\"\n        >\n        </bb-transaction-signing-oob-device>\n        <bb-transaction-signing-sms-otp\n          *ngIf=\"challengeType === 'sms-otp-auth'\"\n          [data]=\"challengeData\"\n          [previousData]=\"previousChallengeData\"\n          [error]=\"error\"\n          (submitResponse)=\"post.emit($event)\"\n          (cancel)=\"post.emit({ responseType: 'confirmation-abort' })\"\n          (acceptError)=\"failure.emit($event)\"\n          (resend)=\"post.emit({ responseType: 'otp-resend' })\"\n        >\n        </bb-transaction-signing-sms-otp>\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n</bb-modal-ui>\n", components: [{ type: i1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2.TransactionSigningHeaderComponent, selector: "bb-transaction-signing-header", inputs: ["data"] }, { type: i1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3.TransactionSigningActionPendingComponent, selector: "bb-transaction-signing-action-pending" }, { type: i4.TransactionSigningErrorComponent, selector: "bb-transaction-signing-error", inputs: ["error"], outputs: ["closeModal"] }, { type: i5.TransactionSigningHardTokenComponent, selector: "bb-transaction-signing-hard-token", inputs: ["data", "error"], outputs: ["cancel", "submitResponse", "acceptError"] }, { type: i6.TransactionSigningOobSelectDeviceComponent, selector: "bb-transaction-signing-oob-select-device", inputs: ["data", "error"], outputs: ["cancel", "acceptError", "submitResponse"] }, { type: i7.TransactionSigningOobDeviceComponent, selector: "bb-transaction-signing-oob-device", inputs: ["error", "enableResendPushNotification", "data"], outputs: ["acceptError", "cancel", "poll", "resend"] }, { type: i8.TransactionSigningSmsOtpComponent, selector: "bb-transaction-signing-sms-otp", inputs: ["previousData", "data", "error"], outputs: ["cancel", "submitResponse", "acceptError", "resend"] }], directives: [{ type: i1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningInterfaceComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-signing-interface',
                    templateUrl: 'interface.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { failure: [{
                type: Output
            }], postSuccess: [{
                type: Output
            }], poll: [{
                type: Output
            }], post: [{
                type: Output
            }], isPending: [{
                type: Input
            }], error: [{
                type: Input
            }], transactionData: [{
                type: Input
            }], challengeType: [{
                type: Input
            }], enableResendPushNotification: [{
                type: Input
            }], challengeError: [{
                type: Input
            }], challengeData: [{
                type: Input
            }] } });
//# sourceMappingURL=interface.component.js.map