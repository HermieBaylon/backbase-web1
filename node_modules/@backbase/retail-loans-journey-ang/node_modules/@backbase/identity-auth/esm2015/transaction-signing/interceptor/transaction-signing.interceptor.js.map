{"version":3,"file":"transaction-signing.interceptor.js","sourceRoot":"","sources":["../../../../../../libs/identity-auth/transaction-signing/interceptor/transaction-signing.interceptor.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAE,yBAAyB,EAAE,MAAM,wCAAwC,CAAC;;;AAEnF;;GAEG;AAEH,MAAM,OAAO,6BAA6B;IACxC,YAA6B,yBAAoD;QAApD,8BAAyB,GAAzB,yBAAyB,CAA2B;IAAG,CAAC;IACrF,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,OAAO,IAAI;aACR,MAAM,CAAC,OAAO,CAAC;aACf,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,0BAA0B,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACnG,CAAC;;8IANU,6BAA6B;kJAA7B,6BAA6B;4FAA7B,6BAA6B;kBADzC,UAAU","sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { TransactionSigningService } from '../service/transaction-signing.service';\n\n/**\n * Interceptor used to check for reauthentication errors\n */\n@Injectable()\nexport class TransactionSigningInterceptor implements HttpInterceptor {\n  constructor(private readonly transactionSigningService: TransactionSigningService) {}\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next\n      .handle(request)\n      .pipe(catchError((error) => this.transactionSigningService.initiateTransactionSigning(error)));\n  }\n}\n"]}