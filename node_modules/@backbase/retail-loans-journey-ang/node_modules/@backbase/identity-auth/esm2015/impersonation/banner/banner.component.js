import { Component, EventEmitter, Output, Renderer2 } from '@angular/core';
import { filter, switchMap, tap } from 'rxjs/operators';
import { ImpersonationDataService } from '../impersonation-data/impersonation-data.service';
import { ImpersonationService } from '../impersonation-service/impersonation.service';
import * as i0 from "@angular/core";
import * as i1 from "../impersonation-service/impersonation.service";
import * as i2 from "../impersonation-data/impersonation-data.service";
import * as i3 from "./banner-layout/banner-layout.component";
import * as i4 from "@angular/common";
export class ImpersonationBannerComponent {
    /** @internal */
    constructor(impersonationService, dataService, renderer) {
        this.impersonationService = impersonationService;
        this.dataService = dataService;
        this.renderer = renderer;
        /**
         * Event Emitted when stop impersonation button is pressed.
         * Please logout the user as your app requires.
         */
        this.stopImpersonation = new EventEmitter();
        this.impersonatedClass = 'impersonated';
        this.user$ = this.impersonationService.isImpersonated$.pipe(tap((state) => this.setImpersonationClass(state)), filter((state) => !!state), switchMap(() => this.dataService.getOwnUser()));
        this.setImpersonationClass = (state) => state
            ? this.renderer.addClass(document.body, this.impersonatedClass)
            : this.renderer.removeClass(document.body, this.impersonatedClass);
    }
}
/** @nocollapse */ ImpersonationBannerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ImpersonationBannerComponent, deps: [{ token: i1.ImpersonationService }, { token: i2.ImpersonationDataService }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ImpersonationBannerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ImpersonationBannerComponent, selector: "bb-impersonation-banner", outputs: { stopImpersonation: "stopImpersonation" }, ngImport: i0, template: "<bb-impersonation-banner-layout\n  *ngIf=\"user$ | async as user\"\n  [user]=\"user\"\n  (stop)=\"this.stopImpersonation.emit()\"\n></bb-impersonation-banner-layout>\n", components: [{ type: i3.ImpersonationBannerLayoutComponent, selector: "bb-impersonation-banner-layout", inputs: ["user"], outputs: ["stop"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ImpersonationBannerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-impersonation-banner',
                    templateUrl: 'banner.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.ImpersonationService }, { type: i2.ImpersonationDataService }, { type: i0.Renderer2 }]; }, propDecorators: { stopImpersonation: [{
                type: Output
            }] } });
//# sourceMappingURL=banner.component.js.map