{"version":3,"file":"banner.component.js","sourceRoot":"","sources":["../../../../../../libs/identity-auth/impersonation/banner/banner.component.ts","../../../../../../libs/identity-auth/impersonation/banner/banner.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAG3E,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACxD,OAAO,EAAE,wBAAwB,EAAE,MAAM,kDAAkD,CAAC;AAC5F,OAAO,EAAE,oBAAoB,EAAE,MAAM,gDAAgD,CAAC;;;;;;AAMtF,MAAM,OAAO,4BAA4B;IAcvC,gBAAgB;IAChB,YACmB,oBAA0C,EAC1C,WAAqC,EACrC,QAAmB;QAFnB,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,gBAAW,GAAX,WAAW,CAA0B;QACrC,aAAQ,GAAR,QAAQ,CAAW;QAjBtC;;;WAGG;QACO,sBAAiB,GAAG,IAAI,YAAY,EAAE,CAAC;QAEhC,sBAAiB,GAAG,cAAc,CAAC;QAC3C,UAAK,GAA2B,IAAI,CAAC,oBAAoB,CAAC,eAAe,CAAC,IAAI,CACrF,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,EACjD,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,EAC1B,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,CAC/C,CAAC;QASe,0BAAqB,GAAG,CAAC,KAAc,EAAE,EAAE,CAC1D,KAAK;YACH,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC;YAC/D,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;IALpE,CAAC;;6IAnBO,4BAA4B;iIAA5B,4BAA4B,oHCXzC,yKAKA;4FDMa,4BAA4B;kBAJxC,SAAS;mBAAC;oBACT,QAAQ,EAAE,yBAAyB;oBACnC,WAAW,EAAE,uBAAuB;iBACrC;0KAMW,iBAAiB;sBAA1B,MAAM","sourcesContent":["import { Component, EventEmitter, Output, Renderer2 } from '@angular/core';\nimport { GetOwnUser } from '@backbase/data-ang/user';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { ImpersonationDataService } from '../impersonation-data/impersonation-data.service';\nimport { ImpersonationService } from '../impersonation-service/impersonation.service';\n\n@Component({\n  selector: 'bb-impersonation-banner',\n  templateUrl: 'banner.component.html',\n})\nexport class ImpersonationBannerComponent {\n  /**\n   * Event Emitted when stop impersonation button is pressed.\n   * Please logout the user as your app requires.\n   */\n  @Output() stopImpersonation = new EventEmitter();\n\n  private readonly impersonatedClass = 'impersonated';\n  readonly user$: Observable<GetOwnUser> = this.impersonationService.isImpersonated$.pipe(\n    tap((state) => this.setImpersonationClass(state)),\n    filter((state) => !!state),\n    switchMap(() => this.dataService.getOwnUser()),\n  );\n\n  /** @internal */\n  constructor(\n    private readonly impersonationService: ImpersonationService,\n    private readonly dataService: ImpersonationDataService,\n    private readonly renderer: Renderer2,\n  ) {}\n\n  private readonly setImpersonationClass = (state: boolean) =>\n    state\n      ? this.renderer.addClass(document.body, this.impersonatedClass)\n      : this.renderer.removeClass(document.body, this.impersonatedClass);\n}\n","<bb-impersonation-banner-layout\n  *ngIf=\"user$ | async as user\"\n  [user]=\"user\"\n  (stop)=\"this.stopImpersonation.emit()\"\n></bb-impersonation-banner-layout>\n"]}