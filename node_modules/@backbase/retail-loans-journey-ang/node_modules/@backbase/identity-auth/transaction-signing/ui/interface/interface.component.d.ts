import { EventEmitter } from '@angular/core';
import { NgbModalOptions } from '@ng-bootstrap/ng-bootstrap';
import { CapabilityData, ChallengeError } from '../../util';
import * as i0 from "@angular/core";
export declare class TransactionSigningInterfaceComponent {
    failure: EventEmitter<Error>;
    postSuccess: EventEmitter<void>;
    poll: EventEmitter<object>;
    post: EventEmitter<object>;
    /**
     * Whether a signing is pending.
     */
    isPending: boolean;
    /**
     * An error received during signing.
     */
    error: ChallengeError | undefined;
    /**
     * Data defining the transaction.
     */
    transactionData: CapabilityData | undefined;
    /**
     * The type of challenge.
     */
    challengeType: string | undefined;
    /**
     * Enable the resending of push notifications
     */
    enableResendPushNotification: boolean;
    /**
     * An error received during authentication.
     */
    challengeError: ChallengeError | undefined;
    /**
     * The data involved in the challenge.
     */
    get challengeData(): any | undefined;
    set challengeData(newData: any | undefined);
    readonly modalOptions: NgbModalOptions;
    previousChallengeData: any | undefined;
    private currentChallengeData;
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionSigningInterfaceComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TransactionSigningInterfaceComponent, "bb-transaction-signing-interface", never, { "isPending": "isPending"; "error": "error"; "transactionData": "transactionData"; "challengeType": "challengeType"; "enableResendPushNotification": "enableResendPushNotification"; "challengeError": "challengeError"; "challengeData": "challengeData"; }, { "failure": "failure"; "postSuccess": "postSuccess"; "poll": "poll"; "post": "post"; }, never, never>;
}
