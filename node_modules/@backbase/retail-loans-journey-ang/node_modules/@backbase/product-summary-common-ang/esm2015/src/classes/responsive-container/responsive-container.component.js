import { Component, HostListener, Input } from '@angular/core';
import { SIZE_MOBILE_DEFAULT, SIZE_TABLET_DEFAULT } from './constants';
import * as i0 from "@angular/core";
export class ResponsiveContainerComponent {
    constructor(element, changeDetector) {
        /**
         * Specifies screen size: `mobile` | `tablet` | 'screen'
         *
         * @default 'screen'
         */
        this._responsiveView = 'screen';
        this._sizeTablet = SIZE_TABLET_DEFAULT;
        this._sizeMobile = SIZE_MOBILE_DEFAULT;
        this._element = element;
        this._changeDetector = changeDetector;
    }
    get responsiveView() {
        return this._customResponsiveView || this._responsiveView;
    }
    set responsiveView(value) {
        this._customResponsiveView = value;
    }
    get sizeMobile() {
        return this._sizeMobile;
    }
    set sizeMobile(value) {
        this._sizeMobile = value;
    }
    get sizeTablet() {
        return this._sizeTablet;
    }
    set sizeTablet(value) {
        this._sizeTablet = value;
    }
    /**
     * @internal
     */
    ngAfterViewInit() {
        if (!this._customResponsiveView) {
            this.checkElementSize();
            this._changeDetector.detectChanges();
        }
    }
    /**
     * Event handler on `windows:resize`
     * Checks size of the container
     */
    onResize() {
        if (!this._customResponsiveView) {
            this.checkElementSize();
        }
    }
    /**
     * Checks width of the parent container and updates `isSmallScreen$` and `isExtraSmallScreen$`
     */
    checkElementSize() {
        var _a, _b;
        const containerWidth = ((_b = (_a = this._element.nativeElement) === null || _a === void 0 ? void 0 : _a.firstElementChild) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect().width) || 0;
        this._responsiveView = this.getResponsiveView(containerWidth);
    }
    getResponsiveView(containerWidth) {
        let responseView = 'screen';
        if (containerWidth <= this.sizeMobile) {
            responseView = 'mobile';
        }
        else if (containerWidth <= this.sizeTablet) {
            responseView = 'tablet';
        }
        return responseView;
    }
}
ResponsiveContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ResponsiveContainerComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ResponsiveContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ResponsiveContainerComponent, selector: "ng-component", inputs: { responsiveView: "responsiveView" }, host: { listeners: { "window:resize": "onResize()" } }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ResponsiveContainerComponent, decorators: [{
            type: Component,
            args: [{ template: '' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { responsiveView: [{
                type: Input
            }], onResize: [{
                type: HostListener,
                args: ['window:resize', []]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2l2ZS1jb250YWluZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9wcm9kdWN0LXN1bW1hcnktY29tbW9uLWFuZy9zcmMvY2xhc3Nlcy9yZXNwb25zaXZlLWNvbnRhaW5lci9yZXNwb25zaXZlLWNvbnRhaW5lci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFvQyxTQUFTLEVBQWMsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxhQUFhLENBQUM7O0FBSXZFLE1BQU0sT0FBTyw0QkFBNEI7SUFtQ3ZDLFlBQVksT0FBZ0MsRUFBRSxjQUFpQztRQVovRTs7OztXQUlHO1FBQ0ssb0JBQWUsR0FBbUIsUUFBUSxDQUFDO1FBSTNDLGdCQUFXLEdBQUcsbUJBQW1CLENBQUM7UUFDbEMsZ0JBQVcsR0FBRyxtQkFBbUIsQ0FBQztRQUd4QyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUN4QixJQUFJLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQztJQUN4QyxDQUFDO0lBckNELElBQ0ksY0FBYztRQUNoQixPQUFPLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzVELENBQUM7SUFFRCxJQUFJLGNBQWMsQ0FBQyxLQUFxQjtRQUN0QyxJQUFJLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDO0lBQ3JDLENBQUM7SUFDRCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUksVUFBVSxDQUFDLEtBQWE7UUFDMUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7SUFDM0IsQ0FBQztJQUNELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxVQUFVLENBQUMsS0FBYTtRQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztJQUMzQixDQUFDO0lBa0JEOztPQUVHO0lBQ0gsZUFBZTtRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUU7WUFDL0IsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDeEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN0QztJQUNILENBQUM7SUFFRDs7O09BR0c7SUFFSCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtZQUMvQixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztTQUN6QjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILGdCQUFnQjs7UUFDZCxNQUFNLGNBQWMsR0FBRyxDQUFBLE1BQUEsTUFBQSxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsMENBQUUsaUJBQWlCLDBDQUFFLHFCQUFxQixHQUFHLEtBQUssS0FBSSxDQUFDLENBQUM7UUFDMUcsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVPLGlCQUFpQixDQUFDLGNBQXNCO1FBQzlDLElBQUksWUFBWSxHQUFtQixRQUFRLENBQUM7UUFDNUMsSUFBSSxjQUFjLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNyQyxZQUFZLEdBQUcsUUFBUSxDQUFDO1NBQ3pCO2FBQU0sSUFBSSxjQUFjLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUM1QyxZQUFZLEdBQUcsUUFBUSxDQUFDO1NBQ3pCO1FBQ0QsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQzs7MEhBN0VVLDRCQUE0Qjs4R0FBNUIsNEJBQTRCLDBKQURsQixFQUFFOzRGQUNaLDRCQUE0QjtrQkFEeEMsU0FBUzttQkFBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUU7aUlBR3JCLGNBQWM7c0JBRGpCLEtBQUs7Z0JBc0ROLFFBQVE7c0JBRFAsWUFBWTt1QkFBQyxlQUFlLEVBQUUsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNJWkVfTU9CSUxFX0RFRkFVTFQsIFNJWkVfVEFCTEVUX0RFRkFVTFQgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBSZXNwb25zaXZlVmlldyB9IGZyb20gJy4vdHlwZXMnO1xuXG5AQ29tcG9uZW50KHsgdGVtcGxhdGU6ICcnIH0pXG5leHBvcnQgY2xhc3MgUmVzcG9uc2l2ZUNvbnRhaW5lckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBASW5wdXQoKVxuICBnZXQgcmVzcG9uc2l2ZVZpZXcoKTogUmVzcG9uc2l2ZVZpZXcge1xuICAgIHJldHVybiB0aGlzLl9jdXN0b21SZXNwb25zaXZlVmlldyB8fCB0aGlzLl9yZXNwb25zaXZlVmlldztcbiAgfVxuXG4gIHNldCByZXNwb25zaXZlVmlldyh2YWx1ZTogUmVzcG9uc2l2ZVZpZXcpIHtcbiAgICB0aGlzLl9jdXN0b21SZXNwb25zaXZlVmlldyA9IHZhbHVlO1xuICB9XG4gIGdldCBzaXplTW9iaWxlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3NpemVNb2JpbGU7XG4gIH1cblxuICBzZXQgc2l6ZU1vYmlsZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fc2l6ZU1vYmlsZSA9IHZhbHVlO1xuICB9XG4gIGdldCBzaXplVGFibGV0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3NpemVUYWJsZXQ7XG4gIH1cblxuICBzZXQgc2l6ZVRhYmxldCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fc2l6ZVRhYmxldCA9IHZhbHVlO1xuICB9XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgc2NyZWVuIHNpemU6IGBtb2JpbGVgIHwgYHRhYmxldGAgfCAnc2NyZWVuJ1xuICAgKlxuICAgKiBAZGVmYXVsdCAnc2NyZWVuJ1xuICAgKi9cbiAgcHJpdmF0ZSBfcmVzcG9uc2l2ZVZpZXc6IFJlc3BvbnNpdmVWaWV3ID0gJ3NjcmVlbic7XG4gIHByaXZhdGUgX2N1c3RvbVJlc3BvbnNpdmVWaWV3OiBSZXNwb25zaXZlVmlldyB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBfZWxlbWVudDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD47XG4gIHByaXZhdGUgX2NoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgcHJpdmF0ZSBfc2l6ZVRhYmxldCA9IFNJWkVfVEFCTEVUX0RFRkFVTFQ7XG4gIHByaXZhdGUgX3NpemVNb2JpbGUgPSBTSVpFX01PQklMRV9ERUZBVUxUO1xuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LCBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvciA9IGNoYW5nZURldGVjdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICghdGhpcy5fY3VzdG9tUmVzcG9uc2l2ZVZpZXcpIHtcbiAgICAgIHRoaXMuY2hlY2tFbGVtZW50U2l6ZSgpO1xuICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIG9uIGB3aW5kb3dzOnJlc2l6ZWBcbiAgICogQ2hlY2tzIHNpemUgb2YgdGhlIGNvbnRhaW5lclxuICAgKi9cbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OnJlc2l6ZScsIFtdKVxuICBvblJlc2l6ZSgpIHtcbiAgICBpZiAoIXRoaXMuX2N1c3RvbVJlc3BvbnNpdmVWaWV3KSB7XG4gICAgICB0aGlzLmNoZWNrRWxlbWVudFNpemUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHdpZHRoIG9mIHRoZSBwYXJlbnQgY29udGFpbmVyIGFuZCB1cGRhdGVzIGBpc1NtYWxsU2NyZWVuJGAgYW5kIGBpc0V4dHJhU21hbGxTY3JlZW4kYFxuICAgKi9cbiAgY2hlY2tFbGVtZW50U2l6ZSgpIHtcbiAgICBjb25zdCBjb250YWluZXJXaWR0aCA9IHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudD8uZmlyc3RFbGVtZW50Q2hpbGQ/LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHx8IDA7XG4gICAgdGhpcy5fcmVzcG9uc2l2ZVZpZXcgPSB0aGlzLmdldFJlc3BvbnNpdmVWaWV3KGNvbnRhaW5lcldpZHRoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UmVzcG9uc2l2ZVZpZXcoY29udGFpbmVyV2lkdGg6IG51bWJlcik6IFJlc3BvbnNpdmVWaWV3IHtcbiAgICBsZXQgcmVzcG9uc2VWaWV3OiBSZXNwb25zaXZlVmlldyA9ICdzY3JlZW4nO1xuICAgIGlmIChjb250YWluZXJXaWR0aCA8PSB0aGlzLnNpemVNb2JpbGUpIHtcbiAgICAgIHJlc3BvbnNlVmlldyA9ICdtb2JpbGUnO1xuICAgIH0gZWxzZSBpZiAoY29udGFpbmVyV2lkdGggPD0gdGhpcy5zaXplVGFibGV0KSB7XG4gICAgICByZXNwb25zZVZpZXcgPSAndGFibGV0JztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlVmlldztcbiAgfVxufVxuIl19