export class AccountsOverviewNotFound {
    constructor(response) {
        this.response = response;
        this.kind = 'AccountsOverviewNotFound';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
export class AccountsOverviewBadRequest {
    constructor(response) {
        this.response = response;
        this.kind = 'AccountsOverviewBadRequest';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
export class AccountsOverviewAccessDenied {
    constructor(response) {
        this.response = response;
        this.kind = 'AccountsOverviewAccessDenied';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
export class AccountsOverviewUnknownError {
    constructor(response) {
        this.response = response;
        this.kind = 'AccountsOverviewUnknownError';
        this.messages = [response.message];
    }
}
export class AccountsOverviewConnectivityError {
    constructor(response) {
        this.response = response;
        this.kind = 'AccountsOverviewConnectivityError';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
export const parseError = (error) => {
    if (error.error instanceof ErrorEvent) {
        return new AccountsOverviewUnknownError(error);
    }
    else {
        switch (error.status) {
            case 0:
                return new AccountsOverviewConnectivityError(error);
            case 401:
                return new AccountsOverviewAccessDenied(error);
            case 403:
                return new AccountsOverviewAccessDenied(error);
            case 400:
                return new AccountsOverviewBadRequest(error);
            case 404:
                return new AccountsOverviewNotFound(error);
            default:
                return new AccountsOverviewUnknownError(error);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudHMtb3ZlcnZpZXctc2VydmljZS1lcnJvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvcHJvZHVjdC1zdW1tYXJ5LWNvbW1vbi1hbmcvc3JjL2Vycm9ycy9hY2NvdW50cy1vdmVydmlldy1zZXJ2aWNlLWVycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sT0FBTyx3QkFBd0I7SUFHbkMsWUFBcUIsUUFBMkI7UUFBM0IsYUFBUSxHQUFSLFFBQVEsQ0FBbUI7UUFEaEQsU0FBSSxHQUErQiwwQkFBMEIsQ0FBQztRQUU1RCxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuRixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sMEJBQTBCO0lBR3JDLFlBQXFCLFFBQTJCO1FBQTNCLGFBQVEsR0FBUixRQUFRLENBQW1CO1FBRGhELFNBQUksR0FBaUMsNEJBQTRCLENBQUM7UUFFaEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkYsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLDRCQUE0QjtJQUd2QyxZQUFxQixRQUEyQjtRQUEzQixhQUFRLEdBQVIsUUFBUSxDQUFtQjtRQURoRCxTQUFJLEdBQW1DLDhCQUE4QixDQUFDO1FBRXBFLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25GLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyw0QkFBNEI7SUFHdkMsWUFBcUIsUUFBMkI7UUFBM0IsYUFBUSxHQUFSLFFBQVEsQ0FBbUI7UUFEaEQsU0FBSSxHQUFtQyw4QkFBOEIsQ0FBQztRQUVwRSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxpQ0FBaUM7SUFHNUMsWUFBcUIsUUFBMkI7UUFBM0IsYUFBUSxHQUFSLFFBQVEsQ0FBbUI7UUFEaEQsU0FBSSxHQUF3QyxtQ0FBbUMsQ0FBQztRQUU5RSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuRixDQUFDO0NBQ0Y7QUFTRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUF3QixFQUF5QixFQUFFO0lBQzVFLElBQUksS0FBSyxDQUFDLEtBQUssWUFBWSxVQUFVLEVBQUU7UUFDckMsT0FBTyxJQUFJLDRCQUE0QixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ2hEO1NBQU07UUFDTCxRQUFRLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDcEIsS0FBSyxDQUFDO2dCQUNKLE9BQU8sSUFBSSxpQ0FBaUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0RCxLQUFLLEdBQUc7Z0JBQ04sT0FBTyxJQUFJLDRCQUE0QixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pELEtBQUssR0FBRztnQkFDTixPQUFPLElBQUksNEJBQTRCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDakQsS0FBSyxHQUFHO2dCQUNOLE9BQU8sSUFBSSwwQkFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQyxLQUFLLEdBQUc7Z0JBQ04sT0FBTyxJQUFJLHdCQUF3QixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzdDO2dCQUNFLE9BQU8sSUFBSSw0QkFBNEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNsRDtLQUNGO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmV4cG9ydCBjbGFzcyBBY2NvdW50c092ZXJ2aWV3Tm90Rm91bmQge1xuICBtZXNzYWdlczogc3RyaW5nW107XG4gIGtpbmQ6ICdBY2NvdW50c092ZXJ2aWV3Tm90Rm91bmQnID0gJ0FjY291bnRzT3ZlcnZpZXdOb3RGb3VuZCc7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgIHRoaXMubWVzc2FnZXMgPSAoKHJlc3BvbnNlLmVycm9yIHx8IHt9KS5lcnJvcnMgfHwgW10pLm1hcCgoZTogYW55KSA9PiBlLm1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBY2NvdW50c092ZXJ2aWV3QmFkUmVxdWVzdCB7XG4gIG1lc3NhZ2VzOiBzdHJpbmdbXTtcbiAga2luZDogJ0FjY291bnRzT3ZlcnZpZXdCYWRSZXF1ZXN0JyA9ICdBY2NvdW50c092ZXJ2aWV3QmFkUmVxdWVzdCc7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgIHRoaXMubWVzc2FnZXMgPSAoKHJlc3BvbnNlLmVycm9yIHx8IHt9KS5lcnJvcnMgfHwgW10pLm1hcCgoZTogYW55KSA9PiBlLm1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBY2NvdW50c092ZXJ2aWV3QWNjZXNzRGVuaWVkIHtcbiAgbWVzc2FnZXM6IHN0cmluZ1tdO1xuICBraW5kOiAnQWNjb3VudHNPdmVydmlld0FjY2Vzc0RlbmllZCcgPSAnQWNjb3VudHNPdmVydmlld0FjY2Vzc0RlbmllZCc7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgIHRoaXMubWVzc2FnZXMgPSAoKHJlc3BvbnNlLmVycm9yIHx8IHt9KS5lcnJvcnMgfHwgW10pLm1hcCgoZTogYW55KSA9PiBlLm1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBY2NvdW50c092ZXJ2aWV3VW5rbm93bkVycm9yIHtcbiAgbWVzc2FnZXM6IHN0cmluZ1tdO1xuICBraW5kOiAnQWNjb3VudHNPdmVydmlld1Vua25vd25FcnJvcicgPSAnQWNjb3VudHNPdmVydmlld1Vua25vd25FcnJvcic7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgIHRoaXMubWVzc2FnZXMgPSBbcmVzcG9uc2UubWVzc2FnZV07XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFjY291bnRzT3ZlcnZpZXdDb25uZWN0aXZpdHlFcnJvciB7XG4gIG1lc3NhZ2VzOiBzdHJpbmdbXTtcbiAga2luZDogJ0FjY291bnRzT3ZlcnZpZXdDb25uZWN0aXZpdHlFcnJvcicgPSAnQWNjb3VudHNPdmVydmlld0Nvbm5lY3Rpdml0eUVycm9yJztcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcmVzcG9uc2U6IEh0dHBFcnJvclJlc3BvbnNlKSB7XG4gICAgdGhpcy5tZXNzYWdlcyA9ICgocmVzcG9uc2UuZXJyb3IgfHwge30pLmVycm9ycyB8fCBbXSkubWFwKChlOiBhbnkpID0+IGUubWVzc2FnZSk7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgQWNjb3VudHNPdmVydmlld0Vycm9yID1cbiAgfCBBY2NvdW50c092ZXJ2aWV3QWNjZXNzRGVuaWVkXG4gIHwgQWNjb3VudHNPdmVydmlld0JhZFJlcXVlc3RcbiAgfCBBY2NvdW50c092ZXJ2aWV3Tm90Rm91bmRcbiAgfCBBY2NvdW50c092ZXJ2aWV3Q29ubmVjdGl2aXR5RXJyb3JcbiAgfCBBY2NvdW50c092ZXJ2aWV3VW5rbm93bkVycm9yO1xuXG5leHBvcnQgY29uc3QgcGFyc2VFcnJvciA9IChlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpOiBBY2NvdW50c092ZXJ2aWV3RXJyb3IgPT4ge1xuICBpZiAoZXJyb3IuZXJyb3IgaW5zdGFuY2VvZiBFcnJvckV2ZW50KSB7XG4gICAgcmV0dXJuIG5ldyBBY2NvdW50c092ZXJ2aWV3VW5rbm93bkVycm9yKGVycm9yKTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKGVycm9yLnN0YXR1cykge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gbmV3IEFjY291bnRzT3ZlcnZpZXdDb25uZWN0aXZpdHlFcnJvcihlcnJvcik7XG4gICAgICBjYXNlIDQwMTpcbiAgICAgICAgcmV0dXJuIG5ldyBBY2NvdW50c092ZXJ2aWV3QWNjZXNzRGVuaWVkKGVycm9yKTtcbiAgICAgIGNhc2UgNDAzOlxuICAgICAgICByZXR1cm4gbmV3IEFjY291bnRzT3ZlcnZpZXdBY2Nlc3NEZW5pZWQoZXJyb3IpO1xuICAgICAgY2FzZSA0MDA6XG4gICAgICAgIHJldHVybiBuZXcgQWNjb3VudHNPdmVydmlld0JhZFJlcXVlc3QoZXJyb3IpO1xuICAgICAgY2FzZSA0MDQ6XG4gICAgICAgIHJldHVybiBuZXcgQWNjb3VudHNPdmVydmlld05vdEZvdW5kKGVycm9yKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBuZXcgQWNjb3VudHNPdmVydmlld1Vua25vd25FcnJvcihlcnJvcik7XG4gICAgfVxuICB9XG59O1xuIl19