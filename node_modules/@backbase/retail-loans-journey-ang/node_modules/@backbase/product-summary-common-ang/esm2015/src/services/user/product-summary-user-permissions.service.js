import { Injectable } from '@angular/core';
import { map, shareReplay } from 'rxjs/operators';
import { AccountNavigationType, ProductSummaryPrivilege } from '../../model/types';
import { DefaultAllowedNavigationTypes } from '../../model/constants';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/accesscontrol";
export class ProductSummaryUserPermissionsService {
    constructor(usersDataService) {
        this.usersDataService = usersDataService;
        this.productSummaryPermissionParameters = {
            resourceName: 'Product Summary',
            functionName: 'Product Summary',
        };
        this.manageArrangementsPermissionParameters = {
            resourceName: 'Product Summary',
            functionName: 'Manage Arrangement Alias',
        };
        this.productSummaryPrivileges = this.usersDataService.getUserPrivileges(this.productSummaryPermissionParameters).pipe(map(privileges => privileges.map(({ privilege }) => privilege)), shareReplay());
        this.managerArrangementsPrivileges = this.usersDataService.getUserPrivileges(this.manageArrangementsPermissionParameters).pipe(map(privileges => privileges.map(({ privilege }) => privilege)), shareReplay());
        this.hasFullViewPermission = this.productSummaryPrivileges.pipe(map(privileges => privileges.includes(ProductSummaryPrivilege.VIEW)), shareReplay());
        this.hasFullEditPermission = this.productSummaryPrivileges.pipe(map(privileges => privileges.includes(ProductSummaryPrivilege.EDIT)), shareReplay());
        this.hasArrangementAliasEditPermission = this.managerArrangementsPrivileges.pipe(map(privileges => privileges.includes(ProductSummaryPrivilege.EDIT)), shareReplay());
        this.allowedAccountNavigationTypes = this.hasFullViewPermission.pipe(map(hasFullViewPermission => hasFullViewPermission
            ? DefaultAllowedNavigationTypes
            : DefaultAllowedNavigationTypes.filter(type => type !== AccountNavigationType.BALANCE_HISTORY)), shareReplay());
    }
}
ProductSummaryUserPermissionsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ProductSummaryUserPermissionsService, deps: [{ token: i1.UsersHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
ProductSummaryUserPermissionsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ProductSummaryUserPermissionsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ProductSummaryUserPermissionsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.UsersHttpService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1zdW1tYXJ5LXVzZXItcGVybWlzc2lvbnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvcHJvZHVjdC1zdW1tYXJ5LWNvbW1vbi1hbmcvc3JjL3NlcnZpY2VzL3VzZXIvcHJvZHVjdC1zdW1tYXJ5LXVzZXItcGVybWlzc2lvbnMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLHVCQUF1QixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkYsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sdUJBQXVCLENBQUM7OztBQUd0RSxNQUFNLE9BQU8sb0NBQW9DO0lBK0MvQyxZQUE2QixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQTlDOUMsdUNBQWtDLEdBQW1DO1lBQ3BGLFlBQVksRUFBRSxpQkFBaUI7WUFDL0IsWUFBWSxFQUFFLGlCQUFpQjtTQUNoQyxDQUFDO1FBQ2UsMkNBQXNDLEdBQW1DO1lBQ3hGLFlBQVksRUFBRSxpQkFBaUI7WUFDL0IsWUFBWSxFQUFFLDBCQUEwQjtTQUN6QyxDQUFDO1FBRWUsNkJBQXdCLEdBRXJDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxJQUFJLENBQ3ZGLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxTQUFvQyxDQUFDLENBQUMsRUFDMUYsV0FBVyxFQUFFLENBQ2QsQ0FBQztRQUNlLGtDQUE2QixHQUUxQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLHNDQUFzQyxDQUFDLENBQUMsSUFBSSxDQUMzRixHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUMsU0FBb0MsQ0FBQyxDQUFDLEVBQzFGLFdBQVcsRUFBRSxDQUNkLENBQUM7UUFFTywwQkFBcUIsR0FBd0IsSUFBSSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FDdEYsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUNwRSxXQUFXLEVBQUUsQ0FDZCxDQUFDO1FBRU8sMEJBQXFCLEdBQXdCLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQ3RGLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDcEUsV0FBVyxFQUFFLENBQ2QsQ0FBQztRQUVPLHNDQUFpQyxHQUF3QixJQUFJLENBQUMsNkJBQTZCLENBQUMsSUFBSSxDQUN2RyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDLEVBQ3BFLFdBQVcsRUFBRSxDQUNkLENBQUM7UUFFTyxrQ0FBNkIsR0FBd0MsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FDM0csR0FBRyxDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FDMUIscUJBQXFCO1lBQ25CLENBQUMsQ0FBQyw2QkFBNkI7WUFDL0IsQ0FBQyxDQUFDLDZCQUE2QixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxxQkFBcUIsQ0FBQyxlQUFlLENBQUMsQ0FDakcsRUFDRCxXQUFXLEVBQUUsQ0FDZCxDQUFDO0lBRWdFLENBQUM7O2tJQS9DeEQsb0NBQW9DO3NJQUFwQyxvQ0FBb0M7NEZBQXBDLG9DQUFvQztrQkFEaEQsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgc2hhcmVSZXBsYXkgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBHZXRVc2VyUHJpdmlsZWdlc1JlcXVlc3RQYXJhbXMsIFVzZXJzSHR0cFNlcnZpY2UgfSBmcm9tICdAYmFja2Jhc2UvZGF0YS1hbmcvYWNjZXNzY29udHJvbCc7XG5pbXBvcnQgeyBBY2NvdW50TmF2aWdhdGlvblR5cGUsIFByb2R1Y3RTdW1tYXJ5UHJpdmlsZWdlIH0gZnJvbSAnLi4vLi4vbW9kZWwvdHlwZXMnO1xuaW1wb3J0IHsgRGVmYXVsdEFsbG93ZWROYXZpZ2F0aW9uVHlwZXMgfSBmcm9tICcuLi8uLi9tb2RlbC9jb25zdGFudHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUHJvZHVjdFN1bW1hcnlVc2VyUGVybWlzc2lvbnNTZXJ2aWNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBwcm9kdWN0U3VtbWFyeVBlcm1pc3Npb25QYXJhbWV0ZXJzOiBHZXRVc2VyUHJpdmlsZWdlc1JlcXVlc3RQYXJhbXMgPSB7XG4gICAgcmVzb3VyY2VOYW1lOiAnUHJvZHVjdCBTdW1tYXJ5JyxcbiAgICBmdW5jdGlvbk5hbWU6ICdQcm9kdWN0IFN1bW1hcnknLFxuICB9O1xuICBwcml2YXRlIHJlYWRvbmx5IG1hbmFnZUFycmFuZ2VtZW50c1Blcm1pc3Npb25QYXJhbWV0ZXJzOiBHZXRVc2VyUHJpdmlsZWdlc1JlcXVlc3RQYXJhbXMgPSB7XG4gICAgcmVzb3VyY2VOYW1lOiAnUHJvZHVjdCBTdW1tYXJ5JyxcbiAgICBmdW5jdGlvbk5hbWU6ICdNYW5hZ2UgQXJyYW5nZW1lbnQgQWxpYXMnLFxuICB9O1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgcHJvZHVjdFN1bW1hcnlQcml2aWxlZ2VzOiBPYnNlcnZhYmxlPFxuICAgIFByb2R1Y3RTdW1tYXJ5UHJpdmlsZWdlW11cbiAgPiA9IHRoaXMudXNlcnNEYXRhU2VydmljZS5nZXRVc2VyUHJpdmlsZWdlcyh0aGlzLnByb2R1Y3RTdW1tYXJ5UGVybWlzc2lvblBhcmFtZXRlcnMpLnBpcGUoXG4gICAgbWFwKHByaXZpbGVnZXMgPT4gcHJpdmlsZWdlcy5tYXAoKHsgcHJpdmlsZWdlIH0pID0+IHByaXZpbGVnZSBhcyBQcm9kdWN0U3VtbWFyeVByaXZpbGVnZSkpLFxuICAgIHNoYXJlUmVwbGF5KCksXG4gICk7XG4gIHByaXZhdGUgcmVhZG9ubHkgbWFuYWdlckFycmFuZ2VtZW50c1ByaXZpbGVnZXM6IE9ic2VydmFibGU8XG4gICAgUHJvZHVjdFN1bW1hcnlQcml2aWxlZ2VbXVxuICA+ID0gdGhpcy51c2Vyc0RhdGFTZXJ2aWNlLmdldFVzZXJQcml2aWxlZ2VzKHRoaXMubWFuYWdlQXJyYW5nZW1lbnRzUGVybWlzc2lvblBhcmFtZXRlcnMpLnBpcGUoXG4gICAgbWFwKHByaXZpbGVnZXMgPT4gcHJpdmlsZWdlcy5tYXAoKHsgcHJpdmlsZWdlIH0pID0+IHByaXZpbGVnZSBhcyBQcm9kdWN0U3VtbWFyeVByaXZpbGVnZSkpLFxuICAgIHNoYXJlUmVwbGF5KCksXG4gICk7XG5cbiAgcmVhZG9ubHkgaGFzRnVsbFZpZXdQZXJtaXNzaW9uOiBPYnNlcnZhYmxlPGJvb2xlYW4+ID0gdGhpcy5wcm9kdWN0U3VtbWFyeVByaXZpbGVnZXMucGlwZShcbiAgICBtYXAocHJpdmlsZWdlcyA9PiBwcml2aWxlZ2VzLmluY2x1ZGVzKFByb2R1Y3RTdW1tYXJ5UHJpdmlsZWdlLlZJRVcpKSxcbiAgICBzaGFyZVJlcGxheSgpLFxuICApO1xuXG4gIHJlYWRvbmx5IGhhc0Z1bGxFZGl0UGVybWlzc2lvbjogT2JzZXJ2YWJsZTxib29sZWFuPiA9IHRoaXMucHJvZHVjdFN1bW1hcnlQcml2aWxlZ2VzLnBpcGUoXG4gICAgbWFwKHByaXZpbGVnZXMgPT4gcHJpdmlsZWdlcy5pbmNsdWRlcyhQcm9kdWN0U3VtbWFyeVByaXZpbGVnZS5FRElUKSksXG4gICAgc2hhcmVSZXBsYXkoKSxcbiAgKTtcblxuICByZWFkb25seSBoYXNBcnJhbmdlbWVudEFsaWFzRWRpdFBlcm1pc3Npb246IE9ic2VydmFibGU8Ym9vbGVhbj4gPSB0aGlzLm1hbmFnZXJBcnJhbmdlbWVudHNQcml2aWxlZ2VzLnBpcGUoXG4gICAgbWFwKHByaXZpbGVnZXMgPT4gcHJpdmlsZWdlcy5pbmNsdWRlcyhQcm9kdWN0U3VtbWFyeVByaXZpbGVnZS5FRElUKSksXG4gICAgc2hhcmVSZXBsYXkoKSxcbiAgKTtcblxuICByZWFkb25seSBhbGxvd2VkQWNjb3VudE5hdmlnYXRpb25UeXBlczogT2JzZXJ2YWJsZTxBY2NvdW50TmF2aWdhdGlvblR5cGVbXT4gPSB0aGlzLmhhc0Z1bGxWaWV3UGVybWlzc2lvbi5waXBlKFxuICAgIG1hcChoYXNGdWxsVmlld1Blcm1pc3Npb24gPT5cbiAgICAgIGhhc0Z1bGxWaWV3UGVybWlzc2lvblxuICAgICAgICA/IERlZmF1bHRBbGxvd2VkTmF2aWdhdGlvblR5cGVzXG4gICAgICAgIDogRGVmYXVsdEFsbG93ZWROYXZpZ2F0aW9uVHlwZXMuZmlsdGVyKHR5cGUgPT4gdHlwZSAhPT0gQWNjb3VudE5hdmlnYXRpb25UeXBlLkJBTEFOQ0VfSElTVE9SWSksXG4gICAgKSxcbiAgICBzaGFyZVJlcGxheSgpLFxuICApO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgdXNlcnNEYXRhU2VydmljZTogVXNlcnNIdHRwU2VydmljZSkge31cbn1cbiJdfQ==