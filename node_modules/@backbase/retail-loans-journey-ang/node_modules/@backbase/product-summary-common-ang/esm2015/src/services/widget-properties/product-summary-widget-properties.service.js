import { of, combineLatest, BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';
import { Inject, Injectable, Optional } from '@angular/core';
import { PRODUCT_SUMMARY_WIDGET_PROPERTIES } from '../../model/providers';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
/** @dynamic */
export class ProductSummaryWidgetPropertiesService {
    /**
     * @internal
     * @param defaultConfiguration
     * @param itemModel
     */
    constructor(defaultConfiguration, itemModel) {
        this.defaultConfiguration = defaultConfiguration;
        this.itemModel = itemModel;
        /**
         * Widget properties configuration
         */
        this.configuration = new BehaviorSubject({});
        /**
         * Gets a property value for each value in `propertyNames` input,
         * joins them into `WidgetProperties` structure
         */
        const propertyNames = Object.keys(defaultConfiguration);
        this.properties = combineLatest(propertyNames.map(propertyName => this.getWidgetProperty(propertyName))).pipe(map(properties => propertyNames.reduce((widgetProperties, propertyName, index) => (Object.assign(Object.assign({}, widgetProperties), { [propertyName]: properties[index] })), {})));
    }
    /**
     * Sets widget properties
     *
     * @param config
     */
    setConfiguration(config) {
        this.configuration.next(config);
    }
    /**
     * Returns observable with a widget property
     *
     * @param propertyName
     */
    getProperty(propertyName) {
        return this.properties.pipe(map(properties => properties[propertyName]));
    }
    /**
     * Returns a widget configuration property,
     * takes the value in the following order:
     * - configuration value if exists (widget input)
     * - item-model value if exists (CXP configuration)
     * - default value (constant value)
     */
    getWidgetProperty(propertyName) {
        const defaultValue = this.defaultConfiguration[propertyName];
        const configurationValue$ = this.configuration.pipe(map(configuration => configuration[propertyName]));
        const modelValue$ = this.itemModel
            ? this.itemModel.property(propertyName, defaultValue)
            : of(defaultValue);
        return combineLatest([configurationValue$, modelValue$]).pipe(map(([configurationValue, modelValue]) => (configurationValue !== undefined ? configurationValue : modelValue)));
    }
}
ProductSummaryWidgetPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ProductSummaryWidgetPropertiesService, deps: [{ token: PRODUCT_SUMMARY_WIDGET_PROPERTIES }, { token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ProductSummaryWidgetPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ProductSummaryWidgetPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ProductSummaryWidgetPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PRODUCT_SUMMARY_WIDGET_PROPERTIES]
                }] }, { type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1zdW1tYXJ5LXdpZGdldC1wcm9wZXJ0aWVzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3Byb2R1Y3Qtc3VtbWFyeS1jb21tb24tYW5nL3NyYy9zZXJ2aWNlcy93aWRnZXQtcHJvcGVydGllcy9wcm9kdWN0LXN1bW1hcnktd2lkZ2V0LXByb3BlcnRpZXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsRUFBRSxFQUFFLGFBQWEsRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3JDLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBRTFFLGVBQWU7QUFFZixNQUFNLE9BQU8scUNBQXFDO0lBWWhEOzs7O09BSUc7SUFDSCxZQUM4RCxvQkFBc0MsRUFDckUsU0FBcUI7UUFEVSx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQWtCO1FBQ3JFLGNBQVMsR0FBVCxTQUFTLENBQVk7UUFacEQ7O1dBRUc7UUFDYyxrQkFBYSxHQUFHLElBQUksZUFBZSxDQUE0QixFQUFFLENBQUMsQ0FBQztRQVdsRjs7O1dBR0c7UUFDSCxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxhQUFhLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUMzRyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FDZixhQUFhLENBQUMsTUFBTSxDQUNsQixDQUFDLGdCQUFnQixFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLGlDQUFNLGdCQUFnQixLQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFHLEVBQ3ZHLEVBQXNCLENBQ3ZCLENBQ0YsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxnQkFBZ0IsQ0FBQyxNQUFpQztRQUNoRCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFdBQVcsQ0FHVCxZQUFnQztRQUNoQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNLLGlCQUFpQixDQUd2QixZQUFnQztRQUNoQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDN0QsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FDakQsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBb0MsQ0FBQyxDQUNyRixDQUFDO1FBQ0YsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVM7WUFDaEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFlBQXNCLEVBQUUsWUFBWSxDQUFDO1lBQy9ELENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFckIsT0FBTyxhQUFhLENBQUMsQ0FBQyxtQkFBbUIsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDM0QsR0FBRyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxVQUFVLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxrQkFBa0IsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUNoSCxDQUFDO0lBQ0osQ0FBQzs7bUlBL0VVLHFDQUFxQyxrQkFrQnRDLGlDQUFpQzt1SUFsQmhDLHFDQUFxQzs0RkFBckMscUNBQXFDO2tCQURqRCxVQUFVOzswQkFtQk4sTUFBTTsyQkFBQyxpQ0FBaUM7OzBCQUN4QyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YsIGNvbWJpbmVMYXRlc3QsIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSXRlbU1vZGVsIH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUnO1xuaW1wb3J0IHsgUHJvcGVydHkgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvd2ViLXNkayc7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQUk9EVUNUX1NVTU1BUllfV0lER0VUX1BST1BFUlRJRVMgfSBmcm9tICcuLi8uLi9tb2RlbC9wcm92aWRlcnMnO1xuXG4vKiogQGR5bmFtaWMgKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQcm9kdWN0U3VtbWFyeVdpZGdldFByb3BlcnRpZXNTZXJ2aWNlPFxuICBXaWRnZXRQcm9wZXJ0aWVzIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PiA9IFJlY29yZDxzdHJpbmcsIFByb3BlcnR5PlxuPiB7XG4gIC8qKlxuICAgKiBXaWRnZXQgcHJvcGVydGllc1xuICAgKi9cbiAgcmVhZG9ubHkgcHJvcGVydGllczogT2JzZXJ2YWJsZTxXaWRnZXRQcm9wZXJ0aWVzPjtcbiAgLyoqXG4gICAqIFdpZGdldCBwcm9wZXJ0aWVzIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgY29uZmlndXJhdGlvbiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8UGFydGlhbDxXaWRnZXRQcm9wZXJ0aWVzPj4oe30pO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHBhcmFtIGRlZmF1bHRDb25maWd1cmF0aW9uXG4gICAqIEBwYXJhbSBpdGVtTW9kZWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoUFJPRFVDVF9TVU1NQVJZX1dJREdFVF9QUk9QRVJUSUVTKSBwcml2YXRlIHJlYWRvbmx5IGRlZmF1bHRDb25maWd1cmF0aW9uOiBXaWRnZXRQcm9wZXJ0aWVzLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgcmVhZG9ubHkgaXRlbU1vZGVsPzogSXRlbU1vZGVsLFxuICApIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIGEgcHJvcGVydHkgdmFsdWUgZm9yIGVhY2ggdmFsdWUgaW4gYHByb3BlcnR5TmFtZXNgIGlucHV0LFxuICAgICAqIGpvaW5zIHRoZW0gaW50byBgV2lkZ2V0UHJvcGVydGllc2Agc3RydWN0dXJlXG4gICAgICovXG4gICAgY29uc3QgcHJvcGVydHlOYW1lcyA9IE9iamVjdC5rZXlzKGRlZmF1bHRDb25maWd1cmF0aW9uKTtcbiAgICB0aGlzLnByb3BlcnRpZXMgPSBjb21iaW5lTGF0ZXN0KHByb3BlcnR5TmFtZXMubWFwKHByb3BlcnR5TmFtZSA9PiB0aGlzLmdldFdpZGdldFByb3BlcnR5KHByb3BlcnR5TmFtZSkpKS5waXBlKFxuICAgICAgbWFwKHByb3BlcnRpZXMgPT5cbiAgICAgICAgcHJvcGVydHlOYW1lcy5yZWR1Y2UoXG4gICAgICAgICAgKHdpZGdldFByb3BlcnRpZXMsIHByb3BlcnR5TmFtZSwgaW5kZXgpID0+ICh7IC4uLndpZGdldFByb3BlcnRpZXMsIFtwcm9wZXJ0eU5hbWVdOiBwcm9wZXJ0aWVzW2luZGV4XSB9KSxcbiAgICAgICAgICB7fSBhcyBXaWRnZXRQcm9wZXJ0aWVzLFxuICAgICAgICApLFxuICAgICAgKSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgd2lkZ2V0IHByb3BlcnRpZXNcbiAgICpcbiAgICogQHBhcmFtIGNvbmZpZ1xuICAgKi9cbiAgc2V0Q29uZmlndXJhdGlvbihjb25maWc6IFBhcnRpYWw8V2lkZ2V0UHJvcGVydGllcz4pIHtcbiAgICB0aGlzLmNvbmZpZ3VyYXRpb24ubmV4dChjb25maWcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgb2JzZXJ2YWJsZSB3aXRoIGEgd2lkZ2V0IHByb3BlcnR5XG4gICAqXG4gICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWVcbiAgICovXG4gIGdldFByb3BlcnR5PFxuICAgIFdpZGdldFByb3BlcnR5TmFtZSBleHRlbmRzIGtleW9mIFdpZGdldFByb3BlcnRpZXMsXG4gICAgV2lkZ2V0UHJvcGVydHlWYWx1ZSBleHRlbmRzIFdpZGdldFByb3BlcnRpZXNbV2lkZ2V0UHJvcGVydHlOYW1lXVxuICA+KHByb3BlcnR5TmFtZTogV2lkZ2V0UHJvcGVydHlOYW1lKTogT2JzZXJ2YWJsZTxXaWRnZXRQcm9wZXJ0eVZhbHVlPiB7XG4gICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5waXBlKG1hcChwcm9wZXJ0aWVzID0+IHByb3BlcnRpZXNbcHJvcGVydHlOYW1lXSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB3aWRnZXQgY29uZmlndXJhdGlvbiBwcm9wZXJ0eSxcbiAgICogdGFrZXMgdGhlIHZhbHVlIGluIHRoZSBmb2xsb3dpbmcgb3JkZXI6XG4gICAqIC0gY29uZmlndXJhdGlvbiB2YWx1ZSBpZiBleGlzdHMgKHdpZGdldCBpbnB1dClcbiAgICogLSBpdGVtLW1vZGVsIHZhbHVlIGlmIGV4aXN0cyAoQ1hQIGNvbmZpZ3VyYXRpb24pXG4gICAqIC0gZGVmYXVsdCB2YWx1ZSAoY29uc3RhbnQgdmFsdWUpXG4gICAqL1xuICBwcml2YXRlIGdldFdpZGdldFByb3BlcnR5PFxuICAgIFdpZGdldFByb3BlcnR5TmFtZSBleHRlbmRzIGtleW9mIFdpZGdldFByb3BlcnRpZXMsXG4gICAgV2lkZ2V0UHJvcGVydHlWYWx1ZSBleHRlbmRzIFdpZGdldFByb3BlcnRpZXNbV2lkZ2V0UHJvcGVydHlOYW1lXVxuICA+KHByb3BlcnR5TmFtZTogV2lkZ2V0UHJvcGVydHlOYW1lKTogT2JzZXJ2YWJsZTxXaWRnZXRQcm9wZXJ0eVZhbHVlPiB7XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlID0gdGhpcy5kZWZhdWx0Q29uZmlndXJhdGlvbltwcm9wZXJ0eU5hbWVdO1xuICAgIGNvbnN0IGNvbmZpZ3VyYXRpb25WYWx1ZSQgPSB0aGlzLmNvbmZpZ3VyYXRpb24ucGlwZShcbiAgICAgIG1hcChjb25maWd1cmF0aW9uID0+IGNvbmZpZ3VyYXRpb25bcHJvcGVydHlOYW1lXSBhcyBXaWRnZXRQcm9wZXJ0eVZhbHVlIHwgdW5kZWZpbmVkKSxcbiAgICApO1xuICAgIGNvbnN0IG1vZGVsVmFsdWUkID0gdGhpcy5pdGVtTW9kZWxcbiAgICAgID8gdGhpcy5pdGVtTW9kZWwucHJvcGVydHkocHJvcGVydHlOYW1lIGFzIHN0cmluZywgZGVmYXVsdFZhbHVlKVxuICAgICAgOiBvZihkZWZhdWx0VmFsdWUpO1xuXG4gICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QoW2NvbmZpZ3VyYXRpb25WYWx1ZSQsIG1vZGVsVmFsdWUkXSkucGlwZShcbiAgICAgIG1hcCgoW2NvbmZpZ3VyYXRpb25WYWx1ZSwgbW9kZWxWYWx1ZV0pID0+IChjb25maWd1cmF0aW9uVmFsdWUgIT09IHVuZGVmaW5lZCA/IGNvbmZpZ3VyYXRpb25WYWx1ZSA6IG1vZGVsVmFsdWUpKSxcbiAgICApO1xuICB9XG59XG4iXX0=