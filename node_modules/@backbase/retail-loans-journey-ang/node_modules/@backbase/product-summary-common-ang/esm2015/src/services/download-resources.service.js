import { Inject, Injectable } from '@angular/core';
import { WINDOW } from '../model/providers';
import * as i0 from "@angular/core";
export class DownloadResourcesService {
    constructor(localWindow) {
        this.localWindow = localWindow;
    }
    downloadFile(name, type, data) {
        const fileData = new Blob([data], { type });
        if (this.isFileSaverAvailable()) {
            this.downloadViaFileSaver(name, fileData);
        }
        else {
            this.downloadViaLink(name, fileData);
        }
    }
    isFileSaverAvailable() {
        const { navigator } = this.localWindow;
        // @ts-ignore
        return navigator !== undefined && navigator.msSaveOrOpenBlob !== undefined;
    }
    downloadViaFileSaver(name, data) {
        const { navigator } = this.localWindow;
        // @ts-ignore
        navigator.msSaveOrOpenBlob(data, name);
    }
    downloadViaLink(name, data) {
        const { document, URL } = this.localWindow;
        const downloadLink = document.createElement('a');
        downloadLink.href = URL.createObjectURL(data);
        downloadLink.download = name;
        downloadLink.click();
        downloadLink.remove();
    }
}
DownloadResourcesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DownloadResourcesService, deps: [{ token: WINDOW }], target: i0.ɵɵFactoryTarget.Injectable });
DownloadResourcesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DownloadResourcesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DownloadResourcesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG93bmxvYWQtcmVzb3VyY2VzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3Byb2R1Y3Qtc3VtbWFyeS1jb21tb24tYW5nL3NyYy9zZXJ2aWNlcy9kb3dubG9hZC1yZXNvdXJjZXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsTUFBTSxFQUFlLE1BQU0sb0JBQW9CLENBQUM7O0FBR3pELE1BQU0sT0FBTyx3QkFBd0I7SUFDbkMsWUFBNkMsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7SUFBRyxDQUFDO0lBRXpFLFlBQVksQ0FBQyxJQUFZLEVBQUUsSUFBWSxFQUFFLElBQWM7UUFDckQsTUFBTSxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDNUMsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsRUFBRTtZQUMvQixJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQzNDO2FBQU07WUFDTCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztTQUN0QztJQUNILENBQUM7SUFFTyxvQkFBb0I7UUFDMUIsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDdkMsYUFBYTtRQUNiLE9BQU8sU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLENBQUMsZ0JBQWdCLEtBQUssU0FBUyxDQUFDO0lBQzdFLENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxJQUFZLEVBQUUsSUFBVTtRQUNuRCxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUN2QyxhQUFhO1FBQ2IsU0FBUyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRU8sZUFBZSxDQUFDLElBQVksRUFBRSxJQUFVO1FBQzlDLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUMzQyxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pELFlBQVksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QyxZQUFZLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUM3QixZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDckIsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3hCLENBQUM7O3NIQS9CVSx3QkFBd0Isa0JBQ2YsTUFBTTswSEFEZix3QkFBd0I7NEZBQXhCLHdCQUF3QjtrQkFEcEMsVUFBVTs7MEJBRUksTUFBTTsyQkFBQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBXSU5ET1csIExvY2FsV2luZG93IH0gZnJvbSAnLi4vbW9kZWwvcHJvdmlkZXJzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERvd25sb2FkUmVzb3VyY2VzU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoV0lORE9XKSBwcml2YXRlIHJlYWRvbmx5IGxvY2FsV2luZG93OiBMb2NhbFdpbmRvdykge31cblxuICBkb3dubG9hZEZpbGUobmFtZTogc3RyaW5nLCB0eXBlOiBzdHJpbmcsIGRhdGE6IEJsb2JQYXJ0KSB7XG4gICAgY29uc3QgZmlsZURhdGEgPSBuZXcgQmxvYihbZGF0YV0sIHsgdHlwZSB9KTtcbiAgICBpZiAodGhpcy5pc0ZpbGVTYXZlckF2YWlsYWJsZSgpKSB7XG4gICAgICB0aGlzLmRvd25sb2FkVmlhRmlsZVNhdmVyKG5hbWUsIGZpbGVEYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kb3dubG9hZFZpYUxpbmsobmFtZSwgZmlsZURhdGEpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaXNGaWxlU2F2ZXJBdmFpbGFibGUoKTogYm9vbGVhbiB7XG4gICAgY29uc3QgeyBuYXZpZ2F0b3IgfSA9IHRoaXMubG9jYWxXaW5kb3c7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiBuYXZpZ2F0b3IgIT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYiAhPT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcHJpdmF0ZSBkb3dubG9hZFZpYUZpbGVTYXZlcihuYW1lOiBzdHJpbmcsIGRhdGE6IEJsb2IpIHtcbiAgICBjb25zdCB7IG5hdmlnYXRvciB9ID0gdGhpcy5sb2NhbFdpbmRvdztcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgbmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IoZGF0YSwgbmFtZSk7XG4gIH1cblxuICBwcml2YXRlIGRvd25sb2FkVmlhTGluayhuYW1lOiBzdHJpbmcsIGRhdGE6IEJsb2IpIHtcbiAgICBjb25zdCB7IGRvY3VtZW50LCBVUkwgfSA9IHRoaXMubG9jYWxXaW5kb3c7XG4gICAgY29uc3QgZG93bmxvYWRMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGRvd25sb2FkTGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChkYXRhKTtcbiAgICBkb3dubG9hZExpbmsuZG93bmxvYWQgPSBuYW1lO1xuICAgIGRvd25sb2FkTGluay5jbGljaygpO1xuICAgIGRvd25sb2FkTGluay5yZW1vdmUoKTtcbiAgfVxufVxuIl19