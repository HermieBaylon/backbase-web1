import { Component, EventEmitter, Input, Output } from '@angular/core';
import { MaskableAttribute } from '@backbase/data-ang/arrangements';
import * as i0 from "@angular/core";
export class ProductSummaryAccountDetailsBaseComponent {
    constructor() {
        /**
         * List of maskable attributes. Holds states of the attributes.
         */
        this.maskableAttributes = [];
        /**
         * Event when a user clicked on the `unmask-attribute-button` button
         */
        this.unmaskAttribute = new EventEmitter();
        /**
         * Event when a user clicked on the `mask-attribute-button` button
         */
        this.maskAttribute = new EventEmitter();
        /**
         * All unmaskable attributes
         */
        this.maskableAttribute = MaskableAttribute;
        /**
         * Details info sections availability
         */
        this.infoAvailability = {};
    }
    /**
     * Product type data that this component displays.
     */
    set product(data) {
        this._product = data;
        this.infoAvailability = this.getProductInfoAvailability(data);
    }
    get product() {
        return this._product;
    }
    /**
     * Returns `true` if the given `attributeName` is masked
     *
     * @param attributeName
     */
    isMasked(attributeName) {
        const maskableAttribute = this.maskableAttributes.find(attribute => attribute.attributeName === attributeName);
        return (maskableAttribute === null || maskableAttribute === void 0 ? void 0 : maskableAttribute.masked) === undefined ? true : maskableAttribute === null || maskableAttribute === void 0 ? void 0 : maskableAttribute.masked;
    }
    /**
     * Event handler for the `click` event of the unmask buttons
     * Emits `MaskableAttribute` to the `unmaskAttribute` Output
     *
     * @param attributeName
     */
    onUnmaskAttribute(attributeName) {
        if (Object.values(MaskableAttribute).includes(attributeName)) {
            this.unmaskAttribute.emit(attributeName);
        }
    }
    /**
     * Event handler for the `click` event of the mask buttons
     * Emits `MaskableAttribute` to the `maskAttribute` Output
     *
     * @param attributeName
     */
    onMaskAttribute(attributeName) {
        if (Object.values(MaskableAttribute).includes(attributeName)) {
            this.maskAttribute.emit(attributeName);
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars,no-unused-vars
    getProductInfoAvailability(product) {
        return {};
    }
}
ProductSummaryAccountDetailsBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ProductSummaryAccountDetailsBaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductSummaryAccountDetailsBaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ProductSummaryAccountDetailsBaseComponent, selector: "ng-component", inputs: { product: "product", maskableAttributes: "maskableAttributes" }, outputs: { unmaskAttribute: "unmaskAttribute", maskAttribute: "maskAttribute" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ProductSummaryAccountDetailsBaseComponent, decorators: [{
            type: Component,
            args: [{ template: '' }]
        }], propDecorators: { product: [{
                type: Input
            }], maskableAttributes: [{
                type: Input
            }], unmaskAttribute: [{
                type: Output
            }], maskAttribute: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1zdW1tYXJ5LWFjY291bnQtZGV0YWlscy1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvcHJvZHVjdC1zdW1tYXJ5LWNvbW1vbi1hbmcvc3JjL2NsYXNzZXMvcHJvZHVjdC1zdW1tYXJ5LWFjY291bnQtZGV0YWlscy1iYXNlL3Byb2R1Y3Qtc3VtbWFyeS1hY2NvdW50LWRldGFpbHMtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQzs7QUFRcEUsTUFBTSxPQUFPLHlDQUF5QztJQUR0RDtRQWFFOztXQUVHO1FBQ00sdUJBQWtCLEdBQStCLEVBQUUsQ0FBQztRQUM3RDs7V0FFRztRQUNPLG9CQUFlLEdBQW9DLElBQUksWUFBWSxFQUFxQixDQUFDO1FBQ25HOztXQUVHO1FBQ08sa0JBQWEsR0FBb0MsSUFBSSxZQUFZLEVBQXFCLENBQUM7UUFFakc7O1dBRUc7UUFDTSxzQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztRQUMvQzs7V0FFRztRQUNILHFCQUFnQixHQUErQixFQUFFLENBQUM7S0FzQ25EO0lBckVDOztPQUVHO0lBQ0gsSUFBYSxPQUFPLENBQUMsSUFBd0M7UUFDM0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBQ0QsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUF3QkQ7Ozs7T0FJRztJQUNILFFBQVEsQ0FBQyxhQUFnQztRQUN2QyxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsYUFBYSxLQUFLLGFBQWEsQ0FBQyxDQUFDO1FBQy9HLE9BQU8sQ0FBQSxpQkFBaUIsYUFBakIsaUJBQWlCLHVCQUFqQixpQkFBaUIsQ0FBRSxNQUFNLE1BQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixhQUFqQixpQkFBaUIsdUJBQWpCLGlCQUFpQixDQUFFLE1BQU0sQ0FBQztJQUNwRixDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFDSCxpQkFBaUIsQ0FBQyxhQUFnQztRQUNoRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDNUQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDMUM7SUFDSCxDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFDSCxlQUFlLENBQUMsYUFBZ0M7UUFDOUMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQzVELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQztJQUVELDRFQUE0RTtJQUNsRSwwQkFBMEIsQ0FBQyxPQUEyQztRQUM5RSxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7O3VJQXJFVSx5Q0FBeUM7MkhBQXpDLHlDQUF5QywrTUFEL0IsRUFBRTs0RkFDWix5Q0FBeUM7a0JBRHJELFNBQVM7bUJBQUMsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFOzhCQUtaLE9BQU87c0JBQW5CLEtBQUs7Z0JBV0csa0JBQWtCO3NCQUExQixLQUFLO2dCQUlJLGVBQWU7c0JBQXhCLE1BQU07Z0JBSUcsYUFBYTtzQkFBdEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXNrYWJsZUF0dHJpYnV0ZSB9IGZyb20gJ0BiYWNrYmFzZS9kYXRhLWFuZy9hcnJhbmdlbWVudHMnO1xuaW1wb3J0IHtcbiAgUHJvZHVjdERldGFpbHNBdmFpbGFiaWxpdHksXG4gIFByb2R1Y3RNYXNrYWJsZUF0dHJpYnV0ZSxcbiAgQWNjb3VudEFycmFuZ2VtZW50SXRlbSxcbn0gZnJvbSAnLi4vLi4vbW9kZWwvcHJvZHVjdC1zdW1tYXJ5LXR5cGVzJztcblxuQENvbXBvbmVudCh7IHRlbXBsYXRlOiAnJyB9KVxuZXhwb3J0IGNsYXNzIFByb2R1Y3RTdW1tYXJ5QWNjb3VudERldGFpbHNCYXNlQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIFByb2R1Y3QgdHlwZSBkYXRhIHRoYXQgdGhpcyBjb21wb25lbnQgZGlzcGxheXMuXG4gICAqL1xuICBASW5wdXQoKSBzZXQgcHJvZHVjdChkYXRhOiBBY2NvdW50QXJyYW5nZW1lbnRJdGVtIHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5fcHJvZHVjdCA9IGRhdGE7XG4gICAgdGhpcy5pbmZvQXZhaWxhYmlsaXR5ID0gdGhpcy5nZXRQcm9kdWN0SW5mb0F2YWlsYWJpbGl0eShkYXRhKTtcbiAgfVxuICBnZXQgcHJvZHVjdCgpOiBBY2NvdW50QXJyYW5nZW1lbnRJdGVtIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvZHVjdDtcbiAgfVxuICBwcml2YXRlIF9wcm9kdWN0OiBBY2NvdW50QXJyYW5nZW1lbnRJdGVtIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogTGlzdCBvZiBtYXNrYWJsZSBhdHRyaWJ1dGVzLiBIb2xkcyBzdGF0ZXMgb2YgdGhlIGF0dHJpYnV0ZXMuXG4gICAqL1xuICBASW5wdXQoKSBtYXNrYWJsZUF0dHJpYnV0ZXM6IFByb2R1Y3RNYXNrYWJsZUF0dHJpYnV0ZVtdID0gW107XG4gIC8qKlxuICAgKiBFdmVudCB3aGVuIGEgdXNlciBjbGlja2VkIG9uIHRoZSBgdW5tYXNrLWF0dHJpYnV0ZS1idXR0b25gIGJ1dHRvblxuICAgKi9cbiAgQE91dHB1dCgpIHVubWFza0F0dHJpYnV0ZTogRXZlbnRFbWl0dGVyPE1hc2thYmxlQXR0cmlidXRlPiA9IG5ldyBFdmVudEVtaXR0ZXI8TWFza2FibGVBdHRyaWJ1dGU+KCk7XG4gIC8qKlxuICAgKiBFdmVudCB3aGVuIGEgdXNlciBjbGlja2VkIG9uIHRoZSBgbWFzay1hdHRyaWJ1dGUtYnV0dG9uYCBidXR0b25cbiAgICovXG4gIEBPdXRwdXQoKSBtYXNrQXR0cmlidXRlOiBFdmVudEVtaXR0ZXI8TWFza2FibGVBdHRyaWJ1dGU+ID0gbmV3IEV2ZW50RW1pdHRlcjxNYXNrYWJsZUF0dHJpYnV0ZT4oKTtcblxuICAvKipcbiAgICogQWxsIHVubWFza2FibGUgYXR0cmlidXRlc1xuICAgKi9cbiAgcmVhZG9ubHkgbWFza2FibGVBdHRyaWJ1dGUgPSBNYXNrYWJsZUF0dHJpYnV0ZTtcbiAgLyoqXG4gICAqIERldGFpbHMgaW5mbyBzZWN0aW9ucyBhdmFpbGFiaWxpdHlcbiAgICovXG4gIGluZm9BdmFpbGFiaWxpdHk6IFByb2R1Y3REZXRhaWxzQXZhaWxhYmlsaXR5ID0ge307XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiBgYXR0cmlidXRlTmFtZWAgaXMgbWFza2VkXG4gICAqXG4gICAqIEBwYXJhbSBhdHRyaWJ1dGVOYW1lXG4gICAqL1xuICBpc01hc2tlZChhdHRyaWJ1dGVOYW1lOiBNYXNrYWJsZUF0dHJpYnV0ZSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG1hc2thYmxlQXR0cmlidXRlID0gdGhpcy5tYXNrYWJsZUF0dHJpYnV0ZXMuZmluZChhdHRyaWJ1dGUgPT4gYXR0cmlidXRlLmF0dHJpYnV0ZU5hbWUgPT09IGF0dHJpYnV0ZU5hbWUpO1xuICAgIHJldHVybiBtYXNrYWJsZUF0dHJpYnV0ZT8ubWFza2VkID09PSB1bmRlZmluZWQgPyB0cnVlIDogbWFza2FibGVBdHRyaWJ1dGU/Lm1hc2tlZDtcbiAgfVxuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciBmb3IgdGhlIGBjbGlja2AgZXZlbnQgb2YgdGhlIHVubWFzayBidXR0b25zXG4gICAqIEVtaXRzIGBNYXNrYWJsZUF0dHJpYnV0ZWAgdG8gdGhlIGB1bm1hc2tBdHRyaWJ1dGVgIE91dHB1dFxuICAgKlxuICAgKiBAcGFyYW0gYXR0cmlidXRlTmFtZVxuICAgKi9cbiAgb25Vbm1hc2tBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZTogTWFza2FibGVBdHRyaWJ1dGUpIHtcbiAgICBpZiAoT2JqZWN0LnZhbHVlcyhNYXNrYWJsZUF0dHJpYnV0ZSkuaW5jbHVkZXMoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgIHRoaXMudW5tYXNrQXR0cmlidXRlLmVtaXQoYXR0cmlidXRlTmFtZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciB0aGUgYGNsaWNrYCBldmVudCBvZiB0aGUgbWFzayBidXR0b25zXG4gICAqIEVtaXRzIGBNYXNrYWJsZUF0dHJpYnV0ZWAgdG8gdGhlIGBtYXNrQXR0cmlidXRlYCBPdXRwdXRcbiAgICpcbiAgICogQHBhcmFtIGF0dHJpYnV0ZU5hbWVcbiAgICovXG4gIG9uTWFza0F0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lOiBNYXNrYWJsZUF0dHJpYnV0ZSkge1xuICAgIGlmIChPYmplY3QudmFsdWVzKE1hc2thYmxlQXR0cmlidXRlKS5pbmNsdWRlcyhhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgdGhpcy5tYXNrQXR0cmlidXRlLmVtaXQoYXR0cmlidXRlTmFtZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyxuby11bnVzZWQtdmFyc1xuICBwcm90ZWN0ZWQgZ2V0UHJvZHVjdEluZm9BdmFpbGFiaWxpdHkocHJvZHVjdDogQWNjb3VudEFycmFuZ2VtZW50SXRlbSB8IHVuZGVmaW5lZCk6IFByb2R1Y3REZXRhaWxzQXZhaWxhYmlsaXR5IHtcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbiJdfQ==