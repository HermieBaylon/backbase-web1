import { publishReplay, refCount, switchMap } from 'rxjs/operators';
import { combineLatest } from 'rxjs';
import { map, pluck } from 'rxjs/operators';
import { CardProductKindName, DefaultProductKindNameList } from '../model/constants';
export const toKebabCase = (accountType = '') => accountType ? accountType.trim().toLowerCase().split(' ').join('-') : '';
export const isCardNumber = (account) => Boolean(account.productKindName && CardProductKindName.includes(account.productKindName.toLowerCase()));
export const modelItemToBoolean = (value) => {
    if (typeof value === 'boolean') {
        return value;
    }
    return value === 'true';
};
export const isFavorite = (account) => {
    const accountPreferencesFavoriteValue = account.userPreferences && account.userPreferences.favorite;
    const accountFavoriteValue = 'favorite' in account ? account.favorite : undefined;
    return accountPreferencesFavoriteValue !== null && accountPreferencesFavoriteValue !== void 0 ? accountPreferencesFavoriteValue : accountFavoriteValue;
};
export const isProductVisible = (product) => {
    if (product.userPreferences && product.userPreferences.visible !== undefined) {
        return product.userPreferences.visible;
    }
    else if (product.visible !== undefined) {
        return product.visible;
    }
    return true;
};
export const isFunction = (param) => typeof param === 'function';
export const findBy = (collection, key, value) => collection.find(item => item && item[key] === value);
export const findByName = (collection, name) => findBy(collection, 'name', name);
export const getAccountAlias = (account) => {
    if (account.userPreferences) {
        return account.userPreferences.alias ? account.userPreferences.alias : account.bankAlias || account.name;
    }
    else {
        return account.bankAlias || account.name || ''; // todo: replace with `??` typesScript is upgraded to 3.7.0
    }
};
export const getProductKindIconName = (productKindName) => {
    let iconName = toKebabCase(productKindName);
    const isDefaultProductKindName = Object.values(DefaultProductKindNameList).some(name => iconName === name);
    if (!isDefaultProductKindName) {
        iconName = 'account';
    }
    return `${iconName}s`;
};
/**
 * Gets a valid product number type for a given product
 *
 * @param product
 *
 * for CreditCard/DebitCard:
 * - returns `number` if exists
 * - else `IBAN` if exists
 * - otherwise `BBAN`
 * for other products:
 * - returns `IBAN` if exists
 * - else `BBAN` if exists
 * - otherwise `number`
 */
export const getProductNumberType = (product) => {
    const isCardFormat = isCardNumber(product);
    if (isCardFormat && 'number' in product) {
        return 'cardNumber';
    }
    else if ('IBAN' in product) {
        return 'iban';
    }
    else if ('BBAN' in product || isCardFormat) {
        return 'bban';
    }
    else {
        return 'cardNumber';
    }
};
export const processErrorMessages = (messages) => messages ? messages.join(' ') : undefined;
/**
 * Sets the passed unmasked attribute to the item
 *
 * @param item
 * @param attributeName
 * @param attributeValue
 */
// eslint-disable-next-line @typescript-eslint/ban-types
export const setAttribute = (item, attributeName, attributeValue) => (Object.assign(Object.assign({}, (item ? item : {})), (attributeName ? { [attributeName]: attributeValue } : {})));
/**
 * Verifies if values is defined (not null and not undefined)
 *
 * @param value
 */
// eslint-disable-next-line no-null/no-null
export const isDefined = (value) => value !== null && value !== undefined;
/**
 * Returns configuration property based on the priority
 */
export const filterInputParameters = (input, prop) => combineLatest([input, prop]).pipe(map(([inputVal, propVal]) => (inputVal !== undefined ? inputVal : propVal)));
/**
 * Caches the request (shares between subscribers)
 *
 * @param request
 */
export const cacheRequest = (request) => (source) => source.pipe(switchMap(request), publishReplay(1), refCount());
/**
 * Returns route parameter
 * takes parameter from component route if parameter exists, otherwise looks for parameter in parent routes
 *
 * @param route
 * @param param
 */
export const getRouteParameter = (route, param) => {
    const routeParam = route.paramMap.pipe(pluck('params', param));
    const allParams = route.parent ? [routeParam, getRouteParameter(route.parent, param)] : [routeParam];
    return combineLatest(allParams).pipe(map(params => params[0] || params[1]), map(value => value !== null && value !== void 0 ? value : ''));
};
/**
 * Returns true if product has external info (external logo, alias, etc.)
 *
 * @param product
 */
export const hasExternalInfo = (product) => product.financialInstitutionId !== undefined;
//# sourceMappingURL=data:application/json;base64,