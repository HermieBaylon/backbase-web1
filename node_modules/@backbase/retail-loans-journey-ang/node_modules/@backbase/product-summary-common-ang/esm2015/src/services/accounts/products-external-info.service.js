import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { map, pluck } from 'rxjs/operators';
import { hasExternalInfo } from '../../helpers/helpers';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/financial-institution-manager";
/**
 * A service for getting external info for products
 */
export class ProductsExternalInfoService {
    constructor(financialInstitutionsHttpService) {
        this.financialInstitutionsHttpService = financialInstitutionsHttpService;
    }
    getProductsWithExternalInfo(products) {
        const productsList = Array.isArray(products) ? products : [products];
        const financialInstitutionIds = this.getAssignedFinancialInstitutionIds(productsList);
        return financialInstitutionIds.length
            ? this.getFinancialInstitutions(financialInstitutionIds).pipe(map(institutions => Array.isArray(products)
                ? productsList.map(product => this.addExternalInfoToProduct(product, institutions))
                : this.addExternalInfoToProduct(products, institutions)))
            : of(products);
    }
    getAssignedFinancialInstitutionIds(items) {
        const itemsWithExternalInfo = items.filter(hasExternalInfo);
        const financialInstitutionIds = itemsWithExternalInfo.map(item => item.financialInstitutionId);
        return financialInstitutionIds.filter((item, index) => financialInstitutionIds.indexOf(item, index + 1) === -1);
    }
    addExternalInfoToProduct(product, institutions) {
        return Object.assign(Object.assign({}, product), this.getExternalInfo(product, institutions));
    }
    getExternalInfo(product, institutions) {
        const isExternalInfoAvailable = hasExternalInfo(product);
        return isExternalInfoAvailable
            ? { financialInstitution: institutions.find(institution => institution.id === product.financialInstitutionId) }
            : {};
    }
    getFinancialInstitutions(ids) {
        return this.financialInstitutionsHttpService.getFinancialInstitutions({ ids }).pipe(pluck('financialInstitutions'));
    }
}
ProductsExternalInfoService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ProductsExternalInfoService, deps: [{ token: i1.FinancialInstitutionManagerClientHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
ProductsExternalInfoService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ProductsExternalInfoService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ProductsExternalInfoService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.FinancialInstitutionManagerClientHttpService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdHMtZXh0ZXJuYWwtaW5mby5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9wcm9kdWN0LXN1bW1hcnktY29tbW9uLWFuZy9zcmMvc2VydmljZXMvYWNjb3VudHMvcHJvZHVjdHMtZXh0ZXJuYWwtaW5mby5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTTVDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBRXhEOztHQUVHO0FBRUgsTUFBTSxPQUFPLDJCQUEyQjtJQUN0QyxZQUE2QixnQ0FBOEU7UUFBOUUscUNBQWdDLEdBQWhDLGdDQUFnQyxDQUE4QztJQUFHLENBQUM7SUFRL0csMkJBQTJCLENBQThDLFFBQWlCO1FBQ3hGLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNyRSxNQUFNLHVCQUF1QixHQUFHLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUV0RixPQUFPLHVCQUF1QixDQUFDLE1BQU07WUFDbkMsQ0FBQyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLElBQUksQ0FDekQsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQ2pCLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO2dCQUNyQixDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7Z0JBQ25GLENBQUMsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUMxRCxDQUNGO1lBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRU8sa0NBQWtDLENBQThDLEtBQVU7UUFDaEcsTUFBTSxxQkFBcUIsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzVELE1BQU0sdUJBQXVCLEdBQUcscUJBQXFCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFhLENBQUM7UUFDM0csT0FBTyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xILENBQUM7SUFFTyx3QkFBd0IsQ0FDOUIsT0FBVSxFQUNWLFlBQW9DO1FBRXBDLHVDQUFZLE9BQU8sR0FBSyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsRUFBRztJQUN4RSxDQUFDO0lBRU8sZUFBZSxDQUNyQixPQUFVLEVBQ1YsWUFBb0M7UUFFcEMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekQsT0FBTyx1QkFBdUI7WUFDNUIsQ0FBQyxDQUFDLEVBQUUsb0JBQW9CLEVBQUUsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEtBQUssT0FBTyxDQUFDLHNCQUFzQixDQUFDLEVBQUU7WUFDL0csQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNULENBQUM7SUFFTyx3QkFBd0IsQ0FBQyxHQUFhO1FBQzVDLE9BQU8sSUFBSSxDQUFDLGdDQUFnQyxDQUFDLHdCQUF3QixDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztJQUN0SCxDQUFDOzt5SEFqRFUsMkJBQTJCOzZIQUEzQiwyQkFBMkI7NEZBQTNCLDJCQUEyQjtrQkFEdkMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIHBsdWNrIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtcbiAgRmluYW5jaWFsSW5zdGl0dXRpb25NYW5hZ2VyQ2xpZW50SHR0cFNlcnZpY2UsXG4gIEZpbmFuY2lhbEluc3RpdHV0aW9uLFxufSBmcm9tICdAYmFja2Jhc2UvZGF0YS1hbmcvZmluYW5jaWFsLWluc3RpdHV0aW9uLW1hbmFnZXInO1xuaW1wb3J0IHsgQXJyYW5nZW1lbnQsIEV4dGVybmFsUHJvZHVjdEluZm8gfSBmcm9tICcuLi8uLi9tb2RlbC9wcm9kdWN0LXN1bW1hcnktdHlwZXMnO1xuaW1wb3J0IHsgaGFzRXh0ZXJuYWxJbmZvIH0gZnJvbSAnLi4vLi4vaGVscGVycy9oZWxwZXJzJztcblxuLyoqXG4gKiBBIHNlcnZpY2UgZm9yIGdldHRpbmcgZXh0ZXJuYWwgaW5mbyBmb3IgcHJvZHVjdHNcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFByb2R1Y3RzRXh0ZXJuYWxJbmZvU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZmluYW5jaWFsSW5zdGl0dXRpb25zSHR0cFNlcnZpY2U6IEZpbmFuY2lhbEluc3RpdHV0aW9uTWFuYWdlckNsaWVudEh0dHBTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIGV4dGVybmFsIGluZm8gZm9yIHByb2R1Y3RzIG9yIGEgc2luZ2xlIHByb2R1Y3QsXG4gICAqIHJldHVybnMgcHJvZHVjdHMgb3IgYSBzaW5nbGUgcHJvZHVjdCB3aXRoIGV4dGVybmFsIGluZm8gaW5jbHVkZWRcbiAgICovXG4gIGdldFByb2R1Y3RzV2l0aEV4dGVybmFsSW5mbzxUIGV4dGVuZHMgRXh0ZXJuYWxQcm9kdWN0SW5mbyA9IEFycmFuZ2VtZW50Pihwcm9kdWN0czogVCk6IE9ic2VydmFibGU8VD47XG4gIGdldFByb2R1Y3RzV2l0aEV4dGVybmFsSW5mbzxUIGV4dGVuZHMgRXh0ZXJuYWxQcm9kdWN0SW5mbyA9IEFycmFuZ2VtZW50Pihwcm9kdWN0czogVFtdKTogT2JzZXJ2YWJsZTxUW10+O1xuICBnZXRQcm9kdWN0c1dpdGhFeHRlcm5hbEluZm88VCBleHRlbmRzIEV4dGVybmFsUHJvZHVjdEluZm8gPSBBcnJhbmdlbWVudD4ocHJvZHVjdHM6IFQgfCBUW10pOiBPYnNlcnZhYmxlPFQgfCBUW10+IHtcbiAgICBjb25zdCBwcm9kdWN0c0xpc3QgPSBBcnJheS5pc0FycmF5KHByb2R1Y3RzKSA/IHByb2R1Y3RzIDogW3Byb2R1Y3RzXTtcbiAgICBjb25zdCBmaW5hbmNpYWxJbnN0aXR1dGlvbklkcyA9IHRoaXMuZ2V0QXNzaWduZWRGaW5hbmNpYWxJbnN0aXR1dGlvbklkcyhwcm9kdWN0c0xpc3QpO1xuXG4gICAgcmV0dXJuIGZpbmFuY2lhbEluc3RpdHV0aW9uSWRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmdldEZpbmFuY2lhbEluc3RpdHV0aW9ucyhmaW5hbmNpYWxJbnN0aXR1dGlvbklkcykucGlwZShcbiAgICAgICAgICBtYXAoaW5zdGl0dXRpb25zID0+XG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHByb2R1Y3RzKVxuICAgICAgICAgICAgICA/IHByb2R1Y3RzTGlzdC5tYXAocHJvZHVjdCA9PiB0aGlzLmFkZEV4dGVybmFsSW5mb1RvUHJvZHVjdChwcm9kdWN0LCBpbnN0aXR1dGlvbnMpKVxuICAgICAgICAgICAgICA6IHRoaXMuYWRkRXh0ZXJuYWxJbmZvVG9Qcm9kdWN0KHByb2R1Y3RzLCBpbnN0aXR1dGlvbnMpLFxuICAgICAgICAgICksXG4gICAgICAgIClcbiAgICAgIDogb2YocHJvZHVjdHMpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRBc3NpZ25lZEZpbmFuY2lhbEluc3RpdHV0aW9uSWRzPFQgZXh0ZW5kcyBFeHRlcm5hbFByb2R1Y3RJbmZvID0gQXJyYW5nZW1lbnQ+KGl0ZW1zOiBUW10pOiBudW1iZXJbXSB7XG4gICAgY29uc3QgaXRlbXNXaXRoRXh0ZXJuYWxJbmZvID0gaXRlbXMuZmlsdGVyKGhhc0V4dGVybmFsSW5mbyk7XG4gICAgY29uc3QgZmluYW5jaWFsSW5zdGl0dXRpb25JZHMgPSBpdGVtc1dpdGhFeHRlcm5hbEluZm8ubWFwKGl0ZW0gPT4gaXRlbS5maW5hbmNpYWxJbnN0aXR1dGlvbklkKSBhcyBudW1iZXJbXTtcbiAgICByZXR1cm4gZmluYW5jaWFsSW5zdGl0dXRpb25JZHMuZmlsdGVyKChpdGVtLCBpbmRleCkgPT4gZmluYW5jaWFsSW5zdGl0dXRpb25JZHMuaW5kZXhPZihpdGVtLCBpbmRleCArIDEpID09PSAtMSk7XG4gIH1cblxuICBwcml2YXRlIGFkZEV4dGVybmFsSW5mb1RvUHJvZHVjdDxUIGV4dGVuZHMgRXh0ZXJuYWxQcm9kdWN0SW5mbyA9IEFycmFuZ2VtZW50PihcbiAgICBwcm9kdWN0OiBULFxuICAgIGluc3RpdHV0aW9uczogRmluYW5jaWFsSW5zdGl0dXRpb25bXSxcbiAgKTogVCB7XG4gICAgcmV0dXJuIHsgLi4ucHJvZHVjdCwgLi4udGhpcy5nZXRFeHRlcm5hbEluZm8ocHJvZHVjdCwgaW5zdGl0dXRpb25zKSB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRFeHRlcm5hbEluZm88VCBleHRlbmRzIEV4dGVybmFsUHJvZHVjdEluZm8gPSBBcnJhbmdlbWVudD4oXG4gICAgcHJvZHVjdDogVCxcbiAgICBpbnN0aXR1dGlvbnM6IEZpbmFuY2lhbEluc3RpdHV0aW9uW10sXG4gICk6IEV4dGVybmFsUHJvZHVjdEluZm8ge1xuICAgIGNvbnN0IGlzRXh0ZXJuYWxJbmZvQXZhaWxhYmxlID0gaGFzRXh0ZXJuYWxJbmZvKHByb2R1Y3QpO1xuICAgIHJldHVybiBpc0V4dGVybmFsSW5mb0F2YWlsYWJsZVxuICAgICAgPyB7IGZpbmFuY2lhbEluc3RpdHV0aW9uOiBpbnN0aXR1dGlvbnMuZmluZChpbnN0aXR1dGlvbiA9PiBpbnN0aXR1dGlvbi5pZCA9PT0gcHJvZHVjdC5maW5hbmNpYWxJbnN0aXR1dGlvbklkKSB9XG4gICAgICA6IHt9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRGaW5hbmNpYWxJbnN0aXR1dGlvbnMoaWRzOiBudW1iZXJbXSk6IE9ic2VydmFibGU8RmluYW5jaWFsSW5zdGl0dXRpb25bXT4ge1xuICAgIHJldHVybiB0aGlzLmZpbmFuY2lhbEluc3RpdHV0aW9uc0h0dHBTZXJ2aWNlLmdldEZpbmFuY2lhbEluc3RpdHV0aW9ucyh7IGlkcyB9KS5waXBlKHBsdWNrKCdmaW5hbmNpYWxJbnN0aXR1dGlvbnMnKSk7XG4gIH1cbn1cbiJdfQ==