import { Injectable } from '@angular/core';
import { BehaviorSubject, of, ReplaySubject } from 'rxjs';
import { catchError, distinctUntilChanged, filter, map, scan, switchMap, tap } from 'rxjs/operators';
import { BalanceHistoryExportFormat, HttpResponseType, PaginationType, } from '../../model/types';
import { defaultArrangementName } from '../../model/constants';
import { splitDataByTrend } from './colors-helper';
import { parseBalanceHistoryError,
/* eslint-enable */
 } from '../../errors/balance-history-service-errors';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/arrangements";
export class BalanceHistoryCommonService {
    constructor(accountDataService) {
        this.accountDataService = accountDataService;
        this.reportDefaultFileName = {
            [BalanceHistoryExportFormat.CSV]: 'balance-history.csv',
            [BalanceHistoryExportFormat.JSON]: 'balance-history.json',
        };
        this.requestObjectSeries = new ReplaySubject(1);
        this.requestObjectPaginated = new ReplaySubject(1);
        this.errorSeries = new BehaviorSubject(undefined);
        this.errorPaginated = new BehaviorSubject(undefined);
        this.loadingPaginated = new BehaviorSubject(true);
        this.loadingSeries = new BehaviorSubject(true);
        this.balanceHistorySeries = this.requestObjectSeries.pipe(distinctUntilChanged(), filter(param => !!param.arrangementIds), tap(() => this.loadingSeries.next(true)), tap(() => this.errorSeries.next(undefined)), switchMap(res => this.getBalanceHistorySeries(res).pipe(catchError((errorSeries) => {
            this.errorSeries.next(errorSeries);
            return of(undefined);
        }))), tap(() => this.loadingSeries.next(false)));
        this.balanceHistoryPaginated = this.requestObjectPaginated.pipe(distinctUntilChanged(), filter(param => !!param.arrangementId), tap(() => this.loadingPaginated.next(true)), tap(() => this.errorPaginated.next(undefined)), switchMap(res => this.getBalanceHistoryPaginated(res).pipe(catchError((errorPaginated) => {
            this.errorPaginated.next(errorPaginated);
            return of({
                count: 0,
                items: [],
                params: res,
            });
        }))), scan((acc, curr) => ({
            count: curr.count,
            items: this.responsesMerge(acc, curr),
            params: curr.params,
        })), tap(() => this.loadingPaginated.next(false)));
    }
    getBalanceHistorySeries(request) {
        const parameters = this.getBalanceHistoryRequestParameters(request);
        return this.accountDataService.getBalanceHistory(parameters).pipe(catchError((error) => {
            throw parseBalanceHistoryError(error);
        }));
    }
    getBalanceHistoryPaginated(request) {
        const paginationType = request.params ? request.params.paginationType || '' : '';
        const from = request.params ? request.params.from || 0 : 0;
        const parameters = this.getBalanceHistoryForArrangementRequestParameters(request);
        return this.accountDataService.getBalanceHistoryForArrangement(parameters, HttpResponseType.RESPONSE).pipe(map((res) => this.mapResponseWithCount(res, { from, paginationType })), catchError((error) => {
            throw parseBalanceHistoryError(error);
        }));
    }
    loadBalanceHistorySeries(requestObjectSeries) {
        requestObjectSeries.subscribe(this.requestObjectSeries);
    }
    loadBalanceHistoryPaginated(requestObjectPaginated) {
        requestObjectPaginated.subscribe(this.requestObjectPaginated);
    }
    /**
     * Returns URL for fetching balance history data
     *
     * @param format
     * @param exportParameters
     */
    exportBalanceHistory(format, exportParameters) {
        const parameters = this.getBalanceHistoryRequestParameters(exportParameters, format);
        return this.accountDataService.getBalanceHistoryUrl(parameters);
    }
    /**
     * Fetches balance history data in one of the available formats
     *
     * @param format
     * @param exportParameters
     */
    getBalanceHistory(format, exportParameters) {
        const parameters = this.getBalanceHistoryRequestParameters(exportParameters, format);
        const options = { httpHeaderAccept: format };
        return this.accountDataService.getBalanceHistory(parameters, HttpResponseType.RESPONSE, false, options).pipe(map(({ headers, body }) => {
            const defaultFileName = this.reportDefaultFileName[format];
            const fileNameInHeaders = this.getFileNameFromHeaders(headers);
            return { name: fileNameInHeaders || defaultFileName, content: body };
        }));
    }
    responsesMerge(acc, current) {
        if (acc &&
            acc.items &&
            current &&
            current.items &&
            acc.params.paginationType === PaginationType.LOAD_MORE &&
            current.params.from !== 0) {
            return [...acc.items, ...current.items];
        }
        return current.items;
    }
    processBalanceHistory(balanceHistory) {
        const [balanceHistoryItem] = balanceHistory.items;
        const defaultSeries = {
            name: defaultArrangementName,
            series: balanceHistoryItem.balanceHistory.map(({ dateTo, value, valuePtc }) => ({
                name: new Date(dateTo),
                value: (value ? value.balance : valuePtc),
            })),
        };
        return defaultSeries ? splitDataByTrend(defaultSeries.series) : [];
    }
    mapResponseWithCount(response, { from, paginationType }) {
        // eslint-disable-next-line no-null/no-null
        if (response.body === null) {
            throw new Error();
        }
        const headerCount = response.headers ? response.headers.get('x-total-count') : undefined;
        const counter = headerCount ? parseInt(headerCount, 10) : response.body.length || 0;
        return {
            count: counter,
            items: response.body,
            params: { from, paginationType },
        };
    }
    getBalanceHistoryRequestParameters({ arrangementIds, params }, requestFormat) {
        const format = requestFormat !== null && requestFormat !== void 0 ? requestFormat : params.format;
        return Object.assign({ arrangementIds }, this.toRequestParameters(Object.assign(Object.assign({}, params), { format })));
    }
    getBalanceHistoryForArrangementRequestParameters({ arrangementId, params, }) {
        const format = undefined;
        return Object.assign({ arrangementId }, this.toRequestParameters(Object.assign(Object.assign({}, params), { format })));
    }
    toRequestParameters(params) {
        const requestParameters = Object.assign(Object.assign({}, params), { timePeriod: params.timePeriod });
        delete requestParameters.paginationType;
        if (!requestParameters.format) {
            delete requestParameters.format;
        }
        if (requestParameters.timePeriod) {
            delete requestParameters.dateFrom;
            delete requestParameters.dateTo;
        }
        else {
            delete requestParameters.timePeriod;
        }
        return requestParameters;
    }
    getFileNameFromHeaders(headers) {
        const contentDisposition = (headers && headers.get('content-disposition')) || '';
        const contentDispositionWithoutQuotes = contentDisposition.replace(/['"]*/g, '');
        return (contentDispositionWithoutQuotes.match(/filename[^;=\n]*=([^;\n]*)/) || [])[1];
    }
}
BalanceHistoryCommonService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BalanceHistoryCommonService, deps: [{ token: i1.AccountsHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
BalanceHistoryCommonService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BalanceHistoryCommonService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BalanceHistoryCommonService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.AccountsHttpService }]; } });
//# sourceMappingURL=data:application/json;base64,