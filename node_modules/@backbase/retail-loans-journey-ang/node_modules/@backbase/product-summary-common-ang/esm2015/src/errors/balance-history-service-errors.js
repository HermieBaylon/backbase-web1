export class BalanceHistoryNotFound {
    constructor(response) {
        this.response = response;
        this.kind = 'BalanceHistoryNotFound';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
export class BalanceHistoryBadRequest {
    constructor(response) {
        this.response = response;
        this.kind = 'BalanceHistoryBadRequest';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
export class BalanceHistoryAccessDenied {
    constructor(response) {
        this.response = response;
        this.kind = 'BalanceHistoryAccessDenied';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
export class BalanceHistoryUnknownError {
    constructor(response) {
        this.response = response;
        this.kind = 'BalanceHistoryUnknownError';
        this.messages = [response.message];
    }
}
export class BalanceHistoryConnectivityError {
    constructor(response) {
        this.response = response;
        this.kind = 'BalanceHistoryConnectivityError';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
export const parseBalanceHistoryError = (error) => {
    if (error.error instanceof ErrorEvent) {
        return new BalanceHistoryUnknownError(error);
    }
    else {
        switch (error.status) {
            case 0:
                return new BalanceHistoryConnectivityError(error);
            case 401:
                return new BalanceHistoryAccessDenied(error);
            case 403:
                return new BalanceHistoryAccessDenied(error);
            case 400:
                return new BalanceHistoryBadRequest(error);
            case 404:
                return new BalanceHistoryNotFound(error);
            default:
                return new BalanceHistoryUnknownError(error);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFsYW5jZS1oaXN0b3J5LXNlcnZpY2UtZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9wcm9kdWN0LXN1bW1hcnktY29tbW9uLWFuZy9zcmMvZXJyb3JzL2JhbGFuY2UtaGlzdG9yeS1zZXJ2aWNlLWVycm9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLE9BQU8sc0JBQXNCO0lBR2pDLFlBQXFCLFFBQTJCO1FBQTNCLGFBQVEsR0FBUixRQUFRLENBQW1CO1FBRGhELFNBQUksR0FBNkIsd0JBQXdCLENBQUM7UUFFeEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkYsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLHdCQUF3QjtJQUduQyxZQUFxQixRQUEyQjtRQUEzQixhQUFRLEdBQVIsUUFBUSxDQUFtQjtRQURoRCxTQUFJLEdBQStCLDBCQUEwQixDQUFDO1FBRTVELElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25GLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTywwQkFBMEI7SUFHckMsWUFBcUIsUUFBMkI7UUFBM0IsYUFBUSxHQUFSLFFBQVEsQ0FBbUI7UUFEaEQsU0FBSSxHQUFpQyw0QkFBNEIsQ0FBQztRQUVoRSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuRixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sMEJBQTBCO0lBR3JDLFlBQXFCLFFBQTJCO1FBQTNCLGFBQVEsR0FBUixRQUFRLENBQW1CO1FBRGhELFNBQUksR0FBaUMsNEJBQTRCLENBQUM7UUFFaEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyQyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sK0JBQStCO0lBRzFDLFlBQXFCLFFBQTJCO1FBQTNCLGFBQVEsR0FBUixRQUFRLENBQW1CO1FBRGhELFNBQUksR0FBc0MsaUNBQWlDLENBQUM7UUFFMUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkYsQ0FBQztDQUNGO0FBU0QsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsQ0FBQyxLQUF3QixFQUF1QixFQUFFO0lBQ3hGLElBQUksS0FBSyxDQUFDLEtBQUssWUFBWSxVQUFVLEVBQUU7UUFDckMsT0FBTyxJQUFJLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzlDO1NBQU07UUFDTCxRQUFRLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDcEIsS0FBSyxDQUFDO2dCQUNKLE9BQU8sSUFBSSwrQkFBK0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwRCxLQUFLLEdBQUc7Z0JBQ04sT0FBTyxJQUFJLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQy9DLEtBQUssR0FBRztnQkFDTixPQUFPLElBQUksMEJBQTBCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0MsS0FBSyxHQUFHO2dCQUNOLE9BQU8sSUFBSSx3QkFBd0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM3QyxLQUFLLEdBQUc7Z0JBQ04sT0FBTyxJQUFJLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzNDO2dCQUNFLE9BQU8sSUFBSSwwQkFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNoRDtLQUNGO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmV4cG9ydCBjbGFzcyBCYWxhbmNlSGlzdG9yeU5vdEZvdW5kIHtcbiAgbWVzc2FnZXM6IHN0cmluZ1tdO1xuICBraW5kOiAnQmFsYW5jZUhpc3RvcnlOb3RGb3VuZCcgPSAnQmFsYW5jZUhpc3RvcnlOb3RGb3VuZCc7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgIHRoaXMubWVzc2FnZXMgPSAoKHJlc3BvbnNlLmVycm9yIHx8IHt9KS5lcnJvcnMgfHwgW10pLm1hcCgoZTogYW55KSA9PiBlLm1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCYWxhbmNlSGlzdG9yeUJhZFJlcXVlc3Qge1xuICBtZXNzYWdlczogc3RyaW5nW107XG4gIGtpbmQ6ICdCYWxhbmNlSGlzdG9yeUJhZFJlcXVlc3QnID0gJ0JhbGFuY2VIaXN0b3J5QmFkUmVxdWVzdCc7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgIHRoaXMubWVzc2FnZXMgPSAoKHJlc3BvbnNlLmVycm9yIHx8IHt9KS5lcnJvcnMgfHwgW10pLm1hcCgoZTogYW55KSA9PiBlLm1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCYWxhbmNlSGlzdG9yeUFjY2Vzc0RlbmllZCB7XG4gIG1lc3NhZ2VzOiBzdHJpbmdbXTtcbiAga2luZDogJ0JhbGFuY2VIaXN0b3J5QWNjZXNzRGVuaWVkJyA9ICdCYWxhbmNlSGlzdG9yeUFjY2Vzc0RlbmllZCc7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgIHRoaXMubWVzc2FnZXMgPSAoKHJlc3BvbnNlLmVycm9yIHx8IHt9KS5lcnJvcnMgfHwgW10pLm1hcCgoZTogYW55KSA9PiBlLm1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCYWxhbmNlSGlzdG9yeVVua25vd25FcnJvciB7XG4gIG1lc3NhZ2VzOiBzdHJpbmdbXTtcbiAga2luZDogJ0JhbGFuY2VIaXN0b3J5VW5rbm93bkVycm9yJyA9ICdCYWxhbmNlSGlzdG9yeVVua25vd25FcnJvcic7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgIHRoaXMubWVzc2FnZXMgPSBbcmVzcG9uc2UubWVzc2FnZV07XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJhbGFuY2VIaXN0b3J5Q29ubmVjdGl2aXR5RXJyb3Ige1xuICBtZXNzYWdlczogc3RyaW5nW107XG4gIGtpbmQ6ICdCYWxhbmNlSGlzdG9yeUNvbm5lY3Rpdml0eUVycm9yJyA9ICdCYWxhbmNlSGlzdG9yeUNvbm5lY3Rpdml0eUVycm9yJztcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcmVzcG9uc2U6IEh0dHBFcnJvclJlc3BvbnNlKSB7XG4gICAgdGhpcy5tZXNzYWdlcyA9ICgocmVzcG9uc2UuZXJyb3IgfHwge30pLmVycm9ycyB8fCBbXSkubWFwKChlOiBhbnkpID0+IGUubWVzc2FnZSk7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgQmFsYW5jZUhpc3RvcnlFcnJvciA9XG4gIHwgQmFsYW5jZUhpc3RvcnlBY2Nlc3NEZW5pZWRcbiAgfCBCYWxhbmNlSGlzdG9yeUJhZFJlcXVlc3RcbiAgfCBCYWxhbmNlSGlzdG9yeU5vdEZvdW5kXG4gIHwgQmFsYW5jZUhpc3RvcnlDb25uZWN0aXZpdHlFcnJvclxuICB8IEJhbGFuY2VIaXN0b3J5VW5rbm93bkVycm9yO1xuXG5leHBvcnQgY29uc3QgcGFyc2VCYWxhbmNlSGlzdG9yeUVycm9yID0gKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSk6IEJhbGFuY2VIaXN0b3J5RXJyb3IgPT4ge1xuICBpZiAoZXJyb3IuZXJyb3IgaW5zdGFuY2VvZiBFcnJvckV2ZW50KSB7XG4gICAgcmV0dXJuIG5ldyBCYWxhbmNlSGlzdG9yeVVua25vd25FcnJvcihlcnJvcik7XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChlcnJvci5zdGF0dXMpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIG5ldyBCYWxhbmNlSGlzdG9yeUNvbm5lY3Rpdml0eUVycm9yKGVycm9yKTtcbiAgICAgIGNhc2UgNDAxOlxuICAgICAgICByZXR1cm4gbmV3IEJhbGFuY2VIaXN0b3J5QWNjZXNzRGVuaWVkKGVycm9yKTtcbiAgICAgIGNhc2UgNDAzOlxuICAgICAgICByZXR1cm4gbmV3IEJhbGFuY2VIaXN0b3J5QWNjZXNzRGVuaWVkKGVycm9yKTtcbiAgICAgIGNhc2UgNDAwOlxuICAgICAgICByZXR1cm4gbmV3IEJhbGFuY2VIaXN0b3J5QmFkUmVxdWVzdChlcnJvcik7XG4gICAgICBjYXNlIDQwNDpcbiAgICAgICAgcmV0dXJuIG5ldyBCYWxhbmNlSGlzdG9yeU5vdEZvdW5kKGVycm9yKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBuZXcgQmFsYW5jZUhpc3RvcnlVbmtub3duRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgfVxufTtcbiJdfQ==