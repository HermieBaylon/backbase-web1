import { Observable } from 'rxjs';
import { AccountNumberType } from '@backbase/ui-ang/account-number-pipe';
import { ActivatedRoute } from '@angular/router';
import { Arrangement } from '../model/product-summary-types';
export declare const toKebabCase: (accountType?: string) => string;
export declare const isCardNumber: (account: Arrangement) => boolean;
export declare const modelItemToBoolean: (value: string | boolean) => boolean;
export declare const isFavorite: (account: Arrangement) => boolean | undefined;
export declare const isProductVisible: (product: Arrangement) => boolean;
export declare const isFunction: (param: any) => boolean;
export declare const findBy: <T = any>(collection: T[], key: string, value: string) => T | undefined;
export declare const findByName: <T = any>(collection: T[], name: string) => T | undefined;
export declare const getAccountAlias: (account: any) => string | undefined;
export declare const getProductKindIconName: (productKindName: string) => string;
/**
 * Gets a valid product number type for a given product
 *
 * @param product
 *
 * for CreditCard/DebitCard:
 * - returns `number` if exists
 * - else `IBAN` if exists
 * - otherwise `BBAN`
 * for other products:
 * - returns `IBAN` if exists
 * - else `BBAN` if exists
 * - otherwise `number`
 */
export declare const getProductNumberType: (product: Arrangement) => AccountNumberType;
export declare const processErrorMessages: (messages: string[] | undefined) => string | undefined;
/**
 * Sets the passed unmasked attribute to the item
 *
 * @param item
 * @param attributeName
 * @param attributeValue
 */
export declare const setAttribute: <T = Object>(item: T, attributeName: string, attributeValue: any) => T;
/**
 * Verifies if values is defined (not null and not undefined)
 *
 * @param value
 */
export declare const isDefined: (value: any) => boolean;
/**
 * Returns configuration property based on the priority
 */
export declare const filterInputParameters: <T>(input: Observable<T | undefined>, prop: Observable<T>) => Observable<T>;
/**
 * Caches the request (shares between subscribers)
 *
 * @param request
 */
export declare const cacheRequest: <Params, Result>(request: (params: Params) => Observable<Result>) => (source: Observable<Params>) => Observable<Result>;
/**
 * Returns route parameter
 * takes parameter from component route if parameter exists, otherwise looks for parameter in parent routes
 *
 * @param route
 * @param param
 */
export declare const getRouteParameter: (route: ActivatedRoute, param: string) => Observable<string>;
/**
 * Returns true if product has external info (external logo, alias, etc.)
 *
 * @param product
 */
export declare const hasExternalInfo: (product: Arrangement) => boolean;
