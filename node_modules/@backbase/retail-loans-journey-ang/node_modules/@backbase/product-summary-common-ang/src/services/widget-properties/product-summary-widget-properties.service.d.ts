import { Observable } from 'rxjs';
import { ItemModel } from '@backbase/foundation-ang/core';
import { Property } from '@backbase/foundation-ang/web-sdk';
import * as i0 from "@angular/core";
/** @dynamic */
export declare class ProductSummaryWidgetPropertiesService<WidgetProperties extends Record<string, any> = Record<string, Property>> {
    private readonly defaultConfiguration;
    private readonly itemModel?;
    /**
     * Widget properties
     */
    readonly properties: Observable<WidgetProperties>;
    /**
     * Widget properties configuration
     */
    private readonly configuration;
    /**
     * @internal
     * @param defaultConfiguration
     * @param itemModel
     */
    constructor(defaultConfiguration: WidgetProperties, itemModel?: ItemModel | undefined);
    /**
     * Sets widget properties
     *
     * @param config
     */
    setConfiguration(config: Partial<WidgetProperties>): void;
    /**
     * Returns observable with a widget property
     *
     * @param propertyName
     */
    getProperty<WidgetPropertyName extends keyof WidgetProperties, WidgetPropertyValue extends WidgetProperties[WidgetPropertyName]>(propertyName: WidgetPropertyName): Observable<WidgetPropertyValue>;
    /**
     * Returns a widget configuration property,
     * takes the value in the following order:
     * - configuration value if exists (widget input)
     * - item-model value if exists (CXP configuration)
     * - default value (constant value)
     */
    private getWidgetProperty;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryWidgetPropertiesService<any>, [null, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ProductSummaryWidgetPropertiesService<any>>;
}
