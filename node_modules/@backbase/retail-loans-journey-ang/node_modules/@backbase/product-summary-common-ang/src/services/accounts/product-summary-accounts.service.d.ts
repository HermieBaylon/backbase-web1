import { TemplateRef } from '@angular/core';
import { ProductSummaryHttpService, ArrangementsHttpService, BalancesHttpService, AccountUserPreferences, UnmaskedAttributeRequestParams } from '@backbase/data-ang/arrangements';
import { NotificationService } from '@backbase/ui-ang/notification';
import { Accounts, GetProductsummaryRequest } from '../../model/types';
import { BehaviorSubject, Observable } from 'rxjs';
import { HttpErrorResponse } from '@angular/common/http';
import { Pubsub } from '@backbase/foundation-ang/web-sdk';
import { AccountAggregatedBalanceCurrency } from '@backbase/data-ang/arrangements';
import { AccountArrangementItem } from '../../model/product-summary-types';
import { AccountsOverviewError } from '../../errors/accounts-overview-service-error';
import * as i0 from "@angular/core";
export declare const bbEventToggleAccountFavoriteUpdate = "bb.event.toggle-account-favorite.update";
export declare class ProductSummaryAccountsService {
    private readonly productSummaryDataService;
    private readonly accountDataService;
    private readonly balancesHttpService;
    private readonly notificationService;
    private readonly pubSub;
    constructor(productSummaryDataService: ProductSummaryHttpService, accountDataService: ArrangementsHttpService, balancesHttpService: BalancesHttpService, notificationService: NotificationService, pubSub: Pubsub);
    private readonly requestObject;
    private readonly favoriteRequestComplete;
    readonly updateError: BehaviorSubject<AccountsOverviewError | undefined>;
    readonly error: BehaviorSubject<AccountsOverviewError | undefined>;
    readonly loading: BehaviorSubject<boolean>;
    private readonly aggregatedBalancesErrorSubject;
    readonly aggregatedBalancesError: Observable<HttpErrorResponse | undefined>;
    private readonly loadingAggregatedBalancesSubject;
    readonly loadingAggregatedBalances: Observable<boolean>;
    private readonly refreshAggregatedBalancesSubject;
    readonly accountsList: Observable<Accounts | undefined>;
    readonly aggregatedBalances: Observable<AccountAggregatedBalanceCurrency[] | undefined>;
    getAccountById(arrangementId: string): Observable<AccountArrangementItem>;
    /**
     * Fetches an unmasked attribute for the given `UnmaskedAttributeRequestParams`
     *
     * @param requestParameters
     */
    getUnmaskedAttribute(requestParameters: UnmaskedAttributeRequestParams): Observable<string>;
    toggleAccountFavorite(body: AccountUserPreferences, errorTemplateRef: TemplateRef<any> | string, successTemplateRef: TemplateRef<any> | string): Observable<any | undefined>;
    private putAccountFavorite;
    private getAccounts;
    private mapResponseWithCount;
    private mergeResponses;
    private showNotification;
    getAccountsFrom(requestObject: Observable<GetProductsummaryRequest>): void;
    refreshAggregatedBalances(): void;
    private getAggregatedBalances;
    private mapResponseToAggregatedBalances;
    private parseAggregatedBalanceError;
    private retriggerGetAccounts;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryAccountsService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ProductSummaryAccountsService>;
}
