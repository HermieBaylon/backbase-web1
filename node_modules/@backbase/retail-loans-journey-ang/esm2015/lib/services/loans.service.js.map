{"version":3,"file":"loans.service.js","sourceRoot":"","sources":["../../../../../../libs/retail-loans-journey/src/lib/services/loans.service.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAGrC,OAAO,EAML,gBAAgB,GACjB,MAAM,0BAA0B,CAAC;AAGlC,OAAO,EAAE,gCAAgC,EAAE,MAAM,gCAAgC,CAAC;AAElF,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;;;;;AAG1D,MAAM,OAAO,YAAY;IACvB,YACmB,gBAAkC,EAClC,UAA6B,EAC7B,oBAAsD;QAFtD,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,eAAU,GAAV,UAAU,CAAmB;QAC7B,yBAAoB,GAApB,oBAAoB,CAAkC;IACtE,CAAC;IAEJ,QAAQ,CAAC,IAAY;QACnB,MAAM,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,YAAY,CAAC;QAE7D,OAAO,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,UAAU,CAAC,CAAC,IAAI,CACpE,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YACjB,KAAK,EAAG,QAAQ,CAAC,IAA0B,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;YAClF,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;SACzC,CAAC,CAAC,CACJ,CAAC;IACJ,CAAC;IAED,WAAW,CAAC,MAAc;QACxB,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;IAC9F,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;IACnF,CAAC;IAED,uBAAuB,CAAC,MAA4C;QAClE,OAAO,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,IAAI,CAC3E,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YACjB,KAAK,EAAG,QAAQ,CAAC,IAAyC,CAAC,QAAQ;YACnE,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;SACzC,CAAC,CAAC,CACJ,CAAC;IACJ,CAAC;IAED,sBAAsB,CAAC,MAA2C;QAChE,OAAO,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;IAC9D,CAAC;IAEO,aAAa,CAAC,EAAE,OAAO,EAAyB;QACtD,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAEhD,IAAI,CAAC,UAAU,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;SACrE;QAED,OAAO,QAAQ,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IAClC,CAAC;;6HA/CU,YAAY;iIAAZ,YAAY;4FAAZ,YAAY;kBADxB,UAAU","sourcesContent":["import { HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport {\n  GetAmortizationScheduleRequestParams,\n  PresentationAmortizationSchedule,\n  PresentationLoans,\n  GetAmortizationPaymentRequestParams,\n  PresentationAmortizationPayment,\n  LoansHttpService,\n} from '@backbase/data-ang/loans';\nimport { Loan } from '@backbase/loans-collection-ui-ang';\n\nimport { LoansJourneyConfigurationService } from '../loans-journey-configuration';\nimport { LoansResponse, PaymentScheduleResponse } from '../models/loans-response.model';\nimport { LoanMapperService } from './loan-mapper.service';\n\n@Injectable()\nexport class LoansService {\n  constructor(\n    private readonly loansHttpService: LoansHttpService,\n    private readonly loanMapper: LoanMapperService,\n    private readonly configurationService: LoansJourneyConfigurationService,\n  ) {}\n\n  getLoans(from: number): Observable<LoansResponse> {\n    const size = this.configurationService.loanList.itemsPerPage;\n\n    return this.loansHttpService.getLoans({ from, size }, 'response').pipe(\n      map((response) => ({\n        items: (response.body as PresentationLoans).loans.map(this.loanMapper.toLoanModel),\n        totalCount: this.getTotalCount(response),\n      })),\n    );\n  }\n\n  getLoanById(loanId: string): Observable<Loan> {\n    return this.loansHttpService.getLoanById({ loanId }).pipe(map(this.loanMapper.toLoanModel));\n  }\n\n  getLoansAmount(): Observable<number> {\n    return this.loansHttpService.headLoans('response').pipe(map(this.getTotalCount));\n  }\n\n  getAmortizationSchedule(params: GetAmortizationScheduleRequestParams): Observable<PaymentScheduleResponse> {\n    return this.loansHttpService.getAmortizationSchedule(params, 'response').pipe(\n      map((response) => ({\n        items: (response.body as PresentationAmortizationSchedule).payments,\n        totalCount: this.getTotalCount(response),\n      })),\n    );\n  }\n\n  getAmortizationPayment(params: GetAmortizationPaymentRequestParams): Observable<PresentationAmortizationPayment> {\n    return this.loansHttpService.getAmortizationPayment(params);\n  }\n\n  private getTotalCount({ headers }: HttpResponse<unknown>): number {\n    const totalCount = headers.get('x-total-count');\n\n    if (!totalCount) {\n      throw new Error('[bb-loans]: Invalid `x-total-count` header param');\n    }\n\n    return parseInt(totalCount, 10);\n  }\n}\n"]}