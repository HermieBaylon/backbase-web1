import BigNumber from 'bignumber.js';
import { LoanDefaultViewType, LoanPaymentInfoType, LoanSummaryFormulaViewType, } from '@backbase/loans-collection-ui-ang';
import { AccountAliasDisplayingLevel } from '@backbase/product-summary-common-ang';
import { titles } from '../../../config/titles.config';
export const iconsConfig = {
    [LoanDefaultViewType.LineOfCredit]: 'payments',
    [LoanDefaultViewType.Mortgage]: 'loans',
    [LoanDefaultViewType.TermLoan]: 'home',
};
export const accountEditEntitlementsConfig = {
    [AccountAliasDisplayingLevel.USER]: 'ProductSummary.ProductSummary.edit',
    [AccountAliasDisplayingLevel.ACCOUNT]: 'ProductSummary.ManageArrangementAlias.edit',
};
export function getFormulaViewType({ value: totalValue }, amounts) {
    const amountValues = amounts.reduce((accum, { value }) => {
        if (value) {
            accum.push(new BigNumber(value));
        }
        return accum;
    }, []);
    const moreThanThreeAmounts = amountValues.length > 3;
    if (totalValue) {
        const totalAmount = new BigNumber(totalValue);
        const amountValuesSum = amountValues.reduce((accum, val) => accum.plus(val), new BigNumber(0));
        if (totalAmount.isEqualTo(amountValuesSum)) {
            return moreThanThreeAmounts ? LoanSummaryFormulaViewType.CollapsibleList : LoanSummaryFormulaViewType.Equation;
        }
        else {
            return LoanSummaryFormulaViewType.OnlyTotal;
        }
    }
    else {
        return moreThanThreeAmounts
            ? LoanSummaryFormulaViewType.AmountsInRows
            : LoanSummaryFormulaViewType.AmountsInColumns;
    }
}
export const getLoanSummaryFormulaDataConfig = (isLineOfCreditType) => ({ outstandingAmount, drawnAmount, interestDue, feesDue, currencyCode, inArrearsAmount }) => {
    const totalAmount = {
        value: outstandingAmount,
        title: titles.items.totalOutstandingAmount,
    };
    const amounts = [
        {
            value: drawnAmount,
            title: isLineOfCreditType ? titles.items.drawnAmount : titles.items.remainingPrincipal,
        },
        {
            value: inArrearsAmount,
            title: titles.items.overdueAmount,
        },
        {
            value: interestDue,
            title: titles.items.interestDue,
        },
        {
            value: feesDue,
            title: titles.items.feesDue,
        },
    ].filter(({ value }) => value);
    const shouldShow = Boolean(currencyCode && (totalAmount.value || amounts.length));
    const viewType = getFormulaViewType(totalAmount, amounts);
    return { totalAmount, amounts, shouldShow, viewType };
};
export const detailsPaymentInfoFn = ({ isFullyRepaid, nextRepaymentDate, nextRepaymentAmount, }) => {
    if (isFullyRepaid) {
        return { paymentType: LoanPaymentInfoType.FullyPaid };
    }
    const isOverdueDate = Boolean(nextRepaymentDate && Date.parse(nextRepaymentDate) - new Date().setHours(0, 0, 0, 0) < 0);
    return {
        date: nextRepaymentDate,
        amount: nextRepaymentAmount,
        paymentType: isOverdueDate ? LoanPaymentInfoType.ScheduledLast : LoanPaymentInfoType.ScheduledNext,
    };
};
export const isProgressBarDataShown = (owedAmount, availableAmount, totalAmount) => owedAmount.isGreaterThanOrEqualTo(0) &&
    availableAmount.isGreaterThanOrEqualTo(0) &&
    totalAmount.isGreaterThan(0) &&
    totalAmount.isEqualTo(owedAmount.plus(availableAmount));
const isAmountShown = (amount) => (amount ? amount.isGreaterThanOrEqualTo(0) : false);
const retailLoanSummaryTermLoanProgressDataConfig = {
    activeAmount: {
        fieldKey: 'drawnAmount',
        title: titles.items.owedAmount,
    },
    availableAmount: {
        fieldKey: 'paidAmount',
        title: titles.items.paidAmount,
    },
    totalAmount: {
        fieldKey: 'creditLimit',
        title: titles.items.creditLimit,
    },
    showData: ({ creditLimit, paidAmount, drawnAmount }) => {
        return creditLimit && paidAmount && drawnAmount
            ? isProgressBarDataShown(new BigNumber(drawnAmount), new BigNumber(paidAmount), new BigNumber(creditLimit))
            : false;
    },
};
const retailLoanSummaryLineOfCreditProgressDataConfig = {
    activeAmount: {
        fieldKey: 'drawnAmount',
        title: titles.items.owedAmount,
    },
    availableAmount: {
        fieldKey: 'availableBalance',
        title: titles.items.availableAmount,
    },
    totalAmount: {
        fieldKey: 'creditLimit',
        title: titles.items.creditLimit,
    },
    showData: ({ creditLimit, availableBalance, drawnAmount }) => {
        return creditLimit && availableBalance && drawnAmount
            ? isProgressBarDataShown(new BigNumber(drawnAmount), new BigNumber(availableBalance), new BigNumber(creditLimit))
            : false;
    },
};
const isMortgageTotalAmountShown = (totalAmount, owedAmount, availableAmount) => totalAmount.isGreaterThan(0) &&
    owedAmount.isGreaterThanOrEqualTo(0) &&
    availableAmount.isGreaterThanOrEqualTo(0) &&
    totalAmount.isEqualTo(owedAmount.plus(availableAmount));
export const retailLoanSummaryMortgageTermProgressDataConfig = {
    activeAmount: {
        fieldKey: 'drawnAmount',
        title: titles.items.owedAmount,
    },
    availableAmount: {
        fieldKey: 'paidAmount',
        title: titles.items.paidAmount,
    },
    totalAmount: {
        fieldKey: 'creditLimit',
        title: titles.items.creditLimit,
    },
    showProgressBar: () => false,
    showActiveAmount: ({ drawnAmount }) => {
        const amount = drawnAmount && new BigNumber(drawnAmount);
        return amount ? isAmountShown(amount) : false;
    },
    showAvailableAmount: ({ paidAmount }) => {
        const amount = paidAmount && new BigNumber(paidAmount);
        return amount ? isAmountShown(amount) : false;
    },
    showTotalAmount: ({ creditLimit, paidAmount, drawnAmount }) => {
        return creditLimit && drawnAmount && paidAmount
            ? isMortgageTotalAmountShown(new BigNumber(creditLimit), new BigNumber(drawnAmount), new BigNumber(paidAmount))
            : false;
    },
};
const getChangedAmountFocus = (dataConfig) => {
    const { activeAmount, availableAmount, showActiveAmount, showAvailableAmount } = dataConfig;
    return Object.assign({}, dataConfig, {
        activeAmount: availableAmount,
        availableAmount: activeAmount,
        showActiveAmount: showAvailableAmount,
        showAvailableAmount: showActiveAmount,
    });
};
export const retailLoanSummaryTermLoanDataConfig = {
    progressBar: retailLoanSummaryTermLoanProgressDataConfig,
    paymentInfo: detailsPaymentInfoFn,
    formula: getLoanSummaryFormulaDataConfig(false),
    icons: iconsConfig,
};
export const retailLoanSummaryLineOfCreditDataConfig = {
    progressBar: retailLoanSummaryLineOfCreditProgressDataConfig,
    paymentInfo: detailsPaymentInfoFn,
    formula: getLoanSummaryFormulaDataConfig(true),
    icons: iconsConfig,
};
export const retailLoanSummaryMortgageTermDataConfig = {
    progressBar: retailLoanSummaryMortgageTermProgressDataConfig,
    paymentInfo: detailsPaymentInfoFn,
    formula: getLoanSummaryFormulaDataConfig(false),
    icons: iconsConfig,
};
export function getRetailLoanSummaryDataConfig(viewType, owedAmountFocus) {
    if (viewType === LoanDefaultViewType.TermLoan) {
        return owedAmountFocus
            ? retailLoanSummaryTermLoanDataConfig
            : Object.assign({}, retailLoanSummaryTermLoanDataConfig, {
                progressBar: getChangedAmountFocus(retailLoanSummaryTermLoanDataConfig.progressBar),
            });
    }
    if (viewType === LoanDefaultViewType.LineOfCredit) {
        return owedAmountFocus
            ? retailLoanSummaryLineOfCreditDataConfig
            : Object.assign({}, retailLoanSummaryLineOfCreditDataConfig, {
                progressBar: getChangedAmountFocus(retailLoanSummaryLineOfCreditDataConfig.progressBar),
            });
    }
    return retailLoanSummaryMortgageTermDataConfig;
}
//# sourceMappingURL=loan-summary.config.js.map