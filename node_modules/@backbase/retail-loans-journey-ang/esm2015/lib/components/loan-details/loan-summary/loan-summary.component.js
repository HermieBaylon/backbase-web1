import { LOAN_JOURNEY_COMMUNICATOR } from '../../../services/communication.service';
import { ChangeDetectionStrategy, Component, Inject, Input, Optional } from '@angular/core';
import { CONDITIONS } from '@backbase/foundation-ang/entitlements';
import { LoanDefaultViewType, PaymentOptions, } from '@backbase/loans-collection-ui-ang';
import { ACCOUNT_ALIAS_DISPLAYING_LEVEL, AccountAliasDisplayingLevel } from '@backbase/product-summary-common-ang';
import { LoanDetailsBaseComponent } from '../../base/loan-details/loan-details-base-component';
import { accountEditEntitlementsConfig, getRetailLoanSummaryDataConfig } from './loan-summary.config';
import { LoansStoreService } from '../../../store/loans/store.service';
import { RemoteConfigService } from '@backbase/remote-config-ang';
import * as i0 from "@angular/core";
import * as i1 from "../../../store/loans/store.service";
import * as i2 from "@backbase/remote-config-ang";
import * as i3 from "@backbase/loans-collection-ui-ang";
import * as i4 from "@angular/common";
import * as i5 from "@backbase/product-summary-common-ang";
export class LoanSummaryComponent extends LoanDetailsBaseComponent {
    constructor(storeService, conditions, accountAliasDisplayingLevel, loanCommunication, remoteConfig) {
        super(storeService);
        this.conditions = conditions;
        this.accountAliasDisplayingLevel = accountAliasDisplayingLevel;
        this.loanCommunication = loanCommunication;
        this.remoteConfig = remoteConfig;
        /**
         * Stream represents edit states for loan alias
         */
        this.aliasEditState$ = this.storeService.aliasEditState$;
        this.PaymentOptions = PaymentOptions;
        this.LoanDefaultViewType = LoanDefaultViewType;
        this.accountAliasDisplayingLevel = accountAliasDisplayingLevel || AccountAliasDisplayingLevel.USER;
        this.canEditAlias = this.conditions.resolveEntitlements(accountEditEntitlementsConfig[this.accountAliasDisplayingLevel]);
    }
    /**
     * Loan id
     */
    set loanId(id) {
        this.storeService.fetchLoanById(id);
    }
    /**
     * Configuration for loan summary container
     */
    getDataConfig({ viewType }) {
        const owedAmountFocus = this.remoteConfig.getValue('owed_amount_focus');
        return getRetailLoanSummaryDataConfig(viewType, owedAmountFocus);
    }
    /**
     * Updates a loan alias
     *
     * @param name
     */
    onUpdateAlias(name) {
        this.storeService.updateAlias(name);
    }
    /**
     * Cancel(discard) current loan alias update
     */
    onCancelAliasUpdate() {
        this.storeService.cancelAliasUpdate();
    }
    onDrawAmount() {
        if (this.loanCommunication) {
            this.loanCommunication.navigateToLoanAdvance();
        }
        else {
            throw new Error('[bb-loans]: Communication service is missing');
        }
    }
    onPayDown() {
        if (this.loanCommunication) {
            this.loanCommunication.navigateToLoanPayment();
        }
        else {
            throw new Error('[bb-loans]: Communication service is missing');
        }
    }
    getAllowedPaymentOption(paymentOptionName, options) {
        var _a;
        return (!!((_a = options === null || options === void 0 ? void 0 : options.paymentOptions.find((option) => option.name === paymentOptionName)) === null || _a === void 0 ? void 0 : _a.allowed) && !!this.loanCommunication);
    }
}
/** @nocollapse */ LoanSummaryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoanSummaryComponent, deps: [{ token: i1.LoansStoreService }, { token: CONDITIONS }, { token: ACCOUNT_ALIAS_DISPLAYING_LEVEL, optional: true }, { token: LOAN_JOURNEY_COMMUNICATOR, optional: true }, { token: i2.RemoteConfigService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ LoanSummaryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LoanSummaryComponent, selector: "bb-loan-summary", inputs: { loanId: "loanId" }, usesInheritance: true, ngImport: i0, template: "<bb-loans-main-container [isLoadingState]=\"isLoading$ | async\" [isErrorState]=\"isErrorState$ | async\">\n  <bb-retail-loan-summary-container\n    *ngIf=\"loan$ | async as loan\"\n    [loan]=\"loan\"\n    [dataConfig]=\"getDataConfig(loan)\"\n    [showPayDownButton]=\"getAllowedPaymentOption(PaymentOptions.LoanPayment, loan.paymentOptions)\"\n    [showDrawAmountButton]=\"getAllowedPaymentOption(PaymentOptions.LoanAdvance, loan.paymentOptions)\"\n    [showFormula]=\"false\"\n    [showInterestRateOnTop]=\"loan.loanType === LoanDefaultViewType.Mortgage\"\n    [owedAmountFocus]=\"owedAmountFocus\"\n    (updateAlias)=\"onUpdateAlias($event)\"\n    (cancelAliasUpdate)=\"onCancelAliasUpdate()\"\n    (drawAmount)=\"onDrawAmount()\"\n    (payDown)=\"onPayDown()\"\n  ></bb-retail-loan-summary-container>\n</bb-loans-main-container>\n", components: [{ type: i3.LoansMainContainerComponent, selector: "bb-loans-main-container", inputs: ["isErrorState", "isLoadingState", "isEmptyState", "containerHeightFitToContent", "contentWrapperClasses", "rootWrapperClasses", "customErrorState", "customLoadingState", "customEmptyState"] }, { type: i3.RetailLoanSummaryContainerComponent, selector: "bb-retail-loan-summary-container", inputs: ["showPayDownButton", "showDrawAmountButton", "showFormula", "showInterestRateOnTop", "owedAmountFocus"], outputs: ["drawAmount", "payDown", "updateAlias", "cancelAliasUpdate"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoanSummaryComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-loan-summary',
                    templateUrl: './loan-summary.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.LoansStoreService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [CONDITIONS]
                }] }, { type: i5.AccountAliasDisplayingLevel, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ACCOUNT_ALIAS_DISPLAYING_LEVEL]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LOAN_JOURNEY_COMMUNICATOR]
                }] }, { type: i2.RemoteConfigService }]; }, propDecorators: { loanId: [{
                type: Input
            }] } });
//# sourceMappingURL=loan-summary.component.js.map