import { ChangeDetectionStrategy, Component } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { MediaQueryService } from '@backbase/ui-ang/media-query-lib';
import { loanIdParamKey } from '../../../../config/route-params.model';
import { isErrorState, isLoadingState, stateMap } from '../../../../utils/call-state.util';
import { LoansJourneyConfigurationService } from '../../../../loans-journey-configuration';
import { PaymentScheduleStoreService } from '../../../../store/payment-schedule/store.service';
import { RemoteConfigService } from '@backbase/remote-config-ang';
import * as i0 from "@angular/core";
import * as i1 from "../../../../loans-journey-configuration";
import * as i2 from "../../../../store/payment-schedule/store.service";
import * as i3 from "@backbase/ui-ang/media-query-lib";
import * as i4 from "@angular/router";
import * as i5 from "@backbase/remote-config-ang";
import * as i6 from "@backbase/loans-collection-ui-ang";
import * as i7 from "@backbase/ui-ang/load-button";
import * as i8 from "@backbase/ui-ang/empty-state";
import * as i9 from "@angular/common";
// TODO: move to separate and reorganize the flow
export class PaymentScheduleWrapperComponent {
    constructor(configurationService, storeService, mediaQueryService, activatedRoute, router, remoteConfig) {
        this.configurationService = configurationService;
        this.storeService = storeService;
        this.mediaQueryService = mediaQueryService;
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.remoteConfig = remoteConfig;
        /**
         * Stream of Amortized Payments
         */
        this.amortizedPayments$ = this.storeService.amortizedPayments$;
        /**
         * Payment schedule configuration
         */
        this.scheduleConfig = this.configurationService.paymentSchedule;
        /**
         * Hide or show payment status in the table
         */
        this.showPaymentStatus = this.remoteConfig.getValue('show_payment_status_retail_loans');
        /**
         * Flag represents error state
         */
        this.isErrorState$ = this.storeService.amortizedPaymentsCallState$.pipe(stateMap(isErrorState));
        /**
         * Stream represents total amount of the pages
         */
        this.amortizedPaymentsTotalCount$ = this.storeService.amortizedPaymentsTotalCount$;
        /**
         * Stream represent current loaded page number
         */
        this.amortizedPaymentsCurrentPage$ = this.storeService.amortizedPaymentsCurrentPage$;
        /**
         * Flag represents the tablet screen resolution
         */
        this.isTabletResolution$ = this.mediaQueryService.isMediaBreakpointMatches('max-width', 'lg');
        this._isLoading$ = combineLatest([
            this.isTabletResolution$,
            this.storeService.amortizedPaymentsCallState$,
            this.amortizedPaymentsCurrentPage$,
        ]);
        /**
         * Flag represents page loading state
         */
        this.isPageLoading$ = this._isLoading$.pipe(map(([isTabletResolution, callState, currentPage]) => isLoadingState(callState) && !(isTabletResolution && currentPage > 0)));
        /**
         * Flag represents load more button loading state
         */
        this.isButtonLoading$ = this._isLoading$.pipe(map(([isTabletResolution, callState, currentPage]) => isLoadingState(callState) && isTabletResolution && currentPage > 0));
        /**
         * Flag represents visibility of load more button
         */
        this.isLoadMoreVisible$ = combineLatest([
            this.amortizedPaymentsCurrentPage$,
            this.amortizedPaymentsTotalCount$,
            this.amortizedPayments$,
        ]).pipe(map(([page, total, { length }]) => !(page === 0 && length === total)));
        /**
         * Flag represents empty state
         */
        this.isEmptyState$ = this.storeService.amortizedPaymentsTotalCount$.pipe(map((totalCount) => totalCount === 0));
        this.baseReqParams = {
            loanId: this.activatedRoute.snapshot.parent.params[loanIdParamKey],
            size: this.scheduleConfig.itemsPerPage,
            from: 0,
            append: false,
        };
        this.storeService.fetchAmortizationSchedule(this.baseReqParams);
    }
    /**
     * Load loans on pagination page changes
     *
     * @param page
     */
    onPageChange(page) {
        this.storeService.fetchAmortizationSchedule(Object.assign(Object.assign({}, this.baseReqParams), { from: page }));
    }
    /**
     * Load loans on load more button click
     *
     * @param from
     */
    onLoadMore({ from }) {
        this.storeService.fetchAmortizationSchedule(Object.assign(Object.assign({}, this.baseReqParams), { from, append: true }));
    }
    /**
     * Emits in item select
     */
    onItemSelect({ id }) {
        this.router.navigate([id], { relativeTo: this.activatedRoute });
    }
}
/** @nocollapse */ PaymentScheduleWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentScheduleWrapperComponent, deps: [{ token: i1.LoansJourneyConfigurationService }, { token: i2.PaymentScheduleStoreService }, { token: i3.MediaQueryService }, { token: i4.ActivatedRoute }, { token: i4.Router }, { token: i5.RemoteConfigService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentScheduleWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentScheduleWrapperComponent, selector: "bb-payment-schedule-wrapper", ngImport: i0, template: "<bb-loans-main-container\n  [isLoadingState]=\"isPageLoading$ | async\"\n  [isErrorState]=\"isErrorState$ | async\"\n  [isEmptyState]=\"isEmptyState$ | async\"\n  [customEmptyState]=\"customEmptyState\"\n  rootWrapperClasses=\"\"\n  contentWrapperClasses=\"\"\n>\n  <div class=\"bb-card\">\n    <div class=\"bb-card__body\">\n      <ng-container *ngIf=\"isTabletResolution$ | async; else desktop\">\n        <bb-loan-amortized-payment-schedule-list\n          [items]=\"(amortizedPayments$ | async)!\"\n          (selectItem)=\"onItemSelect($event)\"\n        ></bb-loan-amortized-payment-schedule-list>\n      </ng-container>\n\n      <bb-load-button-ui\n        *ngIf=\"isLoadMoreVisible$ | async\"\n        [from]=\"(amortizedPaymentsCurrentPage$ | async)!\"\n        [size]=\"scheduleConfig.itemsPerPage\"\n        [totalCount]=\"(amortizedPaymentsTotalCount$ | async)!\"\n        [isLoading]=\"(isButtonLoading$ | async)!\"\n        (paramChange)=\"onLoadMore($event)\"\n        class=\"bb-stack bb-stack--center\"\n        i18n=\"Load more button@loans.payment-schedule.load-more.btn\"\n        color=\"link\"\n        data-role=\"payment-schedule-wrapper__load-more-btn\"\n      >\n        Load more\n      </bb-load-button-ui>\n\n      <ng-template #desktop>\n        <bb-loan-amortized-payment-schedule-table\n          [items]=\"(amortizedPayments$ | async)!\"\n          (selectItem)=\"onItemSelect($event)\"\n          [showPaymentStatus]=\"showPaymentStatus\"\n        >\n        </bb-loan-amortized-payment-schedule-table>\n      </ng-template>\n    </div>\n  </div>\n  <router-outlet></router-outlet>\n</bb-loans-main-container>\n\n<ng-template #customEmptyState>\n  <div class=\"bb-state-container bb-state-container--min-height\" data-role=\"payment-schedule-wrapper__empty-state\">\n    <bb-empty-state-ui\n      title=\"No Upcoming Payments\"\n      i18n-title=\"Payment schedule empty state title@loans.payment-schedule.empty-state.title\"\n      subtitle=\"You don't have any upcoming payments to be displayed.\"\n      i18n-subtitle=\"Payment schedule empty state subtitle@loans.payment-schedule.empty-state.subtitle\"\n      iconModifier=\"loans\"\n      iconSize=\"xxl\"\n    >\n    </bb-empty-state-ui>\n  </div>\n</ng-template>\n", components: [{ type: i6.LoansMainContainerComponent, selector: "bb-loans-main-container", inputs: ["isErrorState", "isLoadingState", "isEmptyState", "containerHeightFitToContent", "contentWrapperClasses", "rootWrapperClasses", "customErrorState", "customLoadingState", "customEmptyState"] }, { type: i6.LoanAmortizedPaymentScheduleListComponent, selector: "bb-loan-amortized-payment-schedule-list" }, { type: i7.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i6.LoanAmortizedPaymentScheduleTableComponent, selector: "bb-loan-amortized-payment-schedule-table", inputs: ["showPaymentStatus"] }, { type: i8.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }], pipes: { "async": i9.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentScheduleWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-schedule-wrapper',
                    templateUrl: './payment-schedule-wrapper.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.LoansJourneyConfigurationService }, { type: i2.PaymentScheduleStoreService }, { type: i3.MediaQueryService }, { type: i4.ActivatedRoute }, { type: i4.Router }, { type: i5.RemoteConfigService }]; } });
//# sourceMappingURL=payment-schedule-wrapper.component.js.map