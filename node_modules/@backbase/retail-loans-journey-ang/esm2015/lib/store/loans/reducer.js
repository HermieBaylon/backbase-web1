import { createReducer, on } from '@ngrx/store';
import { fetchAmountOfLoansError, fetchAmountOfLoansSuccess, fetchLoanById, fetchLoanByIdError, fetchLoanByIdSuccess, loadLoans, loadLoansError, loadLoansSuccess, updateLoanAlias, updateLoanAliasError, updateLoanAliasSuccess, } from './actions';
import { LoadingState } from '../../models/call-state.model';
export const storeKey = 'loansJourneyBase';
export const initialState = {
    loans: [],
    loansCurrentPage: 0,
    loansTotalCount: undefined,
    loansCallState: LoadingState.Init,
    loan: undefined,
    loanCallState: LoadingState.Init,
    aliasUpdateCallState: LoadingState.Init,
};
const _loansReducer = createReducer(initialState, on(loadLoans, (state, { page }) => (Object.assign(Object.assign({}, state), { loansCallState: LoadingState.Loading, loansCurrentPage: page }))), on(loadLoansSuccess, (state, { append, response: { items: loans, totalCount } }) => (Object.assign(Object.assign({}, state), { loans: append ? [...state.loans, ...loans] : loans, loansTotalCount: totalCount, loansCallState: LoadingState.Loaded }))), on(loadLoansError, (state, { error }) => (Object.assign(Object.assign({}, state), { loansCallState: { error } }))), on(fetchLoanById, (state) => (Object.assign(Object.assign({}, state), { loanCallState: LoadingState.Loading }))), on(fetchLoanByIdSuccess, (state, { loan }) => (Object.assign(Object.assign({}, state), { loan, loanCallState: LoadingState.Loaded }))), on(fetchLoanByIdError, (state, { error }) => (Object.assign(Object.assign({}, state), { loanCallState: { error } }))), on(fetchAmountOfLoansSuccess, (state, { totalCount }) => (Object.assign(Object.assign({}, state), { loansTotalCount: totalCount }))), on(fetchAmountOfLoansError, (state) => (Object.assign(Object.assign({}, state), { loansTotalCount: undefined }))), on(updateLoanAlias, (state) => (Object.assign(Object.assign({}, state), { aliasUpdateCallState: LoadingState.Loading }))), on(updateLoanAliasSuccess, (state) => (Object.assign(Object.assign({}, state), { aliasUpdateCallState: LoadingState.Loaded }))), on(updateLoanAliasError, (state, { error }) => (Object.assign(Object.assign({}, state), { aliasUpdateCallState: { error } }))));
export function loansReducer(state, action) {
    return _loansReducer(state, action);
}
//# sourceMappingURL=reducer.js.map