{"version":3,"file":"store.service.js","sourceRoot":"","sources":["../../../../../../../libs/retail-loans-journey/src/lib/store/loans/store.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AAEpC,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAGrC,OAAO,EAAE,oBAAoB,EAAE,MAAM,oCAAoC,CAAC;AAE1E,OAAO,EACL,0BAA0B,EAC1B,UAAU,EACV,mBAAmB,EACnB,WAAW,EACX,oBAAoB,EACpB,sBAAsB,EACtB,qBAAqB,EACrB,4BAA4B,GAC7B,MAAM,aAAa,CAAC;AACrB,OAAO,EAAE,kBAAkB,EAAE,aAAa,EAAE,SAAS,EAAE,eAAe,EAAE,qBAAqB,EAAE,MAAM,WAAW,CAAC;AACjH,OAAO,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAC;;;AAK7D,MAAM,OAAO,iBAAiB;IAoC5B,YAA6B,KAA6B;QAA7B,UAAK,GAAL,KAAK,CAAwB;QAnC1D;;WAEG;QACM,oBAAe,GAA0B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;QAC1F;;WAEG;QACM,WAAM,GAAuB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACrE;;WAEG;QACM,mBAAc,GAA0B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QACxF;;WAEG;QACM,UAAK,GAAiC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC7E;;WAEG;QACM,4BAAuB,GAAwB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAC;QACxG;;WAEG;QACM,sBAAiB,GAAuB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;QAC3F;;WAEG;QACM,qBAAgB,GAAmC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;QACrG;;WAEG;QACM,oBAAe,GAAqC,IAAI,CAAC,KAAK;aACpE,MAAM,CAAC,0BAA0B,CAAC;aAClC,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAEvD,CAAC;IAE9D;;OAEG;IACH,UAAU,CAAC,IAAY,EAAE,MAAM,GAAG,KAAK;QACrC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,EAAU;QACtB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;IAC7C,CAAC;IAED;;OAEG;IACH,kBAAkB;QAChB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,kBAAkB,EAAE,CAAC,CAAC;IAC5C,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,KAAa;QACvB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACH,iBAAiB;QACf,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,qBAAqB,EAAE,CAAC,CAAC;IAC/C,CAAC;;kIAzEU,iBAAiB;sIAAjB,iBAAiB;4FAAjB,iBAAiB;kBAD7B,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Loan } from '@backbase/loans-collection-ui-ang';\nimport { InputInlineEditState } from '@backbase/ui-ang/input-inline-edit';\n\nimport {\n  selectAliasUpdateCallState,\n  selectLoan,\n  selectLoanCallState,\n  selectLoans,\n  selectLoansCallState,\n  selectLoansCurrentPage,\n  selectLoansTotalCount,\n  selectShowNavigateToOverview,\n} from './selectors';\nimport { fetchAmountOfLoans, fetchLoanById, loadLoans, updateLoanAlias, updateLoanAliasCancel } from './actions';\nimport { isLoadingState } from '../../utils/call-state.util';\nimport { CallState } from '../../models/call-state.model';\nimport { LoansStoreState } from './store.model';\n\n@Injectable()\nexport class LoansStoreService {\n  /**\n   * Stream of api call state for fetching loans\n   */\n  readonly loansCallState$: Observable<CallState> = this.store.select(selectLoansCallState);\n  /**\n   * Stream of loans\n   */\n  readonly loans$: Observable<Loan[]> = this.store.select(selectLoans);\n  /**\n   * Stream of api call state for fetching loan item\n   */\n  readonly loanCallState$: Observable<CallState> = this.store.select(selectLoanCallState);\n  /**\n   * Stream of loan item\n   */\n  readonly loan$: Observable<Loan | undefined> = this.store.select(selectLoan);\n  /**\n   * Stream indicates whether to show/hide navigate to overview button\n   */\n  readonly showNavigateToOverview$: Observable<boolean> = this.store.select(selectShowNavigateToOverview);\n  /**\n   * Stream represents current loaded page for loan list\n   */\n  readonly loansCurrentPage$: Observable<number> = this.store.select(selectLoansCurrentPage);\n  /**\n   * Stream represents total pages count for loan list\n   */\n  readonly loansTotalCount$: Observable<number | undefined> = this.store.select(selectLoansTotalCount);\n  /**\n   * Stream of alias edit states (mapped from call state)\n   */\n  readonly aliasEditState$: Observable<InputInlineEditState> = this.store\n    .select(selectAliasUpdateCallState)\n    .pipe(map((callState) => (isLoadingState(callState) ? InputInlineEditState.LOADING : InputInlineEditState.IDLE)));\n\n  constructor(private readonly store: Store<LoansStoreState>) {}\n\n  /**\n   * Fetch loans\n   */\n  fetchLoans(page: number, append = false): void {\n    this.store.dispatch(loadLoans({ page, append }));\n  }\n\n  /**\n   * Fetch loan by id\n   */\n  fetchLoanById(id: string): void {\n    this.store.dispatch(fetchLoanById({ id }));\n  }\n\n  /**\n   * Fetch amount of loans\n   */\n  fetchAmountOfLoans(): void {\n    this.store.dispatch(fetchAmountOfLoans());\n  }\n\n  /**\n   * Update alias\n   *\n   * @param alias\n   */\n  updateAlias(alias: string): void {\n    this.store.dispatch(updateLoanAlias({ alias }));\n  }\n\n  /**\n   * Cancel alias update\n   */\n  cancelAliasUpdate(): void {\n    this.store.dispatch(updateLoanAliasCancel());\n  }\n}\n"]}