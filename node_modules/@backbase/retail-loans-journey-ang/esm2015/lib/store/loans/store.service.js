import { Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { map } from 'rxjs/operators';
import { InputInlineEditState } from '@backbase/ui-ang/input-inline-edit';
import { selectAliasUpdateCallState, selectLoan, selectLoanCallState, selectLoans, selectLoansCallState, selectLoansCurrentPage, selectLoansTotalCount, selectShowNavigateToOverview, } from './selectors';
import { fetchAmountOfLoans, fetchLoanById, loadLoans, updateLoanAlias, updateLoanAliasCancel } from './actions';
import { isLoadingState } from '../../utils/call-state.util';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
export class LoansStoreService {
    constructor(store) {
        this.store = store;
        /**
         * Stream of api call state for fetching loans
         */
        this.loansCallState$ = this.store.select(selectLoansCallState);
        /**
         * Stream of loans
         */
        this.loans$ = this.store.select(selectLoans);
        /**
         * Stream of api call state for fetching loan item
         */
        this.loanCallState$ = this.store.select(selectLoanCallState);
        /**
         * Stream of loan item
         */
        this.loan$ = this.store.select(selectLoan);
        /**
         * Stream indicates whether to show/hide navigate to overview button
         */
        this.showNavigateToOverview$ = this.store.select(selectShowNavigateToOverview);
        /**
         * Stream represents current loaded page for loan list
         */
        this.loansCurrentPage$ = this.store.select(selectLoansCurrentPage);
        /**
         * Stream represents total pages count for loan list
         */
        this.loansTotalCount$ = this.store.select(selectLoansTotalCount);
        /**
         * Stream of alias edit states (mapped from call state)
         */
        this.aliasEditState$ = this.store
            .select(selectAliasUpdateCallState)
            .pipe(map((callState) => (isLoadingState(callState) ? InputInlineEditState.LOADING : InputInlineEditState.IDLE)));
    }
    /**
     * Fetch loans
     */
    fetchLoans(page, append = false) {
        this.store.dispatch(loadLoans({ page, append }));
    }
    /**
     * Fetch loan by id
     */
    fetchLoanById(id) {
        this.store.dispatch(fetchLoanById({ id }));
    }
    /**
     * Fetch amount of loans
     */
    fetchAmountOfLoans() {
        this.store.dispatch(fetchAmountOfLoans());
    }
    /**
     * Update alias
     *
     * @param alias
     */
    updateAlias(alias) {
        this.store.dispatch(updateLoanAlias({ alias }));
    }
    /**
     * Cancel alias update
     */
    cancelAliasUpdate() {
        this.store.dispatch(updateLoanAliasCancel());
    }
}
/** @nocollapse */ LoansStoreService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansStoreService, deps: [{ token: i1.Store }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ LoansStoreService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansStoreService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoansStoreService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Store }]; } });
//# sourceMappingURL=store.service.js.map