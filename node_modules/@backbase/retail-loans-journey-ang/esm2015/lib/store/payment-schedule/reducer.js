import { createReducer, on } from '@ngrx/store';
import { fetchAmortizationPayment, fetchAmortizationPaymentError, fetchAmortizationPaymentSuccess, fetchAmortizationSchedule, fetchAmortizationScheduleError, fetchAmortizationScheduleSuccess, } from './actions';
import { LoadingState } from '../../models/call-state.model';
export const paymentScheduleStoreKey = 'loansJourneyPaymentSchedule';
export const initialState = {
    amortizedPayments: [],
    amortizedPaymentsTotalCount: 0,
    amortizedPaymentsCurrenPage: 0,
    amortizedPaymentsCallState: LoadingState.Init,
    amortizedPayment: undefined,
    amortizedPaymentCallState: LoadingState.Init,
};
const reducer = createReducer(initialState, on(fetchAmortizationSchedule, (state, { params: { from } }) => (Object.assign(Object.assign({}, state), { amortizedPaymentsCallState: LoadingState.Loading, amortizedPaymentsCurrenPage: from }))), on(fetchAmortizationScheduleSuccess, (state, { append, response: { items, totalCount } }) => (Object.assign(Object.assign({}, state), { amortizedPayments: append ? [...state.amortizedPayments, ...items] : items, amortizedPaymentsTotalCount: totalCount, amortizedPaymentsCallState: LoadingState.Loaded }))), on(fetchAmortizationScheduleError, (state, { error }) => (Object.assign(Object.assign({}, state), { amortizedPaymentsCallState: { error } }))), on(fetchAmortizationPayment, (state) => (Object.assign(Object.assign({}, state), { amortizedPaymentCallState: LoadingState.Loading }))), on(fetchAmortizationPaymentSuccess, (state, { amortizedPayment }) => (Object.assign(Object.assign({}, state), { amortizedPayment, amortizedPaymentCallState: LoadingState.Loaded }))), on(fetchAmortizationPaymentError, (state, { error }) => (Object.assign(Object.assign({}, state), { amortizedPaymentCallState: { error } }))));
export function paymentScheduleReducer(state, action) {
    return reducer(state, action);
}
//# sourceMappingURL=reducer.js.map