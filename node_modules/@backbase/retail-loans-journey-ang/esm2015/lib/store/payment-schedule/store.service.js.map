{"version":3,"file":"store.service.js","sourceRoot":"","sources":["../../../../../../../libs/retail-loans-journey/src/lib/store/payment-schedule/store.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AAKpC,OAAO,EACL,sBAAsB,EACtB,+BAA+B,EAC/B,uBAAuB,EACvB,gCAAgC,EAChC,kCAAkC,EAClC,iCAAiC,GAClC,MAAM,aAAa,CAAC;AAGrB,OAAO,EAAE,wBAAwB,EAAE,yBAAyB,EAAE,MAAM,WAAW,CAAC;;;AAGhF,MAAM,OAAO,2BAA2B;IA8BtC,YAA6B,KAAkC;QAAlC,UAAK,GAAL,KAAK,CAA6B;QA7B/D;;WAEG;QACM,gCAA2B,GAA0B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,gCAAgC,CAAC,CAAC;QAClH;;WAEG;QACM,uBAAkB,GACzB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;QAE7C;;WAEG;QACM,+BAA0B,GAA0B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,+BAA+B,CAAC,CAAC;QAChH;;WAEG;QACM,sBAAiB,GACxB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;QAE5C;;WAEG;QACM,iCAA4B,GAAuB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,iCAAiC,CAAC,CAAC;QACjH;;WAEG;QACM,kCAA6B,GAAuB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,kCAAkC,CAAC,CAAC;IAEjD,CAAC;IAEnE;;OAEG;IACH,yBAAyB,CAAC,MAAqC;QAC7D,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,yBAAyB,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED;;OAEG;IACH,wBAAwB,CAAC,MAA2C;QAClE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,wBAAwB,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IAC5D,CAAC;;4IA5CU,2BAA2B;gJAA3B,2BAA2B;4FAA3B,2BAA2B;kBADvC,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { PresentationAmortizationPayment, GetAmortizationPaymentRequestParams } from '@backbase/data-ang/loans';\n\nimport {\n  selectAmortizedPayment,\n  selectAmortizedPaymentCallState,\n  selectAmortizedPayments,\n  selectAmortizedPaymentsCallState,\n  selectAmortizedPaymentsCurrentPage,\n  selectAmortizedPaymentsTotalCount,\n} from './selectors';\nimport { CallState } from '../../models/call-state.model';\nimport { GetAmortizationScheduleParams, PaymentScheduleState } from './store.model';\nimport { fetchAmortizationPayment, fetchAmortizationSchedule } from './actions';\n\n@Injectable()\nexport class PaymentScheduleStoreService {\n  /**\n   * Stream of api call state for fetching scheduled amortized payments\n   */\n  readonly amortizedPaymentsCallState$: Observable<CallState> = this.store.select(selectAmortizedPaymentsCallState);\n  /**\n   * Stream of scheduled amortized payments\n   */\n  readonly amortizedPayments$: Observable<PresentationAmortizationPayment[]> =\n    this.store.select(selectAmortizedPayments);\n\n  /**\n   * Stream of api call state for fetching scheduled amortized payment\n   */\n  readonly amortizedPaymentCallState$: Observable<CallState> = this.store.select(selectAmortizedPaymentCallState);\n  /**\n   * Stream of scheduled amortized payment\n   */\n  readonly amortizedPayment$: Observable<PresentationAmortizationPayment | undefined> =\n    this.store.select(selectAmortizedPayment);\n\n  /**\n   * Stream represents total pages count for scheduled amortized payments\n   */\n  readonly amortizedPaymentsTotalCount$: Observable<number> = this.store.select(selectAmortizedPaymentsTotalCount);\n  /**\n   * Stream represents current loaded page for payment schedule table/list\n   */\n  readonly amortizedPaymentsCurrentPage$: Observable<number> = this.store.select(selectAmortizedPaymentsCurrentPage);\n\n  constructor(private readonly store: Store<PaymentScheduleState>) {}\n\n  /**\n   * Fetch amortized payment schedule\n   */\n  fetchAmortizationSchedule(params: GetAmortizationScheduleParams): void {\n    this.store.dispatch(fetchAmortizationSchedule({ params }));\n  }\n\n  /**\n   * Fetch amortized payment\n   */\n  fetchAmortizationPayment(params: GetAmortizationPaymentRequestParams): void {\n    this.store.dispatch(fetchAmortizationPayment({ params }));\n  }\n}\n"]}