import { map } from 'rxjs/operators';
import { LoadingState } from '../models/call-state.model';
/**
 * Helper function to extract error, if there is one.
 *
 * @param callState - call sate
 */
export function getCallStateError(callState) {
    if (callState.error !== undefined) {
        return callState.error;
    }
    return null;
}
/**
 * Checks for initial state
 *
 * @param callStates - call states
 */
export function isInitialState(...callStates) {
    return callStates.some((state) => state === LoadingState.Init);
}
/**
 * Checks for loading state
 *
 * @param callStates - call states
 */
export function isLoadingState(...callStates) {
    return callStates.some((state) => state === LoadingState.Loading);
}
/**
 * Checks for error state
 *
 * @param callStates - call states
 */
export function isErrorState(...callStates) {
    return callStates.some((state) => Object.prototype.hasOwnProperty.call(state, 'error'));
}
/**
 * Checks for loaded state
 *
 * @param callStates - call states
 */
export function isLoadedState(...callStates) {
    return callStates.every((state) => state === LoadingState.Loaded);
}
/**
 * Operator state map operator
 *
 * @param fn - state mapper function
 */
export function stateMap(fn) {
    return (source) => source.pipe(map((state) => fn.call(null, ...(Array.isArray(state) ? state : [state]))));
}
//# sourceMappingURL=call-state.util.js.map