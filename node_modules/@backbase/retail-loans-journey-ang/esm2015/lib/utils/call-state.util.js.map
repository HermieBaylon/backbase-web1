{"version":3,"file":"call-state.util.js","sourceRoot":"","sources":["../../../../../../libs/retail-loans-journey/src/lib/utils/call-state.util.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAErC,OAAO,EAAyB,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAEjF;;;;GAIG;AACH,MAAM,UAAU,iBAAiB,CAAC,SAAoB;IACpD,IAAK,SAAwB,CAAC,KAAK,KAAK,SAAS,EAAE;QACjD,OAAQ,SAAwB,CAAC,KAAK,CAAC;KACxC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,cAAc,CAAC,GAAG,UAAuB;IACvD,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,KAAK,YAAY,CAAC,IAAI,CAAC,CAAC;AACjE,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,cAAc,CAAC,GAAG,UAAuB;IACvD,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,KAAK,YAAY,CAAC,OAAO,CAAC,CAAC;AACpE,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,YAAY,CAAC,GAAG,UAAuB;IACrD,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;AAC1F,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,aAAa,CAAC,GAAG,UAAuB;IACtD,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,KAAK,YAAY,CAAC,MAAM,CAAC,CAAC;AACpE,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,QAAQ,CAAC,EAAuC;IAC9D,OAAO,CAAC,MAA2C,EAAuB,EAAE,CAC1E,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5F,CAAC","sourcesContent":["import { Observable, OperatorFunction } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CallState, ErrorState, LoadingState } from '../models/call-state.model';\n\n/**\n * Helper function to extract error, if there is one.\n *\n * @param callState - call sate\n */\nexport function getCallStateError(callState: CallState): string | null {\n  if ((callState as ErrorState).error !== undefined) {\n    return (callState as ErrorState).error;\n  }\n\n  return null;\n}\n\n/**\n * Checks for initial state\n *\n * @param callStates - call states\n */\nexport function isInitialState(...callStates: CallState[]): boolean {\n  return callStates.some((state) => state === LoadingState.Init);\n}\n\n/**\n * Checks for loading state\n *\n * @param callStates - call states\n */\nexport function isLoadingState(...callStates: CallState[]): boolean {\n  return callStates.some((state) => state === LoadingState.Loading);\n}\n\n/**\n * Checks for error state\n *\n * @param callStates - call states\n */\nexport function isErrorState(...callStates: CallState[]): boolean {\n  return callStates.some((state) => Object.prototype.hasOwnProperty.call(state, 'error'));\n}\n\n/**\n * Checks for loaded state\n *\n * @param callStates - call states\n */\nexport function isLoadedState(...callStates: CallState[]): boolean {\n  return callStates.every((state) => state === LoadingState.Loaded);\n}\n\n/**\n * Operator state map operator\n *\n * @param fn - state mapper function\n */\nexport function stateMap(fn: (...states: CallState[]) => boolean): OperatorFunction<CallState | CallState[], boolean> {\n  return (source: Observable<CallState | CallState[]>): Observable<boolean> =>\n    source.pipe(map((state) => fn.call(null, ...(Array.isArray(state) ? state : [state]))));\n}\n"]}