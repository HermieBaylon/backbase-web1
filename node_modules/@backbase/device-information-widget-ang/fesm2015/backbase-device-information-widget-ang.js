import * as i1$3 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, Input, EventEmitter, Output, Directive, Injectable, Optional, ViewChild, NgModule } from '@angular/core';
import * as i1 from '@backbase/ui-ang';
import { HeaderModule, LoadingIndicatorModule, ErrorCommonStateModule, IconModule, ButtonModule, InputValidationMessageModule, InputTextModule, LoadButtonModule, DropdownMenuModule, ModalModule, NotificationModule, EmptyStateModule, BadgeModule } from '@backbase/ui-ang';
import * as i5 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1$2 from '@backbase/data-ang/device';
import { DeviceStatus } from '@backbase/data-ang/device';
export { DeviceStatus } from '@backbase/data-ang/device';
import * as i1$1 from '@angular/forms';
import { Validators, ReactiveFormsModule } from '@angular/forms';
import { of, BehaviorSubject, Observable } from 'rxjs';
import { map, first, tap, catchError, switchMap } from 'rxjs/operators';

class DeviceVendorModelComponent {
}
DeviceVendorModelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceVendorModelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DeviceVendorModelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeviceVendorModelComponent, selector: "bb-device-vendor-model-ui", inputs: { device: "device" }, ngImport: i0, template: "<ng-container *ngIf=\"device?.vendor && device?.model; else defaultVendor\">\n  <span \n    class=\"break-word\"\n    i18n=\"Device vendor text@@bb-device-vendor-model-ui.text\"\n    data-role=\"device-vendor-model\">\n    {{ device?.vendor }} '{{ device?.model }}'\n  </span>\n</ng-container>\n\n<ng-template #defaultVendor>\n  <span\n    i18n=\"Device vendor default text@@bb-device-vendor-model-ui.text-default\"\n    data-role=\"device-vendor-model-default\">\n    Unknown\n  </span>\n</ng-template>\n", directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceVendorModelComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-device-vendor-model-ui',
                    templateUrl: './device-vendor-model.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { device: [{
                type: Input
            }] } });

class DeviceRegisteredOnComponent {
}
DeviceRegisteredOnComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceRegisteredOnComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DeviceRegisteredOnComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeviceRegisteredOnComponent, selector: "bb-device-registered-on-ui", inputs: { createdDate: "createdDate" }, ngImport: i0, template: "<div\n  *ngIf=\"createdDate\"\n  data-role=\"device-registered-on\"\n  i18n=\"Text describing when the device was registered@@bb-device-registered-on-ui.registration-date.helper\">\n  Registered on: {{ createdDate | date :'medium' }}\n</div>", directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i5.DatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceRegisteredOnComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-device-registered-on-ui',
                    templateUrl: './device-registered-on.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { createdDate: [{
                type: Input
            }] } });

class DeviceConfirmationModalComponent {
    constructor() {
        /**
         * The text displayed on the confirmation button.
         * Defaults to an empty string.
         */
        this.confirmButtonText = '';
        /**
         * The color of the confirmation button.
         * Defaults to primary.
         */
        this.confirmButtonColor = 'primary';
        /**
         * The text displayed on the cancel button.
         * Defaults to an empty string.
         */
        this.cancelButtonText = '';
        /**
         * The heading text displayed on the modal.
         * Defaults to an empty string.
         */
        this.modalHeadingText = '';
        /**
         * The body text displayed on the modal.
         * Defaults to an empty string.
         */
        this.modalBodyText = '';
        /**
         * The icon name to display in the modal body.
         * Defaults to an empty string.
         */
        this.iconName = '';
        /**
         * Whether the modal is open.
         * Defaults to false.
         */
        this.isOpen = false;
        this.cancel = new EventEmitter();
        this.confirm = new EventEmitter();
        this.hostRef = this;
    }
    onCancel() {
        this.cancel.emit();
    }
    onConfirm() {
        this.confirm.emit();
    }
}
DeviceConfirmationModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceConfirmationModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DeviceConfirmationModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeviceConfirmationModalComponent, selector: "bb-device-confirmation-modal-ui", inputs: { device: "device", confirmButtonText: "confirmButtonText", confirmButtonColor: "confirmButtonColor", cancelButtonText: "cancelButtonText", modalHeadingText: "modalHeadingText", modalBodyText: "modalBodyText", iconName: "iconName", isOpen: "isOpen" }, outputs: { cancel: "cancel", confirm: "confirm" }, ngImport: i0, template: "<ng-container bbDeviceInformationConfirmationModalCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbDeviceInformationConfirmationModalCustomizable let-hostRef>\n  <bb-modal-ui [isOpen]=\"hostRef.isOpen\" (cancel)=\"hostRef.onCancel()\">\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          data-role=\"device-modal-header\"\n          [heading]=\"hostRef.modalHeadingText\">\n        </bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n  \n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        {{ hostRef.modalBodyText }}\n        <hr>\n        <div class=\"bb-stack\">\n          <bb-icon-ui class=\"bb-stack__item\" [name]=\"hostRef.iconName\" size=\"xl\"></bb-icon-ui>\n          <div class=\"bb-stack__item bb-stack__item--fill\">\n            <div class=\"break-word\">\n              <ng-container *ngIf=\"hostRef.device?.friendlyName as friendlyName; else defaultFriendlyName\">\n                {{ friendlyName }}\n              </ng-container>\n            </div>\n            <bb-device-vendor-model-ui\n              class=\"bb-subtitle bb-text-support\"\n              [device]=\"hostRef.device\">\n            </bb-device-vendor-model-ui>\n            <bb-device-registered-on-ui\n              class=\"bb-subheader bb-subheader--regular bb-text-support\"\n              [createdDate]=\"hostRef.device?.created\">\n            </bb-device-registered-on-ui>\n          </div>\n        </div>\n        <hr class=\"bb-block bb-block--no-margin\">\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <button bbButton\n          color=\"secondary\"\n          data-role=\"modal-cancel\"\n          (click)=\"hostRef.onCancel()\">\n          {{ hostRef.cancelButtonText }}\n        </button>\n        <button bbButton\n          data-role=\"modal-confirm\"\n          [color]=\"hostRef.confirmButtonColor\"\n          (click)=\"hostRef.onConfirm()\">\n          {{ hostRef.confirmButtonText }}\n        </button>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n  \n  <ng-template #defaultFriendlyName\n    i18n=\"Modal default friendly name@@bb-device-confirmation-modal-ui.default-friendly-name\">\n    Unknown Device\n  </ng-template>\n</ng-template>", components: [{ type: i0.forwardRef(function () { return i1.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i1.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i1.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i1.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return DeviceVendorModelComponent; }), selector: "bb-device-vendor-model-ui", inputs: ["device"] }, { type: i0.forwardRef(function () { return DeviceRegisteredOnComponent; }), selector: "bb-device-registered-on-ui", inputs: ["createdDate"] }, { type: i0.forwardRef(function () { return i1.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i0.forwardRef(function () { return DeviceInformationConfirmationModalCustomizableDirective; }), selector: "[bbDeviceInformationConfirmationModalCustomizable]" }, { type: i0.forwardRef(function () { return i1.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0.forwardRef(function () { return i1.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i5.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i1.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0.forwardRef(function () { return i1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceConfirmationModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-device-confirmation-modal-ui',
                    templateUrl: './device-confirmation-modal.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { device: [{
                type: Input
            }], confirmButtonText: [{
                type: Input
            }], confirmButtonColor: [{
                type: Input
            }], cancelButtonText: [{
                type: Input
            }], modalHeadingText: [{
                type: Input
            }], modalBodyText: [{
                type: Input
            }], iconName: [{
                type: Input
            }], isOpen: [{
                type: Input
            }], cancel: [{
                type: Output
            }], confirm: [{
                type: Output
            }] } });
class DeviceInformationConfirmationModalCustomizableDirective extends BbTemplate {
}
DeviceInformationConfirmationModalCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationConfirmationModalCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
DeviceInformationConfirmationModalCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: DeviceInformationConfirmationModalCustomizableDirective, selector: "[bbDeviceInformationConfirmationModalCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationConfirmationModalCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbDeviceInformationConfirmationModalCustomizable]',
                }]
        }] });

var UpdateAction;
(function (UpdateAction) {
    UpdateAction[UpdateAction["Suspend"] = 0] = "Suspend";
    UpdateAction[UpdateAction["Restore"] = 1] = "Restore";
    UpdateAction[UpdateAction["Remove"] = 2] = "Remove";
    UpdateAction[UpdateAction["Save"] = 3] = "Save";
})(UpdateAction || (UpdateAction = {}));

class DeviceListItemComponent {
    constructor() {
        /**
         * Whether the manage button is disabled.
         * Defaults to false.
         */
        this.isManageDisabled = false;
        this.manage = new EventEmitter();
        this.remove = new EventEmitter();
        this.restore = new EventEmitter();
        this.suspend = new EventEmitter();
        this.isRestoring = false;
        this.isRemoving = false;
        this.isSuspending = false;
        this.icon = '';
    }
    ngOnInit() {
        if (this.device) {
            this.icon = this.device.vendor === 'Apple' ? 'phone-iphone' : 'phone-android';
        }
    }
    isDeviceDisabled() {
        return this.device && this.device.status === DeviceStatus.DISABLED;
    }
    isDeviceRemoved() {
        return this.device && this.device.status === DeviceStatus.REMOVED;
    }
    onManage() {
        this.manage.emit();
    }
    onRestore() {
        if (this.device) {
            this.restore.emit(this.device);
            this.isRestoring = false;
        }
    }
    onRemove() {
        if (this.device) {
            this.remove.emit(this.device);
            this.isRemoving = false;
        }
    }
    onSuspend() {
        if (this.device) {
            this.suspend.emit(this.device);
            this.isSuspending = false;
        }
    }
}
DeviceListItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceListItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DeviceListItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeviceListItemComponent, selector: "bb-device-list-item-ui", inputs: { device: "device", isManageDisabled: "isManageDisabled" }, outputs: { manage: "manage", remove: "remove", restore: "restore", suspend: "suspend" }, ngImport: i0, template: "<div class=\"bb-stack\" data-role=\"device-item\">\n  <div class=\"bb-stack__item bb-stack__item--fill\" [class.bb-text-disabled]=\"isDeviceDisabled() || isDeviceRemoved()\">\n    <div class=\"bb-stack\">\n      <bb-icon-ui\n        size=\"xl\"\n        data-role=\"device-item-icon\"\n        class=\"bb-stack__item\"\n        [name]=\"icon\">\n      </bb-icon-ui>\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <div class=\"break-word\">\n          <ng-container *ngIf=\"device?.friendlyName; else defaultFriendlyName\">\n            <span data-role=\"device-item-friendly-name\">{{ device?.friendlyName }}</span>\n          </ng-container>\n        </div>\n        <small [ngClass]=\"isDeviceDisabled() || isDeviceRemoved() ? 'bb-text-disabled' : 'bb-text-support'\">\n          <bb-device-vendor-model-ui [device]=\"device\"></bb-device-vendor-model-ui>\n        </small>\n        <bb-device-registered-on-ui\n          class=\"bb-subheader bb-subheader--regular\"\n          [ngClass]=\"isDeviceDisabled() || isDeviceRemoved() ? 'bb-text-disabled' : 'bb-text-support'\"\n          [createdDate]=\"device?.created\">\n        </bb-device-registered-on-ui>\n      </div>\n    </div>\n  </div>\n  <div class=\"bb-stack__item\">\n    <div class=\"bb-stack\">\n      <bb-badge-ui\n        *ngIf=\"isDeviceDisabled()\"\n        class=\"bb-stack__item\"\n        color=\"danger\"\n        data-role=\"device-item-badge-disabled\"\n        i18n-text=\"Device disabled badge@@bb-device-list-item-ui.badge.disabled\"\n        text=\"SUSPENDED\">\n      </bb-badge-ui>\n      <bb-badge-ui\n        *ngIf=\"isDeviceRemoved()\"\n        class=\"bb-stack__item\"\n        color=\"secondary\"\n        data-role=\"device-item-badge-removed\"\n        i18n-text=\"Device removed badge@@bb-device-list-item-ui.badge.removed\"\n        text=\"REMOVED\">\n      </bb-badge-ui>\n      <bb-dropdown-menu-ui\n        class=\"bb-stack__item\"\n        [class.invisible]=\"isDeviceRemoved()\"\n        icon=\"ellipsis-h\"\n        btnColor=\"link\"\n        dropDownButtonLabel=\"Manage device {{ device?.friendlyName || 'Unknown' }}\"\n        i18n-dropDownButtonLabel=\"Device list item dropdown menu aria label@@bb-device-list-item-ui.dropdown.aria\"\n        data-role=\"device-item-menu\"\n        [btnCircle]=\"true\"\n        [disabled]=\"isManageDisabled\">\n        <ng-template bbDropdownMenuItem>\n          <ng-container *ngIf=\"!isDeviceDisabled() ; else disabledDeviceMenuItems\">\n            <button\n              role=\"menuitem\"\n              class=\"dropdown-item\"\n              data-role=\"device-item-edit\"\n              i18n=\"Device list item edit name text@@bb-device-list-item-ui.edit\"\n              (click)=\"onManage()\">\n              Edit name\n            </button>\n            <button\n              role=\"menuitem\"\n              class=\"dropdown-item\"\n              data-role=\"device-item-suspend\"\n              i18n=\"Device list item suspend text@@bb-device-list-item-ui.suspend\"\n              (click)=\"isSuspending = true\">\n              Suspend device\n            </button>\n          </ng-container>\n          <button\n            role=\"menuitem\"\n            class=\"dropdown-item\"\n            data-role=\"device-item-remove\"\n            i18n=\"Device list item remove text@@bb-device-list-item-ui.remove\"\n            (click)=\"isRemoving = true\">\n            Remove device\n          </button>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </div>\n  </div>\n</div>\n\n<ng-template #defaultFriendlyName i18n=\"Default friendly name@@bb-device-list-item-ui.default-friendly-name\">\n  <span data-role=\"device-item-friendly-name-default\">Unknown Device</span>\n</ng-template>\n\n<ng-template #disabledDeviceMenuItems>\n  <button\n    role=\"menuitem\"\n    class=\"dropdown-item\"\n    data-role=\"device-item-restore\"\n    i18n=\"Device list item restore text@@bb-device-list-item-ui.restore\"\n    (click)=\"isRestoring = true\">\n    Restore device\n  </button>\n</ng-template>\n\n<bb-device-confirmation-modal-ui\n  i18n-cancelButtonText=\"Suspended Modal cancel button text@@bb-device-list-item-ui.modal.suspended.cancel-text\"\n  cancelButtonText=\"Cancel\"\n  i18n-confirmButtonText=\"Suspended Modal confirm button text@@bb-device-list-item-ui.modal.suspended.confirm-text\"\n  confirmButtonText=\"Suspend device\"\n  i18n-modalHeadingText=\"Suspended Modal heading@@bbb-device-list-item-ui.modal.suspended.heading\"\n  modalHeadingText=\"Confirm device suspension\"\n  i18n-modalBodyText=\"Suspended Modal body@@bb-device-list-item-ui.modal.suspended.body\"\n  modalBodyText=\"Are you sure that you wish to suspend the following device?\"\n  [isOpen]=\"isSuspending\"\n  [device]=\"device\"\n  [iconName]=\"icon\"\n  (cancel)=\"isSuspending = false\"\n  (confirm)=\"onSuspend();\">\n</bb-device-confirmation-modal-ui>\n\n<bb-device-confirmation-modal-ui\n  i18n-cancelButtonText=\"Restored Modal cancel button text@@bb-device-list-item-ui.modal.restored.cancel-text\"\n  cancelButtonText=\"Cancel\"\n  i18n-confirmButtonText=\"Restored Modal confirm button text@@bb-device-list-item-ui.modal.restored.confirm-text\"\n  confirmButtonText=\"Restore device\"\n  i18n-modalHeadingText=\"Restored Modal heading@@bbb-device-list-item-ui.modal.restored.heading\"\n  modalHeadingText=\"Confirm device restoration\"\n  i18n-modalBodyText=\"Restored Modal body@@bb-device-list-item-ui.modal.restored.body\"\n  modalBodyText=\"Are you sure that you wish to restore the following device?\"\n  [isOpen]=\"isRestoring\"\n  [device]=\"device\"\n  [iconName]=\"icon\"\n  (cancel)=\"isRestoring = false\"\n  (confirm)=\"onRestore()\">\n</bb-device-confirmation-modal-ui>\n\n<bb-device-confirmation-modal-ui\n  confirmButtonColor=\"danger\"\n  i18n-cancelButtonText=\"Removed Modal cancel button text@@bb-device-list-item-ui.modal.removed.cancel-text\"\n  cancelButtonText=\"Keep device\"\n  i18n-confirmButtonText=\"Removed Modal confirm button text@@bb-device-list-item-ui.modal.removed.confirm-text\"\n  confirmButtonText=\"Remove device\"\n  i18n-modalHeadingText=\"Removed Modal heading@@bbb-device-list-item-ui.modal.removed.heading\"\n  modalHeadingText=\"Confirm device removal\"\n  i18n-modalBodyText=\"Removed Modal body@@bb-device-list-item-ui.modal.removed.body\"\n  modalBodyText=\"Are you sure that you wish to remove the following device?\"\n  [isOpen]=\"isRemoving\"\n  [device]=\"device\"\n  [iconName]=\"icon\"\n  (cancel)=\"isRemoving = false\"\n  (confirm)=\"onRemove()\">\n</bb-device-confirmation-modal-ui>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: DeviceVendorModelComponent, selector: "bb-device-vendor-model-ui", inputs: ["device"] }, { type: DeviceRegisteredOnComponent, selector: "bb-device-registered-on-ui", inputs: ["createdDate"] }, { type: i1.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i1.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: DeviceConfirmationModalComponent, selector: "bb-device-confirmation-modal-ui", inputs: ["device", "confirmButtonText", "confirmButtonColor", "cancelButtonText", "modalHeadingText", "modalBodyText", "iconName", "isOpen"], outputs: ["cancel", "confirm"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceListItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-device-list-item-ui',
                    templateUrl: './device-list-item.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { device: [{
                type: Input
            }], isManageDisabled: [{
                type: Input
            }], manage: [{
                type: Output
            }], remove: [{
                type: Output
            }], restore: [{
                type: Output
            }], suspend: [{
                type: Output
            }] } });

class ManageDeviceFormComponent {
    constructor(formBuilder, cd) {
        this.formBuilder = formBuilder;
        this.cd = cd;
        /**
         * Whether the device is being saved.
         * Defaults to false.
         */
        this.isSaving = false;
        this.save = new EventEmitter();
        this.cancel = new EventEmitter();
        this.suspend = new EventEmitter();
        this.remove = new EventEmitter();
        this.isSubmitted = false;
        this.hostRef = this;
    }
    set device(value) {
        this.managedDevice = value;
    }
    /**
     * Sets the device to be managed.
     */
    get device() {
        if (this.managedDevice) {
            return this.managedDevice;
        }
        throw new Error('Device not set');
    }
    get control() {
        if (this.form) {
            return this.form.controls.friendlyName;
        }
        throw new Error('Form not set');
    }
    ngOnInit() {
        this.form = this.formBuilder.group({
            friendlyName: [this.device.friendlyName || '', Validators.required],
        });
    }
    onCancel() {
        this.cancel.emit();
    }
    onSave() {
        this.isSubmitted = true;
        this.control.markAsTouched();
        this.cd.markForCheck();
        if (this.form && this.form.valid) {
            this.save.emit(Object.assign(Object.assign({}, this.device), { friendlyName: this.control.value, oldFriendlyName: this.device.friendlyName }));
        }
    }
}
ManageDeviceFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageDeviceFormComponent, deps: [{ token: i1$1.FormBuilder }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ManageDeviceFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManageDeviceFormComponent, selector: "bb-manage-device-form-ui", inputs: { device: "device", isSaving: "isSaving" }, outputs: { save: "save", cancel: "cancel", suspend: "suspend", remove: "remove" }, ngImport: i0, template: "<ng-container bbDeviceInformationFormCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbDeviceInformationFormCustomizable let-hostRef>\n  <div data-role=\"device-form\">\n    <div class=\"bb-block bb-block--lg\">\n      <bb-header-ui\n        headingType=\"h3\"\n        i18n-heading=\"Manage Device form heading@@bb-manage-device-form-ui.heading\"\n        heading=\"Edit Name\">\n      </bb-header-ui>\n    </div>\n    <form [formGroup]=\"hostRef.form\" (submit)=\"hostRef.onSave()\">\n      <div class=\"form-group\">\n        <bb-input-text-ui\n          i18n-label=\"Friendly Name form field label@@bb-manage-device-form-ui.friendly-name-field.label\"\n          label=\"Name of device\"\n          class=\"bb-form-field bb-form-field--md\"\n          formControlName=\"friendlyName\"\n          data-role=\"device-form-friendly-name-input\"\n          [maxLength]=\"50\"\n          [autofocus]=\"true\">\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui [showErrors]=\"hostRef.isSubmitted\">\n          <span *ngIf=\"hostRef.control.errors?.required\"\n            data-role=\"device-form-friendly-name-required\"\n            i18n=\"Manage device form device required text@@bb-manage-device-form-ui.required\">\n            Device name required.\n          </span>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--xs\">\n        <span i18n=\"Device vendor and model helper text@@bb-manage-device-form-ui.device.helper\">\n          Device: \n        </span>\n        <bb-device-vendor-model-ui\n          [device]=\"hostRef.device\"\n          class=\"device-information__form-device-type\">\n        </bb-device-vendor-model-ui>\n      </div>\n      <div\n        *ngIf=\"hostRef.device?.created as createdDate\"\n        class=\"bb-block bb-block--lg bb-subtitle bb-text-support\">\n        <div *ngIf=\"!hostRef.createdDateFormat; else deviceRegisteredOn\">\n          <span\n            i18n=\"Device registration date helper text@@bb-manage-device-form-ui.registration-date.helper\">\n            Registered on:\n          </span>\n          {{ createdDate | date :'d MMM yyyy' }}\n        </div>\n        <ng-template #deviceRegisteredOn>\n          <bb-device-registered-on-ui [createdDate]=\"createdDate\"></bb-device-registered-on-ui>\n        </ng-template>\n      </div>\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <bb-load-button-ui\n          color=\"primary\"\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          i18n=\"Save changes button text@@bb-manage-device-form-ui.button.save\"\n          data-role=\"device-form-save\"\n          [disabled]=\"hostRef.isSaving\"\n          [isLoading]=\"hostRef.isSaving\">\n          Save changes\n        </bb-load-button-ui>\n        <button\n          bbButton\n          color=\"secondary\"\n          class=\"bb-button-bar__button\"\n          i18n=\"Cancel button text@@bb-manage-device-form-ui.button.cancel\"\n          data-role=\"device-form-cancel\"\n          [disabled]=\"hostRef.isSaving\"\n          (click)=\"hostRef.onCancel()\">\n          Cancel\n        </button>\n      </div>\n    </form>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i1.InputTextComponent; }), selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i0.forwardRef(function () { return i1.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return DeviceVendorModelComponent; }), selector: "bb-device-vendor-model-ui", inputs: ["device"] }, { type: i0.forwardRef(function () { return DeviceRegisteredOnComponent; }), selector: "bb-device-registered-on-ui", inputs: ["createdDate"] }, { type: i0.forwardRef(function () { return i1.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i0.forwardRef(function () { return DeviceInformationFormCustomizableDirective; }), selector: "[bbDeviceInformationFormCustomizable]" }, { type: i0.forwardRef(function () { return i1$1.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i1$1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i1$1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i1$1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1$1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i5.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "date": i0.forwardRef(function () { return i5.DatePipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageDeviceFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-device-form-ui',
                    templateUrl: './manage-device-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$1.FormBuilder }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { device: [{
                type: Input
            }], isSaving: [{
                type: Input
            }], save: [{
                type: Output
            }], cancel: [{
                type: Output
            }], suspend: [{
                type: Output
            }], remove: [{
                type: Output
            }] } });
class DeviceInformationFormCustomizableDirective extends BbTemplate {
}
DeviceInformationFormCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationFormCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
DeviceInformationFormCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: DeviceInformationFormCustomizableDirective, selector: "[bbDeviceInformationFormCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationFormCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbDeviceInformationFormCustomizable]',
                }]
        }] });

class DeviceInformationComponent {
    constructor() {
        /**
         * Whether the widget is loading.
         * Defaults to false.
         */
        this.isLoading = false;
        this.save = new EventEmitter();
        this.remove = new EventEmitter();
        this.suspend = new EventEmitter();
        this.restore = new EventEmitter();
        this.hostRef = this;
        this.isSavingState = false;
    }
    set isSaving(value) {
        this.isSavingState = value;
        if (!this.isSavingState) {
            this.toggleManageDevice();
        }
    }
    /**
     * Sets whether the device information is being saved.
     */
    get isSaving() {
        return this.isSavingState;
    }
    toggleManageDevice(index) {
        this.managedDeviceIndex = index;
    }
    isManagingDevice(index) {
        return index === this.managedDeviceIndex;
    }
    onRestore(device) {
        this.restore.emit(device);
    }
    onRemove(device) {
        this.remove.emit(device);
    }
    onSuspend(device) {
        this.suspend.emit(device);
    }
    onSave(device) {
        this.save.emit(device);
    }
}
DeviceInformationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DeviceInformationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeviceInformationComponent, selector: "bb-device-information-ui", inputs: { isSaving: "isSaving", devices: "devices", isLoading: "isLoading", errorState: "errorState" }, outputs: { save: "save", remove: "remove", suspend: "suspend", restore: "restore" }, ngImport: i0, template: "<ng-container bbDeviceInformationWidgetCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbDeviceInformationWidgetCustomizable let-hostRef>\n  <div class=\"card card-lg\">\n    <bb-header-ui\n      data-role=\"widget-header\"\n      headingType=\"h2\"\n      class=\"card-header\"\n      i18n-heading=\"Device information widget header@@bb-device-information-ui.header\"\n      heading=\"Device information\">\n    </bb-header-ui>\n\n    <div class=\"card-body\" *ngIf=\"hostRef.isLoading || hostRef.errorState\">\n      <bb-loading-indicator-ui *ngIf=\"hostRef.isLoading\"\n        i18n-text=\"Device information widget loading text@@bb-device-information-ui.loading\"\n        text=\"Loading...\">\n      </bb-loading-indicator-ui>\n\n      <bb-common-error-state-ui *ngIf=\"hostRef.errorState\"\n        class=\"bb-state-container\"\n        data-role=\"state-error\"\n        [error]=\"hostRef.errorState\">\n      </bb-common-error-state-ui>\n    </div>\n\n    <ng-container *ngIf=\"!hostRef.isLoading && !hostRef.errorState && hostRef.devices\">\n      <ng-container *ngIf=\"hostRef.devices.length; else emptyState\">\n        <ng-container *ngFor=\"let device of hostRef.devices; index as i\">\n          <ng-container *ngIf=\"!hostRef.isManagingDevice(i); else managingDevice\">\n            <div class=\"card-section\">\n              <bb-device-list-item-ui\n                [device]=\"device\"\n                [isManageDisabled]=\"!hostRef.isManagingDevice()\"\n                (manage)=\"hostRef.toggleManageDevice(i)\"\n                (restore)=\"hostRef.onRestore($event)\"\n                (remove)=\"hostRef.onRemove($event)\"\n                (suspend)=\"hostRef.onSuspend($event)\">\n              </bb-device-list-item-ui>\n            </div>\n          </ng-container>\n          <ng-template #managingDevice>\n            <div class=\"card-section card-section--highlight\">\n              <bb-manage-device-form-ui\n                [device]=\"device\"\n                [isSaving]=\"hostRef.isSaving\"\n                (save)=\"hostRef.onSave($event)\"\n                (cancel)=\"hostRef.toggleManageDevice()\">\n              </bb-manage-device-form-ui>\n            </div>\n          </ng-template>\n        </ng-container>\n      </ng-container>\n\n      <ng-template #emptyState>\n        <bb-empty-state-ui\n          class=\"bb-state-container\"\n          data-role=\"state-empty\"\n          title=\"No devices found\"\n          i18n-title=\"Device information widget empty list text@@bb-device-information-ui.empty\"\n          iconSize=\"xxl\"\n          iconModifier=\"phonelink-off\">\n        </bb-empty-state-ui>\n      </ng-template>\n    </ng-container>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i1.ErrorCommonStateComponent; }), selector: "bb-common-error-state-ui", inputs: ["error"] }, { type: i0.forwardRef(function () { return DeviceListItemComponent; }), selector: "bb-device-list-item-ui", inputs: ["device", "isManageDisabled"], outputs: ["manage", "remove", "restore", "suspend"] }, { type: i0.forwardRef(function () { return ManageDeviceFormComponent; }), selector: "bb-manage-device-form-ui", inputs: ["device", "isSaving"], outputs: ["save", "cancel", "suspend", "remove"] }, { type: i0.forwardRef(function () { return i1.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return DeviceInformationWidgetCustomizableDirective; }), selector: "[bbDeviceInformationWidgetCustomizable]" }, { type: i0.forwardRef(function () { return i5.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i5.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-device-information-ui',
                    templateUrl: './device-information.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isSaving: [{
                type: Input
            }], devices: [{
                type: Input
            }], isLoading: [{
                type: Input
            }], errorState: [{
                type: Input
            }], save: [{
                type: Output
            }], remove: [{
                type: Output
            }], suspend: [{
                type: Output
            }], restore: [{
                type: Output
            }] } });
class DeviceInformationWidgetCustomizableDirective extends BbTemplate {
}
DeviceInformationWidgetCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationWidgetCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
DeviceInformationWidgetCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: DeviceInformationWidgetCustomizableDirective, selector: "[bbDeviceInformationWidgetCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationWidgetCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbDeviceInformationWidgetCustomizable]',
                }]
        }] });

class UserDeviceInformationService {
    constructor(deviceManagementService) {
        this.deviceManagementService = deviceManagementService;
    }
    getDevices() {
        return this.deviceManagementService.getMyDevices().pipe(map(response => response.devices));
    }
    updateDevice(deviceId, patchDeviceRequest) {
        return this.deviceManagementService.patchMyDeviceByDeviceId({
            deviceId,
            patchDeviceRequest,
        });
    }
    removeDevice(deviceId) {
        return this.deviceManagementService.deleteMyDeviceByDeviceId({ deviceId });
    }
}
UserDeviceInformationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserDeviceInformationService, deps: [{ token: i1$2.ManageMyDevicesService }], target: i0.ɵɵFactoryTarget.Injectable });
UserDeviceInformationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserDeviceInformationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserDeviceInformationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$2.ManageMyDevicesService }]; } });

class AdminDeviceInformationService {
    constructor(deviceManagementService) {
        this.deviceManagementService = deviceManagementService;
        this.dbsUserId = '';
    }
    getDevices() {
        return this.deviceManagementService
            .getDevicesByDbsUserId({ dbsUserId: this.dbsUserId })
            .pipe(map(response => response.devices));
    }
    updateDevice(deviceId, patchDeviceRequest) {
        return this.deviceManagementService.patchUserDeviceByDbsUserIdAndDeviceId({
            dbsUserId: this.dbsUserId,
            deviceId,
            patchDeviceRequest,
        });
    }
    removeDevice(deviceId) {
        return this.deviceManagementService.deleteUserDeviceByDeviceId({
            dbsUserId: this.dbsUserId,
            deviceId,
        });
    }
    set dbsUserIdInput(userId) {
        this.dbsUserId = userId;
    }
    get dbsUserIdInput() {
        return this.dbsUserId;
    }
}
AdminDeviceInformationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AdminDeviceInformationService, deps: [{ token: i1$2.ManageOtherUsersDevicesService }], target: i0.ɵɵFactoryTarget.Injectable });
AdminDeviceInformationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AdminDeviceInformationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AdminDeviceInformationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$2.ManageOtherUsersDevicesService }]; } });

const defaultProperties = {
    dismissTimeout: 3,
    isAdminWidget: false,
};
class DeviceInformationPreferenceService {
    constructor(model) {
        this.model = model;
    }
    getTimeoutPreference() {
        return this.model
            ? this.model.property('dismissTimeout', defaultProperties.dismissTimeout)
            : of(defaultProperties.dismissTimeout);
    }
    getAdminPreference() {
        return this.model
            ? this.model
                .property('isAdminWidget', JSON.stringify(defaultProperties.isAdminWidget))
                .pipe(map((value) => !!value && value !== 'false'))
            : of(defaultProperties.isAdminWidget);
    }
}
DeviceInformationPreferenceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationPreferenceService, deps: [{ token: i1$3.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
DeviceInformationPreferenceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationPreferenceService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationPreferenceService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$3.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });

class DeviceInformationWidgetComponent {
    constructor(userDataService, adminDataService, notificationService, preferenceService) {
        this.userDataService = userDataService;
        this.adminDataService = adminDataService;
        this.notificationService = notificationService;
        this.preferenceService = preferenceService;
        this.successHeader = '';
        this.successMessage = '';
        this.failureHeader = '';
        this.failureMessage = '';
        this.failurePermissionsMessage = '';
        this.updateActions = UpdateAction;
        this.refreshDevicesSubject = new BehaviorSubject(undefined);
        this.isLoadingSubject = new BehaviorSubject(false);
        this.isSavingSubject = new BehaviorSubject(false);
        this.errorSubject = new BehaviorSubject(undefined);
        this.dismissTimeout = 3000;
        this.isAdminWidget = false;
        this.isLoading = this.isLoadingSubject.asObservable();
        this.isSaving = this.isSavingSubject.asObservable();
        this.errorState = this.errorSubject.asObservable();
        this.devices = this.getDevicesObservable();
        this.onError = (err) => {
            this.notificationService.showNotification({
                header: this.failureHeader,
                message: this.getErrorMessage(err),
                messageContext: {
                    device: this.managedDevice,
                },
                modifier: 'error',
                ttl: this.dismissTimeout,
            });
            return new Observable();
        };
        this.onSuccess = () => {
            this.notificationService.showNotification({
                header: this.successHeader,
                headerContext: {
                    actionType: this.updateAction,
                },
                message: this.successMessage,
                messageContext: {
                    actionType: this.updateAction,
                    device: this.managedDevice,
                },
                modifier: 'success',
                ttl: this.dismissTimeout,
            });
            this.refreshDevicesSubject.next(undefined);
        };
    }
    set dbsUserId(inputUserId) {
        this.adminDataService.dbsUserIdInput = inputUserId;
    }
    /**
     * Sets the id for the user to get device information for.
     */
    get dbsUserId() {
        return this.adminDataService.dbsUserIdInput;
    }
    ngOnInit() {
        if (this.notificationDismissTime) {
            this.dismissTimeout = this.notificationDismissTime * 1000;
        }
        else {
            this.preferenceService
                .getTimeoutPreference()
                .pipe(first())
                .subscribe(time => (this.dismissTimeout = time * 1000));
        }
        if (typeof this.isAdmin === 'boolean') {
            this.isAdminWidget = this.isAdmin;
        }
        else {
            this.preferenceService
                .getAdminPreference()
                .pipe(first())
                .subscribe(adminPreference => (this.isAdminWidget = adminPreference));
        }
    }
    getFriendlyName(defaultValue, modifiedDevice) {
        const device = modifiedDevice || this.managedDevice;
        return device && device.friendlyName ? `'${device.friendlyName}'` : defaultValue;
    }
    getOldFriendlyName(defaultValue, modifiedDevice) {
        const device = modifiedDevice || this.managedDevice;
        return device && device.oldFriendlyName ? `'${device.oldFriendlyName}'` : defaultValue;
    }
    onSave(device) {
        this.isSavingSubject.next(true);
        this.updateAction = UpdateAction.Save;
        this.managedDevice = device;
        this.dataService
            .updateDevice(device.deviceId, {
            friendlyName: device.friendlyName,
        })
            .pipe(tap(() => this.isSavingSubject.next(false)), catchError((err) => {
            this.isSavingSubject.next(false);
            return this.onError(err);
        }))
            .subscribe(this.onSuccess);
    }
    onRemove(device) {
        this.updateAction = UpdateAction.Remove;
        this.managedDevice = device;
        this.dataService
            .removeDevice(device.deviceId)
            .pipe(catchError(this.onError))
            .subscribe(this.onSuccess);
    }
    onSuspend(device) {
        this.updateAction = UpdateAction.Suspend;
        this.managedDevice = device;
        this.updateDevice(device, DeviceStatus.DISABLED);
    }
    onRestore(device) {
        this.updateAction = UpdateAction.Restore;
        this.managedDevice = device;
        this.updateDevice(device, DeviceStatus.ENABLED);
    }
    getDevicesObservable() {
        return this.refreshDevicesSubject.pipe(switchMap(() => {
            this.errorSubject.next(undefined);
            this.isLoadingSubject.next(true);
            return this.dataService.getDevices();
        }), tap(() => {
            this.isLoadingSubject.next(false);
        }), catchError(error => {
            this.isLoadingSubject.next(false);
            this.errorSubject.next(error);
            return new Observable();
        }));
    }
    updateDevice(device, action) {
        this.dataService
            .updateDevice(device.deviceId, {
            status: action,
        })
            .pipe(catchError(this.onError))
            .subscribe(this.onSuccess);
    }
    getErrorMessage(error) {
        return (error.status === 403 ? this.failurePermissionsMessage : this.failureMessage);
    }
    get dataService() {
        return this.isAdminWidget ? this.adminDataService : this.userDataService;
    }
}
DeviceInformationWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationWidgetComponent, deps: [{ token: UserDeviceInformationService }, { token: AdminDeviceInformationService }, { token: i1.NotificationService }, { token: DeviceInformationPreferenceService }], target: i0.ɵɵFactoryTarget.Component });
DeviceInformationWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeviceInformationWidgetComponent, selector: "bb-device-information-widget", inputs: { notificationDismissTime: ["dismissTimeout", "notificationDismissTime"], isAdmin: ["isAdminWidget", "isAdmin"], dbsUserId: "dbsUserId" }, providers: [DeviceInformationPreferenceService, UserDeviceInformationService, AdminDeviceInformationService], viewQueries: [{ propertyName: "successHeader", first: true, predicate: ["notificationSuccessHeader"], descendants: true }, { propertyName: "successMessage", first: true, predicate: ["notificationSuccessMessage"], descendants: true }, { propertyName: "failureHeader", first: true, predicate: ["notificationFailureHeader"], descendants: true }, { propertyName: "failureMessage", first: true, predicate: ["notificationFailureMessage"], descendants: true }, { propertyName: "failurePermissionsMessage", first: true, predicate: ["notificationPermissionsFailureMessage"], descendants: true }], ngImport: i0, template: "<bb-device-information-ui\n  [devices]=\"devices | async\"\n  [isLoading]=\"isLoading | async\"\n  [isSaving]=\"isSaving | async\"\n  [errorState]=\"errorState | async\"\n  (save)=\"onSave($event)\"\n  (remove)=\"onRemove($event)\"\n  (suspend)=\"onSuspend($event)\"\n  (restore)=\"onRestore($event)\"\n></bb-device-information-ui>\n\n<ng-template #notificationSuccessHeader let-actionType=\"actionType\">\n  <ng-container [ngSwitch]=\"actionType\">\n    <div *ngSwitchCase=\"updateActions.Restore\"\n      data-role=\"notification-header-restored\"\n      i18n=\"Notification restored header@@bb-device-information-widget.notification.header.restored\">\n      Device restored\n    </div>\n    <div *ngSwitchCase=\"updateActions.Suspend\" \n      data-role=\"notification-header-suspended\"\n      i18n=\"Notification suspended header@@bb-device-information-widget.notification.header.suspended\">\n      Device suspended\n    </div>\n    <div *ngSwitchCase=\"updateActions.Remove\"\n      data-role=\"notification-header-removed\"\n      i18n=\"Notification removed header@@bb-device-information-widget.notification.header.removed\">\n      Device removed\n    </div>\n    <div *ngSwitchCase=\"updateActions.Save\"\n      data-role=\"notification-header-saved\"\n      i18n=\"Notification saved header@@bb-device-information-widget.notification.header.saved\">\n      Device name changed\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #notificationSuccessMessage let-actionType=\"actionType\" let-device=\"device\">\n  <ng-container [ngSwitch]=\"actionType\">\n    <div *ngSwitchCase=\"updateActions.Restore\"\n      i18n=\"Notification restored message@@bb-device-information-widget.notification.message.restored\">\n      {{ getFriendlyName('Device', device) }} restored successfully.\n    </div>\n    <div *ngSwitchCase=\"updateActions.Suspend\"\n      i18n=\"Notification suspended message@@bb-device-information-widget.notification.message.suspended\">\n      {{ getFriendlyName('Device', device) }} suspended successfully.\n    </div>\n    <div *ngSwitchCase=\"updateActions.Remove\"\n      i18n=\"Notification removed message@@bb-device-information-widget.notification.message.removed\">\n      {{ getFriendlyName('Device', device) }} removed successfully.\n    </div>\n    <div *ngSwitchCase=\"updateActions.Save\"\n      i18n=\"Notification saved message@@bb-device-information-widget.notification.message.saved\">\n      {{ getFriendlyName('Device', device) }} name changed successfully.\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #notificationFailureHeader>\n  <div data-role=\"notification-header-failed\" i18n=\"Failure notification header@@bb-device-information-widget.notification.failure.header\">\n    Device update failed\n  </div>\n</ng-template>\n\n<ng-template #notificationFailureMessage let-device=\"device\">\n  <div i18n=\"Failure notification message@@bb-device-information-widget.notification.failure.message\">\n    Failed to update {{ getOldFriendlyName('device', device) }}.\n  </div>\n</ng-template>\n\n<ng-template #notificationPermissionsFailureMessage let-device=\"device\">\n  <div i18n=\"Permission failure notification message@@bb-device-information-widget.notification.permissions.failure.message\">\n    Insufficient permissions to update {{ getOldFriendlyName('device', device) }}.\n  </div>\n</ng-template>", components: [{ type: DeviceInformationComponent, selector: "bb-device-information-ui", inputs: ["isSaving", "devices", "isLoading", "errorState"], outputs: ["save", "remove", "suspend", "restore"] }], directives: [{ type: i5.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "async": i5.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-device-information-widget',
                    templateUrl: './device-information-widget.component.html',
                    providers: [DeviceInformationPreferenceService, UserDeviceInformationService, AdminDeviceInformationService],
                }]
        }], ctorParameters: function () { return [{ type: UserDeviceInformationService }, { type: AdminDeviceInformationService }, { type: i1.NotificationService }, { type: DeviceInformationPreferenceService }]; }, propDecorators: { successHeader: [{
                type: ViewChild,
                args: ['notificationSuccessHeader']
            }], successMessage: [{
                type: ViewChild,
                args: ['notificationSuccessMessage']
            }], failureHeader: [{
                type: ViewChild,
                args: ['notificationFailureHeader']
            }], failureMessage: [{
                type: ViewChild,
                args: ['notificationFailureMessage']
            }], failurePermissionsMessage: [{
                type: ViewChild,
                args: ['notificationPermissionsFailureMessage']
            }], notificationDismissTime: [{
                type: Input,
                args: ['dismissTimeout']
            }], isAdmin: [{
                type: Input,
                args: ['isAdminWidget']
            }], dbsUserId: [{
                type: Input
            }] } });

const componentModules = [
    DeviceInformationComponent,
    DeviceInformationWidgetComponent,
    DeviceListItemComponent,
    ManageDeviceFormComponent,
    DeviceVendorModelComponent,
    DeviceConfirmationModalComponent,
    DeviceRegisteredOnComponent,
];
const componentDirectives = [
    DeviceInformationWidgetCustomizableDirective,
    DeviceInformationFormCustomizableDirective,
    DeviceInformationConfirmationModalCustomizableDirective,
];
const uiModules = [
    HeaderModule,
    LoadingIndicatorModule,
    ErrorCommonStateModule,
    IconModule,
    ButtonModule,
    InputValidationMessageModule,
    InputTextModule,
    LoadButtonModule,
    DropdownMenuModule,
    ModalModule,
    NotificationModule,
    ReactiveFormsModule,
    EmptyStateModule,
    BadgeModule,
];
class DeviceInformationWidgetModule {
}
DeviceInformationWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DeviceInformationWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationWidgetModule, declarations: [DeviceInformationComponent,
        DeviceInformationWidgetComponent,
        DeviceListItemComponent,
        ManageDeviceFormComponent,
        DeviceVendorModelComponent,
        DeviceConfirmationModalComponent,
        DeviceRegisteredOnComponent, DeviceInformationWidgetCustomizableDirective,
        DeviceInformationFormCustomizableDirective,
        DeviceInformationConfirmationModalCustomizableDirective], imports: [CommonModule, i1$3.BackbaseCoreModule, HeaderModule,
        LoadingIndicatorModule,
        ErrorCommonStateModule,
        IconModule,
        ButtonModule,
        InputValidationMessageModule,
        InputTextModule,
        LoadButtonModule,
        DropdownMenuModule,
        ModalModule,
        NotificationModule,
        ReactiveFormsModule,
        EmptyStateModule,
        BadgeModule], exports: [DeviceInformationComponent,
        DeviceInformationWidgetComponent,
        DeviceListItemComponent,
        ManageDeviceFormComponent,
        DeviceVendorModelComponent,
        DeviceConfirmationModalComponent,
        DeviceRegisteredOnComponent, HeaderModule,
        LoadingIndicatorModule,
        ErrorCommonStateModule,
        IconModule,
        ButtonModule,
        InputValidationMessageModule,
        InputTextModule,
        LoadButtonModule,
        DropdownMenuModule,
        ModalModule,
        NotificationModule,
        ReactiveFormsModule,
        EmptyStateModule,
        BadgeModule, DeviceInformationWidgetCustomizableDirective,
        DeviceInformationFormCustomizableDirective,
        DeviceInformationConfirmationModalCustomizableDirective] });
DeviceInformationWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationWidgetModule, imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                classMap: { DeviceInformationWidgetComponent },
            }),
            ...uiModules,
        ], HeaderModule,
        LoadingIndicatorModule,
        ErrorCommonStateModule,
        IconModule,
        ButtonModule,
        InputValidationMessageModule,
        InputTextModule,
        LoadButtonModule,
        DropdownMenuModule,
        ModalModule,
        NotificationModule,
        ReactiveFormsModule,
        EmptyStateModule,
        BadgeModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { DeviceInformationWidgetComponent },
                        }),
                        ...uiModules,
                    ],
                    declarations: [...componentModules, ...componentDirectives],
                    exports: [...componentModules, ...uiModules, ...componentDirectives],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AdminDeviceInformationService, DeviceConfirmationModalComponent, DeviceInformationComponent, DeviceInformationPreferenceService, DeviceInformationWidgetComponent, DeviceInformationWidgetModule, DeviceRegisteredOnComponent, ManageDeviceFormComponent, UpdateAction, UserDeviceInformationService, DeviceInformationConfirmationModalCustomizableDirective as ӨDeviceInformationConfirmationModalCustomizableDirective, DeviceInformationFormCustomizableDirective as ӨDeviceInformationFormCustomizableDirective, DeviceInformationWidgetCustomizableDirective as ӨDeviceInformationWidgetCustomizableDirective, DeviceListItemComponent as ӨDeviceListItemComponent, DeviceVendorModelComponent as ӨDeviceVendorModelComponent };
//# sourceMappingURL=backbase-device-information-widget-ang.js.map
