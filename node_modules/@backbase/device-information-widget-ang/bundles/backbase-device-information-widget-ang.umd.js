(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@backbase/foundation-ang/core'), require('@angular/core'), require('@backbase/ui-ang'), require('@angular/common'), require('@backbase/data-ang/device'), require('@angular/forms'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@backbase/device-information-widget-ang', ['exports', '@backbase/foundation-ang/core', '@angular/core', '@backbase/ui-ang', '@angular/common', '@backbase/data-ang/device', '@angular/forms', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["device-information-widget-ang"] = {}), global.i1$2, global.ng.core, global.i1$1, global.ng.common, global.i1, global.ng.forms, global.rxjs, global.rxjs.operators));
})(this, (function (exports, i1$2, i0, i1$1, i5, i1, i1$3, rxjs, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$2);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1$1);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$3);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var DeviceVendorModelComponent = /** @class */ (function () {
        function DeviceVendorModelComponent() {
        }
        return DeviceVendorModelComponent;
    }());
    DeviceVendorModelComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceVendorModelComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    DeviceVendorModelComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeviceVendorModelComponent, selector: "bb-device-vendor-model-ui", inputs: { device: "device" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"device?.vendor && device?.model; else defaultVendor\">\n  <span \n    class=\"break-word\"\n    i18n=\"Device vendor text@@bb-device-vendor-model-ui.text\"\n    data-role=\"device-vendor-model\">\n    {{ device?.vendor }} '{{ device?.model }}'\n  </span>\n</ng-container>\n\n<ng-template #defaultVendor>\n  <span\n    i18n=\"Device vendor default text@@bb-device-vendor-model-ui.text-default\"\n    data-role=\"device-vendor-model-default\">\n    Unknown\n  </span>\n</ng-template>\n", directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceVendorModelComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-device-vendor-model-ui',
                        templateUrl: './device-vendor-model.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { device: [{
                    type: i0.Input
                }] } });

    var DeviceRegisteredOnComponent = /** @class */ (function () {
        function DeviceRegisteredOnComponent() {
        }
        return DeviceRegisteredOnComponent;
    }());
    DeviceRegisteredOnComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceRegisteredOnComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    DeviceRegisteredOnComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeviceRegisteredOnComponent, selector: "bb-device-registered-on-ui", inputs: { createdDate: "createdDate" }, ngImport: i0__namespace, template: "<div\n  *ngIf=\"createdDate\"\n  data-role=\"device-registered-on\"\n  i18n=\"Text describing when the device was registered@@bb-device-registered-on-ui.registration-date.helper\">\n  Registered on: {{ createdDate | date :'medium' }}\n</div>", directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i5__namespace.DatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceRegisteredOnComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-device-registered-on-ui',
                        templateUrl: './device-registered-on.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { createdDate: [{
                    type: i0.Input
                }] } });

    var DeviceConfirmationModalComponent = /** @class */ (function () {
        function DeviceConfirmationModalComponent() {
            /**
             * The text displayed on the confirmation button.
             * Defaults to an empty string.
             */
            this.confirmButtonText = '';
            /**
             * The color of the confirmation button.
             * Defaults to primary.
             */
            this.confirmButtonColor = 'primary';
            /**
             * The text displayed on the cancel button.
             * Defaults to an empty string.
             */
            this.cancelButtonText = '';
            /**
             * The heading text displayed on the modal.
             * Defaults to an empty string.
             */
            this.modalHeadingText = '';
            /**
             * The body text displayed on the modal.
             * Defaults to an empty string.
             */
            this.modalBodyText = '';
            /**
             * The icon name to display in the modal body.
             * Defaults to an empty string.
             */
            this.iconName = '';
            /**
             * Whether the modal is open.
             * Defaults to false.
             */
            this.isOpen = false;
            this.cancel = new i0.EventEmitter();
            this.confirm = new i0.EventEmitter();
            this.hostRef = this;
        }
        DeviceConfirmationModalComponent.prototype.onCancel = function () {
            this.cancel.emit();
        };
        DeviceConfirmationModalComponent.prototype.onConfirm = function () {
            this.confirm.emit();
        };
        return DeviceConfirmationModalComponent;
    }());
    DeviceConfirmationModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceConfirmationModalComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    DeviceConfirmationModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeviceConfirmationModalComponent, selector: "bb-device-confirmation-modal-ui", inputs: { device: "device", confirmButtonText: "confirmButtonText", confirmButtonColor: "confirmButtonColor", cancelButtonText: "cancelButtonText", modalHeadingText: "modalHeadingText", modalBodyText: "modalBodyText", iconName: "iconName", isOpen: "isOpen" }, outputs: { cancel: "cancel", confirm: "confirm" }, ngImport: i0__namespace, template: "<ng-container bbDeviceInformationConfirmationModalCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbDeviceInformationConfirmationModalCustomizable let-hostRef>\n  <bb-modal-ui [isOpen]=\"hostRef.isOpen\" (cancel)=\"hostRef.onCancel()\">\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          data-role=\"device-modal-header\"\n          [heading]=\"hostRef.modalHeadingText\">\n        </bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n  \n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        {{ hostRef.modalBodyText }}\n        <hr>\n        <div class=\"bb-stack\">\n          <bb-icon-ui class=\"bb-stack__item\" [name]=\"hostRef.iconName\" size=\"xl\"></bb-icon-ui>\n          <div class=\"bb-stack__item bb-stack__item--fill\">\n            <div class=\"break-word\">\n              <ng-container *ngIf=\"hostRef.device?.friendlyName as friendlyName; else defaultFriendlyName\">\n                {{ friendlyName }}\n              </ng-container>\n            </div>\n            <bb-device-vendor-model-ui\n              class=\"bb-subtitle bb-text-support\"\n              [device]=\"hostRef.device\">\n            </bb-device-vendor-model-ui>\n            <bb-device-registered-on-ui\n              class=\"bb-subheader bb-subheader--regular bb-text-support\"\n              [createdDate]=\"hostRef.device?.created\">\n            </bb-device-registered-on-ui>\n          </div>\n        </div>\n        <hr class=\"bb-block bb-block--no-margin\">\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <button bbButton\n          color=\"secondary\"\n          data-role=\"modal-cancel\"\n          (click)=\"hostRef.onCancel()\">\n          {{ hostRef.cancelButtonText }}\n        </button>\n        <button bbButton\n          data-role=\"modal-confirm\"\n          [color]=\"hostRef.confirmButtonColor\"\n          (click)=\"hostRef.onConfirm()\">\n          {{ hostRef.confirmButtonText }}\n        </button>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n  \n  <ng-template #defaultFriendlyName\n    i18n=\"Modal default friendly name@@bb-device-confirmation-modal-ui.default-friendly-name\">\n    Unknown Device\n  </ng-template>\n</ng-template>", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return DeviceVendorModelComponent; }), selector: "bb-device-vendor-model-ui", inputs: ["device"] }, { type: i0__namespace.forwardRef(function () { return DeviceRegisteredOnComponent; }), selector: "bb-device-registered-on-ui", inputs: ["createdDate"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i0__namespace.forwardRef(function () { return DeviceInformationConfirmationModalCustomizableDirective; }), selector: "[bbDeviceInformationConfirmationModalCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0__namespace.forwardRef(function () { return i5__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceConfirmationModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-device-confirmation-modal-ui',
                        templateUrl: './device-confirmation-modal.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { device: [{
                    type: i0.Input
                }], confirmButtonText: [{
                    type: i0.Input
                }], confirmButtonColor: [{
                    type: i0.Input
                }], cancelButtonText: [{
                    type: i0.Input
                }], modalHeadingText: [{
                    type: i0.Input
                }], modalBodyText: [{
                    type: i0.Input
                }], iconName: [{
                    type: i0.Input
                }], isOpen: [{
                    type: i0.Input
                }], cancel: [{
                    type: i0.Output
                }], confirm: [{
                    type: i0.Output
                }] } });
    var DeviceInformationConfirmationModalCustomizableDirective = /** @class */ (function (_super) {
        __extends(DeviceInformationConfirmationModalCustomizableDirective, _super);
        function DeviceInformationConfirmationModalCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return DeviceInformationConfirmationModalCustomizableDirective;
    }(i1$2.BbTemplate));
    DeviceInformationConfirmationModalCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceInformationConfirmationModalCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    DeviceInformationConfirmationModalCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: DeviceInformationConfirmationModalCustomizableDirective, selector: "[bbDeviceInformationConfirmationModalCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceInformationConfirmationModalCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbDeviceInformationConfirmationModalCustomizable]',
                    }]
            }] });

    exports.UpdateAction = void 0;
    (function (UpdateAction) {
        UpdateAction[UpdateAction["Suspend"] = 0] = "Suspend";
        UpdateAction[UpdateAction["Restore"] = 1] = "Restore";
        UpdateAction[UpdateAction["Remove"] = 2] = "Remove";
        UpdateAction[UpdateAction["Save"] = 3] = "Save";
    })(exports.UpdateAction || (exports.UpdateAction = {}));

    var DeviceListItemComponent = /** @class */ (function () {
        function DeviceListItemComponent() {
            /**
             * Whether the manage button is disabled.
             * Defaults to false.
             */
            this.isManageDisabled = false;
            this.manage = new i0.EventEmitter();
            this.remove = new i0.EventEmitter();
            this.restore = new i0.EventEmitter();
            this.suspend = new i0.EventEmitter();
            this.isRestoring = false;
            this.isRemoving = false;
            this.isSuspending = false;
            this.icon = '';
        }
        DeviceListItemComponent.prototype.ngOnInit = function () {
            if (this.device) {
                this.icon = this.device.vendor === 'Apple' ? 'phone-iphone' : 'phone-android';
            }
        };
        DeviceListItemComponent.prototype.isDeviceDisabled = function () {
            return this.device && this.device.status === i1.DeviceStatus.DISABLED;
        };
        DeviceListItemComponent.prototype.isDeviceRemoved = function () {
            return this.device && this.device.status === i1.DeviceStatus.REMOVED;
        };
        DeviceListItemComponent.prototype.onManage = function () {
            this.manage.emit();
        };
        DeviceListItemComponent.prototype.onRestore = function () {
            if (this.device) {
                this.restore.emit(this.device);
                this.isRestoring = false;
            }
        };
        DeviceListItemComponent.prototype.onRemove = function () {
            if (this.device) {
                this.remove.emit(this.device);
                this.isRemoving = false;
            }
        };
        DeviceListItemComponent.prototype.onSuspend = function () {
            if (this.device) {
                this.suspend.emit(this.device);
                this.isSuspending = false;
            }
        };
        return DeviceListItemComponent;
    }());
    DeviceListItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceListItemComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    DeviceListItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeviceListItemComponent, selector: "bb-device-list-item-ui", inputs: { device: "device", isManageDisabled: "isManageDisabled" }, outputs: { manage: "manage", remove: "remove", restore: "restore", suspend: "suspend" }, ngImport: i0__namespace, template: "<div class=\"bb-stack\" data-role=\"device-item\">\n  <div class=\"bb-stack__item bb-stack__item--fill\" [class.bb-text-disabled]=\"isDeviceDisabled() || isDeviceRemoved()\">\n    <div class=\"bb-stack\">\n      <bb-icon-ui\n        size=\"xl\"\n        data-role=\"device-item-icon\"\n        class=\"bb-stack__item\"\n        [name]=\"icon\">\n      </bb-icon-ui>\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <div class=\"break-word\">\n          <ng-container *ngIf=\"device?.friendlyName; else defaultFriendlyName\">\n            <span data-role=\"device-item-friendly-name\">{{ device?.friendlyName }}</span>\n          </ng-container>\n        </div>\n        <small [ngClass]=\"isDeviceDisabled() || isDeviceRemoved() ? 'bb-text-disabled' : 'bb-text-support'\">\n          <bb-device-vendor-model-ui [device]=\"device\"></bb-device-vendor-model-ui>\n        </small>\n        <bb-device-registered-on-ui\n          class=\"bb-subheader bb-subheader--regular\"\n          [ngClass]=\"isDeviceDisabled() || isDeviceRemoved() ? 'bb-text-disabled' : 'bb-text-support'\"\n          [createdDate]=\"device?.created\">\n        </bb-device-registered-on-ui>\n      </div>\n    </div>\n  </div>\n  <div class=\"bb-stack__item\">\n    <div class=\"bb-stack\">\n      <bb-badge-ui\n        *ngIf=\"isDeviceDisabled()\"\n        class=\"bb-stack__item\"\n        color=\"danger\"\n        data-role=\"device-item-badge-disabled\"\n        i18n-text=\"Device disabled badge@@bb-device-list-item-ui.badge.disabled\"\n        text=\"SUSPENDED\">\n      </bb-badge-ui>\n      <bb-badge-ui\n        *ngIf=\"isDeviceRemoved()\"\n        class=\"bb-stack__item\"\n        color=\"secondary\"\n        data-role=\"device-item-badge-removed\"\n        i18n-text=\"Device removed badge@@bb-device-list-item-ui.badge.removed\"\n        text=\"REMOVED\">\n      </bb-badge-ui>\n      <bb-dropdown-menu-ui\n        class=\"bb-stack__item\"\n        [class.invisible]=\"isDeviceRemoved()\"\n        icon=\"ellipsis-h\"\n        btnColor=\"link\"\n        dropDownButtonLabel=\"Manage device {{ device?.friendlyName || 'Unknown' }}\"\n        i18n-dropDownButtonLabel=\"Device list item dropdown menu aria label@@bb-device-list-item-ui.dropdown.aria\"\n        data-role=\"device-item-menu\"\n        [btnCircle]=\"true\"\n        [disabled]=\"isManageDisabled\">\n        <ng-template bbDropdownMenuItem>\n          <ng-container *ngIf=\"!isDeviceDisabled() ; else disabledDeviceMenuItems\">\n            <button\n              role=\"menuitem\"\n              class=\"dropdown-item\"\n              data-role=\"device-item-edit\"\n              i18n=\"Device list item edit name text@@bb-device-list-item-ui.edit\"\n              (click)=\"onManage()\">\n              Edit name\n            </button>\n            <button\n              role=\"menuitem\"\n              class=\"dropdown-item\"\n              data-role=\"device-item-suspend\"\n              i18n=\"Device list item suspend text@@bb-device-list-item-ui.suspend\"\n              (click)=\"isSuspending = true\">\n              Suspend device\n            </button>\n          </ng-container>\n          <button\n            role=\"menuitem\"\n            class=\"dropdown-item\"\n            data-role=\"device-item-remove\"\n            i18n=\"Device list item remove text@@bb-device-list-item-ui.remove\"\n            (click)=\"isRemoving = true\">\n            Remove device\n          </button>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </div>\n  </div>\n</div>\n\n<ng-template #defaultFriendlyName i18n=\"Default friendly name@@bb-device-list-item-ui.default-friendly-name\">\n  <span data-role=\"device-item-friendly-name-default\">Unknown Device</span>\n</ng-template>\n\n<ng-template #disabledDeviceMenuItems>\n  <button\n    role=\"menuitem\"\n    class=\"dropdown-item\"\n    data-role=\"device-item-restore\"\n    i18n=\"Device list item restore text@@bb-device-list-item-ui.restore\"\n    (click)=\"isRestoring = true\">\n    Restore device\n  </button>\n</ng-template>\n\n<bb-device-confirmation-modal-ui\n  i18n-cancelButtonText=\"Suspended Modal cancel button text@@bb-device-list-item-ui.modal.suspended.cancel-text\"\n  cancelButtonText=\"Cancel\"\n  i18n-confirmButtonText=\"Suspended Modal confirm button text@@bb-device-list-item-ui.modal.suspended.confirm-text\"\n  confirmButtonText=\"Suspend device\"\n  i18n-modalHeadingText=\"Suspended Modal heading@@bbb-device-list-item-ui.modal.suspended.heading\"\n  modalHeadingText=\"Confirm device suspension\"\n  i18n-modalBodyText=\"Suspended Modal body@@bb-device-list-item-ui.modal.suspended.body\"\n  modalBodyText=\"Are you sure that you wish to suspend the following device?\"\n  [isOpen]=\"isSuspending\"\n  [device]=\"device\"\n  [iconName]=\"icon\"\n  (cancel)=\"isSuspending = false\"\n  (confirm)=\"onSuspend();\">\n</bb-device-confirmation-modal-ui>\n\n<bb-device-confirmation-modal-ui\n  i18n-cancelButtonText=\"Restored Modal cancel button text@@bb-device-list-item-ui.modal.restored.cancel-text\"\n  cancelButtonText=\"Cancel\"\n  i18n-confirmButtonText=\"Restored Modal confirm button text@@bb-device-list-item-ui.modal.restored.confirm-text\"\n  confirmButtonText=\"Restore device\"\n  i18n-modalHeadingText=\"Restored Modal heading@@bbb-device-list-item-ui.modal.restored.heading\"\n  modalHeadingText=\"Confirm device restoration\"\n  i18n-modalBodyText=\"Restored Modal body@@bb-device-list-item-ui.modal.restored.body\"\n  modalBodyText=\"Are you sure that you wish to restore the following device?\"\n  [isOpen]=\"isRestoring\"\n  [device]=\"device\"\n  [iconName]=\"icon\"\n  (cancel)=\"isRestoring = false\"\n  (confirm)=\"onRestore()\">\n</bb-device-confirmation-modal-ui>\n\n<bb-device-confirmation-modal-ui\n  confirmButtonColor=\"danger\"\n  i18n-cancelButtonText=\"Removed Modal cancel button text@@bb-device-list-item-ui.modal.removed.cancel-text\"\n  cancelButtonText=\"Keep device\"\n  i18n-confirmButtonText=\"Removed Modal confirm button text@@bb-device-list-item-ui.modal.removed.confirm-text\"\n  confirmButtonText=\"Remove device\"\n  i18n-modalHeadingText=\"Removed Modal heading@@bbb-device-list-item-ui.modal.removed.heading\"\n  modalHeadingText=\"Confirm device removal\"\n  i18n-modalBodyText=\"Removed Modal body@@bb-device-list-item-ui.modal.removed.body\"\n  modalBodyText=\"Are you sure that you wish to remove the following device?\"\n  [isOpen]=\"isRemoving\"\n  [device]=\"device\"\n  [iconName]=\"icon\"\n  (cancel)=\"isRemoving = false\"\n  (confirm)=\"onRemove()\">\n</bb-device-confirmation-modal-ui>\n", components: [{ type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: DeviceVendorModelComponent, selector: "bb-device-vendor-model-ui", inputs: ["device"] }, { type: DeviceRegisteredOnComponent, selector: "bb-device-registered-on-ui", inputs: ["createdDate"] }, { type: i1__namespace.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i1__namespace.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: DeviceConfirmationModalComponent, selector: "bb-device-confirmation-modal-ui", inputs: ["device", "confirmButtonText", "confirmButtonColor", "cancelButtonText", "modalHeadingText", "modalBodyText", "iconName", "isOpen"], outputs: ["cancel", "confirm"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1__namespace.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceListItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-device-list-item-ui',
                        templateUrl: './device-list-item.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { device: [{
                    type: i0.Input
                }], isManageDisabled: [{
                    type: i0.Input
                }], manage: [{
                    type: i0.Output
                }], remove: [{
                    type: i0.Output
                }], restore: [{
                    type: i0.Output
                }], suspend: [{
                    type: i0.Output
                }] } });

    var ManageDeviceFormComponent = /** @class */ (function () {
        function ManageDeviceFormComponent(formBuilder, cd) {
            this.formBuilder = formBuilder;
            this.cd = cd;
            /**
             * Whether the device is being saved.
             * Defaults to false.
             */
            this.isSaving = false;
            this.save = new i0.EventEmitter();
            this.cancel = new i0.EventEmitter();
            this.suspend = new i0.EventEmitter();
            this.remove = new i0.EventEmitter();
            this.isSubmitted = false;
            this.hostRef = this;
        }
        Object.defineProperty(ManageDeviceFormComponent.prototype, "device", {
            /**
             * Sets the device to be managed.
             */
            get: function () {
                if (this.managedDevice) {
                    return this.managedDevice;
                }
                throw new Error('Device not set');
            },
            set: function (value) {
                this.managedDevice = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ManageDeviceFormComponent.prototype, "control", {
            get: function () {
                if (this.form) {
                    return this.form.controls.friendlyName;
                }
                throw new Error('Form not set');
            },
            enumerable: false,
            configurable: true
        });
        ManageDeviceFormComponent.prototype.ngOnInit = function () {
            this.form = this.formBuilder.group({
                friendlyName: [this.device.friendlyName || '', i1$3.Validators.required],
            });
        };
        ManageDeviceFormComponent.prototype.onCancel = function () {
            this.cancel.emit();
        };
        ManageDeviceFormComponent.prototype.onSave = function () {
            this.isSubmitted = true;
            this.control.markAsTouched();
            this.cd.markForCheck();
            if (this.form && this.form.valid) {
                this.save.emit(Object.assign(Object.assign({}, this.device), { friendlyName: this.control.value, oldFriendlyName: this.device.friendlyName }));
            }
        };
        return ManageDeviceFormComponent;
    }());
    ManageDeviceFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ManageDeviceFormComponent, deps: [{ token: i1__namespace$1.FormBuilder }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ManageDeviceFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManageDeviceFormComponent, selector: "bb-manage-device-form-ui", inputs: { device: "device", isSaving: "isSaving" }, outputs: { save: "save", cancel: "cancel", suspend: "suspend", remove: "remove" }, ngImport: i0__namespace, template: "<ng-container bbDeviceInformationFormCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbDeviceInformationFormCustomizable let-hostRef>\n  <div data-role=\"device-form\">\n    <div class=\"bb-block bb-block--lg\">\n      <bb-header-ui\n        headingType=\"h3\"\n        i18n-heading=\"Manage Device form heading@@bb-manage-device-form-ui.heading\"\n        heading=\"Edit Name\">\n      </bb-header-ui>\n    </div>\n    <form [formGroup]=\"hostRef.form\" (submit)=\"hostRef.onSave()\">\n      <div class=\"form-group\">\n        <bb-input-text-ui\n          i18n-label=\"Friendly Name form field label@@bb-manage-device-form-ui.friendly-name-field.label\"\n          label=\"Name of device\"\n          class=\"bb-form-field bb-form-field--md\"\n          formControlName=\"friendlyName\"\n          data-role=\"device-form-friendly-name-input\"\n          [maxLength]=\"50\"\n          [autofocus]=\"true\">\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui [showErrors]=\"hostRef.isSubmitted\">\n          <span *ngIf=\"hostRef.control.errors?.required\"\n            data-role=\"device-form-friendly-name-required\"\n            i18n=\"Manage device form device required text@@bb-manage-device-form-ui.required\">\n            Device name required.\n          </span>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--xs\">\n        <span i18n=\"Device vendor and model helper text@@bb-manage-device-form-ui.device.helper\">\n          Device: \n        </span>\n        <bb-device-vendor-model-ui\n          [device]=\"hostRef.device\"\n          class=\"device-information__form-device-type\">\n        </bb-device-vendor-model-ui>\n      </div>\n      <div\n        *ngIf=\"hostRef.device?.created as createdDate\"\n        class=\"bb-block bb-block--lg bb-subtitle bb-text-support\">\n        <div *ngIf=\"!hostRef.createdDateFormat; else deviceRegisteredOn\">\n          <span\n            i18n=\"Device registration date helper text@@bb-manage-device-form-ui.registration-date.helper\">\n            Registered on:\n          </span>\n          {{ createdDate | date :'d MMM yyyy' }}\n        </div>\n        <ng-template #deviceRegisteredOn>\n          <bb-device-registered-on-ui [createdDate]=\"createdDate\"></bb-device-registered-on-ui>\n        </ng-template>\n      </div>\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <bb-load-button-ui\n          color=\"primary\"\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          i18n=\"Save changes button text@@bb-manage-device-form-ui.button.save\"\n          data-role=\"device-form-save\"\n          [disabled]=\"hostRef.isSaving\"\n          [isLoading]=\"hostRef.isSaving\">\n          Save changes\n        </bb-load-button-ui>\n        <button\n          bbButton\n          color=\"secondary\"\n          class=\"bb-button-bar__button\"\n          i18n=\"Cancel button text@@bb-manage-device-form-ui.button.cancel\"\n          data-role=\"device-form-cancel\"\n          [disabled]=\"hostRef.isSaving\"\n          (click)=\"hostRef.onCancel()\">\n          Cancel\n        </button>\n      </div>\n    </form>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.InputTextComponent; }), selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0__namespace.forwardRef(function () { return DeviceVendorModelComponent; }), selector: "bb-device-vendor-model-ui", inputs: ["device"] }, { type: i0__namespace.forwardRef(function () { return DeviceRegisteredOnComponent; }), selector: "bb-device-registered-on-ui", inputs: ["createdDate"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i0__namespace.forwardRef(function () { return DeviceInformationFormCustomizableDirective; }), selector: "[bbDeviceInformationFormCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "date": i0__namespace.forwardRef(function () { return i5__namespace.DatePipe; }) }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ManageDeviceFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-device-form-ui',
                        templateUrl: './manage-device-form.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.FormBuilder }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { device: [{
                    type: i0.Input
                }], isSaving: [{
                    type: i0.Input
                }], save: [{
                    type: i0.Output
                }], cancel: [{
                    type: i0.Output
                }], suspend: [{
                    type: i0.Output
                }], remove: [{
                    type: i0.Output
                }] } });
    var DeviceInformationFormCustomizableDirective = /** @class */ (function (_super) {
        __extends(DeviceInformationFormCustomizableDirective, _super);
        function DeviceInformationFormCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return DeviceInformationFormCustomizableDirective;
    }(i1$2.BbTemplate));
    DeviceInformationFormCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceInformationFormCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    DeviceInformationFormCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: DeviceInformationFormCustomizableDirective, selector: "[bbDeviceInformationFormCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceInformationFormCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbDeviceInformationFormCustomizable]',
                    }]
            }] });

    var DeviceInformationComponent = /** @class */ (function () {
        function DeviceInformationComponent() {
            /**
             * Whether the widget is loading.
             * Defaults to false.
             */
            this.isLoading = false;
            this.save = new i0.EventEmitter();
            this.remove = new i0.EventEmitter();
            this.suspend = new i0.EventEmitter();
            this.restore = new i0.EventEmitter();
            this.hostRef = this;
            this.isSavingState = false;
        }
        Object.defineProperty(DeviceInformationComponent.prototype, "isSaving", {
            /**
             * Sets whether the device information is being saved.
             */
            get: function () {
                return this.isSavingState;
            },
            set: function (value) {
                this.isSavingState = value;
                if (!this.isSavingState) {
                    this.toggleManageDevice();
                }
            },
            enumerable: false,
            configurable: true
        });
        DeviceInformationComponent.prototype.toggleManageDevice = function (index) {
            this.managedDeviceIndex = index;
        };
        DeviceInformationComponent.prototype.isManagingDevice = function (index) {
            return index === this.managedDeviceIndex;
        };
        DeviceInformationComponent.prototype.onRestore = function (device) {
            this.restore.emit(device);
        };
        DeviceInformationComponent.prototype.onRemove = function (device) {
            this.remove.emit(device);
        };
        DeviceInformationComponent.prototype.onSuspend = function (device) {
            this.suspend.emit(device);
        };
        DeviceInformationComponent.prototype.onSave = function (device) {
            this.save.emit(device);
        };
        return DeviceInformationComponent;
    }());
    DeviceInformationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceInformationComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    DeviceInformationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeviceInformationComponent, selector: "bb-device-information-ui", inputs: { isSaving: "isSaving", devices: "devices", isLoading: "isLoading", errorState: "errorState" }, outputs: { save: "save", remove: "remove", suspend: "suspend", restore: "restore" }, ngImport: i0__namespace, template: "<ng-container bbDeviceInformationWidgetCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbDeviceInformationWidgetCustomizable let-hostRef>\n  <div class=\"card card-lg\">\n    <bb-header-ui\n      data-role=\"widget-header\"\n      headingType=\"h2\"\n      class=\"card-header\"\n      i18n-heading=\"Device information widget header@@bb-device-information-ui.header\"\n      heading=\"Device information\">\n    </bb-header-ui>\n\n    <div class=\"card-body\" *ngIf=\"hostRef.isLoading || hostRef.errorState\">\n      <bb-loading-indicator-ui *ngIf=\"hostRef.isLoading\"\n        i18n-text=\"Device information widget loading text@@bb-device-information-ui.loading\"\n        text=\"Loading...\">\n      </bb-loading-indicator-ui>\n\n      <bb-common-error-state-ui *ngIf=\"hostRef.errorState\"\n        class=\"bb-state-container\"\n        data-role=\"state-error\"\n        [error]=\"hostRef.errorState\">\n      </bb-common-error-state-ui>\n    </div>\n\n    <ng-container *ngIf=\"!hostRef.isLoading && !hostRef.errorState && hostRef.devices\">\n      <ng-container *ngIf=\"hostRef.devices.length; else emptyState\">\n        <ng-container *ngFor=\"let device of hostRef.devices; index as i\">\n          <ng-container *ngIf=\"!hostRef.isManagingDevice(i); else managingDevice\">\n            <div class=\"card-section\">\n              <bb-device-list-item-ui\n                [device]=\"device\"\n                [isManageDisabled]=\"!hostRef.isManagingDevice()\"\n                (manage)=\"hostRef.toggleManageDevice(i)\"\n                (restore)=\"hostRef.onRestore($event)\"\n                (remove)=\"hostRef.onRemove($event)\"\n                (suspend)=\"hostRef.onSuspend($event)\">\n              </bb-device-list-item-ui>\n            </div>\n          </ng-container>\n          <ng-template #managingDevice>\n            <div class=\"card-section card-section--highlight\">\n              <bb-manage-device-form-ui\n                [device]=\"device\"\n                [isSaving]=\"hostRef.isSaving\"\n                (save)=\"hostRef.onSave($event)\"\n                (cancel)=\"hostRef.toggleManageDevice()\">\n              </bb-manage-device-form-ui>\n            </div>\n          </ng-template>\n        </ng-container>\n      </ng-container>\n\n      <ng-template #emptyState>\n        <bb-empty-state-ui\n          class=\"bb-state-container\"\n          data-role=\"state-empty\"\n          title=\"No devices found\"\n          i18n-title=\"Device information widget empty list text@@bb-device-information-ui.empty\"\n          iconSize=\"xxl\"\n          iconModifier=\"phonelink-off\">\n        </bb-empty-state-ui>\n      </ng-template>\n    </ng-container>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.ErrorCommonStateComponent; }), selector: "bb-common-error-state-ui", inputs: ["error"] }, { type: i0__namespace.forwardRef(function () { return DeviceListItemComponent; }), selector: "bb-device-list-item-ui", inputs: ["device", "isManageDisabled"], outputs: ["manage", "remove", "restore", "suspend"] }, { type: i0__namespace.forwardRef(function () { return ManageDeviceFormComponent; }), selector: "bb-manage-device-form-ui", inputs: ["device", "isSaving"], outputs: ["save", "cancel", "suspend", "remove"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0__namespace.forwardRef(function () { return DeviceInformationWidgetCustomizableDirective; }), selector: "[bbDeviceInformationWidgetCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i5__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceInformationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-device-information-ui',
                        templateUrl: './device-information.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { isSaving: [{
                    type: i0.Input
                }], devices: [{
                    type: i0.Input
                }], isLoading: [{
                    type: i0.Input
                }], errorState: [{
                    type: i0.Input
                }], save: [{
                    type: i0.Output
                }], remove: [{
                    type: i0.Output
                }], suspend: [{
                    type: i0.Output
                }], restore: [{
                    type: i0.Output
                }] } });
    var DeviceInformationWidgetCustomizableDirective = /** @class */ (function (_super) {
        __extends(DeviceInformationWidgetCustomizableDirective, _super);
        function DeviceInformationWidgetCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return DeviceInformationWidgetCustomizableDirective;
    }(i1$2.BbTemplate));
    DeviceInformationWidgetCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceInformationWidgetCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    DeviceInformationWidgetCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: DeviceInformationWidgetCustomizableDirective, selector: "[bbDeviceInformationWidgetCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceInformationWidgetCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbDeviceInformationWidgetCustomizable]',
                    }]
            }] });

    var UserDeviceInformationService = /** @class */ (function () {
        function UserDeviceInformationService(deviceManagementService) {
            this.deviceManagementService = deviceManagementService;
        }
        UserDeviceInformationService.prototype.getDevices = function () {
            return this.deviceManagementService.getMyDevices().pipe(operators.map(function (response) { return response.devices; }));
        };
        UserDeviceInformationService.prototype.updateDevice = function (deviceId, patchDeviceRequest) {
            return this.deviceManagementService.patchMyDeviceByDeviceId({
                deviceId: deviceId,
                patchDeviceRequest: patchDeviceRequest,
            });
        };
        UserDeviceInformationService.prototype.removeDevice = function (deviceId) {
            return this.deviceManagementService.deleteMyDeviceByDeviceId({ deviceId: deviceId });
        };
        return UserDeviceInformationService;
    }());
    UserDeviceInformationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserDeviceInformationService, deps: [{ token: i1__namespace$2.ManageMyDevicesService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserDeviceInformationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserDeviceInformationService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserDeviceInformationService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$2.ManageMyDevicesService }]; } });

    var AdminDeviceInformationService = /** @class */ (function () {
        function AdminDeviceInformationService(deviceManagementService) {
            this.deviceManagementService = deviceManagementService;
            this.dbsUserId = '';
        }
        AdminDeviceInformationService.prototype.getDevices = function () {
            return this.deviceManagementService
                .getDevicesByDbsUserId({ dbsUserId: this.dbsUserId })
                .pipe(operators.map(function (response) { return response.devices; }));
        };
        AdminDeviceInformationService.prototype.updateDevice = function (deviceId, patchDeviceRequest) {
            return this.deviceManagementService.patchUserDeviceByDbsUserIdAndDeviceId({
                dbsUserId: this.dbsUserId,
                deviceId: deviceId,
                patchDeviceRequest: patchDeviceRequest,
            });
        };
        AdminDeviceInformationService.prototype.removeDevice = function (deviceId) {
            return this.deviceManagementService.deleteUserDeviceByDeviceId({
                dbsUserId: this.dbsUserId,
                deviceId: deviceId,
            });
        };
        Object.defineProperty(AdminDeviceInformationService.prototype, "dbsUserIdInput", {
            get: function () {
                return this.dbsUserId;
            },
            set: function (userId) {
                this.dbsUserId = userId;
            },
            enumerable: false,
            configurable: true
        });
        return AdminDeviceInformationService;
    }());
    AdminDeviceInformationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AdminDeviceInformationService, deps: [{ token: i1__namespace$2.ManageOtherUsersDevicesService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    AdminDeviceInformationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AdminDeviceInformationService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AdminDeviceInformationService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$2.ManageOtherUsersDevicesService }]; } });

    var defaultProperties = {
        dismissTimeout: 3,
        isAdminWidget: false,
    };
    var DeviceInformationPreferenceService = /** @class */ (function () {
        function DeviceInformationPreferenceService(model) {
            this.model = model;
        }
        DeviceInformationPreferenceService.prototype.getTimeoutPreference = function () {
            return this.model
                ? this.model.property('dismissTimeout', defaultProperties.dismissTimeout)
                : rxjs.of(defaultProperties.dismissTimeout);
        };
        DeviceInformationPreferenceService.prototype.getAdminPreference = function () {
            return this.model
                ? this.model
                    .property('isAdminWidget', JSON.stringify(defaultProperties.isAdminWidget))
                    .pipe(operators.map(function (value) { return !!value && value !== 'false'; }))
                : rxjs.of(defaultProperties.isAdminWidget);
        };
        return DeviceInformationPreferenceService;
    }());
    DeviceInformationPreferenceService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceInformationPreferenceService, deps: [{ token: i1__namespace$3.ItemModel, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    DeviceInformationPreferenceService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceInformationPreferenceService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceInformationPreferenceService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace$3.ItemModel, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var DeviceInformationWidgetComponent = /** @class */ (function () {
        function DeviceInformationWidgetComponent(userDataService, adminDataService, notificationService, preferenceService) {
            var _this = this;
            this.userDataService = userDataService;
            this.adminDataService = adminDataService;
            this.notificationService = notificationService;
            this.preferenceService = preferenceService;
            this.successHeader = '';
            this.successMessage = '';
            this.failureHeader = '';
            this.failureMessage = '';
            this.failurePermissionsMessage = '';
            this.updateActions = exports.UpdateAction;
            this.refreshDevicesSubject = new rxjs.BehaviorSubject(undefined);
            this.isLoadingSubject = new rxjs.BehaviorSubject(false);
            this.isSavingSubject = new rxjs.BehaviorSubject(false);
            this.errorSubject = new rxjs.BehaviorSubject(undefined);
            this.dismissTimeout = 3000;
            this.isAdminWidget = false;
            this.isLoading = this.isLoadingSubject.asObservable();
            this.isSaving = this.isSavingSubject.asObservable();
            this.errorState = this.errorSubject.asObservable();
            this.devices = this.getDevicesObservable();
            this.onError = function (err) {
                _this.notificationService.showNotification({
                    header: _this.failureHeader,
                    message: _this.getErrorMessage(err),
                    messageContext: {
                        device: _this.managedDevice,
                    },
                    modifier: 'error',
                    ttl: _this.dismissTimeout,
                });
                return new rxjs.Observable();
            };
            this.onSuccess = function () {
                _this.notificationService.showNotification({
                    header: _this.successHeader,
                    headerContext: {
                        actionType: _this.updateAction,
                    },
                    message: _this.successMessage,
                    messageContext: {
                        actionType: _this.updateAction,
                        device: _this.managedDevice,
                    },
                    modifier: 'success',
                    ttl: _this.dismissTimeout,
                });
                _this.refreshDevicesSubject.next(undefined);
            };
        }
        Object.defineProperty(DeviceInformationWidgetComponent.prototype, "dbsUserId", {
            /**
             * Sets the id for the user to get device information for.
             */
            get: function () {
                return this.adminDataService.dbsUserIdInput;
            },
            set: function (inputUserId) {
                this.adminDataService.dbsUserIdInput = inputUserId;
            },
            enumerable: false,
            configurable: true
        });
        DeviceInformationWidgetComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.notificationDismissTime) {
                this.dismissTimeout = this.notificationDismissTime * 1000;
            }
            else {
                this.preferenceService
                    .getTimeoutPreference()
                    .pipe(operators.first())
                    .subscribe(function (time) { return (_this.dismissTimeout = time * 1000); });
            }
            if (typeof this.isAdmin === 'boolean') {
                this.isAdminWidget = this.isAdmin;
            }
            else {
                this.preferenceService
                    .getAdminPreference()
                    .pipe(operators.first())
                    .subscribe(function (adminPreference) { return (_this.isAdminWidget = adminPreference); });
            }
        };
        DeviceInformationWidgetComponent.prototype.getFriendlyName = function (defaultValue, modifiedDevice) {
            var device = modifiedDevice || this.managedDevice;
            return device && device.friendlyName ? "'" + device.friendlyName + "'" : defaultValue;
        };
        DeviceInformationWidgetComponent.prototype.getOldFriendlyName = function (defaultValue, modifiedDevice) {
            var device = modifiedDevice || this.managedDevice;
            return device && device.oldFriendlyName ? "'" + device.oldFriendlyName + "'" : defaultValue;
        };
        DeviceInformationWidgetComponent.prototype.onSave = function (device) {
            var _this = this;
            this.isSavingSubject.next(true);
            this.updateAction = exports.UpdateAction.Save;
            this.managedDevice = device;
            this.dataService
                .updateDevice(device.deviceId, {
                friendlyName: device.friendlyName,
            })
                .pipe(operators.tap(function () { return _this.isSavingSubject.next(false); }), operators.catchError(function (err) {
                _this.isSavingSubject.next(false);
                return _this.onError(err);
            }))
                .subscribe(this.onSuccess);
        };
        DeviceInformationWidgetComponent.prototype.onRemove = function (device) {
            this.updateAction = exports.UpdateAction.Remove;
            this.managedDevice = device;
            this.dataService
                .removeDevice(device.deviceId)
                .pipe(operators.catchError(this.onError))
                .subscribe(this.onSuccess);
        };
        DeviceInformationWidgetComponent.prototype.onSuspend = function (device) {
            this.updateAction = exports.UpdateAction.Suspend;
            this.managedDevice = device;
            this.updateDevice(device, i1.DeviceStatus.DISABLED);
        };
        DeviceInformationWidgetComponent.prototype.onRestore = function (device) {
            this.updateAction = exports.UpdateAction.Restore;
            this.managedDevice = device;
            this.updateDevice(device, i1.DeviceStatus.ENABLED);
        };
        DeviceInformationWidgetComponent.prototype.getDevicesObservable = function () {
            var _this = this;
            return this.refreshDevicesSubject.pipe(operators.switchMap(function () {
                _this.errorSubject.next(undefined);
                _this.isLoadingSubject.next(true);
                return _this.dataService.getDevices();
            }), operators.tap(function () {
                _this.isLoadingSubject.next(false);
            }), operators.catchError(function (error) {
                _this.isLoadingSubject.next(false);
                _this.errorSubject.next(error);
                return new rxjs.Observable();
            }));
        };
        DeviceInformationWidgetComponent.prototype.updateDevice = function (device, action) {
            this.dataService
                .updateDevice(device.deviceId, {
                status: action,
            })
                .pipe(operators.catchError(this.onError))
                .subscribe(this.onSuccess);
        };
        DeviceInformationWidgetComponent.prototype.getErrorMessage = function (error) {
            return (error.status === 403 ? this.failurePermissionsMessage : this.failureMessage);
        };
        Object.defineProperty(DeviceInformationWidgetComponent.prototype, "dataService", {
            get: function () {
                return this.isAdminWidget ? this.adminDataService : this.userDataService;
            },
            enumerable: false,
            configurable: true
        });
        return DeviceInformationWidgetComponent;
    }());
    DeviceInformationWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceInformationWidgetComponent, deps: [{ token: UserDeviceInformationService }, { token: AdminDeviceInformationService }, { token: i1__namespace.NotificationService }, { token: DeviceInformationPreferenceService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DeviceInformationWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeviceInformationWidgetComponent, selector: "bb-device-information-widget", inputs: { notificationDismissTime: ["dismissTimeout", "notificationDismissTime"], isAdmin: ["isAdminWidget", "isAdmin"], dbsUserId: "dbsUserId" }, providers: [DeviceInformationPreferenceService, UserDeviceInformationService, AdminDeviceInformationService], viewQueries: [{ propertyName: "successHeader", first: true, predicate: ["notificationSuccessHeader"], descendants: true }, { propertyName: "successMessage", first: true, predicate: ["notificationSuccessMessage"], descendants: true }, { propertyName: "failureHeader", first: true, predicate: ["notificationFailureHeader"], descendants: true }, { propertyName: "failureMessage", first: true, predicate: ["notificationFailureMessage"], descendants: true }, { propertyName: "failurePermissionsMessage", first: true, predicate: ["notificationPermissionsFailureMessage"], descendants: true }], ngImport: i0__namespace, template: "<bb-device-information-ui\n  [devices]=\"devices | async\"\n  [isLoading]=\"isLoading | async\"\n  [isSaving]=\"isSaving | async\"\n  [errorState]=\"errorState | async\"\n  (save)=\"onSave($event)\"\n  (remove)=\"onRemove($event)\"\n  (suspend)=\"onSuspend($event)\"\n  (restore)=\"onRestore($event)\"\n></bb-device-information-ui>\n\n<ng-template #notificationSuccessHeader let-actionType=\"actionType\">\n  <ng-container [ngSwitch]=\"actionType\">\n    <div *ngSwitchCase=\"updateActions.Restore\"\n      data-role=\"notification-header-restored\"\n      i18n=\"Notification restored header@@bb-device-information-widget.notification.header.restored\">\n      Device restored\n    </div>\n    <div *ngSwitchCase=\"updateActions.Suspend\" \n      data-role=\"notification-header-suspended\"\n      i18n=\"Notification suspended header@@bb-device-information-widget.notification.header.suspended\">\n      Device suspended\n    </div>\n    <div *ngSwitchCase=\"updateActions.Remove\"\n      data-role=\"notification-header-removed\"\n      i18n=\"Notification removed header@@bb-device-information-widget.notification.header.removed\">\n      Device removed\n    </div>\n    <div *ngSwitchCase=\"updateActions.Save\"\n      data-role=\"notification-header-saved\"\n      i18n=\"Notification saved header@@bb-device-information-widget.notification.header.saved\">\n      Device name changed\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #notificationSuccessMessage let-actionType=\"actionType\" let-device=\"device\">\n  <ng-container [ngSwitch]=\"actionType\">\n    <div *ngSwitchCase=\"updateActions.Restore\"\n      i18n=\"Notification restored message@@bb-device-information-widget.notification.message.restored\">\n      {{ getFriendlyName('Device', device) }} restored successfully.\n    </div>\n    <div *ngSwitchCase=\"updateActions.Suspend\"\n      i18n=\"Notification suspended message@@bb-device-information-widget.notification.message.suspended\">\n      {{ getFriendlyName('Device', device) }} suspended successfully.\n    </div>\n    <div *ngSwitchCase=\"updateActions.Remove\"\n      i18n=\"Notification removed message@@bb-device-information-widget.notification.message.removed\">\n      {{ getFriendlyName('Device', device) }} removed successfully.\n    </div>\n    <div *ngSwitchCase=\"updateActions.Save\"\n      i18n=\"Notification saved message@@bb-device-information-widget.notification.message.saved\">\n      {{ getFriendlyName('Device', device) }} name changed successfully.\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #notificationFailureHeader>\n  <div data-role=\"notification-header-failed\" i18n=\"Failure notification header@@bb-device-information-widget.notification.failure.header\">\n    Device update failed\n  </div>\n</ng-template>\n\n<ng-template #notificationFailureMessage let-device=\"device\">\n  <div i18n=\"Failure notification message@@bb-device-information-widget.notification.failure.message\">\n    Failed to update {{ getOldFriendlyName('device', device) }}.\n  </div>\n</ng-template>\n\n<ng-template #notificationPermissionsFailureMessage let-device=\"device\">\n  <div i18n=\"Permission failure notification message@@bb-device-information-widget.notification.permissions.failure.message\">\n    Insufficient permissions to update {{ getOldFriendlyName('device', device) }}.\n  </div>\n</ng-template>", components: [{ type: DeviceInformationComponent, selector: "bb-device-information-ui", inputs: ["isSaving", "devices", "isLoading", "errorState"], outputs: ["save", "remove", "suspend", "restore"] }], directives: [{ type: i5__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "async": i5__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceInformationWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-device-information-widget',
                        templateUrl: './device-information-widget.component.html',
                        providers: [DeviceInformationPreferenceService, UserDeviceInformationService, AdminDeviceInformationService],
                    }]
            }], ctorParameters: function () { return [{ type: UserDeviceInformationService }, { type: AdminDeviceInformationService }, { type: i1__namespace.NotificationService }, { type: DeviceInformationPreferenceService }]; }, propDecorators: { successHeader: [{
                    type: i0.ViewChild,
                    args: ['notificationSuccessHeader']
                }], successMessage: [{
                    type: i0.ViewChild,
                    args: ['notificationSuccessMessage']
                }], failureHeader: [{
                    type: i0.ViewChild,
                    args: ['notificationFailureHeader']
                }], failureMessage: [{
                    type: i0.ViewChild,
                    args: ['notificationFailureMessage']
                }], failurePermissionsMessage: [{
                    type: i0.ViewChild,
                    args: ['notificationPermissionsFailureMessage']
                }], notificationDismissTime: [{
                    type: i0.Input,
                    args: ['dismissTimeout']
                }], isAdmin: [{
                    type: i0.Input,
                    args: ['isAdminWidget']
                }], dbsUserId: [{
                    type: i0.Input
                }] } });

    var componentModules = [
        DeviceInformationComponent,
        DeviceInformationWidgetComponent,
        DeviceListItemComponent,
        ManageDeviceFormComponent,
        DeviceVendorModelComponent,
        DeviceConfirmationModalComponent,
        DeviceRegisteredOnComponent,
    ];
    var componentDirectives = [
        DeviceInformationWidgetCustomizableDirective,
        DeviceInformationFormCustomizableDirective,
        DeviceInformationConfirmationModalCustomizableDirective,
    ];
    var uiModules = [
        i1$1.HeaderModule,
        i1$1.LoadingIndicatorModule,
        i1$1.ErrorCommonStateModule,
        i1$1.IconModule,
        i1$1.ButtonModule,
        i1$1.InputValidationMessageModule,
        i1$1.InputTextModule,
        i1$1.LoadButtonModule,
        i1$1.DropdownMenuModule,
        i1$1.ModalModule,
        i1$1.NotificationModule,
        i1$3.ReactiveFormsModule,
        i1$1.EmptyStateModule,
        i1$1.BadgeModule,
    ];
    var DeviceInformationWidgetModule = /** @class */ (function () {
        function DeviceInformationWidgetModule() {
        }
        return DeviceInformationWidgetModule;
    }());
    DeviceInformationWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceInformationWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DeviceInformationWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceInformationWidgetModule, declarations: [DeviceInformationComponent,
            DeviceInformationWidgetComponent,
            DeviceListItemComponent,
            ManageDeviceFormComponent,
            DeviceVendorModelComponent,
            DeviceConfirmationModalComponent,
            DeviceRegisteredOnComponent, DeviceInformationWidgetCustomizableDirective,
            DeviceInformationFormCustomizableDirective,
            DeviceInformationConfirmationModalCustomizableDirective], imports: [i5.CommonModule, i1__namespace$3.BackbaseCoreModule, i1$1.HeaderModule,
            i1$1.LoadingIndicatorModule,
            i1$1.ErrorCommonStateModule,
            i1$1.IconModule,
            i1$1.ButtonModule,
            i1$1.InputValidationMessageModule,
            i1$1.InputTextModule,
            i1$1.LoadButtonModule,
            i1$1.DropdownMenuModule,
            i1$1.ModalModule,
            i1$1.NotificationModule,
            i1$3.ReactiveFormsModule,
            i1$1.EmptyStateModule,
            i1$1.BadgeModule], exports: [DeviceInformationComponent,
            DeviceInformationWidgetComponent,
            DeviceListItemComponent,
            ManageDeviceFormComponent,
            DeviceVendorModelComponent,
            DeviceConfirmationModalComponent,
            DeviceRegisteredOnComponent, i1$1.HeaderModule,
            i1$1.LoadingIndicatorModule,
            i1$1.ErrorCommonStateModule,
            i1$1.IconModule,
            i1$1.ButtonModule,
            i1$1.InputValidationMessageModule,
            i1$1.InputTextModule,
            i1$1.LoadButtonModule,
            i1$1.DropdownMenuModule,
            i1$1.ModalModule,
            i1$1.NotificationModule,
            i1$3.ReactiveFormsModule,
            i1$1.EmptyStateModule,
            i1$1.BadgeModule, DeviceInformationWidgetCustomizableDirective,
            DeviceInformationFormCustomizableDirective,
            DeviceInformationConfirmationModalCustomizableDirective] });
    DeviceInformationWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceInformationWidgetModule, imports: [__spreadArray([
                i5.CommonModule,
                i1$2.BackbaseCoreModule.withConfig({
                    classMap: { DeviceInformationWidgetComponent: DeviceInformationWidgetComponent },
                })
            ], __read(uiModules)), i1$1.HeaderModule,
            i1$1.LoadingIndicatorModule,
            i1$1.ErrorCommonStateModule,
            i1$1.IconModule,
            i1$1.ButtonModule,
            i1$1.InputValidationMessageModule,
            i1$1.InputTextModule,
            i1$1.LoadButtonModule,
            i1$1.DropdownMenuModule,
            i1$1.ModalModule,
            i1$1.NotificationModule,
            i1$3.ReactiveFormsModule,
            i1$1.EmptyStateModule,
            i1$1.BadgeModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceInformationWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray([
                            i5.CommonModule,
                            i1$2.BackbaseCoreModule.withConfig({
                                classMap: { DeviceInformationWidgetComponent: DeviceInformationWidgetComponent },
                            })
                        ], __read(uiModules)),
                        declarations: __spreadArray(__spreadArray([], __read(componentModules)), __read(componentDirectives)),
                        exports: __spreadArray(__spreadArray(__spreadArray([], __read(componentModules)), __read(uiModules)), __read(componentDirectives)),
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    Object.defineProperty(exports, 'DeviceStatus', {
        enumerable: true,
        get: function () { return i1.DeviceStatus; }
    });
    exports.AdminDeviceInformationService = AdminDeviceInformationService;
    exports.DeviceConfirmationModalComponent = DeviceConfirmationModalComponent;
    exports.DeviceInformationComponent = DeviceInformationComponent;
    exports.DeviceInformationPreferenceService = DeviceInformationPreferenceService;
    exports.DeviceInformationWidgetComponent = DeviceInformationWidgetComponent;
    exports.DeviceInformationWidgetModule = DeviceInformationWidgetModule;
    exports.DeviceRegisteredOnComponent = DeviceRegisteredOnComponent;
    exports.ManageDeviceFormComponent = ManageDeviceFormComponent;
    exports.UserDeviceInformationService = UserDeviceInformationService;
    exports["ӨDeviceInformationConfirmationModalCustomizableDirective"] = DeviceInformationConfirmationModalCustomizableDirective;
    exports["ӨDeviceInformationFormCustomizableDirective"] = DeviceInformationFormCustomizableDirective;
    exports["ӨDeviceInformationWidgetCustomizableDirective"] = DeviceInformationWidgetCustomizableDirective;
    exports["ӨDeviceListItemComponent"] = DeviceListItemComponent;
    exports["ӨDeviceVendorModelComponent"] = DeviceVendorModelComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-device-information-widget-ang.umd.js.map
