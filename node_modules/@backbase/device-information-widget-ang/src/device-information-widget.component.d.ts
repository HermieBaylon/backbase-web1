import { TemplateRef, OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { UserDeviceInformationService } from './services/user-device-information.service';
import { AdminDeviceInformationService } from './services/admin-device-information.service';
import { Device, UpdateAction, ModifiedDevice } from './models/device-management-types';
import { NotificationService } from '@backbase/ui-ang';
import { DeviceInformationPreferenceService } from './services/device-information-preference.service';
import * as i0 from "@angular/core";
export declare class DeviceInformationWidgetComponent implements OnInit {
    private readonly userDataService;
    private readonly adminDataService;
    private readonly notificationService;
    private readonly preferenceService;
    successHeader: TemplateRef<any> | string;
    successMessage: TemplateRef<any> | string;
    failureHeader: TemplateRef<any> | string;
    failureMessage: TemplateRef<any> | string;
    failurePermissionsMessage: TemplateRef<any> | string;
    /**
     * Time to live for the success notification message in seconds
     */
    notificationDismissTime: number | undefined;
    /**
     * Set the user type of the widget to change it's behaviour
     */
    isAdmin: boolean | undefined;
    set dbsUserId(inputUserId: string);
    /**
     * Sets the id for the user to get device information for.
     */
    get dbsUserId(): string;
    updateActions: typeof UpdateAction;
    updateAction: UpdateAction | undefined;
    private managedDevice;
    private readonly refreshDevicesSubject;
    private readonly isLoadingSubject;
    private readonly isSavingSubject;
    private readonly errorSubject;
    private dismissTimeout;
    private isAdminWidget;
    readonly isLoading: Observable<boolean>;
    readonly isSaving: Observable<boolean>;
    readonly errorState: Observable<Error | undefined>;
    readonly devices: Observable<unknown>;
    constructor(userDataService: UserDeviceInformationService, adminDataService: AdminDeviceInformationService, notificationService: NotificationService, preferenceService: DeviceInformationPreferenceService);
    ngOnInit(): void;
    getFriendlyName(defaultValue: string, modifiedDevice?: ModifiedDevice): string;
    getOldFriendlyName(defaultValue: string, modifiedDevice?: ModifiedDevice): string;
    onSave(device: ModifiedDevice): void;
    onRemove(device: Device): void;
    onSuspend(device: Device): void;
    onRestore(device: Device): void;
    private getDevicesObservable;
    private updateDevice;
    private readonly onError;
    private readonly onSuccess;
    private getErrorMessage;
    private get dataService();
    static ɵfac: i0.ɵɵFactoryDeclaration<DeviceInformationWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DeviceInformationWidgetComponent, "bb-device-information-widget", never, { "notificationDismissTime": "dismissTimeout"; "isAdmin": "isAdminWidget"; "dbsUserId": "dbsUserId"; }, {}, never, never>;
}
