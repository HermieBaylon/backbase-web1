import { EventEmitter, OnInit, ChangeDetectorRef } from '@angular/core';
import { FormGroup, AbstractControl, FormBuilder } from '@angular/forms';
import { Device, ModifiedDevice } from '../../models/device-management-types';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
export declare class ManageDeviceFormComponent implements OnInit {
    private readonly formBuilder;
    private readonly cd;
    set device(value: Device);
    /**
     * Whether the device is being saved.
     * Defaults to false.
     */
    isSaving: boolean;
    save: EventEmitter<ModifiedDevice>;
    cancel: EventEmitter<void>;
    suspend: EventEmitter<string>;
    remove: EventEmitter<string>;
    form: FormGroup | undefined;
    isSubmitted: boolean;
    hostRef: this;
    private managedDevice;
    constructor(formBuilder: FormBuilder, cd: ChangeDetectorRef);
    /**
     * Sets the device to be managed.
     */
    get device(): Device;
    get control(): AbstractControl;
    ngOnInit(): void;
    onCancel(): void;
    onSave(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ManageDeviceFormComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ManageDeviceFormComponent, "bb-manage-device-form-ui", never, { "device": "device"; "isSaving": "isSaving"; }, { "save": "save"; "cancel": "cancel"; "suspend": "suspend"; "remove": "remove"; }, never, never>;
}
export declare class DeviceInformationFormCustomizableDirective extends BbTemplate<ManageDeviceFormComponent, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<DeviceInformationFormCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<DeviceInformationFormCustomizableDirective, "[bbDeviceInformationFormCustomizable]", never, {}, {}, never>;
}
