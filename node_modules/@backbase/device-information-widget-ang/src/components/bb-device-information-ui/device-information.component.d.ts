import { EventEmitter } from '@angular/core';
import { Device, ModifiedDevice } from '../../models/device-management-types';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
export declare class DeviceInformationComponent {
    set isSaving(value: boolean);
    /**
     * The list of devices to display.
     */
    devices: Device[] | undefined;
    /**
     * Whether the widget is loading.
     * Defaults to false.
     */
    isLoading: boolean;
    /**
     * The error state of the widget.
     */
    errorState: Error | undefined;
    save: EventEmitter<ModifiedDevice>;
    remove: EventEmitter<Device>;
    suspend: EventEmitter<Device>;
    restore: EventEmitter<Device>;
    hostRef: this;
    private isSavingState;
    private managedDeviceIndex;
    /**
     * Sets whether the device information is being saved.
     */
    get isSaving(): boolean;
    toggleManageDevice(index?: number): void;
    isManagingDevice(index?: number): boolean;
    onRestore(device: Device): void;
    onRemove(device: Device): void;
    onSuspend(device: Device): void;
    onSave(device: ModifiedDevice): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DeviceInformationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DeviceInformationComponent, "bb-device-information-ui", never, { "isSaving": "isSaving"; "devices": "devices"; "isLoading": "isLoading"; "errorState": "errorState"; }, { "save": "save"; "remove": "remove"; "suspend": "suspend"; "restore": "restore"; }, never, never>;
}
export declare class DeviceInformationWidgetCustomizableDirective extends BbTemplate<DeviceInformationComponent, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<DeviceInformationWidgetCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<DeviceInformationWidgetCustomizableDirective, "[bbDeviceInformationWidgetCustomizable]", never, {}, {}, never>;
}
