import { Component, Input, Output, EventEmitter, Directive, ChangeDetectionStrategy, } from '@angular/core';
import { Validators } from '@angular/forms';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang";
import * as i3 from "../bb-device-vendor-model-ui/device-vendor-model.component";
import * as i4 from "../bb-device-registered-on-ui/device-registered-on.component";
import * as i5 from "@angular/common";
export class ManageDeviceFormComponent {
    constructor(formBuilder, cd) {
        this.formBuilder = formBuilder;
        this.cd = cd;
        /**
         * Whether the device is being saved.
         * Defaults to false.
         */
        this.isSaving = false;
        this.save = new EventEmitter();
        this.cancel = new EventEmitter();
        this.suspend = new EventEmitter();
        this.remove = new EventEmitter();
        this.isSubmitted = false;
        this.hostRef = this;
    }
    set device(value) {
        this.managedDevice = value;
    }
    /**
     * Sets the device to be managed.
     */
    get device() {
        if (this.managedDevice) {
            return this.managedDevice;
        }
        throw new Error('Device not set');
    }
    get control() {
        if (this.form) {
            return this.form.controls.friendlyName;
        }
        throw new Error('Form not set');
    }
    ngOnInit() {
        this.form = this.formBuilder.group({
            friendlyName: [this.device.friendlyName || '', Validators.required],
        });
    }
    onCancel() {
        this.cancel.emit();
    }
    onSave() {
        this.isSubmitted = true;
        this.control.markAsTouched();
        this.cd.markForCheck();
        if (this.form && this.form.valid) {
            this.save.emit(Object.assign(Object.assign({}, this.device), { friendlyName: this.control.value, oldFriendlyName: this.device.friendlyName }));
        }
    }
}
ManageDeviceFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageDeviceFormComponent, deps: [{ token: i1.FormBuilder }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ManageDeviceFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManageDeviceFormComponent, selector: "bb-manage-device-form-ui", inputs: { device: "device", isSaving: "isSaving" }, outputs: { save: "save", cancel: "cancel", suspend: "suspend", remove: "remove" }, ngImport: i0, template: "<ng-container bbDeviceInformationFormCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbDeviceInformationFormCustomizable let-hostRef>\n  <div data-role=\"device-form\">\n    <div class=\"bb-block bb-block--lg\">\n      <bb-header-ui\n        headingType=\"h3\"\n        i18n-heading=\"Manage Device form heading@@bb-manage-device-form-ui.heading\"\n        heading=\"Edit Name\">\n      </bb-header-ui>\n    </div>\n    <form [formGroup]=\"hostRef.form\" (submit)=\"hostRef.onSave()\">\n      <div class=\"form-group\">\n        <bb-input-text-ui\n          i18n-label=\"Friendly Name form field label@@bb-manage-device-form-ui.friendly-name-field.label\"\n          label=\"Name of device\"\n          class=\"bb-form-field bb-form-field--md\"\n          formControlName=\"friendlyName\"\n          data-role=\"device-form-friendly-name-input\"\n          [maxLength]=\"50\"\n          [autofocus]=\"true\">\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui [showErrors]=\"hostRef.isSubmitted\">\n          <span *ngIf=\"hostRef.control.errors?.required\"\n            data-role=\"device-form-friendly-name-required\"\n            i18n=\"Manage device form device required text@@bb-manage-device-form-ui.required\">\n            Device name required.\n          </span>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--xs\">\n        <span i18n=\"Device vendor and model helper text@@bb-manage-device-form-ui.device.helper\">\n          Device: \n        </span>\n        <bb-device-vendor-model-ui\n          [device]=\"hostRef.device\"\n          class=\"device-information__form-device-type\">\n        </bb-device-vendor-model-ui>\n      </div>\n      <div\n        *ngIf=\"hostRef.device?.created as createdDate\"\n        class=\"bb-block bb-block--lg bb-subtitle bb-text-support\">\n        <div *ngIf=\"!hostRef.createdDateFormat; else deviceRegisteredOn\">\n          <span\n            i18n=\"Device registration date helper text@@bb-manage-device-form-ui.registration-date.helper\">\n            Registered on:\n          </span>\n          {{ createdDate | date :'d MMM yyyy' }}\n        </div>\n        <ng-template #deviceRegisteredOn>\n          <bb-device-registered-on-ui [createdDate]=\"createdDate\"></bb-device-registered-on-ui>\n        </ng-template>\n      </div>\n      <div class=\"bb-button-bar bb-button-bar--reverse\">\n        <bb-load-button-ui\n          color=\"primary\"\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          i18n=\"Save changes button text@@bb-manage-device-form-ui.button.save\"\n          data-role=\"device-form-save\"\n          [disabled]=\"hostRef.isSaving\"\n          [isLoading]=\"hostRef.isSaving\">\n          Save changes\n        </bb-load-button-ui>\n        <button\n          bbButton\n          color=\"secondary\"\n          class=\"bb-button-bar__button\"\n          i18n=\"Cancel button text@@bb-manage-device-form-ui.button.cancel\"\n          data-role=\"device-form-cancel\"\n          [disabled]=\"hostRef.isSaving\"\n          (click)=\"hostRef.onCancel()\">\n          Cancel\n        </button>\n      </div>\n    </form>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i2.InputTextComponent; }), selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i0.forwardRef(function () { return i2.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i3.DeviceVendorModelComponent; }), selector: "bb-device-vendor-model-ui", inputs: ["device"] }, { type: i0.forwardRef(function () { return i4.DeviceRegisteredOnComponent; }), selector: "bb-device-registered-on-ui", inputs: ["createdDate"] }, { type: i0.forwardRef(function () { return i2.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i0.forwardRef(function () { return DeviceInformationFormCustomizableDirective; }), selector: "[bbDeviceInformationFormCustomizable]" }, { type: i0.forwardRef(function () { return i1.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i5.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i2.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "date": i0.forwardRef(function () { return i5.DatePipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageDeviceFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-device-form-ui',
                    templateUrl: './manage-device-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { device: [{
                type: Input
            }], isSaving: [{
                type: Input
            }], save: [{
                type: Output
            }], cancel: [{
                type: Output
            }], suspend: [{
                type: Output
            }], remove: [{
                type: Output
            }] } });
export class DeviceInformationFormCustomizableDirective extends BbTemplate {
}
DeviceInformationFormCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationFormCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
DeviceInformationFormCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: DeviceInformationFormCustomizableDirective, selector: "[bbDeviceInformationFormCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationFormCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbDeviceInformationFormCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,