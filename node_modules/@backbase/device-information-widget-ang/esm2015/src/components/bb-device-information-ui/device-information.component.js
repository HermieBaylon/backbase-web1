import { Component, Input, Output, EventEmitter, Directive, ChangeDetectionStrategy } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang";
import * as i2 from "../bb-device-list-item-ui/device-list-item.component";
import * as i3 from "../bb-manage-device-form-ui/manage-device-form.component";
import * as i4 from "@angular/common";
export class DeviceInformationComponent {
    constructor() {
        /**
         * Whether the widget is loading.
         * Defaults to false.
         */
        this.isLoading = false;
        this.save = new EventEmitter();
        this.remove = new EventEmitter();
        this.suspend = new EventEmitter();
        this.restore = new EventEmitter();
        this.hostRef = this;
        this.isSavingState = false;
    }
    set isSaving(value) {
        this.isSavingState = value;
        if (!this.isSavingState) {
            this.toggleManageDevice();
        }
    }
    /**
     * Sets whether the device information is being saved.
     */
    get isSaving() {
        return this.isSavingState;
    }
    toggleManageDevice(index) {
        this.managedDeviceIndex = index;
    }
    isManagingDevice(index) {
        return index === this.managedDeviceIndex;
    }
    onRestore(device) {
        this.restore.emit(device);
    }
    onRemove(device) {
        this.remove.emit(device);
    }
    onSuspend(device) {
        this.suspend.emit(device);
    }
    onSave(device) {
        this.save.emit(device);
    }
}
DeviceInformationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DeviceInformationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeviceInformationComponent, selector: "bb-device-information-ui", inputs: { isSaving: "isSaving", devices: "devices", isLoading: "isLoading", errorState: "errorState" }, outputs: { save: "save", remove: "remove", suspend: "suspend", restore: "restore" }, ngImport: i0, template: "<ng-container bbDeviceInformationWidgetCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbDeviceInformationWidgetCustomizable let-hostRef>\n  <div class=\"card card-lg\">\n    <bb-header-ui\n      data-role=\"widget-header\"\n      headingType=\"h2\"\n      class=\"card-header\"\n      i18n-heading=\"Device information widget header@@bb-device-information-ui.header\"\n      heading=\"Device information\">\n    </bb-header-ui>\n\n    <div class=\"card-body\" *ngIf=\"hostRef.isLoading || hostRef.errorState\">\n      <bb-loading-indicator-ui *ngIf=\"hostRef.isLoading\"\n        i18n-text=\"Device information widget loading text@@bb-device-information-ui.loading\"\n        text=\"Loading...\">\n      </bb-loading-indicator-ui>\n\n      <bb-common-error-state-ui *ngIf=\"hostRef.errorState\"\n        class=\"bb-state-container\"\n        data-role=\"state-error\"\n        [error]=\"hostRef.errorState\">\n      </bb-common-error-state-ui>\n    </div>\n\n    <ng-container *ngIf=\"!hostRef.isLoading && !hostRef.errorState && hostRef.devices\">\n      <ng-container *ngIf=\"hostRef.devices.length; else emptyState\">\n        <ng-container *ngFor=\"let device of hostRef.devices; index as i\">\n          <ng-container *ngIf=\"!hostRef.isManagingDevice(i); else managingDevice\">\n            <div class=\"card-section\">\n              <bb-device-list-item-ui\n                [device]=\"device\"\n                [isManageDisabled]=\"!hostRef.isManagingDevice()\"\n                (manage)=\"hostRef.toggleManageDevice(i)\"\n                (restore)=\"hostRef.onRestore($event)\"\n                (remove)=\"hostRef.onRemove($event)\"\n                (suspend)=\"hostRef.onSuspend($event)\">\n              </bb-device-list-item-ui>\n            </div>\n          </ng-container>\n          <ng-template #managingDevice>\n            <div class=\"card-section card-section--highlight\">\n              <bb-manage-device-form-ui\n                [device]=\"device\"\n                [isSaving]=\"hostRef.isSaving\"\n                (save)=\"hostRef.onSave($event)\"\n                (cancel)=\"hostRef.toggleManageDevice()\">\n              </bb-manage-device-form-ui>\n            </div>\n          </ng-template>\n        </ng-container>\n      </ng-container>\n\n      <ng-template #emptyState>\n        <bb-empty-state-ui\n          class=\"bb-state-container\"\n          data-role=\"state-empty\"\n          title=\"No devices found\"\n          i18n-title=\"Device information widget empty list text@@bb-device-information-ui.empty\"\n          iconSize=\"xxl\"\n          iconModifier=\"phonelink-off\">\n        </bb-empty-state-ui>\n      </ng-template>\n    </ng-container>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i1.ErrorCommonStateComponent; }), selector: "bb-common-error-state-ui", inputs: ["error"] }, { type: i0.forwardRef(function () { return i2.DeviceListItemComponent; }), selector: "bb-device-list-item-ui", inputs: ["device", "isManageDisabled"], outputs: ["manage", "remove", "restore", "suspend"] }, { type: i0.forwardRef(function () { return i3.ManageDeviceFormComponent; }), selector: "bb-manage-device-form-ui", inputs: ["device", "isSaving"], outputs: ["save", "cancel", "suspend", "remove"] }, { type: i0.forwardRef(function () { return i1.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return DeviceInformationWidgetCustomizableDirective; }), selector: "[bbDeviceInformationWidgetCustomizable]" }, { type: i0.forwardRef(function () { return i4.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i4.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-device-information-ui',
                    templateUrl: './device-information.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isSaving: [{
                type: Input
            }], devices: [{
                type: Input
            }], isLoading: [{
                type: Input
            }], errorState: [{
                type: Input
            }], save: [{
                type: Output
            }], remove: [{
                type: Output
            }], suspend: [{
                type: Output
            }], restore: [{
                type: Output
            }] } });
export class DeviceInformationWidgetCustomizableDirective extends BbTemplate {
}
DeviceInformationWidgetCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationWidgetCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
DeviceInformationWidgetCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: DeviceInformationWidgetCustomizableDirective, selector: "[bbDeviceInformationWidgetCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationWidgetCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbDeviceInformationWidgetCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,