import { BbTemplate } from '@backbase/foundation-ang/core';
import { Component, Input, Output, EventEmitter, Directive, ChangeDetectionStrategy } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang";
import * as i2 from "../bb-device-vendor-model-ui/device-vendor-model.component";
import * as i3 from "../bb-device-registered-on-ui/device-registered-on.component";
import * as i4 from "@angular/common";
export class DeviceConfirmationModalComponent {
    constructor() {
        /**
         * The text displayed on the confirmation button.
         * Defaults to an empty string.
         */
        this.confirmButtonText = '';
        /**
         * The color of the confirmation button.
         * Defaults to primary.
         */
        this.confirmButtonColor = 'primary';
        /**
         * The text displayed on the cancel button.
         * Defaults to an empty string.
         */
        this.cancelButtonText = '';
        /**
         * The heading text displayed on the modal.
         * Defaults to an empty string.
         */
        this.modalHeadingText = '';
        /**
         * The body text displayed on the modal.
         * Defaults to an empty string.
         */
        this.modalBodyText = '';
        /**
         * The icon name to display in the modal body.
         * Defaults to an empty string.
         */
        this.iconName = '';
        /**
         * Whether the modal is open.
         * Defaults to false.
         */
        this.isOpen = false;
        this.cancel = new EventEmitter();
        this.confirm = new EventEmitter();
        this.hostRef = this;
    }
    onCancel() {
        this.cancel.emit();
    }
    onConfirm() {
        this.confirm.emit();
    }
}
DeviceConfirmationModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceConfirmationModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DeviceConfirmationModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeviceConfirmationModalComponent, selector: "bb-device-confirmation-modal-ui", inputs: { device: "device", confirmButtonText: "confirmButtonText", confirmButtonColor: "confirmButtonColor", cancelButtonText: "cancelButtonText", modalHeadingText: "modalHeadingText", modalBodyText: "modalBodyText", iconName: "iconName", isOpen: "isOpen" }, outputs: { cancel: "cancel", confirm: "confirm" }, ngImport: i0, template: "<ng-container bbDeviceInformationConfirmationModalCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbDeviceInformationConfirmationModalCustomizable let-hostRef>\n  <bb-modal-ui [isOpen]=\"hostRef.isOpen\" (cancel)=\"hostRef.onCancel()\">\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h2\"\n          data-role=\"device-modal-header\"\n          [heading]=\"hostRef.modalHeadingText\">\n        </bb-header-ui>\n      </ng-template>\n    </bb-modal-header-ui>\n  \n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        {{ hostRef.modalBodyText }}\n        <hr>\n        <div class=\"bb-stack\">\n          <bb-icon-ui class=\"bb-stack__item\" [name]=\"hostRef.iconName\" size=\"xl\"></bb-icon-ui>\n          <div class=\"bb-stack__item bb-stack__item--fill\">\n            <div class=\"break-word\">\n              <ng-container *ngIf=\"hostRef.device?.friendlyName as friendlyName; else defaultFriendlyName\">\n                {{ friendlyName }}\n              </ng-container>\n            </div>\n            <bb-device-vendor-model-ui\n              class=\"bb-subtitle bb-text-support\"\n              [device]=\"hostRef.device\">\n            </bb-device-vendor-model-ui>\n            <bb-device-registered-on-ui\n              class=\"bb-subheader bb-subheader--regular bb-text-support\"\n              [createdDate]=\"hostRef.device?.created\">\n            </bb-device-registered-on-ui>\n          </div>\n        </div>\n        <hr class=\"bb-block bb-block--no-margin\">\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <button bbButton\n          color=\"secondary\"\n          data-role=\"modal-cancel\"\n          (click)=\"hostRef.onCancel()\">\n          {{ hostRef.cancelButtonText }}\n        </button>\n        <button bbButton\n          data-role=\"modal-confirm\"\n          [color]=\"hostRef.confirmButtonColor\"\n          (click)=\"hostRef.onConfirm()\">\n          {{ hostRef.confirmButtonText }}\n        </button>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n  \n  <ng-template #defaultFriendlyName\n    i18n=\"Modal default friendly name@@bb-device-confirmation-modal-ui.default-friendly-name\">\n    Unknown Device\n  </ng-template>\n</ng-template>", components: [{ type: i0.forwardRef(function () { return i1.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i1.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i1.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i1.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i2.DeviceVendorModelComponent; }), selector: "bb-device-vendor-model-ui", inputs: ["device"] }, { type: i0.forwardRef(function () { return i3.DeviceRegisteredOnComponent; }), selector: "bb-device-registered-on-ui", inputs: ["createdDate"] }, { type: i0.forwardRef(function () { return i1.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i0.forwardRef(function () { return DeviceInformationConfirmationModalCustomizableDirective; }), selector: "[bbDeviceInformationConfirmationModalCustomizable]" }, { type: i0.forwardRef(function () { return i1.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0.forwardRef(function () { return i1.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i4.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i1.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0.forwardRef(function () { return i1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceConfirmationModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-device-confirmation-modal-ui',
                    templateUrl: './device-confirmation-modal.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { device: [{
                type: Input
            }], confirmButtonText: [{
                type: Input
            }], confirmButtonColor: [{
                type: Input
            }], cancelButtonText: [{
                type: Input
            }], modalHeadingText: [{
                type: Input
            }], modalBodyText: [{
                type: Input
            }], iconName: [{
                type: Input
            }], isOpen: [{
                type: Input
            }], cancel: [{
                type: Output
            }], confirm: [{
                type: Output
            }] } });
export class DeviceInformationConfirmationModalCustomizableDirective extends BbTemplate {
}
DeviceInformationConfirmationModalCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationConfirmationModalCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
DeviceInformationConfirmationModalCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: DeviceInformationConfirmationModalCustomizableDirective, selector: "[bbDeviceInformationConfirmationModalCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationConfirmationModalCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbDeviceInformationConfirmationModalCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWNvbmZpcm1hdGlvbi1tb2RhbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2RldmljZS1pbmZvcm1hdGlvbi13aWRnZXQvc3JjL2NvbXBvbmVudHMvYmItZGV2aWNlLWNvbmZpcm1hdGlvbi1tb2RhbC11aS9kZXZpY2UtY29uZmlybWF0aW9uLW1vZGFsLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvZGV2aWNlLWluZm9ybWF0aW9uLXdpZGdldC9zcmMvY29tcG9uZW50cy9iYi1kZXZpY2UtY29uZmlybWF0aW9uLW1vZGFsLXVpL2RldmljZS1jb25maXJtYXRpb24tbW9kYWwuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzNELE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7QUFRM0csTUFBTSxPQUFPLGdDQUFnQztJQUw3QztRQVVFOzs7V0FHRztRQUNNLHNCQUFpQixHQUFHLEVBQUUsQ0FBQztRQUNoQzs7O1dBR0c7UUFDTSx1QkFBa0IsR0FBRyxTQUFTLENBQUM7UUFDeEM7OztXQUdHO1FBQ00scUJBQWdCLEdBQUcsRUFBRSxDQUFDO1FBQy9COzs7V0FHRztRQUNNLHFCQUFnQixHQUFHLEVBQUUsQ0FBQztRQUMvQjs7O1dBR0c7UUFDTSxrQkFBYSxHQUFHLEVBQUUsQ0FBQztRQUM1Qjs7O1dBR0c7UUFDTSxhQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCOzs7V0FHRztRQUNNLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFFZCxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUNsQyxZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUVwQyxZQUFPLEdBQUcsSUFBSSxDQUFDO0tBU3pCO0lBUEMsUUFBUTtRQUNOLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELFNBQVM7UUFDUCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3RCLENBQUM7OzhIQXBEVSxnQ0FBZ0M7a0hBQWhDLGdDQUFnQyw4WENUN0MsODBFQTZEYyx5ekNETUQsdURBQXVEOzRGQTFEdkQsZ0NBQWdDO2tCQUw1QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxpQ0FBaUM7b0JBQzNDLFdBQVcsRUFBRSw0Q0FBNEM7b0JBQ3pELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNoRDs4QkFLVSxNQUFNO3NCQUFkLEtBQUs7Z0JBS0csaUJBQWlCO3NCQUF6QixLQUFLO2dCQUtHLGtCQUFrQjtzQkFBMUIsS0FBSztnQkFLRyxnQkFBZ0I7c0JBQXhCLEtBQUs7Z0JBS0csZ0JBQWdCO3NCQUF4QixLQUFLO2dCQUtHLGFBQWE7c0JBQXJCLEtBQUs7Z0JBS0csUUFBUTtzQkFBaEIsS0FBSztnQkFLRyxNQUFNO3NCQUFkLEtBQUs7Z0JBRUksTUFBTTtzQkFBZixNQUFNO2dCQUNHLE9BQU87c0JBQWhCLE1BQU07O0FBZ0JULE1BQU0sT0FBTyx1REFBd0QsU0FBUSxVQUc1RTs7cUpBSFksdURBQXVEO3lJQUF2RCx1REFBdUQ7NEZBQXZELHVEQUF1RDtrQkFIbkUsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsb0RBQW9EO2lCQUMvRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJiVGVtcGxhdGUgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvY29yZSc7XG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgRGlyZWN0aXZlLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGV2aWNlIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2RldmljZS1tYW5hZ2VtZW50LXR5cGVzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItZGV2aWNlLWNvbmZpcm1hdGlvbi1tb2RhbC11aScsXG4gIHRlbXBsYXRlVXJsOiAnLi9kZXZpY2UtY29uZmlybWF0aW9uLW1vZGFsLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIERldmljZUNvbmZpcm1hdGlvbk1vZGFsQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIFRoZSBkZXZpY2UgdG8gZGlzcGxheSB0aGUgbW9kYWwgZm9yLlxuICAgKi9cbiAgQElucHV0KCkgZGV2aWNlOiBEZXZpY2UgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBUaGUgdGV4dCBkaXNwbGF5ZWQgb24gdGhlIGNvbmZpcm1hdGlvbiBidXR0b24uXG4gICAqIERlZmF1bHRzIHRvIGFuIGVtcHR5IHN0cmluZy5cbiAgICovXG4gIEBJbnB1dCgpIGNvbmZpcm1CdXR0b25UZXh0ID0gJyc7XG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbmZpcm1hdGlvbiBidXR0b24uXG4gICAqIERlZmF1bHRzIHRvIHByaW1hcnkuXG4gICAqL1xuICBASW5wdXQoKSBjb25maXJtQnV0dG9uQ29sb3IgPSAncHJpbWFyeSc7XG4gIC8qKlxuICAgKiBUaGUgdGV4dCBkaXNwbGF5ZWQgb24gdGhlIGNhbmNlbCBidXR0b24uXG4gICAqIERlZmF1bHRzIHRvIGFuIGVtcHR5IHN0cmluZy5cbiAgICovXG4gIEBJbnB1dCgpIGNhbmNlbEJ1dHRvblRleHQgPSAnJztcbiAgLyoqXG4gICAqIFRoZSBoZWFkaW5nIHRleHQgZGlzcGxheWVkIG9uIHRoZSBtb2RhbC5cbiAgICogRGVmYXVsdHMgdG8gYW4gZW1wdHkgc3RyaW5nLlxuICAgKi9cbiAgQElucHV0KCkgbW9kYWxIZWFkaW5nVGV4dCA9ICcnO1xuICAvKipcbiAgICogVGhlIGJvZHkgdGV4dCBkaXNwbGF5ZWQgb24gdGhlIG1vZGFsLlxuICAgKiBEZWZhdWx0cyB0byBhbiBlbXB0eSBzdHJpbmcuXG4gICAqL1xuICBASW5wdXQoKSBtb2RhbEJvZHlUZXh0ID0gJyc7XG4gIC8qKlxuICAgKiBUaGUgaWNvbiBuYW1lIHRvIGRpc3BsYXkgaW4gdGhlIG1vZGFsIGJvZHkuXG4gICAqIERlZmF1bHRzIHRvIGFuIGVtcHR5IHN0cmluZy5cbiAgICovXG4gIEBJbnB1dCgpIGljb25OYW1lID0gJyc7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBtb2RhbCBpcyBvcGVuLlxuICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICovXG4gIEBJbnB1dCgpIGlzT3BlbiA9IGZhbHNlO1xuXG4gIEBPdXRwdXQoKSBjYW5jZWwgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBPdXRwdXQoKSBjb25maXJtID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIHJlYWRvbmx5IGhvc3RSZWYgPSB0aGlzO1xuXG4gIG9uQ2FuY2VsKCkge1xuICAgIHRoaXMuY2FuY2VsLmVtaXQoKTtcbiAgfVxuXG4gIG9uQ29uZmlybSgpIHtcbiAgICB0aGlzLmNvbmZpcm0uZW1pdCgpO1xuICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tiYkRldmljZUluZm9ybWF0aW9uQ29uZmlybWF0aW9uTW9kYWxDdXN0b21pemFibGVdJyxcbn0pXG5leHBvcnQgY2xhc3MgRGV2aWNlSW5mb3JtYXRpb25Db25maXJtYXRpb25Nb2RhbEN1c3RvbWl6YWJsZURpcmVjdGl2ZSBleHRlbmRzIEJiVGVtcGxhdGU8XG4gIERldmljZUNvbmZpcm1hdGlvbk1vZGFsQ29tcG9uZW50LFxuICB1bmRlZmluZWRcbj4ge31cbiIsIjxuZy1jb250YWluZXIgYmJEZXZpY2VJbmZvcm1hdGlvbkNvbmZpcm1hdGlvbk1vZGFsQ3VzdG9taXphYmxlIFtiYkhvc3RSZWZdPVwiaG9zdFJlZlwiPjwvbmctY29udGFpbmVyPlxuXG48bmctdGVtcGxhdGUgYmJEZXZpY2VJbmZvcm1hdGlvbkNvbmZpcm1hdGlvbk1vZGFsQ3VzdG9taXphYmxlIGxldC1ob3N0UmVmPlxuICA8YmItbW9kYWwtdWkgW2lzT3Blbl09XCJob3N0UmVmLmlzT3BlblwiIChjYW5jZWwpPVwiaG9zdFJlZi5vbkNhbmNlbCgpXCI+XG4gICAgPGJiLW1vZGFsLWhlYWRlci11aT5cbiAgICAgIDxuZy10ZW1wbGF0ZSBiYkN1c3RvbU1vZGFsSGVhZGVyPlxuICAgICAgICA8YmItaGVhZGVyLXVpXG4gICAgICAgICAgaGVhZGluZ1R5cGU9XCJoMlwiXG4gICAgICAgICAgZGF0YS1yb2xlPVwiZGV2aWNlLW1vZGFsLWhlYWRlclwiXG4gICAgICAgICAgW2hlYWRpbmddPVwiaG9zdFJlZi5tb2RhbEhlYWRpbmdUZXh0XCI+XG4gICAgICAgIDwvYmItaGVhZGVyLXVpPlxuICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICA8L2JiLW1vZGFsLWhlYWRlci11aT5cbiAgXG4gICAgPGJiLW1vZGFsLWJvZHktdWk+XG4gICAgICA8bmctdGVtcGxhdGUgYmJDdXN0b21Nb2RhbEJvZHk+XG4gICAgICAgIHt7IGhvc3RSZWYubW9kYWxCb2R5VGV4dCB9fVxuICAgICAgICA8aHI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJiYi1zdGFja1wiPlxuICAgICAgICAgIDxiYi1pY29uLXVpIGNsYXNzPVwiYmItc3RhY2tfX2l0ZW1cIiBbbmFtZV09XCJob3N0UmVmLmljb25OYW1lXCIgc2l6ZT1cInhsXCI+PC9iYi1pY29uLXVpPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJiYi1zdGFja19faXRlbSBiYi1zdGFja19faXRlbS0tZmlsbFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJyZWFrLXdvcmRcIj5cbiAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImhvc3RSZWYuZGV2aWNlPy5mcmllbmRseU5hbWUgYXMgZnJpZW5kbHlOYW1lOyBlbHNlIGRlZmF1bHRGcmllbmRseU5hbWVcIj5cbiAgICAgICAgICAgICAgICB7eyBmcmllbmRseU5hbWUgfX1cbiAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxiYi1kZXZpY2UtdmVuZG9yLW1vZGVsLXVpXG4gICAgICAgICAgICAgIGNsYXNzPVwiYmItc3VidGl0bGUgYmItdGV4dC1zdXBwb3J0XCJcbiAgICAgICAgICAgICAgW2RldmljZV09XCJob3N0UmVmLmRldmljZVwiPlxuICAgICAgICAgICAgPC9iYi1kZXZpY2UtdmVuZG9yLW1vZGVsLXVpPlxuICAgICAgICAgICAgPGJiLWRldmljZS1yZWdpc3RlcmVkLW9uLXVpXG4gICAgICAgICAgICAgIGNsYXNzPVwiYmItc3ViaGVhZGVyIGJiLXN1YmhlYWRlci0tcmVndWxhciBiYi10ZXh0LXN1cHBvcnRcIlxuICAgICAgICAgICAgICBbY3JlYXRlZERhdGVdPVwiaG9zdFJlZi5kZXZpY2U/LmNyZWF0ZWRcIj5cbiAgICAgICAgICAgIDwvYmItZGV2aWNlLXJlZ2lzdGVyZWQtb24tdWk+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8aHIgY2xhc3M9XCJiYi1ibG9jayBiYi1ibG9jay0tbm8tbWFyZ2luXCI+XG4gICAgICA8L25nLXRlbXBsYXRlPlxuICAgIDwvYmItbW9kYWwtYm9keS11aT5cbiAgICA8YmItbW9kYWwtZm9vdGVyLXVpPlxuICAgICAgPG5nLXRlbXBsYXRlIGJiQ3VzdG9tTW9kYWxGb290ZXI+XG4gICAgICAgIDxidXR0b24gYmJCdXR0b25cbiAgICAgICAgICBjb2xvcj1cInNlY29uZGFyeVwiXG4gICAgICAgICAgZGF0YS1yb2xlPVwibW9kYWwtY2FuY2VsXCJcbiAgICAgICAgICAoY2xpY2spPVwiaG9zdFJlZi5vbkNhbmNlbCgpXCI+XG4gICAgICAgICAge3sgaG9zdFJlZi5jYW5jZWxCdXR0b25UZXh0IH19XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIGJiQnV0dG9uXG4gICAgICAgICAgZGF0YS1yb2xlPVwibW9kYWwtY29uZmlybVwiXG4gICAgICAgICAgW2NvbG9yXT1cImhvc3RSZWYuY29uZmlybUJ1dHRvbkNvbG9yXCJcbiAgICAgICAgICAoY2xpY2spPVwiaG9zdFJlZi5vbkNvbmZpcm0oKVwiPlxuICAgICAgICAgIHt7IGhvc3RSZWYuY29uZmlybUJ1dHRvblRleHQgfX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L25nLXRlbXBsYXRlPlxuICAgIDwvYmItbW9kYWwtZm9vdGVyLXVpPlxuICA8L2JiLW1vZGFsLXVpPlxuICBcbiAgPG5nLXRlbXBsYXRlICNkZWZhdWx0RnJpZW5kbHlOYW1lXG4gICAgaTE4bj1cIk1vZGFsIGRlZmF1bHQgZnJpZW5kbHkgbmFtZUBAYmItZGV2aWNlLWNvbmZpcm1hdGlvbi1tb2RhbC11aS5kZWZhdWx0LWZyaWVuZGx5LW5hbWVcIj5cbiAgICBVbmtub3duIERldmljZVxuICA8L25nLXRlbXBsYXRlPlxuPC9uZy10ZW1wbGF0ZT4iXX0=