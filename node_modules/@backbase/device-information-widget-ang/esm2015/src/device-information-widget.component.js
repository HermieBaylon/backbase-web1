import { Component, ViewChild, Input } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { switchMap, first, tap, catchError } from 'rxjs/operators';
import { UserDeviceInformationService } from './services/user-device-information.service';
import { AdminDeviceInformationService } from './services/admin-device-information.service';
import { DeviceStatus, UpdateAction } from './models/device-management-types';
import { DeviceInformationPreferenceService } from './services/device-information-preference.service';
import * as i0 from "@angular/core";
import * as i1 from "./services/user-device-information.service";
import * as i2 from "./services/admin-device-information.service";
import * as i3 from "@backbase/ui-ang";
import * as i4 from "./services/device-information-preference.service";
import * as i5 from "./components/bb-device-information-ui/device-information.component";
import * as i6 from "@angular/common";
export class DeviceInformationWidgetComponent {
    constructor(userDataService, adminDataService, notificationService, preferenceService) {
        this.userDataService = userDataService;
        this.adminDataService = adminDataService;
        this.notificationService = notificationService;
        this.preferenceService = preferenceService;
        this.successHeader = '';
        this.successMessage = '';
        this.failureHeader = '';
        this.failureMessage = '';
        this.failurePermissionsMessage = '';
        this.updateActions = UpdateAction;
        this.refreshDevicesSubject = new BehaviorSubject(undefined);
        this.isLoadingSubject = new BehaviorSubject(false);
        this.isSavingSubject = new BehaviorSubject(false);
        this.errorSubject = new BehaviorSubject(undefined);
        this.dismissTimeout = 3000;
        this.isAdminWidget = false;
        this.isLoading = this.isLoadingSubject.asObservable();
        this.isSaving = this.isSavingSubject.asObservable();
        this.errorState = this.errorSubject.asObservable();
        this.devices = this.getDevicesObservable();
        this.onError = (err) => {
            this.notificationService.showNotification({
                header: this.failureHeader,
                message: this.getErrorMessage(err),
                messageContext: {
                    device: this.managedDevice,
                },
                modifier: 'error',
                ttl: this.dismissTimeout,
            });
            return new Observable();
        };
        this.onSuccess = () => {
            this.notificationService.showNotification({
                header: this.successHeader,
                headerContext: {
                    actionType: this.updateAction,
                },
                message: this.successMessage,
                messageContext: {
                    actionType: this.updateAction,
                    device: this.managedDevice,
                },
                modifier: 'success',
                ttl: this.dismissTimeout,
            });
            this.refreshDevicesSubject.next(undefined);
        };
    }
    set dbsUserId(inputUserId) {
        this.adminDataService.dbsUserIdInput = inputUserId;
    }
    /**
     * Sets the id for the user to get device information for.
     */
    get dbsUserId() {
        return this.adminDataService.dbsUserIdInput;
    }
    ngOnInit() {
        if (this.notificationDismissTime) {
            this.dismissTimeout = this.notificationDismissTime * 1000;
        }
        else {
            this.preferenceService
                .getTimeoutPreference()
                .pipe(first())
                .subscribe(time => (this.dismissTimeout = time * 1000));
        }
        if (typeof this.isAdmin === 'boolean') {
            this.isAdminWidget = this.isAdmin;
        }
        else {
            this.preferenceService
                .getAdminPreference()
                .pipe(first())
                .subscribe(adminPreference => (this.isAdminWidget = adminPreference));
        }
    }
    getFriendlyName(defaultValue, modifiedDevice) {
        const device = modifiedDevice || this.managedDevice;
        return device && device.friendlyName ? `'${device.friendlyName}'` : defaultValue;
    }
    getOldFriendlyName(defaultValue, modifiedDevice) {
        const device = modifiedDevice || this.managedDevice;
        return device && device.oldFriendlyName ? `'${device.oldFriendlyName}'` : defaultValue;
    }
    onSave(device) {
        this.isSavingSubject.next(true);
        this.updateAction = UpdateAction.Save;
        this.managedDevice = device;
        this.dataService
            .updateDevice(device.deviceId, {
            friendlyName: device.friendlyName,
        })
            .pipe(tap(() => this.isSavingSubject.next(false)), catchError((err) => {
            this.isSavingSubject.next(false);
            return this.onError(err);
        }))
            .subscribe(this.onSuccess);
    }
    onRemove(device) {
        this.updateAction = UpdateAction.Remove;
        this.managedDevice = device;
        this.dataService
            .removeDevice(device.deviceId)
            .pipe(catchError(this.onError))
            .subscribe(this.onSuccess);
    }
    onSuspend(device) {
        this.updateAction = UpdateAction.Suspend;
        this.managedDevice = device;
        this.updateDevice(device, DeviceStatus.DISABLED);
    }
    onRestore(device) {
        this.updateAction = UpdateAction.Restore;
        this.managedDevice = device;
        this.updateDevice(device, DeviceStatus.ENABLED);
    }
    getDevicesObservable() {
        return this.refreshDevicesSubject.pipe(switchMap(() => {
            this.errorSubject.next(undefined);
            this.isLoadingSubject.next(true);
            return this.dataService.getDevices();
        }), tap(() => {
            this.isLoadingSubject.next(false);
        }), catchError(error => {
            this.isLoadingSubject.next(false);
            this.errorSubject.next(error);
            return new Observable();
        }));
    }
    updateDevice(device, action) {
        this.dataService
            .updateDevice(device.deviceId, {
            status: action,
        })
            .pipe(catchError(this.onError))
            .subscribe(this.onSuccess);
    }
    getErrorMessage(error) {
        return (error.status === 403 ? this.failurePermissionsMessage : this.failureMessage);
    }
    get dataService() {
        return this.isAdminWidget ? this.adminDataService : this.userDataService;
    }
}
DeviceInformationWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationWidgetComponent, deps: [{ token: i1.UserDeviceInformationService }, { token: i2.AdminDeviceInformationService }, { token: i3.NotificationService }, { token: i4.DeviceInformationPreferenceService }], target: i0.ɵɵFactoryTarget.Component });
DeviceInformationWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeviceInformationWidgetComponent, selector: "bb-device-information-widget", inputs: { notificationDismissTime: ["dismissTimeout", "notificationDismissTime"], isAdmin: ["isAdminWidget", "isAdmin"], dbsUserId: "dbsUserId" }, providers: [DeviceInformationPreferenceService, UserDeviceInformationService, AdminDeviceInformationService], viewQueries: [{ propertyName: "successHeader", first: true, predicate: ["notificationSuccessHeader"], descendants: true }, { propertyName: "successMessage", first: true, predicate: ["notificationSuccessMessage"], descendants: true }, { propertyName: "failureHeader", first: true, predicate: ["notificationFailureHeader"], descendants: true }, { propertyName: "failureMessage", first: true, predicate: ["notificationFailureMessage"], descendants: true }, { propertyName: "failurePermissionsMessage", first: true, predicate: ["notificationPermissionsFailureMessage"], descendants: true }], ngImport: i0, template: "<bb-device-information-ui\n  [devices]=\"devices | async\"\n  [isLoading]=\"isLoading | async\"\n  [isSaving]=\"isSaving | async\"\n  [errorState]=\"errorState | async\"\n  (save)=\"onSave($event)\"\n  (remove)=\"onRemove($event)\"\n  (suspend)=\"onSuspend($event)\"\n  (restore)=\"onRestore($event)\"\n></bb-device-information-ui>\n\n<ng-template #notificationSuccessHeader let-actionType=\"actionType\">\n  <ng-container [ngSwitch]=\"actionType\">\n    <div *ngSwitchCase=\"updateActions.Restore\"\n      data-role=\"notification-header-restored\"\n      i18n=\"Notification restored header@@bb-device-information-widget.notification.header.restored\">\n      Device restored\n    </div>\n    <div *ngSwitchCase=\"updateActions.Suspend\" \n      data-role=\"notification-header-suspended\"\n      i18n=\"Notification suspended header@@bb-device-information-widget.notification.header.suspended\">\n      Device suspended\n    </div>\n    <div *ngSwitchCase=\"updateActions.Remove\"\n      data-role=\"notification-header-removed\"\n      i18n=\"Notification removed header@@bb-device-information-widget.notification.header.removed\">\n      Device removed\n    </div>\n    <div *ngSwitchCase=\"updateActions.Save\"\n      data-role=\"notification-header-saved\"\n      i18n=\"Notification saved header@@bb-device-information-widget.notification.header.saved\">\n      Device name changed\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #notificationSuccessMessage let-actionType=\"actionType\" let-device=\"device\">\n  <ng-container [ngSwitch]=\"actionType\">\n    <div *ngSwitchCase=\"updateActions.Restore\"\n      i18n=\"Notification restored message@@bb-device-information-widget.notification.message.restored\">\n      {{ getFriendlyName('Device', device) }} restored successfully.\n    </div>\n    <div *ngSwitchCase=\"updateActions.Suspend\"\n      i18n=\"Notification suspended message@@bb-device-information-widget.notification.message.suspended\">\n      {{ getFriendlyName('Device', device) }} suspended successfully.\n    </div>\n    <div *ngSwitchCase=\"updateActions.Remove\"\n      i18n=\"Notification removed message@@bb-device-information-widget.notification.message.removed\">\n      {{ getFriendlyName('Device', device) }} removed successfully.\n    </div>\n    <div *ngSwitchCase=\"updateActions.Save\"\n      i18n=\"Notification saved message@@bb-device-information-widget.notification.message.saved\">\n      {{ getFriendlyName('Device', device) }} name changed successfully.\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #notificationFailureHeader>\n  <div data-role=\"notification-header-failed\" i18n=\"Failure notification header@@bb-device-information-widget.notification.failure.header\">\n    Device update failed\n  </div>\n</ng-template>\n\n<ng-template #notificationFailureMessage let-device=\"device\">\n  <div i18n=\"Failure notification message@@bb-device-information-widget.notification.failure.message\">\n    Failed to update {{ getOldFriendlyName('device', device) }}.\n  </div>\n</ng-template>\n\n<ng-template #notificationPermissionsFailureMessage let-device=\"device\">\n  <div i18n=\"Permission failure notification message@@bb-device-information-widget.notification.permissions.failure.message\">\n    Insufficient permissions to update {{ getOldFriendlyName('device', device) }}.\n  </div>\n</ng-template>", components: [{ type: i5.DeviceInformationComponent, selector: "bb-device-information-ui", inputs: ["isSaving", "devices", "isLoading", "errorState"], outputs: ["save", "remove", "suspend", "restore"] }], directives: [{ type: i6.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i6.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "async": i6.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceInformationWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-device-information-widget',
                    templateUrl: './device-information-widget.component.html',
                    providers: [DeviceInformationPreferenceService, UserDeviceInformationService, AdminDeviceInformationService],
                }]
        }], ctorParameters: function () { return [{ type: i1.UserDeviceInformationService }, { type: i2.AdminDeviceInformationService }, { type: i3.NotificationService }, { type: i4.DeviceInformationPreferenceService }]; }, propDecorators: { successHeader: [{
                type: ViewChild,
                args: ['notificationSuccessHeader']
            }], successMessage: [{
                type: ViewChild,
                args: ['notificationSuccessMessage']
            }], failureHeader: [{
                type: ViewChild,
                args: ['notificationFailureHeader']
            }], failureMessage: [{
                type: ViewChild,
                args: ['notificationFailureMessage']
            }], failurePermissionsMessage: [{
                type: ViewChild,
                args: ['notificationPermissionsFailureMessage']
            }], notificationDismissTime: [{
                type: Input,
                args: ['dismissTimeout']
            }], isAdmin: [{
                type: Input,
                args: ['isAdminWidget']
            }], dbsUserId: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,