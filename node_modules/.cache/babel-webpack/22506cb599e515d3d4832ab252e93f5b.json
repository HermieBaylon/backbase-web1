{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i2 from '@backbase/foundation-ang/data-http';\nimport { createMocks } from '@backbase/foundation-ang/data-http';\nconst ChargeBearer = {\n  OUR: 'OUR',\n  BEN: 'BEN',\n  SHA: 'SHA'\n};\nconst InstructionPriority = {\n  NORM: 'NORM',\n  HIGH: 'HIGH'\n};\nconst SchemeName = {\n  IBAN: 'IBAN',\n  BBAN: 'BBAN',\n  ID: 'ID',\n  EXTERNALID: 'EXTERNAL_ID'\n};\nconst TimeFrameUnit = {\n  HOUR: 'HOUR',\n  CALENDARDAY: 'CALENDAR_DAY',\n  BUSINESSDAY: 'BUSINESS_DAY'\n};\nconst PAYMENT_ORDER_OPTIONS_BASE_PATH = new InjectionToken('PAYMENT_ORDER_OPTIONS_BASE_PATH');\nconst COLLECTION_FORMATS = {\n  'csv': ',',\n  'tsv': '   ',\n  'ssv': ' ',\n  'pipes': '|'\n};\n\nclass PaymentOrderOptionsConfiguration {\n  constructor(configurationParameters = {}) {\n    this.apiKeys = configurationParameters.apiKeys;\n    this.username = configurationParameters.username;\n    this.password = configurationParameters.password;\n    this.accessToken = configurationParameters.accessToken;\n    this.basePath = configurationParameters.basePath;\n    this.withCredentials = configurationParameters.withCredentials;\n    this.encoder = configurationParameters.encoder;\n\n    if (configurationParameters.credentials) {\n      this.credentials = configurationParameters.credentials;\n    } else {\n      this.credentials = {};\n    }\n  }\n\n  selectHeaderContentType(contentTypes) {\n    if (contentTypes.length === 0) {\n      return undefined;\n    }\n\n    const type = contentTypes.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return contentTypes[0];\n    }\n\n    return type;\n  }\n\n  selectHeaderAccept(accepts) {\n    if (accepts.length === 0) {\n      return undefined;\n    }\n\n    const type = accepts.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return accepts[0];\n    }\n\n    return type;\n  }\n\n  isJsonMime(mime) {\n    const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n\n  lookupCredential(key) {\n    const value = this.credentials[key];\n    return typeof value === 'function' ? value() : value;\n  }\n\n}\n\nconst CONFIG_TOKEN = new InjectionToken('api-data-module PaymentOrderOptionsConfiguration');\n\nclass PaymentOrderOptionsApiModule {\n  constructor(parentModule, http, dataModulesManager, config) {\n    if (parentModule) {\n      throw new Error('PaymentOrderOptionsApiModule is already loaded. Import in your base AppModule only.');\n    }\n\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' + 'See also https://github.com/angular/angular/issues/20575');\n    }\n\n    if (dataModulesManager) {\n      dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n        apiRoot: '',\n        servicePath: config.basePath || '',\n        headers: {}\n      });\n    }\n  }\n\n  static forRoot(configurationFactory) {\n    return {\n      ngModule: PaymentOrderOptionsApiModule,\n      providers: [{\n        provide: PaymentOrderOptionsConfiguration,\n        useFactory: configurationFactory\n      }]\n    };\n  }\n\n}\n\nPaymentOrderOptionsApiModule.ɵfac = function PaymentOrderOptionsApiModule_Factory(t) {\n  return new (t || PaymentOrderOptionsApiModule)(i0.ɵɵinject(PaymentOrderOptionsApiModule, 12), i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DataModulesManager, 8), i0.ɵɵinject(PaymentOrderOptionsConfiguration));\n};\n\nPaymentOrderOptionsApiModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: PaymentOrderOptionsApiModule\n});\nPaymentOrderOptionsApiModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [],\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PaymentOrderOptionsApiModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [],\n      exports: [],\n      providers: []\n    }]\n  }], function () {\n    return [{\n      type: PaymentOrderOptionsApiModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: i1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.DataModulesManager,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: PaymentOrderOptionsConfiguration\n    }];\n  }, null);\n})();\n\nclass CustomHttpParameterCodec {\n  encodeKey(k) {\n    return encodeURIComponent(k);\n  }\n\n  encodeValue(v) {\n    return encodeURIComponent(v);\n  }\n\n  decodeKey(k) {\n    return decodeURIComponent(k);\n  }\n\n  decodeValue(v) {\n    return decodeURIComponent(v);\n  }\n\n}\n\nclass PaymentOptionsHttpService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new PaymentOrderOptionsConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getPaymentOptionsByPaymentType(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _paymentType = requestParameters[\"paymentType\"];\n\n    if (_paymentType === null || _paymentType === undefined) {\n      throw new Error('Required parameter paymentType was null or undefined when calling getPaymentOptionsByPaymentType.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/payment-options/${encodeURIComponent(String(_paymentType))}`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getPaymentOptionsByPaymentTypeUrl(requestParameters) {\n    const _paymentType = requestParameters[\"paymentType\"];\n\n    if (_paymentType === null || _paymentType === undefined) {\n      throw new Error('Required parameter paymentType was null or undefined when calling getPaymentOptionsByPaymentType.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v1/payment-options/${encodeURIComponent(String(_paymentType))}`;\n  }\n\n  postPaymentOptions(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _paymentOptionsRequest = requestParameters[\"paymentOptionsRequest\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/payment-options`, _paymentOptionsRequest, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  postPaymentOptionsUrl(requestParameters) {\n    const _paymentOptionsRequest = requestParameters[\"paymentOptionsRequest\"];\n    return `${this.configuration.basePath}/client-api/v1/payment-options`;\n  }\n\n}\n\nPaymentOptionsHttpService.ɵfac = function PaymentOptionsHttpService_Factory(t) {\n  return new (t || PaymentOptionsHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(PAYMENT_ORDER_OPTIONS_BASE_PATH, 8), i0.ɵɵinject(PaymentOrderOptionsConfiguration, 8));\n};\n\nPaymentOptionsHttpService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PaymentOptionsHttpService,\n  factory: PaymentOptionsHttpService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PaymentOptionsHttpService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [PAYMENT_ORDER_OPTIONS_BASE_PATH]\n      }]\n    }, {\n      type: PaymentOrderOptionsConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst PaymentOptionsHttpServiceGetPaymentOptionsByPaymentTypeMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v1/payment-options/{paymentType}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"paymentType\": \"US_FOREIGN_WIRE\",\n      \"canEditCounterparty\": true,\n      \"paymentOptions\": [{\n        \"instructionPriority\": \"NORM\",\n        \"transferFee\": {\n          \"amount\": \"15.29\",\n          \"currencyCode\": \"USD\"\n        },\n        \"chargeBearer\": [\"OUR\", \"SHA\"],\n        \"executionTimeFrame\": {\n          \"unit\": \"BUSINESS_DAY\",\n          \"max\": 1\n        },\n        \"cutOffTime\": \"16:00\"\n      }, {\n        \"instructionPriority\": \"HIGH\",\n        \"transferFee\": {\n          \"amount\": \"20.00\",\n          \"currencyCode\": \"USD\"\n        },\n        \"chargeBearer\": [\"OUR\", \"SHA\"],\n        \"executionTimeFrame\": {\n          \"unit\": \"HOUR\",\n          \"min\": 1,\n          \"max\": 2\n        },\n        \"cutOffTime\": \"16:00\"\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}]);\nconst PaymentOptionsHttpServicePostPaymentOptionsMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v1/payment-options\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {\n      \"options\": [{\n        \"paymentType\": \"US_FOREIGN_WIRE\",\n        \"paymentOptions\": [{\n          \"instructionPriority\": \"NORM\",\n          \"transferFee\": {\n            \"amount\": \"15.29\",\n            \"currencyCode\": \"USD\"\n          },\n          \"chargeBearer\": [\"OUR\", \"SHA\"],\n          \"executionTimeFrame\": {\n            \"unit\": \"BUSINESS_DAY\",\n            \"max\": 1\n          },\n          \"cutOffTime\": \"16:00\"\n        }, {\n          \"instructionPriority\": \"HIGH\",\n          \"transferFee\": {\n            \"amount\": \"20.00\",\n            \"currencyCode\": \"USD\"\n          },\n          \"chargeBearer\": [\"OUR\", \"SHA\"],\n          \"executionTimeFrame\": {\n            \"unit\": \"HOUR\",\n            \"min\": 1,\n            \"max\": 2\n          },\n          \"cutOffTime\": \"16:00\"\n        }]\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }]\n}]);\nconst PaymentOptionsHttpServiceMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v1/payment-options/{paymentType}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"paymentType\": \"US_FOREIGN_WIRE\",\n      \"canEditCounterparty\": true,\n      \"paymentOptions\": [{\n        \"instructionPriority\": \"NORM\",\n        \"transferFee\": {\n          \"amount\": \"15.29\",\n          \"currencyCode\": \"USD\"\n        },\n        \"chargeBearer\": [\"OUR\", \"SHA\"],\n        \"executionTimeFrame\": {\n          \"unit\": \"BUSINESS_DAY\",\n          \"max\": 1\n        },\n        \"cutOffTime\": \"16:00\"\n      }, {\n        \"instructionPriority\": \"HIGH\",\n        \"transferFee\": {\n          \"amount\": \"20.00\",\n          \"currencyCode\": \"USD\"\n        },\n        \"chargeBearer\": [\"OUR\", \"SHA\"],\n        \"executionTimeFrame\": {\n          \"unit\": \"HOUR\",\n          \"min\": 1,\n          \"max\": 2\n        },\n        \"cutOffTime\": \"16:00\"\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v1/payment-options\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {\n      \"options\": [{\n        \"paymentType\": \"US_FOREIGN_WIRE\",\n        \"paymentOptions\": [{\n          \"instructionPriority\": \"NORM\",\n          \"transferFee\": {\n            \"amount\": \"15.29\",\n            \"currencyCode\": \"USD\"\n          },\n          \"chargeBearer\": [\"OUR\", \"SHA\"],\n          \"executionTimeFrame\": {\n            \"unit\": \"BUSINESS_DAY\",\n            \"max\": 1\n          },\n          \"cutOffTime\": \"16:00\"\n        }, {\n          \"instructionPriority\": \"HIGH\",\n          \"transferFee\": {\n            \"amount\": \"20.00\",\n            \"currencyCode\": \"USD\"\n          },\n          \"chargeBearer\": [\"OUR\", \"SHA\"],\n          \"executionTimeFrame\": {\n            \"unit\": \"HOUR\",\n            \"min\": 1,\n            \"max\": 2\n          },\n          \"cutOffTime\": \"16:00\"\n        }]\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }]\n}]);\n\nclass SanctionedCountriesHttpService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new PaymentOrderOptionsConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getSanctionedCountries(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _countryIso = requestParameters[\"countryIso\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_countryIso !== undefined && _countryIso !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _countryIso, 'countryIso');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/sanctioned-countries`, {\n      params: queryParameters,\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getSanctionedCountriesUrl(requestParameters) {\n    const _countryIso = requestParameters[\"countryIso\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_countryIso !== undefined && _countryIso !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _countryIso, 'countryIso');\n    }\n\n    const queryString = queryParameters.toString();\n    return `${this.configuration.basePath}/client-api/v1/sanctioned-countries${queryString ? `?${queryString}` : ''}`;\n  }\n\n}\n\nSanctionedCountriesHttpService.ɵfac = function SanctionedCountriesHttpService_Factory(t) {\n  return new (t || SanctionedCountriesHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(PAYMENT_ORDER_OPTIONS_BASE_PATH, 8), i0.ɵɵinject(PaymentOrderOptionsConfiguration, 8));\n};\n\nSanctionedCountriesHttpService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SanctionedCountriesHttpService,\n  factory: SanctionedCountriesHttpService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SanctionedCountriesHttpService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [PAYMENT_ORDER_OPTIONS_BASE_PATH]\n      }]\n    }, {\n      type: PaymentOrderOptionsConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst SanctionedCountriesHttpServiceGetSanctionedCountriesMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v1/sanctioned-countries\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"countries\": [{\n        \"country\": \"AE\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"IBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n          \"regex\": \"/^[a-zA-Z0-9]{23}$/\"\n        }, {\n          \"key\": \"bank-code\",\n          \"notApplicable\": true,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"AED\", \"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"AU\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"label\": {\n            \"bsb\": \"BSB code\"\n          },\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n          \"regex\": \"/^[0-9]{6}$/\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"AUD\", \"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"BR\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"IBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n          \"regex\": \"/^[a-zA-Z0-9]{29}$/\"\n        }, {\n          \"key\": \"bank-code\",\n          \"notApplicable\": true,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"BRL\", \"EUR\", \"GBP\", \"USD\"]\n        }, {\n          \"key\": \"purpose-of-payment\",\n          \"mandatory\": true\n        }]\n      }, {\n        \"country\": \"CA\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"label\": {\n            \"routing-number\": \"Routing number\"\n          },\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n          \"regex\": \"/^[0-9]{9}$/\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"CAD\", \"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"CN\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"EUR\", \"GBP\", \"USD\"]\n        }, {\n          \"key\": \"purpose-of-payment\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"predefinedValues\": true\n        }],\n        \"purposesOfPayment\": [{\n          \"code\": \"PAYT/02123\",\n          \"description\": \"Individual Payment\"\n        }, {\n          \"code\": \"PAYT/02112\",\n          \"description\": \"Trade related Payment\"\n        }, {\n          \"code\": \"PAYT/02114\",\n          \"description\": \"Service related Payment\"\n        }]\n      }, {\n        \"country\": \"GB\",\n        \"isDefault\": true,\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"label\": {\n            \"sort-code\": \"Sort code\"\n          },\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n          \"regex\": \"/^[0-9]{6}$/\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"HK\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"label\": {\n            \"clearing\": \"Clearing code\"\n          },\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n          \"regex\": \"/^[0-9]{3}$/\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"HKD\", \"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"IN\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"label\": {\n            \"ifsc\": \"IFSC\"\n          },\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n          \"regex\": \"/^[a-zA-Z0-9]{3}$/\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"INR\", \"EUR\", \"GBP\", \"USD\"]\n        }, {\n          \"key\": \"purpose-of-payment\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"predefinedValues\": true\n        }],\n        \"purposesOfPayment\": [{\n          \"code\": \"P1004\",\n          \"description\": \"Legal services\"\n        }, {\n          \"code\": \"P0401\",\n          \"description\": \"Postal services\"\n        }, {\n          \"code\": \"P0402\",\n          \"description\": \"Courier services\"\n        }]\n      }, {\n        \"country\": \"JO\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"IBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n          \"regex\": \"/^[a-zA-Z0-9]{30}$/\"\n        }, {\n          \"key\": \"bank-code\",\n          \"notApplicable\": true,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"JOD\", \"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"JP\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"notApplicable\": true,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"JPY\", \"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"NL\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"IBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n          \"regex\": \"/^[a-zA-Z0-9]{18}$/\"\n        }, {\n          \"key\": \"bank-code\",\n          \"notApplicable\": true,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"RU\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"label\": {\n            \"bik\": \"BIK\"\n          },\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n          \"regex\": \"/^[0-9]{9}$/\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"RUB\", \"EUR\", \"GBP\", \"USD\"]\n        }, {\n          \"key\": \"purpose-of-payment\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"predefinedValues\": true\n        }],\n        \"purposesOfPayment\": [{\n          \"code\": \"01010\",\n          \"description\": \"Selling by Residents of foreign currencies for Russian Roubles\"\n        }, {\n          \"code\": \"99010\",\n          \"description\": \"The return to Residents, of erroneously debited (credited) funds\"\n        }, {\n          \"code\": \"01030\",\n          \"description\": \"Purchases by Residents of foreign currencies for Russian Roubles\"\n        }]\n      }, {\n        \"country\": \"SA\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"label\": {\n            \"za-code\": \"ZA code\"\n          },\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n          \"regex\": \"/^[0-9]{6}$/\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"ZAR\", \"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"SG\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"notApplicable\": true,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"SGD\", \"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"US\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"label\": {\n            \"routing-number\": \"Routing transit number (ABA)\"\n          },\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n          \"regex\": \"/^[0-9]{9}$/\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"EUR\", \"GBP\", \"USD\"]\n        }]\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nconst SanctionedCountriesHttpServiceMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v1/sanctioned-countries\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"countries\": [{\n        \"country\": \"AE\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"IBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n          \"regex\": \"/^[a-zA-Z0-9]{23}$/\"\n        }, {\n          \"key\": \"bank-code\",\n          \"notApplicable\": true,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"AED\", \"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"AU\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"label\": {\n            \"bsb\": \"BSB code\"\n          },\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n          \"regex\": \"/^[0-9]{6}$/\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"AUD\", \"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"BR\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"IBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n          \"regex\": \"/^[a-zA-Z0-9]{29}$/\"\n        }, {\n          \"key\": \"bank-code\",\n          \"notApplicable\": true,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"BRL\", \"EUR\", \"GBP\", \"USD\"]\n        }, {\n          \"key\": \"purpose-of-payment\",\n          \"mandatory\": true\n        }]\n      }, {\n        \"country\": \"CA\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"label\": {\n            \"routing-number\": \"Routing number\"\n          },\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n          \"regex\": \"/^[0-9]{9}$/\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"CAD\", \"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"CN\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"EUR\", \"GBP\", \"USD\"]\n        }, {\n          \"key\": \"purpose-of-payment\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"predefinedValues\": true\n        }],\n        \"purposesOfPayment\": [{\n          \"code\": \"PAYT/02123\",\n          \"description\": \"Individual Payment\"\n        }, {\n          \"code\": \"PAYT/02112\",\n          \"description\": \"Trade related Payment\"\n        }, {\n          \"code\": \"PAYT/02114\",\n          \"description\": \"Service related Payment\"\n        }]\n      }, {\n        \"country\": \"GB\",\n        \"isDefault\": true,\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"label\": {\n            \"sort-code\": \"Sort code\"\n          },\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n          \"regex\": \"/^[0-9]{6}$/\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"HK\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"label\": {\n            \"clearing\": \"Clearing code\"\n          },\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n          \"regex\": \"/^[0-9]{3}$/\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"HKD\", \"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"IN\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"label\": {\n            \"ifsc\": \"IFSC\"\n          },\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n          \"regex\": \"/^[a-zA-Z0-9]{3}$/\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"INR\", \"EUR\", \"GBP\", \"USD\"]\n        }, {\n          \"key\": \"purpose-of-payment\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"predefinedValues\": true\n        }],\n        \"purposesOfPayment\": [{\n          \"code\": \"P1004\",\n          \"description\": \"Legal services\"\n        }, {\n          \"code\": \"P0401\",\n          \"description\": \"Postal services\"\n        }, {\n          \"code\": \"P0402\",\n          \"description\": \"Courier services\"\n        }]\n      }, {\n        \"country\": \"JO\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"IBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n          \"regex\": \"/^[a-zA-Z0-9]{30}$/\"\n        }, {\n          \"key\": \"bank-code\",\n          \"notApplicable\": true,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"JOD\", \"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"JP\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"notApplicable\": true,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"JPY\", \"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"NL\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"IBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n          \"regex\": \"/^[a-zA-Z0-9]{18}$/\"\n        }, {\n          \"key\": \"bank-code\",\n          \"notApplicable\": true,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"RU\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"label\": {\n            \"bik\": \"BIK\"\n          },\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n          \"regex\": \"/^[0-9]{9}$/\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"RUB\", \"EUR\", \"GBP\", \"USD\"]\n        }, {\n          \"key\": \"purpose-of-payment\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"predefinedValues\": true\n        }],\n        \"purposesOfPayment\": [{\n          \"code\": \"01010\",\n          \"description\": \"Selling by Residents of foreign currencies for Russian Roubles\"\n        }, {\n          \"code\": \"99010\",\n          \"description\": \"The return to Residents, of erroneously debited (credited) funds\"\n        }, {\n          \"code\": \"01030\",\n          \"description\": \"Purchases by Residents of foreign currencies for Russian Roubles\"\n        }]\n      }, {\n        \"country\": \"SA\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"label\": {\n            \"za-code\": \"ZA code\"\n          },\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n          \"regex\": \"/^[0-9]{6}$/\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"ZAR\", \"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"SG\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"notApplicable\": true,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"SGD\", \"EUR\", \"GBP\", \"USD\"]\n        }]\n      }, {\n        \"country\": \"US\",\n        \"inputFormSettings\": [{\n          \"key\": \"account-number\",\n          \"format\": \"BBAN\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n        }, {\n          \"key\": \"bank-code\",\n          \"label\": {\n            \"routing-number\": \"Routing transit number (ABA)\"\n          },\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n          \"regex\": \"/^[0-9]{9}$/\"\n        }, {\n          \"key\": \"currency\",\n          \"mandatory\": true,\n          \"notApplicable\": false,\n          \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n          \"values\": [\"EUR\", \"GBP\", \"USD\"]\n        }]\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\n\nclass SanctionedCurrenciesHttpService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new PaymentOrderOptionsConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getSanctionedCurrencies(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _countryIso = requestParameters[\"countryIso\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_countryIso !== undefined && _countryIso !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _countryIso, 'countryIso');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/sanctioned-currencies`, {\n      params: queryParameters,\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getSanctionedCurrenciesUrl(requestParameters) {\n    const _countryIso = requestParameters[\"countryIso\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_countryIso !== undefined && _countryIso !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _countryIso, 'countryIso');\n    }\n\n    const queryString = queryParameters.toString();\n    return `${this.configuration.basePath}/client-api/v1/sanctioned-currencies${queryString ? `?${queryString}` : ''}`;\n  }\n\n}\n\nSanctionedCurrenciesHttpService.ɵfac = function SanctionedCurrenciesHttpService_Factory(t) {\n  return new (t || SanctionedCurrenciesHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(PAYMENT_ORDER_OPTIONS_BASE_PATH, 8), i0.ɵɵinject(PaymentOrderOptionsConfiguration, 8));\n};\n\nSanctionedCurrenciesHttpService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SanctionedCurrenciesHttpService,\n  factory: SanctionedCurrenciesHttpService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SanctionedCurrenciesHttpService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [PAYMENT_ORDER_OPTIONS_BASE_PATH]\n      }]\n    }, {\n      type: PaymentOrderOptionsConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst SanctionedCurrenciesHttpServiceGetSanctionedCurrenciesMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v1/sanctioned-currencies\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"default\": {\n        \"code\": \"GBP\",\n        \"decimals\": 2\n      },\n      \"labeled\": {\n        \"normal\": [{\n          \"code\": \"AED\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"AUD\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"BRL\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"CAD\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"CNY\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"HKD\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"INR\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"JPY\",\n          \"decimals\": 0\n        }, {\n          \"code\": \"JOD\",\n          \"decimals\": 3\n        }, {\n          \"code\": \"RUB\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"SGD\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"ZAR\",\n          \"decimals\": 2\n        }],\n        \"popular\": [{\n          \"code\": \"EUR\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"GBP\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"USD\",\n          \"decimals\": 2\n        }]\n      }\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nconst SanctionedCurrenciesHttpServiceMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v1/sanctioned-currencies\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"default\": {\n        \"code\": \"GBP\",\n        \"decimals\": 2\n      },\n      \"labeled\": {\n        \"normal\": [{\n          \"code\": \"AED\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"AUD\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"BRL\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"CAD\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"CNY\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"HKD\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"INR\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"JPY\",\n          \"decimals\": 0\n        }, {\n          \"code\": \"JOD\",\n          \"decimals\": 3\n        }, {\n          \"code\": \"RUB\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"SGD\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"ZAR\",\n          \"decimals\": 2\n        }],\n        \"popular\": [{\n          \"code\": \"EUR\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"GBP\",\n          \"decimals\": 2\n        }, {\n          \"code\": \"USD\",\n          \"decimals\": 2\n        }]\n      }\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nexport { COLLECTION_FORMATS, CONFIG_TOKEN, ChargeBearer, InstructionPriority, PAYMENT_ORDER_OPTIONS_BASE_PATH, PaymentOptionsHttpService, PaymentOptionsHttpServiceGetPaymentOptionsByPaymentTypeMocksProvider, PaymentOptionsHttpServiceMocksProvider, PaymentOptionsHttpServicePostPaymentOptionsMocksProvider, PaymentOrderOptionsApiModule, PaymentOrderOptionsConfiguration, SanctionedCountriesHttpService, SanctionedCountriesHttpServiceGetSanctionedCountriesMocksProvider, SanctionedCountriesHttpServiceMocksProvider, SanctionedCurrenciesHttpService, SanctionedCurrenciesHttpServiceGetSanctionedCurrenciesMocksProvider, SanctionedCurrenciesHttpServiceMocksProvider, SchemeName, TimeFrameUnit };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/payment-order-options-http-ang/fesm2015/backbase-payment-order-options-http-ang.js"],"names":["i0","InjectionToken","NgModule","Optional","SkipSelf","Injectable","Inject","i1","HttpHeaders","HttpParams","i2","createMocks","ChargeBearer","OUR","BEN","SHA","InstructionPriority","NORM","HIGH","SchemeName","IBAN","BBAN","ID","EXTERNALID","TimeFrameUnit","HOUR","CALENDARDAY","BUSINESSDAY","PAYMENT_ORDER_OPTIONS_BASE_PATH","COLLECTION_FORMATS","PaymentOrderOptionsConfiguration","constructor","configurationParameters","apiKeys","username","password","accessToken","basePath","withCredentials","encoder","credentials","selectHeaderContentType","contentTypes","length","undefined","type","find","x","isJsonMime","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","lookupCredential","key","value","CONFIG_TOKEN","PaymentOrderOptionsApiModule","parentModule","http","dataModulesManager","config","Error","setModuleConfig","apiRoot","servicePath","headers","forRoot","configurationFactory","ngModule","providers","provide","useFactory","ɵfac","HttpClient","DataModulesManager","ɵmod","ɵinj","args","imports","declarations","exports","decorators","CustomHttpParameterCodec","encodeKey","k","encodeURIComponent","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","PaymentOptionsHttpService","httpClient","configuration","defaultHeaders","addToHttpParams","httpParams","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","append","toISOString","substr","Object","keys","getPaymentOptionsByPaymentType","requestParameters","observe","reportProgress","options","_paymentType","httpHeaderAcceptSelected","httpHeaderAccept","httpHeaderAccepts","set","responseType","startsWith","get","String","getPaymentOptionsByPaymentTypeUrl","postPaymentOptions","_paymentOptionsRequest","consumes","httpContentTypeSelected","post","postPaymentOptionsUrl","ɵprov","providedIn","PaymentOptionsHttpServiceGetPaymentOptionsByPaymentTypeMocksProvider","urlPattern","method","responses","status","body","PaymentOptionsHttpServicePostPaymentOptionsMocksProvider","PaymentOptionsHttpServiceMocksProvider","SanctionedCountriesHttpService","getSanctionedCountries","_countryIso","queryParameters","params","getSanctionedCountriesUrl","queryString","toString","SanctionedCountriesHttpServiceGetSanctionedCountriesMocksProvider","SanctionedCountriesHttpServiceMocksProvider","SanctionedCurrenciesHttpService","getSanctionedCurrencies","getSanctionedCurrenciesUrl","SanctionedCurrenciesHttpServiceGetSanctionedCurrenciesMocksProvider","SanctionedCurrenciesHttpServiceMocksProvider"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i2 from '@backbase/foundation-ang/data-http';\nimport { createMocks } from '@backbase/foundation-ang/data-http';\n\nconst ChargeBearer = {\n    OUR: 'OUR',\n    BEN: 'BEN',\n    SHA: 'SHA'\n};\n\nconst InstructionPriority = {\n    NORM: 'NORM',\n    HIGH: 'HIGH'\n};\n\nconst SchemeName = {\n    IBAN: 'IBAN',\n    BBAN: 'BBAN',\n    ID: 'ID',\n    EXTERNALID: 'EXTERNAL_ID'\n};\n\nconst TimeFrameUnit = {\n    HOUR: 'HOUR',\n    CALENDARDAY: 'CALENDAR_DAY',\n    BUSINESSDAY: 'BUSINESS_DAY'\n};\n\nconst PAYMENT_ORDER_OPTIONS_BASE_PATH = new InjectionToken('PAYMENT_ORDER_OPTIONS_BASE_PATH');\nconst COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n};\n\nclass PaymentOrderOptionsConfiguration {\n    constructor(configurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n    selectHeaderContentType(contentTypes) {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n        const type = contentTypes.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n    selectHeaderAccept(accepts) {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n        const type = accepts.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n    isJsonMime(mime) {\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n    lookupCredential(key) {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\nconst CONFIG_TOKEN = new InjectionToken('api-data-module PaymentOrderOptionsConfiguration');\n\nclass PaymentOrderOptionsApiModule {\n    constructor(parentModule, http, dataModulesManager, config) {\n        if (parentModule) {\n            throw new Error('PaymentOrderOptionsApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n                'See also https://github.com/angular/angular/issues/20575');\n        }\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n    static forRoot(configurationFactory) {\n        return {\n            ngModule: PaymentOrderOptionsApiModule,\n            providers: [{ provide: PaymentOrderOptionsConfiguration, useFactory: configurationFactory }]\n        };\n    }\n}\nPaymentOrderOptionsApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PaymentOrderOptionsApiModule, deps: [{ token: PaymentOrderOptionsApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: PaymentOrderOptionsConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });\nPaymentOrderOptionsApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PaymentOrderOptionsApiModule });\nPaymentOrderOptionsApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PaymentOrderOptionsApiModule, providers: [], imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PaymentOrderOptionsApiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [],\n                    declarations: [],\n                    exports: [],\n                    providers: []\n                }]\n        }], ctorParameters: function () { return [{ type: PaymentOrderOptionsApiModule, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DataModulesManager, decorators: [{\n                    type: Optional\n                }] }, { type: PaymentOrderOptionsConfiguration }]; } });\n\nclass CustomHttpParameterCodec {\n    encodeKey(k) {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v) {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k) {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v) {\n        return decodeURIComponent(v);\n    }\n}\n\nclass PaymentOptionsHttpService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new PaymentOrderOptionsConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getPaymentOptionsByPaymentType(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _paymentType = requestParameters[\"paymentType\"];\n        if (_paymentType === null || _paymentType === undefined) {\n            throw new Error('Required parameter paymentType was null or undefined when calling getPaymentOptionsByPaymentType.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/payment-options/${encodeURIComponent(String(_paymentType))}`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getPaymentOptionsByPaymentTypeUrl(requestParameters) {\n        const _paymentType = requestParameters[\"paymentType\"];\n        if (_paymentType === null || _paymentType === undefined) {\n            throw new Error('Required parameter paymentType was null or undefined when calling getPaymentOptionsByPaymentType.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/payment-options/${encodeURIComponent(String(_paymentType))}`;\n    }\n    postPaymentOptions(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _paymentOptionsRequest = requestParameters[\"paymentOptionsRequest\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/payment-options`, _paymentOptionsRequest, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    postPaymentOptionsUrl(requestParameters) {\n        const _paymentOptionsRequest = requestParameters[\"paymentOptionsRequest\"];\n        return `${this.configuration.basePath}/client-api/v1/payment-options`;\n    }\n}\nPaymentOptionsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PaymentOptionsHttpService, deps: [{ token: i1.HttpClient }, { token: PAYMENT_ORDER_OPTIONS_BASE_PATH, optional: true }, { token: PaymentOrderOptionsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nPaymentOptionsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PaymentOptionsHttpService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PaymentOptionsHttpService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [PAYMENT_ORDER_OPTIONS_BASE_PATH]\n                }] }, { type: PaymentOrderOptionsConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst PaymentOptionsHttpServiceGetPaymentOptionsByPaymentTypeMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v1/payment-options/{paymentType}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"paymentType\": \"US_FOREIGN_WIRE\",\n                    \"canEditCounterparty\": true,\n                    \"paymentOptions\": [{\n                            \"instructionPriority\": \"NORM\",\n                            \"transferFee\": {\n                                \"amount\": \"15.29\",\n                                \"currencyCode\": \"USD\"\n                            },\n                            \"chargeBearer\": [\"OUR\", \"SHA\"],\n                            \"executionTimeFrame\": {\n                                \"unit\": \"BUSINESS_DAY\",\n                                \"max\": 1\n                            },\n                            \"cutOffTime\": \"16:00\"\n                        }, {\n                            \"instructionPriority\": \"HIGH\",\n                            \"transferFee\": {\n                                \"amount\": \"20.00\",\n                                \"currencyCode\": \"USD\"\n                            },\n                            \"chargeBearer\": [\"OUR\", \"SHA\"],\n                            \"executionTimeFrame\": {\n                                \"unit\": \"HOUR\",\n                                \"min\": 1,\n                                \"max\": 2\n                            },\n                            \"cutOffTime\": \"16:00\"\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst PaymentOptionsHttpServicePostPaymentOptionsMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v1/payment-options\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"options\": [{\n                            \"paymentType\": \"US_FOREIGN_WIRE\",\n                            \"paymentOptions\": [{\n                                    \"instructionPriority\": \"NORM\",\n                                    \"transferFee\": {\n                                        \"amount\": \"15.29\",\n                                        \"currencyCode\": \"USD\"\n                                    },\n                                    \"chargeBearer\": [\"OUR\", \"SHA\"],\n                                    \"executionTimeFrame\": {\n                                        \"unit\": \"BUSINESS_DAY\",\n                                        \"max\": 1\n                                    },\n                                    \"cutOffTime\": \"16:00\"\n                                }, {\n                                    \"instructionPriority\": \"HIGH\",\n                                    \"transferFee\": {\n                                        \"amount\": \"20.00\",\n                                        \"currencyCode\": \"USD\"\n                                    },\n                                    \"chargeBearer\": [\"OUR\", \"SHA\"],\n                                    \"executionTimeFrame\": {\n                                        \"unit\": \"HOUR\",\n                                        \"min\": 1,\n                                        \"max\": 2\n                                    },\n                                    \"cutOffTime\": \"16:00\"\n                                }]\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst PaymentOptionsHttpServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/client-api/v1/payment-options/{paymentType}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"paymentType\": \"US_FOREIGN_WIRE\",\n                    \"canEditCounterparty\": true,\n                    \"paymentOptions\": [{\n                            \"instructionPriority\": \"NORM\",\n                            \"transferFee\": {\n                                \"amount\": \"15.29\",\n                                \"currencyCode\": \"USD\"\n                            },\n                            \"chargeBearer\": [\"OUR\", \"SHA\"],\n                            \"executionTimeFrame\": {\n                                \"unit\": \"BUSINESS_DAY\",\n                                \"max\": 1\n                            },\n                            \"cutOffTime\": \"16:00\"\n                        }, {\n                            \"instructionPriority\": \"HIGH\",\n                            \"transferFee\": {\n                                \"amount\": \"20.00\",\n                                \"currencyCode\": \"USD\"\n                            },\n                            \"chargeBearer\": [\"OUR\", \"SHA\"],\n                            \"executionTimeFrame\": {\n                                \"unit\": \"HOUR\",\n                                \"min\": 1,\n                                \"max\": 2\n                            },\n                            \"cutOffTime\": \"16:00\"\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v1/payment-options\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"options\": [{\n                            \"paymentType\": \"US_FOREIGN_WIRE\",\n                            \"paymentOptions\": [{\n                                    \"instructionPriority\": \"NORM\",\n                                    \"transferFee\": {\n                                        \"amount\": \"15.29\",\n                                        \"currencyCode\": \"USD\"\n                                    },\n                                    \"chargeBearer\": [\"OUR\", \"SHA\"],\n                                    \"executionTimeFrame\": {\n                                        \"unit\": \"BUSINESS_DAY\",\n                                        \"max\": 1\n                                    },\n                                    \"cutOffTime\": \"16:00\"\n                                }, {\n                                    \"instructionPriority\": \"HIGH\",\n                                    \"transferFee\": {\n                                        \"amount\": \"20.00\",\n                                        \"currencyCode\": \"USD\"\n                                    },\n                                    \"chargeBearer\": [\"OUR\", \"SHA\"],\n                                    \"executionTimeFrame\": {\n                                        \"unit\": \"HOUR\",\n                                        \"min\": 1,\n                                        \"max\": 2\n                                    },\n                                    \"cutOffTime\": \"16:00\"\n                                }]\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n]);\n\nclass SanctionedCountriesHttpService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new PaymentOrderOptionsConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getSanctionedCountries(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _countryIso = requestParameters[\"countryIso\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_countryIso !== undefined && _countryIso !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _countryIso, 'countryIso');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/sanctioned-countries`, {\n            params: queryParameters,\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getSanctionedCountriesUrl(requestParameters) {\n        const _countryIso = requestParameters[\"countryIso\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_countryIso !== undefined && _countryIso !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _countryIso, 'countryIso');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v1/sanctioned-countries${queryString ? `?${queryString}` : ''}`;\n    }\n}\nSanctionedCountriesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: SanctionedCountriesHttpService, deps: [{ token: i1.HttpClient }, { token: PAYMENT_ORDER_OPTIONS_BASE_PATH, optional: true }, { token: PaymentOrderOptionsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nSanctionedCountriesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: SanctionedCountriesHttpService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: SanctionedCountriesHttpService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [PAYMENT_ORDER_OPTIONS_BASE_PATH]\n                }] }, { type: PaymentOrderOptionsConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst SanctionedCountriesHttpServiceGetSanctionedCountriesMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v1/sanctioned-countries\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"countries\": [{\n                            \"country\": \"AE\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"IBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n                                    \"regex\": \"/^[a-zA-Z0-9]{23}$/\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"notApplicable\": true,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"AED\", \"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"AU\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"label\": {\n                                        \"bsb\": \"BSB code\"\n                                    },\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n                                    \"regex\": \"/^[0-9]{6}$/\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"AUD\", \"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"BR\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"IBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n                                    \"regex\": \"/^[a-zA-Z0-9]{29}$/\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"notApplicable\": true,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"BRL\", \"EUR\", \"GBP\", \"USD\"]\n                                }, {\n                                    \"key\": \"purpose-of-payment\",\n                                    \"mandatory\": true\n                                }]\n                        }, {\n                            \"country\": \"CA\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"label\": {\n                                        \"routing-number\": \"Routing number\"\n                                    },\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n                                    \"regex\": \"/^[0-9]{9}$/\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"CAD\", \"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"CN\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"EUR\", \"GBP\", \"USD\"]\n                                }, {\n                                    \"key\": \"purpose-of-payment\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"predefinedValues\": true\n                                }],\n                            \"purposesOfPayment\": [{\n                                    \"code\": \"PAYT/02123\",\n                                    \"description\": \"Individual Payment\"\n                                }, {\n                                    \"code\": \"PAYT/02112\",\n                                    \"description\": \"Trade related Payment\"\n                                }, {\n                                    \"code\": \"PAYT/02114\",\n                                    \"description\": \"Service related Payment\"\n                                }]\n                        }, {\n                            \"country\": \"GB\",\n                            \"isDefault\": true,\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"label\": {\n                                        \"sort-code\": \"Sort code\"\n                                    },\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n                                    \"regex\": \"/^[0-9]{6}$/\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"HK\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"label\": {\n                                        \"clearing\": \"Clearing code\"\n                                    },\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n                                    \"regex\": \"/^[0-9]{3}$/\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"HKD\", \"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"IN\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"label\": {\n                                        \"ifsc\": \"IFSC\"\n                                    },\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n                                    \"regex\": \"/^[a-zA-Z0-9]{3}$/\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"INR\", \"EUR\", \"GBP\", \"USD\"]\n                                }, {\n                                    \"key\": \"purpose-of-payment\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"predefinedValues\": true\n                                }],\n                            \"purposesOfPayment\": [{\n                                    \"code\": \"P1004\",\n                                    \"description\": \"Legal services\"\n                                }, {\n                                    \"code\": \"P0401\",\n                                    \"description\": \"Postal services\"\n                                }, {\n                                    \"code\": \"P0402\",\n                                    \"description\": \"Courier services\"\n                                }]\n                        }, {\n                            \"country\": \"JO\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"IBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n                                    \"regex\": \"/^[a-zA-Z0-9]{30}$/\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"notApplicable\": true,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"JOD\", \"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"JP\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"notApplicable\": true,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"JPY\", \"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"NL\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"IBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n                                    \"regex\": \"/^[a-zA-Z0-9]{18}$/\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"notApplicable\": true,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"RU\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"label\": {\n                                        \"bik\": \"BIK\"\n                                    },\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n                                    \"regex\": \"/^[0-9]{9}$/\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"RUB\", \"EUR\", \"GBP\", \"USD\"]\n                                }, {\n                                    \"key\": \"purpose-of-payment\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"predefinedValues\": true\n                                }],\n                            \"purposesOfPayment\": [{\n                                    \"code\": \"01010\",\n                                    \"description\": \"Selling by Residents of foreign currencies for Russian Roubles\"\n                                }, {\n                                    \"code\": \"99010\",\n                                    \"description\": \"The return to Residents, of erroneously debited (credited) funds\"\n                                }, {\n                                    \"code\": \"01030\",\n                                    \"description\": \"Purchases by Residents of foreign currencies for Russian Roubles\"\n                                }]\n                        }, {\n                            \"country\": \"SA\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"label\": {\n                                        \"za-code\": \"ZA code\"\n                                    },\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n                                    \"regex\": \"/^[0-9]{6}$/\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"ZAR\", \"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"SG\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"notApplicable\": true,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"SGD\", \"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"US\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"label\": {\n                                        \"routing-number\": \"Routing transit number (ABA)\"\n                                    },\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n                                    \"regex\": \"/^[0-9]{9}$/\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    }]);\nconst SanctionedCountriesHttpServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/client-api/v1/sanctioned-countries\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"countries\": [{\n                            \"country\": \"AE\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"IBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n                                    \"regex\": \"/^[a-zA-Z0-9]{23}$/\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"notApplicable\": true,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"AED\", \"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"AU\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"label\": {\n                                        \"bsb\": \"BSB code\"\n                                    },\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n                                    \"regex\": \"/^[0-9]{6}$/\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"AUD\", \"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"BR\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"IBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n                                    \"regex\": \"/^[a-zA-Z0-9]{29}$/\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"notApplicable\": true,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"BRL\", \"EUR\", \"GBP\", \"USD\"]\n                                }, {\n                                    \"key\": \"purpose-of-payment\",\n                                    \"mandatory\": true\n                                }]\n                        }, {\n                            \"country\": \"CA\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"label\": {\n                                        \"routing-number\": \"Routing number\"\n                                    },\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n                                    \"regex\": \"/^[0-9]{9}$/\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"CAD\", \"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"CN\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"EUR\", \"GBP\", \"USD\"]\n                                }, {\n                                    \"key\": \"purpose-of-payment\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"predefinedValues\": true\n                                }],\n                            \"purposesOfPayment\": [{\n                                    \"code\": \"PAYT/02123\",\n                                    \"description\": \"Individual Payment\"\n                                }, {\n                                    \"code\": \"PAYT/02112\",\n                                    \"description\": \"Trade related Payment\"\n                                }, {\n                                    \"code\": \"PAYT/02114\",\n                                    \"description\": \"Service related Payment\"\n                                }]\n                        }, {\n                            \"country\": \"GB\",\n                            \"isDefault\": true,\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"label\": {\n                                        \"sort-code\": \"Sort code\"\n                                    },\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n                                    \"regex\": \"/^[0-9]{6}$/\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"HK\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"label\": {\n                                        \"clearing\": \"Clearing code\"\n                                    },\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n                                    \"regex\": \"/^[0-9]{3}$/\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"HKD\", \"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"IN\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"label\": {\n                                        \"ifsc\": \"IFSC\"\n                                    },\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n                                    \"regex\": \"/^[a-zA-Z0-9]{3}$/\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"INR\", \"EUR\", \"GBP\", \"USD\"]\n                                }, {\n                                    \"key\": \"purpose-of-payment\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"predefinedValues\": true\n                                }],\n                            \"purposesOfPayment\": [{\n                                    \"code\": \"P1004\",\n                                    \"description\": \"Legal services\"\n                                }, {\n                                    \"code\": \"P0401\",\n                                    \"description\": \"Postal services\"\n                                }, {\n                                    \"code\": \"P0402\",\n                                    \"description\": \"Courier services\"\n                                }]\n                        }, {\n                            \"country\": \"JO\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"IBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n                                    \"regex\": \"/^[a-zA-Z0-9]{30}$/\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"notApplicable\": true,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"JOD\", \"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"JP\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"notApplicable\": true,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"JPY\", \"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"NL\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"IBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n                                    \"regex\": \"/^[a-zA-Z0-9]{18}$/\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"notApplicable\": true,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"RU\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"label\": {\n                                        \"bik\": \"BIK\"\n                                    },\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n                                    \"regex\": \"/^[0-9]{9}$/\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"RUB\", \"EUR\", \"GBP\", \"USD\"]\n                                }, {\n                                    \"key\": \"purpose-of-payment\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"predefinedValues\": true\n                                }],\n                            \"purposesOfPayment\": [{\n                                    \"code\": \"01010\",\n                                    \"description\": \"Selling by Residents of foreign currencies for Russian Roubles\"\n                                }, {\n                                    \"code\": \"99010\",\n                                    \"description\": \"The return to Residents, of erroneously debited (credited) funds\"\n                                }, {\n                                    \"code\": \"01030\",\n                                    \"description\": \"Purchases by Residents of foreign currencies for Russian Roubles\"\n                                }]\n                        }, {\n                            \"country\": \"SA\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"label\": {\n                                        \"za-code\": \"ZA code\"\n                                    },\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n                                    \"regex\": \"/^[0-9]{6}$/\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"ZAR\", \"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"SG\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"notApplicable\": true,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"SGD\", \"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }, {\n                            \"country\": \"US\",\n                            \"inputFormSettings\": [{\n                                    \"key\": \"account-number\",\n                                    \"format\": \"BBAN\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n                                }, {\n                                    \"key\": \"bank-code\",\n                                    \"label\": {\n                                        \"routing-number\": \"Routing transit number (ABA)\"\n                                    },\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n                                    \"regex\": \"/^[0-9]{9}$/\"\n                                }, {\n                                    \"key\": \"currency\",\n                                    \"mandatory\": true,\n                                    \"notApplicable\": false,\n                                    \"apiField\": \"transferTransactionInformation.instructedAmount.currencyCode\",\n                                    \"values\": [\"EUR\", \"GBP\", \"USD\"]\n                                }]\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    },\n]);\n\nclass SanctionedCurrenciesHttpService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new PaymentOrderOptionsConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getSanctionedCurrencies(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _countryIso = requestParameters[\"countryIso\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_countryIso !== undefined && _countryIso !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _countryIso, 'countryIso');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/sanctioned-currencies`, {\n            params: queryParameters,\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getSanctionedCurrenciesUrl(requestParameters) {\n        const _countryIso = requestParameters[\"countryIso\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_countryIso !== undefined && _countryIso !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _countryIso, 'countryIso');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v1/sanctioned-currencies${queryString ? `?${queryString}` : ''}`;\n    }\n}\nSanctionedCurrenciesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: SanctionedCurrenciesHttpService, deps: [{ token: i1.HttpClient }, { token: PAYMENT_ORDER_OPTIONS_BASE_PATH, optional: true }, { token: PaymentOrderOptionsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nSanctionedCurrenciesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: SanctionedCurrenciesHttpService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: SanctionedCurrenciesHttpService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [PAYMENT_ORDER_OPTIONS_BASE_PATH]\n                }] }, { type: PaymentOrderOptionsConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst SanctionedCurrenciesHttpServiceGetSanctionedCurrenciesMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v1/sanctioned-currencies\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"default\": {\n                        \"code\": \"GBP\",\n                        \"decimals\": 2\n                    },\n                    \"labeled\": {\n                        \"normal\": [{\n                                \"code\": \"AED\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"AUD\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"BRL\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"CAD\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"CNY\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"HKD\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"INR\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"JPY\",\n                                \"decimals\": 0\n                            }, {\n                                \"code\": \"JOD\",\n                                \"decimals\": 3\n                            }, {\n                                \"code\": \"RUB\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"SGD\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"ZAR\",\n                                \"decimals\": 2\n                            }],\n                        \"popular\": [{\n                                \"code\": \"EUR\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"GBP\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"USD\",\n                                \"decimals\": 2\n                            }]\n                    }\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    }]);\nconst SanctionedCurrenciesHttpServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/client-api/v1/sanctioned-currencies\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"default\": {\n                        \"code\": \"GBP\",\n                        \"decimals\": 2\n                    },\n                    \"labeled\": {\n                        \"normal\": [{\n                                \"code\": \"AED\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"AUD\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"BRL\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"CAD\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"CNY\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"HKD\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"INR\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"JPY\",\n                                \"decimals\": 0\n                            }, {\n                                \"code\": \"JOD\",\n                                \"decimals\": 3\n                            }, {\n                                \"code\": \"RUB\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"SGD\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"ZAR\",\n                                \"decimals\": 2\n                            }],\n                        \"popular\": [{\n                                \"code\": \"EUR\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"GBP\",\n                                \"decimals\": 2\n                            }, {\n                                \"code\": \"USD\",\n                                \"decimals\": 2\n                            }]\n                    }\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    },\n]);\n\nexport { COLLECTION_FORMATS, CONFIG_TOKEN, ChargeBearer, InstructionPriority, PAYMENT_ORDER_OPTIONS_BASE_PATH, PaymentOptionsHttpService, PaymentOptionsHttpServiceGetPaymentOptionsByPaymentTypeMocksProvider, PaymentOptionsHttpServiceMocksProvider, PaymentOptionsHttpServicePostPaymentOptionsMocksProvider, PaymentOrderOptionsApiModule, PaymentOrderOptionsConfiguration, SanctionedCountriesHttpService, SanctionedCountriesHttpServiceGetSanctionedCountriesMocksProvider, SanctionedCountriesHttpServiceMocksProvider, SanctionedCurrenciesHttpService, SanctionedCurrenciesHttpServiceGetSanctionedCurrenciesMocksProvider, SanctionedCurrenciesHttpServiceMocksProvider, SchemeName, TimeFrameUnit };\n"]},"metadata":{},"sourceType":"module"}