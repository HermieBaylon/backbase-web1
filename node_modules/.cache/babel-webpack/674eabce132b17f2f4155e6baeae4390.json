{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i2 from '@backbase/account-statement-common-ang';\nimport { LoadingState, DatePeriods, unixZeroDay, today, getTotalCountFromHeaders, AccountStatementCommonModule } from '@backbase/account-statement-common-ang';\nimport * as i1$1 from '@ngrx/store';\nimport { createAction, props, createReducer, on, createFeatureSelector, createSelector, StoreModule } from '@ngrx/store';\nimport { __rest } from 'tslib';\nimport { of } from 'rxjs';\nimport { withLatestFrom, switchMap, map, catchError } from 'rxjs/operators';\nimport { formatDate } from '@angular/common';\nimport { AccountStatementsPostRequest } from '@backbase/data-ang/account-statements';\nimport * as i1 from '@ngrx/effects';\nimport { createEffect, ofType, EffectsModule } from '@ngrx/effects';\n\nconst loadAccountStatementsBusinessToRequest = (_a, widgetPreferences) => {\n  var {\n    accountIds,\n    filterParams,\n    paginationParams,\n    sortingParams\n  } = _a,\n      actionRequestParams = __rest(_a, [\"accountIds\", \"filterParams\", \"paginationParams\", \"sortingParams\"]);\n\n  const {\n    dateFrom,\n    dateTo,\n    category\n  } = filterParams || {};\n  const {\n    minimalDate,\n    maximumDate\n  } = widgetPreferences || {};\n  const params = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, accountIds && {\n    accountIds\n  }), _hasDate(dateFrom, minimalDate) && {\n    dateFrom: _getFormattedDate(dateFrom, minimalDate)\n  }), _hasDate(dateTo, maximumDate) && {\n    dateTo: _getFormattedDate(dateTo, maximumDate)\n  }), category && {\n    category\n  }), paginationParams && Object.assign({}, paginationParams)), sortingParams && sortingParams.direction && {\n    direction: _mapSortingDirection(sortingParams.direction),\n    orderBy: sortingParams.column\n  });\n  return {\n    accountStatementsPostRequest: params\n  };\n};\n/**\n * Check if date or default date exist\n *\n * @param date Optional date string\n * @param defaultDate Default date object if date is not present\n * @returns boolean\n */\n\n\nconst _hasDate = (date, defaultDate) => !!(date || defaultDate);\n/**\n * Convert date into yyyy-MM-dd format\n *\n * @param date Optional date string\n * @param defaultDate Default date object if date is not present\n * @returns Date in format of yyyy-MM-dd\n */\n\n\nconst _getFormattedDate = (value, defaultDate) => {\n  const date = value || defaultDate;\n  return date && formatDate(new Date(date), 'yyyy-MM-dd', 'en-US');\n};\n/**\n * Convert direction of type 'asc' or 'desc' to 'ASC' or 'DESC'\n *\n * @param direction of type string\n * @returns sortingDirection of type AccountStatementsPostRequest.DirectionEnum\n */\n\n\nconst _mapSortingDirection = direction => direction === 'asc' ? AccountStatementsPostRequest.DirectionEnum.ASC : AccountStatementsPostRequest.DirectionEnum.DESC;\n\nconst loadAccountStatementsBusiness = createAction('[AS Account Statements] Load Account Statements for Business', props());\nconst loadAccountStatementsBusinessSuccess = createAction('[AS Account Statements] Load Account Statements for Business Success', props());\nconst loadAccountStatementsFailure = createAction('[AS Account Statements] Load Account Statements Failure', props());\nconst updateWidgetPreferences = createAction('[AS Accounts] Update Widget Preferences', props());\nconst accountStatementsInitialState = {\n  data: [],\n  totalCount: 0,\n  loading: LoadingState.IDLE,\n  error: undefined,\n  accountIds: [],\n  filterParams: {\n    datePeriod: DatePeriods.AllTime\n  },\n  widgetPreferences: {\n    minimalDate: unixZeroDay(),\n    maximumDate: today()\n  }\n};\n\nconst smartLoadingState = (state, action) => {\n  if (action.accountIds && action.accountIds !== state.accountIds) return LoadingState.LOADING;\n  if (action.filterParams && action.filterParams !== state.filterParams) return LoadingState.LOADING_FILTERED;\n  if (action.append) return LoadingState.LOADING_MORE;\n\n  if (action.sortingParams && action.sortingParams !== state.sortingParams || action.paginationParams && action.paginationParams !== state.paginationParams) {\n    return LoadingState.LOADING_TABLE;\n  }\n\n  return LoadingState.LOADING;\n};\n\nconst reducer$1 = createReducer(accountStatementsInitialState, on(loadAccountStatementsBusiness, (state, action) => Object.assign(Object.assign({}, state), {\n  loading: smartLoadingState(state, action),\n  error: undefined\n})), on(loadAccountStatementsBusinessSuccess, (state, action) => {\n  const {\n    accountStatements,\n    accountIds,\n    filterParams,\n    paginationParams,\n    sortingParams,\n    totalCount,\n    append\n  } = action;\n  const dataAppendTo = append ? state.data : [];\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, state), {\n    loading: LoadingState.IDLE,\n    data: [...dataAppendTo, ...accountStatements],\n    totalCount\n  }), accountIds && {\n    accountIds\n  }), filterParams && {\n    filterParams\n  }), sortingParams && {\n    sortingParams\n  }), paginationParams && {\n    paginationParams\n  });\n}), on(loadAccountStatementsFailure, (state, action) => Object.assign(Object.assign({}, state), {\n  error: action.error,\n  loading: LoadingState.IDLE\n})), on(updateWidgetPreferences, (state, action) => Object.assign(Object.assign({}, state), {\n  widgetPreferences: Object.assign(Object.assign({}, state.widgetPreferences), action.widgetPreferences)\n}))); // eslint-disable-next-line prefer-arrow/prefer-arrow-functions\n\nfunction accountStatementsReducer(state, action) {\n  return reducer$1(state, action);\n}\n\nconst loadCategories = createAction('[AS Account Statements] Load Categories for Business');\nconst loadCategoriesSuccess = createAction('[AS Account Statements] Load Categories for Business Success', props());\nconst loadCategoriesFailure = createAction('[AS Account Statements] Load Categories for Business Failure', props());\nconst categoriesInitialState = {\n  data: [],\n  error: undefined\n};\nconst reducer = createReducer(categoriesInitialState, on(loadCategoriesSuccess, (state, {\n  categories\n}) => Object.assign(Object.assign({}, state), {\n  data: categories\n})), on(loadCategoriesFailure, (state, {\n  error\n}) => Object.assign(Object.assign({}, state), {\n  data: [],\n  error\n}))); // eslint-disable-next-line prefer-arrow/prefer-arrow-functions\n\nfunction categoriesReducer(state, action) {\n  return reducer(state, action);\n}\n\nconst initialState = {\n  accountStatements: accountStatementsInitialState,\n  categories: categoriesInitialState\n};\n/** Key for feature state used in NgRx StoreModule. */\n\nconst ACCOUNT_STATEMENTS_FEATURE_KEY = 'accountStatements';\nconst accountStatementsReducers = {\n  accountStatements: accountStatementsReducer,\n  categories: categoriesReducer\n};\nconst selectAccountStatements = createFeatureSelector(ACCOUNT_STATEMENTS_FEATURE_KEY);\nconst selectAccountStatementsState = createSelector(selectAccountStatements, accountStatementsState => accountStatementsState.accountStatements);\nconst accountStatements = createSelector(selectAccountStatementsState, state => state.data);\nconst accountStatementsLoading = createSelector(selectAccountStatementsState, state => state.loading);\nconst accountStatementsError = createSelector(selectAccountStatementsState, state => state.error);\nconst accountStatementsTotalCount = createSelector(selectAccountStatementsState, state => state.totalCount);\nconst accountStatementsAccountIds = createSelector(selectAccountStatementsState, state => state.accountIds);\nconst accountStatementsPaginationParams = createSelector(selectAccountStatementsState, state => state.paginationParams);\nconst accountStatementsSortingParams = createSelector(selectAccountStatementsState, state => state.sortingParams);\nconst accountStatementsFilterParams = createSelector(selectAccountStatementsState, state => state.filterParams);\nconst accountStatementsWidgetPreferences = createSelector(selectAccountStatementsState, state => state.widgetPreferences);\n\nclass AccountStatementEffects {\n  constructor(actions$, dataService, store) {\n    this.actions$ = actions$;\n    this.dataService = dataService;\n    this.store = store;\n    this.accountStatementsBusiness$ = createEffect(() => this.actions$.pipe(ofType(loadAccountStatementsBusiness), withLatestFrom(this.store.select(accountStatementsAccountIds), this.store.select(accountStatementsFilterParams), this.store.select(accountStatementsSortingParams), this.store.select(accountStatementsPaginationParams), this.store.select(accountStatementsWidgetPreferences)), switchMap(([action, accountIds, filterParams, sortingParams, paginationParams, widgetPreferences]) => {\n      const {\n        append\n      } = action,\n            actionRequestParams = __rest(action, [\"append\"]);\n\n      return this.dataService.getAccountStatementsBusiness(loadAccountStatementsBusinessToRequest(Object.assign({\n        accountIds,\n        filterParams,\n        sortingParams,\n        paginationParams\n      }, actionRequestParams), widgetPreferences)).pipe(map(response => loadAccountStatementsBusinessSuccess(Object.assign({\n        accountStatements: response.body,\n        totalCount: getTotalCountFromHeaders(response.headers)\n      }, action))), catchError(error => of(loadAccountStatementsFailure({\n        error\n      }))));\n    })));\n  }\n\n}\n\nAccountStatementEffects.ɵfac = function AccountStatementEffects_Factory(t) {\n  return new (t || AccountStatementEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AccountStatementDataService), i0.ɵɵinject(i1$1.Store));\n};\n\nAccountStatementEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AccountStatementEffects,\n  factory: AccountStatementEffects.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AccountStatementEffects, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.Actions\n    }, {\n      type: i2.AccountStatementDataService\n    }, {\n      type: i1$1.Store\n    }];\n  }, null);\n})();\n\nclass CategoriesEffects {\n  constructor(actions$, dataService) {\n    this.actions$ = actions$;\n    this.dataService = dataService;\n    this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(loadCategories), switchMap(() => this.dataService.loadCategories().pipe(map(response => loadCategoriesSuccess({\n      categories: response\n    })), catchError(error => of(loadCategoriesFailure({\n      error\n    })))))));\n  }\n\n}\n\nCategoriesEffects.ɵfac = function CategoriesEffects_Factory(t) {\n  return new (t || CategoriesEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AccountStatementDataService));\n};\n\nCategoriesEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CategoriesEffects,\n  factory: CategoriesEffects.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CategoriesEffects, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.Actions\n    }, {\n      type: i2.AccountStatementDataService\n    }];\n  }, null);\n})();\n\nclass AccountStatementStoreModule {}\n\nAccountStatementStoreModule.ɵfac = function AccountStatementStoreModule_Factory(t) {\n  return new (t || AccountStatementStoreModule)();\n};\n\nAccountStatementStoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AccountStatementStoreModule\n});\nAccountStatementStoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[StoreModule.forFeature(ACCOUNT_STATEMENTS_FEATURE_KEY, accountStatementsReducers), EffectsModule.forFeature([AccountStatementEffects, CategoriesEffects]), AccountStatementCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AccountStatementStoreModule, [{\n    type: NgModule,\n    args: [{\n      imports: [StoreModule.forFeature(ACCOUNT_STATEMENTS_FEATURE_KEY, accountStatementsReducers), EffectsModule.forFeature([AccountStatementEffects, CategoriesEffects]), AccountStatementCommonModule]\n    }]\n  }], null, null);\n})();\n\nconst selectCategoriesState = createSelector(selectAccountStatements, accountStatementsState => accountStatementsState.categories);\nconst selectCategories = createSelector(selectCategoriesState, state => state.data);\nconst selectCategoriesError = createSelector(selectCategoriesState, state => state.error);\n\nclass AccountStatementStoreModel {\n  constructor(store) {\n    this.store = store;\n    this.accountStatements$ = this.store.select(accountStatements);\n    this.accountStatementsLoading$ = this.store.select(accountStatementsLoading);\n    this.accountStatementsError$ = this.store.select(accountStatementsError);\n    this.accountStatementsTotalCount$ = this.store.select(accountStatementsTotalCount);\n    this.accountStatementsPaginationParams$ = this.store.select(accountStatementsPaginationParams);\n    this.accountStatementsSortingParams$ = this.store.select(accountStatementsSortingParams);\n    this.accountStatementsFilterParams$ = this.store.select(accountStatementsFilterParams);\n    this.accountStatementsWidgetPreferences$ = this.store.select(accountStatementsWidgetPreferences);\n    this.categories$ = this.store.select(selectCategories);\n  }\n\n  dispatchLoadAccountStatementsBusiness(payload = {}) {\n    this.store.dispatch(loadAccountStatementsBusiness(payload));\n  }\n\n  dispatchUpdateWidgetPreferences(payload) {\n    this.store.dispatch(updateWidgetPreferences(payload));\n  }\n\n  dispatchLoadCategories() {\n    this.store.dispatch(loadCategories());\n  }\n\n}\n\nAccountStatementStoreModel.ɵfac = function AccountStatementStoreModel_Factory(t) {\n  return new (t || AccountStatementStoreModel)(i0.ɵɵinject(i1$1.Store));\n};\n\nAccountStatementStoreModel.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AccountStatementStoreModel,\n  factory: AccountStatementStoreModel.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AccountStatementStoreModel, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Store\n    }];\n  }, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AccountStatementStoreModel, AccountStatementStoreModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/account-statement-store-ang/fesm2015/backbase-account-statement-store-ang.js"],"names":["i0","Injectable","NgModule","i2","LoadingState","DatePeriods","unixZeroDay","today","getTotalCountFromHeaders","AccountStatementCommonModule","i1$1","createAction","props","createReducer","on","createFeatureSelector","createSelector","StoreModule","__rest","of","withLatestFrom","switchMap","map","catchError","formatDate","AccountStatementsPostRequest","i1","createEffect","ofType","EffectsModule","loadAccountStatementsBusinessToRequest","_a","widgetPreferences","accountIds","filterParams","paginationParams","sortingParams","actionRequestParams","dateFrom","dateTo","category","minimalDate","maximumDate","params","Object","assign","_hasDate","_getFormattedDate","direction","_mapSortingDirection","orderBy","column","accountStatementsPostRequest","date","defaultDate","value","Date","DirectionEnum","ASC","DESC","loadAccountStatementsBusiness","loadAccountStatementsBusinessSuccess","loadAccountStatementsFailure","updateWidgetPreferences","accountStatementsInitialState","data","totalCount","loading","IDLE","error","undefined","datePeriod","AllTime","smartLoadingState","state","action","LOADING","LOADING_FILTERED","append","LOADING_MORE","LOADING_TABLE","reducer$1","accountStatements","dataAppendTo","accountStatementsReducer","loadCategories","loadCategoriesSuccess","loadCategoriesFailure","categoriesInitialState","reducer","categories","categoriesReducer","initialState","ACCOUNT_STATEMENTS_FEATURE_KEY","accountStatementsReducers","selectAccountStatements","selectAccountStatementsState","accountStatementsState","accountStatementsLoading","accountStatementsError","accountStatementsTotalCount","accountStatementsAccountIds","accountStatementsPaginationParams","accountStatementsSortingParams","accountStatementsFilterParams","accountStatementsWidgetPreferences","AccountStatementEffects","constructor","actions$","dataService","store","accountStatementsBusiness$","pipe","select","getAccountStatementsBusiness","response","body","headers","ɵfac","Actions","AccountStatementDataService","Store","ɵprov","type","CategoriesEffects","loadCategories$","AccountStatementStoreModule","ɵmod","ɵinj","forFeature","args","imports","selectCategoriesState","selectCategories","selectCategoriesError","AccountStatementStoreModel","accountStatements$","accountStatementsLoading$","accountStatementsError$","accountStatementsTotalCount$","accountStatementsPaginationParams$","accountStatementsSortingParams$","accountStatementsFilterParams$","accountStatementsWidgetPreferences$","categories$","dispatchLoadAccountStatementsBusiness","payload","dispatch","dispatchUpdateWidgetPreferences","dispatchLoadCategories"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i2 from '@backbase/account-statement-common-ang';\nimport { LoadingState, DatePeriods, unixZeroDay, today, getTotalCountFromHeaders, AccountStatementCommonModule } from '@backbase/account-statement-common-ang';\nimport * as i1$1 from '@ngrx/store';\nimport { createAction, props, createReducer, on, createFeatureSelector, createSelector, StoreModule } from '@ngrx/store';\nimport { __rest } from 'tslib';\nimport { of } from 'rxjs';\nimport { withLatestFrom, switchMap, map, catchError } from 'rxjs/operators';\nimport { formatDate } from '@angular/common';\nimport { AccountStatementsPostRequest } from '@backbase/data-ang/account-statements';\nimport * as i1 from '@ngrx/effects';\nimport { createEffect, ofType, EffectsModule } from '@ngrx/effects';\n\nconst loadAccountStatementsBusinessToRequest = (_a, widgetPreferences) => {\n    var { accountIds, filterParams, paginationParams, sortingParams } = _a, actionRequestParams = __rest(_a, [\"accountIds\", \"filterParams\", \"paginationParams\", \"sortingParams\"]);\n    const { dateFrom, dateTo, category } = filterParams || {};\n    const { minimalDate, maximumDate } = widgetPreferences || {};\n    const params = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (accountIds && { accountIds })), (_hasDate(dateFrom, minimalDate) && {\n        dateFrom: _getFormattedDate(dateFrom, minimalDate),\n    })), (_hasDate(dateTo, maximumDate) && {\n        dateTo: _getFormattedDate(dateTo, maximumDate),\n    })), (category && { category })), (paginationParams && Object.assign({}, paginationParams))), (sortingParams &&\n        sortingParams.direction && {\n        direction: _mapSortingDirection(sortingParams.direction),\n        orderBy: sortingParams.column,\n    }));\n    return { accountStatementsPostRequest: params };\n};\n/**\n * Check if date or default date exist\n *\n * @param date Optional date string\n * @param defaultDate Default date object if date is not present\n * @returns boolean\n */\nconst _hasDate = (date, defaultDate) => !!(date || defaultDate);\n/**\n * Convert date into yyyy-MM-dd format\n *\n * @param date Optional date string\n * @param defaultDate Default date object if date is not present\n * @returns Date in format of yyyy-MM-dd\n */\nconst _getFormattedDate = (value, defaultDate) => {\n    const date = value || defaultDate;\n    return date && formatDate(new Date(date), 'yyyy-MM-dd', 'en-US');\n};\n/**\n * Convert direction of type 'asc' or 'desc' to 'ASC' or 'DESC'\n *\n * @param direction of type string\n * @returns sortingDirection of type AccountStatementsPostRequest.DirectionEnum\n */\nconst _mapSortingDirection = (direction) => direction === 'asc'\n    ? AccountStatementsPostRequest.DirectionEnum.ASC\n    : AccountStatementsPostRequest.DirectionEnum.DESC;\n\nconst loadAccountStatementsBusiness = createAction('[AS Account Statements] Load Account Statements for Business', props());\nconst loadAccountStatementsBusinessSuccess = createAction('[AS Account Statements] Load Account Statements for Business Success', props());\nconst loadAccountStatementsFailure = createAction('[AS Account Statements] Load Account Statements Failure', props());\nconst updateWidgetPreferences = createAction('[AS Accounts] Update Widget Preferences', props());\n\nconst accountStatementsInitialState = {\n    data: [],\n    totalCount: 0,\n    loading: LoadingState.IDLE,\n    error: undefined,\n    accountIds: [],\n    filterParams: {\n        datePeriod: DatePeriods.AllTime,\n    },\n    widgetPreferences: {\n        minimalDate: unixZeroDay(),\n        maximumDate: today(),\n    },\n};\nconst smartLoadingState = (state, action) => {\n    if (action.accountIds && action.accountIds !== state.accountIds)\n        return LoadingState.LOADING;\n    if (action.filterParams && action.filterParams !== state.filterParams)\n        return LoadingState.LOADING_FILTERED;\n    if (action.append)\n        return LoadingState.LOADING_MORE;\n    if ((action.sortingParams && action.sortingParams !== state.sortingParams) ||\n        (action.paginationParams && action.paginationParams !== state.paginationParams)) {\n        return LoadingState.LOADING_TABLE;\n    }\n    return LoadingState.LOADING;\n};\nconst reducer$1 = createReducer(accountStatementsInitialState, on(loadAccountStatementsBusiness, (state, action) => (Object.assign(Object.assign({}, state), { loading: smartLoadingState(state, action), error: undefined }))), on(loadAccountStatementsBusinessSuccess, (state, action) => {\n    const { accountStatements, accountIds, filterParams, paginationParams, sortingParams, totalCount, append } = action;\n    const dataAppendTo = append ? state.data : [];\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, state), { loading: LoadingState.IDLE, data: [...dataAppendTo, ...accountStatements], totalCount }), (accountIds && { accountIds })), (filterParams && { filterParams })), (sortingParams && { sortingParams })), (paginationParams && { paginationParams }));\n}), on(loadAccountStatementsFailure, (state, action) => (Object.assign(Object.assign({}, state), { error: action.error, loading: LoadingState.IDLE }))), on(updateWidgetPreferences, (state, action) => (Object.assign(Object.assign({}, state), { widgetPreferences: Object.assign(Object.assign({}, state.widgetPreferences), action.widgetPreferences) }))));\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\nfunction accountStatementsReducer(state, action) {\n    return reducer$1(state, action);\n}\n\nconst loadCategories = createAction('[AS Account Statements] Load Categories for Business');\nconst loadCategoriesSuccess = createAction('[AS Account Statements] Load Categories for Business Success', props());\nconst loadCategoriesFailure = createAction('[AS Account Statements] Load Categories for Business Failure', props());\n\nconst categoriesInitialState = {\n    data: [],\n    error: undefined,\n};\nconst reducer = createReducer(categoriesInitialState, on(loadCategoriesSuccess, (state, { categories }) => (Object.assign(Object.assign({}, state), { data: categories }))), on(loadCategoriesFailure, (state, { error }) => (Object.assign(Object.assign({}, state), { data: [], error }))));\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\nfunction categoriesReducer(state, action) {\n    return reducer(state, action);\n}\n\nconst initialState = {\n    accountStatements: accountStatementsInitialState,\n    categories: categoriesInitialState,\n};\n/** Key for feature state used in NgRx StoreModule. */\nconst ACCOUNT_STATEMENTS_FEATURE_KEY = 'accountStatements';\nconst accountStatementsReducers = {\n    accountStatements: accountStatementsReducer,\n    categories: categoriesReducer,\n};\n\nconst selectAccountStatements = createFeatureSelector(ACCOUNT_STATEMENTS_FEATURE_KEY);\n\nconst selectAccountStatementsState = createSelector(selectAccountStatements, accountStatementsState => accountStatementsState.accountStatements);\nconst accountStatements = createSelector(selectAccountStatementsState, (state) => state.data);\nconst accountStatementsLoading = createSelector(selectAccountStatementsState, (state) => state.loading);\nconst accountStatementsError = createSelector(selectAccountStatementsState, state => state.error);\nconst accountStatementsTotalCount = createSelector(selectAccountStatementsState, state => state.totalCount);\nconst accountStatementsAccountIds = createSelector(selectAccountStatementsState, state => state.accountIds);\nconst accountStatementsPaginationParams = createSelector(selectAccountStatementsState, state => state.paginationParams);\nconst accountStatementsSortingParams = createSelector(selectAccountStatementsState, state => state.sortingParams);\nconst accountStatementsFilterParams = createSelector(selectAccountStatementsState, state => state.filterParams);\nconst accountStatementsWidgetPreferences = createSelector(selectAccountStatementsState, state => state.widgetPreferences);\n\nclass AccountStatementEffects {\n    constructor(actions$, dataService, store) {\n        this.actions$ = actions$;\n        this.dataService = dataService;\n        this.store = store;\n        this.accountStatementsBusiness$ = createEffect(() => this.actions$.pipe(ofType(loadAccountStatementsBusiness), withLatestFrom(this.store.select(accountStatementsAccountIds), this.store.select(accountStatementsFilterParams), this.store.select(accountStatementsSortingParams), this.store.select(accountStatementsPaginationParams), this.store.select(accountStatementsWidgetPreferences)), switchMap(([action, accountIds, filterParams, sortingParams, paginationParams, widgetPreferences]) => {\n            const { append } = action, actionRequestParams = __rest(action, [\"append\"]);\n            return this.dataService\n                .getAccountStatementsBusiness(loadAccountStatementsBusinessToRequest(Object.assign({ accountIds,\n                filterParams,\n                sortingParams,\n                paginationParams }, actionRequestParams), widgetPreferences))\n                .pipe(map(response => loadAccountStatementsBusinessSuccess(Object.assign({ accountStatements: response.body, totalCount: getTotalCountFromHeaders(response.headers) }, action))), catchError(error => of(loadAccountStatementsFailure({ error }))));\n        })));\n    }\n}\nAccountStatementEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: AccountStatementEffects, deps: [{ token: i1.Actions }, { token: i2.AccountStatementDataService }, { token: i1$1.Store }], target: i0.ɵɵFactoryTarget.Injectable });\nAccountStatementEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: AccountStatementEffects });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: AccountStatementEffects, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.AccountStatementDataService }, { type: i1$1.Store }]; } });\n\nclass CategoriesEffects {\n    constructor(actions$, dataService) {\n        this.actions$ = actions$;\n        this.dataService = dataService;\n        this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(loadCategories), switchMap(() => this.dataService.loadCategories().pipe(map(response => loadCategoriesSuccess({ categories: response })), catchError(error => of(loadCategoriesFailure({ error })))))));\n    }\n}\nCategoriesEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: CategoriesEffects, deps: [{ token: i1.Actions }, { token: i2.AccountStatementDataService }], target: i0.ɵɵFactoryTarget.Injectable });\nCategoriesEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: CategoriesEffects });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: CategoriesEffects, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.AccountStatementDataService }]; } });\n\nclass AccountStatementStoreModule {\n}\nAccountStatementStoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: AccountStatementStoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAccountStatementStoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: AccountStatementStoreModule, imports: [i1$1.StoreFeatureModule, i1.EffectsFeatureModule, AccountStatementCommonModule] });\nAccountStatementStoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: AccountStatementStoreModule, imports: [[\n            StoreModule.forFeature(ACCOUNT_STATEMENTS_FEATURE_KEY, accountStatementsReducers),\n            EffectsModule.forFeature([AccountStatementEffects, CategoriesEffects]),\n            AccountStatementCommonModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: AccountStatementStoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        StoreModule.forFeature(ACCOUNT_STATEMENTS_FEATURE_KEY, accountStatementsReducers),\n                        EffectsModule.forFeature([AccountStatementEffects, CategoriesEffects]),\n                        AccountStatementCommonModule,\n                    ],\n                }]\n        }] });\n\nconst selectCategoriesState = createSelector(selectAccountStatements, accountStatementsState => accountStatementsState.categories);\nconst selectCategories = createSelector(selectCategoriesState, (state) => state.data);\nconst selectCategoriesError = createSelector(selectCategoriesState, state => state.error);\n\nclass AccountStatementStoreModel {\n    constructor(store) {\n        this.store = store;\n        this.accountStatements$ = this.store.select(accountStatements);\n        this.accountStatementsLoading$ = this.store.select(accountStatementsLoading);\n        this.accountStatementsError$ = this.store.select(accountStatementsError);\n        this.accountStatementsTotalCount$ = this.store.select(accountStatementsTotalCount);\n        this.accountStatementsPaginationParams$ = this.store.select(accountStatementsPaginationParams);\n        this.accountStatementsSortingParams$ = this.store.select(accountStatementsSortingParams);\n        this.accountStatementsFilterParams$ = this.store.select(accountStatementsFilterParams);\n        this.accountStatementsWidgetPreferences$ = this.store.select(accountStatementsWidgetPreferences);\n        this.categories$ = this.store.select(selectCategories);\n    }\n    dispatchLoadAccountStatementsBusiness(payload = {}) {\n        this.store.dispatch(loadAccountStatementsBusiness(payload));\n    }\n    dispatchUpdateWidgetPreferences(payload) {\n        this.store.dispatch(updateWidgetPreferences(payload));\n    }\n    dispatchLoadCategories() {\n        this.store.dispatch(loadCategories());\n    }\n}\nAccountStatementStoreModel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: AccountStatementStoreModel, deps: [{ token: i1$1.Store }], target: i0.ɵɵFactoryTarget.Injectable });\nAccountStatementStoreModel.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: AccountStatementStoreModel });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: AccountStatementStoreModel, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Store }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AccountStatementStoreModel, AccountStatementStoreModule };\n"]},"metadata":{},"sourceType":"module"}