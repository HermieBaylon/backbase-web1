{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i2 from '@backbase/foundation-ang/data-http';\nimport { createMocks } from '@backbase/foundation-ang/data-http';\nconst ConsentStatus = {\n  ACTIVE: 'ACTIVE',\n  REVOKED: 'REVOKED',\n  EXPIRED: 'EXPIRED'\n};\nconst Permission = {\n  ReadAccountsDetail: 'ReadAccountsDetail',\n  ReadBalances: 'ReadBalances',\n  ReadTransactionsDetail: 'ReadTransactionsDetail',\n  ReadBeneficiariesDetail: 'ReadBeneficiariesDetail',\n  ReadDirectDebits: 'ReadDirectDebits',\n  ReadProducts: 'ReadProducts',\n  ReadStandingOrdersDetail: 'ReadStandingOrdersDetail',\n  ReadTransactionsCredits: 'ReadTransactionsCredits',\n  ReadTransactionsDebits: 'ReadTransactionsDebits'\n};\nconst CONSENT_BASE_PATH = new InjectionToken('CONSENT_BASE_PATH');\nconst COLLECTION_FORMATS = {\n  'csv': ',',\n  'tsv': '   ',\n  'ssv': ' ',\n  'pipes': '|'\n};\n\nclass ConsentConfiguration {\n  constructor(configurationParameters = {}) {\n    this.apiKeys = configurationParameters.apiKeys;\n    this.username = configurationParameters.username;\n    this.password = configurationParameters.password;\n    this.accessToken = configurationParameters.accessToken;\n    this.basePath = configurationParameters.basePath;\n    this.withCredentials = configurationParameters.withCredentials;\n    this.encoder = configurationParameters.encoder;\n\n    if (configurationParameters.credentials) {\n      this.credentials = configurationParameters.credentials;\n    } else {\n      this.credentials = {};\n    }\n  }\n\n  selectHeaderContentType(contentTypes) {\n    if (contentTypes.length === 0) {\n      return undefined;\n    }\n\n    const type = contentTypes.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return contentTypes[0];\n    }\n\n    return type;\n  }\n\n  selectHeaderAccept(accepts) {\n    if (accepts.length === 0) {\n      return undefined;\n    }\n\n    const type = accepts.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return accepts[0];\n    }\n\n    return type;\n  }\n\n  isJsonMime(mime) {\n    const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n\n  lookupCredential(key) {\n    const value = this.credentials[key];\n    return typeof value === 'function' ? value() : value;\n  }\n\n}\n\nconst CONFIG_TOKEN = new InjectionToken('api-data-module ConsentConfiguration');\n\nclass ConsentApiModule {\n  constructor(parentModule, http, dataModulesManager, config) {\n    if (parentModule) {\n      throw new Error('ConsentApiModule is already loaded. Import in your base AppModule only.');\n    }\n\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' + 'See also https://github.com/angular/angular/issues/20575');\n    }\n\n    if (dataModulesManager) {\n      dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n        apiRoot: '',\n        servicePath: config.basePath || '',\n        headers: {}\n      });\n    }\n  }\n\n  static forRoot(configurationFactory) {\n    return {\n      ngModule: ConsentApiModule,\n      providers: [{\n        provide: ConsentConfiguration,\n        useFactory: configurationFactory\n      }]\n    };\n  }\n\n}\n\nConsentApiModule.ɵfac = function ConsentApiModule_Factory(t) {\n  return new (t || ConsentApiModule)(i0.ɵɵinject(ConsentApiModule, 12), i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DataModulesManager, 8), i0.ɵɵinject(ConsentConfiguration));\n};\n\nConsentApiModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ConsentApiModule\n});\nConsentApiModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [],\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ConsentApiModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [],\n      exports: [],\n      providers: []\n    }]\n  }], function () {\n    return [{\n      type: ConsentApiModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: i1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.DataModulesManager,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ConsentConfiguration\n    }];\n  }, null);\n})();\n\nclass CustomHttpParameterCodec {\n  encodeKey(k) {\n    return encodeURIComponent(k);\n  }\n\n  encodeValue(v) {\n    return encodeURIComponent(v);\n  }\n\n  decodeKey(k) {\n    return decodeURIComponent(k);\n  }\n\n  decodeValue(v) {\n    return decodeURIComponent(v);\n  }\n\n}\n\nclass ConsentRequestsHttpService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '/consent';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new ConsentConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getIdById(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling getIdById.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/consent-requests/${encodeURIComponent(String(_id))}`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getIdByIdUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling getIdById.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/consent-requests/${encodeURIComponent(String(_id))}`;\n  }\n\n  postRejectById(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling postRejectById.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/consent-requests/${encodeURIComponent(String(_id))}/reject`, null, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  postRejectByIdUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling postRejectById.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/consent-requests/${encodeURIComponent(String(_id))}/reject`;\n  }\n\n}\n\nConsentRequestsHttpService.ɵfac = function ConsentRequestsHttpService_Factory(t) {\n  return new (t || ConsentRequestsHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(CONSENT_BASE_PATH, 8), i0.ɵɵinject(ConsentConfiguration, 8));\n};\n\nConsentRequestsHttpService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ConsentRequestsHttpService,\n  factory: ConsentRequestsHttpService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ConsentRequestsHttpService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CONSENT_BASE_PATH]\n      }]\n    }, {\n      type: ConsentConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst ConsentRequestsHttpServiceGetIdByIdMocksProvider = createMocks([{\n  urlPattern: \"/consent/client-api/v2/consent-requests/{id}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"id\": \"34bf3478-4187-46b1-aab1-20577c5d339c\",\n      \"tpp\": {\n        \"id\": \"0dbbf48e-53dc-4968-8167-6337718f9781\",\n        \"externalId\": \"amazon\",\n        \"name\": \"Amazon\",\n        \"website\": \"https://amazon.com\",\n        \"imageUrl\": \"https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png\",\n        \"isTrusted\": true,\n        \"mail\": \"primary@amazon.com\",\n        \"phonenumber\": \"8882803321\",\n        \"address\": \"Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226\",\n        \"country\": \"US\"\n      },\n      \"expiryDate\": \"2019-03-28T16:41:41.090Z\",\n      \"permissions\": [\"ReadAccountsDetail\", \"ReadBalances\", \"ReadTransactionsDetail\"],\n      \"allowConsentRedirectUrl\": \"https://amazon.com\",\n      \"rejectConsentRedirectUrl\": \"https://google.com\",\n      \"accounts\": [{\n        \"id\": \"9bf23657-511a-4022-a474-c3617cf1589e\",\n        \"number\": \"LV20GOWNKDCDIA03FAQD5\",\n        \"name\": \"Ricardo Norton's Current Account\",\n        \"type\": \"currentAccount\",\n        \"currency\": \"USD\",\n        \"balance\": \"9763.34\"\n      }, {\n        \"id\": \"dd98797a-a464-4702-ae2f-2214c81a8e69\",\n        \"number\": \"AD6548375906DIXVOJTD558B\",\n        \"name\": \"Ricardo Norton's Savings Account\",\n        \"type\": \"savingsAccount\",\n        \"currency\": \"USD\",\n        \"balance\": \"3788.61\"\n      }, {\n        \"id\": \"c5566c1b-2ebe-45b5-a32e-cf83c3669bbd\",\n        \"number\": \"EE511790690392885115\",\n        \"name\": \"Ricardo Norton's Credit Card\",\n        \"type\": \"creditCard\",\n        \"currency\": \"USD\",\n        \"balance\": \"2876.76\"\n      }, {\n        \"id\": \"cf916772-3676-43a8-89c0-86bd545f84dd\",\n        \"number\": \"HR1964204918384144019\",\n        \"name\": \"Ricardo Norton's Investment Account\",\n        \"type\": \"investmentAccount\",\n        \"currency\": \"USD\",\n        \"balance\": \"2676.23\"\n      }, {\n        \"id\": \"7eaee238-d5a9-40d3-80b9-75a29fea908b\",\n        \"number\": \"IE37QNJQ34395947171968\",\n        \"name\": \"Ricardo Norton's Mortgage Loan\",\n        \"type\": \"mortgage\",\n        \"currency\": \"USD\",\n        \"balance\": -150000.0\n      }]\n    }\n  }, {\n    status: 400,\n    body: {\n      \"value\": {\n        \"message\": \"Bad Request\",\n        \"errors\": [{\n          \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n          \"key\": \"common.api.shoesize\",\n          \"context\": {\n            \"max\": \"50\",\n            \"min\": \"1\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 403,\n    body: {\n      \"value\": {\n        \"message\": \"Access to requested resource denied.\",\n        \"errors\": [{\n          \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n          \"key\": \"common.api.quota\",\n          \"context\": {\n            \"quota\": \"someQuota\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 404,\n    body: {\n      \"value\": {\n        \"message\": \"Resource not found.\",\n        \"errors\": [{\n          \"message\": \"Unable to find the resource requested resource: {resource}.\",\n          \"key\": \"common.api.resource\",\n          \"context\": {\n            \"resource\": \"aResource\"\n          }\n        }]\n      }\n    }\n  }]\n}]);\nconst ConsentRequestsHttpServicePostRejectByIdMocksProvider = createMocks([{\n  urlPattern: \"/consent/client-api/v2/consent-requests/{id}/reject\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {}\n  }, {\n    status: 400,\n    body: {\n      \"value\": {\n        \"message\": \"Bad Request\",\n        \"errors\": [{\n          \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n          \"key\": \"common.api.shoesize\",\n          \"context\": {\n            \"max\": \"50\",\n            \"min\": \"1\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 403,\n    body: {\n      \"value\": {\n        \"message\": \"Access to requested resource denied.\",\n        \"errors\": [{\n          \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n          \"key\": \"common.api.quota\",\n          \"context\": {\n            \"quota\": \"someQuota\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 404,\n    body: {\n      \"value\": {\n        \"message\": \"Resource not found.\",\n        \"errors\": [{\n          \"message\": \"Unable to find the resource requested resource: {resource}.\",\n          \"key\": \"common.api.resource\",\n          \"context\": {\n            \"resource\": \"aResource\"\n          }\n        }]\n      }\n    }\n  }]\n}]);\nconst ConsentRequestsHttpServiceMocksProvider = createMocks([{\n  urlPattern: \"/consent/client-api/v2/consent-requests/{id}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"id\": \"34bf3478-4187-46b1-aab1-20577c5d339c\",\n      \"tpp\": {\n        \"id\": \"0dbbf48e-53dc-4968-8167-6337718f9781\",\n        \"externalId\": \"amazon\",\n        \"name\": \"Amazon\",\n        \"website\": \"https://amazon.com\",\n        \"imageUrl\": \"https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png\",\n        \"isTrusted\": true,\n        \"mail\": \"primary@amazon.com\",\n        \"phonenumber\": \"8882803321\",\n        \"address\": \"Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226\",\n        \"country\": \"US\"\n      },\n      \"expiryDate\": \"2019-03-28T16:41:41.090Z\",\n      \"permissions\": [\"ReadAccountsDetail\", \"ReadBalances\", \"ReadTransactionsDetail\"],\n      \"allowConsentRedirectUrl\": \"https://amazon.com\",\n      \"rejectConsentRedirectUrl\": \"https://google.com\",\n      \"accounts\": [{\n        \"id\": \"9bf23657-511a-4022-a474-c3617cf1589e\",\n        \"number\": \"LV20GOWNKDCDIA03FAQD5\",\n        \"name\": \"Ricardo Norton's Current Account\",\n        \"type\": \"currentAccount\",\n        \"currency\": \"USD\",\n        \"balance\": \"9763.34\"\n      }, {\n        \"id\": \"dd98797a-a464-4702-ae2f-2214c81a8e69\",\n        \"number\": \"AD6548375906DIXVOJTD558B\",\n        \"name\": \"Ricardo Norton's Savings Account\",\n        \"type\": \"savingsAccount\",\n        \"currency\": \"USD\",\n        \"balance\": \"3788.61\"\n      }, {\n        \"id\": \"c5566c1b-2ebe-45b5-a32e-cf83c3669bbd\",\n        \"number\": \"EE511790690392885115\",\n        \"name\": \"Ricardo Norton's Credit Card\",\n        \"type\": \"creditCard\",\n        \"currency\": \"USD\",\n        \"balance\": \"2876.76\"\n      }, {\n        \"id\": \"cf916772-3676-43a8-89c0-86bd545f84dd\",\n        \"number\": \"HR1964204918384144019\",\n        \"name\": \"Ricardo Norton's Investment Account\",\n        \"type\": \"investmentAccount\",\n        \"currency\": \"USD\",\n        \"balance\": \"2676.23\"\n      }, {\n        \"id\": \"7eaee238-d5a9-40d3-80b9-75a29fea908b\",\n        \"number\": \"IE37QNJQ34395947171968\",\n        \"name\": \"Ricardo Norton's Mortgage Loan\",\n        \"type\": \"mortgage\",\n        \"currency\": \"USD\",\n        \"balance\": -150000.0\n      }]\n    }\n  }, {\n    status: 400,\n    body: {\n      \"value\": {\n        \"message\": \"Bad Request\",\n        \"errors\": [{\n          \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n          \"key\": \"common.api.shoesize\",\n          \"context\": {\n            \"max\": \"50\",\n            \"min\": \"1\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 403,\n    body: {\n      \"value\": {\n        \"message\": \"Access to requested resource denied.\",\n        \"errors\": [{\n          \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n          \"key\": \"common.api.quota\",\n          \"context\": {\n            \"quota\": \"someQuota\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 404,\n    body: {\n      \"value\": {\n        \"message\": \"Resource not found.\",\n        \"errors\": [{\n          \"message\": \"Unable to find the resource requested resource: {resource}.\",\n          \"key\": \"common.api.resource\",\n          \"context\": {\n            \"resource\": \"aResource\"\n          }\n        }]\n      }\n    }\n  }]\n}, {\n  urlPattern: \"/consent/client-api/v2/consent-requests/{id}/reject\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {}\n  }, {\n    status: 400,\n    body: {\n      \"value\": {\n        \"message\": \"Bad Request\",\n        \"errors\": [{\n          \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n          \"key\": \"common.api.shoesize\",\n          \"context\": {\n            \"max\": \"50\",\n            \"min\": \"1\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 403,\n    body: {\n      \"value\": {\n        \"message\": \"Access to requested resource denied.\",\n        \"errors\": [{\n          \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n          \"key\": \"common.api.quota\",\n          \"context\": {\n            \"quota\": \"someQuota\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 404,\n    body: {\n      \"value\": {\n        \"message\": \"Resource not found.\",\n        \"errors\": [{\n          \"message\": \"Unable to find the resource requested resource: {resource}.\",\n          \"key\": \"common.api.resource\",\n          \"context\": {\n            \"resource\": \"aResource\"\n          }\n        }]\n      }\n    }\n  }]\n}]);\n\nclass ConsentsHttpService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '/consent';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new ConsentConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getConsents(observe = 'body', reportProgress = false, options) {\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/consents`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getConsentsUrl() {\n    return `${this.configuration.basePath}/client-api/v2/consents`;\n  }\n\n  getIdByIdgetId(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling getIdByIdgetId.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/consents/${encodeURIComponent(String(_id))}`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getIdByIdgetIdUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling getIdByIdgetId.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/consents/${encodeURIComponent(String(_id))}`;\n  }\n\n  postConsents(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _consentPost = requestParameters[\"consentPost\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/consents`, _consentPost, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  postConsentsUrl(requestParameters) {\n    const _consentPost = requestParameters[\"consentPost\"];\n    return `${this.configuration.basePath}/client-api/v2/consents`;\n  }\n\n  postRevokeById(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling postRevokeById.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/consents/${encodeURIComponent(String(_id))}/revoke`, null, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  postRevokeByIdUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling postRevokeById.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/consents/${encodeURIComponent(String(_id))}/revoke`;\n  }\n\n}\n\nConsentsHttpService.ɵfac = function ConsentsHttpService_Factory(t) {\n  return new (t || ConsentsHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(CONSENT_BASE_PATH, 8), i0.ɵɵinject(ConsentConfiguration, 8));\n};\n\nConsentsHttpService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ConsentsHttpService,\n  factory: ConsentsHttpService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ConsentsHttpService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CONSENT_BASE_PATH]\n      }]\n    }, {\n      type: ConsentConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst ConsentsHttpServiceGetConsentsMocksProvider = createMocks([{\n  urlPattern: \"/consent/client-api/v2/consents\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"id\": \"34bf3478-4187-46b1-aab1-20577c5d339c\",\n      \"tpp\": {\n        \"id\": \"0dbbf48e-53dc-4968-8167-6337718f9781\",\n        \"externalId\": \"amazon\",\n        \"name\": \"Amazon\",\n        \"website\": \"https://amazon.com\",\n        \"imageUrl\": \"https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png\",\n        \"isTrusted\": true,\n        \"mail\": \"primary@amazon.com\",\n        \"phonenumber\": \"8882803321\",\n        \"address\": \"Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226\",\n        \"country\": \"US\"\n      },\n      \"status\": \"ACTIVE\",\n      \"expiryDate\": \"2019-03-28T16:41:41.090Z\",\n      \"numberOfAccounts\": 3\n    }, {\n      \"id\": \"ffe7b310-63ff-4c3a-be75-ec5f19da7e9e\",\n      \"tpp\": {\n        \"id\": \"b1e5bca6-2185-42a0-8701-08f4c3497485\",\n        \"externalId\": \"netflix\",\n        \"name\": \"Netflix\",\n        \"website\": \"https://netflix.com\",\n        \"imageUrl\": \"https://cdn2.iconfinder.com/data/icons/metro-uinvert-dock/256/Netflix.png\",\n        \"isTrusted\": true,\n        \"mail\": \"support@netflix.com\",\n        \"phonenumber\": \"8882803321\",\n        \"address\": \"Bowery street 103, 1290 LL, New York, New York, USA\",\n        \"country\": \"US\"\n      },\n      \"status\": \"REVOKED\",\n      \"expiryDate\": \"2019-05-28T16:41:41.090Z\",\n      \"numberOfAccounts\": 1\n    }, {\n      \"id\": \"18dd7b1c-dabf-49bb-b9e3-5f586efd19d3\",\n      \"tpp\": {\n        \"id\": \"b62943b9-811b-446d-ac68-0a38de63d792\",\n        \"externalId\": \"some-third-party\",\n        \"name\": \"Some third party\",\n        \"website\": \"https://some-third-party.com\",\n        \"isTrusted\": false,\n        \"mail\": \"contact@some-third-party.com\",\n        \"phonenumber\": \"8882803321\",\n        \"address\": \"2967 West Side Avenue, 07649, Angwil, River Edge, New Jersey, USA\",\n        \"country\": \"US\"\n      },\n      \"status\": \"EXPIRED\",\n      \"expiryDate\": \"2018-09-28T16:41:41.090Z\",\n      \"numberOfAccounts\": 2\n    }]\n  }, {\n    status: 400,\n    body: {\n      \"value\": {\n        \"message\": \"Bad Request\",\n        \"errors\": [{\n          \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n          \"key\": \"common.api.shoesize\",\n          \"context\": {\n            \"max\": \"50\",\n            \"min\": \"1\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 403,\n    body: {\n      \"value\": {\n        \"message\": \"Access to requested resource denied.\",\n        \"errors\": [{\n          \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n          \"key\": \"common.api.quota\",\n          \"context\": {\n            \"quota\": \"someQuota\"\n          }\n        }]\n      }\n    }\n  }]\n}]);\nconst ConsentsHttpServiceGetIdByIdgetIdMocksProvider = createMocks([{\n  urlPattern: \"/consent/client-api/v2/consents/{id}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"id\": \"34bf3478-4187-46b1-aab1-20577c5d339c\",\n      \"tpp\": {\n        \"id\": \"0dbbf48e-53dc-4968-8167-6337718f9781\",\n        \"externalId\": \"amazon\",\n        \"name\": \"Amazon\",\n        \"website\": \"https://amazon.com\",\n        \"imageUrl\": \"https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png\",\n        \"isTrusted\": true,\n        \"mail\": \"primary@amazon.com\",\n        \"phonenumber\": \"8882803321\",\n        \"address\": \"Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226\",\n        \"country\": \"US\"\n      },\n      \"status\": \"ACTIVE\",\n      \"expiryDate\": \"2019-03-28T16:41:41.090Z\",\n      \"permissions\": [\"ReadAccountsDetail\", \"ReadBalances\", \"ReadTransactionsDetail\"],\n      \"accounts\": [{\n        \"id\": \"9bf23657-511a-4022-a474-c3617cf1589e\",\n        \"number\": \"LV20GOWNKDCDIA03FAQD5\",\n        \"name\": \"Ricardo Norton's Current Account\",\n        \"type\": \"currentAccount\",\n        \"currency\": \"USD\",\n        \"balance\": \"9763.34\"\n      }, {\n        \"id\": \"dd98797a-a464-4702-ae2f-2214c81a8e69\",\n        \"number\": \"AD6548375906DIXVOJTD558B\",\n        \"name\": \"Ricardo Norton's Savings Account\",\n        \"type\": \"savingsAccount\",\n        \"currency\": \"USD\",\n        \"balance\": \"3788.61\"\n      }, {\n        \"id\": \"c5566c1b-2ebe-45b5-a32e-cf83c3669bbd\",\n        \"number\": \"EE511790690392885115\",\n        \"name\": \"Ricardo Norton's Credit Card\",\n        \"type\": \"creditCard\",\n        \"currency\": \"USD\",\n        \"balance\": \"2876.76\"\n      }, {\n        \"id\": \"cf916772-3676-43a8-89c0-86bd545f84dd\",\n        \"number\": \"HR1964204918384144019\",\n        \"name\": \"Ricardo Norton's Investment Account\",\n        \"type\": \"investmentAccount\",\n        \"currency\": \"USD\",\n        \"balance\": \"2676.23\"\n      }, {\n        \"id\": \"7eaee238-d5a9-40d3-80b9-75a29fea908b\",\n        \"number\": \"IE37QNJQ34395947171968\",\n        \"name\": \"Ricardo Norton's Mortgage Loan\",\n        \"type\": \"mortgage\",\n        \"currency\": \"USD\",\n        \"balance\": -150000.0\n      }]\n    }\n  }, {\n    status: 400,\n    body: {\n      \"value\": {\n        \"message\": \"Bad Request\",\n        \"errors\": [{\n          \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n          \"key\": \"common.api.shoesize\",\n          \"context\": {\n            \"max\": \"50\",\n            \"min\": \"1\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 403,\n    body: {\n      \"value\": {\n        \"message\": \"Access to requested resource denied.\",\n        \"errors\": [{\n          \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n          \"key\": \"common.api.quota\",\n          \"context\": {\n            \"quota\": \"someQuota\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 404,\n    body: {\n      \"value\": {\n        \"message\": \"Resource not found.\",\n        \"errors\": [{\n          \"message\": \"Unable to find the resource requested resource: {resource}.\",\n          \"key\": \"common.api.resource\",\n          \"context\": {\n            \"resource\": \"aResource\"\n          }\n        }]\n      }\n    }\n  }]\n}]);\nconst ConsentsHttpServicePostConsentsMocksProvider = createMocks([{\n  urlPattern: \"/consent/client-api/v2/consents\",\n  method: \"POST\",\n  responses: [{\n    status: 201,\n    body: {\n      \"id\": \"8b3e32ae-88c1-4548-a429-f5834f5aca97\"\n    }\n  }, {\n    status: 400,\n    body: {\n      \"value\": {\n        \"message\": \"Bad Request\",\n        \"errors\": [{\n          \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n          \"key\": \"common.api.shoesize\",\n          \"context\": {\n            \"max\": \"50\",\n            \"min\": \"1\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 403,\n    body: {\n      \"value\": {\n        \"message\": \"Access to requested resource denied.\",\n        \"errors\": [{\n          \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n          \"key\": \"common.api.quota\",\n          \"context\": {\n            \"quota\": \"someQuota\"\n          }\n        }]\n      }\n    }\n  }]\n}]);\nconst ConsentsHttpServicePostRevokeByIdMocksProvider = createMocks([{\n  urlPattern: \"/consent/client-api/v2/consents/{id}/revoke\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {}\n  }, {\n    status: 400,\n    body: {\n      \"value\": {\n        \"message\": \"Bad Request\",\n        \"errors\": [{\n          \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n          \"key\": \"common.api.shoesize\",\n          \"context\": {\n            \"max\": \"50\",\n            \"min\": \"1\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 403,\n    body: {\n      \"value\": {\n        \"message\": \"Access to requested resource denied.\",\n        \"errors\": [{\n          \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n          \"key\": \"common.api.quota\",\n          \"context\": {\n            \"quota\": \"someQuota\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 404,\n    body: {\n      \"value\": {\n        \"message\": \"Resource not found.\",\n        \"errors\": [{\n          \"message\": \"Unable to find the resource requested resource: {resource}.\",\n          \"key\": \"common.api.resource\",\n          \"context\": {\n            \"resource\": \"aResource\"\n          }\n        }]\n      }\n    }\n  }]\n}]);\nconst ConsentsHttpServiceMocksProvider = createMocks([{\n  urlPattern: \"/consent/client-api/v2/consents\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"id\": \"34bf3478-4187-46b1-aab1-20577c5d339c\",\n      \"tpp\": {\n        \"id\": \"0dbbf48e-53dc-4968-8167-6337718f9781\",\n        \"externalId\": \"amazon\",\n        \"name\": \"Amazon\",\n        \"website\": \"https://amazon.com\",\n        \"imageUrl\": \"https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png\",\n        \"isTrusted\": true,\n        \"mail\": \"primary@amazon.com\",\n        \"phonenumber\": \"8882803321\",\n        \"address\": \"Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226\",\n        \"country\": \"US\"\n      },\n      \"status\": \"ACTIVE\",\n      \"expiryDate\": \"2019-03-28T16:41:41.090Z\",\n      \"numberOfAccounts\": 3\n    }, {\n      \"id\": \"ffe7b310-63ff-4c3a-be75-ec5f19da7e9e\",\n      \"tpp\": {\n        \"id\": \"b1e5bca6-2185-42a0-8701-08f4c3497485\",\n        \"externalId\": \"netflix\",\n        \"name\": \"Netflix\",\n        \"website\": \"https://netflix.com\",\n        \"imageUrl\": \"https://cdn2.iconfinder.com/data/icons/metro-uinvert-dock/256/Netflix.png\",\n        \"isTrusted\": true,\n        \"mail\": \"support@netflix.com\",\n        \"phonenumber\": \"8882803321\",\n        \"address\": \"Bowery street 103, 1290 LL, New York, New York, USA\",\n        \"country\": \"US\"\n      },\n      \"status\": \"REVOKED\",\n      \"expiryDate\": \"2019-05-28T16:41:41.090Z\",\n      \"numberOfAccounts\": 1\n    }, {\n      \"id\": \"18dd7b1c-dabf-49bb-b9e3-5f586efd19d3\",\n      \"tpp\": {\n        \"id\": \"b62943b9-811b-446d-ac68-0a38de63d792\",\n        \"externalId\": \"some-third-party\",\n        \"name\": \"Some third party\",\n        \"website\": \"https://some-third-party.com\",\n        \"isTrusted\": false,\n        \"mail\": \"contact@some-third-party.com\",\n        \"phonenumber\": \"8882803321\",\n        \"address\": \"2967 West Side Avenue, 07649, Angwil, River Edge, New Jersey, USA\",\n        \"country\": \"US\"\n      },\n      \"status\": \"EXPIRED\",\n      \"expiryDate\": \"2018-09-28T16:41:41.090Z\",\n      \"numberOfAccounts\": 2\n    }]\n  }, {\n    status: 400,\n    body: {\n      \"value\": {\n        \"message\": \"Bad Request\",\n        \"errors\": [{\n          \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n          \"key\": \"common.api.shoesize\",\n          \"context\": {\n            \"max\": \"50\",\n            \"min\": \"1\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 403,\n    body: {\n      \"value\": {\n        \"message\": \"Access to requested resource denied.\",\n        \"errors\": [{\n          \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n          \"key\": \"common.api.quota\",\n          \"context\": {\n            \"quota\": \"someQuota\"\n          }\n        }]\n      }\n    }\n  }]\n}, {\n  urlPattern: \"/consent/client-api/v2/consents/{id}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"id\": \"34bf3478-4187-46b1-aab1-20577c5d339c\",\n      \"tpp\": {\n        \"id\": \"0dbbf48e-53dc-4968-8167-6337718f9781\",\n        \"externalId\": \"amazon\",\n        \"name\": \"Amazon\",\n        \"website\": \"https://amazon.com\",\n        \"imageUrl\": \"https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png\",\n        \"isTrusted\": true,\n        \"mail\": \"primary@amazon.com\",\n        \"phonenumber\": \"8882803321\",\n        \"address\": \"Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226\",\n        \"country\": \"US\"\n      },\n      \"status\": \"ACTIVE\",\n      \"expiryDate\": \"2019-03-28T16:41:41.090Z\",\n      \"permissions\": [\"ReadAccountsDetail\", \"ReadBalances\", \"ReadTransactionsDetail\"],\n      \"accounts\": [{\n        \"id\": \"9bf23657-511a-4022-a474-c3617cf1589e\",\n        \"number\": \"LV20GOWNKDCDIA03FAQD5\",\n        \"name\": \"Ricardo Norton's Current Account\",\n        \"type\": \"currentAccount\",\n        \"currency\": \"USD\",\n        \"balance\": \"9763.34\"\n      }, {\n        \"id\": \"dd98797a-a464-4702-ae2f-2214c81a8e69\",\n        \"number\": \"AD6548375906DIXVOJTD558B\",\n        \"name\": \"Ricardo Norton's Savings Account\",\n        \"type\": \"savingsAccount\",\n        \"currency\": \"USD\",\n        \"balance\": \"3788.61\"\n      }, {\n        \"id\": \"c5566c1b-2ebe-45b5-a32e-cf83c3669bbd\",\n        \"number\": \"EE511790690392885115\",\n        \"name\": \"Ricardo Norton's Credit Card\",\n        \"type\": \"creditCard\",\n        \"currency\": \"USD\",\n        \"balance\": \"2876.76\"\n      }, {\n        \"id\": \"cf916772-3676-43a8-89c0-86bd545f84dd\",\n        \"number\": \"HR1964204918384144019\",\n        \"name\": \"Ricardo Norton's Investment Account\",\n        \"type\": \"investmentAccount\",\n        \"currency\": \"USD\",\n        \"balance\": \"2676.23\"\n      }, {\n        \"id\": \"7eaee238-d5a9-40d3-80b9-75a29fea908b\",\n        \"number\": \"IE37QNJQ34395947171968\",\n        \"name\": \"Ricardo Norton's Mortgage Loan\",\n        \"type\": \"mortgage\",\n        \"currency\": \"USD\",\n        \"balance\": -150000.0\n      }]\n    }\n  }, {\n    status: 400,\n    body: {\n      \"value\": {\n        \"message\": \"Bad Request\",\n        \"errors\": [{\n          \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n          \"key\": \"common.api.shoesize\",\n          \"context\": {\n            \"max\": \"50\",\n            \"min\": \"1\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 403,\n    body: {\n      \"value\": {\n        \"message\": \"Access to requested resource denied.\",\n        \"errors\": [{\n          \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n          \"key\": \"common.api.quota\",\n          \"context\": {\n            \"quota\": \"someQuota\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 404,\n    body: {\n      \"value\": {\n        \"message\": \"Resource not found.\",\n        \"errors\": [{\n          \"message\": \"Unable to find the resource requested resource: {resource}.\",\n          \"key\": \"common.api.resource\",\n          \"context\": {\n            \"resource\": \"aResource\"\n          }\n        }]\n      }\n    }\n  }]\n}, {\n  urlPattern: \"/consent/client-api/v2/consents\",\n  method: \"POST\",\n  responses: [{\n    status: 201,\n    body: {\n      \"id\": \"8b3e32ae-88c1-4548-a429-f5834f5aca97\"\n    }\n  }, {\n    status: 400,\n    body: {\n      \"value\": {\n        \"message\": \"Bad Request\",\n        \"errors\": [{\n          \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n          \"key\": \"common.api.shoesize\",\n          \"context\": {\n            \"max\": \"50\",\n            \"min\": \"1\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 403,\n    body: {\n      \"value\": {\n        \"message\": \"Access to requested resource denied.\",\n        \"errors\": [{\n          \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n          \"key\": \"common.api.quota\",\n          \"context\": {\n            \"quota\": \"someQuota\"\n          }\n        }]\n      }\n    }\n  }]\n}, {\n  urlPattern: \"/consent/client-api/v2/consents/{id}/revoke\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {}\n  }, {\n    status: 400,\n    body: {\n      \"value\": {\n        \"message\": \"Bad Request\",\n        \"errors\": [{\n          \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n          \"key\": \"common.api.shoesize\",\n          \"context\": {\n            \"max\": \"50\",\n            \"min\": \"1\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 403,\n    body: {\n      \"value\": {\n        \"message\": \"Access to requested resource denied.\",\n        \"errors\": [{\n          \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n          \"key\": \"common.api.quota\",\n          \"context\": {\n            \"quota\": \"someQuota\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 404,\n    body: {\n      \"value\": {\n        \"message\": \"Resource not found.\",\n        \"errors\": [{\n          \"message\": \"Unable to find the resource requested resource: {resource}.\",\n          \"key\": \"common.api.resource\",\n          \"context\": {\n            \"resource\": \"aResource\"\n          }\n        }]\n      }\n    }\n  }]\n}]);\n\nclass PaymentRequestsHttpService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '/consent';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new ConsentConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getIdByIdgetPaymentRequestById(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling getIdByIdgetPaymentRequestById.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/payment-requests/${encodeURIComponent(String(_id))}`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getIdByIdgetPaymentRequestByIdUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling getIdByIdgetPaymentRequestById.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/payment-requests/${encodeURIComponent(String(_id))}`;\n  }\n\n  postConfirmById(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling postConfirmById.');\n    }\n\n    const _paymentPost = requestParameters[\"paymentPost\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/payment-requests/${encodeURIComponent(String(_id))}/confirm`, _paymentPost, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  postConfirmByIdUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling postConfirmById.');\n    }\n\n    const _paymentPost = requestParameters[\"paymentPost\"];\n    return `${this.configuration.basePath}/client-api/v2/payment-requests/${encodeURIComponent(String(_id))}/confirm`;\n  }\n\n  postRejectByIdpostReject(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling postRejectByIdpostReject.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/payment-requests/${encodeURIComponent(String(_id))}/reject`, null, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  postRejectByIdpostRejectUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling postRejectByIdpostReject.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/payment-requests/${encodeURIComponent(String(_id))}/reject`;\n  }\n\n}\n\nPaymentRequestsHttpService.ɵfac = function PaymentRequestsHttpService_Factory(t) {\n  return new (t || PaymentRequestsHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(CONSENT_BASE_PATH, 8), i0.ɵɵinject(ConsentConfiguration, 8));\n};\n\nPaymentRequestsHttpService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PaymentRequestsHttpService,\n  factory: PaymentRequestsHttpService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PaymentRequestsHttpService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CONSENT_BASE_PATH]\n      }]\n    }, {\n      type: ConsentConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst PaymentRequestsHttpServiceGetIdByIdgetPaymentRequestByIdMocksProvider = createMocks([{\n  urlPattern: \"/consent/client-api/v2/payment-requests/{id}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"id\": \"34bf3478-4187-46b1-aab1-20577c5d339c\",\n      \"tpp\": {\n        \"id\": \"0dbbf48e-53dc-4968-8167-6337718f9781\",\n        \"externalId\": \"amazon\",\n        \"name\": \"Amazon\",\n        \"website\": \"https://amazon.com\",\n        \"imageUrl\": \"https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png\",\n        \"isTrusted\": true,\n        \"mail\": \"primary@amazon.com\",\n        \"phonenumber\": \"8882803321\",\n        \"address\": \"Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226\",\n        \"country\": \"US\"\n      },\n      \"amount\": \"100.00\",\n      \"currency\": \"USD\",\n      \"allowPaymentRedirectUrl\": \"https://amazon.com\",\n      \"rejectPaymentRedirectUrl\": \"https://google.com\",\n      \"details\": \"Purchase of 1 year subscription for Amazon AWS for Backbase R&D B.V.\",\n      \"selectedAccount\": {\n        \"id\": \"c5566c1b-2ebe-45b5-a32e-cf83c3669bbd\",\n        \"number\": \"EE511790690392885115\",\n        \"name\": \"Ricardo Norton's Credit Card\",\n        \"type\": \"creditCard\",\n        \"currency\": \"USD\",\n        \"balance\": \"2876.76\"\n      },\n      \"accounts\": [{\n        \"id\": \"9bf23657-511a-4022-a474-c3617cf1589e\",\n        \"number\": \"LV20GOWNKDCDIA03FAQD5\",\n        \"name\": \"Ricardo Norton's Current Account\",\n        \"type\": \"currentAccount\",\n        \"currency\": \"USD\",\n        \"balance\": \"9763.34\"\n      }, {\n        \"id\": \"dd98797a-a464-4702-ae2f-2214c81a8e69\",\n        \"number\": \"AD6548375906DIXVOJTD558B\",\n        \"name\": \"Ricardo Norton's Savings Account\",\n        \"type\": \"savingsAccount\",\n        \"currency\": \"USD\",\n        \"balance\": \"3788.61\"\n      }, {\n        \"id\": \"c5566c1b-2ebe-45b5-a32e-cf83c3669bbd\",\n        \"number\": \"EE511790690392885115\",\n        \"name\": \"Ricardo Norton's Credit Card\",\n        \"type\": \"creditCard\",\n        \"currency\": \"USD\",\n        \"balance\": \"2876.76\"\n      }, {\n        \"id\": \"cf916772-3676-43a8-89c0-86bd545f84dd\",\n        \"number\": \"HR1964204918384144019\",\n        \"name\": \"Ricardo Norton's Investment Account\",\n        \"type\": \"investmentAccount\",\n        \"currency\": \"USD\",\n        \"balance\": \"2676.23\"\n      }, {\n        \"id\": \"7eaee238-d5a9-40d3-80b9-75a29fea908b\",\n        \"number\": \"IE37QNJQ34395947171968\",\n        \"name\": \"Ricardo Norton's Mortgage Loan\",\n        \"type\": \"mortgage\",\n        \"currency\": \"USD\",\n        \"balance\": -150000.0\n      }]\n    }\n  }, {\n    status: 400,\n    body: {\n      \"value\": {\n        \"message\": \"Bad Request\",\n        \"errors\": [{\n          \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n          \"key\": \"common.api.shoesize\",\n          \"context\": {\n            \"max\": \"50\",\n            \"min\": \"1\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 403,\n    body: {\n      \"value\": {\n        \"message\": \"Access to requested resource denied.\",\n        \"errors\": [{\n          \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n          \"key\": \"common.api.quota\",\n          \"context\": {\n            \"quota\": \"someQuota\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 404,\n    body: {\n      \"value\": {\n        \"message\": \"Resource not found.\",\n        \"errors\": [{\n          \"message\": \"Unable to find the resource requested resource: {resource}.\",\n          \"key\": \"common.api.resource\",\n          \"context\": {\n            \"resource\": \"aResource\"\n          }\n        }]\n      }\n    }\n  }]\n}]);\nconst PaymentRequestsHttpServicePostConfirmByIdMocksProvider = createMocks([{\n  urlPattern: \"/consent/client-api/v2/payment-requests/{id}/confirm\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {}\n  }, {\n    status: 400,\n    body: {\n      \"value\": {\n        \"message\": \"Bad Request\",\n        \"errors\": [{\n          \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n          \"key\": \"common.api.shoesize\",\n          \"context\": {\n            \"max\": \"50\",\n            \"min\": \"1\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 403,\n    body: {\n      \"value\": {\n        \"message\": \"Access to requested resource denied.\",\n        \"errors\": [{\n          \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n          \"key\": \"common.api.quota\",\n          \"context\": {\n            \"quota\": \"someQuota\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 404,\n    body: {\n      \"value\": {\n        \"message\": \"Resource not found.\",\n        \"errors\": [{\n          \"message\": \"Unable to find the resource requested resource: {resource}.\",\n          \"key\": \"common.api.resource\",\n          \"context\": {\n            \"resource\": \"aResource\"\n          }\n        }]\n      }\n    }\n  }]\n}]);\nconst PaymentRequestsHttpServicePostRejectByIdpostRejectMocksProvider = createMocks([{\n  urlPattern: \"/consent/client-api/v2/payment-requests/{id}/reject\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {}\n  }, {\n    status: 400,\n    body: {\n      \"value\": {\n        \"message\": \"Bad Request\",\n        \"errors\": [{\n          \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n          \"key\": \"common.api.shoesize\",\n          \"context\": {\n            \"max\": \"50\",\n            \"min\": \"1\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 403,\n    body: {\n      \"value\": {\n        \"message\": \"Access to requested resource denied.\",\n        \"errors\": [{\n          \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n          \"key\": \"common.api.quota\",\n          \"context\": {\n            \"quota\": \"someQuota\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 404,\n    body: {\n      \"value\": {\n        \"message\": \"Resource not found.\",\n        \"errors\": [{\n          \"message\": \"Unable to find the resource requested resource: {resource}.\",\n          \"key\": \"common.api.resource\",\n          \"context\": {\n            \"resource\": \"aResource\"\n          }\n        }]\n      }\n    }\n  }]\n}]);\nconst PaymentRequestsHttpServiceMocksProvider = createMocks([{\n  urlPattern: \"/consent/client-api/v2/payment-requests/{id}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"id\": \"34bf3478-4187-46b1-aab1-20577c5d339c\",\n      \"tpp\": {\n        \"id\": \"0dbbf48e-53dc-4968-8167-6337718f9781\",\n        \"externalId\": \"amazon\",\n        \"name\": \"Amazon\",\n        \"website\": \"https://amazon.com\",\n        \"imageUrl\": \"https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png\",\n        \"isTrusted\": true,\n        \"mail\": \"primary@amazon.com\",\n        \"phonenumber\": \"8882803321\",\n        \"address\": \"Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226\",\n        \"country\": \"US\"\n      },\n      \"amount\": \"100.00\",\n      \"currency\": \"USD\",\n      \"allowPaymentRedirectUrl\": \"https://amazon.com\",\n      \"rejectPaymentRedirectUrl\": \"https://google.com\",\n      \"details\": \"Purchase of 1 year subscription for Amazon AWS for Backbase R&D B.V.\",\n      \"selectedAccount\": {\n        \"id\": \"c5566c1b-2ebe-45b5-a32e-cf83c3669bbd\",\n        \"number\": \"EE511790690392885115\",\n        \"name\": \"Ricardo Norton's Credit Card\",\n        \"type\": \"creditCard\",\n        \"currency\": \"USD\",\n        \"balance\": \"2876.76\"\n      },\n      \"accounts\": [{\n        \"id\": \"9bf23657-511a-4022-a474-c3617cf1589e\",\n        \"number\": \"LV20GOWNKDCDIA03FAQD5\",\n        \"name\": \"Ricardo Norton's Current Account\",\n        \"type\": \"currentAccount\",\n        \"currency\": \"USD\",\n        \"balance\": \"9763.34\"\n      }, {\n        \"id\": \"dd98797a-a464-4702-ae2f-2214c81a8e69\",\n        \"number\": \"AD6548375906DIXVOJTD558B\",\n        \"name\": \"Ricardo Norton's Savings Account\",\n        \"type\": \"savingsAccount\",\n        \"currency\": \"USD\",\n        \"balance\": \"3788.61\"\n      }, {\n        \"id\": \"c5566c1b-2ebe-45b5-a32e-cf83c3669bbd\",\n        \"number\": \"EE511790690392885115\",\n        \"name\": \"Ricardo Norton's Credit Card\",\n        \"type\": \"creditCard\",\n        \"currency\": \"USD\",\n        \"balance\": \"2876.76\"\n      }, {\n        \"id\": \"cf916772-3676-43a8-89c0-86bd545f84dd\",\n        \"number\": \"HR1964204918384144019\",\n        \"name\": \"Ricardo Norton's Investment Account\",\n        \"type\": \"investmentAccount\",\n        \"currency\": \"USD\",\n        \"balance\": \"2676.23\"\n      }, {\n        \"id\": \"7eaee238-d5a9-40d3-80b9-75a29fea908b\",\n        \"number\": \"IE37QNJQ34395947171968\",\n        \"name\": \"Ricardo Norton's Mortgage Loan\",\n        \"type\": \"mortgage\",\n        \"currency\": \"USD\",\n        \"balance\": -150000.0\n      }]\n    }\n  }, {\n    status: 400,\n    body: {\n      \"value\": {\n        \"message\": \"Bad Request\",\n        \"errors\": [{\n          \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n          \"key\": \"common.api.shoesize\",\n          \"context\": {\n            \"max\": \"50\",\n            \"min\": \"1\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 403,\n    body: {\n      \"value\": {\n        \"message\": \"Access to requested resource denied.\",\n        \"errors\": [{\n          \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n          \"key\": \"common.api.quota\",\n          \"context\": {\n            \"quota\": \"someQuota\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 404,\n    body: {\n      \"value\": {\n        \"message\": \"Resource not found.\",\n        \"errors\": [{\n          \"message\": \"Unable to find the resource requested resource: {resource}.\",\n          \"key\": \"common.api.resource\",\n          \"context\": {\n            \"resource\": \"aResource\"\n          }\n        }]\n      }\n    }\n  }]\n}, {\n  urlPattern: \"/consent/client-api/v2/payment-requests/{id}/confirm\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {}\n  }, {\n    status: 400,\n    body: {\n      \"value\": {\n        \"message\": \"Bad Request\",\n        \"errors\": [{\n          \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n          \"key\": \"common.api.shoesize\",\n          \"context\": {\n            \"max\": \"50\",\n            \"min\": \"1\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 403,\n    body: {\n      \"value\": {\n        \"message\": \"Access to requested resource denied.\",\n        \"errors\": [{\n          \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n          \"key\": \"common.api.quota\",\n          \"context\": {\n            \"quota\": \"someQuota\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 404,\n    body: {\n      \"value\": {\n        \"message\": \"Resource not found.\",\n        \"errors\": [{\n          \"message\": \"Unable to find the resource requested resource: {resource}.\",\n          \"key\": \"common.api.resource\",\n          \"context\": {\n            \"resource\": \"aResource\"\n          }\n        }]\n      }\n    }\n  }]\n}, {\n  urlPattern: \"/consent/client-api/v2/payment-requests/{id}/reject\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {}\n  }, {\n    status: 400,\n    body: {\n      \"value\": {\n        \"message\": \"Bad Request\",\n        \"errors\": [{\n          \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n          \"key\": \"common.api.shoesize\",\n          \"context\": {\n            \"max\": \"50\",\n            \"min\": \"1\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 403,\n    body: {\n      \"value\": {\n        \"message\": \"Access to requested resource denied.\",\n        \"errors\": [{\n          \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n          \"key\": \"common.api.quota\",\n          \"context\": {\n            \"quota\": \"someQuota\"\n          }\n        }]\n      }\n    }\n  }, {\n    status: 404,\n    body: {\n      \"value\": {\n        \"message\": \"Resource not found.\",\n        \"errors\": [{\n          \"message\": \"Unable to find the resource requested resource: {resource}.\",\n          \"key\": \"common.api.resource\",\n          \"context\": {\n            \"resource\": \"aResource\"\n          }\n        }]\n      }\n    }\n  }]\n}]);\nexport { COLLECTION_FORMATS, CONFIG_TOKEN, CONSENT_BASE_PATH, ConsentApiModule, ConsentConfiguration, ConsentRequestsHttpService, ConsentRequestsHttpServiceGetIdByIdMocksProvider, ConsentRequestsHttpServiceMocksProvider, ConsentRequestsHttpServicePostRejectByIdMocksProvider, ConsentStatus, ConsentsHttpService, ConsentsHttpServiceGetConsentsMocksProvider, ConsentsHttpServiceGetIdByIdgetIdMocksProvider, ConsentsHttpServiceMocksProvider, ConsentsHttpServicePostConsentsMocksProvider, ConsentsHttpServicePostRevokeByIdMocksProvider, PaymentRequestsHttpService, PaymentRequestsHttpServiceGetIdByIdgetPaymentRequestByIdMocksProvider, PaymentRequestsHttpServiceMocksProvider, PaymentRequestsHttpServicePostConfirmByIdMocksProvider, PaymentRequestsHttpServicePostRejectByIdpostRejectMocksProvider, Permission };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/consent-http-ang/fesm2015/backbase-consent-http-ang.js"],"names":["i0","InjectionToken","NgModule","Optional","SkipSelf","Injectable","Inject","i1","HttpHeaders","i2","createMocks","ConsentStatus","ACTIVE","REVOKED","EXPIRED","Permission","ReadAccountsDetail","ReadBalances","ReadTransactionsDetail","ReadBeneficiariesDetail","ReadDirectDebits","ReadProducts","ReadStandingOrdersDetail","ReadTransactionsCredits","ReadTransactionsDebits","CONSENT_BASE_PATH","COLLECTION_FORMATS","ConsentConfiguration","constructor","configurationParameters","apiKeys","username","password","accessToken","basePath","withCredentials","encoder","credentials","selectHeaderContentType","contentTypes","length","undefined","type","find","x","isJsonMime","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","lookupCredential","key","value","CONFIG_TOKEN","ConsentApiModule","parentModule","http","dataModulesManager","config","Error","setModuleConfig","apiRoot","servicePath","headers","forRoot","configurationFactory","ngModule","providers","provide","useFactory","ɵfac","HttpClient","DataModulesManager","ɵmod","ɵinj","args","imports","declarations","exports","decorators","CustomHttpParameterCodec","encodeKey","k","encodeURIComponent","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","ConsentRequestsHttpService","httpClient","configuration","defaultHeaders","addToHttpParams","httpParams","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","append","toISOString","substr","Object","keys","getIdById","requestParameters","observe","reportProgress","options","_id","httpHeaderAcceptSelected","httpHeaderAccept","httpHeaderAccepts","set","responseType","startsWith","get","String","getIdByIdUrl","postRejectById","post","postRejectByIdUrl","ɵprov","providedIn","ConsentRequestsHttpServiceGetIdByIdMocksProvider","urlPattern","method","responses","status","body","ConsentRequestsHttpServicePostRejectByIdMocksProvider","ConsentRequestsHttpServiceMocksProvider","ConsentsHttpService","getConsents","getConsentsUrl","getIdByIdgetId","getIdByIdgetIdUrl","postConsents","_consentPost","consumes","httpContentTypeSelected","postConsentsUrl","postRevokeById","postRevokeByIdUrl","ConsentsHttpServiceGetConsentsMocksProvider","ConsentsHttpServiceGetIdByIdgetIdMocksProvider","ConsentsHttpServicePostConsentsMocksProvider","ConsentsHttpServicePostRevokeByIdMocksProvider","ConsentsHttpServiceMocksProvider","PaymentRequestsHttpService","getIdByIdgetPaymentRequestById","getIdByIdgetPaymentRequestByIdUrl","postConfirmById","_paymentPost","postConfirmByIdUrl","postRejectByIdpostReject","postRejectByIdpostRejectUrl","PaymentRequestsHttpServiceGetIdByIdgetPaymentRequestByIdMocksProvider","PaymentRequestsHttpServicePostConfirmByIdMocksProvider","PaymentRequestsHttpServicePostRejectByIdpostRejectMocksProvider","PaymentRequestsHttpServiceMocksProvider"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i2 from '@backbase/foundation-ang/data-http';\nimport { createMocks } from '@backbase/foundation-ang/data-http';\n\nconst ConsentStatus = {\n    ACTIVE: 'ACTIVE',\n    REVOKED: 'REVOKED',\n    EXPIRED: 'EXPIRED'\n};\n\nconst Permission = {\n    ReadAccountsDetail: 'ReadAccountsDetail',\n    ReadBalances: 'ReadBalances',\n    ReadTransactionsDetail: 'ReadTransactionsDetail',\n    ReadBeneficiariesDetail: 'ReadBeneficiariesDetail',\n    ReadDirectDebits: 'ReadDirectDebits',\n    ReadProducts: 'ReadProducts',\n    ReadStandingOrdersDetail: 'ReadStandingOrdersDetail',\n    ReadTransactionsCredits: 'ReadTransactionsCredits',\n    ReadTransactionsDebits: 'ReadTransactionsDebits'\n};\n\nconst CONSENT_BASE_PATH = new InjectionToken('CONSENT_BASE_PATH');\nconst COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n};\n\nclass ConsentConfiguration {\n    constructor(configurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n    selectHeaderContentType(contentTypes) {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n        const type = contentTypes.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n    selectHeaderAccept(accepts) {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n        const type = accepts.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n    isJsonMime(mime) {\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n    lookupCredential(key) {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\nconst CONFIG_TOKEN = new InjectionToken('api-data-module ConsentConfiguration');\n\nclass ConsentApiModule {\n    constructor(parentModule, http, dataModulesManager, config) {\n        if (parentModule) {\n            throw new Error('ConsentApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n                'See also https://github.com/angular/angular/issues/20575');\n        }\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n    static forRoot(configurationFactory) {\n        return {\n            ngModule: ConsentApiModule,\n            providers: [{ provide: ConsentConfiguration, useFactory: configurationFactory }]\n        };\n    }\n}\nConsentApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ConsentApiModule, deps: [{ token: ConsentApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: ConsentConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });\nConsentApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ConsentApiModule });\nConsentApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ConsentApiModule, providers: [], imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ConsentApiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [],\n                    declarations: [],\n                    exports: [],\n                    providers: []\n                }]\n        }], ctorParameters: function () { return [{ type: ConsentApiModule, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DataModulesManager, decorators: [{\n                    type: Optional\n                }] }, { type: ConsentConfiguration }]; } });\n\nclass CustomHttpParameterCodec {\n    encodeKey(k) {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v) {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k) {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v) {\n        return decodeURIComponent(v);\n    }\n}\n\nclass ConsentRequestsHttpService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '/consent';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new ConsentConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getIdById(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getIdById.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/consent-requests/${encodeURIComponent(String(_id))}`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getIdByIdUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getIdById.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/consent-requests/${encodeURIComponent(String(_id))}`;\n    }\n    postRejectById(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling postRejectById.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/consent-requests/${encodeURIComponent(String(_id))}/reject`, null, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    postRejectByIdUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling postRejectById.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/consent-requests/${encodeURIComponent(String(_id))}/reject`;\n    }\n}\nConsentRequestsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ConsentRequestsHttpService, deps: [{ token: i1.HttpClient }, { token: CONSENT_BASE_PATH, optional: true }, { token: ConsentConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nConsentRequestsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ConsentRequestsHttpService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ConsentRequestsHttpService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CONSENT_BASE_PATH]\n                }] }, { type: ConsentConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst ConsentRequestsHttpServiceGetIdByIdMocksProvider = createMocks([{\n        urlPattern: \"/consent/client-api/v2/consent-requests/{id}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"id\": \"34bf3478-4187-46b1-aab1-20577c5d339c\",\n                    \"tpp\": {\n                        \"id\": \"0dbbf48e-53dc-4968-8167-6337718f9781\",\n                        \"externalId\": \"amazon\",\n                        \"name\": \"Amazon\",\n                        \"website\": \"https://amazon.com\",\n                        \"imageUrl\": \"https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png\",\n                        \"isTrusted\": true,\n                        \"mail\": \"primary@amazon.com\",\n                        \"phonenumber\": \"8882803321\",\n                        \"address\": \"Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226\",\n                        \"country\": \"US\"\n                    },\n                    \"expiryDate\": \"2019-03-28T16:41:41.090Z\",\n                    \"permissions\": [\"ReadAccountsDetail\", \"ReadBalances\", \"ReadTransactionsDetail\"],\n                    \"allowConsentRedirectUrl\": \"https://amazon.com\",\n                    \"rejectConsentRedirectUrl\": \"https://google.com\",\n                    \"accounts\": [{\n                            \"id\": \"9bf23657-511a-4022-a474-c3617cf1589e\",\n                            \"number\": \"LV20GOWNKDCDIA03FAQD5\",\n                            \"name\": \"Ricardo Norton's Current Account\",\n                            \"type\": \"currentAccount\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"9763.34\"\n                        }, {\n                            \"id\": \"dd98797a-a464-4702-ae2f-2214c81a8e69\",\n                            \"number\": \"AD6548375906DIXVOJTD558B\",\n                            \"name\": \"Ricardo Norton's Savings Account\",\n                            \"type\": \"savingsAccount\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"3788.61\"\n                        }, {\n                            \"id\": \"c5566c1b-2ebe-45b5-a32e-cf83c3669bbd\",\n                            \"number\": \"EE511790690392885115\",\n                            \"name\": \"Ricardo Norton's Credit Card\",\n                            \"type\": \"creditCard\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"2876.76\"\n                        }, {\n                            \"id\": \"cf916772-3676-43a8-89c0-86bd545f84dd\",\n                            \"number\": \"HR1964204918384144019\",\n                            \"name\": \"Ricardo Norton's Investment Account\",\n                            \"type\": \"investmentAccount\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"2676.23\"\n                        }, {\n                            \"id\": \"7eaee238-d5a9-40d3-80b9-75a29fea908b\",\n                            \"number\": \"IE37QNJQ34395947171968\",\n                            \"name\": \"Ricardo Norton's Mortgage Loan\",\n                            \"type\": \"mortgage\",\n                            \"currency\": \"USD\",\n                            \"balance\": -150000.0\n                        }]\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"value\": {\n                        \"message\": \"Bad Request\",\n                        \"errors\": [{\n                                \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                                \"key\": \"common.api.shoesize\",\n                                \"context\": {\n                                    \"max\": \"50\",\n                                    \"min\": \"1\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"value\": {\n                        \"message\": \"Access to requested resource denied.\",\n                        \"errors\": [{\n                                \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                                \"key\": \"common.api.quota\",\n                                \"context\": {\n                                    \"quota\": \"someQuota\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"value\": {\n                        \"message\": \"Resource not found.\",\n                        \"errors\": [{\n                                \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                                \"key\": \"common.api.resource\",\n                                \"context\": {\n                                    \"resource\": \"aResource\"\n                                }\n                            }]\n                    }\n                }\n            },\n        ]\n    }]);\nconst ConsentRequestsHttpServicePostRejectByIdMocksProvider = createMocks([{\n        urlPattern: \"/consent/client-api/v2/consent-requests/{id}/reject\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {}\n            },\n            {\n                status: 400,\n                body: {\n                    \"value\": {\n                        \"message\": \"Bad Request\",\n                        \"errors\": [{\n                                \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                                \"key\": \"common.api.shoesize\",\n                                \"context\": {\n                                    \"max\": \"50\",\n                                    \"min\": \"1\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"value\": {\n                        \"message\": \"Access to requested resource denied.\",\n                        \"errors\": [{\n                                \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                                \"key\": \"common.api.quota\",\n                                \"context\": {\n                                    \"quota\": \"someQuota\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"value\": {\n                        \"message\": \"Resource not found.\",\n                        \"errors\": [{\n                                \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                                \"key\": \"common.api.resource\",\n                                \"context\": {\n                                    \"resource\": \"aResource\"\n                                }\n                            }]\n                    }\n                }\n            },\n        ]\n    }]);\nconst ConsentRequestsHttpServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/consent/client-api/v2/consent-requests/{id}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"id\": \"34bf3478-4187-46b1-aab1-20577c5d339c\",\n                    \"tpp\": {\n                        \"id\": \"0dbbf48e-53dc-4968-8167-6337718f9781\",\n                        \"externalId\": \"amazon\",\n                        \"name\": \"Amazon\",\n                        \"website\": \"https://amazon.com\",\n                        \"imageUrl\": \"https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png\",\n                        \"isTrusted\": true,\n                        \"mail\": \"primary@amazon.com\",\n                        \"phonenumber\": \"8882803321\",\n                        \"address\": \"Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226\",\n                        \"country\": \"US\"\n                    },\n                    \"expiryDate\": \"2019-03-28T16:41:41.090Z\",\n                    \"permissions\": [\"ReadAccountsDetail\", \"ReadBalances\", \"ReadTransactionsDetail\"],\n                    \"allowConsentRedirectUrl\": \"https://amazon.com\",\n                    \"rejectConsentRedirectUrl\": \"https://google.com\",\n                    \"accounts\": [{\n                            \"id\": \"9bf23657-511a-4022-a474-c3617cf1589e\",\n                            \"number\": \"LV20GOWNKDCDIA03FAQD5\",\n                            \"name\": \"Ricardo Norton's Current Account\",\n                            \"type\": \"currentAccount\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"9763.34\"\n                        }, {\n                            \"id\": \"dd98797a-a464-4702-ae2f-2214c81a8e69\",\n                            \"number\": \"AD6548375906DIXVOJTD558B\",\n                            \"name\": \"Ricardo Norton's Savings Account\",\n                            \"type\": \"savingsAccount\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"3788.61\"\n                        }, {\n                            \"id\": \"c5566c1b-2ebe-45b5-a32e-cf83c3669bbd\",\n                            \"number\": \"EE511790690392885115\",\n                            \"name\": \"Ricardo Norton's Credit Card\",\n                            \"type\": \"creditCard\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"2876.76\"\n                        }, {\n                            \"id\": \"cf916772-3676-43a8-89c0-86bd545f84dd\",\n                            \"number\": \"HR1964204918384144019\",\n                            \"name\": \"Ricardo Norton's Investment Account\",\n                            \"type\": \"investmentAccount\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"2676.23\"\n                        }, {\n                            \"id\": \"7eaee238-d5a9-40d3-80b9-75a29fea908b\",\n                            \"number\": \"IE37QNJQ34395947171968\",\n                            \"name\": \"Ricardo Norton's Mortgage Loan\",\n                            \"type\": \"mortgage\",\n                            \"currency\": \"USD\",\n                            \"balance\": -150000.0\n                        }]\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"value\": {\n                        \"message\": \"Bad Request\",\n                        \"errors\": [{\n                                \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                                \"key\": \"common.api.shoesize\",\n                                \"context\": {\n                                    \"max\": \"50\",\n                                    \"min\": \"1\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"value\": {\n                        \"message\": \"Access to requested resource denied.\",\n                        \"errors\": [{\n                                \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                                \"key\": \"common.api.quota\",\n                                \"context\": {\n                                    \"quota\": \"someQuota\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"value\": {\n                        \"message\": \"Resource not found.\",\n                        \"errors\": [{\n                                \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                                \"key\": \"common.api.resource\",\n                                \"context\": {\n                                    \"resource\": \"aResource\"\n                                }\n                            }]\n                    }\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/consent/client-api/v2/consent-requests/{id}/reject\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {}\n            },\n            {\n                status: 400,\n                body: {\n                    \"value\": {\n                        \"message\": \"Bad Request\",\n                        \"errors\": [{\n                                \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                                \"key\": \"common.api.shoesize\",\n                                \"context\": {\n                                    \"max\": \"50\",\n                                    \"min\": \"1\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"value\": {\n                        \"message\": \"Access to requested resource denied.\",\n                        \"errors\": [{\n                                \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                                \"key\": \"common.api.quota\",\n                                \"context\": {\n                                    \"quota\": \"someQuota\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"value\": {\n                        \"message\": \"Resource not found.\",\n                        \"errors\": [{\n                                \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                                \"key\": \"common.api.resource\",\n                                \"context\": {\n                                    \"resource\": \"aResource\"\n                                }\n                            }]\n                    }\n                }\n            },\n        ]\n    },\n]);\n\nclass ConsentsHttpService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '/consent';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new ConsentConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getConsents(observe = 'body', reportProgress = false, options) {\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/consents`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getConsentsUrl() {\n        return `${this.configuration.basePath}/client-api/v2/consents`;\n    }\n    getIdByIdgetId(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getIdByIdgetId.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/consents/${encodeURIComponent(String(_id))}`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getIdByIdgetIdUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getIdByIdgetId.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/consents/${encodeURIComponent(String(_id))}`;\n    }\n    postConsents(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _consentPost = requestParameters[\"consentPost\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/consents`, _consentPost, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    postConsentsUrl(requestParameters) {\n        const _consentPost = requestParameters[\"consentPost\"];\n        return `${this.configuration.basePath}/client-api/v2/consents`;\n    }\n    postRevokeById(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling postRevokeById.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/consents/${encodeURIComponent(String(_id))}/revoke`, null, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    postRevokeByIdUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling postRevokeById.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/consents/${encodeURIComponent(String(_id))}/revoke`;\n    }\n}\nConsentsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ConsentsHttpService, deps: [{ token: i1.HttpClient }, { token: CONSENT_BASE_PATH, optional: true }, { token: ConsentConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nConsentsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ConsentsHttpService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ConsentsHttpService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CONSENT_BASE_PATH]\n                }] }, { type: ConsentConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst ConsentsHttpServiceGetConsentsMocksProvider = createMocks([{\n        urlPattern: \"/consent/client-api/v2/consents\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"34bf3478-4187-46b1-aab1-20577c5d339c\",\n                        \"tpp\": {\n                            \"id\": \"0dbbf48e-53dc-4968-8167-6337718f9781\",\n                            \"externalId\": \"amazon\",\n                            \"name\": \"Amazon\",\n                            \"website\": \"https://amazon.com\",\n                            \"imageUrl\": \"https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png\",\n                            \"isTrusted\": true,\n                            \"mail\": \"primary@amazon.com\",\n                            \"phonenumber\": \"8882803321\",\n                            \"address\": \"Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226\",\n                            \"country\": \"US\"\n                        },\n                        \"status\": \"ACTIVE\",\n                        \"expiryDate\": \"2019-03-28T16:41:41.090Z\",\n                        \"numberOfAccounts\": 3\n                    }, {\n                        \"id\": \"ffe7b310-63ff-4c3a-be75-ec5f19da7e9e\",\n                        \"tpp\": {\n                            \"id\": \"b1e5bca6-2185-42a0-8701-08f4c3497485\",\n                            \"externalId\": \"netflix\",\n                            \"name\": \"Netflix\",\n                            \"website\": \"https://netflix.com\",\n                            \"imageUrl\": \"https://cdn2.iconfinder.com/data/icons/metro-uinvert-dock/256/Netflix.png\",\n                            \"isTrusted\": true,\n                            \"mail\": \"support@netflix.com\",\n                            \"phonenumber\": \"8882803321\",\n                            \"address\": \"Bowery street 103, 1290 LL, New York, New York, USA\",\n                            \"country\": \"US\"\n                        },\n                        \"status\": \"REVOKED\",\n                        \"expiryDate\": \"2019-05-28T16:41:41.090Z\",\n                        \"numberOfAccounts\": 1\n                    }, {\n                        \"id\": \"18dd7b1c-dabf-49bb-b9e3-5f586efd19d3\",\n                        \"tpp\": {\n                            \"id\": \"b62943b9-811b-446d-ac68-0a38de63d792\",\n                            \"externalId\": \"some-third-party\",\n                            \"name\": \"Some third party\",\n                            \"website\": \"https://some-third-party.com\",\n                            \"isTrusted\": false,\n                            \"mail\": \"contact@some-third-party.com\",\n                            \"phonenumber\": \"8882803321\",\n                            \"address\": \"2967 West Side Avenue, 07649, Angwil, River Edge, New Jersey, USA\",\n                            \"country\": \"US\"\n                        },\n                        \"status\": \"EXPIRED\",\n                        \"expiryDate\": \"2018-09-28T16:41:41.090Z\",\n                        \"numberOfAccounts\": 2\n                    }]\n            },\n            {\n                status: 400,\n                body: {\n                    \"value\": {\n                        \"message\": \"Bad Request\",\n                        \"errors\": [{\n                                \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                                \"key\": \"common.api.shoesize\",\n                                \"context\": {\n                                    \"max\": \"50\",\n                                    \"min\": \"1\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"value\": {\n                        \"message\": \"Access to requested resource denied.\",\n                        \"errors\": [{\n                                \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                                \"key\": \"common.api.quota\",\n                                \"context\": {\n                                    \"quota\": \"someQuota\"\n                                }\n                            }]\n                    }\n                }\n            },\n        ]\n    }]);\nconst ConsentsHttpServiceGetIdByIdgetIdMocksProvider = createMocks([{\n        urlPattern: \"/consent/client-api/v2/consents/{id}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"id\": \"34bf3478-4187-46b1-aab1-20577c5d339c\",\n                    \"tpp\": {\n                        \"id\": \"0dbbf48e-53dc-4968-8167-6337718f9781\",\n                        \"externalId\": \"amazon\",\n                        \"name\": \"Amazon\",\n                        \"website\": \"https://amazon.com\",\n                        \"imageUrl\": \"https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png\",\n                        \"isTrusted\": true,\n                        \"mail\": \"primary@amazon.com\",\n                        \"phonenumber\": \"8882803321\",\n                        \"address\": \"Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226\",\n                        \"country\": \"US\"\n                    },\n                    \"status\": \"ACTIVE\",\n                    \"expiryDate\": \"2019-03-28T16:41:41.090Z\",\n                    \"permissions\": [\"ReadAccountsDetail\", \"ReadBalances\", \"ReadTransactionsDetail\"],\n                    \"accounts\": [{\n                            \"id\": \"9bf23657-511a-4022-a474-c3617cf1589e\",\n                            \"number\": \"LV20GOWNKDCDIA03FAQD5\",\n                            \"name\": \"Ricardo Norton's Current Account\",\n                            \"type\": \"currentAccount\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"9763.34\"\n                        }, {\n                            \"id\": \"dd98797a-a464-4702-ae2f-2214c81a8e69\",\n                            \"number\": \"AD6548375906DIXVOJTD558B\",\n                            \"name\": \"Ricardo Norton's Savings Account\",\n                            \"type\": \"savingsAccount\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"3788.61\"\n                        }, {\n                            \"id\": \"c5566c1b-2ebe-45b5-a32e-cf83c3669bbd\",\n                            \"number\": \"EE511790690392885115\",\n                            \"name\": \"Ricardo Norton's Credit Card\",\n                            \"type\": \"creditCard\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"2876.76\"\n                        }, {\n                            \"id\": \"cf916772-3676-43a8-89c0-86bd545f84dd\",\n                            \"number\": \"HR1964204918384144019\",\n                            \"name\": \"Ricardo Norton's Investment Account\",\n                            \"type\": \"investmentAccount\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"2676.23\"\n                        }, {\n                            \"id\": \"7eaee238-d5a9-40d3-80b9-75a29fea908b\",\n                            \"number\": \"IE37QNJQ34395947171968\",\n                            \"name\": \"Ricardo Norton's Mortgage Loan\",\n                            \"type\": \"mortgage\",\n                            \"currency\": \"USD\",\n                            \"balance\": -150000.0\n                        }]\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"value\": {\n                        \"message\": \"Bad Request\",\n                        \"errors\": [{\n                                \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                                \"key\": \"common.api.shoesize\",\n                                \"context\": {\n                                    \"max\": \"50\",\n                                    \"min\": \"1\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"value\": {\n                        \"message\": \"Access to requested resource denied.\",\n                        \"errors\": [{\n                                \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                                \"key\": \"common.api.quota\",\n                                \"context\": {\n                                    \"quota\": \"someQuota\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"value\": {\n                        \"message\": \"Resource not found.\",\n                        \"errors\": [{\n                                \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                                \"key\": \"common.api.resource\",\n                                \"context\": {\n                                    \"resource\": \"aResource\"\n                                }\n                            }]\n                    }\n                }\n            },\n        ]\n    }]);\nconst ConsentsHttpServicePostConsentsMocksProvider = createMocks([{\n        urlPattern: \"/consent/client-api/v2/consents\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 201,\n                body: {\n                    \"id\": \"8b3e32ae-88c1-4548-a429-f5834f5aca97\"\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"value\": {\n                        \"message\": \"Bad Request\",\n                        \"errors\": [{\n                                \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                                \"key\": \"common.api.shoesize\",\n                                \"context\": {\n                                    \"max\": \"50\",\n                                    \"min\": \"1\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"value\": {\n                        \"message\": \"Access to requested resource denied.\",\n                        \"errors\": [{\n                                \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                                \"key\": \"common.api.quota\",\n                                \"context\": {\n                                    \"quota\": \"someQuota\"\n                                }\n                            }]\n                    }\n                }\n            },\n        ]\n    }]);\nconst ConsentsHttpServicePostRevokeByIdMocksProvider = createMocks([{\n        urlPattern: \"/consent/client-api/v2/consents/{id}/revoke\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {}\n            },\n            {\n                status: 400,\n                body: {\n                    \"value\": {\n                        \"message\": \"Bad Request\",\n                        \"errors\": [{\n                                \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                                \"key\": \"common.api.shoesize\",\n                                \"context\": {\n                                    \"max\": \"50\",\n                                    \"min\": \"1\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"value\": {\n                        \"message\": \"Access to requested resource denied.\",\n                        \"errors\": [{\n                                \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                                \"key\": \"common.api.quota\",\n                                \"context\": {\n                                    \"quota\": \"someQuota\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"value\": {\n                        \"message\": \"Resource not found.\",\n                        \"errors\": [{\n                                \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                                \"key\": \"common.api.resource\",\n                                \"context\": {\n                                    \"resource\": \"aResource\"\n                                }\n                            }]\n                    }\n                }\n            },\n        ]\n    }]);\nconst ConsentsHttpServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/consent/client-api/v2/consents\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"34bf3478-4187-46b1-aab1-20577c5d339c\",\n                        \"tpp\": {\n                            \"id\": \"0dbbf48e-53dc-4968-8167-6337718f9781\",\n                            \"externalId\": \"amazon\",\n                            \"name\": \"Amazon\",\n                            \"website\": \"https://amazon.com\",\n                            \"imageUrl\": \"https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png\",\n                            \"isTrusted\": true,\n                            \"mail\": \"primary@amazon.com\",\n                            \"phonenumber\": \"8882803321\",\n                            \"address\": \"Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226\",\n                            \"country\": \"US\"\n                        },\n                        \"status\": \"ACTIVE\",\n                        \"expiryDate\": \"2019-03-28T16:41:41.090Z\",\n                        \"numberOfAccounts\": 3\n                    }, {\n                        \"id\": \"ffe7b310-63ff-4c3a-be75-ec5f19da7e9e\",\n                        \"tpp\": {\n                            \"id\": \"b1e5bca6-2185-42a0-8701-08f4c3497485\",\n                            \"externalId\": \"netflix\",\n                            \"name\": \"Netflix\",\n                            \"website\": \"https://netflix.com\",\n                            \"imageUrl\": \"https://cdn2.iconfinder.com/data/icons/metro-uinvert-dock/256/Netflix.png\",\n                            \"isTrusted\": true,\n                            \"mail\": \"support@netflix.com\",\n                            \"phonenumber\": \"8882803321\",\n                            \"address\": \"Bowery street 103, 1290 LL, New York, New York, USA\",\n                            \"country\": \"US\"\n                        },\n                        \"status\": \"REVOKED\",\n                        \"expiryDate\": \"2019-05-28T16:41:41.090Z\",\n                        \"numberOfAccounts\": 1\n                    }, {\n                        \"id\": \"18dd7b1c-dabf-49bb-b9e3-5f586efd19d3\",\n                        \"tpp\": {\n                            \"id\": \"b62943b9-811b-446d-ac68-0a38de63d792\",\n                            \"externalId\": \"some-third-party\",\n                            \"name\": \"Some third party\",\n                            \"website\": \"https://some-third-party.com\",\n                            \"isTrusted\": false,\n                            \"mail\": \"contact@some-third-party.com\",\n                            \"phonenumber\": \"8882803321\",\n                            \"address\": \"2967 West Side Avenue, 07649, Angwil, River Edge, New Jersey, USA\",\n                            \"country\": \"US\"\n                        },\n                        \"status\": \"EXPIRED\",\n                        \"expiryDate\": \"2018-09-28T16:41:41.090Z\",\n                        \"numberOfAccounts\": 2\n                    }]\n            },\n            {\n                status: 400,\n                body: {\n                    \"value\": {\n                        \"message\": \"Bad Request\",\n                        \"errors\": [{\n                                \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                                \"key\": \"common.api.shoesize\",\n                                \"context\": {\n                                    \"max\": \"50\",\n                                    \"min\": \"1\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"value\": {\n                        \"message\": \"Access to requested resource denied.\",\n                        \"errors\": [{\n                                \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                                \"key\": \"common.api.quota\",\n                                \"context\": {\n                                    \"quota\": \"someQuota\"\n                                }\n                            }]\n                    }\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/consent/client-api/v2/consents/{id}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"id\": \"34bf3478-4187-46b1-aab1-20577c5d339c\",\n                    \"tpp\": {\n                        \"id\": \"0dbbf48e-53dc-4968-8167-6337718f9781\",\n                        \"externalId\": \"amazon\",\n                        \"name\": \"Amazon\",\n                        \"website\": \"https://amazon.com\",\n                        \"imageUrl\": \"https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png\",\n                        \"isTrusted\": true,\n                        \"mail\": \"primary@amazon.com\",\n                        \"phonenumber\": \"8882803321\",\n                        \"address\": \"Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226\",\n                        \"country\": \"US\"\n                    },\n                    \"status\": \"ACTIVE\",\n                    \"expiryDate\": \"2019-03-28T16:41:41.090Z\",\n                    \"permissions\": [\"ReadAccountsDetail\", \"ReadBalances\", \"ReadTransactionsDetail\"],\n                    \"accounts\": [{\n                            \"id\": \"9bf23657-511a-4022-a474-c3617cf1589e\",\n                            \"number\": \"LV20GOWNKDCDIA03FAQD5\",\n                            \"name\": \"Ricardo Norton's Current Account\",\n                            \"type\": \"currentAccount\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"9763.34\"\n                        }, {\n                            \"id\": \"dd98797a-a464-4702-ae2f-2214c81a8e69\",\n                            \"number\": \"AD6548375906DIXVOJTD558B\",\n                            \"name\": \"Ricardo Norton's Savings Account\",\n                            \"type\": \"savingsAccount\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"3788.61\"\n                        }, {\n                            \"id\": \"c5566c1b-2ebe-45b5-a32e-cf83c3669bbd\",\n                            \"number\": \"EE511790690392885115\",\n                            \"name\": \"Ricardo Norton's Credit Card\",\n                            \"type\": \"creditCard\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"2876.76\"\n                        }, {\n                            \"id\": \"cf916772-3676-43a8-89c0-86bd545f84dd\",\n                            \"number\": \"HR1964204918384144019\",\n                            \"name\": \"Ricardo Norton's Investment Account\",\n                            \"type\": \"investmentAccount\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"2676.23\"\n                        }, {\n                            \"id\": \"7eaee238-d5a9-40d3-80b9-75a29fea908b\",\n                            \"number\": \"IE37QNJQ34395947171968\",\n                            \"name\": \"Ricardo Norton's Mortgage Loan\",\n                            \"type\": \"mortgage\",\n                            \"currency\": \"USD\",\n                            \"balance\": -150000.0\n                        }]\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"value\": {\n                        \"message\": \"Bad Request\",\n                        \"errors\": [{\n                                \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                                \"key\": \"common.api.shoesize\",\n                                \"context\": {\n                                    \"max\": \"50\",\n                                    \"min\": \"1\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"value\": {\n                        \"message\": \"Access to requested resource denied.\",\n                        \"errors\": [{\n                                \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                                \"key\": \"common.api.quota\",\n                                \"context\": {\n                                    \"quota\": \"someQuota\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"value\": {\n                        \"message\": \"Resource not found.\",\n                        \"errors\": [{\n                                \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                                \"key\": \"common.api.resource\",\n                                \"context\": {\n                                    \"resource\": \"aResource\"\n                                }\n                            }]\n                    }\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/consent/client-api/v2/consents\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 201,\n                body: {\n                    \"id\": \"8b3e32ae-88c1-4548-a429-f5834f5aca97\"\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"value\": {\n                        \"message\": \"Bad Request\",\n                        \"errors\": [{\n                                \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                                \"key\": \"common.api.shoesize\",\n                                \"context\": {\n                                    \"max\": \"50\",\n                                    \"min\": \"1\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"value\": {\n                        \"message\": \"Access to requested resource denied.\",\n                        \"errors\": [{\n                                \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                                \"key\": \"common.api.quota\",\n                                \"context\": {\n                                    \"quota\": \"someQuota\"\n                                }\n                            }]\n                    }\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/consent/client-api/v2/consents/{id}/revoke\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {}\n            },\n            {\n                status: 400,\n                body: {\n                    \"value\": {\n                        \"message\": \"Bad Request\",\n                        \"errors\": [{\n                                \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                                \"key\": \"common.api.shoesize\",\n                                \"context\": {\n                                    \"max\": \"50\",\n                                    \"min\": \"1\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"value\": {\n                        \"message\": \"Access to requested resource denied.\",\n                        \"errors\": [{\n                                \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                                \"key\": \"common.api.quota\",\n                                \"context\": {\n                                    \"quota\": \"someQuota\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"value\": {\n                        \"message\": \"Resource not found.\",\n                        \"errors\": [{\n                                \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                                \"key\": \"common.api.resource\",\n                                \"context\": {\n                                    \"resource\": \"aResource\"\n                                }\n                            }]\n                    }\n                }\n            },\n        ]\n    },\n]);\n\nclass PaymentRequestsHttpService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '/consent';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new ConsentConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getIdByIdgetPaymentRequestById(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getIdByIdgetPaymentRequestById.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/payment-requests/${encodeURIComponent(String(_id))}`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getIdByIdgetPaymentRequestByIdUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getIdByIdgetPaymentRequestById.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/payment-requests/${encodeURIComponent(String(_id))}`;\n    }\n    postConfirmById(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling postConfirmById.');\n        }\n        const _paymentPost = requestParameters[\"paymentPost\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/payment-requests/${encodeURIComponent(String(_id))}/confirm`, _paymentPost, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    postConfirmByIdUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling postConfirmById.');\n        }\n        const _paymentPost = requestParameters[\"paymentPost\"];\n        return `${this.configuration.basePath}/client-api/v2/payment-requests/${encodeURIComponent(String(_id))}/confirm`;\n    }\n    postRejectByIdpostReject(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling postRejectByIdpostReject.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/payment-requests/${encodeURIComponent(String(_id))}/reject`, null, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    postRejectByIdpostRejectUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling postRejectByIdpostReject.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/payment-requests/${encodeURIComponent(String(_id))}/reject`;\n    }\n}\nPaymentRequestsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PaymentRequestsHttpService, deps: [{ token: i1.HttpClient }, { token: CONSENT_BASE_PATH, optional: true }, { token: ConsentConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nPaymentRequestsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PaymentRequestsHttpService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PaymentRequestsHttpService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CONSENT_BASE_PATH]\n                }] }, { type: ConsentConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst PaymentRequestsHttpServiceGetIdByIdgetPaymentRequestByIdMocksProvider = createMocks([{\n        urlPattern: \"/consent/client-api/v2/payment-requests/{id}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"id\": \"34bf3478-4187-46b1-aab1-20577c5d339c\",\n                    \"tpp\": {\n                        \"id\": \"0dbbf48e-53dc-4968-8167-6337718f9781\",\n                        \"externalId\": \"amazon\",\n                        \"name\": \"Amazon\",\n                        \"website\": \"https://amazon.com\",\n                        \"imageUrl\": \"https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png\",\n                        \"isTrusted\": true,\n                        \"mail\": \"primary@amazon.com\",\n                        \"phonenumber\": \"8882803321\",\n                        \"address\": \"Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226\",\n                        \"country\": \"US\"\n                    },\n                    \"amount\": \"100.00\",\n                    \"currency\": \"USD\",\n                    \"allowPaymentRedirectUrl\": \"https://amazon.com\",\n                    \"rejectPaymentRedirectUrl\": \"https://google.com\",\n                    \"details\": \"Purchase of 1 year subscription for Amazon AWS for Backbase R&D B.V.\",\n                    \"selectedAccount\": {\n                        \"id\": \"c5566c1b-2ebe-45b5-a32e-cf83c3669bbd\",\n                        \"number\": \"EE511790690392885115\",\n                        \"name\": \"Ricardo Norton's Credit Card\",\n                        \"type\": \"creditCard\",\n                        \"currency\": \"USD\",\n                        \"balance\": \"2876.76\"\n                    },\n                    \"accounts\": [{\n                            \"id\": \"9bf23657-511a-4022-a474-c3617cf1589e\",\n                            \"number\": \"LV20GOWNKDCDIA03FAQD5\",\n                            \"name\": \"Ricardo Norton's Current Account\",\n                            \"type\": \"currentAccount\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"9763.34\"\n                        }, {\n                            \"id\": \"dd98797a-a464-4702-ae2f-2214c81a8e69\",\n                            \"number\": \"AD6548375906DIXVOJTD558B\",\n                            \"name\": \"Ricardo Norton's Savings Account\",\n                            \"type\": \"savingsAccount\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"3788.61\"\n                        }, {\n                            \"id\": \"c5566c1b-2ebe-45b5-a32e-cf83c3669bbd\",\n                            \"number\": \"EE511790690392885115\",\n                            \"name\": \"Ricardo Norton's Credit Card\",\n                            \"type\": \"creditCard\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"2876.76\"\n                        }, {\n                            \"id\": \"cf916772-3676-43a8-89c0-86bd545f84dd\",\n                            \"number\": \"HR1964204918384144019\",\n                            \"name\": \"Ricardo Norton's Investment Account\",\n                            \"type\": \"investmentAccount\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"2676.23\"\n                        }, {\n                            \"id\": \"7eaee238-d5a9-40d3-80b9-75a29fea908b\",\n                            \"number\": \"IE37QNJQ34395947171968\",\n                            \"name\": \"Ricardo Norton's Mortgage Loan\",\n                            \"type\": \"mortgage\",\n                            \"currency\": \"USD\",\n                            \"balance\": -150000.0\n                        }]\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"value\": {\n                        \"message\": \"Bad Request\",\n                        \"errors\": [{\n                                \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                                \"key\": \"common.api.shoesize\",\n                                \"context\": {\n                                    \"max\": \"50\",\n                                    \"min\": \"1\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"value\": {\n                        \"message\": \"Access to requested resource denied.\",\n                        \"errors\": [{\n                                \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                                \"key\": \"common.api.quota\",\n                                \"context\": {\n                                    \"quota\": \"someQuota\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"value\": {\n                        \"message\": \"Resource not found.\",\n                        \"errors\": [{\n                                \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                                \"key\": \"common.api.resource\",\n                                \"context\": {\n                                    \"resource\": \"aResource\"\n                                }\n                            }]\n                    }\n                }\n            },\n        ]\n    }]);\nconst PaymentRequestsHttpServicePostConfirmByIdMocksProvider = createMocks([{\n        urlPattern: \"/consent/client-api/v2/payment-requests/{id}/confirm\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {}\n            },\n            {\n                status: 400,\n                body: {\n                    \"value\": {\n                        \"message\": \"Bad Request\",\n                        \"errors\": [{\n                                \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                                \"key\": \"common.api.shoesize\",\n                                \"context\": {\n                                    \"max\": \"50\",\n                                    \"min\": \"1\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"value\": {\n                        \"message\": \"Access to requested resource denied.\",\n                        \"errors\": [{\n                                \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                                \"key\": \"common.api.quota\",\n                                \"context\": {\n                                    \"quota\": \"someQuota\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"value\": {\n                        \"message\": \"Resource not found.\",\n                        \"errors\": [{\n                                \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                                \"key\": \"common.api.resource\",\n                                \"context\": {\n                                    \"resource\": \"aResource\"\n                                }\n                            }]\n                    }\n                }\n            },\n        ]\n    }]);\nconst PaymentRequestsHttpServicePostRejectByIdpostRejectMocksProvider = createMocks([{\n        urlPattern: \"/consent/client-api/v2/payment-requests/{id}/reject\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {}\n            },\n            {\n                status: 400,\n                body: {\n                    \"value\": {\n                        \"message\": \"Bad Request\",\n                        \"errors\": [{\n                                \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                                \"key\": \"common.api.shoesize\",\n                                \"context\": {\n                                    \"max\": \"50\",\n                                    \"min\": \"1\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"value\": {\n                        \"message\": \"Access to requested resource denied.\",\n                        \"errors\": [{\n                                \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                                \"key\": \"common.api.quota\",\n                                \"context\": {\n                                    \"quota\": \"someQuota\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"value\": {\n                        \"message\": \"Resource not found.\",\n                        \"errors\": [{\n                                \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                                \"key\": \"common.api.resource\",\n                                \"context\": {\n                                    \"resource\": \"aResource\"\n                                }\n                            }]\n                    }\n                }\n            },\n        ]\n    }]);\nconst PaymentRequestsHttpServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/consent/client-api/v2/payment-requests/{id}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"id\": \"34bf3478-4187-46b1-aab1-20577c5d339c\",\n                    \"tpp\": {\n                        \"id\": \"0dbbf48e-53dc-4968-8167-6337718f9781\",\n                        \"externalId\": \"amazon\",\n                        \"name\": \"Amazon\",\n                        \"website\": \"https://amazon.com\",\n                        \"imageUrl\": \"https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png\",\n                        \"isTrusted\": true,\n                        \"mail\": \"primary@amazon.com\",\n                        \"phonenumber\": \"8882803321\",\n                        \"address\": \"Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226\",\n                        \"country\": \"US\"\n                    },\n                    \"amount\": \"100.00\",\n                    \"currency\": \"USD\",\n                    \"allowPaymentRedirectUrl\": \"https://amazon.com\",\n                    \"rejectPaymentRedirectUrl\": \"https://google.com\",\n                    \"details\": \"Purchase of 1 year subscription for Amazon AWS for Backbase R&D B.V.\",\n                    \"selectedAccount\": {\n                        \"id\": \"c5566c1b-2ebe-45b5-a32e-cf83c3669bbd\",\n                        \"number\": \"EE511790690392885115\",\n                        \"name\": \"Ricardo Norton's Credit Card\",\n                        \"type\": \"creditCard\",\n                        \"currency\": \"USD\",\n                        \"balance\": \"2876.76\"\n                    },\n                    \"accounts\": [{\n                            \"id\": \"9bf23657-511a-4022-a474-c3617cf1589e\",\n                            \"number\": \"LV20GOWNKDCDIA03FAQD5\",\n                            \"name\": \"Ricardo Norton's Current Account\",\n                            \"type\": \"currentAccount\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"9763.34\"\n                        }, {\n                            \"id\": \"dd98797a-a464-4702-ae2f-2214c81a8e69\",\n                            \"number\": \"AD6548375906DIXVOJTD558B\",\n                            \"name\": \"Ricardo Norton's Savings Account\",\n                            \"type\": \"savingsAccount\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"3788.61\"\n                        }, {\n                            \"id\": \"c5566c1b-2ebe-45b5-a32e-cf83c3669bbd\",\n                            \"number\": \"EE511790690392885115\",\n                            \"name\": \"Ricardo Norton's Credit Card\",\n                            \"type\": \"creditCard\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"2876.76\"\n                        }, {\n                            \"id\": \"cf916772-3676-43a8-89c0-86bd545f84dd\",\n                            \"number\": \"HR1964204918384144019\",\n                            \"name\": \"Ricardo Norton's Investment Account\",\n                            \"type\": \"investmentAccount\",\n                            \"currency\": \"USD\",\n                            \"balance\": \"2676.23\"\n                        }, {\n                            \"id\": \"7eaee238-d5a9-40d3-80b9-75a29fea908b\",\n                            \"number\": \"IE37QNJQ34395947171968\",\n                            \"name\": \"Ricardo Norton's Mortgage Loan\",\n                            \"type\": \"mortgage\",\n                            \"currency\": \"USD\",\n                            \"balance\": -150000.0\n                        }]\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"value\": {\n                        \"message\": \"Bad Request\",\n                        \"errors\": [{\n                                \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                                \"key\": \"common.api.shoesize\",\n                                \"context\": {\n                                    \"max\": \"50\",\n                                    \"min\": \"1\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"value\": {\n                        \"message\": \"Access to requested resource denied.\",\n                        \"errors\": [{\n                                \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                                \"key\": \"common.api.quota\",\n                                \"context\": {\n                                    \"quota\": \"someQuota\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"value\": {\n                        \"message\": \"Resource not found.\",\n                        \"errors\": [{\n                                \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                                \"key\": \"common.api.resource\",\n                                \"context\": {\n                                    \"resource\": \"aResource\"\n                                }\n                            }]\n                    }\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/consent/client-api/v2/payment-requests/{id}/confirm\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {}\n            },\n            {\n                status: 400,\n                body: {\n                    \"value\": {\n                        \"message\": \"Bad Request\",\n                        \"errors\": [{\n                                \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                                \"key\": \"common.api.shoesize\",\n                                \"context\": {\n                                    \"max\": \"50\",\n                                    \"min\": \"1\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"value\": {\n                        \"message\": \"Access to requested resource denied.\",\n                        \"errors\": [{\n                                \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                                \"key\": \"common.api.quota\",\n                                \"context\": {\n                                    \"quota\": \"someQuota\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"value\": {\n                        \"message\": \"Resource not found.\",\n                        \"errors\": [{\n                                \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                                \"key\": \"common.api.resource\",\n                                \"context\": {\n                                    \"resource\": \"aResource\"\n                                }\n                            }]\n                    }\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/consent/client-api/v2/payment-requests/{id}/reject\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {}\n            },\n            {\n                status: 400,\n                body: {\n                    \"value\": {\n                        \"message\": \"Bad Request\",\n                        \"errors\": [{\n                                \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                                \"key\": \"common.api.shoesize\",\n                                \"context\": {\n                                    \"max\": \"50\",\n                                    \"min\": \"1\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"value\": {\n                        \"message\": \"Access to requested resource denied.\",\n                        \"errors\": [{\n                                \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                                \"key\": \"common.api.quota\",\n                                \"context\": {\n                                    \"quota\": \"someQuota\"\n                                }\n                            }]\n                    }\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"value\": {\n                        \"message\": \"Resource not found.\",\n                        \"errors\": [{\n                                \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                                \"key\": \"common.api.resource\",\n                                \"context\": {\n                                    \"resource\": \"aResource\"\n                                }\n                            }]\n                    }\n                }\n            },\n        ]\n    },\n]);\n\nexport { COLLECTION_FORMATS, CONFIG_TOKEN, CONSENT_BASE_PATH, ConsentApiModule, ConsentConfiguration, ConsentRequestsHttpService, ConsentRequestsHttpServiceGetIdByIdMocksProvider, ConsentRequestsHttpServiceMocksProvider, ConsentRequestsHttpServicePostRejectByIdMocksProvider, ConsentStatus, ConsentsHttpService, ConsentsHttpServiceGetConsentsMocksProvider, ConsentsHttpServiceGetIdByIdgetIdMocksProvider, ConsentsHttpServiceMocksProvider, ConsentsHttpServicePostConsentsMocksProvider, ConsentsHttpServicePostRevokeByIdMocksProvider, PaymentRequestsHttpService, PaymentRequestsHttpServiceGetIdByIdgetPaymentRequestByIdMocksProvider, PaymentRequestsHttpServiceMocksProvider, PaymentRequestsHttpServicePostConfirmByIdMocksProvider, PaymentRequestsHttpServicePostRejectByIdpostRejectMocksProvider, Permission };\n"]},"metadata":{},"sourceType":"module"}