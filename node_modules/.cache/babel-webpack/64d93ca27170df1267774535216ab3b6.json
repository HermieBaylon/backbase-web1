{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i2 from '@backbase/foundation-ang/data-http';\nimport { createMocks } from '@backbase/foundation-ang/data-http';\nvar DeliveryTransitStep;\n\n(function (DeliveryTransitStep) {\n  DeliveryTransitStep.StatusEnum = {\n    SUCCESS: 'SUCCESS',\n    FAILED: 'FAILED',\n    PENDING: 'PENDING'\n  };\n})(DeliveryTransitStep || (DeliveryTransitStep = {}));\n\nconst LockStatus = {\n  LOCKED: 'LOCKED',\n  UNLOCKED: 'UNLOCKED'\n};\nconst CARDS_BASE_PATH = new InjectionToken('CARDS_BASE_PATH');\nconst COLLECTION_FORMATS = {\n  'csv': ',',\n  'tsv': '   ',\n  'ssv': ' ',\n  'pipes': '|'\n};\n\nclass CardsConfiguration {\n  constructor(configurationParameters = {}) {\n    this.apiKeys = configurationParameters.apiKeys;\n    this.username = configurationParameters.username;\n    this.password = configurationParameters.password;\n    this.accessToken = configurationParameters.accessToken;\n    this.basePath = configurationParameters.basePath;\n    this.withCredentials = configurationParameters.withCredentials;\n    this.encoder = configurationParameters.encoder;\n\n    if (configurationParameters.credentials) {\n      this.credentials = configurationParameters.credentials;\n    } else {\n      this.credentials = {};\n    }\n  }\n\n  selectHeaderContentType(contentTypes) {\n    if (contentTypes.length === 0) {\n      return undefined;\n    }\n\n    const type = contentTypes.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return contentTypes[0];\n    }\n\n    return type;\n  }\n\n  selectHeaderAccept(accepts) {\n    if (accepts.length === 0) {\n      return undefined;\n    }\n\n    const type = accepts.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return accepts[0];\n    }\n\n    return type;\n  }\n\n  isJsonMime(mime) {\n    const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n\n  lookupCredential(key) {\n    const value = this.credentials[key];\n    return typeof value === 'function' ? value() : value;\n  }\n\n}\n\nconst CONFIG_TOKEN = new InjectionToken('api-data-module CardsConfiguration');\n\nclass CardsApiModule {\n  constructor(parentModule, http, dataModulesManager, config) {\n    if (parentModule) {\n      throw new Error('CardsApiModule is already loaded. Import in your base AppModule only.');\n    }\n\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' + 'See also https://github.com/angular/angular/issues/20575');\n    }\n\n    if (dataModulesManager) {\n      dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n        apiRoot: '',\n        servicePath: config.basePath || '',\n        headers: {}\n      });\n    }\n  }\n\n  static forRoot(configurationFactory) {\n    return {\n      ngModule: CardsApiModule,\n      providers: [{\n        provide: CardsConfiguration,\n        useFactory: configurationFactory\n      }]\n    };\n  }\n\n}\n\nCardsApiModule.ɵfac = function CardsApiModule_Factory(t) {\n  return new (t || CardsApiModule)(i0.ɵɵinject(CardsApiModule, 12), i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DataModulesManager, 8), i0.ɵɵinject(CardsConfiguration));\n};\n\nCardsApiModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CardsApiModule\n});\nCardsApiModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [],\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CardsApiModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [],\n      exports: [],\n      providers: []\n    }]\n  }], function () {\n    return [{\n      type: CardsApiModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: i1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.DataModulesManager,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: CardsConfiguration\n    }];\n  }, null);\n})();\n\nclass CustomHttpParameterCodec {\n  encodeKey(k) {\n    return encodeURIComponent(k);\n  }\n\n  encodeValue(v) {\n    return encodeURIComponent(v);\n  }\n\n  decodeKey(k) {\n    return decodeURIComponent(k);\n  }\n\n  decodeValue(v) {\n    return decodeURIComponent(v);\n  }\n\n}\n\nclass CardsHttpService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new CardsConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  activate(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling activate.');\n    }\n\n    const _activatePost = requestParameters[\"activatePost\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/activation`, _activatePost, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  activateUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling activate.');\n    }\n\n    const _activatePost = requestParameters[\"activatePost\"];\n    return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/activation`;\n  }\n\n  changeLimits(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling changeLimits.');\n    }\n\n    const _changeLimitsPostItem = requestParameters[\"changeLimitsPostItem\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/limits`, _changeLimitsPostItem, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  changeLimitsUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling changeLimits.');\n    }\n\n    const _changeLimitsPostItem = requestParameters[\"changeLimitsPostItem\"];\n    return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/limits`;\n  }\n\n  getCardById(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling getCardById.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getCardByIdUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling getCardById.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}`;\n  }\n\n  getCards(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _ids = requestParameters[\"ids\"];\n    const _status = requestParameters[\"status\"];\n    const _types = requestParameters[\"types\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_ids) {\n      _ids.forEach(element => {\n        queryParameters = this.addToHttpParams(queryParameters, element, 'ids');\n      });\n    }\n\n    if (_status) {\n      _status.forEach(element => {\n        queryParameters = this.addToHttpParams(queryParameters, element, 'status');\n      });\n    }\n\n    if (_types) {\n      _types.forEach(element => {\n        queryParameters = this.addToHttpParams(queryParameters, element, 'types');\n      });\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/cards`, {\n      params: queryParameters,\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getCardsUrl(requestParameters) {\n    const _ids = requestParameters[\"ids\"];\n    const _status = requestParameters[\"status\"];\n    const _types = requestParameters[\"types\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_ids) {\n      _ids.forEach(element => {\n        queryParameters = this.addToHttpParams(queryParameters, element, 'ids');\n      });\n    }\n\n    if (_status) {\n      _status.forEach(element => {\n        queryParameters = this.addToHttpParams(queryParameters, element, 'status');\n      });\n    }\n\n    if (_types) {\n      _types.forEach(element => {\n        queryParameters = this.addToHttpParams(queryParameters, element, 'types');\n      });\n    }\n\n    const queryString = queryParameters.toString();\n    return `${this.configuration.basePath}/client-api/v2/cards${queryString ? `?${queryString}` : ''}`;\n  }\n\n  requestPin(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling requestPin.');\n    }\n\n    const _requestPinPost = requestParameters[\"requestPinPost\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/pin/request`, _requestPinPost, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  requestPinUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling requestPin.');\n    }\n\n    const _requestPinPost = requestParameters[\"requestPinPost\"];\n    return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/pin/request`;\n  }\n\n  requestReplacement(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling requestReplacement.');\n    }\n\n    const _requestReplacementPost = requestParameters[\"requestReplacementPost\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/replacement`, _requestReplacementPost, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  requestReplacementUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling requestReplacement.');\n    }\n\n    const _requestReplacementPost = requestParameters[\"requestReplacementPost\"];\n    return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/replacement`;\n  }\n\n  resetPin(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling resetPin.');\n    }\n\n    const _resetPinPost = requestParameters[\"resetPinPost\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/pin/reset`, _resetPinPost, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  resetPinUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling resetPin.');\n    }\n\n    const _resetPinPost = requestParameters[\"resetPinPost\"];\n    return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/pin/reset`;\n  }\n\n  updateLockStatus(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling updateLockStatus.');\n    }\n\n    const _lockStatusPost = requestParameters[\"lockStatusPost\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/lock-status`, _lockStatusPost, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  updateLockStatusUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling updateLockStatus.');\n    }\n\n    const _lockStatusPost = requestParameters[\"lockStatusPost\"];\n    return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/lock-status`;\n  }\n\n}\n\nCardsHttpService.ɵfac = function CardsHttpService_Factory(t) {\n  return new (t || CardsHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(CARDS_BASE_PATH, 8), i0.ɵɵinject(CardsConfiguration, 8));\n};\n\nCardsHttpService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CardsHttpService,\n  factory: CardsHttpService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CardsHttpService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CARDS_BASE_PATH]\n      }]\n    }, {\n      type: CardsConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst CardsHttpServiceActivateMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/cards/{id}/activation\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {\n      \"id\": \"sara-card-3\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold Card\",\n      \"status\": \"Inactive\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Sara Williams\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2022\",\n        \"month\": \"12\"\n      },\n      \"currency\": \"USD\",\n      \"maskedNumber\": \"5237\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2020-05-04T12:52:20.906+00:00\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"PENDING\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"PENDING\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"PENDING\"\n        }]\n      },\n      \"limits\": [{\n        \"id\": \"sara-limit-1\",\n        \"channel\": \"ATM\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 3000,\n        \"maxAmount\": 10000,\n        \"minAmount\": 0\n      }, {\n        \"id\": \"sara-limit-2\",\n        \"channel\": \"ONLINE\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 2000,\n        \"maxAmount\": 10000,\n        \"minAmount\": 0\n      }]\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"kim-card-2\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Copper\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Kim Sook\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2027\",\n        \"month\": \"03\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"9292\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"delivery\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"transitSteps\": [{\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"holder\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"name\": \"name\"\n      },\n      \"type\": \"type\",\n      \"expiryDate\": {\n        \"month\": \"month\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"year\": \"year\"\n      },\n      \"maskedNumber\": \"maskedNumber\",\n      \"name\": \"name\",\n      \"subType\": \"subType\",\n      \"currency\": \"currency\",\n      \"id\": \"id\",\n      \"brand\": \"brand\",\n      \"replacement\": {\n        \"reason\": \"reason\",\n        \"replacingId\": \"replacingId\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"replacedById\": \"replacedById\",\n        \"status\": \"status\"\n      },\n      \"limits\": [{\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }, {\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }],\n      \"status\": \"status\"\n    }\n  }]\n}]);\nconst CardsHttpServiceChangeLimitsMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/cards/{id}/limits\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"john-card-1\",\n      \"brand\": \"visa\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"John Doe\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2030\",\n        \"month\": \"06\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"5827\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"limits\": [{\n        \"id\": \"john-limit-1\",\n        \"channel\": \"ATM\",\n        \"frequency\": \"WEEKLY\",\n        \"amount\": 1000,\n        \"maxAmount\": 9000,\n        \"minAmount\": 0\n      }, {\n        \"id\": \"john-limit-2\",\n        \"channel\": \"ONLINE\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 20000,\n        \"maxAmount\": 9000,\n        \"minAmount\": 0\n      }]\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"delivery\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"transitSteps\": [{\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"holder\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"name\": \"name\"\n      },\n      \"type\": \"type\",\n      \"expiryDate\": {\n        \"month\": \"month\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"year\": \"year\"\n      },\n      \"maskedNumber\": \"maskedNumber\",\n      \"name\": \"name\",\n      \"subType\": \"subType\",\n      \"currency\": \"currency\",\n      \"id\": \"id\",\n      \"brand\": \"brand\",\n      \"replacement\": {\n        \"reason\": \"reason\",\n        \"replacingId\": \"replacingId\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"replacedById\": \"replacedById\",\n        \"status\": \"status\"\n      },\n      \"limits\": [{\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }, {\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }],\n      \"status\": \"status\"\n    }\n  }]\n}]);\nconst CardsHttpServiceGetCardByIdMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/cards/{id}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"id\": \"sara-card-1\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold Card\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Sara Williams\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2022\",\n        \"month\": \"12\"\n      },\n      \"currency\": \"USD\",\n      \"maskedNumber\": \"5235\",\n      \"limits\": [{\n        \"id\": \"sara-limit-1\",\n        \"channel\": \"ATM\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 3000,\n        \"maxAmount\": 10000,\n        \"minAmount\": 0\n      }, {\n        \"id\": \"sara-limit-2\",\n        \"channel\": \"ONLINE\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 2000,\n        \"maxAmount\": 10000,\n        \"minAmount\": 0\n      }]\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"elon-card-1\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"World Elite\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Elon\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2050\",\n        \"month\": \"12\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"5235\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"PENDING\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"PENDING\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"PENDING\",\n          \"stepDateTime\": \"2019-06-20T14:21:25.001Z\"\n        }]\n      },\n      \"limits\": [{\n        \"id\": \"elon-limit-1\",\n        \"channel\": \"ATM\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 500000,\n        \"maxAmount\": 100000,\n        \"minAmount\": 0\n      }, {\n        \"id\": \"elon-limit-2\",\n        \"channel\": \"ONLINE\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 1000000,\n        \"maxAmount\": 800000,\n        \"minAmount\": 10000\n      }]\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"john-card-1\",\n      \"brand\": \"visa\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"John Doe\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2030\",\n        \"month\": \"06\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"5827\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"limits\": [{\n        \"id\": \"john-limit-1\",\n        \"channel\": \"ATM\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 5000,\n        \"maxAmount\": 1000,\n        \"minAmount\": 0\n      }, {\n        \"id\": \"john-limit-2\",\n        \"channel\": \"ONLINE\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 20000,\n        \"maxAmount\": 9000,\n        \"minAmount\": 0\n      }]\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"kim-card-1\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Copper\",\n      \"status\": \"Inactive\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Kim Sook\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2027\",\n        \"month\": \"03\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"9292\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"delivery\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"transitSteps\": [{\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"holder\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"name\": \"name\"\n      },\n      \"type\": \"type\",\n      \"expiryDate\": {\n        \"month\": \"month\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"year\": \"year\"\n      },\n      \"maskedNumber\": \"maskedNumber\",\n      \"name\": \"name\",\n      \"subType\": \"subType\",\n      \"currency\": \"currency\",\n      \"id\": \"id\",\n      \"brand\": \"brand\",\n      \"replacement\": {\n        \"reason\": \"reason\",\n        \"replacingId\": \"replacingId\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"replacedById\": \"replacedById\",\n        \"status\": \"status\"\n      },\n      \"limits\": [{\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }, {\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }],\n      \"status\": \"status\"\n    }\n  }]\n}]);\nconst CardsHttpServiceGetCardsMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/cards\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"id\": \"sara-card-1\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold Card\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Sara Williams\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2022\",\n        \"month\": \"12\"\n      },\n      \"currency\": \"USD\",\n      \"maskedNumber\": \"5235\"\n    }, {\n      \"id\": \"sara-card-2\",\n      \"brand\": \"visa\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Green Card\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Sara Williams\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2022\",\n        \"month\": \"01\"\n      },\n      \"currency\": \"USD\",\n      \"maskedNumber\": \"5236\"\n    }, {\n      \"id\": \"sara-card-3\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold Card\",\n      \"status\": \"Inactive\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Sara Williams\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2022\",\n        \"month\": \"12\"\n      },\n      \"currency\": \"USD\",\n      \"maskedNumber\": \"5237\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2020-05-04T12:52:20.906+00:00\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"PENDING\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"PENDING\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"PENDING\"\n        }]\n      }\n    }, {\n      \"id\": \"sara-card-4\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Black Card\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Sara Williams\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2022\",\n        \"month\": \"12\"\n      },\n      \"currency\": \"USD\",\n      \"maskedNumber\": \"6235\"\n    }, {\n      \"id\": \"sara-card-5\",\n      \"brand\": \"visa\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Blue Card\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Sara Williams\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2022\",\n        \"month\": \"12\"\n      },\n      \"currency\": \"USD\",\n      \"maskedNumber\": \"6236\"\n    }]\n  }, {\n    status: 200,\n    body: [{\n      \"id\": \"elon-card-1\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"World Elite\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Elon\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2050\",\n        \"month\": \"12\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"5235\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"PENDING\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"PENDING\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"PENDING\",\n          \"stepDateTime\": \"2019-06-20T14:21:25.001Z\"\n        }]\n      }\n    }, {\n      \"id\": \"elon-card-2\",\n      \"brand\": \"visa\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Infinite Privilege\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Elon\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2045\",\n        \"month\": \"01\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"6782\"\n    }, {\n      \"id\": \"elon-card-3\",\n      \"brand\": \"american_express\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Reserve\",\n      \"status\": \"Cancelled\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"UnderReplacement\",\n        \"reason\": \"Lost\",\n        \"replacedById\": \"4\"\n      },\n      \"holder\": {\n        \"name\": \"Elon\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2048\",\n        \"month\": \"06\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"1262\"\n    }, {\n      \"id\": \"elon-card-4\",\n      \"brand\": \"american_express\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Reserve\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Elon\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2048\",\n        \"month\": \"07\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"1289\"\n    }, {\n      \"id\": \"elon-card-5\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Platinum\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Elon\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2050\",\n        \"month\": \"11\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"4627\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-20T14:32:20.906Z\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-20T15:12:20.906Z\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-21T11:28:25.001Z\"\n        }]\n      }\n    }, {\n      \"id\": \"elon-card-6\",\n      \"brand\": \"american_express\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Reserve\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"LOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Elon\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2047\",\n        \"month\": \"03\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"8291\"\n    }]\n  }, {\n    status: 200,\n    body: [{\n      \"id\": \"john-card-1\",\n      \"brand\": \"visa\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"John Doe\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2030\",\n        \"month\": \"06\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"5827\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"limits\": [{\n        \"id\": \"john-limit-1\",\n        \"channel\": \"ATM\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 3000,\n        \"maxAmount\": 9000,\n        \"minAmount\": 0\n      }, {\n        \"id\": \"john-limit-2\",\n        \"channel\": \"ONLINE\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 20000,\n        \"maxAmount\": 9000,\n        \"minAmount\": 0\n      }]\n    }, {\n      \"id\": \"john-card-2\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"John Doe\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2031\",\n        \"month\": \"02\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"8299\"\n    }]\n  }, {\n    status: 200,\n    body: [{\n      \"id\": \"kim-card-1\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Copper\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Kim Sook\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2027\",\n        \"month\": \"03\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"9292\"\n    }, {\n      \"id\": \"kim-card-2\",\n      \"brand\": \"visa\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Iron\",\n      \"status\": \"Inactive\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Kim Sook\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2010\",\n        \"month\": \"04\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"9494\"\n    }, {\n      \"id\": \"kim-card-3\",\n      \"brand\": \"visa\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Iron\",\n      \"status\": \"Expired\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Kim Sook\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2010\",\n        \"month\": \"04\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"9494\"\n    }]\n  }, {\n    status: 200,\n    body: []\n  }]\n}]);\nconst CardsHttpServiceRequestPinMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/cards/{id}/pin/request\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"delivery\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"transitSteps\": [{\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"holder\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"name\": \"name\"\n      },\n      \"type\": \"type\",\n      \"expiryDate\": {\n        \"month\": \"month\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"year\": \"year\"\n      },\n      \"maskedNumber\": \"maskedNumber\",\n      \"name\": \"name\",\n      \"subType\": \"subType\",\n      \"currency\": \"currency\",\n      \"id\": \"id\",\n      \"brand\": \"brand\",\n      \"replacement\": {\n        \"reason\": \"reason\",\n        \"replacingId\": \"replacingId\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"replacedById\": \"replacedById\",\n        \"status\": \"status\"\n      },\n      \"limits\": [{\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }, {\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }],\n      \"status\": \"status\"\n    }\n  }]\n}]);\nconst CardsHttpServiceRequestReplacementMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/cards/{id}/replacement\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"elon-card-1\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"World Elite\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"ReplacementRequested\",\n        \"reason\": \"Damaged\"\n      },\n      \"holder\": {\n        \"name\": \"Elon\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2050\",\n        \"month\": \"12\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"5235\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"PENDING\"\n        }]\n      }\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"john-card-1\",\n      \"brand\": \"visa\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold\",\n      \"status\": \"Inactive\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"ReplacementRequested\",\n        \"reason\": \"Stolen\"\n      },\n      \"holder\": {\n        \"name\": \"John Doe\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2030\",\n        \"month\": \"06\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"5827\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"SUCCESS\"\n        }]\n      }\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"kim-card-1\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Copper\",\n      \"status\": \"Inactive\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"ReplacementRequested\",\n        \"reason\": \"Lost\"\n      },\n      \"holder\": {\n        \"name\": \"Kim Sook\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2027\",\n        \"month\": \"03\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"9292\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"delivery\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"transitSteps\": [{\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"holder\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"name\": \"name\"\n      },\n      \"type\": \"type\",\n      \"expiryDate\": {\n        \"month\": \"month\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"year\": \"year\"\n      },\n      \"maskedNumber\": \"maskedNumber\",\n      \"name\": \"name\",\n      \"subType\": \"subType\",\n      \"currency\": \"currency\",\n      \"id\": \"id\",\n      \"brand\": \"brand\",\n      \"replacement\": {\n        \"reason\": \"reason\",\n        \"replacingId\": \"replacingId\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"replacedById\": \"replacedById\",\n        \"status\": \"status\"\n      },\n      \"limits\": [{\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }, {\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }],\n      \"status\": \"status\"\n    }\n  }]\n}]);\nconst CardsHttpServiceResetPinMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/cards/{id}/pin/reset\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"delivery\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"transitSteps\": [{\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"holder\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"name\": \"name\"\n      },\n      \"type\": \"type\",\n      \"expiryDate\": {\n        \"month\": \"month\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"year\": \"year\"\n      },\n      \"maskedNumber\": \"maskedNumber\",\n      \"name\": \"name\",\n      \"subType\": \"subType\",\n      \"currency\": \"currency\",\n      \"id\": \"id\",\n      \"brand\": \"brand\",\n      \"replacement\": {\n        \"reason\": \"reason\",\n        \"replacingId\": \"replacingId\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"replacedById\": \"replacedById\",\n        \"status\": \"status\"\n      },\n      \"limits\": [{\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }, {\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }],\n      \"status\": \"status\"\n    }\n  }]\n}]);\nconst CardsHttpServiceUpdateLockStatusMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/cards/{id}/lock-status\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"elon-card-6\",\n      \"brand\": \"american_express\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Reserve\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Elon\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2047\",\n        \"month\": \"03\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"8291\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"john-card-1\",\n      \"brand\": \"visa\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"LOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"John Doe\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2030\",\n        \"month\": \"06\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"5827\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"limits\": [{\n        \"id\": \"john-limit-1\",\n        \"channel\": \"ATM\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 5000,\n        \"maxAmount\": 1000,\n        \"minAmount\": 0\n      }, {\n        \"id\": \"john-limit-2\",\n        \"channel\": \"ONLINE\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 20000,\n        \"maxAmount\": 9000,\n        \"minAmount\": 0\n      }]\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"delivery\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"transitSteps\": [{\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"holder\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"name\": \"name\"\n      },\n      \"type\": \"type\",\n      \"expiryDate\": {\n        \"month\": \"month\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"year\": \"year\"\n      },\n      \"maskedNumber\": \"maskedNumber\",\n      \"name\": \"name\",\n      \"subType\": \"subType\",\n      \"currency\": \"currency\",\n      \"id\": \"id\",\n      \"brand\": \"brand\",\n      \"replacement\": {\n        \"reason\": \"reason\",\n        \"replacingId\": \"replacingId\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"replacedById\": \"replacedById\",\n        \"status\": \"status\"\n      },\n      \"limits\": [{\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }, {\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }],\n      \"status\": \"status\"\n    }\n  }]\n}]);\nconst CardsHttpServiceMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/cards/{id}/activation\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {\n      \"id\": \"sara-card-3\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold Card\",\n      \"status\": \"Inactive\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Sara Williams\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2022\",\n        \"month\": \"12\"\n      },\n      \"currency\": \"USD\",\n      \"maskedNumber\": \"5237\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2020-05-04T12:52:20.906+00:00\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"PENDING\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"PENDING\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"PENDING\"\n        }]\n      },\n      \"limits\": [{\n        \"id\": \"sara-limit-1\",\n        \"channel\": \"ATM\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 3000,\n        \"maxAmount\": 10000,\n        \"minAmount\": 0\n      }, {\n        \"id\": \"sara-limit-2\",\n        \"channel\": \"ONLINE\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 2000,\n        \"maxAmount\": 10000,\n        \"minAmount\": 0\n      }]\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"kim-card-2\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Copper\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Kim Sook\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2027\",\n        \"month\": \"03\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"9292\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"delivery\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"transitSteps\": [{\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"holder\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"name\": \"name\"\n      },\n      \"type\": \"type\",\n      \"expiryDate\": {\n        \"month\": \"month\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"year\": \"year\"\n      },\n      \"maskedNumber\": \"maskedNumber\",\n      \"name\": \"name\",\n      \"subType\": \"subType\",\n      \"currency\": \"currency\",\n      \"id\": \"id\",\n      \"brand\": \"brand\",\n      \"replacement\": {\n        \"reason\": \"reason\",\n        \"replacingId\": \"replacingId\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"replacedById\": \"replacedById\",\n        \"status\": \"status\"\n      },\n      \"limits\": [{\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }, {\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }],\n      \"status\": \"status\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/cards/{id}/limits\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"john-card-1\",\n      \"brand\": \"visa\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"John Doe\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2030\",\n        \"month\": \"06\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"5827\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"limits\": [{\n        \"id\": \"john-limit-1\",\n        \"channel\": \"ATM\",\n        \"frequency\": \"WEEKLY\",\n        \"amount\": 1000,\n        \"maxAmount\": 9000,\n        \"minAmount\": 0\n      }, {\n        \"id\": \"john-limit-2\",\n        \"channel\": \"ONLINE\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 20000,\n        \"maxAmount\": 9000,\n        \"minAmount\": 0\n      }]\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"delivery\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"transitSteps\": [{\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"holder\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"name\": \"name\"\n      },\n      \"type\": \"type\",\n      \"expiryDate\": {\n        \"month\": \"month\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"year\": \"year\"\n      },\n      \"maskedNumber\": \"maskedNumber\",\n      \"name\": \"name\",\n      \"subType\": \"subType\",\n      \"currency\": \"currency\",\n      \"id\": \"id\",\n      \"brand\": \"brand\",\n      \"replacement\": {\n        \"reason\": \"reason\",\n        \"replacingId\": \"replacingId\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"replacedById\": \"replacedById\",\n        \"status\": \"status\"\n      },\n      \"limits\": [{\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }, {\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }],\n      \"status\": \"status\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/cards/{id}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"id\": \"sara-card-1\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold Card\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Sara Williams\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2022\",\n        \"month\": \"12\"\n      },\n      \"currency\": \"USD\",\n      \"maskedNumber\": \"5235\",\n      \"limits\": [{\n        \"id\": \"sara-limit-1\",\n        \"channel\": \"ATM\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 3000,\n        \"maxAmount\": 10000,\n        \"minAmount\": 0\n      }, {\n        \"id\": \"sara-limit-2\",\n        \"channel\": \"ONLINE\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 2000,\n        \"maxAmount\": 10000,\n        \"minAmount\": 0\n      }]\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"elon-card-1\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"World Elite\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Elon\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2050\",\n        \"month\": \"12\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"5235\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"PENDING\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"PENDING\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"PENDING\",\n          \"stepDateTime\": \"2019-06-20T14:21:25.001Z\"\n        }]\n      },\n      \"limits\": [{\n        \"id\": \"elon-limit-1\",\n        \"channel\": \"ATM\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 500000,\n        \"maxAmount\": 100000,\n        \"minAmount\": 0\n      }, {\n        \"id\": \"elon-limit-2\",\n        \"channel\": \"ONLINE\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 1000000,\n        \"maxAmount\": 800000,\n        \"minAmount\": 10000\n      }]\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"john-card-1\",\n      \"brand\": \"visa\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"John Doe\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2030\",\n        \"month\": \"06\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"5827\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"limits\": [{\n        \"id\": \"john-limit-1\",\n        \"channel\": \"ATM\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 5000,\n        \"maxAmount\": 1000,\n        \"minAmount\": 0\n      }, {\n        \"id\": \"john-limit-2\",\n        \"channel\": \"ONLINE\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 20000,\n        \"maxAmount\": 9000,\n        \"minAmount\": 0\n      }]\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"kim-card-1\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Copper\",\n      \"status\": \"Inactive\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Kim Sook\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2027\",\n        \"month\": \"03\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"9292\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"delivery\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"transitSteps\": [{\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"holder\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"name\": \"name\"\n      },\n      \"type\": \"type\",\n      \"expiryDate\": {\n        \"month\": \"month\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"year\": \"year\"\n      },\n      \"maskedNumber\": \"maskedNumber\",\n      \"name\": \"name\",\n      \"subType\": \"subType\",\n      \"currency\": \"currency\",\n      \"id\": \"id\",\n      \"brand\": \"brand\",\n      \"replacement\": {\n        \"reason\": \"reason\",\n        \"replacingId\": \"replacingId\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"replacedById\": \"replacedById\",\n        \"status\": \"status\"\n      },\n      \"limits\": [{\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }, {\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }],\n      \"status\": \"status\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/cards\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"id\": \"sara-card-1\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold Card\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Sara Williams\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2022\",\n        \"month\": \"12\"\n      },\n      \"currency\": \"USD\",\n      \"maskedNumber\": \"5235\"\n    }, {\n      \"id\": \"sara-card-2\",\n      \"brand\": \"visa\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Green Card\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Sara Williams\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2022\",\n        \"month\": \"01\"\n      },\n      \"currency\": \"USD\",\n      \"maskedNumber\": \"5236\"\n    }, {\n      \"id\": \"sara-card-3\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold Card\",\n      \"status\": \"Inactive\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Sara Williams\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2022\",\n        \"month\": \"12\"\n      },\n      \"currency\": \"USD\",\n      \"maskedNumber\": \"5237\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2020-05-04T12:52:20.906+00:00\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"PENDING\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"PENDING\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"PENDING\"\n        }]\n      }\n    }, {\n      \"id\": \"sara-card-4\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Black Card\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Sara Williams\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2022\",\n        \"month\": \"12\"\n      },\n      \"currency\": \"USD\",\n      \"maskedNumber\": \"6235\"\n    }, {\n      \"id\": \"sara-card-5\",\n      \"brand\": \"visa\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Blue Card\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Sara Williams\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2022\",\n        \"month\": \"12\"\n      },\n      \"currency\": \"USD\",\n      \"maskedNumber\": \"6236\"\n    }]\n  }, {\n    status: 200,\n    body: [{\n      \"id\": \"elon-card-1\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"World Elite\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Elon\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2050\",\n        \"month\": \"12\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"5235\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"PENDING\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"PENDING\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"PENDING\",\n          \"stepDateTime\": \"2019-06-20T14:21:25.001Z\"\n        }]\n      }\n    }, {\n      \"id\": \"elon-card-2\",\n      \"brand\": \"visa\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Infinite Privilege\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Elon\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2045\",\n        \"month\": \"01\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"6782\"\n    }, {\n      \"id\": \"elon-card-3\",\n      \"brand\": \"american_express\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Reserve\",\n      \"status\": \"Cancelled\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"UnderReplacement\",\n        \"reason\": \"Lost\",\n        \"replacedById\": \"4\"\n      },\n      \"holder\": {\n        \"name\": \"Elon\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2048\",\n        \"month\": \"06\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"1262\"\n    }, {\n      \"id\": \"elon-card-4\",\n      \"brand\": \"american_express\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Reserve\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Elon\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2048\",\n        \"month\": \"07\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"1289\"\n    }, {\n      \"id\": \"elon-card-5\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Platinum\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Elon\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2050\",\n        \"month\": \"11\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"4627\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-20T14:32:20.906Z\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-20T15:12:20.906Z\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-21T11:28:25.001Z\"\n        }]\n      }\n    }, {\n      \"id\": \"elon-card-6\",\n      \"brand\": \"american_express\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Reserve\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"LOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Elon\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2047\",\n        \"month\": \"03\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"8291\"\n    }]\n  }, {\n    status: 200,\n    body: [{\n      \"id\": \"john-card-1\",\n      \"brand\": \"visa\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"John Doe\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2030\",\n        \"month\": \"06\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"5827\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"limits\": [{\n        \"id\": \"john-limit-1\",\n        \"channel\": \"ATM\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 3000,\n        \"maxAmount\": 9000,\n        \"minAmount\": 0\n      }, {\n        \"id\": \"john-limit-2\",\n        \"channel\": \"ONLINE\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 20000,\n        \"maxAmount\": 9000,\n        \"minAmount\": 0\n      }]\n    }, {\n      \"id\": \"john-card-2\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"John Doe\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2031\",\n        \"month\": \"02\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"8299\"\n    }]\n  }, {\n    status: 200,\n    body: [{\n      \"id\": \"kim-card-1\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Copper\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Kim Sook\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2027\",\n        \"month\": \"03\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"9292\"\n    }, {\n      \"id\": \"kim-card-2\",\n      \"brand\": \"visa\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Iron\",\n      \"status\": \"Inactive\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Kim Sook\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2010\",\n        \"month\": \"04\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"9494\"\n    }, {\n      \"id\": \"kim-card-3\",\n      \"brand\": \"visa\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Iron\",\n      \"status\": \"Expired\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Kim Sook\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2010\",\n        \"month\": \"04\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"9494\"\n    }]\n  }, {\n    status: 200,\n    body: []\n  }]\n}, {\n  urlPattern: \"/client-api/v2/cards/{id}/pin/request\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"delivery\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"transitSteps\": [{\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"holder\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"name\": \"name\"\n      },\n      \"type\": \"type\",\n      \"expiryDate\": {\n        \"month\": \"month\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"year\": \"year\"\n      },\n      \"maskedNumber\": \"maskedNumber\",\n      \"name\": \"name\",\n      \"subType\": \"subType\",\n      \"currency\": \"currency\",\n      \"id\": \"id\",\n      \"brand\": \"brand\",\n      \"replacement\": {\n        \"reason\": \"reason\",\n        \"replacingId\": \"replacingId\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"replacedById\": \"replacedById\",\n        \"status\": \"status\"\n      },\n      \"limits\": [{\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }, {\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }],\n      \"status\": \"status\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/cards/{id}/replacement\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"elon-card-1\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"World Elite\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"ReplacementRequested\",\n        \"reason\": \"Damaged\"\n      },\n      \"holder\": {\n        \"name\": \"Elon\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2050\",\n        \"month\": \"12\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"5235\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"PENDING\"\n        }]\n      }\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"john-card-1\",\n      \"brand\": \"visa\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold\",\n      \"status\": \"Inactive\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"ReplacementRequested\",\n        \"reason\": \"Stolen\"\n      },\n      \"holder\": {\n        \"name\": \"John Doe\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2030\",\n        \"month\": \"06\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"5827\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"SUCCESS\"\n        }]\n      }\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"kim-card-1\",\n      \"brand\": \"mastercard\",\n      \"type\": \"Debit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Copper\",\n      \"status\": \"Inactive\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"ReplacementRequested\",\n        \"reason\": \"Lost\"\n      },\n      \"holder\": {\n        \"name\": \"Kim Sook\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2027\",\n        \"month\": \"03\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"9292\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"delivery\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"transitSteps\": [{\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"holder\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"name\": \"name\"\n      },\n      \"type\": \"type\",\n      \"expiryDate\": {\n        \"month\": \"month\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"year\": \"year\"\n      },\n      \"maskedNumber\": \"maskedNumber\",\n      \"name\": \"name\",\n      \"subType\": \"subType\",\n      \"currency\": \"currency\",\n      \"id\": \"id\",\n      \"brand\": \"brand\",\n      \"replacement\": {\n        \"reason\": \"reason\",\n        \"replacingId\": \"replacingId\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"replacedById\": \"replacedById\",\n        \"status\": \"status\"\n      },\n      \"limits\": [{\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }, {\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }],\n      \"status\": \"status\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/cards/{id}/pin/reset\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"delivery\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"transitSteps\": [{\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"holder\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"name\": \"name\"\n      },\n      \"type\": \"type\",\n      \"expiryDate\": {\n        \"month\": \"month\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"year\": \"year\"\n      },\n      \"maskedNumber\": \"maskedNumber\",\n      \"name\": \"name\",\n      \"subType\": \"subType\",\n      \"currency\": \"currency\",\n      \"id\": \"id\",\n      \"brand\": \"brand\",\n      \"replacement\": {\n        \"reason\": \"reason\",\n        \"replacingId\": \"replacingId\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"replacedById\": \"replacedById\",\n        \"status\": \"status\"\n      },\n      \"limits\": [{\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }, {\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }],\n      \"status\": \"status\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/cards/{id}/lock-status\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"elon-card-6\",\n      \"brand\": \"american_express\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Reserve\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"UNLOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"Elon\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2047\",\n        \"month\": \"03\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"8291\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"john-card-1\",\n      \"brand\": \"visa\",\n      \"type\": \"Credit\",\n      \"subType\": \"ATM\",\n      \"name\": \"Gold\",\n      \"status\": \"Active\",\n      \"lockStatus\": \"LOCKED\",\n      \"replacement\": {\n        \"status\": \"NotUnderReplacement\"\n      },\n      \"holder\": {\n        \"name\": \"John Doe\"\n      },\n      \"expiryDate\": {\n        \"year\": \"2030\",\n        \"month\": \"06\"\n      },\n      \"currency\": \"EUR\",\n      \"maskedNumber\": \"5827\",\n      \"delivery\": {\n        \"transitSteps\": [{\n          \"name\": \"Ordered\",\n          \"status\": \"SUCCESS\",\n          \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n        }, {\n          \"name\": \"Processed\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"In Transit\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"name\": \"Delivered\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"limits\": [{\n        \"id\": \"john-limit-1\",\n        \"channel\": \"ATM\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 5000,\n        \"maxAmount\": 1000,\n        \"minAmount\": 0\n      }, {\n        \"id\": \"john-limit-2\",\n        \"channel\": \"ONLINE\",\n        \"frequency\": \"DAILY\",\n        \"amount\": 20000,\n        \"maxAmount\": 9000,\n        \"minAmount\": 0\n      }]\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"delivery\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"transitSteps\": [{\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }, {\n          \"additions\": {\n            \"key\": \"additions\"\n          },\n          \"name\": \"name\",\n          \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n          \"status\": \"SUCCESS\"\n        }]\n      },\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"holder\": {\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"name\": \"name\"\n      },\n      \"type\": \"type\",\n      \"expiryDate\": {\n        \"month\": \"month\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"year\": \"year\"\n      },\n      \"maskedNumber\": \"maskedNumber\",\n      \"name\": \"name\",\n      \"subType\": \"subType\",\n      \"currency\": \"currency\",\n      \"id\": \"id\",\n      \"brand\": \"brand\",\n      \"replacement\": {\n        \"reason\": \"reason\",\n        \"replacingId\": \"replacingId\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"replacedById\": \"replacedById\",\n        \"status\": \"status\"\n      },\n      \"limits\": [{\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }, {\n        \"minAmount\": 1.4658129805029452,\n        \"amount\": 0.8008281904610115,\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"channel\": \"channel\",\n        \"id\": \"id\",\n        \"maxAmount\": 6.027456183070403,\n        \"frequency\": \"frequency\"\n      }],\n      \"status\": \"status\"\n    }\n  }]\n}]);\n\nclass TravelNoticesHttpService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new CardsConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  createTravelNotice(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _travelNotice = requestParameters[\"travelNotice\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/travel-notices`, _travelNotice, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  createTravelNoticeUrl(requestParameters) {\n    const _travelNotice = requestParameters[\"travelNotice\"];\n    return `${this.configuration.basePath}/client-api/v2/travel-notices`;\n  }\n\n  deleteTravelNoticeById(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling deleteTravelNoticeById.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/travel-notices/${encodeURIComponent(String(_id))}`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  deleteTravelNoticeByIdUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling deleteTravelNoticeById.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/travel-notices/${encodeURIComponent(String(_id))}`;\n  }\n\n  getTravelNoticeById(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling getTravelNoticeById.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/travel-notices/${encodeURIComponent(String(_id))}`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getTravelNoticeByIdUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling getTravelNoticeById.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/travel-notices/${encodeURIComponent(String(_id))}`;\n  }\n\n  getTravelNotices(observe = 'body', reportProgress = false, options) {\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/travel-notices`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getTravelNoticesUrl() {\n    return `${this.configuration.basePath}/client-api/v2/travel-notices`;\n  }\n\n  updateTravelNotice(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling updateTravelNotice.');\n    }\n\n    const _travelNotice = requestParameters[\"travelNotice\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/travel-notices/${encodeURIComponent(String(_id))}`, _travelNotice, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  updateTravelNoticeUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling updateTravelNotice.');\n    }\n\n    const _travelNotice = requestParameters[\"travelNotice\"];\n    return `${this.configuration.basePath}/client-api/v2/travel-notices/${encodeURIComponent(String(_id))}`;\n  }\n\n}\n\nTravelNoticesHttpService.ɵfac = function TravelNoticesHttpService_Factory(t) {\n  return new (t || TravelNoticesHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(CARDS_BASE_PATH, 8), i0.ɵɵinject(CardsConfiguration, 8));\n};\n\nTravelNoticesHttpService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TravelNoticesHttpService,\n  factory: TravelNoticesHttpService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TravelNoticesHttpService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CARDS_BASE_PATH]\n      }]\n    }, {\n      type: CardsConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst TravelNoticesHttpServiceCreateTravelNoticeMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/travel-notices\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {\n      \"id\": \"sara-travel-notice-1\",\n      \"cardIds\": [\"sara-card-1\"],\n      \"departureDate\": \"2020-05-06\",\n      \"arrivalDate\": \"2020-05-10\",\n      \"destinations\": [{\n        \"country\": \"USA\",\n        \"region\": \"US-TX\"\n      }]\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/requestBody/content/application~1json/example\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"john-travel-notice-1\",\n      \"cardIds\": [\"john-card-1\", \"john-card-2\"],\n      \"departureDate\": \"2020-01-09\",\n      \"arrivalDate\": \"2020-01-18\",\n      \"destinations\": [{\n        \"country\": \"NL\"\n      }],\n      \"contact\": {\n        \"phoneNumber\": \"+1 646 432 3000\"\n      }\n    }\n  }, {\n    status: 200,\n    body: {\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"destinations\": [{\n        \"country\": \"country\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"region\": \"region\"\n      }, {\n        \"country\": \"country\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"region\": \"region\"\n      }],\n      \"contact\": {\n        \"phoneNumber\": \"phoneNumber\",\n        \"additions\": {\n          \"key\": \"additions\"\n        }\n      },\n      \"id\": \"id\",\n      \"departureDate\": \"departureDate\",\n      \"cardIds\": [\"cardIds\", \"cardIds\"],\n      \"arrivalDate\": \"arrivalDate\"\n    }\n  }]\n}]);\nconst TravelNoticesHttpServiceDeleteTravelNoticeByIdMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/travel-notices/{id}\",\n  method: \"DELETE\",\n  responses: [{\n    status: 204,\n    body: \"\"\n  }]\n}]);\nconst TravelNoticesHttpServiceGetTravelNoticeByIdMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/travel-notices/{id}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/sara/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/requestBody/content/application~1json/example\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/john/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"destinations\": [{\n        \"country\": \"country\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"region\": \"region\"\n      }, {\n        \"country\": \"country\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"region\": \"region\"\n      }],\n      \"contact\": {\n        \"phoneNumber\": \"phoneNumber\",\n        \"additions\": {\n          \"key\": \"additions\"\n        }\n      },\n      \"id\": \"id\",\n      \"departureDate\": \"departureDate\",\n      \"cardIds\": [\"cardIds\", \"cardIds\"],\n      \"arrivalDate\": \"arrivalDate\"\n    }\n  }]\n}]);\nconst TravelNoticesHttpServiceGetTravelNoticesMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/travel-notices\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"id\": \"sara-travel-notice-1\",\n      \"cardIds\": [\"sara-card-1\", \"sara-card-4\"],\n      \"departureDate\": \"2020-01-09\",\n      \"arrivalDate\": \"2020-01-18\",\n      \"destinations\": [{\n        \"country\": \"MEX\"\n      }, {\n        \"country\": \"USA\",\n        \"region\": \"US-TX\"\n      }]\n    }, {\n      \"id\": \"sara-travel-notice-2\",\n      \"cardIds\": [\"sara-card-1\", \"sara-card-2\", \"sara-card-4\", \"sara-card-5\"],\n      \"departureDate\": \"2019-12-10\",\n      \"arrivalDate\": \"2019-12-23\",\n      \"destinations\": [{\n        \"country\": \"JPN\"\n      }, {\n        \"country\": \"USA\",\n        \"region\": \"US-CA\"\n      }],\n      \"contact\": {\n        \"phoneNumber\": \"+1 646 432 3000\"\n      }\n    }]\n  }, {\n    status: 200,\n    body: [{\n      \"id\": \"elon-travel-notice-1\",\n      \"cardIds\": [\"elon-card-1\"],\n      \"departureDate\": \"2020-05-06\",\n      \"arrivalDate\": \"2020-05-10\",\n      \"destinations\": [{\n        \"country\": \"USA\",\n        \"region\": \"US-TX\"\n      }, {\n        \"country\": \"MEX\"\n      }]\n    }, {\n      \"id\": \"elon-travel-notice-2\",\n      \"cardIds\": [\"elon-card-1\", \"elon-card-2\", \"elon-card-3\", \"elon-card-4\"],\n      \"departureDate\": \"2019-12-10\",\n      \"arrivalDate\": \"2019-12-23\",\n      \"destinations\": [{\n        \"country\": \"JPN\"\n      }, {\n        \"country\": \"USA\",\n        \"region\": \"US-CA\"\n      }],\n      \"contact\": {\n        \"phoneNumber\": \"+1 646 432 3000\"\n      }\n    }, {\n      \"id\": \"elon-travel-notice-3\",\n      \"cardIds\": [\"elon-card-4\"],\n      \"departureDate\": \"2019-07-23\",\n      \"arrivalDate\": \"2020-08-11\",\n      \"destinations\": [{\n        \"country\": \"KHM\"\n      }, {\n        \"country\": \"KOR\"\n      }, {\n        \"country\": \"IND\"\n      }],\n      \"contact\": {\n        \"phoneNumber\": \"+1 646 432 3000\"\n      }\n    }]\n  }, {\n    status: 200,\n    body: [{\n      \"id\": \"john-travel-notice-1\",\n      \"cardIds\": [\"john-card-1\", \"john-card-2\"],\n      \"departureDate\": \"2020-01-09\",\n      \"arrivalDate\": \"2020-01-18\",\n      \"destinations\": [{\n        \"country\": \"NL\"\n      }],\n      \"contact\": {\n        \"phoneNumber\": \"+1 646 432 3000\"\n      }\n    }]\n  }, {\n    status: 200,\n    body: []\n  }, {\n    status: 200,\n    body: []\n  }]\n}]);\nconst TravelNoticesHttpServiceUpdateTravelNoticeMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/travel-notices/{id}\",\n  method: \"PUT\",\n  responses: [{\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/sara/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"elon-travel-notice-1\",\n      \"cardIds\": [\"elon-card-1\", \"elon-card-6\"],\n      \"departureDate\": \"2020-05-06\",\n      \"arrivalDate\": \"2020-05-10\",\n      \"destinations\": [{\n        \"country\": \"USA\",\n        \"region\": \"US-TX\"\n      }, {\n        \"country\": \"MEX\"\n      }],\n      \"contact\": {\n        \"phoneNumber\": \"Other_Number\"\n      }\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/john/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"destinations\": [{\n        \"country\": \"country\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"region\": \"region\"\n      }, {\n        \"country\": \"country\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"region\": \"region\"\n      }],\n      \"contact\": {\n        \"phoneNumber\": \"phoneNumber\",\n        \"additions\": {\n          \"key\": \"additions\"\n        }\n      },\n      \"id\": \"id\",\n      \"departureDate\": \"departureDate\",\n      \"cardIds\": [\"cardIds\", \"cardIds\"],\n      \"arrivalDate\": \"arrivalDate\"\n    }\n  }]\n}]);\nconst TravelNoticesHttpServiceMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/travel-notices\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {\n      \"id\": \"sara-travel-notice-1\",\n      \"cardIds\": [\"sara-card-1\"],\n      \"departureDate\": \"2020-05-06\",\n      \"arrivalDate\": \"2020-05-10\",\n      \"destinations\": [{\n        \"country\": \"USA\",\n        \"region\": \"US-TX\"\n      }]\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/requestBody/content/application~1json/example\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"john-travel-notice-1\",\n      \"cardIds\": [\"john-card-1\", \"john-card-2\"],\n      \"departureDate\": \"2020-01-09\",\n      \"arrivalDate\": \"2020-01-18\",\n      \"destinations\": [{\n        \"country\": \"NL\"\n      }],\n      \"contact\": {\n        \"phoneNumber\": \"+1 646 432 3000\"\n      }\n    }\n  }, {\n    status: 200,\n    body: {\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"destinations\": [{\n        \"country\": \"country\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"region\": \"region\"\n      }, {\n        \"country\": \"country\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"region\": \"region\"\n      }],\n      \"contact\": {\n        \"phoneNumber\": \"phoneNumber\",\n        \"additions\": {\n          \"key\": \"additions\"\n        }\n      },\n      \"id\": \"id\",\n      \"departureDate\": \"departureDate\",\n      \"cardIds\": [\"cardIds\", \"cardIds\"],\n      \"arrivalDate\": \"arrivalDate\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/travel-notices/{id}\",\n  method: \"DELETE\",\n  responses: [{\n    status: 204,\n    body: \"\"\n  }]\n}, {\n  urlPattern: \"/client-api/v2/travel-notices/{id}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/sara/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/requestBody/content/application~1json/example\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/john/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"destinations\": [{\n        \"country\": \"country\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"region\": \"region\"\n      }, {\n        \"country\": \"country\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"region\": \"region\"\n      }],\n      \"contact\": {\n        \"phoneNumber\": \"phoneNumber\",\n        \"additions\": {\n          \"key\": \"additions\"\n        }\n      },\n      \"id\": \"id\",\n      \"departureDate\": \"departureDate\",\n      \"cardIds\": [\"cardIds\", \"cardIds\"],\n      \"arrivalDate\": \"arrivalDate\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/travel-notices\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"id\": \"sara-travel-notice-1\",\n      \"cardIds\": [\"sara-card-1\", \"sara-card-4\"],\n      \"departureDate\": \"2020-01-09\",\n      \"arrivalDate\": \"2020-01-18\",\n      \"destinations\": [{\n        \"country\": \"MEX\"\n      }, {\n        \"country\": \"USA\",\n        \"region\": \"US-TX\"\n      }]\n    }, {\n      \"id\": \"sara-travel-notice-2\",\n      \"cardIds\": [\"sara-card-1\", \"sara-card-2\", \"sara-card-4\", \"sara-card-5\"],\n      \"departureDate\": \"2019-12-10\",\n      \"arrivalDate\": \"2019-12-23\",\n      \"destinations\": [{\n        \"country\": \"JPN\"\n      }, {\n        \"country\": \"USA\",\n        \"region\": \"US-CA\"\n      }],\n      \"contact\": {\n        \"phoneNumber\": \"+1 646 432 3000\"\n      }\n    }]\n  }, {\n    status: 200,\n    body: [{\n      \"id\": \"elon-travel-notice-1\",\n      \"cardIds\": [\"elon-card-1\"],\n      \"departureDate\": \"2020-05-06\",\n      \"arrivalDate\": \"2020-05-10\",\n      \"destinations\": [{\n        \"country\": \"USA\",\n        \"region\": \"US-TX\"\n      }, {\n        \"country\": \"MEX\"\n      }]\n    }, {\n      \"id\": \"elon-travel-notice-2\",\n      \"cardIds\": [\"elon-card-1\", \"elon-card-2\", \"elon-card-3\", \"elon-card-4\"],\n      \"departureDate\": \"2019-12-10\",\n      \"arrivalDate\": \"2019-12-23\",\n      \"destinations\": [{\n        \"country\": \"JPN\"\n      }, {\n        \"country\": \"USA\",\n        \"region\": \"US-CA\"\n      }],\n      \"contact\": {\n        \"phoneNumber\": \"+1 646 432 3000\"\n      }\n    }, {\n      \"id\": \"elon-travel-notice-3\",\n      \"cardIds\": [\"elon-card-4\"],\n      \"departureDate\": \"2019-07-23\",\n      \"arrivalDate\": \"2020-08-11\",\n      \"destinations\": [{\n        \"country\": \"KHM\"\n      }, {\n        \"country\": \"KOR\"\n      }, {\n        \"country\": \"IND\"\n      }],\n      \"contact\": {\n        \"phoneNumber\": \"+1 646 432 3000\"\n      }\n    }]\n  }, {\n    status: 200,\n    body: [{\n      \"id\": \"john-travel-notice-1\",\n      \"cardIds\": [\"john-card-1\", \"john-card-2\"],\n      \"departureDate\": \"2020-01-09\",\n      \"arrivalDate\": \"2020-01-18\",\n      \"destinations\": [{\n        \"country\": \"NL\"\n      }],\n      \"contact\": {\n        \"phoneNumber\": \"+1 646 432 3000\"\n      }\n    }]\n  }, {\n    status: 200,\n    body: []\n  }, {\n    status: 200,\n    body: []\n  }]\n}, {\n  urlPattern: \"/client-api/v2/travel-notices/{id}\",\n  method: \"PUT\",\n  responses: [{\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/sara/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"id\": \"elon-travel-notice-1\",\n      \"cardIds\": [\"elon-card-1\", \"elon-card-6\"],\n      \"departureDate\": \"2020-05-06\",\n      \"arrivalDate\": \"2020-05-10\",\n      \"destinations\": [{\n        \"country\": \"USA\",\n        \"region\": \"US-TX\"\n      }, {\n        \"country\": \"MEX\"\n      }],\n      \"contact\": {\n        \"phoneNumber\": \"Other_Number\"\n      }\n    }\n  }, {\n    status: 200,\n    body: {\n      \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/john/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"additions\": {\n        \"key\": \"additions\"\n      },\n      \"destinations\": [{\n        \"country\": \"country\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"region\": \"region\"\n      }, {\n        \"country\": \"country\",\n        \"additions\": {\n          \"key\": \"additions\"\n        },\n        \"region\": \"region\"\n      }],\n      \"contact\": {\n        \"phoneNumber\": \"phoneNumber\",\n        \"additions\": {\n          \"key\": \"additions\"\n        }\n      },\n      \"id\": \"id\",\n      \"departureDate\": \"departureDate\",\n      \"cardIds\": [\"cardIds\", \"cardIds\"],\n      \"arrivalDate\": \"arrivalDate\"\n    }\n  }]\n}]);\nexport { CARDS_BASE_PATH, COLLECTION_FORMATS, CONFIG_TOKEN, CardsApiModule, CardsConfiguration, CardsHttpService, CardsHttpServiceActivateMocksProvider, CardsHttpServiceChangeLimitsMocksProvider, CardsHttpServiceGetCardByIdMocksProvider, CardsHttpServiceGetCardsMocksProvider, CardsHttpServiceMocksProvider, CardsHttpServiceRequestPinMocksProvider, CardsHttpServiceRequestReplacementMocksProvider, CardsHttpServiceResetPinMocksProvider, CardsHttpServiceUpdateLockStatusMocksProvider, DeliveryTransitStep, LockStatus, TravelNoticesHttpService, TravelNoticesHttpServiceCreateTravelNoticeMocksProvider, TravelNoticesHttpServiceDeleteTravelNoticeByIdMocksProvider, TravelNoticesHttpServiceGetTravelNoticeByIdMocksProvider, TravelNoticesHttpServiceGetTravelNoticesMocksProvider, TravelNoticesHttpServiceMocksProvider, TravelNoticesHttpServiceUpdateTravelNoticeMocksProvider };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/cards-http-ang/fesm2015/backbase-cards-http-ang.js"],"names":["i0","InjectionToken","NgModule","Optional","SkipSelf","Injectable","Inject","i1","HttpHeaders","HttpParams","i2","createMocks","DeliveryTransitStep","StatusEnum","SUCCESS","FAILED","PENDING","LockStatus","LOCKED","UNLOCKED","CARDS_BASE_PATH","COLLECTION_FORMATS","CardsConfiguration","constructor","configurationParameters","apiKeys","username","password","accessToken","basePath","withCredentials","encoder","credentials","selectHeaderContentType","contentTypes","length","undefined","type","find","x","isJsonMime","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","lookupCredential","key","value","CONFIG_TOKEN","CardsApiModule","parentModule","http","dataModulesManager","config","Error","setModuleConfig","apiRoot","servicePath","headers","forRoot","configurationFactory","ngModule","providers","provide","useFactory","ɵfac","HttpClient","DataModulesManager","ɵmod","ɵinj","args","imports","declarations","exports","decorators","CustomHttpParameterCodec","encodeKey","k","encodeURIComponent","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","CardsHttpService","httpClient","configuration","defaultHeaders","addToHttpParams","httpParams","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","append","toISOString","substr","Object","keys","activate","requestParameters","observe","reportProgress","options","_id","_activatePost","httpHeaderAcceptSelected","httpHeaderAccept","httpHeaderAccepts","set","consumes","httpContentTypeSelected","responseType","startsWith","post","String","activateUrl","changeLimits","_changeLimitsPostItem","changeLimitsUrl","getCardById","get","getCardByIdUrl","getCards","_ids","_status","_types","queryParameters","element","params","getCardsUrl","queryString","toString","requestPin","_requestPinPost","requestPinUrl","requestReplacement","_requestReplacementPost","requestReplacementUrl","resetPin","_resetPinPost","resetPinUrl","updateLockStatus","_lockStatusPost","updateLockStatusUrl","ɵprov","providedIn","CardsHttpServiceActivateMocksProvider","urlPattern","method","responses","status","body","CardsHttpServiceChangeLimitsMocksProvider","CardsHttpServiceGetCardByIdMocksProvider","CardsHttpServiceGetCardsMocksProvider","CardsHttpServiceRequestPinMocksProvider","CardsHttpServiceRequestReplacementMocksProvider","CardsHttpServiceResetPinMocksProvider","CardsHttpServiceUpdateLockStatusMocksProvider","CardsHttpServiceMocksProvider","TravelNoticesHttpService","createTravelNotice","_travelNotice","createTravelNoticeUrl","deleteTravelNoticeById","delete","deleteTravelNoticeByIdUrl","getTravelNoticeById","getTravelNoticeByIdUrl","getTravelNotices","getTravelNoticesUrl","updateTravelNotice","put","updateTravelNoticeUrl","TravelNoticesHttpServiceCreateTravelNoticeMocksProvider","TravelNoticesHttpServiceDeleteTravelNoticeByIdMocksProvider","TravelNoticesHttpServiceGetTravelNoticeByIdMocksProvider","TravelNoticesHttpServiceGetTravelNoticesMocksProvider","TravelNoticesHttpServiceUpdateTravelNoticeMocksProvider","TravelNoticesHttpServiceMocksProvider"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i2 from '@backbase/foundation-ang/data-http';\nimport { createMocks } from '@backbase/foundation-ang/data-http';\n\nvar DeliveryTransitStep;\n(function (DeliveryTransitStep) {\n    DeliveryTransitStep.StatusEnum = {\n        SUCCESS: 'SUCCESS',\n        FAILED: 'FAILED',\n        PENDING: 'PENDING'\n    };\n})(DeliveryTransitStep || (DeliveryTransitStep = {}));\n\nconst LockStatus = {\n    LOCKED: 'LOCKED',\n    UNLOCKED: 'UNLOCKED'\n};\n\nconst CARDS_BASE_PATH = new InjectionToken('CARDS_BASE_PATH');\nconst COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n};\n\nclass CardsConfiguration {\n    constructor(configurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n    selectHeaderContentType(contentTypes) {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n        const type = contentTypes.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n    selectHeaderAccept(accepts) {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n        const type = accepts.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n    isJsonMime(mime) {\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n    lookupCredential(key) {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\nconst CONFIG_TOKEN = new InjectionToken('api-data-module CardsConfiguration');\n\nclass CardsApiModule {\n    constructor(parentModule, http, dataModulesManager, config) {\n        if (parentModule) {\n            throw new Error('CardsApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n                'See also https://github.com/angular/angular/issues/20575');\n        }\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n    static forRoot(configurationFactory) {\n        return {\n            ngModule: CardsApiModule,\n            providers: [{ provide: CardsConfiguration, useFactory: configurationFactory }]\n        };\n    }\n}\nCardsApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: CardsApiModule, deps: [{ token: CardsApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: CardsConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });\nCardsApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: CardsApiModule });\nCardsApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: CardsApiModule, providers: [], imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: CardsApiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [],\n                    declarations: [],\n                    exports: [],\n                    providers: []\n                }]\n        }], ctorParameters: function () { return [{ type: CardsApiModule, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DataModulesManager, decorators: [{\n                    type: Optional\n                }] }, { type: CardsConfiguration }]; } });\n\nclass CustomHttpParameterCodec {\n    encodeKey(k) {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v) {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k) {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v) {\n        return decodeURIComponent(v);\n    }\n}\n\nclass CardsHttpService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new CardsConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    activate(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling activate.');\n        }\n        const _activatePost = requestParameters[\"activatePost\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/activation`, _activatePost, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    activateUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling activate.');\n        }\n        const _activatePost = requestParameters[\"activatePost\"];\n        return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/activation`;\n    }\n    changeLimits(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling changeLimits.');\n        }\n        const _changeLimitsPostItem = requestParameters[\"changeLimitsPostItem\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/limits`, _changeLimitsPostItem, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    changeLimitsUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling changeLimits.');\n        }\n        const _changeLimitsPostItem = requestParameters[\"changeLimitsPostItem\"];\n        return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/limits`;\n    }\n    getCardById(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getCardById.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getCardByIdUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getCardById.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}`;\n    }\n    getCards(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _ids = requestParameters[\"ids\"];\n        const _status = requestParameters[\"status\"];\n        const _types = requestParameters[\"types\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_ids) {\n            _ids.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');\n            });\n        }\n        if (_status) {\n            _status.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters, element, 'status');\n            });\n        }\n        if (_types) {\n            _types.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters, element, 'types');\n            });\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/cards`, {\n            params: queryParameters,\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getCardsUrl(requestParameters) {\n        const _ids = requestParameters[\"ids\"];\n        const _status = requestParameters[\"status\"];\n        const _types = requestParameters[\"types\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_ids) {\n            _ids.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');\n            });\n        }\n        if (_status) {\n            _status.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters, element, 'status');\n            });\n        }\n        if (_types) {\n            _types.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters, element, 'types');\n            });\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v2/cards${queryString ? `?${queryString}` : ''}`;\n    }\n    requestPin(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling requestPin.');\n        }\n        const _requestPinPost = requestParameters[\"requestPinPost\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/pin/request`, _requestPinPost, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    requestPinUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling requestPin.');\n        }\n        const _requestPinPost = requestParameters[\"requestPinPost\"];\n        return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/pin/request`;\n    }\n    requestReplacement(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling requestReplacement.');\n        }\n        const _requestReplacementPost = requestParameters[\"requestReplacementPost\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/replacement`, _requestReplacementPost, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    requestReplacementUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling requestReplacement.');\n        }\n        const _requestReplacementPost = requestParameters[\"requestReplacementPost\"];\n        return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/replacement`;\n    }\n    resetPin(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling resetPin.');\n        }\n        const _resetPinPost = requestParameters[\"resetPinPost\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/pin/reset`, _resetPinPost, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    resetPinUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling resetPin.');\n        }\n        const _resetPinPost = requestParameters[\"resetPinPost\"];\n        return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/pin/reset`;\n    }\n    updateLockStatus(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateLockStatus.');\n        }\n        const _lockStatusPost = requestParameters[\"lockStatusPost\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/lock-status`, _lockStatusPost, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    updateLockStatusUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateLockStatus.');\n        }\n        const _lockStatusPost = requestParameters[\"lockStatusPost\"];\n        return `${this.configuration.basePath}/client-api/v2/cards/${encodeURIComponent(String(_id))}/lock-status`;\n    }\n}\nCardsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: CardsHttpService, deps: [{ token: i1.HttpClient }, { token: CARDS_BASE_PATH, optional: true }, { token: CardsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nCardsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: CardsHttpService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: CardsHttpService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CARDS_BASE_PATH]\n                }] }, { type: CardsConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst CardsHttpServiceActivateMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/cards/{id}/activation\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"id\": \"sara-card-3\",\n                    \"brand\": \"mastercard\",\n                    \"type\": \"Credit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Gold Card\",\n                    \"status\": \"Inactive\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"NotUnderReplacement\"\n                    },\n                    \"holder\": {\n                        \"name\": \"Sara Williams\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2022\",\n                        \"month\": \"12\"\n                    },\n                    \"currency\": \"USD\",\n                    \"maskedNumber\": \"5237\",\n                    \"delivery\": {\n                        \"transitSteps\": [{\n                                \"name\": \"Ordered\",\n                                \"status\": \"SUCCESS\",\n                                \"stepDateTime\": \"2020-05-04T12:52:20.906+00:00\"\n                            }, {\n                                \"name\": \"Processed\",\n                                \"status\": \"PENDING\"\n                            }, {\n                                \"name\": \"In Transit\",\n                                \"status\": \"PENDING\"\n                            }, {\n                                \"name\": \"Delivered\",\n                                \"status\": \"PENDING\"\n                            }]\n                    },\n                    \"limits\": [{\n                            \"id\": \"sara-limit-1\",\n                            \"channel\": \"ATM\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 3000,\n                            \"maxAmount\": 10000,\n                            \"minAmount\": 0\n                        }, {\n                            \"id\": \"sara-limit-2\",\n                            \"channel\": \"ONLINE\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 2000,\n                            \"maxAmount\": 10000,\n                            \"minAmount\": 0\n                        }]\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"kim-card-2\",\n                    \"brand\": \"mastercard\",\n                    \"type\": \"Debit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Copper\",\n                    \"status\": \"Active\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"NotUnderReplacement\"\n                    },\n                    \"holder\": {\n                        \"name\": \"Kim Sook\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2027\",\n                        \"month\": \"03\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"9292\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"delivery\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"transitSteps\": [{\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"holder\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"name\": \"name\"\n                    },\n                    \"type\": \"type\",\n                    \"expiryDate\": {\n                        \"month\": \"month\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"year\": \"year\"\n                    },\n                    \"maskedNumber\": \"maskedNumber\",\n                    \"name\": \"name\",\n                    \"subType\": \"subType\",\n                    \"currency\": \"currency\",\n                    \"id\": \"id\",\n                    \"brand\": \"brand\",\n                    \"replacement\": {\n                        \"reason\": \"reason\",\n                        \"replacingId\": \"replacingId\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"replacedById\": \"replacedById\",\n                        \"status\": \"status\"\n                    },\n                    \"limits\": [{\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }, {\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }],\n                    \"status\": \"status\"\n                }\n            },\n        ]\n    }]);\nconst CardsHttpServiceChangeLimitsMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/cards/{id}/limits\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"john-card-1\",\n                    \"brand\": \"visa\",\n                    \"type\": \"Credit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Gold\",\n                    \"status\": \"Active\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"NotUnderReplacement\"\n                    },\n                    \"holder\": {\n                        \"name\": \"John Doe\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2030\",\n                        \"month\": \"06\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"5827\",\n                    \"delivery\": {\n                        \"transitSteps\": [{\n                                \"name\": \"Ordered\",\n                                \"status\": \"SUCCESS\",\n                                \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n                            }, {\n                                \"name\": \"Processed\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"name\": \"In Transit\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"name\": \"Delivered\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"limits\": [{\n                            \"id\": \"john-limit-1\",\n                            \"channel\": \"ATM\",\n                            \"frequency\": \"WEEKLY\",\n                            \"amount\": 1000,\n                            \"maxAmount\": 9000,\n                            \"minAmount\": 0\n                        }, {\n                            \"id\": \"john-limit-2\",\n                            \"channel\": \"ONLINE\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 20000,\n                            \"maxAmount\": 9000,\n                            \"minAmount\": 0\n                        }]\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"delivery\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"transitSteps\": [{\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"holder\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"name\": \"name\"\n                    },\n                    \"type\": \"type\",\n                    \"expiryDate\": {\n                        \"month\": \"month\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"year\": \"year\"\n                    },\n                    \"maskedNumber\": \"maskedNumber\",\n                    \"name\": \"name\",\n                    \"subType\": \"subType\",\n                    \"currency\": \"currency\",\n                    \"id\": \"id\",\n                    \"brand\": \"brand\",\n                    \"replacement\": {\n                        \"reason\": \"reason\",\n                        \"replacingId\": \"replacingId\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"replacedById\": \"replacedById\",\n                        \"status\": \"status\"\n                    },\n                    \"limits\": [{\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }, {\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }],\n                    \"status\": \"status\"\n                }\n            },\n        ]\n    }]);\nconst CardsHttpServiceGetCardByIdMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/cards/{id}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"id\": \"sara-card-1\",\n                    \"brand\": \"mastercard\",\n                    \"type\": \"Credit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Gold Card\",\n                    \"status\": \"Active\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"NotUnderReplacement\"\n                    },\n                    \"holder\": {\n                        \"name\": \"Sara Williams\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2022\",\n                        \"month\": \"12\"\n                    },\n                    \"currency\": \"USD\",\n                    \"maskedNumber\": \"5235\",\n                    \"limits\": [{\n                            \"id\": \"sara-limit-1\",\n                            \"channel\": \"ATM\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 3000,\n                            \"maxAmount\": 10000,\n                            \"minAmount\": 0\n                        }, {\n                            \"id\": \"sara-limit-2\",\n                            \"channel\": \"ONLINE\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 2000,\n                            \"maxAmount\": 10000,\n                            \"minAmount\": 0\n                        }]\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"elon-card-1\",\n                    \"brand\": \"mastercard\",\n                    \"type\": \"Credit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"World Elite\",\n                    \"status\": \"Active\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"NotUnderReplacement\"\n                    },\n                    \"holder\": {\n                        \"name\": \"Elon\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2050\",\n                        \"month\": \"12\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"5235\",\n                    \"delivery\": {\n                        \"transitSteps\": [{\n                                \"name\": \"Ordered\",\n                                \"status\": \"SUCCESS\",\n                                \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n                            }, {\n                                \"name\": \"Processed\",\n                                \"status\": \"PENDING\"\n                            }, {\n                                \"name\": \"In Transit\",\n                                \"status\": \"PENDING\"\n                            }, {\n                                \"name\": \"Delivered\",\n                                \"status\": \"PENDING\",\n                                \"stepDateTime\": \"2019-06-20T14:21:25.001Z\"\n                            }]\n                    },\n                    \"limits\": [{\n                            \"id\": \"elon-limit-1\",\n                            \"channel\": \"ATM\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 500000,\n                            \"maxAmount\": 100000,\n                            \"minAmount\": 0\n                        }, {\n                            \"id\": \"elon-limit-2\",\n                            \"channel\": \"ONLINE\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 1000000,\n                            \"maxAmount\": 800000,\n                            \"minAmount\": 10000\n                        }]\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"john-card-1\",\n                    \"brand\": \"visa\",\n                    \"type\": \"Credit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Gold\",\n                    \"status\": \"Active\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"NotUnderReplacement\"\n                    },\n                    \"holder\": {\n                        \"name\": \"John Doe\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2030\",\n                        \"month\": \"06\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"5827\",\n                    \"delivery\": {\n                        \"transitSteps\": [{\n                                \"name\": \"Ordered\",\n                                \"status\": \"SUCCESS\",\n                                \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n                            }, {\n                                \"name\": \"Processed\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"name\": \"In Transit\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"name\": \"Delivered\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"limits\": [{\n                            \"id\": \"john-limit-1\",\n                            \"channel\": \"ATM\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 5000,\n                            \"maxAmount\": 1000,\n                            \"minAmount\": 0\n                        }, {\n                            \"id\": \"john-limit-2\",\n                            \"channel\": \"ONLINE\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 20000,\n                            \"maxAmount\": 9000,\n                            \"minAmount\": 0\n                        }]\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"kim-card-1\",\n                    \"brand\": \"mastercard\",\n                    \"type\": \"Debit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Copper\",\n                    \"status\": \"Inactive\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"NotUnderReplacement\"\n                    },\n                    \"holder\": {\n                        \"name\": \"Kim Sook\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2027\",\n                        \"month\": \"03\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"9292\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"delivery\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"transitSteps\": [{\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"holder\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"name\": \"name\"\n                    },\n                    \"type\": \"type\",\n                    \"expiryDate\": {\n                        \"month\": \"month\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"year\": \"year\"\n                    },\n                    \"maskedNumber\": \"maskedNumber\",\n                    \"name\": \"name\",\n                    \"subType\": \"subType\",\n                    \"currency\": \"currency\",\n                    \"id\": \"id\",\n                    \"brand\": \"brand\",\n                    \"replacement\": {\n                        \"reason\": \"reason\",\n                        \"replacingId\": \"replacingId\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"replacedById\": \"replacedById\",\n                        \"status\": \"status\"\n                    },\n                    \"limits\": [{\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }, {\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }],\n                    \"status\": \"status\"\n                }\n            },\n        ]\n    }]);\nconst CardsHttpServiceGetCardsMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/cards\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"sara-card-1\",\n                        \"brand\": \"mastercard\",\n                        \"type\": \"Credit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Gold Card\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Sara Williams\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2022\",\n                            \"month\": \"12\"\n                        },\n                        \"currency\": \"USD\",\n                        \"maskedNumber\": \"5235\"\n                    }, {\n                        \"id\": \"sara-card-2\",\n                        \"brand\": \"visa\",\n                        \"type\": \"Credit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Green Card\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Sara Williams\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2022\",\n                            \"month\": \"01\"\n                        },\n                        \"currency\": \"USD\",\n                        \"maskedNumber\": \"5236\"\n                    }, {\n                        \"id\": \"sara-card-3\",\n                        \"brand\": \"mastercard\",\n                        \"type\": \"Credit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Gold Card\",\n                        \"status\": \"Inactive\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Sara Williams\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2022\",\n                            \"month\": \"12\"\n                        },\n                        \"currency\": \"USD\",\n                        \"maskedNumber\": \"5237\",\n                        \"delivery\": {\n                            \"transitSteps\": [{\n                                    \"name\": \"Ordered\",\n                                    \"status\": \"SUCCESS\",\n                                    \"stepDateTime\": \"2020-05-04T12:52:20.906+00:00\"\n                                }, {\n                                    \"name\": \"Processed\",\n                                    \"status\": \"PENDING\"\n                                }, {\n                                    \"name\": \"In Transit\",\n                                    \"status\": \"PENDING\"\n                                }, {\n                                    \"name\": \"Delivered\",\n                                    \"status\": \"PENDING\"\n                                }]\n                        }\n                    }, {\n                        \"id\": \"sara-card-4\",\n                        \"brand\": \"mastercard\",\n                        \"type\": \"Debit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Black Card\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Sara Williams\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2022\",\n                            \"month\": \"12\"\n                        },\n                        \"currency\": \"USD\",\n                        \"maskedNumber\": \"6235\"\n                    }, {\n                        \"id\": \"sara-card-5\",\n                        \"brand\": \"visa\",\n                        \"type\": \"Debit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Blue Card\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Sara Williams\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2022\",\n                            \"month\": \"12\"\n                        },\n                        \"currency\": \"USD\",\n                        \"maskedNumber\": \"6236\"\n                    }]\n            },\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"elon-card-1\",\n                        \"brand\": \"mastercard\",\n                        \"type\": \"Credit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"World Elite\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Elon\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2050\",\n                            \"month\": \"12\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"5235\",\n                        \"delivery\": {\n                            \"transitSteps\": [{\n                                    \"name\": \"Ordered\",\n                                    \"status\": \"SUCCESS\",\n                                    \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n                                }, {\n                                    \"name\": \"Processed\",\n                                    \"status\": \"PENDING\"\n                                }, {\n                                    \"name\": \"In Transit\",\n                                    \"status\": \"PENDING\"\n                                }, {\n                                    \"name\": \"Delivered\",\n                                    \"status\": \"PENDING\",\n                                    \"stepDateTime\": \"2019-06-20T14:21:25.001Z\"\n                                }]\n                        }\n                    }, {\n                        \"id\": \"elon-card-2\",\n                        \"brand\": \"visa\",\n                        \"type\": \"Credit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Infinite Privilege\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Elon\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2045\",\n                            \"month\": \"01\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"6782\"\n                    }, {\n                        \"id\": \"elon-card-3\",\n                        \"brand\": \"american_express\",\n                        \"type\": \"Debit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Reserve\",\n                        \"status\": \"Cancelled\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"UnderReplacement\",\n                            \"reason\": \"Lost\",\n                            \"replacedById\": \"4\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Elon\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2048\",\n                            \"month\": \"06\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"1262\"\n                    }, {\n                        \"id\": \"elon-card-4\",\n                        \"brand\": \"american_express\",\n                        \"type\": \"Debit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Reserve\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Elon\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2048\",\n                            \"month\": \"07\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"1289\"\n                    }, {\n                        \"id\": \"elon-card-5\",\n                        \"brand\": \"mastercard\",\n                        \"type\": \"Debit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Platinum\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Elon\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2050\",\n                            \"month\": \"11\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"4627\",\n                        \"delivery\": {\n                            \"transitSteps\": [{\n                                    \"name\": \"Ordered\",\n                                    \"status\": \"SUCCESS\",\n                                    \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n                                }, {\n                                    \"name\": \"Processed\",\n                                    \"status\": \"SUCCESS\",\n                                    \"stepDateTime\": \"2019-06-20T14:32:20.906Z\"\n                                }, {\n                                    \"name\": \"In Transit\",\n                                    \"status\": \"SUCCESS\",\n                                    \"stepDateTime\": \"2019-06-20T15:12:20.906Z\"\n                                }, {\n                                    \"name\": \"Delivered\",\n                                    \"status\": \"SUCCESS\",\n                                    \"stepDateTime\": \"2019-06-21T11:28:25.001Z\"\n                                }]\n                        }\n                    }, {\n                        \"id\": \"elon-card-6\",\n                        \"brand\": \"american_express\",\n                        \"type\": \"Credit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Reserve\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"LOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Elon\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2047\",\n                            \"month\": \"03\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"8291\"\n                    }]\n            },\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"john-card-1\",\n                        \"brand\": \"visa\",\n                        \"type\": \"Credit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Gold\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"John Doe\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2030\",\n                            \"month\": \"06\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"5827\",\n                        \"delivery\": {\n                            \"transitSteps\": [{\n                                    \"name\": \"Ordered\",\n                                    \"status\": \"SUCCESS\",\n                                    \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n                                }, {\n                                    \"name\": \"Processed\",\n                                    \"status\": \"SUCCESS\"\n                                }, {\n                                    \"name\": \"In Transit\",\n                                    \"status\": \"SUCCESS\"\n                                }, {\n                                    \"name\": \"Delivered\",\n                                    \"status\": \"SUCCESS\"\n                                }]\n                        },\n                        \"limits\": [{\n                                \"id\": \"john-limit-1\",\n                                \"channel\": \"ATM\",\n                                \"frequency\": \"DAILY\",\n                                \"amount\": 3000,\n                                \"maxAmount\": 9000,\n                                \"minAmount\": 0\n                            }, {\n                                \"id\": \"john-limit-2\",\n                                \"channel\": \"ONLINE\",\n                                \"frequency\": \"DAILY\",\n                                \"amount\": 20000,\n                                \"maxAmount\": 9000,\n                                \"minAmount\": 0\n                            }]\n                    }, {\n                        \"id\": \"john-card-2\",\n                        \"brand\": \"mastercard\",\n                        \"type\": \"Debit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Gold\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"John Doe\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2031\",\n                            \"month\": \"02\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"8299\"\n                    }]\n            },\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"kim-card-1\",\n                        \"brand\": \"mastercard\",\n                        \"type\": \"Debit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Copper\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Kim Sook\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2027\",\n                            \"month\": \"03\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"9292\"\n                    }, {\n                        \"id\": \"kim-card-2\",\n                        \"brand\": \"visa\",\n                        \"type\": \"Debit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Iron\",\n                        \"status\": \"Inactive\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Kim Sook\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2010\",\n                            \"month\": \"04\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"9494\"\n                    }, {\n                        \"id\": \"kim-card-3\",\n                        \"brand\": \"visa\",\n                        \"type\": \"Debit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Iron\",\n                        \"status\": \"Expired\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Kim Sook\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2010\",\n                            \"month\": \"04\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"9494\"\n                    }]\n            },\n            {\n                status: 200,\n                body: []\n            },\n        ]\n    }]);\nconst CardsHttpServiceRequestPinMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/cards/{id}/pin/request\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"delivery\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"transitSteps\": [{\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"holder\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"name\": \"name\"\n                    },\n                    \"type\": \"type\",\n                    \"expiryDate\": {\n                        \"month\": \"month\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"year\": \"year\"\n                    },\n                    \"maskedNumber\": \"maskedNumber\",\n                    \"name\": \"name\",\n                    \"subType\": \"subType\",\n                    \"currency\": \"currency\",\n                    \"id\": \"id\",\n                    \"brand\": \"brand\",\n                    \"replacement\": {\n                        \"reason\": \"reason\",\n                        \"replacingId\": \"replacingId\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"replacedById\": \"replacedById\",\n                        \"status\": \"status\"\n                    },\n                    \"limits\": [{\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }, {\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }],\n                    \"status\": \"status\"\n                }\n            },\n        ]\n    }]);\nconst CardsHttpServiceRequestReplacementMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/cards/{id}/replacement\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"elon-card-1\",\n                    \"brand\": \"mastercard\",\n                    \"type\": \"Credit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"World Elite\",\n                    \"status\": \"Active\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"ReplacementRequested\",\n                        \"reason\": \"Damaged\"\n                    },\n                    \"holder\": {\n                        \"name\": \"Elon\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2050\",\n                        \"month\": \"12\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"5235\",\n                    \"delivery\": {\n                        \"transitSteps\": [{\n                                \"name\": \"Ordered\",\n                                \"status\": \"SUCCESS\",\n                                \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n                            }, {\n                                \"name\": \"Processed\",\n                                \"status\": \"PENDING\"\n                            }]\n                    }\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"john-card-1\",\n                    \"brand\": \"visa\",\n                    \"type\": \"Credit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Gold\",\n                    \"status\": \"Inactive\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"ReplacementRequested\",\n                        \"reason\": \"Stolen\"\n                    },\n                    \"holder\": {\n                        \"name\": \"John Doe\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2030\",\n                        \"month\": \"06\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"5827\",\n                    \"delivery\": {\n                        \"transitSteps\": [{\n                                \"name\": \"Ordered\",\n                                \"status\": \"SUCCESS\",\n                                \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n                            }, {\n                                \"name\": \"Processed\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"name\": \"In Transit\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"name\": \"Delivered\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    }\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"kim-card-1\",\n                    \"brand\": \"mastercard\",\n                    \"type\": \"Debit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Copper\",\n                    \"status\": \"Inactive\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"ReplacementRequested\",\n                        \"reason\": \"Lost\"\n                    },\n                    \"holder\": {\n                        \"name\": \"Kim Sook\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2027\",\n                        \"month\": \"03\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"9292\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"delivery\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"transitSteps\": [{\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"holder\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"name\": \"name\"\n                    },\n                    \"type\": \"type\",\n                    \"expiryDate\": {\n                        \"month\": \"month\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"year\": \"year\"\n                    },\n                    \"maskedNumber\": \"maskedNumber\",\n                    \"name\": \"name\",\n                    \"subType\": \"subType\",\n                    \"currency\": \"currency\",\n                    \"id\": \"id\",\n                    \"brand\": \"brand\",\n                    \"replacement\": {\n                        \"reason\": \"reason\",\n                        \"replacingId\": \"replacingId\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"replacedById\": \"replacedById\",\n                        \"status\": \"status\"\n                    },\n                    \"limits\": [{\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }, {\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }],\n                    \"status\": \"status\"\n                }\n            },\n        ]\n    }]);\nconst CardsHttpServiceResetPinMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/cards/{id}/pin/reset\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"delivery\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"transitSteps\": [{\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"holder\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"name\": \"name\"\n                    },\n                    \"type\": \"type\",\n                    \"expiryDate\": {\n                        \"month\": \"month\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"year\": \"year\"\n                    },\n                    \"maskedNumber\": \"maskedNumber\",\n                    \"name\": \"name\",\n                    \"subType\": \"subType\",\n                    \"currency\": \"currency\",\n                    \"id\": \"id\",\n                    \"brand\": \"brand\",\n                    \"replacement\": {\n                        \"reason\": \"reason\",\n                        \"replacingId\": \"replacingId\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"replacedById\": \"replacedById\",\n                        \"status\": \"status\"\n                    },\n                    \"limits\": [{\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }, {\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }],\n                    \"status\": \"status\"\n                }\n            },\n        ]\n    }]);\nconst CardsHttpServiceUpdateLockStatusMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/cards/{id}/lock-status\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"elon-card-6\",\n                    \"brand\": \"american_express\",\n                    \"type\": \"Credit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Reserve\",\n                    \"status\": \"Active\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"NotUnderReplacement\"\n                    },\n                    \"holder\": {\n                        \"name\": \"Elon\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2047\",\n                        \"month\": \"03\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"8291\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"john-card-1\",\n                    \"brand\": \"visa\",\n                    \"type\": \"Credit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Gold\",\n                    \"status\": \"Active\",\n                    \"lockStatus\": \"LOCKED\",\n                    \"replacement\": {\n                        \"status\": \"NotUnderReplacement\"\n                    },\n                    \"holder\": {\n                        \"name\": \"John Doe\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2030\",\n                        \"month\": \"06\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"5827\",\n                    \"delivery\": {\n                        \"transitSteps\": [{\n                                \"name\": \"Ordered\",\n                                \"status\": \"SUCCESS\",\n                                \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n                            }, {\n                                \"name\": \"Processed\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"name\": \"In Transit\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"name\": \"Delivered\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"limits\": [{\n                            \"id\": \"john-limit-1\",\n                            \"channel\": \"ATM\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 5000,\n                            \"maxAmount\": 1000,\n                            \"minAmount\": 0\n                        }, {\n                            \"id\": \"john-limit-2\",\n                            \"channel\": \"ONLINE\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 20000,\n                            \"maxAmount\": 9000,\n                            \"minAmount\": 0\n                        }]\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"delivery\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"transitSteps\": [{\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"holder\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"name\": \"name\"\n                    },\n                    \"type\": \"type\",\n                    \"expiryDate\": {\n                        \"month\": \"month\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"year\": \"year\"\n                    },\n                    \"maskedNumber\": \"maskedNumber\",\n                    \"name\": \"name\",\n                    \"subType\": \"subType\",\n                    \"currency\": \"currency\",\n                    \"id\": \"id\",\n                    \"brand\": \"brand\",\n                    \"replacement\": {\n                        \"reason\": \"reason\",\n                        \"replacingId\": \"replacingId\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"replacedById\": \"replacedById\",\n                        \"status\": \"status\"\n                    },\n                    \"limits\": [{\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }, {\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }],\n                    \"status\": \"status\"\n                }\n            },\n        ]\n    }]);\nconst CardsHttpServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/client-api/v2/cards/{id}/activation\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"id\": \"sara-card-3\",\n                    \"brand\": \"mastercard\",\n                    \"type\": \"Credit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Gold Card\",\n                    \"status\": \"Inactive\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"NotUnderReplacement\"\n                    },\n                    \"holder\": {\n                        \"name\": \"Sara Williams\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2022\",\n                        \"month\": \"12\"\n                    },\n                    \"currency\": \"USD\",\n                    \"maskedNumber\": \"5237\",\n                    \"delivery\": {\n                        \"transitSteps\": [{\n                                \"name\": \"Ordered\",\n                                \"status\": \"SUCCESS\",\n                                \"stepDateTime\": \"2020-05-04T12:52:20.906+00:00\"\n                            }, {\n                                \"name\": \"Processed\",\n                                \"status\": \"PENDING\"\n                            }, {\n                                \"name\": \"In Transit\",\n                                \"status\": \"PENDING\"\n                            }, {\n                                \"name\": \"Delivered\",\n                                \"status\": \"PENDING\"\n                            }]\n                    },\n                    \"limits\": [{\n                            \"id\": \"sara-limit-1\",\n                            \"channel\": \"ATM\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 3000,\n                            \"maxAmount\": 10000,\n                            \"minAmount\": 0\n                        }, {\n                            \"id\": \"sara-limit-2\",\n                            \"channel\": \"ONLINE\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 2000,\n                            \"maxAmount\": 10000,\n                            \"minAmount\": 0\n                        }]\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"kim-card-2\",\n                    \"brand\": \"mastercard\",\n                    \"type\": \"Debit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Copper\",\n                    \"status\": \"Active\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"NotUnderReplacement\"\n                    },\n                    \"holder\": {\n                        \"name\": \"Kim Sook\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2027\",\n                        \"month\": \"03\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"9292\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"delivery\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"transitSteps\": [{\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"holder\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"name\": \"name\"\n                    },\n                    \"type\": \"type\",\n                    \"expiryDate\": {\n                        \"month\": \"month\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"year\": \"year\"\n                    },\n                    \"maskedNumber\": \"maskedNumber\",\n                    \"name\": \"name\",\n                    \"subType\": \"subType\",\n                    \"currency\": \"currency\",\n                    \"id\": \"id\",\n                    \"brand\": \"brand\",\n                    \"replacement\": {\n                        \"reason\": \"reason\",\n                        \"replacingId\": \"replacingId\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"replacedById\": \"replacedById\",\n                        \"status\": \"status\"\n                    },\n                    \"limits\": [{\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }, {\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }],\n                    \"status\": \"status\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/cards/{id}/limits\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"john-card-1\",\n                    \"brand\": \"visa\",\n                    \"type\": \"Credit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Gold\",\n                    \"status\": \"Active\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"NotUnderReplacement\"\n                    },\n                    \"holder\": {\n                        \"name\": \"John Doe\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2030\",\n                        \"month\": \"06\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"5827\",\n                    \"delivery\": {\n                        \"transitSteps\": [{\n                                \"name\": \"Ordered\",\n                                \"status\": \"SUCCESS\",\n                                \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n                            }, {\n                                \"name\": \"Processed\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"name\": \"In Transit\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"name\": \"Delivered\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"limits\": [{\n                            \"id\": \"john-limit-1\",\n                            \"channel\": \"ATM\",\n                            \"frequency\": \"WEEKLY\",\n                            \"amount\": 1000,\n                            \"maxAmount\": 9000,\n                            \"minAmount\": 0\n                        }, {\n                            \"id\": \"john-limit-2\",\n                            \"channel\": \"ONLINE\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 20000,\n                            \"maxAmount\": 9000,\n                            \"minAmount\": 0\n                        }]\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"delivery\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"transitSteps\": [{\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"holder\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"name\": \"name\"\n                    },\n                    \"type\": \"type\",\n                    \"expiryDate\": {\n                        \"month\": \"month\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"year\": \"year\"\n                    },\n                    \"maskedNumber\": \"maskedNumber\",\n                    \"name\": \"name\",\n                    \"subType\": \"subType\",\n                    \"currency\": \"currency\",\n                    \"id\": \"id\",\n                    \"brand\": \"brand\",\n                    \"replacement\": {\n                        \"reason\": \"reason\",\n                        \"replacingId\": \"replacingId\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"replacedById\": \"replacedById\",\n                        \"status\": \"status\"\n                    },\n                    \"limits\": [{\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }, {\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }],\n                    \"status\": \"status\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/cards/{id}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"id\": \"sara-card-1\",\n                    \"brand\": \"mastercard\",\n                    \"type\": \"Credit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Gold Card\",\n                    \"status\": \"Active\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"NotUnderReplacement\"\n                    },\n                    \"holder\": {\n                        \"name\": \"Sara Williams\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2022\",\n                        \"month\": \"12\"\n                    },\n                    \"currency\": \"USD\",\n                    \"maskedNumber\": \"5235\",\n                    \"limits\": [{\n                            \"id\": \"sara-limit-1\",\n                            \"channel\": \"ATM\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 3000,\n                            \"maxAmount\": 10000,\n                            \"minAmount\": 0\n                        }, {\n                            \"id\": \"sara-limit-2\",\n                            \"channel\": \"ONLINE\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 2000,\n                            \"maxAmount\": 10000,\n                            \"minAmount\": 0\n                        }]\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"elon-card-1\",\n                    \"brand\": \"mastercard\",\n                    \"type\": \"Credit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"World Elite\",\n                    \"status\": \"Active\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"NotUnderReplacement\"\n                    },\n                    \"holder\": {\n                        \"name\": \"Elon\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2050\",\n                        \"month\": \"12\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"5235\",\n                    \"delivery\": {\n                        \"transitSteps\": [{\n                                \"name\": \"Ordered\",\n                                \"status\": \"SUCCESS\",\n                                \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n                            }, {\n                                \"name\": \"Processed\",\n                                \"status\": \"PENDING\"\n                            }, {\n                                \"name\": \"In Transit\",\n                                \"status\": \"PENDING\"\n                            }, {\n                                \"name\": \"Delivered\",\n                                \"status\": \"PENDING\",\n                                \"stepDateTime\": \"2019-06-20T14:21:25.001Z\"\n                            }]\n                    },\n                    \"limits\": [{\n                            \"id\": \"elon-limit-1\",\n                            \"channel\": \"ATM\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 500000,\n                            \"maxAmount\": 100000,\n                            \"minAmount\": 0\n                        }, {\n                            \"id\": \"elon-limit-2\",\n                            \"channel\": \"ONLINE\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 1000000,\n                            \"maxAmount\": 800000,\n                            \"minAmount\": 10000\n                        }]\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"john-card-1\",\n                    \"brand\": \"visa\",\n                    \"type\": \"Credit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Gold\",\n                    \"status\": \"Active\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"NotUnderReplacement\"\n                    },\n                    \"holder\": {\n                        \"name\": \"John Doe\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2030\",\n                        \"month\": \"06\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"5827\",\n                    \"delivery\": {\n                        \"transitSteps\": [{\n                                \"name\": \"Ordered\",\n                                \"status\": \"SUCCESS\",\n                                \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n                            }, {\n                                \"name\": \"Processed\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"name\": \"In Transit\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"name\": \"Delivered\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"limits\": [{\n                            \"id\": \"john-limit-1\",\n                            \"channel\": \"ATM\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 5000,\n                            \"maxAmount\": 1000,\n                            \"minAmount\": 0\n                        }, {\n                            \"id\": \"john-limit-2\",\n                            \"channel\": \"ONLINE\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 20000,\n                            \"maxAmount\": 9000,\n                            \"minAmount\": 0\n                        }]\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"kim-card-1\",\n                    \"brand\": \"mastercard\",\n                    \"type\": \"Debit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Copper\",\n                    \"status\": \"Inactive\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"NotUnderReplacement\"\n                    },\n                    \"holder\": {\n                        \"name\": \"Kim Sook\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2027\",\n                        \"month\": \"03\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"9292\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"delivery\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"transitSteps\": [{\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"holder\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"name\": \"name\"\n                    },\n                    \"type\": \"type\",\n                    \"expiryDate\": {\n                        \"month\": \"month\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"year\": \"year\"\n                    },\n                    \"maskedNumber\": \"maskedNumber\",\n                    \"name\": \"name\",\n                    \"subType\": \"subType\",\n                    \"currency\": \"currency\",\n                    \"id\": \"id\",\n                    \"brand\": \"brand\",\n                    \"replacement\": {\n                        \"reason\": \"reason\",\n                        \"replacingId\": \"replacingId\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"replacedById\": \"replacedById\",\n                        \"status\": \"status\"\n                    },\n                    \"limits\": [{\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }, {\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }],\n                    \"status\": \"status\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/cards\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"sara-card-1\",\n                        \"brand\": \"mastercard\",\n                        \"type\": \"Credit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Gold Card\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Sara Williams\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2022\",\n                            \"month\": \"12\"\n                        },\n                        \"currency\": \"USD\",\n                        \"maskedNumber\": \"5235\"\n                    }, {\n                        \"id\": \"sara-card-2\",\n                        \"brand\": \"visa\",\n                        \"type\": \"Credit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Green Card\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Sara Williams\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2022\",\n                            \"month\": \"01\"\n                        },\n                        \"currency\": \"USD\",\n                        \"maskedNumber\": \"5236\"\n                    }, {\n                        \"id\": \"sara-card-3\",\n                        \"brand\": \"mastercard\",\n                        \"type\": \"Credit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Gold Card\",\n                        \"status\": \"Inactive\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Sara Williams\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2022\",\n                            \"month\": \"12\"\n                        },\n                        \"currency\": \"USD\",\n                        \"maskedNumber\": \"5237\",\n                        \"delivery\": {\n                            \"transitSteps\": [{\n                                    \"name\": \"Ordered\",\n                                    \"status\": \"SUCCESS\",\n                                    \"stepDateTime\": \"2020-05-04T12:52:20.906+00:00\"\n                                }, {\n                                    \"name\": \"Processed\",\n                                    \"status\": \"PENDING\"\n                                }, {\n                                    \"name\": \"In Transit\",\n                                    \"status\": \"PENDING\"\n                                }, {\n                                    \"name\": \"Delivered\",\n                                    \"status\": \"PENDING\"\n                                }]\n                        }\n                    }, {\n                        \"id\": \"sara-card-4\",\n                        \"brand\": \"mastercard\",\n                        \"type\": \"Debit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Black Card\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Sara Williams\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2022\",\n                            \"month\": \"12\"\n                        },\n                        \"currency\": \"USD\",\n                        \"maskedNumber\": \"6235\"\n                    }, {\n                        \"id\": \"sara-card-5\",\n                        \"brand\": \"visa\",\n                        \"type\": \"Debit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Blue Card\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Sara Williams\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2022\",\n                            \"month\": \"12\"\n                        },\n                        \"currency\": \"USD\",\n                        \"maskedNumber\": \"6236\"\n                    }]\n            },\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"elon-card-1\",\n                        \"brand\": \"mastercard\",\n                        \"type\": \"Credit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"World Elite\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Elon\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2050\",\n                            \"month\": \"12\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"5235\",\n                        \"delivery\": {\n                            \"transitSteps\": [{\n                                    \"name\": \"Ordered\",\n                                    \"status\": \"SUCCESS\",\n                                    \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n                                }, {\n                                    \"name\": \"Processed\",\n                                    \"status\": \"PENDING\"\n                                }, {\n                                    \"name\": \"In Transit\",\n                                    \"status\": \"PENDING\"\n                                }, {\n                                    \"name\": \"Delivered\",\n                                    \"status\": \"PENDING\",\n                                    \"stepDateTime\": \"2019-06-20T14:21:25.001Z\"\n                                }]\n                        }\n                    }, {\n                        \"id\": \"elon-card-2\",\n                        \"brand\": \"visa\",\n                        \"type\": \"Credit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Infinite Privilege\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Elon\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2045\",\n                            \"month\": \"01\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"6782\"\n                    }, {\n                        \"id\": \"elon-card-3\",\n                        \"brand\": \"american_express\",\n                        \"type\": \"Debit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Reserve\",\n                        \"status\": \"Cancelled\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"UnderReplacement\",\n                            \"reason\": \"Lost\",\n                            \"replacedById\": \"4\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Elon\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2048\",\n                            \"month\": \"06\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"1262\"\n                    }, {\n                        \"id\": \"elon-card-4\",\n                        \"brand\": \"american_express\",\n                        \"type\": \"Debit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Reserve\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Elon\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2048\",\n                            \"month\": \"07\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"1289\"\n                    }, {\n                        \"id\": \"elon-card-5\",\n                        \"brand\": \"mastercard\",\n                        \"type\": \"Debit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Platinum\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Elon\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2050\",\n                            \"month\": \"11\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"4627\",\n                        \"delivery\": {\n                            \"transitSteps\": [{\n                                    \"name\": \"Ordered\",\n                                    \"status\": \"SUCCESS\",\n                                    \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n                                }, {\n                                    \"name\": \"Processed\",\n                                    \"status\": \"SUCCESS\",\n                                    \"stepDateTime\": \"2019-06-20T14:32:20.906Z\"\n                                }, {\n                                    \"name\": \"In Transit\",\n                                    \"status\": \"SUCCESS\",\n                                    \"stepDateTime\": \"2019-06-20T15:12:20.906Z\"\n                                }, {\n                                    \"name\": \"Delivered\",\n                                    \"status\": \"SUCCESS\",\n                                    \"stepDateTime\": \"2019-06-21T11:28:25.001Z\"\n                                }]\n                        }\n                    }, {\n                        \"id\": \"elon-card-6\",\n                        \"brand\": \"american_express\",\n                        \"type\": \"Credit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Reserve\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"LOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Elon\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2047\",\n                            \"month\": \"03\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"8291\"\n                    }]\n            },\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"john-card-1\",\n                        \"brand\": \"visa\",\n                        \"type\": \"Credit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Gold\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"John Doe\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2030\",\n                            \"month\": \"06\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"5827\",\n                        \"delivery\": {\n                            \"transitSteps\": [{\n                                    \"name\": \"Ordered\",\n                                    \"status\": \"SUCCESS\",\n                                    \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n                                }, {\n                                    \"name\": \"Processed\",\n                                    \"status\": \"SUCCESS\"\n                                }, {\n                                    \"name\": \"In Transit\",\n                                    \"status\": \"SUCCESS\"\n                                }, {\n                                    \"name\": \"Delivered\",\n                                    \"status\": \"SUCCESS\"\n                                }]\n                        },\n                        \"limits\": [{\n                                \"id\": \"john-limit-1\",\n                                \"channel\": \"ATM\",\n                                \"frequency\": \"DAILY\",\n                                \"amount\": 3000,\n                                \"maxAmount\": 9000,\n                                \"minAmount\": 0\n                            }, {\n                                \"id\": \"john-limit-2\",\n                                \"channel\": \"ONLINE\",\n                                \"frequency\": \"DAILY\",\n                                \"amount\": 20000,\n                                \"maxAmount\": 9000,\n                                \"minAmount\": 0\n                            }]\n                    }, {\n                        \"id\": \"john-card-2\",\n                        \"brand\": \"mastercard\",\n                        \"type\": \"Debit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Gold\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"John Doe\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2031\",\n                            \"month\": \"02\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"8299\"\n                    }]\n            },\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"kim-card-1\",\n                        \"brand\": \"mastercard\",\n                        \"type\": \"Debit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Copper\",\n                        \"status\": \"Active\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Kim Sook\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2027\",\n                            \"month\": \"03\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"9292\"\n                    }, {\n                        \"id\": \"kim-card-2\",\n                        \"brand\": \"visa\",\n                        \"type\": \"Debit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Iron\",\n                        \"status\": \"Inactive\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Kim Sook\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2010\",\n                            \"month\": \"04\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"9494\"\n                    }, {\n                        \"id\": \"kim-card-3\",\n                        \"brand\": \"visa\",\n                        \"type\": \"Debit\",\n                        \"subType\": \"ATM\",\n                        \"name\": \"Iron\",\n                        \"status\": \"Expired\",\n                        \"lockStatus\": \"UNLOCKED\",\n                        \"replacement\": {\n                            \"status\": \"NotUnderReplacement\"\n                        },\n                        \"holder\": {\n                            \"name\": \"Kim Sook\"\n                        },\n                        \"expiryDate\": {\n                            \"year\": \"2010\",\n                            \"month\": \"04\"\n                        },\n                        \"currency\": \"EUR\",\n                        \"maskedNumber\": \"9494\"\n                    }]\n            },\n            {\n                status: 200,\n                body: []\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/cards/{id}/pin/request\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"delivery\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"transitSteps\": [{\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"holder\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"name\": \"name\"\n                    },\n                    \"type\": \"type\",\n                    \"expiryDate\": {\n                        \"month\": \"month\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"year\": \"year\"\n                    },\n                    \"maskedNumber\": \"maskedNumber\",\n                    \"name\": \"name\",\n                    \"subType\": \"subType\",\n                    \"currency\": \"currency\",\n                    \"id\": \"id\",\n                    \"brand\": \"brand\",\n                    \"replacement\": {\n                        \"reason\": \"reason\",\n                        \"replacingId\": \"replacingId\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"replacedById\": \"replacedById\",\n                        \"status\": \"status\"\n                    },\n                    \"limits\": [{\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }, {\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }],\n                    \"status\": \"status\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/cards/{id}/replacement\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"elon-card-1\",\n                    \"brand\": \"mastercard\",\n                    \"type\": \"Credit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"World Elite\",\n                    \"status\": \"Active\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"ReplacementRequested\",\n                        \"reason\": \"Damaged\"\n                    },\n                    \"holder\": {\n                        \"name\": \"Elon\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2050\",\n                        \"month\": \"12\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"5235\",\n                    \"delivery\": {\n                        \"transitSteps\": [{\n                                \"name\": \"Ordered\",\n                                \"status\": \"SUCCESS\",\n                                \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n                            }, {\n                                \"name\": \"Processed\",\n                                \"status\": \"PENDING\"\n                            }]\n                    }\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"john-card-1\",\n                    \"brand\": \"visa\",\n                    \"type\": \"Credit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Gold\",\n                    \"status\": \"Inactive\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"ReplacementRequested\",\n                        \"reason\": \"Stolen\"\n                    },\n                    \"holder\": {\n                        \"name\": \"John Doe\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2030\",\n                        \"month\": \"06\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"5827\",\n                    \"delivery\": {\n                        \"transitSteps\": [{\n                                \"name\": \"Ordered\",\n                                \"status\": \"SUCCESS\",\n                                \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n                            }, {\n                                \"name\": \"Processed\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"name\": \"In Transit\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"name\": \"Delivered\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    }\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"kim-card-1\",\n                    \"brand\": \"mastercard\",\n                    \"type\": \"Debit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Copper\",\n                    \"status\": \"Inactive\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"ReplacementRequested\",\n                        \"reason\": \"Lost\"\n                    },\n                    \"holder\": {\n                        \"name\": \"Kim Sook\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2027\",\n                        \"month\": \"03\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"9292\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"delivery\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"transitSteps\": [{\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"holder\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"name\": \"name\"\n                    },\n                    \"type\": \"type\",\n                    \"expiryDate\": {\n                        \"month\": \"month\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"year\": \"year\"\n                    },\n                    \"maskedNumber\": \"maskedNumber\",\n                    \"name\": \"name\",\n                    \"subType\": \"subType\",\n                    \"currency\": \"currency\",\n                    \"id\": \"id\",\n                    \"brand\": \"brand\",\n                    \"replacement\": {\n                        \"reason\": \"reason\",\n                        \"replacingId\": \"replacingId\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"replacedById\": \"replacedById\",\n                        \"status\": \"status\"\n                    },\n                    \"limits\": [{\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }, {\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }],\n                    \"status\": \"status\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/cards/{id}/pin/reset\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/elon/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/john/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"delivery\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"transitSteps\": [{\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"holder\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"name\": \"name\"\n                    },\n                    \"type\": \"type\",\n                    \"expiryDate\": {\n                        \"month\": \"month\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"year\": \"year\"\n                    },\n                    \"maskedNumber\": \"maskedNumber\",\n                    \"name\": \"name\",\n                    \"subType\": \"subType\",\n                    \"currency\": \"currency\",\n                    \"id\": \"id\",\n                    \"brand\": \"brand\",\n                    \"replacement\": {\n                        \"reason\": \"reason\",\n                        \"replacingId\": \"replacingId\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"replacedById\": \"replacedById\",\n                        \"status\": \"status\"\n                    },\n                    \"limits\": [{\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }, {\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }],\n                    \"status\": \"status\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/cards/{id}/lock-status\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/sara/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"elon-card-6\",\n                    \"brand\": \"american_express\",\n                    \"type\": \"Credit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Reserve\",\n                    \"status\": \"Active\",\n                    \"lockStatus\": \"UNLOCKED\",\n                    \"replacement\": {\n                        \"status\": \"NotUnderReplacement\"\n                    },\n                    \"holder\": {\n                        \"name\": \"Elon\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2047\",\n                        \"month\": \"03\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"8291\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"john-card-1\",\n                    \"brand\": \"visa\",\n                    \"type\": \"Credit\",\n                    \"subType\": \"ATM\",\n                    \"name\": \"Gold\",\n                    \"status\": \"Active\",\n                    \"lockStatus\": \"LOCKED\",\n                    \"replacement\": {\n                        \"status\": \"NotUnderReplacement\"\n                    },\n                    \"holder\": {\n                        \"name\": \"John Doe\"\n                    },\n                    \"expiryDate\": {\n                        \"year\": \"2030\",\n                        \"month\": \"06\"\n                    },\n                    \"currency\": \"EUR\",\n                    \"maskedNumber\": \"5827\",\n                    \"delivery\": {\n                        \"transitSteps\": [{\n                                \"name\": \"Ordered\",\n                                \"status\": \"SUCCESS\",\n                                \"stepDateTime\": \"2019-06-19T12:52:20.906Z\"\n                            }, {\n                                \"name\": \"Processed\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"name\": \"In Transit\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"name\": \"Delivered\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"limits\": [{\n                            \"id\": \"john-limit-1\",\n                            \"channel\": \"ATM\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 5000,\n                            \"maxAmount\": 1000,\n                            \"minAmount\": 0\n                        }, {\n                            \"id\": \"john-limit-2\",\n                            \"channel\": \"ONLINE\",\n                            \"frequency\": \"DAILY\",\n                            \"amount\": 20000,\n                            \"maxAmount\": 9000,\n                            \"minAmount\": 0\n                        }]\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1cards~1%7Bid%7D/get/responses/200/content/application~1json/examples/kim/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"delivery\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"transitSteps\": [{\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }, {\n                                \"additions\": {\n                                    \"key\": \"additions\"\n                                },\n                                \"name\": \"name\",\n                                \"stepDateTime\": \"2000-01-23T04:56:07.000+00:00\",\n                                \"status\": \"SUCCESS\"\n                            }]\n                    },\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"holder\": {\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"name\": \"name\"\n                    },\n                    \"type\": \"type\",\n                    \"expiryDate\": {\n                        \"month\": \"month\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"year\": \"year\"\n                    },\n                    \"maskedNumber\": \"maskedNumber\",\n                    \"name\": \"name\",\n                    \"subType\": \"subType\",\n                    \"currency\": \"currency\",\n                    \"id\": \"id\",\n                    \"brand\": \"brand\",\n                    \"replacement\": {\n                        \"reason\": \"reason\",\n                        \"replacingId\": \"replacingId\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        },\n                        \"replacedById\": \"replacedById\",\n                        \"status\": \"status\"\n                    },\n                    \"limits\": [{\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }, {\n                            \"minAmount\": 1.4658129805029452,\n                            \"amount\": 0.8008281904610115,\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"channel\": \"channel\",\n                            \"id\": \"id\",\n                            \"maxAmount\": 6.027456183070403,\n                            \"frequency\": \"frequency\"\n                        }],\n                    \"status\": \"status\"\n                }\n            },\n        ]\n    },\n]);\n\nclass TravelNoticesHttpService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new CardsConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    createTravelNotice(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _travelNotice = requestParameters[\"travelNotice\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/travel-notices`, _travelNotice, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    createTravelNoticeUrl(requestParameters) {\n        const _travelNotice = requestParameters[\"travelNotice\"];\n        return `${this.configuration.basePath}/client-api/v2/travel-notices`;\n    }\n    deleteTravelNoticeById(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteTravelNoticeById.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/travel-notices/${encodeURIComponent(String(_id))}`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    deleteTravelNoticeByIdUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteTravelNoticeById.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/travel-notices/${encodeURIComponent(String(_id))}`;\n    }\n    getTravelNoticeById(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getTravelNoticeById.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/travel-notices/${encodeURIComponent(String(_id))}`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getTravelNoticeByIdUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getTravelNoticeById.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/travel-notices/${encodeURIComponent(String(_id))}`;\n    }\n    getTravelNotices(observe = 'body', reportProgress = false, options) {\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/travel-notices`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getTravelNoticesUrl() {\n        return `${this.configuration.basePath}/client-api/v2/travel-notices`;\n    }\n    updateTravelNotice(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateTravelNotice.');\n        }\n        const _travelNotice = requestParameters[\"travelNotice\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/travel-notices/${encodeURIComponent(String(_id))}`, _travelNotice, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    updateTravelNoticeUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateTravelNotice.');\n        }\n        const _travelNotice = requestParameters[\"travelNotice\"];\n        return `${this.configuration.basePath}/client-api/v2/travel-notices/${encodeURIComponent(String(_id))}`;\n    }\n}\nTravelNoticesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: TravelNoticesHttpService, deps: [{ token: i1.HttpClient }, { token: CARDS_BASE_PATH, optional: true }, { token: CardsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nTravelNoticesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: TravelNoticesHttpService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: TravelNoticesHttpService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CARDS_BASE_PATH]\n                }] }, { type: CardsConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst TravelNoticesHttpServiceCreateTravelNoticeMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/travel-notices\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"id\": \"sara-travel-notice-1\",\n                    \"cardIds\": [\"sara-card-1\"],\n                    \"departureDate\": \"2020-05-06\",\n                    \"arrivalDate\": \"2020-05-10\",\n                    \"destinations\": [{\n                            \"country\": \"USA\",\n                            \"region\": \"US-TX\"\n                        }]\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/requestBody/content/application~1json/example\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"john-travel-notice-1\",\n                    \"cardIds\": [\"john-card-1\", \"john-card-2\"],\n                    \"departureDate\": \"2020-01-09\",\n                    \"arrivalDate\": \"2020-01-18\",\n                    \"destinations\": [{\n                            \"country\": \"NL\"\n                        }],\n                    \"contact\": {\n                        \"phoneNumber\": \"+1 646 432 3000\"\n                    }\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"destinations\": [{\n                            \"country\": \"country\",\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"region\": \"region\"\n                        }, {\n                            \"country\": \"country\",\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"region\": \"region\"\n                        }],\n                    \"contact\": {\n                        \"phoneNumber\": \"phoneNumber\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        }\n                    },\n                    \"id\": \"id\",\n                    \"departureDate\": \"departureDate\",\n                    \"cardIds\": [\"cardIds\", \"cardIds\"],\n                    \"arrivalDate\": \"arrivalDate\"\n                }\n            },\n        ]\n    }]);\nconst TravelNoticesHttpServiceDeleteTravelNoticeByIdMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/travel-notices/{id}\",\n        method: \"DELETE\",\n        responses: [\n            {\n                status: 204,\n                body: \"\"\n            },\n        ]\n    }]);\nconst TravelNoticesHttpServiceGetTravelNoticeByIdMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/travel-notices/{id}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/sara/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/requestBody/content/application~1json/example\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/john/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"destinations\": [{\n                            \"country\": \"country\",\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"region\": \"region\"\n                        }, {\n                            \"country\": \"country\",\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"region\": \"region\"\n                        }],\n                    \"contact\": {\n                        \"phoneNumber\": \"phoneNumber\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        }\n                    },\n                    \"id\": \"id\",\n                    \"departureDate\": \"departureDate\",\n                    \"cardIds\": [\"cardIds\", \"cardIds\"],\n                    \"arrivalDate\": \"arrivalDate\"\n                }\n            },\n        ]\n    }]);\nconst TravelNoticesHttpServiceGetTravelNoticesMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/travel-notices\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"sara-travel-notice-1\",\n                        \"cardIds\": [\"sara-card-1\", \"sara-card-4\"],\n                        \"departureDate\": \"2020-01-09\",\n                        \"arrivalDate\": \"2020-01-18\",\n                        \"destinations\": [{\n                                \"country\": \"MEX\"\n                            }, {\n                                \"country\": \"USA\",\n                                \"region\": \"US-TX\"\n                            }]\n                    }, {\n                        \"id\": \"sara-travel-notice-2\",\n                        \"cardIds\": [\"sara-card-1\", \"sara-card-2\", \"sara-card-4\", \"sara-card-5\"],\n                        \"departureDate\": \"2019-12-10\",\n                        \"arrivalDate\": \"2019-12-23\",\n                        \"destinations\": [{\n                                \"country\": \"JPN\"\n                            }, {\n                                \"country\": \"USA\",\n                                \"region\": \"US-CA\"\n                            }],\n                        \"contact\": {\n                            \"phoneNumber\": \"+1 646 432 3000\"\n                        }\n                    }]\n            },\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"elon-travel-notice-1\",\n                        \"cardIds\": [\"elon-card-1\"],\n                        \"departureDate\": \"2020-05-06\",\n                        \"arrivalDate\": \"2020-05-10\",\n                        \"destinations\": [{\n                                \"country\": \"USA\",\n                                \"region\": \"US-TX\"\n                            }, {\n                                \"country\": \"MEX\"\n                            }]\n                    }, {\n                        \"id\": \"elon-travel-notice-2\",\n                        \"cardIds\": [\"elon-card-1\", \"elon-card-2\", \"elon-card-3\", \"elon-card-4\"],\n                        \"departureDate\": \"2019-12-10\",\n                        \"arrivalDate\": \"2019-12-23\",\n                        \"destinations\": [{\n                                \"country\": \"JPN\"\n                            }, {\n                                \"country\": \"USA\",\n                                \"region\": \"US-CA\"\n                            }],\n                        \"contact\": {\n                            \"phoneNumber\": \"+1 646 432 3000\"\n                        }\n                    }, {\n                        \"id\": \"elon-travel-notice-3\",\n                        \"cardIds\": [\"elon-card-4\"],\n                        \"departureDate\": \"2019-07-23\",\n                        \"arrivalDate\": \"2020-08-11\",\n                        \"destinations\": [{\n                                \"country\": \"KHM\"\n                            }, {\n                                \"country\": \"KOR\"\n                            }, {\n                                \"country\": \"IND\"\n                            }],\n                        \"contact\": {\n                            \"phoneNumber\": \"+1 646 432 3000\"\n                        }\n                    }]\n            },\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"john-travel-notice-1\",\n                        \"cardIds\": [\"john-card-1\", \"john-card-2\"],\n                        \"departureDate\": \"2020-01-09\",\n                        \"arrivalDate\": \"2020-01-18\",\n                        \"destinations\": [{\n                                \"country\": \"NL\"\n                            }],\n                        \"contact\": {\n                            \"phoneNumber\": \"+1 646 432 3000\"\n                        }\n                    }]\n            },\n            {\n                status: 200,\n                body: []\n            },\n            {\n                status: 200,\n                body: []\n            },\n        ]\n    }]);\nconst TravelNoticesHttpServiceUpdateTravelNoticeMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/travel-notices/{id}\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/sara/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"elon-travel-notice-1\",\n                    \"cardIds\": [\"elon-card-1\", \"elon-card-6\"],\n                    \"departureDate\": \"2020-05-06\",\n                    \"arrivalDate\": \"2020-05-10\",\n                    \"destinations\": [{\n                            \"country\": \"USA\",\n                            \"region\": \"US-TX\"\n                        }, {\n                            \"country\": \"MEX\"\n                        }],\n                    \"contact\": {\n                        \"phoneNumber\": \"Other_Number\"\n                    }\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/john/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"destinations\": [{\n                            \"country\": \"country\",\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"region\": \"region\"\n                        }, {\n                            \"country\": \"country\",\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"region\": \"region\"\n                        }],\n                    \"contact\": {\n                        \"phoneNumber\": \"phoneNumber\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        }\n                    },\n                    \"id\": \"id\",\n                    \"departureDate\": \"departureDate\",\n                    \"cardIds\": [\"cardIds\", \"cardIds\"],\n                    \"arrivalDate\": \"arrivalDate\"\n                }\n            },\n        ]\n    }]);\nconst TravelNoticesHttpServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/client-api/v2/travel-notices\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"id\": \"sara-travel-notice-1\",\n                    \"cardIds\": [\"sara-card-1\"],\n                    \"departureDate\": \"2020-05-06\",\n                    \"arrivalDate\": \"2020-05-10\",\n                    \"destinations\": [{\n                            \"country\": \"USA\",\n                            \"region\": \"US-TX\"\n                        }]\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/requestBody/content/application~1json/example\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"john-travel-notice-1\",\n                    \"cardIds\": [\"john-card-1\", \"john-card-2\"],\n                    \"departureDate\": \"2020-01-09\",\n                    \"arrivalDate\": \"2020-01-18\",\n                    \"destinations\": [{\n                            \"country\": \"NL\"\n                        }],\n                    \"contact\": {\n                        \"phoneNumber\": \"+1 646 432 3000\"\n                    }\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"destinations\": [{\n                            \"country\": \"country\",\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"region\": \"region\"\n                        }, {\n                            \"country\": \"country\",\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"region\": \"region\"\n                        }],\n                    \"contact\": {\n                        \"phoneNumber\": \"phoneNumber\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        }\n                    },\n                    \"id\": \"id\",\n                    \"departureDate\": \"departureDate\",\n                    \"cardIds\": [\"cardIds\", \"cardIds\"],\n                    \"arrivalDate\": \"arrivalDate\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/travel-notices/{id}\",\n        method: \"DELETE\",\n        responses: [\n            {\n                status: 204,\n                body: \"\"\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/travel-notices/{id}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/sara/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/requestBody/content/application~1json/example\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/john/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"destinations\": [{\n                            \"country\": \"country\",\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"region\": \"region\"\n                        }, {\n                            \"country\": \"country\",\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"region\": \"region\"\n                        }],\n                    \"contact\": {\n                        \"phoneNumber\": \"phoneNumber\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        }\n                    },\n                    \"id\": \"id\",\n                    \"departureDate\": \"departureDate\",\n                    \"cardIds\": [\"cardIds\", \"cardIds\"],\n                    \"arrivalDate\": \"arrivalDate\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/travel-notices\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"sara-travel-notice-1\",\n                        \"cardIds\": [\"sara-card-1\", \"sara-card-4\"],\n                        \"departureDate\": \"2020-01-09\",\n                        \"arrivalDate\": \"2020-01-18\",\n                        \"destinations\": [{\n                                \"country\": \"MEX\"\n                            }, {\n                                \"country\": \"USA\",\n                                \"region\": \"US-TX\"\n                            }]\n                    }, {\n                        \"id\": \"sara-travel-notice-2\",\n                        \"cardIds\": [\"sara-card-1\", \"sara-card-2\", \"sara-card-4\", \"sara-card-5\"],\n                        \"departureDate\": \"2019-12-10\",\n                        \"arrivalDate\": \"2019-12-23\",\n                        \"destinations\": [{\n                                \"country\": \"JPN\"\n                            }, {\n                                \"country\": \"USA\",\n                                \"region\": \"US-CA\"\n                            }],\n                        \"contact\": {\n                            \"phoneNumber\": \"+1 646 432 3000\"\n                        }\n                    }]\n            },\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"elon-travel-notice-1\",\n                        \"cardIds\": [\"elon-card-1\"],\n                        \"departureDate\": \"2020-05-06\",\n                        \"arrivalDate\": \"2020-05-10\",\n                        \"destinations\": [{\n                                \"country\": \"USA\",\n                                \"region\": \"US-TX\"\n                            }, {\n                                \"country\": \"MEX\"\n                            }]\n                    }, {\n                        \"id\": \"elon-travel-notice-2\",\n                        \"cardIds\": [\"elon-card-1\", \"elon-card-2\", \"elon-card-3\", \"elon-card-4\"],\n                        \"departureDate\": \"2019-12-10\",\n                        \"arrivalDate\": \"2019-12-23\",\n                        \"destinations\": [{\n                                \"country\": \"JPN\"\n                            }, {\n                                \"country\": \"USA\",\n                                \"region\": \"US-CA\"\n                            }],\n                        \"contact\": {\n                            \"phoneNumber\": \"+1 646 432 3000\"\n                        }\n                    }, {\n                        \"id\": \"elon-travel-notice-3\",\n                        \"cardIds\": [\"elon-card-4\"],\n                        \"departureDate\": \"2019-07-23\",\n                        \"arrivalDate\": \"2020-08-11\",\n                        \"destinations\": [{\n                                \"country\": \"KHM\"\n                            }, {\n                                \"country\": \"KOR\"\n                            }, {\n                                \"country\": \"IND\"\n                            }],\n                        \"contact\": {\n                            \"phoneNumber\": \"+1 646 432 3000\"\n                        }\n                    }]\n            },\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"john-travel-notice-1\",\n                        \"cardIds\": [\"john-card-1\", \"john-card-2\"],\n                        \"departureDate\": \"2020-01-09\",\n                        \"arrivalDate\": \"2020-01-18\",\n                        \"destinations\": [{\n                                \"country\": \"NL\"\n                            }],\n                        \"contact\": {\n                            \"phoneNumber\": \"+1 646 432 3000\"\n                        }\n                    }]\n            },\n            {\n                status: 200,\n                body: []\n            },\n            {\n                status: 200,\n                body: []\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/travel-notices/{id}\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/sara/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"id\": \"elon-travel-notice-1\",\n                    \"cardIds\": [\"elon-card-1\", \"elon-card-6\"],\n                    \"departureDate\": \"2020-05-06\",\n                    \"arrivalDate\": \"2020-05-10\",\n                    \"destinations\": [{\n                            \"country\": \"USA\",\n                            \"region\": \"US-TX\"\n                        }, {\n                            \"country\": \"MEX\"\n                        }],\n                    \"contact\": {\n                        \"phoneNumber\": \"Other_Number\"\n                    }\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/paths/~1client-api~1v2~1travel-notices/post/responses/200/content/application~1json/examples/john/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"additions\": {\n                        \"key\": \"additions\"\n                    },\n                    \"destinations\": [{\n                            \"country\": \"country\",\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"region\": \"region\"\n                        }, {\n                            \"country\": \"country\",\n                            \"additions\": {\n                                \"key\": \"additions\"\n                            },\n                            \"region\": \"region\"\n                        }],\n                    \"contact\": {\n                        \"phoneNumber\": \"phoneNumber\",\n                        \"additions\": {\n                            \"key\": \"additions\"\n                        }\n                    },\n                    \"id\": \"id\",\n                    \"departureDate\": \"departureDate\",\n                    \"cardIds\": [\"cardIds\", \"cardIds\"],\n                    \"arrivalDate\": \"arrivalDate\"\n                }\n            },\n        ]\n    },\n]);\n\nexport { CARDS_BASE_PATH, COLLECTION_FORMATS, CONFIG_TOKEN, CardsApiModule, CardsConfiguration, CardsHttpService, CardsHttpServiceActivateMocksProvider, CardsHttpServiceChangeLimitsMocksProvider, CardsHttpServiceGetCardByIdMocksProvider, CardsHttpServiceGetCardsMocksProvider, CardsHttpServiceMocksProvider, CardsHttpServiceRequestPinMocksProvider, CardsHttpServiceRequestReplacementMocksProvider, CardsHttpServiceResetPinMocksProvider, CardsHttpServiceUpdateLockStatusMocksProvider, DeliveryTransitStep, LockStatus, TravelNoticesHttpService, TravelNoticesHttpServiceCreateTravelNoticeMocksProvider, TravelNoticesHttpServiceDeleteTravelNoticeByIdMocksProvider, TravelNoticesHttpServiceGetTravelNoticeByIdMocksProvider, TravelNoticesHttpServiceGetTravelNoticesMocksProvider, TravelNoticesHttpServiceMocksProvider, TravelNoticesHttpServiceUpdateTravelNoticeMocksProvider };\n"]},"metadata":{},"sourceType":"module"}