{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { switchMap } from 'rxjs/operators';\nimport { of, from, Observable } from 'rxjs';\nimport * as i1 from '@backbase/ui-ang/css-variables-lib';\nimport { CssVariablesService } from '@backbase/ui-ang/css-variables-lib';\n/**\n * @name MediaQueryService\n *\n * @dynamic (to suppress error with resolving Document type during compilation)\n *\n * @description\n * MediaQueryService is a utility for evaluating media queries and reacting to their changing.\n *\n * @example\n * import { MediaQueryService } from '@backbase/foundation-ang/ui';\n *\n * @Component({...})\n * class MyComponent {\n *\n *   constructor(private readonly mediaQueryService: MediaQueryService) {}\n *\n *   // with standard grid breakpoint\n *   readonly isStandardMdMedia$ = this.mediaQueryService.isMediaBreakpointMatches('max-width', 'md');\n *   // custom value\n *   readonly isCustomMedia$ = this.mediaQueryService.isMediaBreakpointMatches('max-width', 500);\n */\n\nclass MediaQueryService {\n  constructor(document, cssVariablesService, ngZone) {\n    this.document = document;\n    this.cssVariablesService = cssVariablesService;\n    this.ngZone = ngZone;\n  }\n  /**\n   * Observe media changes for current window.\n   *\n   * @param value - breakpoint value (could be custom number/standard grid breakpoint)\n   * @param type - breakpoint type\n   */\n\n\n  isMediaBreakpointMatches(type, value) {\n    const isCustomBreakpoint = typeof value === 'number';\n\n    if (!isCustomBreakpoint && !this.cssVariablesService) {\n      throw new Error('In order to use media breakpoints, please add provider for CssVariablesService.');\n    }\n\n    const mediaBreakpointValue$ = isCustomBreakpoint ? of(`${value}px`) : from(this.cssVariablesService.getCssVariable(`--breakpoint-${value}`));\n    return mediaBreakpointValue$.pipe(switchMap(mediaWidth => {\n      const mediaQueryList = this.document.defaultView.matchMedia(`(${type}: ${mediaWidth})`);\n      return this.getMediaBreakpoints(mediaQueryList);\n    }));\n  }\n\n  getMediaBreakpoints(mediaQueryList) {\n    return new Observable(observer => {\n      /**\n       *   MediaQueryList inherited form EventTarget in some browsers.\n       *   Therefore methods like `addEventListener` or `removeEventListener` doesn't work in Safari and IE.\n       *   For more details see:\n       *   https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList#Browser_compatibility\n       */\n      const isFunctionAvailable = Boolean(mediaQueryList.addEventListener);\n\n      const mediaListener = ({\n        matches\n      }) => {\n        observer.next(matches);\n        /**\n         * Safari and IE does not inherit Event interface.\n         * It means that on media match, event will not be dispatched and Angular will not update UI.\n         * Simulating async event to cover this gap.\n         */\n\n        if (this.ngZone.isStable) {\n          this.ngZone.run(() => Promise.resolve());\n        }\n      }; // emit initial match\n\n\n      observer.next(mediaQueryList.matches);\n\n      if (isFunctionAvailable) {\n        mediaQueryList.addEventListener('change', mediaListener);\n      } else {\n        mediaQueryList.addListener(mediaListener);\n      }\n\n      return () => {\n        if (isFunctionAvailable) {\n          mediaQueryList.removeEventListener('change', mediaListener);\n        } else {\n          mediaQueryList.removeListener(mediaListener);\n        }\n      };\n    });\n  }\n\n}\n\nMediaQueryService.ɵfac = function MediaQueryService_Factory(t) {\n  return new (t || MediaQueryService)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1.CssVariablesService, 8), i0.ɵɵinject(i0.NgZone));\n};\n\nMediaQueryService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MediaQueryService,\n  factory: MediaQueryService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MediaQueryService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1.CssVariablesService,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nclass MediaQueryModule {}\n\nMediaQueryModule.ɵfac = function MediaQueryModule_Factory(t) {\n  return new (t || MediaQueryModule)();\n};\n\nMediaQueryModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MediaQueryModule\n});\nMediaQueryModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [CssVariablesService, MediaQueryService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MediaQueryModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      providers: [CssVariablesService, MediaQueryService]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MediaQueryModule, MediaQueryService };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-media-query-lib.js"],"names":["i0","Injectable","Inject","Optional","NgModule","DOCUMENT","CommonModule","switchMap","of","from","Observable","i1","CssVariablesService","MediaQueryService","constructor","document","cssVariablesService","ngZone","isMediaBreakpointMatches","type","value","isCustomBreakpoint","Error","mediaBreakpointValue$","getCssVariable","pipe","mediaWidth","mediaQueryList","defaultView","matchMedia","getMediaBreakpoints","observer","isFunctionAvailable","Boolean","addEventListener","mediaListener","matches","next","isStable","run","Promise","resolve","addListener","removeEventListener","removeListener","ɵfac","NgZone","ɵprov","Document","decorators","args","MediaQueryModule","ɵmod","ɵinj","imports","providers"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { switchMap } from 'rxjs/operators';\nimport { of, from, Observable } from 'rxjs';\nimport * as i1 from '@backbase/ui-ang/css-variables-lib';\nimport { CssVariablesService } from '@backbase/ui-ang/css-variables-lib';\n\n/**\n * @name MediaQueryService\n *\n * @dynamic (to suppress error with resolving Document type during compilation)\n *\n * @description\n * MediaQueryService is a utility for evaluating media queries and reacting to their changing.\n *\n * @example\n * import { MediaQueryService } from '@backbase/foundation-ang/ui';\n *\n * @Component({...})\n * class MyComponent {\n *\n *   constructor(private readonly mediaQueryService: MediaQueryService) {}\n *\n *   // with standard grid breakpoint\n *   readonly isStandardMdMedia$ = this.mediaQueryService.isMediaBreakpointMatches('max-width', 'md');\n *   // custom value\n *   readonly isCustomMedia$ = this.mediaQueryService.isMediaBreakpointMatches('max-width', 500);\n */\nclass MediaQueryService {\n    constructor(document, cssVariablesService, ngZone) {\n        this.document = document;\n        this.cssVariablesService = cssVariablesService;\n        this.ngZone = ngZone;\n    }\n    /**\n     * Observe media changes for current window.\n     *\n     * @param value - breakpoint value (could be custom number/standard grid breakpoint)\n     * @param type - breakpoint type\n     */\n    isMediaBreakpointMatches(type, value) {\n        const isCustomBreakpoint = typeof value === 'number';\n        if (!isCustomBreakpoint && !this.cssVariablesService) {\n            throw new Error('In order to use media breakpoints, please add provider for CssVariablesService.');\n        }\n        const mediaBreakpointValue$ = isCustomBreakpoint\n            ? of(`${value}px`)\n            : from(this.cssVariablesService.getCssVariable(`--breakpoint-${value}`));\n        return mediaBreakpointValue$.pipe(switchMap((mediaWidth) => {\n            const mediaQueryList = this.document.defaultView.matchMedia(`(${type}: ${mediaWidth})`);\n            return this.getMediaBreakpoints(mediaQueryList);\n        }));\n    }\n    getMediaBreakpoints(mediaQueryList) {\n        return new Observable((observer) => {\n            /**\n             *   MediaQueryList inherited form EventTarget in some browsers.\n             *   Therefore methods like `addEventListener` or `removeEventListener` doesn't work in Safari and IE.\n             *   For more details see:\n             *   https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList#Browser_compatibility\n             */\n            const isFunctionAvailable = Boolean(mediaQueryList.addEventListener);\n            const mediaListener = ({ matches }) => {\n                observer.next(matches);\n                /**\n                 * Safari and IE does not inherit Event interface.\n                 * It means that on media match, event will not be dispatched and Angular will not update UI.\n                 * Simulating async event to cover this gap.\n                 */\n                if (this.ngZone.isStable) {\n                    this.ngZone.run(() => Promise.resolve());\n                }\n            };\n            // emit initial match\n            observer.next(mediaQueryList.matches);\n            if (isFunctionAvailable) {\n                mediaQueryList.addEventListener('change', mediaListener);\n            }\n            else {\n                mediaQueryList.addListener(mediaListener);\n            }\n            return () => {\n                if (isFunctionAvailable) {\n                    mediaQueryList.removeEventListener('change', mediaListener);\n                }\n                else {\n                    mediaQueryList.removeListener(mediaListener);\n                }\n            };\n        });\n    }\n}\nMediaQueryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: MediaQueryService, deps: [{ token: DOCUMENT }, { token: i1.CssVariablesService, optional: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaQueryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: MediaQueryService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: MediaQueryService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1.CssVariablesService, decorators: [{\n                    type: Optional\n                }] }, { type: i0.NgZone }]; } });\n\nclass MediaQueryModule {\n}\nMediaQueryModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: MediaQueryModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMediaQueryModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: MediaQueryModule, imports: [CommonModule] });\nMediaQueryModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: MediaQueryModule, providers: [CssVariablesService, MediaQueryService], imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: MediaQueryModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    providers: [CssVariablesService, MediaQueryService],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MediaQueryModule, MediaQueryService };\n"]},"metadata":{},"sourceType":"module"}