{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i2 from '@backbase/foundation-ang/data-http';\nimport { createMocks } from '@backbase/foundation-ang/data-http';\nvar GetAuthorizedUserItem;\n\n(function (GetAuthorizedUserItem) {\n  GetAuthorizedUserItem.StatusEnum = {\n    ACTIVE: 'ACTIVE',\n    AWAITINGREGISTRATION: 'AWAITING_REGISTRATION',\n    PAUSED: 'PAUSED'\n  };\n})(GetAuthorizedUserItem || (GetAuthorizedUserItem = {}));\n\nconst AUTHORIZED_USER_BASE_PATH = new InjectionToken('AUTHORIZED_USER_BASE_PATH');\nconst COLLECTION_FORMATS = {\n  'csv': ',',\n  'tsv': '   ',\n  'ssv': ' ',\n  'pipes': '|'\n};\n\nclass AuthorizedUserConfiguration {\n  constructor(configurationParameters = {}) {\n    this.apiKeys = configurationParameters.apiKeys;\n    this.username = configurationParameters.username;\n    this.password = configurationParameters.password;\n    this.accessToken = configurationParameters.accessToken;\n    this.basePath = configurationParameters.basePath;\n    this.withCredentials = configurationParameters.withCredentials;\n    this.encoder = configurationParameters.encoder;\n\n    if (configurationParameters.credentials) {\n      this.credentials = configurationParameters.credentials;\n    } else {\n      this.credentials = {};\n    }\n  }\n\n  selectHeaderContentType(contentTypes) {\n    if (contentTypes.length === 0) {\n      return undefined;\n    }\n\n    const type = contentTypes.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return contentTypes[0];\n    }\n\n    return type;\n  }\n\n  selectHeaderAccept(accepts) {\n    if (accepts.length === 0) {\n      return undefined;\n    }\n\n    const type = accepts.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return accepts[0];\n    }\n\n    return type;\n  }\n\n  isJsonMime(mime) {\n    const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n\n  lookupCredential(key) {\n    const value = this.credentials[key];\n    return typeof value === 'function' ? value() : value;\n  }\n\n}\n\nconst CONFIG_TOKEN = new InjectionToken('api-data-module AuthorizedUserConfiguration');\n\nclass AuthorizedUserApiModule {\n  constructor(parentModule, http, dataModulesManager, config) {\n    if (parentModule) {\n      throw new Error('AuthorizedUserApiModule is already loaded. Import in your base AppModule only.');\n    }\n\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' + 'See also https://github.com/angular/angular/issues/20575');\n    }\n\n    if (dataModulesManager) {\n      dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n        apiRoot: '',\n        servicePath: config.basePath || '',\n        headers: {}\n      });\n    }\n  }\n\n  static forRoot(configurationFactory) {\n    return {\n      ngModule: AuthorizedUserApiModule,\n      providers: [{\n        provide: AuthorizedUserConfiguration,\n        useFactory: configurationFactory\n      }]\n    };\n  }\n\n}\n\nAuthorizedUserApiModule.ɵfac = function AuthorizedUserApiModule_Factory(t) {\n  return new (t || AuthorizedUserApiModule)(i0.ɵɵinject(AuthorizedUserApiModule, 12), i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DataModulesManager, 8), i0.ɵɵinject(AuthorizedUserConfiguration));\n};\n\nAuthorizedUserApiModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AuthorizedUserApiModule\n});\nAuthorizedUserApiModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [],\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthorizedUserApiModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [],\n      exports: [],\n      providers: []\n    }]\n  }], function () {\n    return [{\n      type: AuthorizedUserApiModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: i1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.DataModulesManager,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: AuthorizedUserConfiguration\n    }];\n  }, null);\n})();\n\nclass CustomHttpParameterCodec {\n  encodeKey(k) {\n    return encodeURIComponent(k);\n  }\n\n  encodeValue(v) {\n    return encodeURIComponent(v);\n  }\n\n  decodeKey(k) {\n    return decodeURIComponent(k);\n  }\n\n  decodeValue(v) {\n    return decodeURIComponent(v);\n  }\n\n}\n\nclass AuthorizedUserService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new AuthorizedUserConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  createAuthorizedUser(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _postAuthorizedUser = requestParameters[\"postAuthorizedUser\"];\n\n    if (_postAuthorizedUser === null || _postAuthorizedUser === undefined) {\n      throw new Error('Required parameter postAuthorizedUser was null or undefined when calling createAuthorizedUser.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users`, _postAuthorizedUser, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  createAuthorizedUserUrl(requestParameters) {\n    const _postAuthorizedUser = requestParameters[\"postAuthorizedUser\"];\n\n    if (_postAuthorizedUser === null || _postAuthorizedUser === undefined) {\n      throw new Error('Required parameter postAuthorizedUser was null or undefined when calling createAuthorizedUser.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users`;\n  }\n\n  deleteAuthorizedUser(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _authorizedUserId = requestParameters[\"authorizedUserId\"];\n\n    if (_authorizedUserId === null || _authorizedUserId === undefined) {\n      throw new Error('Required parameter authorizedUserId was null or undefined when calling deleteAuthorizedUser.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  deleteAuthorizedUserUrl(requestParameters) {\n    const _authorizedUserId = requestParameters[\"authorizedUserId\"];\n\n    if (_authorizedUserId === null || _authorizedUserId === undefined) {\n      throw new Error('Required parameter authorizedUserId was null or undefined when calling deleteAuthorizedUser.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}`;\n  }\n\n  getAuthorizedUsers(observe = 'body', reportProgress = false, options) {\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getAuthorizedUsersUrl() {\n    return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users`;\n  }\n\n  getPermissionsByAuthorizedUserId(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _authorizedUserId = requestParameters[\"authorizedUserId\"];\n\n    if (_authorizedUserId === null || _authorizedUserId === undefined) {\n      throw new Error('Required parameter authorizedUserId was null or undefined when calling getPermissionsByAuthorizedUserId.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/permissions`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getPermissionsByAuthorizedUserIdUrl(requestParameters) {\n    const _authorizedUserId = requestParameters[\"authorizedUserId\"];\n\n    if (_authorizedUserId === null || _authorizedUserId === undefined) {\n      throw new Error('Required parameter authorizedUserId was null or undefined when calling getPermissionsByAuthorizedUserId.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/permissions`;\n  }\n\n  updatePermissionsForAuthorizedUser(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _authorizedUserId = requestParameters[\"authorizedUserId\"];\n\n    if (_authorizedUserId === null || _authorizedUserId === undefined) {\n      throw new Error('Required parameter authorizedUserId was null or undefined when calling updatePermissionsForAuthorizedUser.');\n    }\n\n    const _putAuthorizedUserPermissions = requestParameters[\"putAuthorizedUserPermissions\"];\n\n    if (_putAuthorizedUserPermissions === null || _putAuthorizedUserPermissions === undefined) {\n      throw new Error('Required parameter putAuthorizedUserPermissions was null or undefined when calling updatePermissionsForAuthorizedUser.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/permissions`, _putAuthorizedUserPermissions, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  updatePermissionsForAuthorizedUserUrl(requestParameters) {\n    const _authorizedUserId = requestParameters[\"authorizedUserId\"];\n\n    if (_authorizedUserId === null || _authorizedUserId === undefined) {\n      throw new Error('Required parameter authorizedUserId was null or undefined when calling updatePermissionsForAuthorizedUser.');\n    }\n\n    const _putAuthorizedUserPermissions = requestParameters[\"putAuthorizedUserPermissions\"];\n\n    if (_putAuthorizedUserPermissions === null || _putAuthorizedUserPermissions === undefined) {\n      throw new Error('Required parameter putAuthorizedUserPermissions was null or undefined when calling updatePermissionsForAuthorizedUser.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/permissions`;\n  }\n\n  updateStatusForAuthorizedUser(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _authorizedUserId = requestParameters[\"authorizedUserId\"];\n\n    if (_authorizedUserId === null || _authorizedUserId === undefined) {\n      throw new Error('Required parameter authorizedUserId was null or undefined when calling updateStatusForAuthorizedUser.');\n    }\n\n    const _updateAuthorizedUserStatus = requestParameters[\"updateAuthorizedUserStatus\"];\n\n    if (_updateAuthorizedUserStatus === null || _updateAuthorizedUserStatus === undefined) {\n      throw new Error('Required parameter updateAuthorizedUserStatus was null or undefined when calling updateStatusForAuthorizedUser.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/status`, _updateAuthorizedUserStatus, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  updateStatusForAuthorizedUserUrl(requestParameters) {\n    const _authorizedUserId = requestParameters[\"authorizedUserId\"];\n\n    if (_authorizedUserId === null || _authorizedUserId === undefined) {\n      throw new Error('Required parameter authorizedUserId was null or undefined when calling updateStatusForAuthorizedUser.');\n    }\n\n    const _updateAuthorizedUserStatus = requestParameters[\"updateAuthorizedUserStatus\"];\n\n    if (_updateAuthorizedUserStatus === null || _updateAuthorizedUserStatus === undefined) {\n      throw new Error('Required parameter updateAuthorizedUserStatus was null or undefined when calling updateStatusForAuthorizedUser.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/status`;\n  }\n\n}\n\nAuthorizedUserService.ɵfac = function AuthorizedUserService_Factory(t) {\n  return new (t || AuthorizedUserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(AUTHORIZED_USER_BASE_PATH, 8), i0.ɵɵinject(AuthorizedUserConfiguration, 8));\n};\n\nAuthorizedUserService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthorizedUserService,\n  factory: AuthorizedUserService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthorizedUserService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [AUTHORIZED_USER_BASE_PATH]\n      }]\n    }, {\n      type: AuthorizedUserConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst AuthorizedUserServiceCreateAuthorizedUserMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/users/me/authorized-users\",\n  method: \"POST\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}]);\nconst AuthorizedUserServiceDeleteAuthorizedUserMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/users/me/authorized-users/{authorizedUserId}\",\n  method: \"DELETE\",\n  responses: [{\n    status: 204,\n    body: \"\"\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}]);\nconst AuthorizedUserServiceGetAuthorizedUsersMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/users/me/authorized-users\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"id\": \"376069ae-f628-4569-8bb0-ec1fce83ebe9\",\n      \"said\": \"53251f6b-f081-4e22-a977-93efaa47e449\",\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"email\": \"john.doe@email.com\",\n      \"mobileNumber\": \"+44 012345 67890\",\n      \"username\": \"john.doe.145764\",\n      \"status\": \"AWAITING_REGISTRATION\",\n      \"permissions\": [{\n        \"accountId\": \"1cdb2224-8926-4b4d-a99f-1c9dfbbb4691\",\n        \"level\": \"BASIC-001\"\n      }, {\n        \"accountId\": \"1cdb2224-8926-4b4d-a99f-1c9dfbbb4692\",\n        \"level\": \"PARTIAL-002\"\n      }, {\n        \"accountId\": \"3cdb2224-8926-4b4d-a99f-1c9dfbbb4600\",\n        \"level\": \"FULL-003\"\n      }]\n    }]\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}]);\nconst AuthorizedUserServiceGetPermissionsByAuthorizedUserIdMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/users/me/authorized-users/{authorizedUserId}/permissions\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"accountId\": \"1cdb2224-8926-4b4d-a99f-1c9dfbbb4691\",\n      \"level\": \"BASIC-001\"\n    }, {\n      \"accountId\": \"1cdb2224-8926-4b4d-a99f-1c9dfbbb4692\",\n      \"level\": \"PARTIAL-002\"\n    }, {\n      \"accountId\": \"3cdb2224-8926-4b4d-a99f-1c9dfbbb4600\",\n      \"level\": \"FULL-003\"\n    }]\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}]);\nconst AuthorizedUserServiceUpdatePermissionsForAuthorizedUserMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/users/me/authorized-users/{authorizedUserId}/permissions\",\n  method: \"PUT\",\n  responses: [{\n    status: 204,\n    body: \"\"\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}]);\nconst AuthorizedUserServiceUpdateStatusForAuthorizedUserMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/users/me/authorized-users/{authorizedUserId}/status\",\n  method: \"PUT\",\n  responses: [{\n    status: 204,\n    body: \"\"\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}]);\nconst AuthorizedUserServiceMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/users/me/authorized-users\",\n  method: \"POST\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/users/me/authorized-users/{authorizedUserId}\",\n  method: \"DELETE\",\n  responses: [{\n    status: 204,\n    body: \"\"\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/users/me/authorized-users\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"id\": \"376069ae-f628-4569-8bb0-ec1fce83ebe9\",\n      \"said\": \"53251f6b-f081-4e22-a977-93efaa47e449\",\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"email\": \"john.doe@email.com\",\n      \"mobileNumber\": \"+44 012345 67890\",\n      \"username\": \"john.doe.145764\",\n      \"status\": \"AWAITING_REGISTRATION\",\n      \"permissions\": [{\n        \"accountId\": \"1cdb2224-8926-4b4d-a99f-1c9dfbbb4691\",\n        \"level\": \"BASIC-001\"\n      }, {\n        \"accountId\": \"1cdb2224-8926-4b4d-a99f-1c9dfbbb4692\",\n        \"level\": \"PARTIAL-002\"\n      }, {\n        \"accountId\": \"3cdb2224-8926-4b4d-a99f-1c9dfbbb4600\",\n        \"level\": \"FULL-003\"\n      }]\n    }]\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/users/me/authorized-users/{authorizedUserId}/permissions\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"accountId\": \"1cdb2224-8926-4b4d-a99f-1c9dfbbb4691\",\n      \"level\": \"BASIC-001\"\n    }, {\n      \"accountId\": \"1cdb2224-8926-4b4d-a99f-1c9dfbbb4692\",\n      \"level\": \"PARTIAL-002\"\n    }, {\n      \"accountId\": \"3cdb2224-8926-4b4d-a99f-1c9dfbbb4600\",\n      \"level\": \"FULL-003\"\n    }]\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/users/me/authorized-users/{authorizedUserId}/permissions\",\n  method: \"PUT\",\n  responses: [{\n    status: 204,\n    body: \"\"\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/users/me/authorized-users/{authorizedUserId}/status\",\n  method: \"PUT\",\n  responses: [{\n    status: 204,\n    body: \"\"\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}]);\nexport { AUTHORIZED_USER_BASE_PATH, AuthorizedUserApiModule, AuthorizedUserConfiguration, AuthorizedUserService, AuthorizedUserServiceCreateAuthorizedUserMocksProvider, AuthorizedUserServiceDeleteAuthorizedUserMocksProvider, AuthorizedUserServiceGetAuthorizedUsersMocksProvider, AuthorizedUserServiceGetPermissionsByAuthorizedUserIdMocksProvider, AuthorizedUserServiceMocksProvider, AuthorizedUserServiceUpdatePermissionsForAuthorizedUserMocksProvider, AuthorizedUserServiceUpdateStatusForAuthorizedUserMocksProvider, COLLECTION_FORMATS, CONFIG_TOKEN, GetAuthorizedUserItem };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/authorized-user-http-ang/fesm2015/backbase-authorized-user-http-ang.js"],"names":["i0","InjectionToken","NgModule","Optional","SkipSelf","Injectable","Inject","i1","HttpHeaders","i2","createMocks","GetAuthorizedUserItem","StatusEnum","ACTIVE","AWAITINGREGISTRATION","PAUSED","AUTHORIZED_USER_BASE_PATH","COLLECTION_FORMATS","AuthorizedUserConfiguration","constructor","configurationParameters","apiKeys","username","password","accessToken","basePath","withCredentials","encoder","credentials","selectHeaderContentType","contentTypes","length","undefined","type","find","x","isJsonMime","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","lookupCredential","key","value","CONFIG_TOKEN","AuthorizedUserApiModule","parentModule","http","dataModulesManager","config","Error","setModuleConfig","apiRoot","servicePath","headers","forRoot","configurationFactory","ngModule","providers","provide","useFactory","ɵfac","HttpClient","DataModulesManager","ɵmod","ɵinj","args","imports","declarations","exports","decorators","CustomHttpParameterCodec","encodeKey","k","encodeURIComponent","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","AuthorizedUserService","httpClient","configuration","defaultHeaders","addToHttpParams","httpParams","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","append","toISOString","substr","Object","keys","createAuthorizedUser","requestParameters","observe","reportProgress","options","_postAuthorizedUser","httpHeaderAcceptSelected","httpHeaderAccept","httpHeaderAccepts","set","consumes","httpContentTypeSelected","responseType","startsWith","post","createAuthorizedUserUrl","deleteAuthorizedUser","_authorizedUserId","delete","String","deleteAuthorizedUserUrl","getAuthorizedUsers","get","getAuthorizedUsersUrl","getPermissionsByAuthorizedUserId","getPermissionsByAuthorizedUserIdUrl","updatePermissionsForAuthorizedUser","_putAuthorizedUserPermissions","put","updatePermissionsForAuthorizedUserUrl","updateStatusForAuthorizedUser","_updateAuthorizedUserStatus","updateStatusForAuthorizedUserUrl","ɵprov","providedIn","AuthorizedUserServiceCreateAuthorizedUserMocksProvider","urlPattern","method","responses","status","body","AuthorizedUserServiceDeleteAuthorizedUserMocksProvider","AuthorizedUserServiceGetAuthorizedUsersMocksProvider","AuthorizedUserServiceGetPermissionsByAuthorizedUserIdMocksProvider","AuthorizedUserServiceUpdatePermissionsForAuthorizedUserMocksProvider","AuthorizedUserServiceUpdateStatusForAuthorizedUserMocksProvider","AuthorizedUserServiceMocksProvider"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i2 from '@backbase/foundation-ang/data-http';\nimport { createMocks } from '@backbase/foundation-ang/data-http';\n\nvar GetAuthorizedUserItem;\n(function (GetAuthorizedUserItem) {\n    GetAuthorizedUserItem.StatusEnum = {\n        ACTIVE: 'ACTIVE',\n        AWAITINGREGISTRATION: 'AWAITING_REGISTRATION',\n        PAUSED: 'PAUSED'\n    };\n})(GetAuthorizedUserItem || (GetAuthorizedUserItem = {}));\n\nconst AUTHORIZED_USER_BASE_PATH = new InjectionToken('AUTHORIZED_USER_BASE_PATH');\nconst COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n};\n\nclass AuthorizedUserConfiguration {\n    constructor(configurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n    selectHeaderContentType(contentTypes) {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n        const type = contentTypes.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n    selectHeaderAccept(accepts) {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n        const type = accepts.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n    isJsonMime(mime) {\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n    lookupCredential(key) {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\nconst CONFIG_TOKEN = new InjectionToken('api-data-module AuthorizedUserConfiguration');\n\nclass AuthorizedUserApiModule {\n    constructor(parentModule, http, dataModulesManager, config) {\n        if (parentModule) {\n            throw new Error('AuthorizedUserApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n                'See also https://github.com/angular/angular/issues/20575');\n        }\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n    static forRoot(configurationFactory) {\n        return {\n            ngModule: AuthorizedUserApiModule,\n            providers: [{ provide: AuthorizedUserConfiguration, useFactory: configurationFactory }]\n        };\n    }\n}\nAuthorizedUserApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: AuthorizedUserApiModule, deps: [{ token: AuthorizedUserApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: AuthorizedUserConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });\nAuthorizedUserApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: AuthorizedUserApiModule });\nAuthorizedUserApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: AuthorizedUserApiModule, providers: [], imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: AuthorizedUserApiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [],\n                    declarations: [],\n                    exports: [],\n                    providers: []\n                }]\n        }], ctorParameters: function () { return [{ type: AuthorizedUserApiModule, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DataModulesManager, decorators: [{\n                    type: Optional\n                }] }, { type: AuthorizedUserConfiguration }]; } });\n\nclass CustomHttpParameterCodec {\n    encodeKey(k) {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v) {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k) {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v) {\n        return decodeURIComponent(v);\n    }\n}\n\nclass AuthorizedUserService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new AuthorizedUserConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    createAuthorizedUser(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _postAuthorizedUser = requestParameters[\"postAuthorizedUser\"];\n        if (_postAuthorizedUser === null || _postAuthorizedUser === undefined) {\n            throw new Error('Required parameter postAuthorizedUser was null or undefined when calling createAuthorizedUser.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users`, _postAuthorizedUser, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    createAuthorizedUserUrl(requestParameters) {\n        const _postAuthorizedUser = requestParameters[\"postAuthorizedUser\"];\n        if (_postAuthorizedUser === null || _postAuthorizedUser === undefined) {\n            throw new Error('Required parameter postAuthorizedUser was null or undefined when calling createAuthorizedUser.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users`;\n    }\n    deleteAuthorizedUser(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _authorizedUserId = requestParameters[\"authorizedUserId\"];\n        if (_authorizedUserId === null || _authorizedUserId === undefined) {\n            throw new Error('Required parameter authorizedUserId was null or undefined when calling deleteAuthorizedUser.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    deleteAuthorizedUserUrl(requestParameters) {\n        const _authorizedUserId = requestParameters[\"authorizedUserId\"];\n        if (_authorizedUserId === null || _authorizedUserId === undefined) {\n            throw new Error('Required parameter authorizedUserId was null or undefined when calling deleteAuthorizedUser.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}`;\n    }\n    getAuthorizedUsers(observe = 'body', reportProgress = false, options) {\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getAuthorizedUsersUrl() {\n        return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users`;\n    }\n    getPermissionsByAuthorizedUserId(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _authorizedUserId = requestParameters[\"authorizedUserId\"];\n        if (_authorizedUserId === null || _authorizedUserId === undefined) {\n            throw new Error('Required parameter authorizedUserId was null or undefined when calling getPermissionsByAuthorizedUserId.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/permissions`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getPermissionsByAuthorizedUserIdUrl(requestParameters) {\n        const _authorizedUserId = requestParameters[\"authorizedUserId\"];\n        if (_authorizedUserId === null || _authorizedUserId === undefined) {\n            throw new Error('Required parameter authorizedUserId was null or undefined when calling getPermissionsByAuthorizedUserId.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/permissions`;\n    }\n    updatePermissionsForAuthorizedUser(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _authorizedUserId = requestParameters[\"authorizedUserId\"];\n        if (_authorizedUserId === null || _authorizedUserId === undefined) {\n            throw new Error('Required parameter authorizedUserId was null or undefined when calling updatePermissionsForAuthorizedUser.');\n        }\n        const _putAuthorizedUserPermissions = requestParameters[\"putAuthorizedUserPermissions\"];\n        if (_putAuthorizedUserPermissions === null || _putAuthorizedUserPermissions === undefined) {\n            throw new Error('Required parameter putAuthorizedUserPermissions was null or undefined when calling updatePermissionsForAuthorizedUser.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/permissions`, _putAuthorizedUserPermissions, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    updatePermissionsForAuthorizedUserUrl(requestParameters) {\n        const _authorizedUserId = requestParameters[\"authorizedUserId\"];\n        if (_authorizedUserId === null || _authorizedUserId === undefined) {\n            throw new Error('Required parameter authorizedUserId was null or undefined when calling updatePermissionsForAuthorizedUser.');\n        }\n        const _putAuthorizedUserPermissions = requestParameters[\"putAuthorizedUserPermissions\"];\n        if (_putAuthorizedUserPermissions === null || _putAuthorizedUserPermissions === undefined) {\n            throw new Error('Required parameter putAuthorizedUserPermissions was null or undefined when calling updatePermissionsForAuthorizedUser.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/permissions`;\n    }\n    updateStatusForAuthorizedUser(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _authorizedUserId = requestParameters[\"authorizedUserId\"];\n        if (_authorizedUserId === null || _authorizedUserId === undefined) {\n            throw new Error('Required parameter authorizedUserId was null or undefined when calling updateStatusForAuthorizedUser.');\n        }\n        const _updateAuthorizedUserStatus = requestParameters[\"updateAuthorizedUserStatus\"];\n        if (_updateAuthorizedUserStatus === null || _updateAuthorizedUserStatus === undefined) {\n            throw new Error('Required parameter updateAuthorizedUserStatus was null or undefined when calling updateStatusForAuthorizedUser.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/status`, _updateAuthorizedUserStatus, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    updateStatusForAuthorizedUserUrl(requestParameters) {\n        const _authorizedUserId = requestParameters[\"authorizedUserId\"];\n        if (_authorizedUserId === null || _authorizedUserId === undefined) {\n            throw new Error('Required parameter authorizedUserId was null or undefined when calling updateStatusForAuthorizedUser.');\n        }\n        const _updateAuthorizedUserStatus = requestParameters[\"updateAuthorizedUserStatus\"];\n        if (_updateAuthorizedUserStatus === null || _updateAuthorizedUserStatus === undefined) {\n            throw new Error('Required parameter updateAuthorizedUserStatus was null or undefined when calling updateStatusForAuthorizedUser.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/status`;\n    }\n}\nAuthorizedUserService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: AuthorizedUserService, deps: [{ token: i1.HttpClient }, { token: AUTHORIZED_USER_BASE_PATH, optional: true }, { token: AuthorizedUserConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nAuthorizedUserService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: AuthorizedUserService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: AuthorizedUserService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [AUTHORIZED_USER_BASE_PATH]\n                }] }, { type: AuthorizedUserConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst AuthorizedUserServiceCreateAuthorizedUserMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/users/me/authorized-users\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst AuthorizedUserServiceDeleteAuthorizedUserMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/users/me/authorized-users/{authorizedUserId}\",\n        method: \"DELETE\",\n        responses: [\n            {\n                status: 204,\n                body: \"\"\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst AuthorizedUserServiceGetAuthorizedUsersMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/users/me/authorized-users\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"376069ae-f628-4569-8bb0-ec1fce83ebe9\",\n                        \"said\": \"53251f6b-f081-4e22-a977-93efaa47e449\",\n                        \"firstName\": \"John\",\n                        \"lastName\": \"Doe\",\n                        \"email\": \"john.doe@email.com\",\n                        \"mobileNumber\": \"+44 012345 67890\",\n                        \"username\": \"john.doe.145764\",\n                        \"status\": \"AWAITING_REGISTRATION\",\n                        \"permissions\": [{\n                                \"accountId\": \"1cdb2224-8926-4b4d-a99f-1c9dfbbb4691\",\n                                \"level\": \"BASIC-001\"\n                            }, {\n                                \"accountId\": \"1cdb2224-8926-4b4d-a99f-1c9dfbbb4692\",\n                                \"level\": \"PARTIAL-002\"\n                            }, {\n                                \"accountId\": \"3cdb2224-8926-4b4d-a99f-1c9dfbbb4600\",\n                                \"level\": \"FULL-003\"\n                            }]\n                    }]\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst AuthorizedUserServiceGetPermissionsByAuthorizedUserIdMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/users/me/authorized-users/{authorizedUserId}/permissions\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"accountId\": \"1cdb2224-8926-4b4d-a99f-1c9dfbbb4691\",\n                        \"level\": \"BASIC-001\"\n                    }, {\n                        \"accountId\": \"1cdb2224-8926-4b4d-a99f-1c9dfbbb4692\",\n                        \"level\": \"PARTIAL-002\"\n                    }, {\n                        \"accountId\": \"3cdb2224-8926-4b4d-a99f-1c9dfbbb4600\",\n                        \"level\": \"FULL-003\"\n                    }]\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst AuthorizedUserServiceUpdatePermissionsForAuthorizedUserMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/users/me/authorized-users/{authorizedUserId}/permissions\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 204,\n                body: \"\"\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst AuthorizedUserServiceUpdateStatusForAuthorizedUserMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/users/me/authorized-users/{authorizedUserId}/status\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 204,\n                body: \"\"\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst AuthorizedUserServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/client-api/v2/users/me/authorized-users\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/users/me/authorized-users/{authorizedUserId}\",\n        method: \"DELETE\",\n        responses: [\n            {\n                status: 204,\n                body: \"\"\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/users/me/authorized-users\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"376069ae-f628-4569-8bb0-ec1fce83ebe9\",\n                        \"said\": \"53251f6b-f081-4e22-a977-93efaa47e449\",\n                        \"firstName\": \"John\",\n                        \"lastName\": \"Doe\",\n                        \"email\": \"john.doe@email.com\",\n                        \"mobileNumber\": \"+44 012345 67890\",\n                        \"username\": \"john.doe.145764\",\n                        \"status\": \"AWAITING_REGISTRATION\",\n                        \"permissions\": [{\n                                \"accountId\": \"1cdb2224-8926-4b4d-a99f-1c9dfbbb4691\",\n                                \"level\": \"BASIC-001\"\n                            }, {\n                                \"accountId\": \"1cdb2224-8926-4b4d-a99f-1c9dfbbb4692\",\n                                \"level\": \"PARTIAL-002\"\n                            }, {\n                                \"accountId\": \"3cdb2224-8926-4b4d-a99f-1c9dfbbb4600\",\n                                \"level\": \"FULL-003\"\n                            }]\n                    }]\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/users/me/authorized-users/{authorizedUserId}/permissions\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"accountId\": \"1cdb2224-8926-4b4d-a99f-1c9dfbbb4691\",\n                        \"level\": \"BASIC-001\"\n                    }, {\n                        \"accountId\": \"1cdb2224-8926-4b4d-a99f-1c9dfbbb4692\",\n                        \"level\": \"PARTIAL-002\"\n                    }, {\n                        \"accountId\": \"3cdb2224-8926-4b4d-a99f-1c9dfbbb4600\",\n                        \"level\": \"FULL-003\"\n                    }]\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/users/me/authorized-users/{authorizedUserId}/permissions\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 204,\n                body: \"\"\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/users/me/authorized-users/{authorizedUserId}/status\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 204,\n                body: \"\"\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n]);\n\nexport { AUTHORIZED_USER_BASE_PATH, AuthorizedUserApiModule, AuthorizedUserConfiguration, AuthorizedUserService, AuthorizedUserServiceCreateAuthorizedUserMocksProvider, AuthorizedUserServiceDeleteAuthorizedUserMocksProvider, AuthorizedUserServiceGetAuthorizedUsersMocksProvider, AuthorizedUserServiceGetPermissionsByAuthorizedUserIdMocksProvider, AuthorizedUserServiceMocksProvider, AuthorizedUserServiceUpdatePermissionsForAuthorizedUserMocksProvider, AuthorizedUserServiceUpdateStatusForAuthorizedUserMocksProvider, COLLECTION_FORMATS, CONFIG_TOKEN, GetAuthorizedUserItem };\n"]},"metadata":{},"sourceType":"module"}