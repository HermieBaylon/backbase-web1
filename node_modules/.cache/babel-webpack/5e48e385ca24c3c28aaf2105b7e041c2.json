{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Self, Optional, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';\nimport * as i1 from '@backbase/ui-ang/services';\nimport * as i2 from '@backbase/foundation-ang/future';\nimport * as i3 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i4 from '@backbase/ui-ang/icon';\nimport { IconModule } from '@backbase/ui-ang/icon';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i6 from '@backbase/ui-ang/focus';\nimport { FocusModule } from '@backbase/ui-ang/focus';\nimport * as i7 from '@backbase/ui-ang/button';\nimport { ButtonModule } from '@backbase/ui-ang/button';\n/**\n * @name InputPasswordComponent\n *\n * @description\n * Component that displays a password input\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes. You need to take care of properties that are required in your case :\n *  - role\n *  - aria-activedescendant\n *  - aria-describedby\n *  - aria-expanded\n *  - aria-invalid\n *  - aria-label\n *  - aria-labelledby\n *  - aria-owns\n *\n * visibilityControlLabel is discernible text for show/hide password button.\n * ariaLabel is discernible text for password input\n */\n\nconst _c0 = [\"inputPassword\"];\n\nfunction InputPasswordComponent_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"for\", ctx_r0.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.label);\n  }\n}\n\nfunction InputPasswordComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵelementStart(1, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function InputPasswordComponent_div_5_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.onVisibilityChange();\n    });\n    i0.ɵɵelement(2, \"bb-icon-ui\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", ctx_r2.visibilityControlLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"name\", ctx_r2.showPassword ? \"visibility-off\" : \"visibility\");\n  }\n}\n\nconst _c1 = function (a0, a1) {\n  return {\n    \"ng-invalid\": a0,\n    \"ng-touched\": a1\n  };\n};\n\nclass InputPasswordComponent extends InputBaseComponent {\n  constructor(domAttrService, elem, renderer2, cd, deprecationsService, parentFormControl) {\n    super(cd, deprecationsService);\n    this.domAttrService = domAttrService;\n    this.elem = elem;\n    this.renderer2 = renderer2;\n    this.cd = cd;\n    this.deprecationsService = deprecationsService;\n    this.parentFormControl = parentFormControl;\n    /**\n     * The placeholder for the password input. Defaults to an empty string;\n     */\n\n    this.placeholder = '';\n    /**\n     * Whether the password input is readonly.\n     */\n\n    this.readonly = false;\n    /**\n     * Whether to show the visibility button icon after the text.\n     */\n\n    this.showVisibilityControl = false;\n    /**\n     * Whether to show password in plain text.\n     */\n\n    this.showPassword = false;\n    /**\n     * The aria label used when the visibility button is in focus.\n     */\n\n    this.visibilityControlLabel = 'Show/Hide password button';\n    /**\n     * Aria label for the password input\n     */\n\n    this.ariaLabel = 'Password Input';\n    /**\n     * The event emitter called when the visibility button is clicked.\n     */\n\n    this.toggleVisibility = new EventEmitter();\n\n    if (this.parentFormControl) {\n      this.parentFormControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this.ariaLabel) {\n      this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.inputEl && this.inputEl.nativeElement, this.renderer2);\n    }\n  }\n\n  onVisibilityChange() {\n    this.showPassword = !this.showPassword;\n    this.toggleVisibility.emit(this.showPassword);\n  }\n\n}\n\nInputPasswordComponent.ɵfac = function InputPasswordComponent_Factory(t) {\n  return new (t || InputPasswordComponent)(i0.ɵɵdirectiveInject(i1.DomAttributesService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.DeprecationsService), i0.ɵɵdirectiveInject(i3.NgControl, 10));\n};\n\nInputPasswordComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: InputPasswordComponent,\n  selectors: [[\"bb-input-password-ui\"]],\n  viewQuery: function InputPasswordComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);\n    }\n  },\n  inputs: {\n    placeholder: \"placeholder\",\n    maxLength: \"maxLength\",\n    minLength: \"minLength\",\n    readonly: \"readonly\",\n    autocomplete: \"autocomplete\",\n    showVisibilityControl: \"showVisibilityControl\",\n    showPassword: \"showPassword\",\n    visibilityControlLabel: \"visibilityControlLabel\",\n    ariaLabel: \"ariaLabel\"\n  },\n  outputs: {\n    toggleVisibility: \"toggleVisibility\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 27,\n  consts: [[1, \"bb-input-password\", 3, \"ngClass\"], [3, \"for\", 4, \"ngIf\"], [1, \"input-group\"], [1, \"form-control\", \"bb-input-password__input\", 3, \"id\", \"ngModel\", \"type\", \"disabled\", \"readonly\", \"placeholder\", \"required\", \"bbFocus\", \"ngModelChange\", \"blur\", \"focus\"], [\"inputPassword\", \"\"], [\"class\", \"input-group-append\", 4, \"ngIf\"], [3, \"for\"], [1, \"input-group-append\"], [\"bbButton\", \"\", \"color\", \"link\", \"data-role\", \"bb-input-password-visibility-toggle-button\", 1, \"bb-input-password__visibility-toggle-button\", 3, \"click\"], [\"size\", \"md\", 3, \"name\"]],\n  template: function InputPasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, InputPasswordComponent_label_1_Template, 2, 2, \"label\", 1);\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵelementStart(3, \"input\", 3, 4);\n      i0.ɵɵlistener(\"ngModelChange\", function InputPasswordComponent_Template_input_ngModelChange_3_listener($event) {\n        return ctx.onValueChange($event);\n      })(\"blur\", function InputPasswordComponent_Template_input_blur_3_listener() {\n        return ctx.onBlur();\n      })(\"focus\", function InputPasswordComponent_Template_input_focus_3_listener() {\n        return ctx.onFocus();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, InputPasswordComponent_div_5_Template, 3, 2, \"div\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(24, _c1, ctx.parentFormControl == null ? null : ctx.parentFormControl.invalid, ctx.parentFormControl == null ? null : ctx.parentFormControl.touched));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.label);\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"id\", ctx.id);\n      i0.ɵɵproperty(\"ngModel\", ctx.value)(\"type\", ctx.showPassword ? \"text\" : \"password\")(\"disabled\", ctx.disabled)(\"readonly\", ctx.readonly)(\"placeholder\", ctx.placeholder)(\"required\", ctx.required)(\"bbFocus\", ctx.autofocus);\n      i0.ɵɵattribute(\"aria-autocomplete\", ctx.ariaAutocomplete)(\"aria-controls\", ctx.ariaControls)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby)(\"aria-expanded\", ctx.ariaExpanded)(\"aria-activedescendant\", ctx.ariaActivedescendant)(\"role\", ctx.role)(\"aria-invalid\", ctx.ariaInvalid)(\"aria-owns\", ctx.ariaOwns)(\"aria-label\", !ctx.label && ctx.ariaLabel || null)(\"autocomplete\", ctx.autocomplete)(\"maxlength\", ctx.maxLength)(\"minlength\", ctx.minLength);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.showVisibilityControl);\n    }\n  },\n  directives: [i5.NgClass, i5.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i3.RequiredValidator, i6.FocusDirective, i3.MaxLengthValidator, i3.MinLengthValidator, i7.ButtonDirective, i4.IconComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputPasswordComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-input-password-ui',\n      templateUrl: './input-password.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i1.DomAttributesService\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i2.DeprecationsService\n    }, {\n      type: i3.NgControl,\n      decorators: [{\n        type: Self\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    placeholder: [{\n      type: Input\n    }],\n    maxLength: [{\n      type: Input\n    }],\n    minLength: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    autocomplete: [{\n      type: Input\n    }],\n    showVisibilityControl: [{\n      type: Input\n    }],\n    showPassword: [{\n      type: Input\n    }],\n    visibilityControlLabel: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    toggleVisibility: [{\n      type: Output\n    }],\n    inputEl: [{\n      type: ViewChild,\n      args: ['inputPassword']\n    }]\n  });\n})();\n\nclass InputPasswordModule {}\n\nInputPasswordModule.ɵfac = function InputPasswordModule_Factory(t) {\n  return new (t || InputPasswordModule)();\n};\n\nInputPasswordModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: InputPasswordModule\n});\nInputPasswordModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, FormsModule, BaseClassesModule, FocusModule, IconModule, ButtonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputPasswordModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule, BaseClassesModule, FocusModule, IconModule, ButtonModule],\n      declarations: [InputPasswordComponent],\n      exports: [InputPasswordComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { InputPasswordComponent, InputPasswordModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-input-password.js"],"names":["i0","EventEmitter","Component","ChangeDetectionStrategy","Self","Optional","Input","Output","ViewChild","NgModule","InputBaseComponent","BaseClassesModule","i1","i2","i3","FormsModule","i4","IconModule","i5","CommonModule","i6","FocusModule","i7","ButtonModule","InputPasswordComponent","constructor","domAttrService","elem","renderer2","cd","deprecationsService","parentFormControl","placeholder","readonly","showVisibilityControl","showPassword","visibilityControlLabel","ariaLabel","toggleVisibility","valueAccessor","ngAfterViewInit","moveAriaAttributes","nativeElement","inputEl","onVisibilityChange","emit","ɵfac","DomAttributesService","ElementRef","Renderer2","ChangeDetectorRef","DeprecationsService","NgControl","ɵcmp","NgClass","NgIf","DefaultValueAccessor","NgControlStatus","NgModel","RequiredValidator","FocusDirective","MaxLengthValidator","MinLengthValidator","ButtonDirective","IconComponent","type","args","selector","templateUrl","changeDetection","OnPush","decorators","maxLength","minLength","autocomplete","InputPasswordModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Self, Optional, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';\nimport * as i1 from '@backbase/ui-ang/services';\nimport * as i2 from '@backbase/foundation-ang/future';\nimport * as i3 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i4 from '@backbase/ui-ang/icon';\nimport { IconModule } from '@backbase/ui-ang/icon';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i6 from '@backbase/ui-ang/focus';\nimport { FocusModule } from '@backbase/ui-ang/focus';\nimport * as i7 from '@backbase/ui-ang/button';\nimport { ButtonModule } from '@backbase/ui-ang/button';\n\n/**\n * @name InputPasswordComponent\n *\n * @description\n * Component that displays a password input\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes. You need to take care of properties that are required in your case :\n *  - role\n *  - aria-activedescendant\n *  - aria-describedby\n *  - aria-expanded\n *  - aria-invalid\n *  - aria-label\n *  - aria-labelledby\n *  - aria-owns\n *\n * visibilityControlLabel is discernible text for show/hide password button.\n * ariaLabel is discernible text for password input\n */\nclass InputPasswordComponent extends InputBaseComponent {\n    constructor(domAttrService, elem, renderer2, cd, deprecationsService, parentFormControl) {\n        super(cd, deprecationsService);\n        this.domAttrService = domAttrService;\n        this.elem = elem;\n        this.renderer2 = renderer2;\n        this.cd = cd;\n        this.deprecationsService = deprecationsService;\n        this.parentFormControl = parentFormControl;\n        /**\n         * The placeholder for the password input. Defaults to an empty string;\n         */\n        this.placeholder = '';\n        /**\n         * Whether the password input is readonly.\n         */\n        this.readonly = false;\n        /**\n         * Whether to show the visibility button icon after the text.\n         */\n        this.showVisibilityControl = false;\n        /**\n         * Whether to show password in plain text.\n         */\n        this.showPassword = false;\n        /**\n         * The aria label used when the visibility button is in focus.\n         */\n        this.visibilityControlLabel = 'Show/Hide password button';\n        /**\n         * Aria label for the password input\n         */\n        this.ariaLabel = 'Password Input';\n        /**\n         * The event emitter called when the visibility button is clicked.\n         */\n        this.toggleVisibility = new EventEmitter();\n        if (this.parentFormControl) {\n            this.parentFormControl.valueAccessor = this;\n        }\n    }\n    ngAfterViewInit() {\n        if (!this.ariaLabel) {\n            this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.inputEl && this.inputEl.nativeElement, this.renderer2);\n        }\n    }\n    onVisibilityChange() {\n        this.showPassword = !this.showPassword;\n        this.toggleVisibility.emit(this.showPassword);\n    }\n}\nInputPasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputPasswordComponent, deps: [{ token: i1.DomAttributesService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: i2.DeprecationsService }, { token: i3.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });\nInputPasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: InputPasswordComponent, selector: \"bb-input-password-ui\", inputs: { placeholder: \"placeholder\", maxLength: \"maxLength\", minLength: \"minLength\", readonly: \"readonly\", autocomplete: \"autocomplete\", showVisibilityControl: \"showVisibilityControl\", showPassword: \"showPassword\", visibilityControlLabel: \"visibilityControlLabel\", ariaLabel: \"ariaLabel\" }, outputs: { toggleVisibility: \"toggleVisibility\" }, viewQueries: [{ propertyName: \"inputEl\", first: true, predicate: [\"inputPassword\"], descendants: true }], usesInheritance: true, ngImport: i0, template: \"<div\\n  class=\\\"bb-input-password\\\"\\n  [ngClass]=\\\"{ 'ng-invalid': parentFormControl?.invalid, 'ng-touched': parentFormControl?.touched }\\\"\\n>\\n  <label *ngIf=\\\"label\\\" for=\\\"{{ id }}\\\">{{ label }}</label>\\n  <div class=\\\"input-group\\\">\\n    <input\\n      id=\\\"{{ id }}\\\"\\n      #inputPassword\\n      [attr.aria-autocomplete]=\\\"ariaAutocomplete\\\"\\n      [attr.aria-controls]=\\\"ariaControls\\\"\\n      [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n      [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n      [attr.aria-expanded]=\\\"ariaExpanded\\\"\\n      [attr.aria-activedescendant]=\\\"ariaActivedescendant\\\"\\n      [attr.role]=\\\"role\\\"\\n      [attr.aria-invalid]=\\\"ariaInvalid\\\"\\n      [attr.aria-owns]=\\\"ariaOwns\\\"\\n      [attr.aria-label]=\\\"(!label && ariaLabel) || null\\\"\\n      [ngModel]=\\\"value\\\"\\n      (ngModelChange)=\\\"onValueChange($event)\\\"\\n      (blur)=\\\"onBlur()\\\"\\n      [type]=\\\"showPassword ? 'text' : 'password'\\\"\\n      class=\\\"form-control bb-input-password__input\\\"\\n      (focus)=\\\"onFocus()\\\"\\n      [disabled]=\\\"disabled\\\"\\n      [readonly]=\\\"readonly\\\"\\n      [placeholder]=\\\"placeholder\\\"\\n      [required]=\\\"required\\\"\\n      [bbFocus]=\\\"autofocus\\\"\\n      [attr.autocomplete]=\\\"autocomplete\\\"\\n      [attr.maxlength]=\\\"maxLength\\\"\\n      [attr.minlength]=\\\"minLength\\\"\\n    />\\n    <div *ngIf=\\\"showVisibilityControl\\\" class=\\\"input-group-append\\\">\\n      <button\\n        bbButton\\n        (click)=\\\"onVisibilityChange()\\\"\\n        color=\\\"link\\\"\\n        [attr.aria-label]=\\\"visibilityControlLabel\\\"\\n        class=\\\"bb-input-password__visibility-toggle-button\\\"\\n        data-role=\\\"bb-input-password-visibility-toggle-button\\\"\\n      >\\n        <bb-icon-ui [name]=\\\"showPassword ? 'visibility-off' : 'visibility'\\\" size=\\\"md\\\"></bb-icon-ui>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\", components: [{ type: i4.IconComponent, selector: \"bb-icon-ui\", inputs: [\"name\", \"inverse\", \"size\", \"color\", \"animate\", \"aria-label\", \"cropped\", \"backgroundType\"] }], directives: [{ type: i5.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i3.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i3.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { type: i6.FocusDirective, selector: \"[bbFocus]\", inputs: [\"bbFocus\"], exportAs: [\"bbFocus\"] }, { type: i3.MaxLengthValidator, selector: \"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\", inputs: [\"maxlength\"] }, { type: i3.MinLengthValidator, selector: \"[minlength][formControlName],[minlength][formControl],[minlength][ngModel]\", inputs: [\"minlength\"] }, { type: i7.ButtonDirective, selector: \"button[bbButton]\", inputs: [\"type\", \"color\", \"buttonSize\", \"block\", \"circle\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputPasswordComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-input-password-ui',\n                    templateUrl: './input-password.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i1.DomAttributesService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i2.DeprecationsService }, { type: i3.NgControl, decorators: [{\n                    type: Self\n                }, {\n                    type: Optional\n                }] }]; }, propDecorators: { placeholder: [{\n                type: Input\n            }], maxLength: [{\n                type: Input\n            }], minLength: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], autocomplete: [{\n                type: Input\n            }], showVisibilityControl: [{\n                type: Input\n            }], showPassword: [{\n                type: Input\n            }], visibilityControlLabel: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], toggleVisibility: [{\n                type: Output\n            }], inputEl: [{\n                type: ViewChild,\n                args: ['inputPassword']\n            }] } });\n\nclass InputPasswordModule {\n}\nInputPasswordModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputPasswordModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nInputPasswordModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputPasswordModule, declarations: [InputPasswordComponent], imports: [CommonModule, FormsModule, BaseClassesModule, FocusModule, IconModule, ButtonModule], exports: [InputPasswordComponent] });\nInputPasswordModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputPasswordModule, imports: [[CommonModule, FormsModule, BaseClassesModule, FocusModule, IconModule, ButtonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputPasswordModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, FormsModule, BaseClassesModule, FocusModule, IconModule, ButtonModule],\n                    declarations: [InputPasswordComponent],\n                    exports: [InputPasswordComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { InputPasswordComponent, InputPasswordModule };\n"]},"metadata":{},"sourceType":"module"}