{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { noop } from 'rxjs';\nimport * as i1 from '@backbase/foundation-ang/future';\nlet _nextId = 0;\n\nfunction getInputNextId() {\n  return `bb_input_${_nextId++}`;\n}\n\nconst defaultSize = 20;\n/**\n * Widget roles specified in ARIA 1.1\n */\n\nconst VALID_WIDGET_ROLES = ['button', 'checkbox', 'combobox', 'grid', 'gridcell', 'link', 'listbox', 'menu', 'menubar', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'option', 'progressbar', 'radio', 'radiogroup', 'scrollbar', 'searchbox', 'separator', 'slider', 'spinbutton', 'switch', 'tab', 'tablist', 'tabpanel', 'textbox', 'tree', 'treegrid', 'treeitem'];\n/**\n * @name InputBaseComponent\n *\n * @description\n * Base component for input fields.\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes to custom components\n */\n\nclass InputBaseComponent {\n  constructor(cd, deprecationsService) {\n    this.cd = cd;\n    this.deprecationsService = deprecationsService;\n    this._id = getInputNextId();\n    this.onTouched = noop;\n    /**\n     * The label for the input. Defaults to an empty string.\n     */\n\n    this.label = '';\n    this._size = defaultSize; // `aria-readonly` is not needed, use `readonly` instead\n    // `aria-required` is not needed, use `required` instead\n\n    /**\n     * Whether the input is required. Defaults to false.\n     */\n\n    this.required = false;\n    /**\n     * Whether the input is read only. Defaults to false.\n     */\n\n    this.readonly = false;\n    /**\n     * An event emitter for on blur actions.\n     */\n\n    this.blur = new EventEmitter();\n    /**\n     * An event emitter for on focus actions.\n     */\n\n    this.focus = new EventEmitter();\n    /**\n     * Whether the text input should be auto-focused when shown.\n     */\n\n    this.autofocus = false;\n    this._valueChange = new EventEmitter();\n    this.disabled = false;\n    this.value = '';\n\n    this.onChange = () => {};\n  }\n  /**\n   * The id for the input. Defaults to unique string.\n   * Used to map the label to the input.\n   */\n\n\n  set id(value) {\n    this._id = value;\n  }\n\n  get id() {\n    return this._id;\n  }\n  /**\n   * Customize the ARIA role for the HTML input/select/textarea element inside this component.\n   *\n   * This can be used to improve accessibility for components, for example by configuring `[role]=\"'combobox'\"`\n   * for a component that provides an autocomplete list.\n   *\n   * Values that are valid for the native HTML form elements are allowed.\n   */\n\n\n  set role(value) {\n    if (typeof value === 'string' && VALID_WIDGET_ROLES.indexOf(value) === -1) {\n      // Prevent setting invalid roles\n      // TODO: Log a warning about the invalid role\n      value = undefined;\n    }\n\n    this._role = value;\n  }\n\n  get role() {\n    return this._role;\n  }\n  /**\n   * Configure the minimum width to fit the specified number of characters that should fit for HTML `<input>`\n   */\n\n\n  get size() {\n    return this._size;\n  }\n\n  set size(arg) {\n    const size = this.getSizeByKeyword(arg); // Optionally convert a `size` keyword to an integer value.\n    // This can be supported by subclasses of `InputBaseComponent`\n\n    arg = typeof size !== 'undefined' ? size : arg;\n    const int = parseInt(String(arg), 10);\n\n    if (int >= 1 && !isNaN(int)) {\n      this._size = int;\n    }\n  }\n\n  ngOnInit() {\n    if (!(this.label || this.ariaLabel || this.ariaLabelledby)) {\n      console.warn(`Found an input from '${this.constructor.name}' without label, please provide it.`);\n    }\n  }\n\n  onBlur($event) {\n    this.blur.emit($event);\n    this.onTouched();\n  }\n\n  onValueChange(newValue) {\n    if (newValue === undefined) {\n      this.onChange(this.value);\n    } else {\n      this.onChange(newValue);\n      this.value = newValue;\n\n      this._valueChange.emit(this.value);\n    }\n  }\n\n  onFocus($event) {\n    this.focus.emit($event);\n  }\n\n  writeValue(inputValue) {\n    this.value = inputValue === null ? '' : inputValue;\n    this.cd.markForCheck();\n  }\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this.cd.markForCheck();\n  }\n  /**\n   * Returns the `input` `size` value for a keyword, such as \"xxl\".\n   * Subclasses can choose to implement a custom mapping, which will be used to configure `size`.\n   */\n\n\n  getSizeByKeyword(arg) {\n    return undefined;\n  }\n\n}\n\nInputBaseComponent.ɵfac = function InputBaseComponent_Factory(t) {\n  return new (t || InputBaseComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.DeprecationsService));\n};\n\nInputBaseComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: InputBaseComponent,\n  selectors: [[\"ng-component\"]],\n  inputs: {\n    id: \"id\",\n    label: \"label\",\n    role: \"role\",\n    size: \"size\",\n    inputClassName: \"inputClassName\",\n    ariaAutocomplete: [\"aria-autocomplete\", \"ariaAutocomplete\"],\n    ariaActivedescendant: [\"aria-activedescendant\", \"ariaActivedescendant\"],\n    ariaControls: [\"aria-controls\", \"ariaControls\"],\n    ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"],\n    ariaExpanded: [\"aria-expanded\", \"ariaExpanded\"],\n    ariaInvalid: [\"aria-invalid\", \"ariaInvalid\"],\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    ariaOwns: [\"aria-owns\", \"ariaOwns\"],\n    required: \"required\",\n    readonly: \"readonly\",\n    autofocus: \"autofocus\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    blur: \"blur\",\n    focus: \"focus\"\n  },\n  decls: 0,\n  vars: 0,\n  template: function InputBaseComponent_Template(rf, ctx) {},\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputBaseComponent, [{\n    type: Component,\n    args: [{\n      template: '',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.DeprecationsService\n    }];\n  }, {\n    id: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    role: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    inputClassName: [{\n      type: Input\n    }],\n    ariaAutocomplete: [{\n      type: Input,\n      args: ['aria-autocomplete']\n    }],\n    ariaActivedescendant: [{\n      type: Input,\n      args: ['aria-activedescendant']\n    }],\n    ariaControls: [{\n      type: Input,\n      args: ['aria-controls']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    ariaExpanded: [{\n      type: Input,\n      args: ['aria-expanded']\n    }],\n    ariaInvalid: [{\n      type: Input,\n      args: ['aria-invalid']\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaOwns: [{\n      type: Input,\n      args: ['aria-owns']\n    }],\n    required: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    blur: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    autofocus: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n\nclass InputBaseModule {}\n\nInputBaseModule.ɵfac = function InputBaseModule_Factory(t) {\n  return new (t || InputBaseModule)();\n};\n\nInputBaseModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: InputBaseModule\n});\nInputBaseModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputBaseModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [InputBaseComponent],\n      exports: [InputBaseComponent]\n    }]\n  }], null, null);\n})();\n\nclass BaseClassesModule {}\n\nBaseClassesModule.ɵfac = function BaseClassesModule_Factory(t) {\n  return new (t || BaseClassesModule)();\n};\n\nBaseClassesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BaseClassesModule\n});\nBaseClassesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[InputBaseModule], InputBaseModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseClassesModule, [{\n    type: NgModule,\n    args: [{\n      imports: [InputBaseModule],\n      exports: [InputBaseModule]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BaseClassesModule, InputBaseComponent, InputBaseModule, defaultSize, getInputNextId };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-base-classes.js"],"names":["i0","EventEmitter","Component","ChangeDetectionStrategy","Input","Output","NgModule","CommonModule","noop","i1","_nextId","getInputNextId","defaultSize","VALID_WIDGET_ROLES","InputBaseComponent","constructor","cd","deprecationsService","_id","onTouched","label","_size","required","readonly","blur","focus","autofocus","_valueChange","disabled","value","onChange","id","role","indexOf","undefined","_role","size","arg","getSizeByKeyword","int","parseInt","String","isNaN","ngOnInit","ariaLabel","ariaLabelledby","console","warn","name","onBlur","$event","emit","onValueChange","newValue","onFocus","writeValue","inputValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","ɵfac","ChangeDetectorRef","DeprecationsService","ɵcmp","type","args","template","changeDetection","OnPush","inputClassName","ariaAutocomplete","ariaActivedescendant","ariaControls","ariaDescribedby","ariaExpanded","ariaInvalid","ariaOwns","InputBaseModule","ɵmod","ɵinj","imports","declarations","exports","BaseClassesModule"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { noop } from 'rxjs';\nimport * as i1 from '@backbase/foundation-ang/future';\n\nlet _nextId = 0;\nfunction getInputNextId() {\n    return `bb_input_${_nextId++}`;\n}\nconst defaultSize = 20;\n/**\n * Widget roles specified in ARIA 1.1\n */\nconst VALID_WIDGET_ROLES = [\n    'button',\n    'checkbox',\n    'combobox',\n    'grid',\n    'gridcell',\n    'link',\n    'listbox',\n    'menu',\n    'menubar',\n    'menuitem',\n    'menuitemcheckbox',\n    'menuitemradio',\n    'option',\n    'progressbar',\n    'radio',\n    'radiogroup',\n    'scrollbar',\n    'searchbox',\n    'separator',\n    'slider',\n    'spinbutton',\n    'switch',\n    'tab',\n    'tablist',\n    'tabpanel',\n    'textbox',\n    'tree',\n    'treegrid',\n    'treeitem',\n];\n/**\n * @name InputBaseComponent\n *\n * @description\n * Base component for input fields.\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes to custom components\n */\nclass InputBaseComponent {\n    constructor(cd, deprecationsService) {\n        this.cd = cd;\n        this.deprecationsService = deprecationsService;\n        this._id = getInputNextId();\n        this.onTouched = noop;\n        /**\n         * The label for the input. Defaults to an empty string.\n         */\n        this.label = '';\n        this._size = defaultSize;\n        // `aria-readonly` is not needed, use `readonly` instead\n        // `aria-required` is not needed, use `required` instead\n        /**\n         * Whether the input is required. Defaults to false.\n         */\n        this.required = false;\n        /**\n         * Whether the input is read only. Defaults to false.\n         */\n        this.readonly = false;\n        /**\n         * An event emitter for on blur actions.\n         */\n        this.blur = new EventEmitter();\n        /**\n         * An event emitter for on focus actions.\n         */\n        this.focus = new EventEmitter();\n        /**\n         * Whether the text input should be auto-focused when shown.\n         */\n        this.autofocus = false;\n        this._valueChange = new EventEmitter();\n        this.disabled = false;\n        this.value = '';\n        this.onChange = () => { };\n    }\n    /**\n     * The id for the input. Defaults to unique string.\n     * Used to map the label to the input.\n     */\n    set id(value) {\n        this._id = value;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Customize the ARIA role for the HTML input/select/textarea element inside this component.\n     *\n     * This can be used to improve accessibility for components, for example by configuring `[role]=\"'combobox'\"`\n     * for a component that provides an autocomplete list.\n     *\n     * Values that are valid for the native HTML form elements are allowed.\n     */\n    set role(value) {\n        if (typeof value === 'string' && VALID_WIDGET_ROLES.indexOf(value) === -1) {\n            // Prevent setting invalid roles\n            // TODO: Log a warning about the invalid role\n            value = undefined;\n        }\n        this._role = value;\n    }\n    get role() {\n        return this._role;\n    }\n    /**\n     * Configure the minimum width to fit the specified number of characters that should fit for HTML `<input>`\n     */\n    get size() {\n        return this._size;\n    }\n    set size(arg) {\n        const size = this.getSizeByKeyword(arg);\n        // Optionally convert a `size` keyword to an integer value.\n        // This can be supported by subclasses of `InputBaseComponent`\n        arg = typeof size !== 'undefined' ? size : arg;\n        const int = parseInt(String(arg), 10);\n        if (int >= 1 && !isNaN(int)) {\n            this._size = int;\n        }\n    }\n    ngOnInit() {\n        if (!(this.label || this.ariaLabel || this.ariaLabelledby)) {\n            console.warn(`Found an input from '${this.constructor.name}' without label, please provide it.`);\n        }\n    }\n    onBlur($event) {\n        this.blur.emit($event);\n        this.onTouched();\n    }\n    onValueChange(newValue) {\n        if (newValue === undefined) {\n            this.onChange(this.value);\n        }\n        else {\n            this.onChange(newValue);\n            this.value = newValue;\n            this._valueChange.emit(this.value);\n        }\n    }\n    onFocus($event) {\n        this.focus.emit($event);\n    }\n    writeValue(inputValue) {\n        this.value = inputValue === null ? '' : inputValue;\n        this.cd.markForCheck();\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.cd.markForCheck();\n    }\n    /**\n     * Returns the `input` `size` value for a keyword, such as \"xxl\".\n     * Subclasses can choose to implement a custom mapping, which will be used to configure `size`.\n     */\n    getSizeByKeyword(arg) {\n        return undefined;\n    }\n}\nInputBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputBaseComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });\nInputBaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: InputBaseComponent, selector: \"ng-component\", inputs: { id: \"id\", label: \"label\", role: \"role\", size: \"size\", inputClassName: \"inputClassName\", ariaAutocomplete: [\"aria-autocomplete\", \"ariaAutocomplete\"], ariaActivedescendant: [\"aria-activedescendant\", \"ariaActivedescendant\"], ariaControls: [\"aria-controls\", \"ariaControls\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], ariaExpanded: [\"aria-expanded\", \"ariaExpanded\"], ariaInvalid: [\"aria-invalid\", \"ariaInvalid\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaOwns: [\"aria-owns\", \"ariaOwns\"], required: \"required\", readonly: \"readonly\", autofocus: \"autofocus\", disabled: \"disabled\" }, outputs: { blur: \"blur\", focus: \"focus\" }, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputBaseComponent, decorators: [{\n            type: Component,\n            args: [{\n                    template: '',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DeprecationsService }]; }, propDecorators: { id: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], role: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], inputClassName: [{\n                type: Input\n            }], ariaAutocomplete: [{\n                type: Input,\n                args: ['aria-autocomplete']\n            }], ariaActivedescendant: [{\n                type: Input,\n                args: ['aria-activedescendant']\n            }], ariaControls: [{\n                type: Input,\n                args: ['aria-controls']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], ariaExpanded: [{\n                type: Input,\n                args: ['aria-expanded']\n            }], ariaInvalid: [{\n                type: Input,\n                args: ['aria-invalid']\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaOwns: [{\n                type: Input,\n                args: ['aria-owns']\n            }], required: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], blur: [{\n                type: Output\n            }], focus: [{\n                type: Output\n            }], autofocus: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }] } });\n\nclass InputBaseModule {\n}\nInputBaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputBaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nInputBaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputBaseModule, declarations: [InputBaseComponent], imports: [CommonModule], exports: [InputBaseComponent] });\nInputBaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputBaseModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputBaseModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [InputBaseComponent],\n                    exports: [InputBaseComponent],\n                }]\n        }] });\n\nclass BaseClassesModule {\n}\nBaseClassesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: BaseClassesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBaseClassesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: BaseClassesModule, imports: [InputBaseModule], exports: [InputBaseModule] });\nBaseClassesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: BaseClassesModule, imports: [[InputBaseModule], InputBaseModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: BaseClassesModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [InputBaseModule],\n                    exports: [InputBaseModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseClassesModule, InputBaseComponent, InputBaseModule, defaultSize, getInputNextId };\n"]},"metadata":{},"sourceType":"module"}