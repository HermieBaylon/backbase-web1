{"ast":null,"code":"import * as i1 from '@angular/common';\nimport { getNumberOfCurrencyDigits, getLocaleNumberFormat, NumberFormatStyle, getLocaleNumberSymbol, NumberSymbol, getCurrencySymbol, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { LOCALE_ID, Component, ChangeDetectionStrategy, Inject, Input, NgModule } from '@angular/core';\nimport BigNumber from 'bignumber.js';\n/**\n * @name AmountComponent\n *\n * @description\n * Component for representing amount in currency format .\n *\n * @dynamic (to suppress error with resolving statics declarations during compilation)\n *\n * @a11y\n * The amount component doesn't provide any specific properties for accessibility. But handles accessibility internally.\n *\n */\n\nfunction AmountComponent_span_0_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1, \"\\xA0\");\n    i0.ɵɵelementStart(2, \"span\", 4, 5);\n    i0.ɵɵi18n(4, 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"abbr\", 7);\n    i0.ɵɵi18n(6, 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const _r2 = i0.ɵɵreference(3);\n\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵi18nExp(ctx_r1.abbreviationSuffix);\n    i0.ɵɵi18nApply(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"title\", _r2.textContent);\n    i0.ɵɵadvance(1);\n    i0.ɵɵi18nExp(ctx_r1.abbreviationSuffix);\n    i0.ɵɵi18nApply(6);\n  }\n}\n\nfunction AmountComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 1);\n    i0.ɵɵelement(1, \"span\", 2);\n    i0.ɵɵtemplate(2, AmountComponent_span_0_ng_container_2_Template, 7, 3, \"ng-container\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r0.amountTemplate, i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.abbreviationSuffix);\n  }\n}\n\nclass AmountComponent {\n  constructor(locale) {\n    this.locale = locale;\n    /**\n     * Determines currency type.\n     * If nothing provided, wouldn't be displayed.\n     */\n\n    this.currency = '';\n    /**\n     * If \"true\" and amount is positive adds plus sign at the beginning.\n     * Default value false.\n     */\n\n    this.showPlusSign = false;\n    /**\n     * Whether currency local should be transformed to symbol.\n     * Default value true.\n     */\n\n    this.mapCurrency = true;\n    /**\n     * Whether percent symbol should be shown.\n     * Default value false.\n     */\n\n    this.showPercent = false;\n    /**\n     * Whether abbreviation should be applied.\n     * Default value false.\n     */\n\n    this.abbreviate = false;\n    /**\n     * Whether to display trailing zeroes.\n     * Default value true\n     */\n\n    this.trailingZeroes = true;\n    this._amountValue = new BigNumber(NaN);\n    this.setupConfiguration();\n  }\n\n  ngOnChanges() {\n    if (this.isUnsafeAmount) {\n      console.warn('[bb-amount]: the amount was passed as a non safe number, the display can be wrong');\n    }\n\n    this.updateNumberFormat();\n    this._amountValue = new BigNumber(this.amount);\n    this.amountTemplate = this.getAmountTemplate(this.transformedAmount);\n  }\n\n  get isNumeric() {\n    return !this._amountValue.isNaN();\n  }\n\n  get isPositive() {\n    return this._amountValue.isPositive();\n  }\n\n  get isZero() {\n    return this._amountValue.isZero();\n  }\n\n  get isUnsafeAmount() {\n    return typeof this.amount === 'number' && (this.amount > Number.MAX_SAFE_INTEGER || this.amount.toString().replace(/\\D/, '').length > AmountComponent.maxSafeIntegerLength);\n  }\n\n  get configDecimalPlaces() {\n    return this.decimalPlaces === undefined ? getNumberOfCurrencyDigits(this.currency) : this.decimalPlaces;\n  }\n  /**\n   * Currency format depends on locale and could be represented for negative and\n   * positive values differently (separated by `;` symbol).\n   * See more http://cldr.unicode.org/translation/numbers-currency/number-patterns\n   *\n   * Example:\n   * en-NL locale: '¤ #,##0.00;¤ -#,##0.00'\n   */\n\n\n  get amountFormat() {\n    const {\n      currencyFormat,\n      decimalFormat,\n      percentFormat,\n      minusSymbol,\n      plusSymbol\n    } = AmountComponent.localeConfig;\n    let formatPattern = decimalFormat;\n\n    if (this.showPercent) {\n      formatPattern = percentFormat;\n    }\n\n    if (this.currency) {\n      if (this.showPercent) {\n        console.warn('[bb-amount]: wrong configuration, `currency` and `showPercent` were set at the same time, therefore showPercent format will be ignored');\n      }\n\n      formatPattern = currencyFormat;\n    }\n\n    const [generalPattern, negativePattern] = formatPattern.split(';');\n\n    if (this.isZero) {\n      return generalPattern;\n    } else if (this.isPositive) {\n      return this.showPlusSign ? plusSymbol + generalPattern : generalPattern;\n    } else {\n      return negativePattern || minusSymbol + generalPattern;\n    }\n  }\n\n  get transformedAmount() {\n    const positiveAmount = this._amountValue.abs();\n\n    const configDecimalPlaces = this.configDecimalPlaces;\n    const shouldAbbreviate = this.abbreviate && positiveAmount.isGreaterThanOrEqualTo(AmountComponent.abbreviationConfig.minAmount);\n    /**\n     * Example:\n     *\n     * {@link groupSymbol} = ','\n     * {@link decimalSymbol} = '.'\n     * {@link configDecimalPlaces} = '2'\n     *\n     * Here how regexp source looks line with config above: ([\\d,]+[.]\\d{2}).*\n     * This regexp has two selections:\n     * - selection for the group `([\\d,]+[.]\\d{2})` to match the decimal precision (no rounding)\n     * - and full string selection `.*` (used to replace full string with the group)\n     *\n     * REGEXP GROUP MATCHES ONLY THE AMOUNTS THAT HAVE TO BE UPDATED (TRIMMED)\n     *\n     * There are the cases when it does not have an effect, and it means that amount is already in appropriate format\n     */\n\n    const regexp = new RegExp(`([\\\\d${this.groupSymbol}]+[${this.decimalSymbol}]\\\\d{${configDecimalPlaces}}).*`, 'g');\n    const amount = shouldAbbreviate ? this.getAbbreviatedAmount(positiveAmount) : positiveAmount;\n    const amountDecimalPlaces = amount.decimalPlaces(); // In order to keep the precision keeping the original decimal places and replace with regexp\n\n    const formattedAmount = amount.toFormat(amountDecimalPlaces, BigNumber.ROUND_CEIL, this.numberFormat).replace(regexp, '$1');\n    return this.getAmountWithZeroPaddings(formattedAmount, configDecimalPlaces, amountDecimalPlaces);\n  }\n\n  getAmountWithZeroPaddings(formattedAmount, configDecimalPlaces, amountDecimalPlaces) {\n    if (!this.trailingZeroes || amountDecimalPlaces >= configDecimalPlaces) {\n      return formattedAmount;\n    }\n\n    const amountOfZeros = configDecimalPlaces - amountDecimalPlaces;\n    let stringToAppend = '0'.repeat(amountOfZeros);\n\n    if (!formattedAmount.includes(this.decimalSymbol)) {\n      stringToAppend = this.decimalSymbol + stringToAppend;\n    }\n\n    return formattedAmount + stringToAppend;\n  }\n\n  setupConfiguration() {\n    if (!AmountComponent.localeConfig) {\n      AmountComponent.localeConfig = {\n        currencyFormat: getLocaleNumberFormat(this.locale, NumberFormatStyle.Currency),\n        decimalFormat: getLocaleNumberFormat(this.locale, NumberFormatStyle.Decimal),\n        percentFormat: getLocaleNumberFormat(this.locale, NumberFormatStyle.Percent),\n        decimalSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.Decimal),\n        groupSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.Group),\n        currencyGroupSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyGroup),\n        currencyDecimalSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal),\n        minusSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.MinusSign),\n        plusSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.PlusSign),\n        percentSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.PercentSign)\n      };\n    }\n  }\n\n  updateNumberFormat() {\n    const {\n      decimalSymbol,\n      currencyDecimalSymbol,\n      groupSymbol,\n      currencyGroupSymbol\n    } = AmountComponent.localeConfig;\n    this.groupSymbol = this.currency ? currencyGroupSymbol : groupSymbol;\n    this.decimalSymbol = this.currency ? currencyDecimalSymbol : decimalSymbol;\n    this.numberFormat = {\n      groupSeparator: this.groupSymbol,\n      decimalSeparator: this.decimalSymbol,\n      groupSize: 3\n    };\n  }\n  /**\n   * Converts original amount to abbreviated\n   * Max abbreviated suffix value is 'T' (trillion) see {@link AmountComponent.abbreviationConfig}\n   */\n\n\n  getAbbreviatedAmount(positiveAmount) {\n    const suffixes = AmountComponent.abbreviationConfig.suffixes;\n    const config = {\n      suffix: suffixes[0],\n      amount: positiveAmount.shiftedBy(-3)\n    };\n\n    for (let i = 1; i < suffixes.length; i++) {\n      if (!config.amount.isGreaterThanOrEqualTo(1000)) {\n        break;\n      }\n\n      config.suffix = suffixes[i];\n      config.amount = config.amount.shiftedBy(-3);\n    }\n\n    this.abbreviationSuffix = config.suffix;\n    return config.amount;\n  }\n\n  getAmountTemplate(amount) {\n    const {\n      percentSymbol,\n      minusSymbol,\n      plusSymbol\n    } = AmountComponent.localeConfig;\n    const signSymbol = this.isPositive ? plusSymbol : minusSymbol;\n    const currencySymbol = this.mapCurrency ? getCurrencySymbol(this.currency, 'wide', this.locale) : this.currency;\n    return this.amountFormat.replace(signSymbol, this.fillTemplate('sign', signSymbol)).replace('¤', this.fillTemplate('currency', currencySymbol)).replace('%', this.fillTemplate('percent', percentSymbol)).replace(/[#0,.]+/g, this.wrapAmount(amount));\n  }\n\n  wrapAmount(amount) {\n    const [integer, decimals] = amount.split(this.decimalSymbol);\n    return this.fillTemplate('integer', integer) + (decimals ? this.fillTemplate('separator', this.decimalSymbol) + this.fillTemplate('decimals', decimals) : '');\n  }\n\n  fillTemplate(templateKey, value) {\n    return AmountComponent.templates[templateKey].replace(AmountComponent.placeholder, value);\n  }\n\n}\n\nAmountComponent.placeholder = '{{}}';\nAmountComponent.templates = {\n  sign: `<span class=\"sign\">${AmountComponent.placeholder}</span>`,\n  currency: `<span class=\"symbol\">${AmountComponent.placeholder}</span>`,\n  integer: `<span class=\"integer\">${AmountComponent.placeholder}</span>`,\n  separator: `<span class=\"decimal-separator\">${AmountComponent.placeholder}</span>`,\n  decimals: `<span class=\"decimals\">${AmountComponent.placeholder}</span>`,\n  percent: `<span class=\"percent\">${AmountComponent.placeholder}</span>`\n};\nAmountComponent.abbreviationConfig = {\n  minAmount: 100000,\n  suffixes: ['K', 'M', 'B', 'T']\n};\nAmountComponent.maxSafeIntegerLength = Number.MAX_SAFE_INTEGER.toString().length;\n\nAmountComponent.ɵfac = function AmountComponent_Factory(t) {\n  return new (t || AmountComponent)(i0.ɵɵdirectiveInject(LOCALE_ID));\n};\n\nAmountComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AmountComponent,\n  selectors: [[\"bb-amount-ui\"]],\n  inputs: {\n    currency: \"currency\",\n    showPlusSign: \"showPlusSign\",\n    mapCurrency: \"mapCurrency\",\n    showPercent: \"showPercent\",\n    abbreviate: \"abbreviate\",\n    decimalPlaces: \"decimalPlaces\",\n    trailingZeroes: \"trailingZeroes\",\n    amount: \"amount\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: function () {\n    let i18n_0;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc Amount abbreviation long suffix\n       */\n      const MSG_C__USERS_HBAYLON_DOCUMENTS_WEST_MONROE_PROJECTS_BACKBASE2_WEB_RETAIL_USA_WEB_NODE_MODULES__BACKBASE_UI_ANG_FESM2015_BACKBASE_UI_ANG_AMOUNT_JS___1 = goog.getMsg(\"{VAR_SELECT, select, K {Thousand} M {Million} B {Billion} T {Trillion}}\");\n      i18n_0 = MSG_C__USERS_HBAYLON_DOCUMENTS_WEST_MONROE_PROJECTS_BACKBASE2_WEB_RETAIL_USA_WEB_NODE_MODULES__BACKBASE_UI_ANG_FESM2015_BACKBASE_UI_ANG_AMOUNT_JS___1;\n    } else {\n      i18n_0 = $localize`:Amount abbreviation long suffix@@bb-amount-ui.abbr.long:{VAR_SELECT, select, K {Thousand} M {Million} B {Billion} T {Trillion}}`;\n    }\n\n    i18n_0 = i0.ɵɵi18nPostprocess(i18n_0, {\n      \"VAR_SELECT\": \"\\uFFFD0\\uFFFD\"\n    });\n    let i18n_2;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc Amount abbreviation short suffix\n       */\n      const MSG_C__USERS_HBAYLON_DOCUMENTS_WEST_MONROE_PROJECTS_BACKBASE2_WEB_RETAIL_USA_WEB_NODE_MODULES__BACKBASE_UI_ANG_FESM2015_BACKBASE_UI_ANG_AMOUNT_JS___3 = goog.getMsg(\"{VAR_SELECT, select, K {K} M {M} B {B} T {T}}\");\n      i18n_2 = MSG_C__USERS_HBAYLON_DOCUMENTS_WEST_MONROE_PROJECTS_BACKBASE2_WEB_RETAIL_USA_WEB_NODE_MODULES__BACKBASE_UI_ANG_FESM2015_BACKBASE_UI_ANG_AMOUNT_JS___3;\n    } else {\n      i18n_2 = $localize`:Amount abbreviation short suffix@@bb-amount-ui.abbr.short:{VAR_SELECT, select, K {K} M {M} B {B} T {T}}`;\n    }\n\n    i18n_2 = i0.ɵɵi18nPostprocess(i18n_2, {\n      \"VAR_SELECT\": \"\\uFFFD0\\uFFFD\"\n    });\n    return [[\"data-role\", \"bb-amount-value\", \"class\", \"bb-amount\", 4, \"ngIf\"], [\"data-role\", \"bb-amount-value\", 1, \"bb-amount\"], [\"data-role\", \"bb-amount-value__amount\", 1, \"amount\", \"bb-amount__value\", 3, \"innerHtml\"], [4, \"ngIf\"], [1, \"sr-only\"], [\"abbrTitle\", \"\"], i18n_0, [\"aria-hidden\", \"true\", \"data-role\", \"bb-amount-value__abbreviation\", 1, \"abbreviation\", \"bb-amount__abbreviation\", 3, \"title\"], i18n_2];\n  },\n  template: function AmountComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, AmountComponent_span_0_Template, 3, 2, \"span\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.isNumeric);\n    }\n  },\n  directives: [i1.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AmountComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-amount-ui',\n      templateUrl: './amount.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOCALE_ID]\n      }]\n    }];\n  }, {\n    currency: [{\n      type: Input\n    }],\n    showPlusSign: [{\n      type: Input\n    }],\n    mapCurrency: [{\n      type: Input\n    }],\n    showPercent: [{\n      type: Input\n    }],\n    abbreviate: [{\n      type: Input\n    }],\n    decimalPlaces: [{\n      type: Input\n    }],\n    trailingZeroes: [{\n      type: Input\n    }],\n    amount: [{\n      type: Input\n    }]\n  });\n})();\n\nclass AmountModule {}\n\nAmountModule.ɵfac = function AmountModule_Factory(t) {\n  return new (t || AmountModule)();\n};\n\nAmountModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AmountModule\n});\nAmountModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AmountModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [AmountComponent],\n      exports: [AmountComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AmountComponent, AmountModule, AmountComponent as FormatAmountComponent, AmountModule as FormatAmountModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-amount.js"],"names":["i1","getNumberOfCurrencyDigits","getLocaleNumberFormat","NumberFormatStyle","getLocaleNumberSymbol","NumberSymbol","getCurrencySymbol","CommonModule","i0","LOCALE_ID","Component","ChangeDetectionStrategy","Inject","Input","NgModule","BigNumber","AmountComponent","constructor","locale","currency","showPlusSign","mapCurrency","showPercent","abbreviate","trailingZeroes","_amountValue","NaN","setupConfiguration","ngOnChanges","isUnsafeAmount","console","warn","updateNumberFormat","amount","amountTemplate","getAmountTemplate","transformedAmount","isNumeric","isNaN","isPositive","isZero","Number","MAX_SAFE_INTEGER","toString","replace","length","maxSafeIntegerLength","configDecimalPlaces","decimalPlaces","undefined","amountFormat","currencyFormat","decimalFormat","percentFormat","minusSymbol","plusSymbol","localeConfig","formatPattern","generalPattern","negativePattern","split","positiveAmount","abs","shouldAbbreviate","isGreaterThanOrEqualTo","abbreviationConfig","minAmount","regexp","RegExp","groupSymbol","decimalSymbol","getAbbreviatedAmount","amountDecimalPlaces","formattedAmount","toFormat","ROUND_CEIL","numberFormat","getAmountWithZeroPaddings","amountOfZeros","stringToAppend","repeat","includes","Currency","Decimal","Percent","Group","currencyGroupSymbol","CurrencyGroup","currencyDecimalSymbol","CurrencyDecimal","MinusSign","PlusSign","percentSymbol","PercentSign","groupSeparator","decimalSeparator","groupSize","suffixes","config","suffix","shiftedBy","i","abbreviationSuffix","signSymbol","currencySymbol","fillTemplate","wrapAmount","integer","decimals","templateKey","value","templates","placeholder","sign","separator","percent","ɵfac","ɵcmp","NgIf","type","args","selector","templateUrl","changeDetection","OnPush","decorators","AmountModule","ɵmod","ɵinj","imports","declarations","exports","FormatAmountComponent","FormatAmountModule"],"mappings":"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","sourcesContent":["import * as i1 from '@angular/common';\nimport { getNumberOfCurrencyDigits, getLocaleNumberFormat, NumberFormatStyle, getLocaleNumberSymbol, NumberSymbol, getCurrencySymbol, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { LOCALE_ID, Component, ChangeDetectionStrategy, Inject, Input, NgModule } from '@angular/core';\nimport BigNumber from 'bignumber.js';\n\n/**\n * @name AmountComponent\n *\n * @description\n * Component for representing amount in currency format .\n *\n * @dynamic (to suppress error with resolving statics declarations during compilation)\n *\n * @a11y\n * The amount component doesn't provide any specific properties for accessibility. But handles accessibility internally.\n *\n */\nclass AmountComponent {\n    constructor(locale) {\n        this.locale = locale;\n        /**\n         * Determines currency type.\n         * If nothing provided, wouldn't be displayed.\n         */\n        this.currency = '';\n        /**\n         * If \"true\" and amount is positive adds plus sign at the beginning.\n         * Default value false.\n         */\n        this.showPlusSign = false;\n        /**\n         * Whether currency local should be transformed to symbol.\n         * Default value true.\n         */\n        this.mapCurrency = true;\n        /**\n         * Whether percent symbol should be shown.\n         * Default value false.\n         */\n        this.showPercent = false;\n        /**\n         * Whether abbreviation should be applied.\n         * Default value false.\n         */\n        this.abbreviate = false;\n        /**\n         * Whether to display trailing zeroes.\n         * Default value true\n         */\n        this.trailingZeroes = true;\n        this._amountValue = new BigNumber(NaN);\n        this.setupConfiguration();\n    }\n    ngOnChanges() {\n        if (this.isUnsafeAmount) {\n            console.warn('[bb-amount]: the amount was passed as a non safe number, the display can be wrong');\n        }\n        this.updateNumberFormat();\n        this._amountValue = new BigNumber(this.amount);\n        this.amountTemplate = this.getAmountTemplate(this.transformedAmount);\n    }\n    get isNumeric() {\n        return !this._amountValue.isNaN();\n    }\n    get isPositive() {\n        return this._amountValue.isPositive();\n    }\n    get isZero() {\n        return this._amountValue.isZero();\n    }\n    get isUnsafeAmount() {\n        return (typeof this.amount === 'number' &&\n            (this.amount > Number.MAX_SAFE_INTEGER ||\n                this.amount.toString().replace(/\\D/, '').length > AmountComponent.maxSafeIntegerLength));\n    }\n    get configDecimalPlaces() {\n        return this.decimalPlaces === undefined ? getNumberOfCurrencyDigits(this.currency) : this.decimalPlaces;\n    }\n    /**\n     * Currency format depends on locale and could be represented for negative and\n     * positive values differently (separated by `;` symbol).\n     * See more http://cldr.unicode.org/translation/numbers-currency/number-patterns\n     *\n     * Example:\n     * en-NL locale: '¤ #,##0.00;¤ -#,##0.00'\n     */\n    get amountFormat() {\n        const { currencyFormat, decimalFormat, percentFormat, minusSymbol, plusSymbol } = AmountComponent.localeConfig;\n        let formatPattern = decimalFormat;\n        if (this.showPercent) {\n            formatPattern = percentFormat;\n        }\n        if (this.currency) {\n            if (this.showPercent) {\n                console.warn('[bb-amount]: wrong configuration, `currency` and `showPercent` were set at the same time, therefore showPercent format will be ignored');\n            }\n            formatPattern = currencyFormat;\n        }\n        const [generalPattern, negativePattern] = formatPattern.split(';');\n        if (this.isZero) {\n            return generalPattern;\n        }\n        else if (this.isPositive) {\n            return this.showPlusSign ? plusSymbol + generalPattern : generalPattern;\n        }\n        else {\n            return negativePattern || minusSymbol + generalPattern;\n        }\n    }\n    get transformedAmount() {\n        const positiveAmount = this._amountValue.abs();\n        const configDecimalPlaces = this.configDecimalPlaces;\n        const shouldAbbreviate = this.abbreviate && positiveAmount.isGreaterThanOrEqualTo(AmountComponent.abbreviationConfig.minAmount);\n        /**\n         * Example:\n         *\n         * {@link groupSymbol} = ','\n         * {@link decimalSymbol} = '.'\n         * {@link configDecimalPlaces} = '2'\n         *\n         * Here how regexp source looks line with config above: ([\\d,]+[.]\\d{2}).*\n         * This regexp has two selections:\n         * - selection for the group `([\\d,]+[.]\\d{2})` to match the decimal precision (no rounding)\n         * - and full string selection `.*` (used to replace full string with the group)\n         *\n         * REGEXP GROUP MATCHES ONLY THE AMOUNTS THAT HAVE TO BE UPDATED (TRIMMED)\n         *\n         * There are the cases when it does not have an effect, and it means that amount is already in appropriate format\n         */\n        const regexp = new RegExp(`([\\\\d${this.groupSymbol}]+[${this.decimalSymbol}]\\\\d{${configDecimalPlaces}}).*`, 'g');\n        const amount = shouldAbbreviate ? this.getAbbreviatedAmount(positiveAmount) : positiveAmount;\n        const amountDecimalPlaces = amount.decimalPlaces();\n        // In order to keep the precision keeping the original decimal places and replace with regexp\n        const formattedAmount = amount\n            .toFormat(amountDecimalPlaces, BigNumber.ROUND_CEIL, this.numberFormat)\n            .replace(regexp, '$1');\n        return this.getAmountWithZeroPaddings(formattedAmount, configDecimalPlaces, amountDecimalPlaces);\n    }\n    getAmountWithZeroPaddings(formattedAmount, configDecimalPlaces, amountDecimalPlaces) {\n        if (!this.trailingZeroes || amountDecimalPlaces >= configDecimalPlaces) {\n            return formattedAmount;\n        }\n        const amountOfZeros = configDecimalPlaces - amountDecimalPlaces;\n        let stringToAppend = '0'.repeat(amountOfZeros);\n        if (!formattedAmount.includes(this.decimalSymbol)) {\n            stringToAppend = this.decimalSymbol + stringToAppend;\n        }\n        return formattedAmount + stringToAppend;\n    }\n    setupConfiguration() {\n        if (!AmountComponent.localeConfig) {\n            AmountComponent.localeConfig = {\n                currencyFormat: getLocaleNumberFormat(this.locale, NumberFormatStyle.Currency),\n                decimalFormat: getLocaleNumberFormat(this.locale, NumberFormatStyle.Decimal),\n                percentFormat: getLocaleNumberFormat(this.locale, NumberFormatStyle.Percent),\n                decimalSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.Decimal),\n                groupSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.Group),\n                currencyGroupSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyGroup),\n                currencyDecimalSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal),\n                minusSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.MinusSign),\n                plusSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.PlusSign),\n                percentSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.PercentSign),\n            };\n        }\n    }\n    updateNumberFormat() {\n        const { decimalSymbol, currencyDecimalSymbol, groupSymbol, currencyGroupSymbol } = AmountComponent.localeConfig;\n        this.groupSymbol = this.currency ? currencyGroupSymbol : groupSymbol;\n        this.decimalSymbol = this.currency ? currencyDecimalSymbol : decimalSymbol;\n        this.numberFormat = {\n            groupSeparator: this.groupSymbol,\n            decimalSeparator: this.decimalSymbol,\n            groupSize: 3,\n        };\n    }\n    /**\n     * Converts original amount to abbreviated\n     * Max abbreviated suffix value is 'T' (trillion) see {@link AmountComponent.abbreviationConfig}\n     */\n    getAbbreviatedAmount(positiveAmount) {\n        const suffixes = AmountComponent.abbreviationConfig.suffixes;\n        const config = { suffix: suffixes[0], amount: positiveAmount.shiftedBy(-3) };\n        for (let i = 1; i < suffixes.length; i++) {\n            if (!config.amount.isGreaterThanOrEqualTo(1000)) {\n                break;\n            }\n            config.suffix = suffixes[i];\n            config.amount = config.amount.shiftedBy(-3);\n        }\n        this.abbreviationSuffix = config.suffix;\n        return config.amount;\n    }\n    getAmountTemplate(amount) {\n        const { percentSymbol, minusSymbol, plusSymbol } = AmountComponent.localeConfig;\n        const signSymbol = this.isPositive ? plusSymbol : minusSymbol;\n        const currencySymbol = this.mapCurrency ? getCurrencySymbol(this.currency, 'wide', this.locale) : this.currency;\n        return this.amountFormat\n            .replace(signSymbol, this.fillTemplate('sign', signSymbol))\n            .replace('¤', this.fillTemplate('currency', currencySymbol))\n            .replace('%', this.fillTemplate('percent', percentSymbol))\n            .replace(/[#0,.]+/g, this.wrapAmount(amount));\n    }\n    wrapAmount(amount) {\n        const [integer, decimals] = amount.split(this.decimalSymbol);\n        return (this.fillTemplate('integer', integer) +\n            (decimals ? this.fillTemplate('separator', this.decimalSymbol) + this.fillTemplate('decimals', decimals) : ''));\n    }\n    fillTemplate(templateKey, value) {\n        return AmountComponent.templates[templateKey].replace(AmountComponent.placeholder, value);\n    }\n}\nAmountComponent.placeholder = '{{}}';\nAmountComponent.templates = {\n    sign: `<span class=\"sign\">${AmountComponent.placeholder}</span>`,\n    currency: `<span class=\"symbol\">${AmountComponent.placeholder}</span>`,\n    integer: `<span class=\"integer\">${AmountComponent.placeholder}</span>`,\n    separator: `<span class=\"decimal-separator\">${AmountComponent.placeholder}</span>`,\n    decimals: `<span class=\"decimals\">${AmountComponent.placeholder}</span>`,\n    percent: `<span class=\"percent\">${AmountComponent.placeholder}</span>`,\n};\nAmountComponent.abbreviationConfig = {\n    minAmount: 100000,\n    suffixes: ['K', 'M', 'B', 'T'],\n};\nAmountComponent.maxSafeIntegerLength = Number.MAX_SAFE_INTEGER.toString().length;\nAmountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AmountComponent, deps: [{ token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Component });\nAmountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: AmountComponent, selector: \"bb-amount-ui\", inputs: { currency: \"currency\", showPlusSign: \"showPlusSign\", mapCurrency: \"mapCurrency\", showPercent: \"showPercent\", abbreviate: \"abbreviate\", decimalPlaces: \"decimalPlaces\", trailingZeroes: \"trailingZeroes\", amount: \"amount\" }, usesOnChanges: true, ngImport: i0, template: \"<span *ngIf=\\\"isNumeric\\\" data-role=\\\"bb-amount-value\\\" class=\\\"bb-amount\\\">\\n  <span [innerHtml]=\\\"amountTemplate\\\" class=\\\"amount bb-amount__value\\\" data-role=\\\"bb-amount-value__amount\\\"></span>\\n  <ng-container *ngIf=\\\"abbreviationSuffix\\\"\\n    >&nbsp;<span class=\\\"sr-only\\\" i18n=\\\"Amount abbreviation long suffix@@bb-amount-ui.abbr.long\\\" #abbrTitle\\n      >{ abbreviationSuffix, select, K {Thousand} M {Million} B {Billion} T {Trillion} }</span\\n    ><abbr\\n      [title]=\\\"abbrTitle.textContent\\\"\\n      aria-hidden=\\\"true\\\"\\n      data-role=\\\"bb-amount-value__abbreviation\\\"\\n      i18n=\\\"Amount abbreviation short suffix@@bb-amount-ui.abbr.short\\\"\\n      class=\\\"abbreviation bb-amount__abbreviation\\\"\\n      >{ abbreviationSuffix, select, K {K} M {M} B {B} T {T} }</abbr\\n    >\\n  </ng-container>\\n</span>\\n\", directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AmountComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-amount-ui',\n                    templateUrl: './amount.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LOCALE_ID]\n                }] }]; }, propDecorators: { currency: [{\n                type: Input\n            }], showPlusSign: [{\n                type: Input\n            }], mapCurrency: [{\n                type: Input\n            }], showPercent: [{\n                type: Input\n            }], abbreviate: [{\n                type: Input\n            }], decimalPlaces: [{\n                type: Input\n            }], trailingZeroes: [{\n                type: Input\n            }], amount: [{\n                type: Input\n            }] } });\n\nclass AmountModule {\n}\nAmountModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AmountModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAmountModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AmountModule, declarations: [AmountComponent], imports: [CommonModule], exports: [AmountComponent] });\nAmountModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AmountModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AmountModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [AmountComponent],\n                    exports: [AmountComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AmountComponent, AmountModule, AmountComponent as FormatAmountComponent, AmountModule as FormatAmountModule };\n"]},"metadata":{},"sourceType":"module"}