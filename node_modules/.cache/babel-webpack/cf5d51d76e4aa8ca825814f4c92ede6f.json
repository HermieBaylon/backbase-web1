{"ast":null,"code":"import * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { forwardRef, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { IconModule } from '@backbase/ui-ang/icon';\nimport * as i5 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';\nimport * as i3 from '@backbase/ui-ang/char-counter';\nimport { CharCounterModule } from '@backbase/ui-ang/char-counter';\nimport { idListAttr } from '@backbase/ui-ang/util';\nimport * as i1 from '@backbase/ui-ang/services';\nimport * as i2 from '@backbase/foundation-ang/future';\nimport * as i6 from 'ngx-mask';\nimport { NgxMaskModule } from 'ngx-mask';\nimport * as i7 from '@backbase/ui-ang/focus';\nimport { FocusModule } from '@backbase/ui-ang/focus';\n/**\n * @name InputTextComponent\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes. You need to take care of properties that are required in your case :\n *  - role\n *  - aria-activedescendant\n *  - aria-describedby\n *  - aria-expanded\n *  - aria-invalid\n *  - aria-label\n *  - aria-labelledby\n *  - aria-owns\n *\n * @description\n * Component that displays a text input.\n */\n\nconst _c0 = [\"inputText\"];\n\nfunction InputTextComponent_label_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"for\", ctx_r0.id);\n    i0.ɵɵattribute(\"data-role\", \"label\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.label);\n  }\n}\n\nfunction InputTextComponent_bb_char_counter_ui_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"bb-char-counter-ui\", 5);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n\n    const _r1 = i0.ɵɵreference(2);\n\n    i0.ɵɵproperty(\"element\", _r1)(\"inputValue\", ctx_r2.value)(\"maxLength\", ctx_r2.maxLength);\n    i0.ɵɵattribute(\"id\", ctx_r2.charCounterId)(\"data-role\", \"text-input-char-counter\");\n  }\n}\n\nclass InputTextComponent extends InputBaseComponent {\n  constructor(domAttrService, elem, renderer2, cd, deprecationsService) {\n    super(cd, deprecationsService);\n    this.domAttrService = domAttrService;\n    this.elem = elem;\n    this.renderer2 = renderer2;\n    this.cd = cd;\n    this.deprecationsService = deprecationsService;\n    /**\n     * The placeholder for the text input. Defaults to an empty string;\n     */\n\n    this.placeholder = '';\n    /**\n     * Whether the text input is readonly.\n     */\n\n    this.readonly = false;\n    /**\n     * ngx-mask related; default value imply no mask is used\n     */\n\n    this.mask = '';\n    /**\n     * ngx-mask related; default value imply validation is applied on mask pattern\n     */\n\n    this.maskValidator = true;\n    /**\n     * Shows character counter based on `maxLength`\n     */\n\n    this.showCharCounter = false;\n    this.valueChange = this._valueChange;\n    /**\n     * Utility function for use in template\n     */\n\n    this.idListAttr = idListAttr;\n    this.charCounterId = this.domAttrService.generateId();\n  }\n\n  ngAfterViewInit() {\n    if (!this.ariaLabel) {\n      this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.inputEl && this.inputEl.nativeElement, this.renderer2);\n    }\n  }\n\n  focusEditableElement() {\n    if (this.inputEl) {\n      this.inputEl.nativeElement.focus();\n    }\n  }\n\n}\n\nInputTextComponent.ɵfac = function InputTextComponent_Factory(t) {\n  return new (t || InputTextComponent)(i0.ɵɵdirectiveInject(i1.DomAttributesService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.DeprecationsService));\n};\n\nInputTextComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: InputTextComponent,\n  selectors: [[\"bb-input-text-ui\"]],\n  viewQuery: function InputTextComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);\n    }\n  },\n  inputs: {\n    placeholder: \"placeholder\",\n    maxLength: \"maxLength\",\n    minLength: \"minLength\",\n    autocomplete: \"autocomplete\",\n    readonly: \"readonly\",\n    mask: \"mask\",\n    maskValidator: \"maskValidator\",\n    showCharCounter: \"showCharCounter\"\n  },\n  outputs: {\n    valueChange: \"valueChange\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InputTextComponent),\n    multi: true\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 4,\n  vars: 26,\n  consts: [[3, \"for\", 4, \"ngIf\"], [\"type\", \"text\", 1, \"form-control\", 3, \"id\", \"ngModel\", \"mask\", \"validation\", \"disabled\", \"readOnly\", \"placeholder\", \"required\", \"bbFocus\", \"ngClass\", \"ngModelChange\", \"blur\", \"focus\"], [\"inputText\", \"\"], [3, \"element\", \"inputValue\", \"maxLength\", 4, \"ngIf\"], [3, \"for\"], [3, \"element\", \"inputValue\", \"maxLength\"]],\n  template: function InputTextComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, InputTextComponent_label_0_Template, 2, 3, \"label\", 0);\n      i0.ɵɵelementStart(1, \"input\", 1, 2);\n      i0.ɵɵlistener(\"ngModelChange\", function InputTextComponent_Template_input_ngModelChange_1_listener($event) {\n        return ctx.onValueChange($event);\n      })(\"blur\", function InputTextComponent_Template_input_blur_1_listener($event) {\n        return ctx.onBlur($event);\n      })(\"focus\", function InputTextComponent_Template_input_focus_1_listener($event) {\n        return ctx.onFocus($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, InputTextComponent_bb_char_counter_ui_3_Template, 1, 5, \"bb-char-counter-ui\", 3);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.label);\n      i0.ɵɵadvance(1);\n      i0.ɵɵpropertyInterpolate(\"id\", ctx.id);\n      i0.ɵɵproperty(\"ngModel\", ctx.value)(\"mask\", ctx.mask)(\"validation\", ctx.maskValidator)(\"disabled\", ctx.disabled)(\"readOnly\", ctx.readonly)(\"placeholder\", ctx.placeholder)(\"required\", ctx.required)(\"bbFocus\", ctx.autofocus)(\"ngClass\", ctx.inputClassName);\n      i0.ɵɵattribute(\"aria-autocomplete\", ctx.ariaAutocomplete)(\"aria-controls\", ctx.ariaControls)(\"aria-describedby\", ctx.idListAttr(ctx.ariaDescribedby, ctx.maxLength && ctx.showCharCounter ? ctx.charCounterId : null))(\"aria-labelledby\", ctx.ariaLabelledby || null)(\"aria-expanded\", ctx.ariaExpanded)(\"role\", ctx.role)(\"aria-invalid\", ctx.ariaInvalid)(\"aria-owns\", ctx.ariaOwns)(\"aria-label\", !ctx.label && ctx.ariaLabel || null)(\"size\", ctx.size)(\"maxlength\", ctx.maxLength)(\"minlength\", ctx.minLength)(\"autocomplete\", ctx.autocomplete)(\"data-role\", \"input\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.maxLength && ctx.showCharCounter);\n    }\n  },\n  directives: [i4.NgIf, i5.DefaultValueAccessor, i6.MaskDirective, i5.NgControlStatus, i5.NgModel, i5.RequiredValidator, i5.MaxLengthValidator, i5.MinLengthValidator, i7.FocusDirective, i4.NgClass, i3.CharCounterComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputTextComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-input-text-ui',\n      templateUrl: './input-text.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => InputTextComponent),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i1.DomAttributesService\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i2.DeprecationsService\n    }];\n  }, {\n    placeholder: [{\n      type: Input\n    }],\n    maxLength: [{\n      type: Input\n    }],\n    minLength: [{\n      type: Input\n    }],\n    autocomplete: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    mask: [{\n      type: Input\n    }],\n    maskValidator: [{\n      type: Input\n    }],\n    showCharCounter: [{\n      type: Input\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    inputEl: [{\n      type: ViewChild,\n      args: ['inputText']\n    }]\n  });\n})();\n\nclass InputTextModule {}\n\nInputTextModule.ɵfac = function InputTextModule_Factory(t) {\n  return new (t || InputTextModule)();\n};\n\nInputTextModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: InputTextModule\n});\nInputTextModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, IconModule, FormsModule, BaseClassesModule, FocusModule, CharCounterModule, NgxMaskModule.forRoot()]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputTextModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, IconModule, FormsModule, BaseClassesModule, FocusModule, CharCounterModule, NgxMaskModule.forRoot()],\n      declarations: [InputTextComponent],\n      exports: [InputTextComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { InputTextComponent, InputTextModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-input-text.js"],"names":["i4","CommonModule","i0","forwardRef","Component","ChangeDetectionStrategy","Input","Output","ViewChild","NgModule","IconModule","i5","NG_VALUE_ACCESSOR","FormsModule","InputBaseComponent","BaseClassesModule","i3","CharCounterModule","idListAttr","i1","i2","i6","NgxMaskModule","i7","FocusModule","InputTextComponent","constructor","domAttrService","elem","renderer2","cd","deprecationsService","placeholder","readonly","mask","maskValidator","showCharCounter","valueChange","_valueChange","charCounterId","generateId","ngAfterViewInit","ariaLabel","moveAriaAttributes","nativeElement","inputEl","focusEditableElement","focus","ɵfac","DomAttributesService","ElementRef","Renderer2","ChangeDetectorRef","DeprecationsService","ɵcmp","provide","useExisting","multi","NgIf","DefaultValueAccessor","MaskDirective","NgControlStatus","NgModel","RequiredValidator","MaxLengthValidator","MinLengthValidator","FocusDirective","NgClass","CharCounterComponent","type","args","selector","templateUrl","changeDetection","OnPush","providers","maxLength","minLength","autocomplete","InputTextModule","ɵmod","ɵinj","forRoot","imports","declarations","exports"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,uBAAhC,EAAyDC,KAAzD,EAAgEC,MAAhE,EAAwEC,SAAxE,EAAmFC,QAAnF,QAAmG,eAAnG;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,OAAO,KAAKC,EAAZ,MAAoB,gBAApB;AACA,SAASC,iBAAT,EAA4BC,WAA5B,QAA+C,gBAA/C;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,QAAsD,+BAAtD;AACA,OAAO,KAAKC,EAAZ,MAAoB,+BAApB;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,OAAO,KAAKC,EAAZ,MAAoB,2BAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iCAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,UAApB;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,OAAO,KAAKC,EAAZ,MAAoB,wBAApB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AA+CsGtB,IAAAA,EAOuD,8B;AAPvDA,IAAAA,EAO4H,U;AAP5HA,IAAAA,EAOuI,e;;;;mBAPvIA,E;AAAAA,IAAAA,EAO8E,wC;AAP9EA,IAAAA,EAO+F,kC;AAP/FA,IAAAA,EAO4H,a;AAP5HA,IAAAA,EAO4H,gC;;;;;;AAP5HA,IAAAA,EAO8qC,sC;;;;mBAP9qCA,E;;gBAAAA,E;;AAAAA,IAAAA,EAO8wC,sF;AAP9wCA,IAAAA,EAOqsC,gF;;;;AArD3yC,MAAMuB,kBAAN,SAAiCX,kBAAjC,CAAoD;AAChDY,EAAAA,WAAW,CAACC,cAAD,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,EAAlC,EAAsCC,mBAAtC,EAA2D;AAClE,UAAMD,EAAN,EAAUC,mBAAV;AACA,SAAKJ,cAAL,GAAsBA,cAAtB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,EAAL,GAAUA,EAAV;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACA;AACR;AACA;;AACQ,SAAKC,WAAL,GAAmB,EAAnB;AACA;AACR;AACA;;AACQ,SAAKC,QAAL,GAAgB,KAAhB;AACA;AACR;AACA;;AACQ,SAAKC,IAAL,GAAY,EAAZ;AACA;AACR;AACA;;AACQ,SAAKC,aAAL,GAAqB,IAArB;AACA;AACR;AACA;;AACQ,SAAKC,eAAL,GAAuB,KAAvB;AACA,SAAKC,WAAL,GAAmB,KAAKC,YAAxB;AACA;AACR;AACA;;AACQ,SAAKpB,UAAL,GAAkBA,UAAlB;AACA,SAAKqB,aAAL,GAAqB,KAAKZ,cAAL,CAAoBa,UAApB,EAArB;AACH;;AACDC,EAAAA,eAAe,GAAG;AACd,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACjB,WAAKf,cAAL,CAAoBgB,kBAApB,CAAuC,KAAKf,IAAL,CAAUgB,aAAjD,EAAgE,KAAKC,OAAL,IAAgB,KAAKA,OAAL,CAAaD,aAA7F,EAA4G,KAAKf,SAAjH;AACH;AACJ;;AACDiB,EAAAA,oBAAoB,GAAG;AACnB,QAAI,KAAKD,OAAT,EAAkB;AACd,WAAKA,OAAL,CAAaD,aAAb,CAA2BG,KAA3B;AACH;AACJ;;AA5C+C;;AA8CpDtB,kBAAkB,CAACuB,IAAnB;AAAA,mBAAgHvB,kBAAhH,EAAsGvB,EAAtG,mBAAoJiB,EAAE,CAAC8B,oBAAvJ,GAAsG/C,EAAtG,mBAAwLA,EAAE,CAACgD,UAA3L,GAAsGhD,EAAtG,mBAAkNA,EAAE,CAACiD,SAArN,GAAsGjD,EAAtG,mBAA2OA,EAAE,CAACkD,iBAA9O,GAAsGlD,EAAtG,mBAA4QkB,EAAE,CAACiC,mBAA/Q;AAAA;;AACA5B,kBAAkB,CAAC6B,IAAnB,kBADsGpD,EACtG;AAAA,QAAoGuB,kBAApG;AAAA;AAAA;AAAA;AADsGvB,MAAAA,EACtG;AAAA;;AAAA;AAAA;;AADsGA,MAAAA,EACtG,qBADsGA,EACtG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADsGA,EACtG,oBAAwa,CACha;AACIqD,IAAAA,OAAO,EAAE3C,iBADb;AAEI4C,IAAAA,WAAW,EAAErD,UAAU,CAAC,MAAMsB,kBAAP,CAF3B;AAGIgC,IAAAA,KAAK,EAAE;AAHX,GADga,CAAxa,GADsGvD,EACtG;AAAA;AAAA;AAAA;AAAA;AAAA;AADsGA,MAAAA,EAOuD,qEAN7J;AADsGA,MAAAA,EAOiJ,iCANvP;AADsGA,MAAAA,EAOkpB;AAAA,eAAkB,yBAAlB;AAAA;AAAA,eAAsD,kBAAtD;AAAA;AAAA,eAA+H,mBAA/H;AAAA,QANxvB;AADsGA,MAAAA,EAOiJ,eANvP;AADsGA,MAAAA,EAO8qC,+FANpxC;AAAA;;AAAA;AADsGA,MAAAA,EAO+D,8BANrK;AADsGA,MAAAA,EAO2J,aANjQ;AADsGA,MAAAA,EAO2J,oCANjQ;AADsGA,MAAAA,EAO2nB,2PANjuB;AADsGA,MAAAA,EAO4L,yiBANlS;AADsGA,MAAAA,EAOquC,aAN30C;AADsGA,MAAAA,EAOquC,yDAN30C;AAAA;AAAA;AAAA,eAMwrDF,EAAE,CAAC0D,IAN3rD,EAMywD/C,EAAE,CAACgD,oBAN5wD,EAMsgEtC,EAAE,CAACuC,aANzgE,EAM+4EjD,EAAE,CAACkD,eANl5E,EAMo+ElD,EAAE,CAACmD,OANv+E,EAMyqFnD,EAAE,CAACoD,iBAN5qF,EAMm3FpD,EAAE,CAACqD,kBANt3F,EAMmgGrD,EAAE,CAACsD,kBANtgG,EAMmpG1C,EAAE,CAAC2C,cANtpG,EAMmvGlE,EAAE,CAACmE,OANtvG,EAMwiDnD,EAAE,CAACoD,oBAN3iD;AAAA;AAAA;AAAA;;AAOA;AAAA,qDARsGlE,EAQtG,mBAA4FuB,kBAA5F,EAA4H,CAAC;AACjH4C,IAAAA,IAAI,EAAEjE,SAD2G;AAEjHkE,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,kBADX;AAECC,MAAAA,WAAW,EAAE,6BAFd;AAGCC,MAAAA,eAAe,EAAEpE,uBAAuB,CAACqE,MAH1C;AAICC,MAAAA,SAAS,EAAE,CACP;AACIpB,QAAAA,OAAO,EAAE3C,iBADb;AAEI4C,QAAAA,WAAW,EAAErD,UAAU,CAAC,MAAMsB,kBAAP,CAF3B;AAGIgC,QAAAA,KAAK,EAAE;AAHX,OADO;AAJZ,KAAD;AAF2G,GAAD,CAA5H,EAc4B,YAAY;AAAE,WAAO,CAAC;AAAEY,MAAAA,IAAI,EAAElD,EAAE,CAAC8B;AAAX,KAAD,EAAoC;AAAEoB,MAAAA,IAAI,EAAEnE,EAAE,CAACgD;AAAX,KAApC,EAA6D;AAAEmB,MAAAA,IAAI,EAAEnE,EAAE,CAACiD;AAAX,KAA7D,EAAqF;AAAEkB,MAAAA,IAAI,EAAEnE,EAAE,CAACkD;AAAX,KAArF,EAAqH;AAAEiB,MAAAA,IAAI,EAAEjD,EAAE,CAACiC;AAAX,KAArH,CAAP;AAAgK,GAd1M,EAc4N;AAAErB,IAAAA,WAAW,EAAE,CAAC;AAC5NqC,MAAAA,IAAI,EAAE/D;AADsN,KAAD,CAAf;AAE5MsE,IAAAA,SAAS,EAAE,CAAC;AACZP,MAAAA,IAAI,EAAE/D;AADM,KAAD,CAFiM;AAI5MuE,IAAAA,SAAS,EAAE,CAAC;AACZR,MAAAA,IAAI,EAAE/D;AADM,KAAD,CAJiM;AAM5MwE,IAAAA,YAAY,EAAE,CAAC;AACfT,MAAAA,IAAI,EAAE/D;AADS,KAAD,CAN8L;AAQ5M2B,IAAAA,QAAQ,EAAE,CAAC;AACXoC,MAAAA,IAAI,EAAE/D;AADK,KAAD,CARkM;AAU5M4B,IAAAA,IAAI,EAAE,CAAC;AACPmC,MAAAA,IAAI,EAAE/D;AADC,KAAD,CAVsM;AAY5M6B,IAAAA,aAAa,EAAE,CAAC;AAChBkC,MAAAA,IAAI,EAAE/D;AADU,KAAD,CAZ6L;AAc5M8B,IAAAA,eAAe,EAAE,CAAC;AAClBiC,MAAAA,IAAI,EAAE/D;AADY,KAAD,CAd2L;AAgB5M+B,IAAAA,WAAW,EAAE,CAAC;AACdgC,MAAAA,IAAI,EAAE9D;AADQ,KAAD,CAhB+L;AAkB5MsC,IAAAA,OAAO,EAAE,CAAC;AACVwB,MAAAA,IAAI,EAAE7D,SADI;AAEV8D,MAAAA,IAAI,EAAE,CAAC,WAAD;AAFI,KAAD;AAlBmM,GAd5N;AAAA;;AAqCA,MAAMS,eAAN,CAAsB;;AAEtBA,eAAe,CAAC/B,IAAhB;AAAA,mBAA6G+B,eAA7G;AAAA;;AACAA,eAAe,CAACC,IAAhB,kBAhDsG9E,EAgDtG;AAAA,QAA8G6E;AAA9G;AAMAA,eAAe,CAACE,IAAhB,kBAtDsG/E,EAsDtG;AAAA,YAAyI,CAC7HD,YAD6H,EAE7HS,UAF6H,EAG7HG,WAH6H,EAI7HE,iBAJ6H,EAK7HS,WAL6H,EAM7HP,iBAN6H,EAO7HK,aAAa,CAAC4D,OAAd,EAP6H,CAAzI;AAAA;;AASA;AAAA,qDA/DsGhF,EA+DtG,mBAA4F6E,eAA5F,EAAyH,CAAC;AAC9GV,IAAAA,IAAI,EAAE5D,QADwG;AAE9G6D,IAAAA,IAAI,EAAE,CAAC;AACCa,MAAAA,OAAO,EAAE,CACLlF,YADK,EAELS,UAFK,EAGLG,WAHK,EAILE,iBAJK,EAKLS,WALK,EAMLP,iBANK,EAOLK,aAAa,CAAC4D,OAAd,EAPK,CADV;AAUCE,MAAAA,YAAY,EAAE,CAAC3D,kBAAD,CAVf;AAWC4D,MAAAA,OAAO,EAAE,CAAC5D,kBAAD;AAXV,KAAD;AAFwG,GAAD,CAAzH;AAAA;AAiBA;AACA;AACA;;;AAEA,SAASA,kBAAT,EAA6BsD,eAA7B","sourcesContent":["import * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { forwardRef, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { IconModule } from '@backbase/ui-ang/icon';\nimport * as i5 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';\nimport * as i3 from '@backbase/ui-ang/char-counter';\nimport { CharCounterModule } from '@backbase/ui-ang/char-counter';\nimport { idListAttr } from '@backbase/ui-ang/util';\nimport * as i1 from '@backbase/ui-ang/services';\nimport * as i2 from '@backbase/foundation-ang/future';\nimport * as i6 from 'ngx-mask';\nimport { NgxMaskModule } from 'ngx-mask';\nimport * as i7 from '@backbase/ui-ang/focus';\nimport { FocusModule } from '@backbase/ui-ang/focus';\n\n/**\n * @name InputTextComponent\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes. You need to take care of properties that are required in your case :\n *  - role\n *  - aria-activedescendant\n *  - aria-describedby\n *  - aria-expanded\n *  - aria-invalid\n *  - aria-label\n *  - aria-labelledby\n *  - aria-owns\n *\n * @description\n * Component that displays a text input.\n */\nclass InputTextComponent extends InputBaseComponent {\n    constructor(domAttrService, elem, renderer2, cd, deprecationsService) {\n        super(cd, deprecationsService);\n        this.domAttrService = domAttrService;\n        this.elem = elem;\n        this.renderer2 = renderer2;\n        this.cd = cd;\n        this.deprecationsService = deprecationsService;\n        /**\n         * The placeholder for the text input. Defaults to an empty string;\n         */\n        this.placeholder = '';\n        /**\n         * Whether the text input is readonly.\n         */\n        this.readonly = false;\n        /**\n         * ngx-mask related; default value imply no mask is used\n         */\n        this.mask = '';\n        /**\n         * ngx-mask related; default value imply validation is applied on mask pattern\n         */\n        this.maskValidator = true;\n        /**\n         * Shows character counter based on `maxLength`\n         */\n        this.showCharCounter = false;\n        this.valueChange = this._valueChange;\n        /**\n         * Utility function for use in template\n         */\n        this.idListAttr = idListAttr;\n        this.charCounterId = this.domAttrService.generateId();\n    }\n    ngAfterViewInit() {\n        if (!this.ariaLabel) {\n            this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.inputEl && this.inputEl.nativeElement, this.renderer2);\n        }\n    }\n    focusEditableElement() {\n        if (this.inputEl) {\n            this.inputEl.nativeElement.focus();\n        }\n    }\n}\nInputTextComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputTextComponent, deps: [{ token: i1.DomAttributesService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: i2.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });\nInputTextComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: InputTextComponent, selector: \"bb-input-text-ui\", inputs: { placeholder: \"placeholder\", maxLength: \"maxLength\", minLength: \"minLength\", autocomplete: \"autocomplete\", readonly: \"readonly\", mask: \"mask\", maskValidator: \"maskValidator\", showCharCounter: \"showCharCounter\" }, outputs: { valueChange: \"valueChange\" }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => InputTextComponent),\n            multi: true,\n        },\n    ], viewQueries: [{ propertyName: \"inputEl\", first: true, predicate: [\"inputText\"], descendants: true }], usesInheritance: true, ngImport: i0, template: \"<label *ngIf=\\\"label\\\" for=\\\"{{ id }}\\\" [attr.data-role]=\\\"'label'\\\">{{ label }}</label>\\n<input\\n  id=\\\"{{ id }}\\\"\\n  #inputText\\n  [attr.aria-autocomplete]=\\\"ariaAutocomplete\\\"\\n  [attr.aria-controls]=\\\"ariaControls\\\"\\n  [attr.aria-describedby]=\\\"idListAttr(ariaDescribedby, maxLength && showCharCounter ? charCounterId : null)\\\"\\n  [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n  [attr.aria-expanded]=\\\"ariaExpanded\\\"\\n  [attr.role]=\\\"role\\\"\\n  [attr.aria-invalid]=\\\"ariaInvalid\\\"\\n  [attr.aria-owns]=\\\"ariaOwns\\\"\\n  [attr.aria-label]=\\\"(!label && ariaLabel) || null\\\"\\n  [ngModel]=\\\"value\\\"\\n  (ngModelChange)=\\\"onValueChange($event)\\\"\\n  (blur)=\\\"onBlur($event)\\\"\\n  type=\\\"text\\\"\\n  class=\\\"form-control\\\"\\n  (focus)=\\\"onFocus($event)\\\"\\n  [mask]=\\\"mask\\\"\\n  [validation]=\\\"maskValidator\\\"\\n  [disabled]=\\\"disabled\\\"\\n  [readOnly]=\\\"readonly\\\"\\n  [placeholder]=\\\"placeholder\\\"\\n  [required]=\\\"required\\\"\\n  [attr.size]=\\\"size\\\"\\n  [attr.maxlength]=\\\"maxLength\\\"\\n  [attr.minlength]=\\\"minLength\\\"\\n  [attr.autocomplete]=\\\"autocomplete\\\"\\n  [bbFocus]=\\\"autofocus\\\"\\n  [ngClass]=\\\"inputClassName\\\"\\n  [attr.data-role]=\\\"'input'\\\"\\n/>\\n<bb-char-counter-ui\\n  [attr.id]=\\\"charCounterId\\\"\\n  *ngIf=\\\"maxLength && showCharCounter\\\"\\n  [element]=\\\"inputText\\\"\\n  [inputValue]=\\\"value\\\"\\n  [maxLength]=\\\"maxLength\\\"\\n  [attr.data-role]=\\\"'text-input-char-counter'\\\"\\n>\\n</bb-char-counter-ui>\\n\", components: [{ type: i3.CharCounterComponent, selector: \"bb-char-counter-ui\", inputs: [\"inputValue\", \"element\", \"maxLength\", \"blockTyping\"] }], directives: [{ type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i5.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i6.MaskDirective, selector: \"input[mask], textarea[mask]\", inputs: [\"mask\", \"specialCharacters\", \"patterns\", \"prefix\", \"suffix\", \"thousandSeparator\", \"decimalMarker\", \"dropSpecialCharacters\", \"hiddenInput\", \"showMaskTyped\", \"placeHolderCharacter\", \"shownMaskExpression\", \"showTemplate\", \"clearIfNotMatch\", \"validation\", \"separatorLimit\", \"allowNegativeNumbers\", \"leadZeroDateTime\"] }, { type: i5.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i5.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i5.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { type: i5.MaxLengthValidator, selector: \"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\", inputs: [\"maxlength\"] }, { type: i5.MinLengthValidator, selector: \"[minlength][formControlName],[minlength][formControl],[minlength][ngModel]\", inputs: [\"minlength\"] }, { type: i7.FocusDirective, selector: \"[bbFocus]\", inputs: [\"bbFocus\"], exportAs: [\"bbFocus\"] }, { type: i4.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputTextComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-input-text-ui',\n                    templateUrl: './input-text.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => InputTextComponent),\n                            multi: true,\n                        },\n                    ],\n                }]\n        }], ctorParameters: function () { return [{ type: i1.DomAttributesService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i2.DeprecationsService }]; }, propDecorators: { placeholder: [{\n                type: Input\n            }], maxLength: [{\n                type: Input\n            }], minLength: [{\n                type: Input\n            }], autocomplete: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], mask: [{\n                type: Input\n            }], maskValidator: [{\n                type: Input\n            }], showCharCounter: [{\n                type: Input\n            }], valueChange: [{\n                type: Output\n            }], inputEl: [{\n                type: ViewChild,\n                args: ['inputText']\n            }] } });\n\nclass InputTextModule {\n}\nInputTextModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputTextModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nInputTextModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputTextModule, declarations: [InputTextComponent], imports: [CommonModule,\n        IconModule,\n        FormsModule,\n        BaseClassesModule,\n        FocusModule,\n        CharCounterModule, i6.NgxMaskModule], exports: [InputTextComponent] });\nInputTextModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputTextModule, imports: [[\n            CommonModule,\n            IconModule,\n            FormsModule,\n            BaseClassesModule,\n            FocusModule,\n            CharCounterModule,\n            NgxMaskModule.forRoot(),\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputTextModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        IconModule,\n                        FormsModule,\n                        BaseClassesModule,\n                        FocusModule,\n                        CharCounterModule,\n                        NgxMaskModule.forRoot(),\n                    ],\n                    declarations: [InputTextComponent],\n                    exports: [InputTextComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { InputTextComponent, InputTextModule };\n"]},"metadata":{},"sourceType":"module"}