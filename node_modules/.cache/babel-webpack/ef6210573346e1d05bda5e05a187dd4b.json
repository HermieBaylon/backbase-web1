{"ast":null,"code":"import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, Input, NgModule } from '@angular/core';\n/**\n * @name BadgeCounterComponent\n *\n * @description\n * Component that displays a counter badge.\n */\n\nconst _c0 = function (a0) {\n  return [a0];\n};\n\nfunction BadgeCounterComponent_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c0, ctx_r0.color ? \"badge-counter-\" + ctx_r0.color : \"\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.countValue, \" \");\n  }\n}\n\nclass BadgeCounterComponent {\n  constructor() {\n    /**\n     * The (background) color of the badge. Defaults to 'primary'.\n     */\n    this.color = 'primary';\n    /**\n     * The count to show in the badge. Defaults to 0 and badge will be hidden if count equals 0.\n     */\n\n    this.count = 0;\n    /**\n     * The max count value to limit text inside badge. Defaults to 999.\n     */\n\n    this.maxCount = 999;\n  }\n\n  ngOnChanges() {\n    const value = this.maxCount && this.maxCount > 0 && this.count && this.maxCount < this.count ? `${this.maxCount}+` : this.count;\n    this.countValue = value ? value.toString() : undefined;\n  }\n\n}\n\nBadgeCounterComponent.ɵfac = function BadgeCounterComponent_Factory(t) {\n  return new (t || BadgeCounterComponent)();\n};\n\nBadgeCounterComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BadgeCounterComponent,\n  selectors: [[\"bb-badge-counter-ui\"]],\n  inputs: {\n    color: \"color\",\n    count: \"count\",\n    maxCount: \"maxCount\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 1,\n  consts: [[1, \"bb-badge-counter\"], [\"class\", \"badge badge-counter\", 3, \"ngClass\", 4, \"ngIf\"], [1, \"badge\", \"badge-counter\", 3, \"ngClass\"]],\n  template: function BadgeCounterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, BadgeCounterComponent_span_1_Template, 2, 4, \"span\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.countValue);\n    }\n  },\n  directives: [i1.NgIf, i1.NgClass],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BadgeCounterComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-badge-counter-ui',\n      templateUrl: './badge-counter.component.html'\n    }]\n  }], null, {\n    color: [{\n      type: Input\n    }],\n    count: [{\n      type: Input\n    }],\n    maxCount: [{\n      type: Input\n    }]\n  });\n})();\n\nclass BadgeCounterModule {}\n\nBadgeCounterModule.ɵfac = function BadgeCounterModule_Factory(t) {\n  return new (t || BadgeCounterModule)();\n};\n\nBadgeCounterModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BadgeCounterModule\n});\nBadgeCounterModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BadgeCounterModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [BadgeCounterComponent],\n      exports: [BadgeCounterComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BadgeCounterComponent, BadgeCounterModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-badge-counter.js"],"names":["i1","CommonModule","i0","Component","Input","NgModule","BadgeCounterComponent","constructor","color","count","maxCount","ngOnChanges","value","countValue","toString","undefined","ɵfac","ɵcmp","NgIf","NgClass","type","args","selector","templateUrl","BadgeCounterModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, Input, NgModule } from '@angular/core';\n\n/**\n * @name BadgeCounterComponent\n *\n * @description\n * Component that displays a counter badge.\n */\nclass BadgeCounterComponent {\n    constructor() {\n        /**\n         * The (background) color of the badge. Defaults to 'primary'.\n         */\n        this.color = 'primary';\n        /**\n         * The count to show in the badge. Defaults to 0 and badge will be hidden if count equals 0.\n         */\n        this.count = 0;\n        /**\n         * The max count value to limit text inside badge. Defaults to 999.\n         */\n        this.maxCount = 999;\n    }\n    ngOnChanges() {\n        const value = this.maxCount && this.maxCount > 0 && this.count && this.maxCount < this.count ? `${this.maxCount}+` : this.count;\n        this.countValue = value ? value.toString() : undefined;\n    }\n}\nBadgeCounterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: BadgeCounterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nBadgeCounterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: BadgeCounterComponent, selector: \"bb-badge-counter-ui\", inputs: { color: \"color\", count: \"count\", maxCount: \"maxCount\" }, usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"bb-badge-counter\\\">\\n  <span class=\\\"badge badge-counter\\\" *ngIf=\\\"countValue\\\" [ngClass]=\\\"[color ? 'badge-counter-' + color : '']\\\">\\n    {{ countValue }}\\n  </span>\\n</div>\\n\", directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: BadgeCounterComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-badge-counter-ui',\n                    templateUrl: './badge-counter.component.html',\n                }]\n        }], propDecorators: { color: [{\n                type: Input\n            }], count: [{\n                type: Input\n            }], maxCount: [{\n                type: Input\n            }] } });\n\nclass BadgeCounterModule {\n}\nBadgeCounterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: BadgeCounterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBadgeCounterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: BadgeCounterModule, declarations: [BadgeCounterComponent], imports: [CommonModule], exports: [BadgeCounterComponent] });\nBadgeCounterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: BadgeCounterModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: BadgeCounterModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [BadgeCounterComponent],\n                    exports: [BadgeCounterComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BadgeCounterComponent, BadgeCounterModule };\n"]},"metadata":{},"sourceType":"module"}