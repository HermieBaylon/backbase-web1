{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, Pipe, NgModule } from '@angular/core';\nimport { segment } from '@backbase/ui-ang/util';\n/**\n * Account numbers displaying format\n */\n\nconst DefaultAccountsDisplayingFormat = {\n  segments: 4\n};\n/**\n * Accounts displaying format Token\n */\n\nconst ACCOUNTS_DISPLAYING_FORMAT = new InjectionToken('ACCOUNTS_DISPLAYING_FORMAT_TOKEN');\n/**\n * A configuration service for account numbers displaying format\n */\n\nclass AccountsDisplayingFormatService {\n  /**\n   * @name AccountsDisplayingFormatService#constructor\n   * @param accountsDisplayingFormat - (Optional) AccountsDisplayingFormatConfiguration\n   *\n   * @internal\n   */\n  constructor(accountsDisplayingFormat) {\n    this.accountsDisplayingFormat = accountsDisplayingFormat;\n  }\n  /**\n   * @name AccountsDisplayingFormatService#getDefaultFormat\n   * @param attributeType - numbers format attributeType\n   * @param cardProviderName - card provider name\n   *\n   * @description\n   * Gets default account numbers format per attribute type\n   */\n\n\n  getDefaultFormat(attributeType, cardProviderName) {\n    var _a, _b;\n\n    if (attributeType === 'cardNumber') {\n      return this.getCardNumberFormat(cardProviderName);\n    }\n\n    return (_b = (_a = this.accountsDisplayingFormat) === null || _a === void 0 ? void 0 : _a[attributeType]) !== null && _b !== void 0 ? _b : DefaultAccountsDisplayingFormat;\n  }\n\n  getCardNumberFormat(cardProviderName) {\n    var _a;\n\n    const cardNumber = (_a = this.accountsDisplayingFormat) === null || _a === void 0 ? void 0 : _a.cardNumber;\n    const providersConfiguration = Object.entries((cardNumber === null || cardNumber === void 0 ? void 0 : cardNumber.cardProviders) || {}).reduce((configuration, entry) => Object.assign(Object.assign({}, configuration), {\n      [entry[0].toLowerCase()]: entry[1]\n    }), {});\n\n    if (cardProviderName && providersConfiguration[cardProviderName.toLowerCase()]) {\n      return providersConfiguration[cardProviderName.toLowerCase()];\n    }\n\n    return cardNumber !== null && cardNumber !== void 0 ? cardNumber : DefaultAccountsDisplayingFormat;\n  }\n\n}\n\nAccountsDisplayingFormatService.ɵfac = function AccountsDisplayingFormatService_Factory(t) {\n  return new (t || AccountsDisplayingFormatService)(i0.ɵɵinject(ACCOUNTS_DISPLAYING_FORMAT, 8));\n};\n\nAccountsDisplayingFormatService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AccountsDisplayingFormatService,\n  factory: AccountsDisplayingFormatService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AccountsDisplayingFormatService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ACCOUNTS_DISPLAYING_FORMAT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Formats account numbers, applies different format configurations per number type\n */\n\n\nclass AccountNumberPipe {\n  /**\n   * @name AccountNumberPipe#constructor\n   * @param accountsDisplayingFormatService - AccountsDisplayingFormatService\n   *\n   * @internal\n   */\n  constructor(accountsDisplayingFormatService) {\n    this.accountsDisplayingFormatService = accountsDisplayingFormatService;\n  }\n  /**\n   * @name AccountNumberPipe#transform\n   * @param value - the string to transform\n   * @param configuration - type of the value (iban, bban or number) or a custom numbers format\n   * @param cardProviderName - card provider name\n   *\n   * @description\n   * Formats account numbers\n   *\n   * to use with a global accountsFormat configuration\n   * - '12345678' | bbAccountNumber:'iban'\n   * to apply a custom configuration\n   * - '12345678' | bbAccountNumber:{ segments: [2, 4, 2] }\n   * to apply a 'visa' card number configuration\n   * - '12345678' | bbAccountNumber:'cardNumber':'visa'\n   */\n\n\n  transform(value, configuration, cardProviderName) {\n    const accountNumber = value.toString();\n    const displayingFormat = typeof configuration === 'object' ? configuration : this.accountsDisplayingFormatService.getDefaultFormat(configuration, cardProviderName);\n    return segment(accountNumber, displayingFormat.segments);\n  }\n\n}\n\nAccountNumberPipe.ɵfac = function AccountNumberPipe_Factory(t) {\n  return new (t || AccountNumberPipe)(i0.ɵɵdirectiveInject(AccountsDisplayingFormatService, 16));\n};\n\nAccountNumberPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"bbAccountNumber\",\n  type: AccountNumberPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AccountNumberPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'bbAccountNumber'\n    }]\n  }], function () {\n    return [{\n      type: AccountsDisplayingFormatService\n    }];\n  }, null);\n})();\n\nclass AccountNumberPipeModule {}\n\nAccountNumberPipeModule.ɵfac = function AccountNumberPipeModule_Factory(t) {\n  return new (t || AccountNumberPipeModule)();\n};\n\nAccountNumberPipeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AccountNumberPipeModule\n});\nAccountNumberPipeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AccountNumberPipeModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [AccountNumberPipe],\n      exports: [AccountNumberPipe]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ACCOUNTS_DISPLAYING_FORMAT, AccountNumberPipe, AccountNumberPipeModule, AccountsDisplayingFormatService };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-account-number-pipe.js"],"names":["i0","InjectionToken","Injectable","Optional","Inject","Pipe","NgModule","segment","DefaultAccountsDisplayingFormat","segments","ACCOUNTS_DISPLAYING_FORMAT","AccountsDisplayingFormatService","constructor","accountsDisplayingFormat","getDefaultFormat","attributeType","cardProviderName","_a","_b","getCardNumberFormat","cardNumber","providersConfiguration","Object","entries","cardProviders","reduce","configuration","entry","assign","toLowerCase","ɵfac","ɵprov","type","args","providedIn","undefined","decorators","AccountNumberPipe","accountsDisplayingFormatService","transform","value","accountNumber","toString","displayingFormat","ɵpipe","name","AccountNumberPipeModule","ɵmod","ɵinj","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, Pipe, NgModule } from '@angular/core';\nimport { segment } from '@backbase/ui-ang/util';\n\n/**\n * Account numbers displaying format\n */\nconst DefaultAccountsDisplayingFormat = {\n    segments: 4,\n};\n/**\n * Accounts displaying format Token\n */\nconst ACCOUNTS_DISPLAYING_FORMAT = new InjectionToken('ACCOUNTS_DISPLAYING_FORMAT_TOKEN');\n\n/**\n * A configuration service for account numbers displaying format\n */\nclass AccountsDisplayingFormatService {\n    /**\n     * @name AccountsDisplayingFormatService#constructor\n     * @param accountsDisplayingFormat - (Optional) AccountsDisplayingFormatConfiguration\n     *\n     * @internal\n     */\n    constructor(accountsDisplayingFormat) {\n        this.accountsDisplayingFormat = accountsDisplayingFormat;\n    }\n    /**\n     * @name AccountsDisplayingFormatService#getDefaultFormat\n     * @param attributeType - numbers format attributeType\n     * @param cardProviderName - card provider name\n     *\n     * @description\n     * Gets default account numbers format per attribute type\n     */\n    getDefaultFormat(attributeType, cardProviderName) {\n        var _a, _b;\n        if (attributeType === 'cardNumber') {\n            return this.getCardNumberFormat(cardProviderName);\n        }\n        return (_b = (_a = this.accountsDisplayingFormat) === null || _a === void 0 ? void 0 : _a[attributeType]) !== null && _b !== void 0 ? _b : DefaultAccountsDisplayingFormat;\n    }\n    getCardNumberFormat(cardProviderName) {\n        var _a;\n        const cardNumber = (_a = this.accountsDisplayingFormat) === null || _a === void 0 ? void 0 : _a.cardNumber;\n        const providersConfiguration = Object.entries((cardNumber === null || cardNumber === void 0 ? void 0 : cardNumber.cardProviders) || {}).reduce((configuration, entry) => (Object.assign(Object.assign({}, configuration), { [entry[0].toLowerCase()]: entry[1] })), {});\n        if (cardProviderName && providersConfiguration[cardProviderName.toLowerCase()]) {\n            return providersConfiguration[cardProviderName.toLowerCase()];\n        }\n        return cardNumber !== null && cardNumber !== void 0 ? cardNumber : DefaultAccountsDisplayingFormat;\n    }\n}\nAccountsDisplayingFormatService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AccountsDisplayingFormatService, deps: [{ token: ACCOUNTS_DISPLAYING_FORMAT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nAccountsDisplayingFormatService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AccountsDisplayingFormatService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AccountsDisplayingFormatService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ACCOUNTS_DISPLAYING_FORMAT]\n                }] }]; } });\n\n/**\n * Formats account numbers, applies different format configurations per number type\n */\nclass AccountNumberPipe {\n    /**\n     * @name AccountNumberPipe#constructor\n     * @param accountsDisplayingFormatService - AccountsDisplayingFormatService\n     *\n     * @internal\n     */\n    constructor(accountsDisplayingFormatService) {\n        this.accountsDisplayingFormatService = accountsDisplayingFormatService;\n    }\n    /**\n     * @name AccountNumberPipe#transform\n     * @param value - the string to transform\n     * @param configuration - type of the value (iban, bban or number) or a custom numbers format\n     * @param cardProviderName - card provider name\n     *\n     * @description\n     * Formats account numbers\n     *\n     * to use with a global accountsFormat configuration\n     * - '12345678' | bbAccountNumber:'iban'\n     * to apply a custom configuration\n     * - '12345678' | bbAccountNumber:{ segments: [2, 4, 2] }\n     * to apply a 'visa' card number configuration\n     * - '12345678' | bbAccountNumber:'cardNumber':'visa'\n     */\n    transform(value, configuration, cardProviderName) {\n        const accountNumber = value.toString();\n        const displayingFormat = typeof configuration === 'object'\n            ? configuration\n            : this.accountsDisplayingFormatService.getDefaultFormat(configuration, cardProviderName);\n        return segment(accountNumber, displayingFormat.segments);\n    }\n}\nAccountNumberPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AccountNumberPipe, deps: [{ token: AccountsDisplayingFormatService }], target: i0.ɵɵFactoryTarget.Pipe });\nAccountNumberPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AccountNumberPipe, name: \"bbAccountNumber\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AccountNumberPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'bbAccountNumber',\n                }]\n        }], ctorParameters: function () { return [{ type: AccountsDisplayingFormatService }]; } });\n\nclass AccountNumberPipeModule {\n}\nAccountNumberPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AccountNumberPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAccountNumberPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AccountNumberPipeModule, declarations: [AccountNumberPipe], exports: [AccountNumberPipe] });\nAccountNumberPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AccountNumberPipeModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AccountNumberPipeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [AccountNumberPipe],\n                    exports: [AccountNumberPipe],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ACCOUNTS_DISPLAYING_FORMAT, AccountNumberPipe, AccountNumberPipeModule, AccountsDisplayingFormatService };\n"]},"metadata":{},"sourceType":"module"}