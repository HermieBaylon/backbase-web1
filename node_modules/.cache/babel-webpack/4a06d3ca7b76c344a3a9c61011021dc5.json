{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Optional, Self, Input, NgModule } from '@angular/core';\nimport { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';\nimport { idListAttr } from '@backbase/ui-ang/util';\nimport * as i1 from '@backbase/ui-ang/services';\nimport * as i2 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i3 from '@backbase/foundation-ang/future';\nimport * as i4 from '@backbase/ui-ang/char-counter';\nimport { CharCounterModule } from '@backbase/ui-ang/char-counter';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i6 from '@backbase/ui-ang/focus';\nimport { FocusModule } from '@backbase/ui-ang/focus';\n/**\n * @name TextareaComponent\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes. You need to take care of properties that are required in your case :\n *  - role\n *  - aria-activedescendant\n *  - aria-describedby\n *  - aria-expanded\n *  - aria-invalid\n *  - aria-label\n *  - aria-labelledby\n *  - aria-owns\n *\n * @description\n * Component that displays a text input.\n */\n\nfunction TextareaComponent_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"for\", ctx_r0.id);\n    i0.ɵɵattribute(\"data-role\", \"textarea-label\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.label);\n  }\n}\n\nfunction TextareaComponent_bb_char_counter_ui_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"bb-char-counter-ui\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n\n    const _r1 = i0.ɵɵreference(3);\n\n    i0.ɵɵproperty(\"element\", _r1)(\"inputValue\", ctx_r2.value)(\"maxLength\", ctx_r2.maxLength);\n    i0.ɵɵattribute(\"id\", ctx_r2.charCounterId)(\"data-role\", \"textarea-char-counter\");\n  }\n}\n\nconst _c0 = function (a0, a1) {\n  return {\n    \"ng-invalid\": a0,\n    \"ng-touched\": a1\n  };\n};\n\nclass TextareaComponent extends InputBaseComponent {\n  constructor(cd, domAttributesService, parentFormControl, deprecationsService) {\n    super(cd, deprecationsService);\n    this.cd = cd;\n    this.domAttributesService = domAttributesService;\n    this.parentFormControl = parentFormControl;\n    this.deprecationsService = deprecationsService;\n    /**\n     * The placeholder for the text input. Defaults to an empty string;\n     */\n\n    this.placeholder = '';\n    /**\n     * Whether the text input is readonly.\n     */\n\n    this.readonly = false;\n    /**\n     * Shows character counter based on `maxLength`\n     */\n\n    this.showCharCounter = false;\n    /**\n     * Utility function for use in template\n     */\n\n    this.idListAttr = idListAttr;\n    this.charCounterId = this.domAttributesService.generateId();\n\n    if (this.parentFormControl) {\n      this.parentFormControl.valueAccessor = this;\n    }\n  }\n\n}\n\nTextareaComponent.ɵfac = function TextareaComponent_Factory(t) {\n  return new (t || TextareaComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.DomAttributesService), i0.ɵɵdirectiveInject(i2.NgControl, 10), i0.ɵɵdirectiveInject(i3.DeprecationsService));\n};\n\nTextareaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TextareaComponent,\n  selectors: [[\"bb-textarea-ui\"]],\n  inputs: {\n    rows: \"rows\",\n    cols: \"cols\",\n    placeholder: \"placeholder\",\n    maxLength: \"maxLength\",\n    minLength: \"minLength\",\n    readonly: \"readonly\",\n    showCharCounter: \"showCharCounter\",\n    wrap: \"wrap\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 27,\n  consts: [[1, \"bb-textarea-ui\", 3, \"ngClass\"], [3, \"for\", 4, \"ngIf\"], [1, \"form-control\", 3, \"id\", \"ngModel\", \"rows\", \"cols\", \"disabled\", \"readOnly\", \"bbFocus\", \"placeholder\", \"required\", \"wrap\", \"ngModelChange\", \"blur\", \"focus\"], [\"textarea\", \"\"], [3, \"element\", \"inputValue\", \"maxLength\", 4, \"ngIf\"], [3, \"for\"], [3, \"element\", \"inputValue\", \"maxLength\"]],\n  template: function TextareaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, TextareaComponent_label_1_Template, 2, 3, \"label\", 1);\n      i0.ɵɵelementStart(2, \"textarea\", 2, 3);\n      i0.ɵɵlistener(\"ngModelChange\", function TextareaComponent_Template_textarea_ngModelChange_2_listener($event) {\n        return ctx.onValueChange($event);\n      })(\"blur\", function TextareaComponent_Template_textarea_blur_2_listener() {\n        return ctx.onBlur();\n      })(\"focus\", function TextareaComponent_Template_textarea_focus_2_listener() {\n        return ctx.onFocus();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, TextareaComponent_bb_char_counter_ui_4_Template, 1, 5, \"bb-char-counter-ui\", 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(24, _c0, ctx.parentFormControl == null ? null : ctx.parentFormControl.invalid, ctx.parentFormControl == null ? null : ctx.parentFormControl.touched));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.label);\n      i0.ɵɵadvance(1);\n      i0.ɵɵpropertyInterpolate(\"id\", ctx.id);\n      i0.ɵɵproperty(\"ngModel\", ctx.value)(\"rows\", ctx.rows)(\"cols\", ctx.cols)(\"disabled\", ctx.disabled)(\"readOnly\", ctx.readonly)(\"bbFocus\", ctx.autofocus)(\"placeholder\", ctx.placeholder)(\"required\", ctx.required)(\"wrap\", ctx.wrap);\n      i0.ɵɵattribute(\"aria-label\", ctx.label ? null : ctx.ariaLabel || null)(\"aria-describedby\", ctx.idListAttr(ctx.ariaDescribedby, ctx.maxLength && ctx.showCharCounter ? ctx.charCounterId : null))(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-expanded\", ctx.ariaExpanded)(\"role\", ctx.role)(\"aria-invalid\", ctx.ariaInvalid)(\"aria-owns\", ctx.ariaOwns)(\"aria-activedescendant\", ctx.ariaActivedescendant)(\"maxlength\", ctx.maxLength)(\"minlength\", ctx.minLength)(\"data-role\", \"textarea-text-field\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.maxLength && ctx.showCharCounter);\n    }\n  },\n  directives: [i5.NgClass, i5.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i6.FocusDirective, i2.RequiredValidator, i2.MaxLengthValidator, i2.MinLengthValidator, i4.CharCounterComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TextareaComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-textarea-ui',\n      templateUrl: './textarea.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.DomAttributesService\n    }, {\n      type: i2.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: i3.DeprecationsService\n    }];\n  }, {\n    rows: [{\n      type: Input\n    }],\n    cols: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    maxLength: [{\n      type: Input\n    }],\n    minLength: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    showCharCounter: [{\n      type: Input\n    }],\n    wrap: [{\n      type: Input\n    }]\n  });\n})();\n\nclass TextareaModule {}\n\nTextareaModule.ɵfac = function TextareaModule_Factory(t) {\n  return new (t || TextareaModule)();\n};\n\nTextareaModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TextareaModule\n});\nTextareaModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, FormsModule, BaseClassesModule, CharCounterModule, FocusModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TextareaModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule, BaseClassesModule, CharCounterModule, FocusModule],\n      declarations: [TextareaComponent],\n      exports: [TextareaComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TextareaComponent, TextareaModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-textarea.js"],"names":["i0","Component","ChangeDetectionStrategy","Optional","Self","Input","NgModule","InputBaseComponent","BaseClassesModule","idListAttr","i1","i2","FormsModule","i3","i4","CharCounterModule","i5","CommonModule","i6","FocusModule","TextareaComponent","constructor","cd","domAttributesService","parentFormControl","deprecationsService","placeholder","readonly","showCharCounter","charCounterId","generateId","valueAccessor","ɵfac","ChangeDetectorRef","DomAttributesService","NgControl","DeprecationsService","ɵcmp","NgClass","NgIf","DefaultValueAccessor","NgControlStatus","NgModel","FocusDirective","RequiredValidator","MaxLengthValidator","MinLengthValidator","CharCounterComponent","type","args","selector","templateUrl","changeDetection","OnPush","decorators","rows","cols","maxLength","minLength","wrap","TextareaModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Optional, Self, Input, NgModule } from '@angular/core';\nimport { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';\nimport { idListAttr } from '@backbase/ui-ang/util';\nimport * as i1 from '@backbase/ui-ang/services';\nimport * as i2 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i3 from '@backbase/foundation-ang/future';\nimport * as i4 from '@backbase/ui-ang/char-counter';\nimport { CharCounterModule } from '@backbase/ui-ang/char-counter';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i6 from '@backbase/ui-ang/focus';\nimport { FocusModule } from '@backbase/ui-ang/focus';\n\n/**\n * @name TextareaComponent\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes. You need to take care of properties that are required in your case :\n *  - role\n *  - aria-activedescendant\n *  - aria-describedby\n *  - aria-expanded\n *  - aria-invalid\n *  - aria-label\n *  - aria-labelledby\n *  - aria-owns\n *\n * @description\n * Component that displays a text input.\n */\nclass TextareaComponent extends InputBaseComponent {\n    constructor(cd, domAttributesService, parentFormControl, deprecationsService) {\n        super(cd, deprecationsService);\n        this.cd = cd;\n        this.domAttributesService = domAttributesService;\n        this.parentFormControl = parentFormControl;\n        this.deprecationsService = deprecationsService;\n        /**\n         * The placeholder for the text input. Defaults to an empty string;\n         */\n        this.placeholder = '';\n        /**\n         * Whether the text input is readonly.\n         */\n        this.readonly = false;\n        /**\n         * Shows character counter based on `maxLength`\n         */\n        this.showCharCounter = false;\n        /**\n         * Utility function for use in template\n         */\n        this.idListAttr = idListAttr;\n        this.charCounterId = this.domAttributesService.generateId();\n        if (this.parentFormControl) {\n            this.parentFormControl.valueAccessor = this;\n        }\n    }\n}\nTextareaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: TextareaComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DomAttributesService }, { token: i2.NgControl, optional: true, self: true }, { token: i3.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });\nTextareaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: TextareaComponent, selector: \"bb-textarea-ui\", inputs: { rows: \"rows\", cols: \"cols\", placeholder: \"placeholder\", maxLength: \"maxLength\", minLength: \"minLength\", readonly: \"readonly\", showCharCounter: \"showCharCounter\", wrap: \"wrap\" }, usesInheritance: true, ngImport: i0, template: \"<div\\n  class=\\\"bb-textarea-ui\\\"\\n  [ngClass]=\\\"{ 'ng-invalid': parentFormControl?.invalid, 'ng-touched': parentFormControl?.touched }\\\"\\n>\\n  <label *ngIf=\\\"label\\\" for=\\\"{{ id }}\\\" [attr.data-role]=\\\"'textarea-label'\\\">{{ label }}</label>\\n  <textarea\\n    #textarea\\n    id=\\\"{{ id }}\\\"\\n    [attr.aria-label]=\\\"label ? null : ariaLabel || null\\\"\\n    [attr.aria-describedby]=\\\"idListAttr(ariaDescribedby, maxLength && showCharCounter ? charCounterId : null)\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n    [attr.aria-expanded]=\\\"ariaExpanded\\\"\\n    [attr.role]=\\\"role\\\"\\n    [attr.aria-invalid]=\\\"ariaInvalid\\\"\\n    [attr.aria-owns]=\\\"ariaOwns\\\"\\n    [attr.aria-activedescendant]=\\\"ariaActivedescendant\\\"\\n    [ngModel]=\\\"value\\\"\\n    (ngModelChange)=\\\"onValueChange($event)\\\"\\n    (blur)=\\\"onBlur()\\\"\\n    class=\\\"form-control\\\"\\n    [rows]=\\\"rows\\\"\\n    [cols]=\\\"cols\\\"\\n    (focus)=\\\"onFocus()\\\"\\n    [disabled]=\\\"disabled\\\"\\n    [readOnly]=\\\"readonly\\\"\\n    [bbFocus]=\\\"autofocus\\\"\\n    [placeholder]=\\\"placeholder\\\"\\n    [required]=\\\"required\\\"\\n    [attr.maxlength]=\\\"maxLength\\\"\\n    [attr.minlength]=\\\"minLength\\\"\\n    [wrap]=\\\"wrap\\\"\\n    [attr.data-role]=\\\"'textarea-text-field'\\\"\\n  ></textarea>\\n  <bb-char-counter-ui\\n    [attr.id]=\\\"charCounterId\\\"\\n    *ngIf=\\\"maxLength && showCharCounter\\\"\\n    [element]=\\\"textarea\\\"\\n    [inputValue]=\\\"value\\\"\\n    [maxLength]=\\\"maxLength\\\"\\n    [attr.data-role]=\\\"'textarea-char-counter'\\\"\\n  >\\n  </bb-char-counter-ui>\\n</div>\\n\", components: [{ type: i4.CharCounterComponent, selector: \"bb-char-counter-ui\", inputs: [\"inputValue\", \"element\", \"maxLength\", \"blockTyping\"] }], directives: [{ type: i5.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i6.FocusDirective, selector: \"[bbFocus]\", inputs: [\"bbFocus\"], exportAs: [\"bbFocus\"] }, { type: i2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { type: i2.MaxLengthValidator, selector: \"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\", inputs: [\"maxlength\"] }, { type: i2.MinLengthValidator, selector: \"[minlength][formControlName],[minlength][formControl],[minlength][ngModel]\", inputs: [\"minlength\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: TextareaComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-textarea-ui',\n                    templateUrl: './textarea.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DomAttributesService }, { type: i2.NgControl, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i3.DeprecationsService }]; }, propDecorators: { rows: [{\n                type: Input\n            }], cols: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], maxLength: [{\n                type: Input\n            }], minLength: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], showCharCounter: [{\n                type: Input\n            }], wrap: [{\n                type: Input\n            }] } });\n\nclass TextareaModule {\n}\nTextareaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: TextareaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTextareaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: TextareaModule, declarations: [TextareaComponent], imports: [CommonModule, FormsModule, BaseClassesModule, CharCounterModule, FocusModule], exports: [TextareaComponent] });\nTextareaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: TextareaModule, imports: [[CommonModule, FormsModule, BaseClassesModule, CharCounterModule, FocusModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: TextareaModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, FormsModule, BaseClassesModule, CharCounterModule, FocusModule],\n                    declarations: [TextareaComponent],\n                    exports: [TextareaComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TextareaComponent, TextareaModule };\n"]},"metadata":{},"sourceType":"module"}