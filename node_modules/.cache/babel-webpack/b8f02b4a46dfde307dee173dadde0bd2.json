{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { CommonModule } from '@angular/common'; // Requires Promise and Array polyfills for older browsers\n\nlet savedVariables = null;\n\nfunction findStyleBlocks() {\n  return document.querySelectorAll('style:not(.inserted),link[rel=\"stylesheet\"]');\n}\n\nfunction getStyleBlocksTexts(styleBlocks) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return Promise.all(Array.from(styleBlocks).map(block => getStyleBlockText(block).catch(ignoreErrorForBlock)));\n  });\n} // the error for specific block should be ignored, to enable search in other blocks\n\n\nfunction ignoreErrorForBlock(err) {\n  console.error(err);\n  return '';\n}\n\nfunction getStyleBlockText(styleBlock) {\n  return __awaiter(this, void 0, void 0, function* () {\n    switch (styleBlock.nodeName) {\n      case 'STYLE':\n        return getTextForStyleNode(styleBlock);\n\n      case 'LINK':\n        return getTextForLinkNode(styleBlock);\n\n      default:\n        return '';\n    }\n  });\n}\n\nfunction getTextForStyleNode(styleBlock) {\n  return styleBlock.innerHTML;\n}\n\nfunction getTextForLinkNode(styleBlock) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const url = styleBlock.getAttribute('href');\n\n    if (!url) {\n      return Promise.resolve('');\n    }\n\n    return new Promise((resolve, reject) => {\n      const request = new XMLHttpRequest();\n      request.open('GET', url, true);\n      request.overrideMimeType('text/css;');\n\n      request.onload = function () {\n        if (request.status >= 200 && request.status < 400) {\n          resolve(request.responseText);\n        } else {\n          reject(`Error returned from: ${url}`);\n        }\n      };\n\n      request.onerror = function () {\n        reject(`Got nothing from: ${url}`);\n      };\n\n      request.send();\n    });\n  });\n}\n\nfunction extractVariablesListFromCssText(css) {\n  return css.match(/(-{2}\\w[\\w-]*)(?:\\s*:\\s*)([^;]*)(;|})/g);\n}\n\nfunction reduceVariablesList(variablesList) {\n  return variablesList.reduce((variables, variable) => {\n    const variablesWithValues = variable.split(/;\\s*/);\n    return Object.assign(Object.assign({}, variables), variablesWithValues.reduce((variableSet, variableWithValue) => {\n      const splitVariable = variableWithValue.split(/:\\s*/); // Note: For minified css files, the semicolon from last declaration statement is removed by angular cli\n      // for optimization purposes. For example below will be sample code in minified css file,\n      // :root{--chart-color-6:#c22327;--chart-color-2:#00a1e0}.chart-positive-color{color:#2e7d32}\n      // variableWithValue will gives us something like below for '--chart-color-2':-\n      // \"--chart-color-2: #00a1e0}.chart-positive-color{color:#2e7d32\"\n      // console.log(splitVariable); // [\"--chart-color-2\", \"#00a1e0}.chart-positive-color{color:#2e7d32\"]\n      // splitVariable has wrong value for --chart-color-2 variable.\n      // we need to split the splitVariable further with \"}\" so that we can get the right value.\n\n      const variableValue = splitVariable[1] ? splitVariable[1].split('}')[0] : splitVariable[1];\n      return Object.assign(Object.assign({}, variableSet), {\n        [splitVariable[0]]: variableValue\n      });\n    }, {}));\n  }, {});\n}\n\nfunction getCssVariableForOldBrowsers(name) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (savedVariables) {\n      return savedVariables[name];\n    }\n\n    const styleBlocks = findStyleBlocks();\n\n    if (!styleBlocks || !styleBlocks.length) {\n      return Promise.resolve(undefined);\n    }\n\n    const styleBlocksTexts = yield getStyleBlocksTexts(styleBlocks);\n    const variablesList = extractVariablesListFromCssText(styleBlocksTexts.join(''));\n\n    if (!variablesList || !variablesList.length) {\n      return Promise.resolve(undefined);\n    }\n\n    const cssVariables = reduceVariablesList(variablesList);\n    savedVariables = cssVariables;\n    return cssVariables[name];\n  });\n}\n\nfunction getCssVariableForModernBrowsers(name, elementName = ':root') {\n  const element = document.querySelector(elementName);\n\n  if (!element) {\n    return '';\n  }\n\n  const computedStyle = getComputedStyle(element);\n  return computedStyle.getPropertyValue(name);\n}\n\nfunction getCssVariable(name, elementName = ':root', searchEverywhere = false) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!searchEverywhere && modernCSSIsSupported()) {\n      return getCssVariableForModernBrowsers(name, elementName);\n    }\n\n    return getCssVariableForOldBrowsers(name);\n  });\n}\n\nfunction modernCSSIsSupported() {\n  const CSS = window.CSS;\n  return !!(CSS && CSS.supports);\n}\n\nclass CssVariablesService {\n  getCssVariable(name, elementName = ':root', searchEverywhere = false) {\n    return getCssVariable(name, elementName, searchEverywhere);\n  }\n\n}\n\nCssVariablesService.ɵfac = function CssVariablesService_Factory(t) {\n  return new (t || CssVariablesService)();\n};\n\nCssVariablesService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CssVariablesService,\n  factory: CssVariablesService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CssVariablesService, [{\n    type: Injectable\n  }], null, null);\n})();\n\nclass CssVariablesModule {}\n\nCssVariablesModule.ɵfac = function CssVariablesModule_Factory(t) {\n  return new (t || CssVariablesModule)();\n};\n\nCssVariablesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CssVariablesModule\n});\nCssVariablesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [CssVariablesService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CssVariablesModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      providers: [CssVariablesService]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CssVariablesModule, CssVariablesService };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-css-variables-lib.js"],"names":["i0","Injectable","NgModule","__awaiter","CommonModule","savedVariables","findStyleBlocks","document","querySelectorAll","getStyleBlocksTexts","styleBlocks","Promise","all","Array","from","map","block","getStyleBlockText","catch","ignoreErrorForBlock","err","console","error","styleBlock","nodeName","getTextForStyleNode","getTextForLinkNode","innerHTML","url","getAttribute","resolve","reject","request","XMLHttpRequest","open","overrideMimeType","onload","status","responseText","onerror","send","extractVariablesListFromCssText","css","match","reduceVariablesList","variablesList","reduce","variables","variable","variablesWithValues","split","Object","assign","variableSet","variableWithValue","splitVariable","variableValue","getCssVariableForOldBrowsers","name","length","undefined","styleBlocksTexts","join","cssVariables","getCssVariableForModernBrowsers","elementName","element","querySelector","computedStyle","getComputedStyle","getPropertyValue","getCssVariable","searchEverywhere","modernCSSIsSupported","CSS","window","supports","CssVariablesService","ɵfac","ɵprov","type","CssVariablesModule","ɵmod","ɵinj","args","imports","providers"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { CommonModule } from '@angular/common';\n\n// Requires Promise and Array polyfills for older browsers\nlet savedVariables = null;\nfunction findStyleBlocks() {\n    return document.querySelectorAll('style:not(.inserted),link[rel=\"stylesheet\"]');\n}\nfunction getStyleBlocksTexts(styleBlocks) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return Promise.all(Array.from(styleBlocks).map((block) => getStyleBlockText(block).catch(ignoreErrorForBlock)));\n    });\n}\n// the error for specific block should be ignored, to enable search in other blocks\nfunction ignoreErrorForBlock(err) {\n    console.error(err);\n    return '';\n}\nfunction getStyleBlockText(styleBlock) {\n    return __awaiter(this, void 0, void 0, function* () {\n        switch (styleBlock.nodeName) {\n            case 'STYLE':\n                return getTextForStyleNode(styleBlock);\n            case 'LINK':\n                return getTextForLinkNode(styleBlock);\n            default:\n                return '';\n        }\n    });\n}\nfunction getTextForStyleNode(styleBlock) {\n    return styleBlock.innerHTML;\n}\nfunction getTextForLinkNode(styleBlock) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const url = styleBlock.getAttribute('href');\n        if (!url) {\n            return Promise.resolve('');\n        }\n        return new Promise((resolve, reject) => {\n            const request = new XMLHttpRequest();\n            request.open('GET', url, true);\n            request.overrideMimeType('text/css;');\n            request.onload = function () {\n                if (request.status >= 200 && request.status < 400) {\n                    resolve(request.responseText);\n                }\n                else {\n                    reject(`Error returned from: ${url}`);\n                }\n            };\n            request.onerror = function () {\n                reject(`Got nothing from: ${url}`);\n            };\n            request.send();\n        });\n    });\n}\nfunction extractVariablesListFromCssText(css) {\n    return css.match(/(-{2}\\w[\\w-]*)(?:\\s*:\\s*)([^;]*)(;|})/g);\n}\nfunction reduceVariablesList(variablesList) {\n    return variablesList.reduce((variables, variable) => {\n        const variablesWithValues = variable.split(/;\\s*/);\n        return Object.assign(Object.assign({}, variables), variablesWithValues.reduce((variableSet, variableWithValue) => {\n            const splitVariable = variableWithValue.split(/:\\s*/);\n            // Note: For minified css files, the semicolon from last declaration statement is removed by angular cli\n            // for optimization purposes. For example below will be sample code in minified css file,\n            // :root{--chart-color-6:#c22327;--chart-color-2:#00a1e0}.chart-positive-color{color:#2e7d32}\n            // variableWithValue will gives us something like below for '--chart-color-2':-\n            // \"--chart-color-2: #00a1e0}.chart-positive-color{color:#2e7d32\"\n            // console.log(splitVariable); // [\"--chart-color-2\", \"#00a1e0}.chart-positive-color{color:#2e7d32\"]\n            // splitVariable has wrong value for --chart-color-2 variable.\n            // we need to split the splitVariable further with \"}\" so that we can get the right value.\n            const variableValue = splitVariable[1] ? splitVariable[1].split('}')[0] : splitVariable[1];\n            return Object.assign(Object.assign({}, variableSet), { [splitVariable[0]]: variableValue });\n        }, {}));\n    }, {});\n}\nfunction getCssVariableForOldBrowsers(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (savedVariables) {\n            return savedVariables[name];\n        }\n        const styleBlocks = findStyleBlocks();\n        if (!styleBlocks || !styleBlocks.length) {\n            return Promise.resolve(undefined);\n        }\n        const styleBlocksTexts = yield getStyleBlocksTexts(styleBlocks);\n        const variablesList = extractVariablesListFromCssText(styleBlocksTexts.join(''));\n        if (!variablesList || !variablesList.length) {\n            return Promise.resolve(undefined);\n        }\n        const cssVariables = reduceVariablesList(variablesList);\n        savedVariables = cssVariables;\n        return cssVariables[name];\n    });\n}\nfunction getCssVariableForModernBrowsers(name, elementName = ':root') {\n    const element = document.querySelector(elementName);\n    if (!element) {\n        return '';\n    }\n    const computedStyle = getComputedStyle(element);\n    return computedStyle.getPropertyValue(name);\n}\nfunction getCssVariable(name, elementName = ':root', searchEverywhere = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!searchEverywhere && modernCSSIsSupported()) {\n            return getCssVariableForModernBrowsers(name, elementName);\n        }\n        return getCssVariableForOldBrowsers(name);\n    });\n}\nfunction modernCSSIsSupported() {\n    const CSS = window.CSS;\n    return !!(CSS && CSS.supports);\n}\n\nclass CssVariablesService {\n    getCssVariable(name, elementName = ':root', searchEverywhere = false) {\n        return getCssVariable(name, elementName, searchEverywhere);\n    }\n}\nCssVariablesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CssVariablesService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nCssVariablesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CssVariablesService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CssVariablesService, decorators: [{\n            type: Injectable\n        }] });\n\nclass CssVariablesModule {\n}\nCssVariablesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CssVariablesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCssVariablesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CssVariablesModule, imports: [CommonModule] });\nCssVariablesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CssVariablesModule, providers: [CssVariablesService], imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CssVariablesModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    providers: [CssVariablesService],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CssVariablesModule, CssVariablesService };\n"]},"metadata":{},"sourceType":"module"}