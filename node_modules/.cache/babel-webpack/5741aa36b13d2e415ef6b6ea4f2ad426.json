{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as i1$1 from '@ngrx/store';\nimport { createAction, props, createFeatureSelector, createSelector, createReducer, on, StoreModule } from '@ngrx/store';\nimport * as i1 from '@ngrx/effects';\nimport { createEffect, ofType, EffectsModule } from '@ngrx/effects';\nimport { of, throwError, merge } from 'rxjs';\nimport { switchMap, map, catchError, groupBy, mergeMap, first } from 'rxjs/operators';\nimport * as i3 from '@backbase/actions-common-ang';\nimport { EMPTY_RESPONSE_ERROR, getMappedRecurrenceResponse, parseActionRecipeFormItem, ActionsCommonModule, mergeSpecificationsWithActionRecipes } from '@backbase/actions-common-ang';\nimport * as i4 from '@backbase/ui-ang/notification';\nconst loadActionRecipes = createAction('[ACT Action Recipes] Load Action Recipes', props());\nconst loadActionRecipesSuccess = createAction('[ACT Action Recipes] Load Action Recipes Success', props());\nconst loadActionRecipesFailed = createAction('[ACT Action Recipes] Load Action Recipes Failed', props());\nconst saveActionRecipe = createAction('[ACT Action Recipes] Save Action Recipe', props());\nconst saveActionRecipeSuccess = createAction('[ACT Action Recipes] Save Action Recipe Success', props());\nconst saveActionRecipeFailure = createAction('[ACT Action Recipes] Save Action Recipe Failure', props());\nconst selectActionRecipesState = createFeatureSelector('actionRecipes');\nconst actionRecipes = createSelector(selectActionRecipesState, state => state.data);\nconst actionRecipesLoading = createSelector(selectActionRecipesState, state => state.loading);\nconst actionRecipesError = createSelector(selectActionRecipesState, state => state.error);\nconst actionRecipesSpecificationIds = createSelector(selectActionRecipesState, state => state.specificationIds);\n\nclass ActionsRecipesEffects {\n  constructor(actions$, store, dataService, notificationService) {\n    this.actions$ = actions$;\n    this.store = store;\n    this.dataService = dataService;\n    this.notificationService = notificationService;\n    this.actionRecipes$ = createEffect(() => this.actions$.pipe(ofType(loadActionRecipes), switchMap(({\n      specificationIds,\n      arrangementId\n    }) => this.dataService.getActionRecipes(arrangementId).pipe(map(data => specificationIds ? data.filter(({\n      specificationId: id\n    }) => specificationIds.has(id)) : data), map(data => arrangementId ? data.filter(item => !item.arrangementId || item.arrangementId === arrangementId) : data), map(data => loadActionRecipesSuccess({\n      actionRecipes: data || [],\n      specificationIds\n    })), catchError(error => of(loadActionRecipesFailed({\n      error\n    })))))));\n    this.saveActionRecipe$ = createEffect(() => this.actions$.pipe(ofType(saveActionRecipe), groupBy(({\n      actionRecipe\n    }) => actionRecipe.specificationId), mergeMap(group => group.pipe(switchMap(({\n      actionRecipe,\n      arrangementId,\n      warningNotification,\n      successNotification\n    }) => this.dataService.saveActionRecipe(actionRecipe, arrangementId).pipe(switchMap(({\n      actionRecipes\n    }) => {\n      if (!actionRecipes || !actionRecipes.length) return throwError(EMPTY_RESPONSE_ERROR);\n      return of(saveActionRecipeSuccess(Object.assign({\n        actionRecipe: Object.assign(Object.assign({}, actionRecipes[0]), actionRecipes[0].recurrence && {\n          recurrence: getMappedRecurrenceResponse(actionRecipes[0].recurrence, actionRecipe)\n        })\n      }, successNotification && {\n        notification: successNotification\n      })));\n    }), catchError(err => {\n      if (err.status === 409) {\n        return this.store.select(actionRecipesSpecificationIds).pipe(first(), map(specificationIds => loadActionRecipes({\n          arrangementId,\n          specificationIds\n        })));\n      }\n\n      return of(saveActionRecipeFailure(Object.assign({\n        actionRecipe: parseActionRecipeFormItem(actionRecipe)\n      }, warningNotification && {\n        notification: warningNotification\n      })));\n    })))))));\n    this.showNotification$ = createEffect(() => merge(this.actions$.pipe(ofType(saveActionRecipeSuccess)), this.actions$.pipe(ofType(saveActionRecipeFailure))).pipe(map(({\n      notification\n    }) => {\n      if (notification) {\n        this.notificationService.showNotification(notification);\n      }\n    })), {\n      dispatch: false\n    });\n  }\n\n}\n\nActionsRecipesEffects.ɵfac = function ActionsRecipesEffects_Factory(t) {\n  return new (t || ActionsRecipesEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i1$1.Store), i0.ɵɵinject(i3.NotificationsPreferencesBaseDataService), i0.ɵɵinject(i4.NotificationService));\n};\n\nActionsRecipesEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ActionsRecipesEffects,\n  factory: ActionsRecipesEffects.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ActionsRecipesEffects, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.Actions\n    }, {\n      type: i1$1.Store\n    }, {\n      type: i3.NotificationsPreferencesBaseDataService\n    }, {\n      type: i4.NotificationService\n    }];\n  }, null);\n})();\n\nconst loadSpecifications = createAction('[ACT Specifications] Load Specifications', props());\nconst loadSpecificationsSuccess = createAction('[ACT Specifications] Load Specifications Success', props());\nconst loadSpecificationsFailed = createAction('[ACT Specifications] Load Specifications Failed', props());\n\nclass ActionsSpecificationsEffects {\n  constructor(actions$, dataService) {\n    this.actions$ = actions$;\n    this.dataService = dataService;\n    this.specifications$ = createEffect(() => this.actions$.pipe(ofType(loadSpecifications), switchMap(({\n      specificationIds\n    }) => this.dataService.getSpecifications().pipe(map(data => specificationIds ? data.filter(({\n      id\n    }) => !!id && specificationIds.has(id)) : data), map(data => loadSpecificationsSuccess({\n      specifications: data || []\n    })), catchError(() => of(loadSpecificationsFailed({\n      error: true\n    })))))));\n  }\n\n}\n\nActionsSpecificationsEffects.ɵfac = function ActionsSpecificationsEffects_Factory(t) {\n  return new (t || ActionsSpecificationsEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i3.NotificationsPreferencesBaseDataService));\n};\n\nActionsSpecificationsEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ActionsSpecificationsEffects,\n  factory: ActionsSpecificationsEffects.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ActionsSpecificationsEffects, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.Actions\n    }, {\n      type: i3.NotificationsPreferencesBaseDataService\n    }];\n  }, null);\n})();\n\nconst actionRecipeInitialState = {\n  data: [],\n  loading: false,\n  error: undefined,\n  specificationIds: undefined\n};\n\nconst _actionRecipesReducer = createReducer(actionRecipeInitialState, on(loadActionRecipes, state => Object.assign(Object.assign({}, state), {\n  loading: true,\n  error: undefined,\n  specificationIds: undefined\n})), on(loadActionRecipesSuccess, (state, action) => Object.assign(Object.assign({}, state), {\n  data: action.actionRecipes,\n  loading: false,\n  specificationIds: action.specificationIds\n})), on(loadActionRecipesFailed, (state, action) => Object.assign(Object.assign({}, state), {\n  error: action.error,\n  loading: false\n})), on(saveActionRecipeSuccess, (state, action) => {\n  const {\n    actionRecipe: recipe\n  } = action;\n  const {\n    data\n  } = state;\n  const targetIndex = data.findIndex(({\n    specificationId\n  }) => specificationId === recipe.specificationId);\n  const isAppend = targetIndex === -1;\n  return Object.assign(Object.assign({}, state), {\n    data: isAppend ? [...data, recipe] : insertActionRecipe(data, recipe, targetIndex)\n  });\n}), on(saveActionRecipeFailure, (state, action) => {\n  const {\n    actionRecipe: recipe\n  } = action;\n  const {\n    data\n  } = state;\n  const targetIndex = data.findIndex(({\n    specificationId\n  }) => specificationId === recipe.specificationId);\n  const isAppend = targetIndex === -1;\n  return Object.assign(Object.assign({}, state), {\n    data: isAppend ? [...data, Object.assign(Object.assign({}, recipe), {\n      active: false\n    })] : insertActionRecipe(data, Object.assign({}, data[targetIndex]), targetIndex)\n  });\n}));\n\nfunction actionRecipesReducer(state, action) {\n  return _actionRecipesReducer(state, action);\n}\n\nconst insertActionRecipe = (data, actionRecipe, index) => [...data.slice(0, index), actionRecipe, ...data.slice(index + 1)];\n\nconst specificationsInitialState = {\n  data: [],\n  loading: false,\n  error: false\n};\nconst initialState = {\n  specifications: specificationsInitialState,\n  actionRecipes: actionRecipeInitialState\n};\n\nconst _specificationsReducer = createReducer(initialState.specifications, on(loadSpecifications, state => Object.assign(Object.assign({}, state), {\n  loading: true,\n  error: false\n})), on(loadSpecificationsSuccess, (state, action) => Object.assign(Object.assign({}, state), {\n  data: action.specifications,\n  loading: false\n})), on(loadSpecificationsFailed, (state, action) => Object.assign(Object.assign({}, state), {\n  error: action.error,\n  loading: false\n})));\n\nfunction specificationsReducer(state, action) {\n  return _specificationsReducer(state, action);\n}\n\nclass ActionsStoreModule {}\n\nActionsStoreModule.ɵfac = function ActionsStoreModule_Factory(t) {\n  return new (t || ActionsStoreModule)();\n};\n\nActionsStoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ActionsStoreModule\n});\nActionsStoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ActionsRecipesEffects, ActionsSpecificationsEffects],\n  imports: [[CommonModule, ActionsCommonModule, StoreModule.forFeature('actionRecipes', actionRecipesReducer), StoreModule.forFeature('specifications', specificationsReducer), EffectsModule.forFeature([ActionsRecipesEffects, ActionsSpecificationsEffects])]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ActionsStoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [ActionsRecipesEffects, ActionsSpecificationsEffects],\n      imports: [CommonModule, ActionsCommonModule, StoreModule.forFeature('actionRecipes', actionRecipesReducer), StoreModule.forFeature('specifications', specificationsReducer), EffectsModule.forFeature([ActionsRecipesEffects, ActionsSpecificationsEffects])]\n    }]\n  }], null, null);\n})();\n\nconst selectSpecificationsState = createFeatureSelector('specifications');\nconst specifications = createSelector(selectSpecificationsState, state => state.data);\nconst specificationsLoading = createSelector(selectSpecificationsState, state => state.loading);\nconst specificationsError = createSelector(selectSpecificationsState, state => state.error);\nconst specificationsWithActionRecipe = createSelector(specifications, actionRecipes, (specs, recipes) => mergeSpecificationsWithActionRecipes(specs, recipes));\n\nclass ActionsStoreModel {\n  constructor(store) {\n    this.store = store;\n    /**\n     * Stream of specifications.\n     */\n\n    this.specifications$ = this.store.select(specifications);\n    /**\n     * Stream of specifications loading flags.\n     */\n\n    this.specificationsLoading$ = this.store.select(specificationsLoading);\n    /**\n     * Stream of specifications errors.\n     */\n\n    this.specificationsError$ = this.store.select(specificationsError);\n    /**\n     * Stream of action recipes.\n     */\n\n    this.actionRecipes$ = this.store.select(actionRecipes);\n    /**\n     * Stream of action recipes loading flags.\n     */\n\n    this.actionRecipesLoading$ = this.store.select(actionRecipesLoading);\n    /**\n     * Stream of action recipes errors.\n     */\n\n    this.actionRecipesError$ = this.store.select(actionRecipesError);\n    /**\n     * Stream of specifications with action recipe.\n     */\n\n    this.specificationsWithActionRecipe$ = this.store.select(specificationsWithActionRecipe);\n  }\n  /**\n   * Method to dispatch load specifications.\n   *\n   * @param payload - load specifications payload\n   */\n\n\n  dispatchLoadSpecifications(payload) {\n    this.store.dispatch(loadSpecifications(payload));\n  }\n  /**\n   * Method to dispatch load action recipes.\n   *\n   * @param payload - load specifications payload\n   */\n\n\n  dispatchLoadActionRecipes(payload) {\n    this.store.dispatch(loadActionRecipes(payload));\n  }\n  /**\n   * Method to dispatch save action recipe.\n   *\n   * @param payload - action recipe payload\n   */\n\n\n  dispatchSaveActionRecipe(payload) {\n    this.store.dispatch(saveActionRecipe(payload));\n  }\n\n}\n\nActionsStoreModel.ɵfac = function ActionsStoreModel_Factory(t) {\n  return new (t || ActionsStoreModel)(i0.ɵɵinject(i1$1.Store));\n};\n\nActionsStoreModel.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ActionsStoreModel,\n  factory: ActionsStoreModel.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ActionsStoreModel, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Store\n    }];\n  }, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ActionsStoreModel, ActionsStoreModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/actions-store-ang/fesm2015/backbase-actions-store-ang.js"],"names":["i0","Injectable","NgModule","CommonModule","i1$1","createAction","props","createFeatureSelector","createSelector","createReducer","on","StoreModule","i1","createEffect","ofType","EffectsModule","of","throwError","merge","switchMap","map","catchError","groupBy","mergeMap","first","i3","EMPTY_RESPONSE_ERROR","getMappedRecurrenceResponse","parseActionRecipeFormItem","ActionsCommonModule","mergeSpecificationsWithActionRecipes","i4","loadActionRecipes","loadActionRecipesSuccess","loadActionRecipesFailed","saveActionRecipe","saveActionRecipeSuccess","saveActionRecipeFailure","selectActionRecipesState","actionRecipes","state","data","actionRecipesLoading","loading","actionRecipesError","error","actionRecipesSpecificationIds","specificationIds","ActionsRecipesEffects","constructor","actions$","store","dataService","notificationService","actionRecipes$","pipe","arrangementId","getActionRecipes","filter","specificationId","id","has","item","saveActionRecipe$","actionRecipe","group","warningNotification","successNotification","length","Object","assign","recurrence","notification","err","status","select","showNotification$","showNotification","dispatch","ɵfac","Actions","Store","NotificationsPreferencesBaseDataService","NotificationService","ɵprov","type","loadSpecifications","loadSpecificationsSuccess","loadSpecificationsFailed","ActionsSpecificationsEffects","specifications$","getSpecifications","specifications","actionRecipeInitialState","undefined","_actionRecipesReducer","action","recipe","targetIndex","findIndex","isAppend","insertActionRecipe","active","actionRecipesReducer","index","slice","specificationsInitialState","initialState","_specificationsReducer","specificationsReducer","ActionsStoreModule","ɵmod","ɵinj","forFeature","args","providers","imports","selectSpecificationsState","specificationsLoading","specificationsError","specificationsWithActionRecipe","specs","recipes","ActionsStoreModel","specificationsLoading$","specificationsError$","actionRecipesLoading$","actionRecipesError$","specificationsWithActionRecipe$","dispatchLoadSpecifications","payload","dispatchLoadActionRecipes","dispatchSaveActionRecipe"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as i1$1 from '@ngrx/store';\nimport { createAction, props, createFeatureSelector, createSelector, createReducer, on, StoreModule } from '@ngrx/store';\nimport * as i1 from '@ngrx/effects';\nimport { createEffect, ofType, EffectsModule } from '@ngrx/effects';\nimport { of, throwError, merge } from 'rxjs';\nimport { switchMap, map, catchError, groupBy, mergeMap, first } from 'rxjs/operators';\nimport * as i3 from '@backbase/actions-common-ang';\nimport { EMPTY_RESPONSE_ERROR, getMappedRecurrenceResponse, parseActionRecipeFormItem, ActionsCommonModule, mergeSpecificationsWithActionRecipes } from '@backbase/actions-common-ang';\nimport * as i4 from '@backbase/ui-ang/notification';\n\nconst loadActionRecipes = createAction('[ACT Action Recipes] Load Action Recipes', props());\nconst loadActionRecipesSuccess = createAction('[ACT Action Recipes] Load Action Recipes Success', props());\nconst loadActionRecipesFailed = createAction('[ACT Action Recipes] Load Action Recipes Failed', props());\nconst saveActionRecipe = createAction('[ACT Action Recipes] Save Action Recipe', props());\nconst saveActionRecipeSuccess = createAction('[ACT Action Recipes] Save Action Recipe Success', props());\nconst saveActionRecipeFailure = createAction('[ACT Action Recipes] Save Action Recipe Failure', props());\n\nconst selectActionRecipesState = createFeatureSelector('actionRecipes');\nconst actionRecipes = createSelector(selectActionRecipesState, (state) => state.data);\nconst actionRecipesLoading = createSelector(selectActionRecipesState, state => state.loading);\nconst actionRecipesError = createSelector(selectActionRecipesState, state => state.error);\nconst actionRecipesSpecificationIds = createSelector(selectActionRecipesState, state => state.specificationIds);\n\nclass ActionsRecipesEffects {\n    constructor(actions$, store, dataService, notificationService) {\n        this.actions$ = actions$;\n        this.store = store;\n        this.dataService = dataService;\n        this.notificationService = notificationService;\n        this.actionRecipes$ = createEffect(() => this.actions$.pipe(ofType(loadActionRecipes), switchMap(({ specificationIds, arrangementId }) => this.dataService.getActionRecipes(arrangementId).pipe(map(data => (specificationIds ? data.filter(({ specificationId: id }) => specificationIds.has(id)) : data)), map(data => arrangementId ? data.filter(item => !item.arrangementId || item.arrangementId === arrangementId) : data), map(data => loadActionRecipesSuccess({\n            actionRecipes: data || [],\n            specificationIds,\n        })), catchError(error => of(loadActionRecipesFailed({ error })))))));\n        this.saveActionRecipe$ = createEffect(() => this.actions$.pipe(ofType(saveActionRecipe), groupBy(({ actionRecipe }) => actionRecipe.specificationId), mergeMap(group => group.pipe(switchMap(({ actionRecipe, arrangementId, warningNotification, successNotification }) => this.dataService.saveActionRecipe(actionRecipe, arrangementId).pipe(switchMap(({ actionRecipes }) => {\n            if (!actionRecipes || !actionRecipes.length)\n                return throwError(EMPTY_RESPONSE_ERROR);\n            return of(saveActionRecipeSuccess(Object.assign({ actionRecipe: Object.assign(Object.assign({}, actionRecipes[0]), (actionRecipes[0].recurrence && {\n                    recurrence: getMappedRecurrenceResponse(actionRecipes[0].recurrence, actionRecipe),\n                })) }, (successNotification && { notification: successNotification }))));\n        }), catchError(err => {\n            if (err.status === 409) {\n                return this.store.select(actionRecipesSpecificationIds).pipe(first(), map(specificationIds => loadActionRecipes({\n                    arrangementId,\n                    specificationIds,\n                })));\n            }\n            return of(saveActionRecipeFailure(Object.assign({ actionRecipe: parseActionRecipeFormItem(actionRecipe) }, (warningNotification && { notification: warningNotification }))));\n        })))))));\n        this.showNotification$ = createEffect(() => merge(this.actions$.pipe(ofType(saveActionRecipeSuccess)), this.actions$.pipe(ofType(saveActionRecipeFailure))).pipe(map(({ notification }) => {\n            if (notification) {\n                this.notificationService.showNotification(notification);\n            }\n        })), { dispatch: false });\n    }\n}\nActionsRecipesEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: ActionsRecipesEffects, deps: [{ token: i1.Actions }, { token: i1$1.Store }, { token: i3.NotificationsPreferencesBaseDataService }, { token: i4.NotificationService }], target: i0.ɵɵFactoryTarget.Injectable });\nActionsRecipesEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: ActionsRecipesEffects });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: ActionsRecipesEffects, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i1$1.Store }, { type: i3.NotificationsPreferencesBaseDataService }, { type: i4.NotificationService }]; } });\n\nconst loadSpecifications = createAction('[ACT Specifications] Load Specifications', props());\nconst loadSpecificationsSuccess = createAction('[ACT Specifications] Load Specifications Success', props());\nconst loadSpecificationsFailed = createAction('[ACT Specifications] Load Specifications Failed', props());\n\nclass ActionsSpecificationsEffects {\n    constructor(actions$, dataService) {\n        this.actions$ = actions$;\n        this.dataService = dataService;\n        this.specifications$ = createEffect(() => this.actions$.pipe(ofType(loadSpecifications), switchMap(({ specificationIds }) => this.dataService.getSpecifications().pipe(map(data => (specificationIds ? data.filter(({ id }) => !!id && specificationIds.has(id)) : data)), map(data => loadSpecificationsSuccess({ specifications: data || [] })), catchError(() => of(loadSpecificationsFailed({ error: true })))))));\n    }\n}\nActionsSpecificationsEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: ActionsSpecificationsEffects, deps: [{ token: i1.Actions }, { token: i3.NotificationsPreferencesBaseDataService }], target: i0.ɵɵFactoryTarget.Injectable });\nActionsSpecificationsEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: ActionsSpecificationsEffects });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: ActionsSpecificationsEffects, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i3.NotificationsPreferencesBaseDataService }]; } });\n\nconst actionRecipeInitialState = {\n    data: [],\n    loading: false,\n    error: undefined,\n    specificationIds: undefined,\n};\n\nconst _actionRecipesReducer = createReducer(actionRecipeInitialState, on(loadActionRecipes, state => (Object.assign(Object.assign({}, state), { loading: true, error: undefined, specificationIds: undefined }))), on(loadActionRecipesSuccess, (state, action) => (Object.assign(Object.assign({}, state), { data: action.actionRecipes, loading: false, specificationIds: action.specificationIds }))), on(loadActionRecipesFailed, (state, action) => (Object.assign(Object.assign({}, state), { error: action.error, loading: false }))), on(saveActionRecipeSuccess, (state, action) => {\n    const { actionRecipe: recipe } = action;\n    const { data } = state;\n    const targetIndex = data.findIndex(({ specificationId }) => specificationId === recipe.specificationId);\n    const isAppend = targetIndex === -1;\n    return Object.assign(Object.assign({}, state), { data: isAppend ? [...data, recipe] : insertActionRecipe(data, recipe, targetIndex) });\n}), on(saveActionRecipeFailure, (state, action) => {\n    const { actionRecipe: recipe } = action;\n    const { data } = state;\n    const targetIndex = data.findIndex(({ specificationId }) => specificationId === recipe.specificationId);\n    const isAppend = targetIndex === -1;\n    return Object.assign(Object.assign({}, state), { data: isAppend\n            ? [...data, Object.assign(Object.assign({}, recipe), { active: false })]\n            : insertActionRecipe(data, Object.assign({}, data[targetIndex]), targetIndex) });\n}));\nfunction actionRecipesReducer(state, action) {\n    return _actionRecipesReducer(state, action);\n}\nconst insertActionRecipe = (data, actionRecipe, index) => [\n    ...data.slice(0, index),\n    actionRecipe,\n    ...data.slice(index + 1),\n];\n\nconst specificationsInitialState = {\n    data: [],\n    loading: false,\n    error: false,\n};\n\nconst initialState = {\n    specifications: specificationsInitialState,\n    actionRecipes: actionRecipeInitialState,\n};\n\nconst _specificationsReducer = createReducer(initialState.specifications, on(loadSpecifications, state => (Object.assign(Object.assign({}, state), { loading: true, error: false }))), on(loadSpecificationsSuccess, (state, action) => (Object.assign(Object.assign({}, state), { data: action.specifications, loading: false }))), on(loadSpecificationsFailed, (state, action) => (Object.assign(Object.assign({}, state), { error: action.error, loading: false }))));\nfunction specificationsReducer(state, action) {\n    return _specificationsReducer(state, action);\n}\n\nclass ActionsStoreModule {\n}\nActionsStoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: ActionsStoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nActionsStoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: ActionsStoreModule, imports: [CommonModule,\n        ActionsCommonModule, i1$1.StoreFeatureModule, i1$1.StoreFeatureModule, i1.EffectsFeatureModule] });\nActionsStoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: ActionsStoreModule, providers: [ActionsRecipesEffects, ActionsSpecificationsEffects], imports: [[\n            CommonModule,\n            ActionsCommonModule,\n            StoreModule.forFeature('actionRecipes', actionRecipesReducer),\n            StoreModule.forFeature('specifications', specificationsReducer),\n            EffectsModule.forFeature([ActionsRecipesEffects, ActionsSpecificationsEffects]),\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: ActionsStoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [ActionsRecipesEffects, ActionsSpecificationsEffects],\n                    imports: [\n                        CommonModule,\n                        ActionsCommonModule,\n                        StoreModule.forFeature('actionRecipes', actionRecipesReducer),\n                        StoreModule.forFeature('specifications', specificationsReducer),\n                        EffectsModule.forFeature([ActionsRecipesEffects, ActionsSpecificationsEffects]),\n                    ],\n                }]\n        }] });\n\nconst selectSpecificationsState = createFeatureSelector('specifications');\nconst specifications = createSelector(selectSpecificationsState, state => state.data);\nconst specificationsLoading = createSelector(selectSpecificationsState, state => state.loading);\nconst specificationsError = createSelector(selectSpecificationsState, state => state.error);\n\nconst specificationsWithActionRecipe = createSelector(specifications, actionRecipes, (specs, recipes) => mergeSpecificationsWithActionRecipes(specs, recipes));\n\nclass ActionsStoreModel {\n    constructor(store) {\n        this.store = store;\n        /**\n         * Stream of specifications.\n         */\n        this.specifications$ = this.store.select(specifications);\n        /**\n         * Stream of specifications loading flags.\n         */\n        this.specificationsLoading$ = this.store.select(specificationsLoading);\n        /**\n         * Stream of specifications errors.\n         */\n        this.specificationsError$ = this.store.select(specificationsError);\n        /**\n         * Stream of action recipes.\n         */\n        this.actionRecipes$ = this.store.select(actionRecipes);\n        /**\n         * Stream of action recipes loading flags.\n         */\n        this.actionRecipesLoading$ = this.store.select(actionRecipesLoading);\n        /**\n         * Stream of action recipes errors.\n         */\n        this.actionRecipesError$ = this.store.select(actionRecipesError);\n        /**\n         * Stream of specifications with action recipe.\n         */\n        this.specificationsWithActionRecipe$ = this.store.select(specificationsWithActionRecipe);\n    }\n    /**\n     * Method to dispatch load specifications.\n     *\n     * @param payload - load specifications payload\n     */\n    dispatchLoadSpecifications(payload) {\n        this.store.dispatch(loadSpecifications(payload));\n    }\n    /**\n     * Method to dispatch load action recipes.\n     *\n     * @param payload - load specifications payload\n     */\n    dispatchLoadActionRecipes(payload) {\n        this.store.dispatch(loadActionRecipes(payload));\n    }\n    /**\n     * Method to dispatch save action recipe.\n     *\n     * @param payload - action recipe payload\n     */\n    dispatchSaveActionRecipe(payload) {\n        this.store.dispatch(saveActionRecipe(payload));\n    }\n}\nActionsStoreModel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: ActionsStoreModel, deps: [{ token: i1$1.Store }], target: i0.ɵɵFactoryTarget.Injectable });\nActionsStoreModel.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: ActionsStoreModel });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: ActionsStoreModel, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Store }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ActionsStoreModel, ActionsStoreModule };\n"]},"metadata":{},"sourceType":"module"}