{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Pipe, NgModule } from '@angular/core';\nimport * as i2 from '@backbase/foundation-ang/future';\nimport { FutureFeaturesModule } from '@backbase/foundation-ang/future';\nimport { segment } from '@backbase/ui-ang/util';\nimport * as i1 from '@backbase/ui-ang/account-number-pipe';\n/**\n * Default payment card number format.\n */\n\nconst DefaultPaymentCardNumberFormat = {\n  length: 16,\n  maskRange: [0, 12],\n  segments: 4\n};\n/**\n * Lookup object containing payment card number formats for common payment card\n * vendors.\n */\n\nconst PaymentCardNumberVendors = {\n  mastercard: {\n    length: 16,\n    maskRange: [0, 12],\n    segments: 4\n  },\n  visa: {\n    length: 16,\n    maskRange: [0, 12],\n    segments: 4\n  },\n  'visa-debit': {\n    length: 16,\n    maskRange: [0, 12],\n    segments: 4\n  },\n  'diners-club': {\n    length: 16,\n    maskRange: [0, 12],\n    segments: 4\n  },\n  'american-express': {\n    length: 15,\n    maskRange: [0, 11],\n    segments: [4, 6, 5]\n  }\n};\n/**\n * A feature flag that enables numbers masking synchronization with backend\n * If set FE should not apply any masking and rely on the backend masking behavior\n *\n * @internal\n */\n\nconst SYNCHRONIZE_NUMBERS_MASKING = {\n  name: 'SYNCHRONIZE_NUMBERS_MASKING',\n  description: 'Enables accounts masking synchronization with backend'\n};\n/**\n * @name pad\n * @inner\n * @param value - the string to pad\n * @param length - the length to pad the string to\n * @param ch - the character to pad the string width\n * @param leftPad - whether to pad left (true) or pad right (false)\n *\n * @description\n * Pad a string to specified length with specified character\n */\n\nfunction pad(value, length, ch = '0', leftPad = true) {\n  const paddingSize = Math.max(length - value.length, 0);\n  const padding = ch.repeat(paddingSize);\n  return leftPad ? padding + value : value + padding;\n}\n/**\n * @name mask\n * @inner\n * @param value - the string to mask\n * @param indexStart - the index to start masking from\n * @param indexEnd - the index to end masking\n * @param maskChar - the character to mask with\n *\n * @description\n * Mask part of a string with specified character\n */\n\n\nfunction mask(value, [indexStart, indexEnd], maskChar = '*') {\n  let maskedString = '';\n\n  if (indexEnd < 0) {\n    const charsToShow = value.slice(indexEnd);\n    maskedString = maskChar.repeat(value.length - charsToShow.length) + charsToShow;\n  } else {\n    const maskStr = maskChar.repeat(indexEnd - indexStart);\n    maskedString = value.substring(0, indexStart) + maskStr + value.substring(indexEnd);\n  }\n\n  return maskedString;\n}\n\nclass PaymentCardNumberPipe {\n  /**\n   * @name PaymentCardNumberPipe#constructor\n   * @param accountsDisplayingFormatService - AccountsDisplayingFormatService\n   * @param featuresService - FeaturesService\n   *\n   * @internal\n   */\n  constructor(accountsDisplayingFormatService, featuresService) {\n    this.accountsDisplayingFormatService = accountsDisplayingFormatService;\n    this.featuresService = featuresService;\n    this.defaultFormat = this.accountsDisplayingFormatService.getDefaultFormat('cardNumber');\n  }\n  /**\n   * @name PaymentCardNumberPipe#transform\n   * @param value - the string to transform\n   * @param config - the formatting configuration\n   * @param maskChar - the character to mask with, deprecated from 6.0.0\n   *\n   * @description\n   * Formats a card number, mask it and split it into segments\n   * - do not set config parameter to use with a global accountsFormat configuration\n   * - use config parameter to apply a custom accountsFormat configuration\n   */\n\n\n  transform(value, config, maskChar = '•') {\n    const displayingFormat = config !== null && config !== void 0 ? config : this.defaultFormat;\n    let formattedNumber = value.toString();\n\n    if (config && !this.featuresService.isEnabled(SYNCHRONIZE_NUMBERS_MASKING)) {\n      formattedNumber = pad(formattedNumber, config.length, maskChar);\n      formattedNumber = mask(formattedNumber, config.maskRange, maskChar);\n    }\n\n    return segment(formattedNumber, displayingFormat.segments);\n  }\n\n}\n\nPaymentCardNumberPipe.ɵfac = function PaymentCardNumberPipe_Factory(t) {\n  return new (t || PaymentCardNumberPipe)(i0.ɵɵdirectiveInject(i1.AccountsDisplayingFormatService, 16), i0.ɵɵdirectiveInject(i2.FeaturesService, 16));\n};\n\nPaymentCardNumberPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"paymentCardNumber\",\n  type: PaymentCardNumberPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PaymentCardNumberPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'paymentCardNumber'\n    }]\n  }], function () {\n    return [{\n      type: i1.AccountsDisplayingFormatService\n    }, {\n      type: i2.FeaturesService\n    }];\n  }, null);\n})();\n\nclass PaymentCardNumberModule {}\n\nPaymentCardNumberModule.ɵfac = function PaymentCardNumberModule_Factory(t) {\n  return new (t || PaymentCardNumberModule)();\n};\n\nPaymentCardNumberModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: PaymentCardNumberModule\n});\nPaymentCardNumberModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, FutureFeaturesModule.allowOptIn([SYNCHRONIZE_NUMBERS_MASKING])]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PaymentCardNumberModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FutureFeaturesModule.allowOptIn([SYNCHRONIZE_NUMBERS_MASKING])],\n      declarations: [PaymentCardNumberPipe],\n      exports: [PaymentCardNumberPipe]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DefaultPaymentCardNumberFormat, PaymentCardNumberModule, PaymentCardNumberPipe, SYNCHRONIZE_NUMBERS_MASKING };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-payment-card-number-pipe.js"],"names":["CommonModule","i0","Pipe","NgModule","i2","FutureFeaturesModule","segment","i1","DefaultPaymentCardNumberFormat","length","maskRange","segments","PaymentCardNumberVendors","mastercard","visa","SYNCHRONIZE_NUMBERS_MASKING","name","description","pad","value","ch","leftPad","paddingSize","Math","max","padding","repeat","mask","indexStart","indexEnd","maskChar","maskedString","charsToShow","slice","maskStr","substring","PaymentCardNumberPipe","constructor","accountsDisplayingFormatService","featuresService","defaultFormat","getDefaultFormat","transform","config","displayingFormat","formattedNumber","toString","isEnabled","ɵfac","AccountsDisplayingFormatService","FeaturesService","ɵpipe","type","args","PaymentCardNumberModule","ɵmod","ɵinj","allowOptIn","imports","declarations","exports"],"mappings":"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","sourcesContent":["import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Pipe, NgModule } from '@angular/core';\nimport * as i2 from '@backbase/foundation-ang/future';\nimport { FutureFeaturesModule } from '@backbase/foundation-ang/future';\nimport { segment } from '@backbase/ui-ang/util';\nimport * as i1 from '@backbase/ui-ang/account-number-pipe';\n\n/**\n * Default payment card number format.\n */\nconst DefaultPaymentCardNumberFormat = {\n    length: 16,\n    maskRange: [0, 12],\n    segments: 4,\n};\n/**\n * Lookup object containing payment card number formats for common payment card\n * vendors.\n */\nconst PaymentCardNumberVendors = {\n    mastercard: {\n        length: 16,\n        maskRange: [0, 12],\n        segments: 4,\n    },\n    visa: {\n        length: 16,\n        maskRange: [0, 12],\n        segments: 4,\n    },\n    'visa-debit': {\n        length: 16,\n        maskRange: [0, 12],\n        segments: 4,\n    },\n    'diners-club': {\n        length: 16,\n        maskRange: [0, 12],\n        segments: 4,\n    },\n    'american-express': {\n        length: 15,\n        maskRange: [0, 11],\n        segments: [4, 6, 5],\n    },\n};\n/**\n * A feature flag that enables numbers masking synchronization with backend\n * If set FE should not apply any masking and rely on the backend masking behavior\n *\n * @internal\n */\nconst SYNCHRONIZE_NUMBERS_MASKING = {\n    name: 'SYNCHRONIZE_NUMBERS_MASKING',\n    description: 'Enables accounts masking synchronization with backend',\n};\n\n/**\n * @name pad\n * @inner\n * @param value - the string to pad\n * @param length - the length to pad the string to\n * @param ch - the character to pad the string width\n * @param leftPad - whether to pad left (true) or pad right (false)\n *\n * @description\n * Pad a string to specified length with specified character\n */\nfunction pad(value, length, ch = '0', leftPad = true) {\n    const paddingSize = Math.max(length - value.length, 0);\n    const padding = ch.repeat(paddingSize);\n    return leftPad ? padding + value : value + padding;\n}\n/**\n * @name mask\n * @inner\n * @param value - the string to mask\n * @param indexStart - the index to start masking from\n * @param indexEnd - the index to end masking\n * @param maskChar - the character to mask with\n *\n * @description\n * Mask part of a string with specified character\n */\nfunction mask(value, [indexStart, indexEnd], maskChar = '*') {\n    let maskedString = '';\n    if (indexEnd < 0) {\n        const charsToShow = value.slice(indexEnd);\n        maskedString = maskChar.repeat(value.length - charsToShow.length) + charsToShow;\n    }\n    else {\n        const maskStr = maskChar.repeat(indexEnd - indexStart);\n        maskedString = value.substring(0, indexStart) + maskStr + value.substring(indexEnd);\n    }\n    return maskedString;\n}\nclass PaymentCardNumberPipe {\n    /**\n     * @name PaymentCardNumberPipe#constructor\n     * @param accountsDisplayingFormatService - AccountsDisplayingFormatService\n     * @param featuresService - FeaturesService\n     *\n     * @internal\n     */\n    constructor(accountsDisplayingFormatService, featuresService) {\n        this.accountsDisplayingFormatService = accountsDisplayingFormatService;\n        this.featuresService = featuresService;\n        this.defaultFormat = this.accountsDisplayingFormatService.getDefaultFormat('cardNumber');\n    }\n    /**\n     * @name PaymentCardNumberPipe#transform\n     * @param value - the string to transform\n     * @param config - the formatting configuration\n     * @param maskChar - the character to mask with, deprecated from 6.0.0\n     *\n     * @description\n     * Formats a card number, mask it and split it into segments\n     * - do not set config parameter to use with a global accountsFormat configuration\n     * - use config parameter to apply a custom accountsFormat configuration\n     */\n    transform(value, config, maskChar = '•') {\n        const displayingFormat = config !== null && config !== void 0 ? config : this.defaultFormat;\n        let formattedNumber = value.toString();\n        if (config && !this.featuresService.isEnabled(SYNCHRONIZE_NUMBERS_MASKING)) {\n            formattedNumber = pad(formattedNumber, config.length, maskChar);\n            formattedNumber = mask(formattedNumber, config.maskRange, maskChar);\n        }\n        return segment(formattedNumber, displayingFormat.segments);\n    }\n}\nPaymentCardNumberPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: PaymentCardNumberPipe, deps: [{ token: i1.AccountsDisplayingFormatService }, { token: i2.FeaturesService }], target: i0.ɵɵFactoryTarget.Pipe });\nPaymentCardNumberPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: PaymentCardNumberPipe, name: \"paymentCardNumber\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: PaymentCardNumberPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'paymentCardNumber',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.AccountsDisplayingFormatService }, { type: i2.FeaturesService }]; } });\n\nclass PaymentCardNumberModule {\n}\nPaymentCardNumberModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: PaymentCardNumberModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPaymentCardNumberModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: PaymentCardNumberModule, declarations: [PaymentCardNumberPipe], imports: [CommonModule, i2.FutureFeaturesModule], exports: [PaymentCardNumberPipe] });\nPaymentCardNumberModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: PaymentCardNumberModule, imports: [[CommonModule, FutureFeaturesModule.allowOptIn([SYNCHRONIZE_NUMBERS_MASKING])]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: PaymentCardNumberModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, FutureFeaturesModule.allowOptIn([SYNCHRONIZE_NUMBERS_MASKING])],\n                    declarations: [PaymentCardNumberPipe],\n                    exports: [PaymentCardNumberPipe],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DefaultPaymentCardNumberFormat, PaymentCardNumberModule, PaymentCardNumberPipe, SYNCHRONIZE_NUMBERS_MASKING };\n"]},"metadata":{},"sourceType":"module"}