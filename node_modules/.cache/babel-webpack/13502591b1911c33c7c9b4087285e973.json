{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, forwardRef, Component, Input, HostBinding, ViewChild, NgModule } from '@angular/core';\nimport * as i4 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i3 from '@ng-bootstrap/ng-bootstrap';\nimport { NgbTimeAdapter, NgbTimepickerModule } from '@ng-bootstrap/ng-bootstrap';\nimport { defaultSize, InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';\nimport * as i1 from '@backbase/ui-ang/services';\nimport * as i2 from '@backbase/foundation-ang/future';\nconst _c0 = [\"timepicker\"];\n\nclass TimepickerStringAdapter extends NgbTimeAdapter {\n  fromModel(value) {\n    if (value) {\n      const [hour, minute, second] = value.split(':').map(str => parseInt(str, 10));\n      return {\n        hour,\n        minute,\n        second\n      };\n    }\n\n    return null;\n  }\n\n  toModel(time) {\n    if (!time) {\n      // eslint-disable-next-line\n      return null;\n    }\n\n    return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}`;\n  }\n\n}\n\nTimepickerStringAdapter.ɵfac = /* @__PURE__ */function () {\n  let ɵTimepickerStringAdapter_BaseFactory;\n  return function TimepickerStringAdapter_Factory(t) {\n    return (ɵTimepickerStringAdapter_BaseFactory || (ɵTimepickerStringAdapter_BaseFactory = i0.ɵɵgetInheritedFactory(TimepickerStringAdapter)))(t || TimepickerStringAdapter);\n  };\n}();\n\nTimepickerStringAdapter.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TimepickerStringAdapter,\n  factory: TimepickerStringAdapter.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TimepickerStringAdapter, [{\n    type: Injectable\n  }], null, null);\n})();\n\nconst SIZE_MEDIUM = defaultSize;\nconst SIZE_SMALL = SIZE_MEDIUM / 2;\nconst SIZE_LARGE = SIZE_MEDIUM * 2;\nconst KEYWORD_SMALL = 'small';\nconst KEYWORD_MEDIUM = 'medium';\nconst KEYWORD_LARGE = 'large';\n/**\n * @name InputTimepickerComponent\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes. You need to take care of properties that are required in your case :\n *  - role\n *  - aria-activedescendant\n *  - aria-describedby\n *  - aria-expanded\n *  - aria-invalid\n *  - aria-label\n *  - aria-labelledby\n *  - aria-owns\n *\n * @description\n * Component that displays a timepicker.\n */\n\nclass InputTimepickerComponent extends InputBaseComponent {\n  /**\n   * @deprecated since version 4\n   */\n  constructor(cd, domAttrService, elem, renderer2, deprecationsService) {\n    super(cd, deprecationsService);\n    this.cd = cd;\n    this.domAttrService = domAttrService;\n    this.elem = elem;\n    this.renderer2 = renderer2;\n    this.deprecationsService = deprecationsService;\n    /**\n     * The number of hours to add/subtract when clicking hour spinners.\n     */\n\n    this.hourStep = 1;\n    /**\n     * Whether to display 12H or 24H mode.\n     */\n\n    this.clock = '24h';\n    /**\n     * The number of minutes to add/subtract when clicking minute spinners.\n     */\n\n    this.minuteStep = 1;\n    /**\n     * If true, the timepicker is readonly and can't be changed.\n     */\n\n    this.readonly = false;\n    /**\n     * If true, it is possible to select seconds.\n     */\n\n    this.seconds = false;\n    /**\n     * The number of seconds to add/subtract when clicking second spinners.\n     */\n\n    this.secondStep = 1;\n    this.cssClass = 'bb-input-timepicker';\n  }\n\n  get meridian() {\n    return this.clock === '12h';\n  }\n\n  getKeywordBySize(size) {\n    if (size <= SIZE_SMALL) {\n      return KEYWORD_SMALL;\n    } else if (size >= SIZE_LARGE) {\n      return KEYWORD_LARGE;\n    } else {\n      return KEYWORD_MEDIUM;\n    }\n  }\n\n  getSizeByKeyword(keyword) {\n    const sizeKeywords = {\n      [KEYWORD_SMALL]: SIZE_SMALL,\n      [KEYWORD_MEDIUM]: SIZE_MEDIUM,\n      [KEYWORD_LARGE]: SIZE_LARGE\n    };\n    return typeof keyword === 'string' && sizeKeywords.hasOwnProperty(keyword) ? sizeKeywords[keyword] : undefined;\n  }\n\n  validate(control) {\n    const value = control.value;\n\n    if (!value) {\n      /* eslint-disable-next-line  no-null/no-null */\n      return null;\n    }\n\n    if (this.min && this.max) {\n      const valid = this.min <= value && value <= this.max;\n      return valid ? null : {\n        minMaxTime: true\n      };\n    } else if (this.min) {\n      return this.min <= value ? null : {\n        minTime: true\n      };\n    } else if (this.max) {\n      return value <= this.max ? null : {\n        maxTime: true\n      };\n    }\n\n    return null;\n  }\n\n  ngAfterViewInit() {\n    if (!this.ariaLabel && this.inputEl) {\n      this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.inputEl.nativeElement, this.renderer2);\n    }\n  }\n\n}\n\nInputTimepickerComponent.ɵfac = function InputTimepickerComponent_Factory(t) {\n  return new (t || InputTimepickerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.DomAttributesService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.DeprecationsService));\n};\n\nInputTimepickerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: InputTimepickerComponent,\n  selectors: [[\"bb-input-timepicker-ui\"]],\n  viewQuery: function InputTimepickerComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);\n    }\n  },\n  hostVars: 1,\n  hostBindings: function InputTimepickerComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"class\", ctx.cssClass);\n    }\n  },\n  inputs: {\n    hourStep: \"hourStep\",\n    clock: \"clock\",\n    minuteStep: \"minuteStep\",\n    readonly: \"readonly\",\n    seconds: \"seconds\",\n    secondStep: \"secondStep\",\n    min: \"min\",\n    max: \"max\",\n    autocomplete: \"autocomplete\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InputTimepickerComponent),\n    multi: true\n  }, {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => InputTimepickerComponent),\n    multi: true\n  }, {\n    provide: NgbTimeAdapter,\n    useClass: TimepickerStringAdapter\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 2,\n  vars: 19,\n  consts: [[\"data-role\", \"timepicker\", 1, \"bb-input-timepicker\", 3, \"id\", \"readonlyInputs\", \"disabled\", \"spinners\", \"hourStep\", \"meridian\", \"minuteStep\", \"seconds\", \"secondStep\", \"size\", \"ngModel\", \"ngModelChange\"], [\"timepicker\", \"\"]],\n  template: function InputTimepickerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngb-timepicker\", 0, 1);\n      i0.ɵɵlistener(\"ngModelChange\", function InputTimepickerComponent_Template_ngb_timepicker_ngModelChange_0_listener($event) {\n        return ctx.onValueChange($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵpropertyInterpolate(\"id\", ctx.id);\n      i0.ɵɵproperty(\"readonlyInputs\", ctx.readonly)(\"disabled\", ctx.disabled)(\"spinners\", false)(\"hourStep\", ctx.hourStep)(\"meridian\", ctx.meridian)(\"minuteStep\", ctx.minuteStep)(\"seconds\", ctx.seconds)(\"secondStep\", ctx.secondStep)(\"size\", ctx.getKeywordBySize(ctx.size))(\"ngModel\", ctx.value);\n      i0.ɵɵattribute(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby)(\"aria-expanded\", ctx.ariaExpanded)(\"role\", ctx.role)(\"aria-invalid\", ctx.ariaInvalid)(\"aria-owns\", ctx.ariaOwns)(\"aria-label\", !ctx.label && ctx.ariaLabel || null)(\"autcomplete\", ctx.autocomplete);\n    }\n  },\n  directives: [i3.NgbTimepicker, i4.NgControlStatus, i4.NgModel],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputTimepickerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-input-timepicker-ui',\n      templateUrl: './input-timepicker.component.html',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => InputTimepickerComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => InputTimepickerComponent),\n        multi: true\n      }, {\n        provide: NgbTimeAdapter,\n        useClass: TimepickerStringAdapter\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.DomAttributesService\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i2.DeprecationsService\n    }];\n  }, {\n    hourStep: [{\n      type: Input\n    }],\n    clock: [{\n      type: Input\n    }],\n    minuteStep: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    seconds: [{\n      type: Input\n    }],\n    secondStep: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    autocomplete: [{\n      type: Input\n    }],\n    cssClass: [{\n      type: HostBinding,\n      args: ['attr.class']\n    }],\n    inputEl: [{\n      type: ViewChild,\n      args: ['timepicker']\n    }]\n  });\n})();\n\nclass InputTimepickerModule {}\n\nInputTimepickerModule.ɵfac = function InputTimepickerModule_Factory(t) {\n  return new (t || InputTimepickerModule)();\n};\n\nInputTimepickerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: InputTimepickerModule\n});\nInputTimepickerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [TimepickerStringAdapter],\n  imports: [[CommonModule, NgbTimepickerModule, FormsModule, ReactiveFormsModule, BaseClassesModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputTimepickerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, NgbTimepickerModule, FormsModule, ReactiveFormsModule, BaseClassesModule],\n      declarations: [InputTimepickerComponent],\n      exports: [InputTimepickerComponent],\n      providers: [TimepickerStringAdapter]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { InputTimepickerComponent, InputTimepickerModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-input-timepicker.js"],"names":["CommonModule","i0","Injectable","forwardRef","Component","Input","HostBinding","ViewChild","NgModule","i4","NG_VALUE_ACCESSOR","NG_VALIDATORS","FormsModule","ReactiveFormsModule","i3","NgbTimeAdapter","NgbTimepickerModule","defaultSize","InputBaseComponent","BaseClassesModule","i1","i2","TimepickerStringAdapter","fromModel","value","hour","minute","second","split","map","str","parseInt","toModel","time","String","padStart","ɵfac","ɵprov","type","SIZE_MEDIUM","SIZE_SMALL","SIZE_LARGE","KEYWORD_SMALL","KEYWORD_MEDIUM","KEYWORD_LARGE","InputTimepickerComponent","constructor","cd","domAttrService","elem","renderer2","deprecationsService","hourStep","clock","minuteStep","readonly","seconds","secondStep","cssClass","meridian","getKeywordBySize","size","getSizeByKeyword","keyword","sizeKeywords","hasOwnProperty","undefined","validate","control","min","max","valid","minMaxTime","minTime","maxTime","ngAfterViewInit","ariaLabel","inputEl","moveAriaAttributes","nativeElement","ChangeDetectorRef","DomAttributesService","ElementRef","Renderer2","DeprecationsService","ɵcmp","provide","useExisting","multi","useClass","NgbTimepicker","NgControlStatus","NgModel","args","selector","templateUrl","providers","autocomplete","InputTimepickerModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, forwardRef, Component, Input, HostBinding, ViewChild, NgModule } from '@angular/core';\nimport * as i4 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i3 from '@ng-bootstrap/ng-bootstrap';\nimport { NgbTimeAdapter, NgbTimepickerModule } from '@ng-bootstrap/ng-bootstrap';\nimport { defaultSize, InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';\nimport * as i1 from '@backbase/ui-ang/services';\nimport * as i2 from '@backbase/foundation-ang/future';\n\nclass TimepickerStringAdapter extends NgbTimeAdapter {\n    fromModel(value) {\n        if (value) {\n            const [hour, minute, second] = value.split(':').map((str) => parseInt(str, 10));\n            return { hour, minute, second };\n        }\n        return null;\n    }\n    toModel(time) {\n        if (!time) {\n            // eslint-disable-next-line\n            return null;\n        }\n        return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}`;\n    }\n}\nTimepickerStringAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: TimepickerStringAdapter, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\nTimepickerStringAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: TimepickerStringAdapter });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: TimepickerStringAdapter, decorators: [{\n            type: Injectable\n        }] });\n\nconst SIZE_MEDIUM = defaultSize;\nconst SIZE_SMALL = SIZE_MEDIUM / 2;\nconst SIZE_LARGE = SIZE_MEDIUM * 2;\nconst KEYWORD_SMALL = 'small';\nconst KEYWORD_MEDIUM = 'medium';\nconst KEYWORD_LARGE = 'large';\n/**\n * @name InputTimepickerComponent\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes. You need to take care of properties that are required in your case :\n *  - role\n *  - aria-activedescendant\n *  - aria-describedby\n *  - aria-expanded\n *  - aria-invalid\n *  - aria-label\n *  - aria-labelledby\n *  - aria-owns\n *\n * @description\n * Component that displays a timepicker.\n */\nclass InputTimepickerComponent extends InputBaseComponent {\n    /**\n     * @deprecated since version 4\n     */\n    constructor(cd, domAttrService, elem, renderer2, deprecationsService) {\n        super(cd, deprecationsService);\n        this.cd = cd;\n        this.domAttrService = domAttrService;\n        this.elem = elem;\n        this.renderer2 = renderer2;\n        this.deprecationsService = deprecationsService;\n        /**\n         * The number of hours to add/subtract when clicking hour spinners.\n         */\n        this.hourStep = 1;\n        /**\n         * Whether to display 12H or 24H mode.\n         */\n        this.clock = '24h';\n        /**\n         * The number of minutes to add/subtract when clicking minute spinners.\n         */\n        this.minuteStep = 1;\n        /**\n         * If true, the timepicker is readonly and can't be changed.\n         */\n        this.readonly = false;\n        /**\n         * If true, it is possible to select seconds.\n         */\n        this.seconds = false;\n        /**\n         * The number of seconds to add/subtract when clicking second spinners.\n         */\n        this.secondStep = 1;\n        this.cssClass = 'bb-input-timepicker';\n    }\n    get meridian() {\n        return this.clock === '12h';\n    }\n    getKeywordBySize(size) {\n        if (size <= SIZE_SMALL) {\n            return KEYWORD_SMALL;\n        }\n        else if (size >= SIZE_LARGE) {\n            return KEYWORD_LARGE;\n        }\n        else {\n            return KEYWORD_MEDIUM;\n        }\n    }\n    getSizeByKeyword(keyword) {\n        const sizeKeywords = {\n            [KEYWORD_SMALL]: SIZE_SMALL,\n            [KEYWORD_MEDIUM]: SIZE_MEDIUM,\n            [KEYWORD_LARGE]: SIZE_LARGE,\n        };\n        return typeof keyword === 'string' && sizeKeywords.hasOwnProperty(keyword) ? sizeKeywords[keyword] : undefined;\n    }\n    validate(control) {\n        const value = control.value;\n        if (!value) {\n            /* eslint-disable-next-line  no-null/no-null */\n            return null;\n        }\n        if (this.min && this.max) {\n            const valid = this.min <= value && value <= this.max;\n            return valid ? null : { minMaxTime: true };\n        }\n        else if (this.min) {\n            return this.min <= value ? null : { minTime: true };\n        }\n        else if (this.max) {\n            return value <= this.max ? null : { maxTime: true };\n        }\n        return null;\n    }\n    ngAfterViewInit() {\n        if (!this.ariaLabel && this.inputEl) {\n            this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.inputEl.nativeElement, this.renderer2);\n        }\n    }\n}\nInputTimepickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputTimepickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DomAttributesService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i2.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });\nInputTimepickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: InputTimepickerComponent, selector: \"bb-input-timepicker-ui\", inputs: { hourStep: \"hourStep\", clock: \"clock\", minuteStep: \"minuteStep\", readonly: \"readonly\", seconds: \"seconds\", secondStep: \"secondStep\", min: \"min\", max: \"max\", autocomplete: \"autocomplete\" }, host: { properties: { \"attr.class\": \"this.cssClass\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => InputTimepickerComponent),\n            multi: true,\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => InputTimepickerComponent),\n            multi: true,\n        },\n        { provide: NgbTimeAdapter, useClass: TimepickerStringAdapter },\n    ], viewQueries: [{ propertyName: \"inputEl\", first: true, predicate: [\"timepicker\"], descendants: true }], usesInheritance: true, ngImport: i0, template: \"<ngb-timepicker\\n  #timepicker\\n  id=\\\"{{ id }}\\\"\\n  class=\\\"bb-input-timepicker\\\"\\n  [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n  [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n  [attr.aria-expanded]=\\\"ariaExpanded\\\"\\n  [attr.role]=\\\"role\\\"\\n  [attr.aria-invalid]=\\\"ariaInvalid\\\"\\n  [attr.aria-owns]=\\\"ariaOwns\\\"\\n  [readonlyInputs]=\\\"readonly\\\"\\n  [disabled]=\\\"disabled\\\"\\n  [spinners]=\\\"false\\\"\\n  [hourStep]=\\\"hourStep\\\"\\n  [meridian]=\\\"meridian\\\"\\n  [minuteStep]=\\\"minuteStep\\\"\\n  [seconds]=\\\"seconds\\\"\\n  [secondStep]=\\\"secondStep\\\"\\n  [size]=\\\"getKeywordBySize(size)\\\"\\n  [attr.aria-label]=\\\"(!label && ariaLabel) || null\\\"\\n  [ngModel]=\\\"value\\\"\\n  (ngModelChange)=\\\"onValueChange($event)\\\"\\n  data-role=\\\"timepicker\\\"\\n  [attr.autcomplete]=\\\"autocomplete\\\"\\n>\\n</ngb-timepicker>\\n\", components: [{ type: i3.NgbTimepicker, selector: \"ngb-timepicker\", inputs: [\"meridian\", \"spinners\", \"seconds\", \"hourStep\", \"minuteStep\", \"secondStep\", \"readonlyInputs\", \"size\"] }], directives: [{ type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i4.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputTimepickerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-input-timepicker-ui',\n                    templateUrl: './input-timepicker.component.html',\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => InputTimepickerComponent),\n                            multi: true,\n                        },\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef(() => InputTimepickerComponent),\n                            multi: true,\n                        },\n                        { provide: NgbTimeAdapter, useClass: TimepickerStringAdapter },\n                    ],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DomAttributesService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i2.DeprecationsService }]; }, propDecorators: { hourStep: [{\n                type: Input\n            }], clock: [{\n                type: Input\n            }], minuteStep: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], seconds: [{\n                type: Input\n            }], secondStep: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], autocomplete: [{\n                type: Input\n            }], cssClass: [{\n                type: HostBinding,\n                args: ['attr.class']\n            }], inputEl: [{\n                type: ViewChild,\n                args: ['timepicker']\n            }] } });\n\nclass InputTimepickerModule {\n}\nInputTimepickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputTimepickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nInputTimepickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputTimepickerModule, declarations: [InputTimepickerComponent], imports: [CommonModule, NgbTimepickerModule, FormsModule, ReactiveFormsModule, BaseClassesModule], exports: [InputTimepickerComponent] });\nInputTimepickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputTimepickerModule, providers: [TimepickerStringAdapter], imports: [[CommonModule, NgbTimepickerModule, FormsModule, ReactiveFormsModule, BaseClassesModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputTimepickerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, NgbTimepickerModule, FormsModule, ReactiveFormsModule, BaseClassesModule],\n                    declarations: [InputTimepickerComponent],\n                    exports: [InputTimepickerComponent],\n                    providers: [TimepickerStringAdapter],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { InputTimepickerComponent, InputTimepickerModule };\n"]},"metadata":{},"sourceType":"module"}