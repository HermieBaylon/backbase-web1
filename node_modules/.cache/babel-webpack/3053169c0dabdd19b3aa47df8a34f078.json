{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i2 from '@backbase/foundation-ang/data-http';\nimport { createMocks } from '@backbase/foundation-ang/data-http';\nconst PLACES_BASE_PATH = new InjectionToken('PLACES_BASE_PATH');\nconst COLLECTION_FORMATS = {\n  'csv': ',',\n  'tsv': '   ',\n  'ssv': ' ',\n  'pipes': '|'\n};\n\nclass PlacesConfiguration {\n  constructor(configurationParameters = {}) {\n    this.apiKeys = configurationParameters.apiKeys;\n    this.username = configurationParameters.username;\n    this.password = configurationParameters.password;\n    this.accessToken = configurationParameters.accessToken;\n    this.basePath = configurationParameters.basePath;\n    this.withCredentials = configurationParameters.withCredentials;\n    this.encoder = configurationParameters.encoder;\n\n    if (configurationParameters.credentials) {\n      this.credentials = configurationParameters.credentials;\n    } else {\n      this.credentials = {};\n    }\n  }\n\n  selectHeaderContentType(contentTypes) {\n    if (contentTypes.length === 0) {\n      return undefined;\n    }\n\n    const type = contentTypes.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return contentTypes[0];\n    }\n\n    return type;\n  }\n\n  selectHeaderAccept(accepts) {\n    if (accepts.length === 0) {\n      return undefined;\n    }\n\n    const type = accepts.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return accepts[0];\n    }\n\n    return type;\n  }\n\n  isJsonMime(mime) {\n    const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n\n  lookupCredential(key) {\n    const value = this.credentials[key];\n    return typeof value === 'function' ? value() : value;\n  }\n\n}\n\nconst CONFIG_TOKEN = new InjectionToken('api-data-module PlacesConfiguration');\n\nclass PlacesApiModule {\n  constructor(parentModule, http, dataModulesManager, config) {\n    if (parentModule) {\n      throw new Error('PlacesApiModule is already loaded. Import in your base AppModule only.');\n    }\n\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' + 'See also https://github.com/angular/angular/issues/20575');\n    }\n\n    if (dataModulesManager) {\n      dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n        apiRoot: '',\n        servicePath: config.basePath || '',\n        headers: {}\n      });\n    }\n  }\n\n  static forRoot(configurationFactory) {\n    return {\n      ngModule: PlacesApiModule,\n      providers: [{\n        provide: PlacesConfiguration,\n        useFactory: configurationFactory\n      }]\n    };\n  }\n\n}\n\nPlacesApiModule.ɵfac = function PlacesApiModule_Factory(t) {\n  return new (t || PlacesApiModule)(i0.ɵɵinject(PlacesApiModule, 12), i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DataModulesManager, 8), i0.ɵɵinject(PlacesConfiguration));\n};\n\nPlacesApiModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: PlacesApiModule\n});\nPlacesApiModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [],\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PlacesApiModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [],\n      exports: [],\n      providers: []\n    }]\n  }], function () {\n    return [{\n      type: PlacesApiModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: i1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.DataModulesManager,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: PlacesConfiguration\n    }];\n  }, null);\n})();\n\nclass CustomHttpParameterCodec {\n  encodeKey(k) {\n    return encodeURIComponent(k);\n  }\n\n  encodeValue(v) {\n    return encodeURIComponent(v);\n  }\n\n  decodeKey(k) {\n    return decodeURIComponent(k);\n  }\n\n  decodeValue(v) {\n    return decodeURIComponent(v);\n  }\n\n}\n\nclass PlacesHttpService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new PlacesConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getPlaces(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _latitude = requestParameters[\"latitude\"];\n\n    if (_latitude === null || _latitude === undefined) {\n      throw new Error('Required parameter latitude was null or undefined when calling getPlaces.');\n    }\n\n    const _longitude = requestParameters[\"longitude\"];\n\n    if (_longitude === null || _longitude === undefined) {\n      throw new Error('Required parameter longitude was null or undefined when calling getPlaces.');\n    }\n\n    const _radius = requestParameters[\"radius\"];\n\n    if (_radius === null || _radius === undefined) {\n      throw new Error('Required parameter radius was null or undefined when calling getPlaces.');\n    }\n\n    const _type = requestParameters[\"type\"];\n    const _types = requestParameters[\"types\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_latitude !== undefined && _latitude !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _latitude, 'latitude');\n    }\n\n    if (_longitude !== undefined && _longitude !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _longitude, 'longitude');\n    }\n\n    if (_radius !== undefined && _radius !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _radius, 'radius');\n    }\n\n    if (_type !== undefined && _type !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _type, 'type');\n    }\n\n    if (_types) {\n      _types.forEach(element => {\n        queryParameters = this.addToHttpParams(queryParameters, element, 'types');\n      });\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/places`, {\n      params: queryParameters,\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getPlacesUrl(requestParameters) {\n    const _latitude = requestParameters[\"latitude\"];\n\n    if (_latitude === null || _latitude === undefined) {\n      throw new Error('Required parameter latitude was null or undefined when calling getPlaces.');\n    }\n\n    const _longitude = requestParameters[\"longitude\"];\n\n    if (_longitude === null || _longitude === undefined) {\n      throw new Error('Required parameter longitude was null or undefined when calling getPlaces.');\n    }\n\n    const _radius = requestParameters[\"radius\"];\n\n    if (_radius === null || _radius === undefined) {\n      throw new Error('Required parameter radius was null or undefined when calling getPlaces.');\n    }\n\n    const _type = requestParameters[\"type\"];\n    const _types = requestParameters[\"types\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_latitude !== undefined && _latitude !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _latitude, 'latitude');\n    }\n\n    if (_longitude !== undefined && _longitude !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _longitude, 'longitude');\n    }\n\n    if (_radius !== undefined && _radius !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _radius, 'radius');\n    }\n\n    if (_type !== undefined && _type !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _type, 'type');\n    }\n\n    if (_types) {\n      _types.forEach(element => {\n        queryParameters = this.addToHttpParams(queryParameters, element, 'types');\n      });\n    }\n\n    const queryString = queryParameters.toString();\n    return `${this.configuration.basePath}/client-api/v2/places${queryString ? `?${queryString}` : ''}`;\n  }\n\n}\n\nPlacesHttpService.ɵfac = function PlacesHttpService_Factory(t) {\n  return new (t || PlacesHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(PLACES_BASE_PATH, 8), i0.ɵɵinject(PlacesConfiguration, 8));\n};\n\nPlacesHttpService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PlacesHttpService,\n  factory: PlacesHttpService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PlacesHttpService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [PLACES_BASE_PATH]\n      }]\n    }, {\n      type: PlacesConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst PlacesHttpServiceGetPlacesMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/places\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7a\",\n      \"name\": \"Backbase Financial\",\n      \"address\": {\n        \"addressLine1\": \"737 Meadowbrook Boulevard\",\n        \"postalCode\": \"20005\",\n        \"country\": \"United States\"\n      },\n      \"hours\": [{\n        \"day\": 1,\n        \"open\": \"09:00\",\n        \"close\": \"17:00\"\n      }, {\n        \"day\": 2,\n        \"open\": \"09:00\",\n        \"close\": \"17:00\"\n      }, {\n        \"day\": 3,\n        \"open\": \"09:00\",\n        \"close\": \"17:30\"\n      }, {\n        \"day\": 4,\n        \"open\": \"09:00\",\n        \"close\": \"20:00\"\n      }, {\n        \"day\": 5,\n        \"open\": \"09:00\",\n        \"close\": \"17:00\"\n      }],\n      \"latitude\": 40.70162374,\n      \"longitude\": -74.01232503,\n      \"placeType\": \"branch\",\n      \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\", \"Exclusive banking\"]\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7b\",\n      \"name\": \"Bank of Nebraska\",\n      \"address\": {\n        \"addressLine1\": \"623 Live Oak Lane\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"18254\",\n        \"country\": \"United States\"\n      },\n      \"hours\": [{\n        \"day\": 1,\n        \"open\": \"09:30\",\n        \"close\": \"13:00\"\n      }, {\n        \"day\": 1,\n        \"open\": \"14:00\",\n        \"close\": \"17:00\"\n      }, {\n        \"day\": 2,\n        \"open\": \"09:00\",\n        \"close\": \"13:30\"\n      }, {\n        \"day\": 2,\n        \"open\": \"14:30\",\n        \"close\": \"17:30\"\n      }, {\n        \"day\": 3,\n        \"open\": \"09:00\",\n        \"close\": \"12:00\"\n      }, {\n        \"day\": 3,\n        \"open\": \"13:00\",\n        \"close\": \"15:00\"\n      }, {\n        \"day\": 4,\n        \"open\": \"09:00\",\n        \"close\": \"15:00\"\n      }, {\n        \"day\": 4,\n        \"open\": \"16:00\",\n        \"close\": \"20:00\"\n      }, {\n        \"day\": 5,\n        \"open\": \"09:00\",\n        \"close\": \"15:00\"\n      }, {\n        \"day\": 5,\n        \"open\": \"16:00\",\n        \"close\": \"18:00\"\n      }, {\n        \"day\": 6,\n        \"open\": \"10:00\",\n        \"close\": \"12:00\"\n      }, {\n        \"day\": 6,\n        \"open\": \"12:30\",\n        \"close\": \"14:00\"\n      }, {\n        \"day\": 7,\n        \"open\": \"10:00\",\n        \"close\": \"12:00\"\n      }, {\n        \"day\": 7,\n        \"open\": \"12:30\",\n        \"close\": \"14:00\"\n      }],\n      \"latitude\": 40.7112536,\n      \"longitude\": -73.99589751,\n      \"placeType\": \"branch\",\n      \"services\": [\"Cash withdrawals\"]\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af234123\",\n      \"name\": \"Backbase ATM\",\n      \"address\": {\n        \"addressLine1\": \"192 Walnut Drive\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"29874\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.72257311,\n      \"longitude\": -74.00628302,\n      \"placeType\": \"atm\",\n      \"services\": [\"Cash withdrawals\"]\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af234121\",\n      \"name\": \"First Financial ATM\",\n      \"address\": {\n        \"addressLine1\": \"88 Dogwood street\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"10087\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.72901266,\n      \"longitude\": -73.97744391,\n      \"placeType\": \"atm\"\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7c\",\n      \"name\": \"Fells Wargo Bank\",\n      \"address\": {\n        \"addressLine1\": \"504 Park Avenue\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"03331\",\n        \"country\": \"United States\"\n      },\n      \"hours\": [{\n        \"day\": 1,\n        \"open\": \"09:30\",\n        \"close\": \"17:00\"\n      }, {\n        \"day\": 2,\n        \"open\": \"09:00\",\n        \"close\": \"17:30\"\n      }, {\n        \"day\": 3,\n        \"open\": \"09:00\",\n        \"close\": \"14:00\"\n      }, {\n        \"day\": 4,\n        \"open\": \"09:00\",\n        \"close\": \"20:00\"\n      }, {\n        \"day\": 5,\n        \"open\": \"09:00\",\n        \"close\": \"17:00\"\n      }],\n      \"latitude\": 40.72345355,\n      \"longitude\": -73.99240494,\n      \"placeType\": \"branch\",\n      \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Exclusive banking\"]\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7d\",\n      \"name\": \"First State Bank\",\n      \"address\": {\n        \"addressLine1\": \"35 Ave North\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"31118\",\n        \"country\": \"United States\"\n      },\n      \"hours\": [{\n        \"day\": 1,\n        \"open\": \"09:30\",\n        \"close\": \"17:00\"\n      }, {\n        \"day\": 2,\n        \"open\": \"09:00\",\n        \"close\": \"17:30\"\n      }, {\n        \"day\": 3,\n        \"open\": \"09:00\",\n        \"close\": \"17:00\"\n      }, {\n        \"day\": 4,\n        \"open\": \"09:00\",\n        \"close\": \"20:00\"\n      }, {\n        \"day\": 5,\n        \"open\": \"09:00\",\n        \"close\": \"17:00\"\n      }],\n      \"latitude\": 40.71447146,\n      \"longitude\": -73.96551378,\n      \"placeType\": \"branch\",\n      \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\"]\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7e\",\n      \"name\": \"R&Z Bank\",\n      \"address\": {\n        \"addressLine1\": \"45 Dakota Avenue\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"58347\",\n        \"country\": \"United States\"\n      },\n      \"hours\": [{\n        \"day\": 1,\n        \"open\": \"09:30\",\n        \"close\": \"17:00\"\n      }, {\n        \"day\": 2,\n        \"open\": \"09:00\",\n        \"close\": \"17:30\"\n      }, {\n        \"day\": 3,\n        \"open\": \"09:00\",\n        \"close\": \"17:00\"\n      }, {\n        \"day\": 4,\n        \"open\": \"09:00\",\n        \"close\": \"12:00\"\n      }, {\n        \"day\": 4,\n        \"open\": \"14:00\",\n        \"close\": \"20:00\"\n      }, {\n        \"day\": 5,\n        \"open\": \"09:00\",\n        \"close\": \"17:00\"\n      }],\n      \"latitude\": 40.70484232,\n      \"longitude\": -73.98285158,\n      \"placeType\": \"branch\",\n      \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\", \"Exclusive banking\"]\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7e\",\n      \"name\": \"Eagle Freedom Bank\",\n      \"latitude\": 40.6945173,\n      \"longitude\": -73.99353683,\n      \"placeType\": \"branch\"\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af234129\",\n      \"name\": \"Paddy's Pub Bank\",\n      \"address\": {\n        \"addressLine1\": \"352 Wolf Cola Drive\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"29230\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.71000372,\n      \"longitude\": -73.99430931,\n      \"placeType\": \"atm\"\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af234128\",\n      \"name\": \"Money Bank ATM\",\n      \"address\": {\n        \"addressLine1\": \"927 Coldrew Avenue\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"29642\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.73971668,\n      \"longitude\": -73.99168108,\n      \"placeType\": \"atm\"\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af234127\",\n      \"name\": \"Community Financial ATM\",\n      \"address\": {\n        \"addressLine1\": \"236 Eagles Nest Street\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"39124\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.71483003,\n      \"longitude\": -74.01252754,\n      \"placeType\": \"atm\"\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af234126\",\n      \"name\": \"SanFran United ATM\",\n      \"latitude\": 40.73028327,\n      \"longitude\": -74.00176048\n    }, {\n      \"id\": \"a956dbc7-a84d-46fe-91c3-bc40561ffdee\",\n      \"name\": \"Forest Associated Trust\",\n      \"address\": {\n        \"addressLine1\": \"137 Paper Way\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"10278\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.73555143,\n      \"longitude\": -73.97918701,\n      \"placeType\": \"branch\",\n      \"services\": [\"Cash withdrawals\", \"Safe deposit\", \"Exclusive banking\"]\n    }, {\n      \"id\": \"d6cdb083-ea55-4760-9ca7-10b1ce0792fd\",\n      \"name\": \"Millenial Bank United\",\n      \"address\": {\n        \"addressLine1\": \"26 Federal Plaza\",\n        \"postalCode\": \"10278\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.74250997,\n      \"longitude\": -73.99698414,\n      \"placeType\": \"branch\"\n    }, {\n      \"id\": \"40c154d3-344b-48c9-966d-23aaf7369c1f\",\n      \"name\": \"Great North Bank\",\n      \"address\": {\n        \"addressLine1\": \"135 W 3rd St\",\n        \"postalCode\": \"10012\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.73947942,\n      \"longitude\": -73.97421453,\n      \"placeType\": \"branch\",\n      \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\"]\n    }, {\n      \"id\": \"82cd9c3b-2c91-4631-9b25-71281179fa0d\",\n      \"name\": \"Great Valley Financial\",\n      \"address\": {\n        \"addressLine1\": \"89 Chrysie St\",\n        \"addressLine2\": \"p.o. box 213\",\n        \"postalCode\": \"10002\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.71392381,\n      \"longitude\": -74.00345162,\n      \"placeType\": \"branch\",\n      \"services\": [\"Cash withdrawals\", \"Safe deposit\", \"Exclusive banking\"]\n    }, {\n      \"id\": \"0edb7a6e-8969-493e-9787-90fe967843ce\",\n      \"name\": \"Safeway Banking\",\n      \"address\": {\n        \"addressLine1\": \"284 Government Drive\",\n        \"addressLine2\": \"New York City\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.73626683,\n      \"longitude\": -74.00819778,\n      \"placeType\": \"branch\",\n      \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\"]\n    }]\n  }]\n}]);\nconst PlacesHttpServiceMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/places\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7a\",\n      \"name\": \"Backbase Financial\",\n      \"address\": {\n        \"addressLine1\": \"737 Meadowbrook Boulevard\",\n        \"postalCode\": \"20005\",\n        \"country\": \"United States\"\n      },\n      \"hours\": [{\n        \"day\": 1,\n        \"open\": \"09:00\",\n        \"close\": \"17:00\"\n      }, {\n        \"day\": 2,\n        \"open\": \"09:00\",\n        \"close\": \"17:00\"\n      }, {\n        \"day\": 3,\n        \"open\": \"09:00\",\n        \"close\": \"17:30\"\n      }, {\n        \"day\": 4,\n        \"open\": \"09:00\",\n        \"close\": \"20:00\"\n      }, {\n        \"day\": 5,\n        \"open\": \"09:00\",\n        \"close\": \"17:00\"\n      }],\n      \"latitude\": 40.70162374,\n      \"longitude\": -74.01232503,\n      \"placeType\": \"branch\",\n      \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\", \"Exclusive banking\"]\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7b\",\n      \"name\": \"Bank of Nebraska\",\n      \"address\": {\n        \"addressLine1\": \"623 Live Oak Lane\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"18254\",\n        \"country\": \"United States\"\n      },\n      \"hours\": [{\n        \"day\": 1,\n        \"open\": \"09:30\",\n        \"close\": \"13:00\"\n      }, {\n        \"day\": 1,\n        \"open\": \"14:00\",\n        \"close\": \"17:00\"\n      }, {\n        \"day\": 2,\n        \"open\": \"09:00\",\n        \"close\": \"13:30\"\n      }, {\n        \"day\": 2,\n        \"open\": \"14:30\",\n        \"close\": \"17:30\"\n      }, {\n        \"day\": 3,\n        \"open\": \"09:00\",\n        \"close\": \"12:00\"\n      }, {\n        \"day\": 3,\n        \"open\": \"13:00\",\n        \"close\": \"15:00\"\n      }, {\n        \"day\": 4,\n        \"open\": \"09:00\",\n        \"close\": \"15:00\"\n      }, {\n        \"day\": 4,\n        \"open\": \"16:00\",\n        \"close\": \"20:00\"\n      }, {\n        \"day\": 5,\n        \"open\": \"09:00\",\n        \"close\": \"15:00\"\n      }, {\n        \"day\": 5,\n        \"open\": \"16:00\",\n        \"close\": \"18:00\"\n      }, {\n        \"day\": 6,\n        \"open\": \"10:00\",\n        \"close\": \"12:00\"\n      }, {\n        \"day\": 6,\n        \"open\": \"12:30\",\n        \"close\": \"14:00\"\n      }, {\n        \"day\": 7,\n        \"open\": \"10:00\",\n        \"close\": \"12:00\"\n      }, {\n        \"day\": 7,\n        \"open\": \"12:30\",\n        \"close\": \"14:00\"\n      }],\n      \"latitude\": 40.7112536,\n      \"longitude\": -73.99589751,\n      \"placeType\": \"branch\",\n      \"services\": [\"Cash withdrawals\"]\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af234123\",\n      \"name\": \"Backbase ATM\",\n      \"address\": {\n        \"addressLine1\": \"192 Walnut Drive\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"29874\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.72257311,\n      \"longitude\": -74.00628302,\n      \"placeType\": \"atm\",\n      \"services\": [\"Cash withdrawals\"]\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af234121\",\n      \"name\": \"First Financial ATM\",\n      \"address\": {\n        \"addressLine1\": \"88 Dogwood street\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"10087\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.72901266,\n      \"longitude\": -73.97744391,\n      \"placeType\": \"atm\"\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7c\",\n      \"name\": \"Fells Wargo Bank\",\n      \"address\": {\n        \"addressLine1\": \"504 Park Avenue\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"03331\",\n        \"country\": \"United States\"\n      },\n      \"hours\": [{\n        \"day\": 1,\n        \"open\": \"09:30\",\n        \"close\": \"17:00\"\n      }, {\n        \"day\": 2,\n        \"open\": \"09:00\",\n        \"close\": \"17:30\"\n      }, {\n        \"day\": 3,\n        \"open\": \"09:00\",\n        \"close\": \"14:00\"\n      }, {\n        \"day\": 4,\n        \"open\": \"09:00\",\n        \"close\": \"20:00\"\n      }, {\n        \"day\": 5,\n        \"open\": \"09:00\",\n        \"close\": \"17:00\"\n      }],\n      \"latitude\": 40.72345355,\n      \"longitude\": -73.99240494,\n      \"placeType\": \"branch\",\n      \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Exclusive banking\"]\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7d\",\n      \"name\": \"First State Bank\",\n      \"address\": {\n        \"addressLine1\": \"35 Ave North\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"31118\",\n        \"country\": \"United States\"\n      },\n      \"hours\": [{\n        \"day\": 1,\n        \"open\": \"09:30\",\n        \"close\": \"17:00\"\n      }, {\n        \"day\": 2,\n        \"open\": \"09:00\",\n        \"close\": \"17:30\"\n      }, {\n        \"day\": 3,\n        \"open\": \"09:00\",\n        \"close\": \"17:00\"\n      }, {\n        \"day\": 4,\n        \"open\": \"09:00\",\n        \"close\": \"20:00\"\n      }, {\n        \"day\": 5,\n        \"open\": \"09:00\",\n        \"close\": \"17:00\"\n      }],\n      \"latitude\": 40.71447146,\n      \"longitude\": -73.96551378,\n      \"placeType\": \"branch\",\n      \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\"]\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7e\",\n      \"name\": \"R&Z Bank\",\n      \"address\": {\n        \"addressLine1\": \"45 Dakota Avenue\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"58347\",\n        \"country\": \"United States\"\n      },\n      \"hours\": [{\n        \"day\": 1,\n        \"open\": \"09:30\",\n        \"close\": \"17:00\"\n      }, {\n        \"day\": 2,\n        \"open\": \"09:00\",\n        \"close\": \"17:30\"\n      }, {\n        \"day\": 3,\n        \"open\": \"09:00\",\n        \"close\": \"17:00\"\n      }, {\n        \"day\": 4,\n        \"open\": \"09:00\",\n        \"close\": \"12:00\"\n      }, {\n        \"day\": 4,\n        \"open\": \"14:00\",\n        \"close\": \"20:00\"\n      }, {\n        \"day\": 5,\n        \"open\": \"09:00\",\n        \"close\": \"17:00\"\n      }],\n      \"latitude\": 40.70484232,\n      \"longitude\": -73.98285158,\n      \"placeType\": \"branch\",\n      \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\", \"Exclusive banking\"]\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7e\",\n      \"name\": \"Eagle Freedom Bank\",\n      \"latitude\": 40.6945173,\n      \"longitude\": -73.99353683,\n      \"placeType\": \"branch\"\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af234129\",\n      \"name\": \"Paddy's Pub Bank\",\n      \"address\": {\n        \"addressLine1\": \"352 Wolf Cola Drive\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"29230\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.71000372,\n      \"longitude\": -73.99430931,\n      \"placeType\": \"atm\"\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af234128\",\n      \"name\": \"Money Bank ATM\",\n      \"address\": {\n        \"addressLine1\": \"927 Coldrew Avenue\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"29642\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.73971668,\n      \"longitude\": -73.99168108,\n      \"placeType\": \"atm\"\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af234127\",\n      \"name\": \"Community Financial ATM\",\n      \"address\": {\n        \"addressLine1\": \"236 Eagles Nest Street\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"39124\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.71483003,\n      \"longitude\": -74.01252754,\n      \"placeType\": \"atm\"\n    }, {\n      \"id\": \"32c91a0b-199e-4275-bbe9-7097af234126\",\n      \"name\": \"SanFran United ATM\",\n      \"latitude\": 40.73028327,\n      \"longitude\": -74.00176048\n    }, {\n      \"id\": \"a956dbc7-a84d-46fe-91c3-bc40561ffdee\",\n      \"name\": \"Forest Associated Trust\",\n      \"address\": {\n        \"addressLine1\": \"137 Paper Way\",\n        \"addressLine2\": \"New York City\",\n        \"postalCode\": \"10278\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.73555143,\n      \"longitude\": -73.97918701,\n      \"placeType\": \"branch\",\n      \"services\": [\"Cash withdrawals\", \"Safe deposit\", \"Exclusive banking\"]\n    }, {\n      \"id\": \"d6cdb083-ea55-4760-9ca7-10b1ce0792fd\",\n      \"name\": \"Millenial Bank United\",\n      \"address\": {\n        \"addressLine1\": \"26 Federal Plaza\",\n        \"postalCode\": \"10278\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.74250997,\n      \"longitude\": -73.99698414,\n      \"placeType\": \"branch\"\n    }, {\n      \"id\": \"40c154d3-344b-48c9-966d-23aaf7369c1f\",\n      \"name\": \"Great North Bank\",\n      \"address\": {\n        \"addressLine1\": \"135 W 3rd St\",\n        \"postalCode\": \"10012\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.73947942,\n      \"longitude\": -73.97421453,\n      \"placeType\": \"branch\",\n      \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\"]\n    }, {\n      \"id\": \"82cd9c3b-2c91-4631-9b25-71281179fa0d\",\n      \"name\": \"Great Valley Financial\",\n      \"address\": {\n        \"addressLine1\": \"89 Chrysie St\",\n        \"addressLine2\": \"p.o. box 213\",\n        \"postalCode\": \"10002\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.71392381,\n      \"longitude\": -74.00345162,\n      \"placeType\": \"branch\",\n      \"services\": [\"Cash withdrawals\", \"Safe deposit\", \"Exclusive banking\"]\n    }, {\n      \"id\": \"0edb7a6e-8969-493e-9787-90fe967843ce\",\n      \"name\": \"Safeway Banking\",\n      \"address\": {\n        \"addressLine1\": \"284 Government Drive\",\n        \"addressLine2\": \"New York City\",\n        \"country\": \"United States\"\n      },\n      \"latitude\": 40.73626683,\n      \"longitude\": -74.00819778,\n      \"placeType\": \"branch\",\n      \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\"]\n    }]\n  }]\n}]);\nexport { COLLECTION_FORMATS, CONFIG_TOKEN, PLACES_BASE_PATH, PlacesApiModule, PlacesConfiguration, PlacesHttpService, PlacesHttpServiceGetPlacesMocksProvider, PlacesHttpServiceMocksProvider };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/places-http-ang/fesm2015/backbase-places-http-ang.js"],"names":["i0","InjectionToken","NgModule","Optional","SkipSelf","Injectable","Inject","i1","HttpHeaders","HttpParams","i2","createMocks","PLACES_BASE_PATH","COLLECTION_FORMATS","PlacesConfiguration","constructor","configurationParameters","apiKeys","username","password","accessToken","basePath","withCredentials","encoder","credentials","selectHeaderContentType","contentTypes","length","undefined","type","find","x","isJsonMime","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","lookupCredential","key","value","CONFIG_TOKEN","PlacesApiModule","parentModule","http","dataModulesManager","config","Error","setModuleConfig","apiRoot","servicePath","headers","forRoot","configurationFactory","ngModule","providers","provide","useFactory","ɵfac","HttpClient","DataModulesManager","ɵmod","ɵinj","args","imports","declarations","exports","decorators","CustomHttpParameterCodec","encodeKey","k","encodeURIComponent","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","PlacesHttpService","httpClient","configuration","defaultHeaders","addToHttpParams","httpParams","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","append","toISOString","substr","Object","keys","getPlaces","requestParameters","observe","reportProgress","options","_latitude","_longitude","_radius","_type","_types","queryParameters","element","httpHeaderAcceptSelected","httpHeaderAccept","httpHeaderAccepts","set","responseType","startsWith","get","params","getPlacesUrl","queryString","toString","ɵprov","providedIn","PlacesHttpServiceGetPlacesMocksProvider","urlPattern","method","responses","status","body","PlacesHttpServiceMocksProvider"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i2 from '@backbase/foundation-ang/data-http';\nimport { createMocks } from '@backbase/foundation-ang/data-http';\n\nconst PLACES_BASE_PATH = new InjectionToken('PLACES_BASE_PATH');\nconst COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n};\n\nclass PlacesConfiguration {\n    constructor(configurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n    selectHeaderContentType(contentTypes) {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n        const type = contentTypes.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n    selectHeaderAccept(accepts) {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n        const type = accepts.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n    isJsonMime(mime) {\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n    lookupCredential(key) {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\nconst CONFIG_TOKEN = new InjectionToken('api-data-module PlacesConfiguration');\n\nclass PlacesApiModule {\n    constructor(parentModule, http, dataModulesManager, config) {\n        if (parentModule) {\n            throw new Error('PlacesApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n                'See also https://github.com/angular/angular/issues/20575');\n        }\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n    static forRoot(configurationFactory) {\n        return {\n            ngModule: PlacesApiModule,\n            providers: [{ provide: PlacesConfiguration, useFactory: configurationFactory }]\n        };\n    }\n}\nPlacesApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PlacesApiModule, deps: [{ token: PlacesApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: PlacesConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });\nPlacesApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PlacesApiModule });\nPlacesApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PlacesApiModule, providers: [], imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PlacesApiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [],\n                    declarations: [],\n                    exports: [],\n                    providers: []\n                }]\n        }], ctorParameters: function () { return [{ type: PlacesApiModule, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DataModulesManager, decorators: [{\n                    type: Optional\n                }] }, { type: PlacesConfiguration }]; } });\n\nclass CustomHttpParameterCodec {\n    encodeKey(k) {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v) {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k) {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v) {\n        return decodeURIComponent(v);\n    }\n}\n\nclass PlacesHttpService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new PlacesConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getPlaces(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _latitude = requestParameters[\"latitude\"];\n        if (_latitude === null || _latitude === undefined) {\n            throw new Error('Required parameter latitude was null or undefined when calling getPlaces.');\n        }\n        const _longitude = requestParameters[\"longitude\"];\n        if (_longitude === null || _longitude === undefined) {\n            throw new Error('Required parameter longitude was null or undefined when calling getPlaces.');\n        }\n        const _radius = requestParameters[\"radius\"];\n        if (_radius === null || _radius === undefined) {\n            throw new Error('Required parameter radius was null or undefined when calling getPlaces.');\n        }\n        const _type = requestParameters[\"type\"];\n        const _types = requestParameters[\"types\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_latitude !== undefined && _latitude !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _latitude, 'latitude');\n        }\n        if (_longitude !== undefined && _longitude !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _longitude, 'longitude');\n        }\n        if (_radius !== undefined && _radius !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _radius, 'radius');\n        }\n        if (_type !== undefined && _type !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _type, 'type');\n        }\n        if (_types) {\n            _types.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters, element, 'types');\n            });\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/places`, {\n            params: queryParameters,\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getPlacesUrl(requestParameters) {\n        const _latitude = requestParameters[\"latitude\"];\n        if (_latitude === null || _latitude === undefined) {\n            throw new Error('Required parameter latitude was null or undefined when calling getPlaces.');\n        }\n        const _longitude = requestParameters[\"longitude\"];\n        if (_longitude === null || _longitude === undefined) {\n            throw new Error('Required parameter longitude was null or undefined when calling getPlaces.');\n        }\n        const _radius = requestParameters[\"radius\"];\n        if (_radius === null || _radius === undefined) {\n            throw new Error('Required parameter radius was null or undefined when calling getPlaces.');\n        }\n        const _type = requestParameters[\"type\"];\n        const _types = requestParameters[\"types\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_latitude !== undefined && _latitude !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _latitude, 'latitude');\n        }\n        if (_longitude !== undefined && _longitude !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _longitude, 'longitude');\n        }\n        if (_radius !== undefined && _radius !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _radius, 'radius');\n        }\n        if (_type !== undefined && _type !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _type, 'type');\n        }\n        if (_types) {\n            _types.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters, element, 'types');\n            });\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v2/places${queryString ? `?${queryString}` : ''}`;\n    }\n}\nPlacesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PlacesHttpService, deps: [{ token: i1.HttpClient }, { token: PLACES_BASE_PATH, optional: true }, { token: PlacesConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nPlacesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PlacesHttpService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PlacesHttpService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [PLACES_BASE_PATH]\n                }] }, { type: PlacesConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst PlacesHttpServiceGetPlacesMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/places\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7a\",\n                        \"name\": \"Backbase Financial\",\n                        \"address\": {\n                            \"addressLine1\": \"737 Meadowbrook Boulevard\",\n                            \"postalCode\": \"20005\",\n                            \"country\": \"United States\"\n                        },\n                        \"hours\": [{\n                                \"day\": 1,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:00\"\n                            }, {\n                                \"day\": 2,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:00\"\n                            }, {\n                                \"day\": 3,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:30\"\n                            }, {\n                                \"day\": 4,\n                                \"open\": \"09:00\",\n                                \"close\": \"20:00\"\n                            }, {\n                                \"day\": 5,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:00\"\n                            }],\n                        \"latitude\": 40.70162374,\n                        \"longitude\": -74.01232503,\n                        \"placeType\": \"branch\",\n                        \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\", \"Exclusive banking\"]\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7b\",\n                        \"name\": \"Bank of Nebraska\",\n                        \"address\": {\n                            \"addressLine1\": \"623 Live Oak Lane\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"18254\",\n                            \"country\": \"United States\"\n                        },\n                        \"hours\": [{\n                                \"day\": 1,\n                                \"open\": \"09:30\",\n                                \"close\": \"13:00\"\n                            }, {\n                                \"day\": 1,\n                                \"open\": \"14:00\",\n                                \"close\": \"17:00\"\n                            }, {\n                                \"day\": 2,\n                                \"open\": \"09:00\",\n                                \"close\": \"13:30\"\n                            }, {\n                                \"day\": 2,\n                                \"open\": \"14:30\",\n                                \"close\": \"17:30\"\n                            }, {\n                                \"day\": 3,\n                                \"open\": \"09:00\",\n                                \"close\": \"12:00\"\n                            }, {\n                                \"day\": 3,\n                                \"open\": \"13:00\",\n                                \"close\": \"15:00\"\n                            }, {\n                                \"day\": 4,\n                                \"open\": \"09:00\",\n                                \"close\": \"15:00\"\n                            }, {\n                                \"day\": 4,\n                                \"open\": \"16:00\",\n                                \"close\": \"20:00\"\n                            }, {\n                                \"day\": 5,\n                                \"open\": \"09:00\",\n                                \"close\": \"15:00\"\n                            }, {\n                                \"day\": 5,\n                                \"open\": \"16:00\",\n                                \"close\": \"18:00\"\n                            }, {\n                                \"day\": 6,\n                                \"open\": \"10:00\",\n                                \"close\": \"12:00\"\n                            }, {\n                                \"day\": 6,\n                                \"open\": \"12:30\",\n                                \"close\": \"14:00\"\n                            }, {\n                                \"day\": 7,\n                                \"open\": \"10:00\",\n                                \"close\": \"12:00\"\n                            }, {\n                                \"day\": 7,\n                                \"open\": \"12:30\",\n                                \"close\": \"14:00\"\n                            }],\n                        \"latitude\": 40.7112536,\n                        \"longitude\": -73.99589751,\n                        \"placeType\": \"branch\",\n                        \"services\": [\"Cash withdrawals\"]\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af234123\",\n                        \"name\": \"Backbase ATM\",\n                        \"address\": {\n                            \"addressLine1\": \"192 Walnut Drive\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"29874\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.72257311,\n                        \"longitude\": -74.00628302,\n                        \"placeType\": \"atm\",\n                        \"services\": [\"Cash withdrawals\"]\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af234121\",\n                        \"name\": \"First Financial ATM\",\n                        \"address\": {\n                            \"addressLine1\": \"88 Dogwood street\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"10087\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.72901266,\n                        \"longitude\": -73.97744391,\n                        \"placeType\": \"atm\"\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7c\",\n                        \"name\": \"Fells Wargo Bank\",\n                        \"address\": {\n                            \"addressLine1\": \"504 Park Avenue\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"03331\",\n                            \"country\": \"United States\"\n                        },\n                        \"hours\": [{\n                                \"day\": 1,\n                                \"open\": \"09:30\",\n                                \"close\": \"17:00\"\n                            }, {\n                                \"day\": 2,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:30\"\n                            }, {\n                                \"day\": 3,\n                                \"open\": \"09:00\",\n                                \"close\": \"14:00\"\n                            }, {\n                                \"day\": 4,\n                                \"open\": \"09:00\",\n                                \"close\": \"20:00\"\n                            }, {\n                                \"day\": 5,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:00\"\n                            }],\n                        \"latitude\": 40.72345355,\n                        \"longitude\": -73.99240494,\n                        \"placeType\": \"branch\",\n                        \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Exclusive banking\"]\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7d\",\n                        \"name\": \"First State Bank\",\n                        \"address\": {\n                            \"addressLine1\": \"35 Ave North\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"31118\",\n                            \"country\": \"United States\"\n                        },\n                        \"hours\": [{\n                                \"day\": 1,\n                                \"open\": \"09:30\",\n                                \"close\": \"17:00\"\n                            }, {\n                                \"day\": 2,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:30\"\n                            }, {\n                                \"day\": 3,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:00\"\n                            }, {\n                                \"day\": 4,\n                                \"open\": \"09:00\",\n                                \"close\": \"20:00\"\n                            }, {\n                                \"day\": 5,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:00\"\n                            }],\n                        \"latitude\": 40.71447146,\n                        \"longitude\": -73.96551378,\n                        \"placeType\": \"branch\",\n                        \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\"]\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7e\",\n                        \"name\": \"R&Z Bank\",\n                        \"address\": {\n                            \"addressLine1\": \"45 Dakota Avenue\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"58347\",\n                            \"country\": \"United States\"\n                        },\n                        \"hours\": [{\n                                \"day\": 1,\n                                \"open\": \"09:30\",\n                                \"close\": \"17:00\"\n                            }, {\n                                \"day\": 2,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:30\"\n                            }, {\n                                \"day\": 3,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:00\"\n                            }, {\n                                \"day\": 4,\n                                \"open\": \"09:00\",\n                                \"close\": \"12:00\"\n                            }, {\n                                \"day\": 4,\n                                \"open\": \"14:00\",\n                                \"close\": \"20:00\"\n                            }, {\n                                \"day\": 5,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:00\"\n                            }],\n                        \"latitude\": 40.70484232,\n                        \"longitude\": -73.98285158,\n                        \"placeType\": \"branch\",\n                        \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\", \"Exclusive banking\"]\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7e\",\n                        \"name\": \"Eagle Freedom Bank\",\n                        \"latitude\": 40.6945173,\n                        \"longitude\": -73.99353683,\n                        \"placeType\": \"branch\"\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af234129\",\n                        \"name\": \"Paddy's Pub Bank\",\n                        \"address\": {\n                            \"addressLine1\": \"352 Wolf Cola Drive\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"29230\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.71000372,\n                        \"longitude\": -73.99430931,\n                        \"placeType\": \"atm\"\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af234128\",\n                        \"name\": \"Money Bank ATM\",\n                        \"address\": {\n                            \"addressLine1\": \"927 Coldrew Avenue\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"29642\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.73971668,\n                        \"longitude\": -73.99168108,\n                        \"placeType\": \"atm\"\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af234127\",\n                        \"name\": \"Community Financial ATM\",\n                        \"address\": {\n                            \"addressLine1\": \"236 Eagles Nest Street\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"39124\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.71483003,\n                        \"longitude\": -74.01252754,\n                        \"placeType\": \"atm\"\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af234126\",\n                        \"name\": \"SanFran United ATM\",\n                        \"latitude\": 40.73028327,\n                        \"longitude\": -74.00176048\n                    }, {\n                        \"id\": \"a956dbc7-a84d-46fe-91c3-bc40561ffdee\",\n                        \"name\": \"Forest Associated Trust\",\n                        \"address\": {\n                            \"addressLine1\": \"137 Paper Way\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"10278\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.73555143,\n                        \"longitude\": -73.97918701,\n                        \"placeType\": \"branch\",\n                        \"services\": [\"Cash withdrawals\", \"Safe deposit\", \"Exclusive banking\"]\n                    }, {\n                        \"id\": \"d6cdb083-ea55-4760-9ca7-10b1ce0792fd\",\n                        \"name\": \"Millenial Bank United\",\n                        \"address\": {\n                            \"addressLine1\": \"26 Federal Plaza\",\n                            \"postalCode\": \"10278\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.74250997,\n                        \"longitude\": -73.99698414,\n                        \"placeType\": \"branch\"\n                    }, {\n                        \"id\": \"40c154d3-344b-48c9-966d-23aaf7369c1f\",\n                        \"name\": \"Great North Bank\",\n                        \"address\": {\n                            \"addressLine1\": \"135 W 3rd St\",\n                            \"postalCode\": \"10012\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.73947942,\n                        \"longitude\": -73.97421453,\n                        \"placeType\": \"branch\",\n                        \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\"]\n                    }, {\n                        \"id\": \"82cd9c3b-2c91-4631-9b25-71281179fa0d\",\n                        \"name\": \"Great Valley Financial\",\n                        \"address\": {\n                            \"addressLine1\": \"89 Chrysie St\",\n                            \"addressLine2\": \"p.o. box 213\",\n                            \"postalCode\": \"10002\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.71392381,\n                        \"longitude\": -74.00345162,\n                        \"placeType\": \"branch\",\n                        \"services\": [\"Cash withdrawals\", \"Safe deposit\", \"Exclusive banking\"]\n                    }, {\n                        \"id\": \"0edb7a6e-8969-493e-9787-90fe967843ce\",\n                        \"name\": \"Safeway Banking\",\n                        \"address\": {\n                            \"addressLine1\": \"284 Government Drive\",\n                            \"addressLine2\": \"New York City\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.73626683,\n                        \"longitude\": -74.00819778,\n                        \"placeType\": \"branch\",\n                        \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\"]\n                    }]\n            },\n        ]\n    }]);\nconst PlacesHttpServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/client-api/v2/places\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7a\",\n                        \"name\": \"Backbase Financial\",\n                        \"address\": {\n                            \"addressLine1\": \"737 Meadowbrook Boulevard\",\n                            \"postalCode\": \"20005\",\n                            \"country\": \"United States\"\n                        },\n                        \"hours\": [{\n                                \"day\": 1,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:00\"\n                            }, {\n                                \"day\": 2,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:00\"\n                            }, {\n                                \"day\": 3,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:30\"\n                            }, {\n                                \"day\": 4,\n                                \"open\": \"09:00\",\n                                \"close\": \"20:00\"\n                            }, {\n                                \"day\": 5,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:00\"\n                            }],\n                        \"latitude\": 40.70162374,\n                        \"longitude\": -74.01232503,\n                        \"placeType\": \"branch\",\n                        \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\", \"Exclusive banking\"]\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7b\",\n                        \"name\": \"Bank of Nebraska\",\n                        \"address\": {\n                            \"addressLine1\": \"623 Live Oak Lane\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"18254\",\n                            \"country\": \"United States\"\n                        },\n                        \"hours\": [{\n                                \"day\": 1,\n                                \"open\": \"09:30\",\n                                \"close\": \"13:00\"\n                            }, {\n                                \"day\": 1,\n                                \"open\": \"14:00\",\n                                \"close\": \"17:00\"\n                            }, {\n                                \"day\": 2,\n                                \"open\": \"09:00\",\n                                \"close\": \"13:30\"\n                            }, {\n                                \"day\": 2,\n                                \"open\": \"14:30\",\n                                \"close\": \"17:30\"\n                            }, {\n                                \"day\": 3,\n                                \"open\": \"09:00\",\n                                \"close\": \"12:00\"\n                            }, {\n                                \"day\": 3,\n                                \"open\": \"13:00\",\n                                \"close\": \"15:00\"\n                            }, {\n                                \"day\": 4,\n                                \"open\": \"09:00\",\n                                \"close\": \"15:00\"\n                            }, {\n                                \"day\": 4,\n                                \"open\": \"16:00\",\n                                \"close\": \"20:00\"\n                            }, {\n                                \"day\": 5,\n                                \"open\": \"09:00\",\n                                \"close\": \"15:00\"\n                            }, {\n                                \"day\": 5,\n                                \"open\": \"16:00\",\n                                \"close\": \"18:00\"\n                            }, {\n                                \"day\": 6,\n                                \"open\": \"10:00\",\n                                \"close\": \"12:00\"\n                            }, {\n                                \"day\": 6,\n                                \"open\": \"12:30\",\n                                \"close\": \"14:00\"\n                            }, {\n                                \"day\": 7,\n                                \"open\": \"10:00\",\n                                \"close\": \"12:00\"\n                            }, {\n                                \"day\": 7,\n                                \"open\": \"12:30\",\n                                \"close\": \"14:00\"\n                            }],\n                        \"latitude\": 40.7112536,\n                        \"longitude\": -73.99589751,\n                        \"placeType\": \"branch\",\n                        \"services\": [\"Cash withdrawals\"]\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af234123\",\n                        \"name\": \"Backbase ATM\",\n                        \"address\": {\n                            \"addressLine1\": \"192 Walnut Drive\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"29874\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.72257311,\n                        \"longitude\": -74.00628302,\n                        \"placeType\": \"atm\",\n                        \"services\": [\"Cash withdrawals\"]\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af234121\",\n                        \"name\": \"First Financial ATM\",\n                        \"address\": {\n                            \"addressLine1\": \"88 Dogwood street\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"10087\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.72901266,\n                        \"longitude\": -73.97744391,\n                        \"placeType\": \"atm\"\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7c\",\n                        \"name\": \"Fells Wargo Bank\",\n                        \"address\": {\n                            \"addressLine1\": \"504 Park Avenue\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"03331\",\n                            \"country\": \"United States\"\n                        },\n                        \"hours\": [{\n                                \"day\": 1,\n                                \"open\": \"09:30\",\n                                \"close\": \"17:00\"\n                            }, {\n                                \"day\": 2,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:30\"\n                            }, {\n                                \"day\": 3,\n                                \"open\": \"09:00\",\n                                \"close\": \"14:00\"\n                            }, {\n                                \"day\": 4,\n                                \"open\": \"09:00\",\n                                \"close\": \"20:00\"\n                            }, {\n                                \"day\": 5,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:00\"\n                            }],\n                        \"latitude\": 40.72345355,\n                        \"longitude\": -73.99240494,\n                        \"placeType\": \"branch\",\n                        \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Exclusive banking\"]\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7d\",\n                        \"name\": \"First State Bank\",\n                        \"address\": {\n                            \"addressLine1\": \"35 Ave North\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"31118\",\n                            \"country\": \"United States\"\n                        },\n                        \"hours\": [{\n                                \"day\": 1,\n                                \"open\": \"09:30\",\n                                \"close\": \"17:00\"\n                            }, {\n                                \"day\": 2,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:30\"\n                            }, {\n                                \"day\": 3,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:00\"\n                            }, {\n                                \"day\": 4,\n                                \"open\": \"09:00\",\n                                \"close\": \"20:00\"\n                            }, {\n                                \"day\": 5,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:00\"\n                            }],\n                        \"latitude\": 40.71447146,\n                        \"longitude\": -73.96551378,\n                        \"placeType\": \"branch\",\n                        \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\"]\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7e\",\n                        \"name\": \"R&Z Bank\",\n                        \"address\": {\n                            \"addressLine1\": \"45 Dakota Avenue\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"58347\",\n                            \"country\": \"United States\"\n                        },\n                        \"hours\": [{\n                                \"day\": 1,\n                                \"open\": \"09:30\",\n                                \"close\": \"17:00\"\n                            }, {\n                                \"day\": 2,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:30\"\n                            }, {\n                                \"day\": 3,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:00\"\n                            }, {\n                                \"day\": 4,\n                                \"open\": \"09:00\",\n                                \"close\": \"12:00\"\n                            }, {\n                                \"day\": 4,\n                                \"open\": \"14:00\",\n                                \"close\": \"20:00\"\n                            }, {\n                                \"day\": 5,\n                                \"open\": \"09:00\",\n                                \"close\": \"17:00\"\n                            }],\n                        \"latitude\": 40.70484232,\n                        \"longitude\": -73.98285158,\n                        \"placeType\": \"branch\",\n                        \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\", \"Exclusive banking\"]\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af217a7e\",\n                        \"name\": \"Eagle Freedom Bank\",\n                        \"latitude\": 40.6945173,\n                        \"longitude\": -73.99353683,\n                        \"placeType\": \"branch\"\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af234129\",\n                        \"name\": \"Paddy's Pub Bank\",\n                        \"address\": {\n                            \"addressLine1\": \"352 Wolf Cola Drive\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"29230\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.71000372,\n                        \"longitude\": -73.99430931,\n                        \"placeType\": \"atm\"\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af234128\",\n                        \"name\": \"Money Bank ATM\",\n                        \"address\": {\n                            \"addressLine1\": \"927 Coldrew Avenue\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"29642\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.73971668,\n                        \"longitude\": -73.99168108,\n                        \"placeType\": \"atm\"\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af234127\",\n                        \"name\": \"Community Financial ATM\",\n                        \"address\": {\n                            \"addressLine1\": \"236 Eagles Nest Street\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"39124\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.71483003,\n                        \"longitude\": -74.01252754,\n                        \"placeType\": \"atm\"\n                    }, {\n                        \"id\": \"32c91a0b-199e-4275-bbe9-7097af234126\",\n                        \"name\": \"SanFran United ATM\",\n                        \"latitude\": 40.73028327,\n                        \"longitude\": -74.00176048\n                    }, {\n                        \"id\": \"a956dbc7-a84d-46fe-91c3-bc40561ffdee\",\n                        \"name\": \"Forest Associated Trust\",\n                        \"address\": {\n                            \"addressLine1\": \"137 Paper Way\",\n                            \"addressLine2\": \"New York City\",\n                            \"postalCode\": \"10278\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.73555143,\n                        \"longitude\": -73.97918701,\n                        \"placeType\": \"branch\",\n                        \"services\": [\"Cash withdrawals\", \"Safe deposit\", \"Exclusive banking\"]\n                    }, {\n                        \"id\": \"d6cdb083-ea55-4760-9ca7-10b1ce0792fd\",\n                        \"name\": \"Millenial Bank United\",\n                        \"address\": {\n                            \"addressLine1\": \"26 Federal Plaza\",\n                            \"postalCode\": \"10278\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.74250997,\n                        \"longitude\": -73.99698414,\n                        \"placeType\": \"branch\"\n                    }, {\n                        \"id\": \"40c154d3-344b-48c9-966d-23aaf7369c1f\",\n                        \"name\": \"Great North Bank\",\n                        \"address\": {\n                            \"addressLine1\": \"135 W 3rd St\",\n                            \"postalCode\": \"10012\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.73947942,\n                        \"longitude\": -73.97421453,\n                        \"placeType\": \"branch\",\n                        \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\"]\n                    }, {\n                        \"id\": \"82cd9c3b-2c91-4631-9b25-71281179fa0d\",\n                        \"name\": \"Great Valley Financial\",\n                        \"address\": {\n                            \"addressLine1\": \"89 Chrysie St\",\n                            \"addressLine2\": \"p.o. box 213\",\n                            \"postalCode\": \"10002\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.71392381,\n                        \"longitude\": -74.00345162,\n                        \"placeType\": \"branch\",\n                        \"services\": [\"Cash withdrawals\", \"Safe deposit\", \"Exclusive banking\"]\n                    }, {\n                        \"id\": \"0edb7a6e-8969-493e-9787-90fe967843ce\",\n                        \"name\": \"Safeway Banking\",\n                        \"address\": {\n                            \"addressLine1\": \"284 Government Drive\",\n                            \"addressLine2\": \"New York City\",\n                            \"country\": \"United States\"\n                        },\n                        \"latitude\": 40.73626683,\n                        \"longitude\": -74.00819778,\n                        \"placeType\": \"branch\",\n                        \"services\": [\"Cash withdrawals\", \"Cash exchange\", \"Safe deposit\"]\n                    }]\n            },\n        ]\n    },\n]);\n\nexport { COLLECTION_FORMATS, CONFIG_TOKEN, PLACES_BASE_PATH, PlacesApiModule, PlacesConfiguration, PlacesHttpService, PlacesHttpServiceGetPlacesMocksProvider, PlacesHttpServiceMocksProvider };\n"]},"metadata":{},"sourceType":"module"}