{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Self, Input, ContentChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, merge } from 'rxjs';\nimport { tap, takeUntil } from 'rxjs/operators';\n\nclass InputRangeMinDirective {\n  constructor(control) {\n    this.control = control;\n  }\n\n  ngOnChanges({\n    bbInputRangeMin\n  }) {\n    const c = this.control;\n\n    if (!c.control) {\n      return;\n    }\n\n    if (!bbInputRangeMin.firstChange) {\n      c.control.clearValidators();\n    }\n\n    if (typeof this.bbInputRangeMin === 'number') {\n      c.control.setValidators(Validators.min(this.bbInputRangeMin));\n    }\n\n    c.control.updateValueAndValidity();\n  }\n\n}\n\nInputRangeMinDirective.ɵfac = function InputRangeMinDirective_Factory(t) {\n  return new (t || InputRangeMinDirective)(i0.ɵɵdirectiveInject(i1.NgControl, 2));\n};\n\nInputRangeMinDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: InputRangeMinDirective,\n  selectors: [[\"bb-input-number-ui\", \"bbInputRangeMin\", \"\"]],\n  inputs: {\n    bbInputRangeMin: \"bbInputRangeMin\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputRangeMinDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'bb-input-number-ui[bbInputRangeMin]'\n    }]\n  }], function () {\n    return [{\n      type: i1.NgControl,\n      decorators: [{\n        type: Self\n      }]\n    }];\n  }, {\n    bbInputRangeMin: [{\n      type: Input\n    }]\n  });\n})();\n\nclass InputRangeMaxDirective {\n  constructor(control) {\n    this.control = control;\n  }\n\n  ngOnChanges({\n    bbInputRangeMax\n  }) {\n    const c = this.control;\n\n    if (!c.control) {\n      return;\n    }\n\n    if (!bbInputRangeMax.firstChange) {\n      c.control.clearValidators();\n    }\n\n    if (typeof this.bbInputRangeMax === 'number') {\n      c.control.setValidators(Validators.max(this.bbInputRangeMax));\n    }\n\n    c.control.updateValueAndValidity();\n  }\n\n}\n\nInputRangeMaxDirective.ɵfac = function InputRangeMaxDirective_Factory(t) {\n  return new (t || InputRangeMaxDirective)(i0.ɵɵdirectiveInject(i1.NgControl, 2));\n};\n\nInputRangeMaxDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: InputRangeMaxDirective,\n  selectors: [[\"bb-input-number-ui\", \"bbInputRangeMax\", \"\"]],\n  inputs: {\n    bbInputRangeMax: \"bbInputRangeMax\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputRangeMaxDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'bb-input-number-ui[bbInputRangeMax]'\n    }]\n  }], function () {\n    return [{\n      type: i1.NgControl,\n      decorators: [{\n        type: Self\n      }]\n    }];\n  }, {\n    bbInputRangeMax: [{\n      type: Input\n    }]\n  });\n})();\n\nclass InputRangeDirective {\n  constructor() {\n    this.destroy$$ = new Subject();\n  }\n\n  ngAfterViewInit() {\n    const cMin = this.min && this.min.control && this.min.control.control;\n    const cMax = this.max && this.max.control && this.max.control.control;\n\n    if (!(cMin && cMax)) {\n      return;\n    }\n\n    merge(cMin.valueChanges.pipe(tap(min => {\n      const max = cMax.value;\n\n      if (typeof max !== 'number' || min > max) {\n        cMax.patchValue(min, {\n          emitEvent: false\n        });\n      }\n    })), cMax.valueChanges.pipe(tap(max => {\n      const min = cMin.value;\n      const areNumbers = typeof min === 'number' && typeof max === 'number';\n\n      if (areNumbers && max < min) {\n        cMin.patchValue(max, {\n          emitEvent: false\n        });\n      }\n    }))).pipe(takeUntil(this.destroy$$)).subscribe();\n  }\n\n  ngOnDestroy() {\n    if (this.destroy$$) {\n      this.destroy$$.next();\n      this.destroy$$.complete();\n    }\n  }\n\n}\n\nInputRangeDirective.ɵfac = function InputRangeDirective_Factory(t) {\n  return new (t || InputRangeDirective)();\n};\n\nInputRangeDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: InputRangeDirective,\n  selectors: [[\"\", \"bbInputRange\", \"\"]],\n  contentQueries: function InputRangeDirective_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, InputRangeMinDirective, 7);\n      i0.ɵɵcontentQuery(dirIndex, InputRangeMaxDirective, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.min = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.max = _t.first);\n    }\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputRangeDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[bbInputRange]'\n    }]\n  }], null, {\n    min: [{\n      type: ContentChild,\n      args: [InputRangeMinDirective, {\n        static: true\n      }]\n    }],\n    max: [{\n      type: ContentChild,\n      args: [InputRangeMaxDirective, {\n        static: true\n      }]\n    }]\n  });\n})();\n\nclass InputRangeModule {}\n\nInputRangeModule.ɵfac = function InputRangeModule_Factory(t) {\n  return new (t || InputRangeModule)();\n};\n\nInputRangeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: InputRangeModule\n});\nInputRangeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputRangeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [InputRangeDirective, InputRangeMinDirective, InputRangeMaxDirective],\n      declarations: [InputRangeDirective, InputRangeMinDirective, InputRangeMaxDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { InputRangeDirective, InputRangeMaxDirective, InputRangeMinDirective, InputRangeModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-input-range.js"],"names":["i0","Directive","Self","Input","ContentChild","NgModule","CommonModule","i1","Validators","Subject","merge","tap","takeUntil","InputRangeMinDirective","constructor","control","ngOnChanges","bbInputRangeMin","c","firstChange","clearValidators","setValidators","min","updateValueAndValidity","ɵfac","NgControl","ɵdir","type","args","selector","decorators","InputRangeMaxDirective","bbInputRangeMax","max","InputRangeDirective","destroy$$","ngAfterViewInit","cMin","cMax","valueChanges","pipe","value","patchValue","emitEvent","areNumbers","subscribe","ngOnDestroy","next","complete","static","InputRangeModule","ɵmod","ɵinj","imports","exports","declarations"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,YAAjC,EAA+CC,QAA/C,QAA+D,eAA/D;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAO,KAAKC,EAAZ,MAAoB,gBAApB;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,MAA/B;AACA,SAASC,GAAT,EAAcC,SAAd,QAA+B,gBAA/B;;AAEA,MAAMC,sBAAN,CAA6B;AACzBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKA,OAAL,GAAeA,OAAf;AACH;;AACDC,EAAAA,WAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAsB;AAC7B,UAAMC,CAAC,GAAG,KAAKH,OAAf;;AACA,QAAI,CAACG,CAAC,CAACH,OAAP,EAAgB;AACZ;AACH;;AACD,QAAI,CAACE,eAAe,CAACE,WAArB,EAAkC;AAC9BD,MAAAA,CAAC,CAACH,OAAF,CAAUK,eAAV;AACH;;AACD,QAAI,OAAO,KAAKH,eAAZ,KAAgC,QAApC,EAA8C;AAC1CC,MAAAA,CAAC,CAACH,OAAF,CAAUM,aAAV,CAAwBb,UAAU,CAACc,GAAX,CAAe,KAAKL,eAApB,CAAxB;AACH;;AACDC,IAAAA,CAAC,CAACH,OAAF,CAAUQ,sBAAV;AACH;;AAhBwB;;AAkB7BV,sBAAsB,CAACW,IAAvB;AAAA,mBAAoHX,sBAApH,EAA0Gb,EAA1G,mBAA4JO,EAAE,CAACkB,SAA/J;AAAA;;AACAZ,sBAAsB,CAACa,IAAvB,kBAD0G1B,EAC1G;AAAA,QAAwGa,sBAAxG;AAAA;AAAA;AAAA;AAAA;AAAA,aAD0Gb,EAC1G;AAAA;;AACA;AAAA,qDAF0GA,EAE1G,mBAA4Fa,sBAA5F,EAAgI,CAAC;AACrHc,IAAAA,IAAI,EAAE1B,SAD+G;AAErH2B,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE;AADX,KAAD;AAF+G,GAAD,CAAhI,EAK4B,YAAY;AAAE,WAAO,CAAC;AAAEF,MAAAA,IAAI,EAAEpB,EAAE,CAACkB,SAAX;AAAsBK,MAAAA,UAAU,EAAE,CAAC;AACjEH,QAAAA,IAAI,EAAEzB;AAD2D,OAAD;AAAlC,KAAD,CAAP;AAElB,GAPxB,EAO0C;AAAEe,IAAAA,eAAe,EAAE,CAAC;AAC9CU,MAAAA,IAAI,EAAExB;AADwC,KAAD;AAAnB,GAP1C;AAAA;;AAUA,MAAM4B,sBAAN,CAA6B;AACzBjB,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKA,OAAL,GAAeA,OAAf;AACH;;AACDC,EAAAA,WAAW,CAAC;AAAEgB,IAAAA;AAAF,GAAD,EAAsB;AAC7B,UAAMd,CAAC,GAAG,KAAKH,OAAf;;AACA,QAAI,CAACG,CAAC,CAACH,OAAP,EAAgB;AACZ;AACH;;AACD,QAAI,CAACiB,eAAe,CAACb,WAArB,EAAkC;AAC9BD,MAAAA,CAAC,CAACH,OAAF,CAAUK,eAAV;AACH;;AACD,QAAI,OAAO,KAAKY,eAAZ,KAAgC,QAApC,EAA8C;AAC1Cd,MAAAA,CAAC,CAACH,OAAF,CAAUM,aAAV,CAAwBb,UAAU,CAACyB,GAAX,CAAe,KAAKD,eAApB,CAAxB;AACH;;AACDd,IAAAA,CAAC,CAACH,OAAF,CAAUQ,sBAAV;AACH;;AAhBwB;;AAkB7BQ,sBAAsB,CAACP,IAAvB;AAAA,mBAAoHO,sBAApH,EA9B0G/B,EA8B1G,mBAA4JO,EAAE,CAACkB,SAA/J;AAAA;;AACAM,sBAAsB,CAACL,IAAvB,kBA/B0G1B,EA+B1G;AAAA,QAAwG+B,sBAAxG;AAAA;AAAA;AAAA;AAAA;AAAA,aA/B0G/B,EA+B1G;AAAA;;AACA;AAAA,qDAhC0GA,EAgC1G,mBAA4F+B,sBAA5F,EAAgI,CAAC;AACrHJ,IAAAA,IAAI,EAAE1B,SAD+G;AAErH2B,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE;AADX,KAAD;AAF+G,GAAD,CAAhI,EAK4B,YAAY;AAAE,WAAO,CAAC;AAAEF,MAAAA,IAAI,EAAEpB,EAAE,CAACkB,SAAX;AAAsBK,MAAAA,UAAU,EAAE,CAAC;AACjEH,QAAAA,IAAI,EAAEzB;AAD2D,OAAD;AAAlC,KAAD,CAAP;AAElB,GAPxB,EAO0C;AAAE8B,IAAAA,eAAe,EAAE,CAAC;AAC9CL,MAAAA,IAAI,EAAExB;AADwC,KAAD;AAAnB,GAP1C;AAAA;;AAUA,MAAM+B,mBAAN,CAA0B;AACtBpB,EAAAA,WAAW,GAAG;AACV,SAAKqB,SAAL,GAAiB,IAAI1B,OAAJ,EAAjB;AACH;;AACD2B,EAAAA,eAAe,GAAG;AACd,UAAMC,IAAI,GAAG,KAAKf,GAAL,IAAY,KAAKA,GAAL,CAASP,OAArB,IAAgC,KAAKO,GAAL,CAASP,OAAT,CAAiBA,OAA9D;AACA,UAAMuB,IAAI,GAAG,KAAKL,GAAL,IAAY,KAAKA,GAAL,CAASlB,OAArB,IAAgC,KAAKkB,GAAL,CAASlB,OAAT,CAAiBA,OAA9D;;AACA,QAAI,EAAEsB,IAAI,IAAIC,IAAV,CAAJ,EAAqB;AACjB;AACH;;AACD5B,IAAAA,KAAK,CAAC2B,IAAI,CAACE,YAAL,CAAkBC,IAAlB,CAAuB7B,GAAG,CAAEW,GAAD,IAAS;AACtC,YAAMW,GAAG,GAAGK,IAAI,CAACG,KAAjB;;AACA,UAAI,OAAOR,GAAP,KAAe,QAAf,IAA2BX,GAAG,GAAGW,GAArC,EAA0C;AACtCK,QAAAA,IAAI,CAACI,UAAL,CAAgBpB,GAAhB,EAAqB;AAAEqB,UAAAA,SAAS,EAAE;AAAb,SAArB;AACH;AACJ,KAL+B,CAA1B,CAAD,EAKAL,IAAI,CAACC,YAAL,CAAkBC,IAAlB,CAAuB7B,GAAG,CAAEsB,GAAD,IAAS;AACrC,YAAMX,GAAG,GAAGe,IAAI,CAACI,KAAjB;AACA,YAAMG,UAAU,GAAG,OAAOtB,GAAP,KAAe,QAAf,IAA2B,OAAOW,GAAP,KAAe,QAA7D;;AACA,UAAIW,UAAU,IAAIX,GAAG,GAAGX,GAAxB,EAA6B;AACzBe,QAAAA,IAAI,CAACK,UAAL,CAAgBT,GAAhB,EAAqB;AAAEU,UAAAA,SAAS,EAAE;AAAb,SAArB;AACH;AACJ,KAN8B,CAA1B,CALA,CAAL,CAYKH,IAZL,CAYU5B,SAAS,CAAC,KAAKuB,SAAN,CAZnB,EAaKU,SAbL;AAcH;;AACDC,EAAAA,WAAW,GAAG;AACV,QAAI,KAAKX,SAAT,EAAoB;AAChB,WAAKA,SAAL,CAAeY,IAAf;AACA,WAAKZ,SAAL,CAAea,QAAf;AACH;AACJ;;AA9BqB;;AAgC1Bd,mBAAmB,CAACV,IAApB;AAAA,mBAAiHU,mBAAjH;AAAA;;AACAA,mBAAmB,CAACR,IAApB,kBA3E0G1B,EA2E1G;AAAA,QAAqGkC,mBAArG;AAAA;AAAA;AAAA;AA3E0GlC,MAAAA,EA2E1G,0BAA+Ma,sBAA/M;AA3E0Gb,MAAAA,EA2E1G,0BAAyT+B,sBAAzT;AAAA;;AAAA;AAAA;;AA3E0G/B,MAAAA,EA2E1G,qBA3E0GA,EA2E1G;AA3E0GA,MAAAA,EA2E1G,qBA3E0GA,EA2E1G;AAAA;AAAA;AAAA;;AACA;AAAA,qDA5E0GA,EA4E1G,mBAA4FkC,mBAA5F,EAA6H,CAAC;AAClHP,IAAAA,IAAI,EAAE1B,SAD4G;AAElH2B,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE;AADX,KAAD;AAF4G,GAAD,CAA7H,QAK4B;AAAEP,IAAAA,GAAG,EAAE,CAAC;AACpBK,MAAAA,IAAI,EAAEvB,YADc;AAEpBwB,MAAAA,IAAI,EAAE,CAACf,sBAAD,EAAyB;AAAEoC,QAAAA,MAAM,EAAE;AAAV,OAAzB;AAFc,KAAD,CAAP;AAGZhB,IAAAA,GAAG,EAAE,CAAC;AACNN,MAAAA,IAAI,EAAEvB,YADA;AAENwB,MAAAA,IAAI,EAAE,CAACG,sBAAD,EAAyB;AAAEkB,QAAAA,MAAM,EAAE;AAAV,OAAzB;AAFA,KAAD;AAHO,GAL5B;AAAA;;AAaA,MAAMC,gBAAN,CAAuB;;AAEvBA,gBAAgB,CAAC1B,IAAjB;AAAA,mBAA8G0B,gBAA9G;AAAA;;AACAA,gBAAgB,CAACC,IAAjB,kBA5F0GnD,EA4F1G;AAAA,QAA+GkD;AAA/G;AACAA,gBAAgB,CAACE,IAAjB,kBA7F0GpD,EA6F1G;AAAA,YAA2I,CAACM,YAAD,CAA3I;AAAA;;AACA;AAAA,qDA9F0GN,EA8F1G,mBAA4FkD,gBAA5F,EAA0H,CAAC;AAC/GvB,IAAAA,IAAI,EAAEtB,QADyG;AAE/GuB,IAAAA,IAAI,EAAE,CAAC;AACCyB,MAAAA,OAAO,EAAE,CAAC/C,YAAD,CADV;AAECgD,MAAAA,OAAO,EAAE,CAACpB,mBAAD,EAAsBrB,sBAAtB,EAA8CkB,sBAA9C,CAFV;AAGCwB,MAAAA,YAAY,EAAE,CAACrB,mBAAD,EAAsBrB,sBAAtB,EAA8CkB,sBAA9C;AAHf,KAAD;AAFyG,GAAD,CAA1H;AAAA;AASA;AACA;AACA;;;AAEA,SAASG,mBAAT,EAA8BH,sBAA9B,EAAsDlB,sBAAtD,EAA8EqC,gBAA9E","sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Self, Input, ContentChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, merge } from 'rxjs';\nimport { tap, takeUntil } from 'rxjs/operators';\n\nclass InputRangeMinDirective {\n    constructor(control) {\n        this.control = control;\n    }\n    ngOnChanges({ bbInputRangeMin }) {\n        const c = this.control;\n        if (!c.control) {\n            return;\n        }\n        if (!bbInputRangeMin.firstChange) {\n            c.control.clearValidators();\n        }\n        if (typeof this.bbInputRangeMin === 'number') {\n            c.control.setValidators(Validators.min(this.bbInputRangeMin));\n        }\n        c.control.updateValueAndValidity();\n    }\n}\nInputRangeMinDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputRangeMinDirective, deps: [{ token: i1.NgControl, self: true }], target: i0.ɵɵFactoryTarget.Directive });\nInputRangeMinDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.16\", type: InputRangeMinDirective, selector: \"bb-input-number-ui[bbInputRangeMin]\", inputs: { bbInputRangeMin: \"bbInputRangeMin\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputRangeMinDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'bb-input-number-ui[bbInputRangeMin]',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.NgControl, decorators: [{\n                    type: Self\n                }] }]; }, propDecorators: { bbInputRangeMin: [{\n                type: Input\n            }] } });\nclass InputRangeMaxDirective {\n    constructor(control) {\n        this.control = control;\n    }\n    ngOnChanges({ bbInputRangeMax }) {\n        const c = this.control;\n        if (!c.control) {\n            return;\n        }\n        if (!bbInputRangeMax.firstChange) {\n            c.control.clearValidators();\n        }\n        if (typeof this.bbInputRangeMax === 'number') {\n            c.control.setValidators(Validators.max(this.bbInputRangeMax));\n        }\n        c.control.updateValueAndValidity();\n    }\n}\nInputRangeMaxDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputRangeMaxDirective, deps: [{ token: i1.NgControl, self: true }], target: i0.ɵɵFactoryTarget.Directive });\nInputRangeMaxDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.16\", type: InputRangeMaxDirective, selector: \"bb-input-number-ui[bbInputRangeMax]\", inputs: { bbInputRangeMax: \"bbInputRangeMax\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputRangeMaxDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'bb-input-number-ui[bbInputRangeMax]',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.NgControl, decorators: [{\n                    type: Self\n                }] }]; }, propDecorators: { bbInputRangeMax: [{\n                type: Input\n            }] } });\nclass InputRangeDirective {\n    constructor() {\n        this.destroy$$ = new Subject();\n    }\n    ngAfterViewInit() {\n        const cMin = this.min && this.min.control && this.min.control.control;\n        const cMax = this.max && this.max.control && this.max.control.control;\n        if (!(cMin && cMax)) {\n            return;\n        }\n        merge(cMin.valueChanges.pipe(tap((min) => {\n            const max = cMax.value;\n            if (typeof max !== 'number' || min > max) {\n                cMax.patchValue(min, { emitEvent: false });\n            }\n        })), cMax.valueChanges.pipe(tap((max) => {\n            const min = cMin.value;\n            const areNumbers = typeof min === 'number' && typeof max === 'number';\n            if (areNumbers && max < min) {\n                cMin.patchValue(max, { emitEvent: false });\n            }\n        })))\n            .pipe(takeUntil(this.destroy$$))\n            .subscribe();\n    }\n    ngOnDestroy() {\n        if (this.destroy$$) {\n            this.destroy$$.next();\n            this.destroy$$.complete();\n        }\n    }\n}\nInputRangeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputRangeDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nInputRangeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.16\", type: InputRangeDirective, selector: \"[bbInputRange]\", queries: [{ propertyName: \"min\", first: true, predicate: InputRangeMinDirective, descendants: true, static: true }, { propertyName: \"max\", first: true, predicate: InputRangeMaxDirective, descendants: true, static: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputRangeDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[bbInputRange]',\n                }]\n        }], propDecorators: { min: [{\n                type: ContentChild,\n                args: [InputRangeMinDirective, { static: true }]\n            }], max: [{\n                type: ContentChild,\n                args: [InputRangeMaxDirective, { static: true }]\n            }] } });\n\nclass InputRangeModule {\n}\nInputRangeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputRangeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nInputRangeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputRangeModule, declarations: [InputRangeDirective, InputRangeMinDirective, InputRangeMaxDirective], imports: [CommonModule], exports: [InputRangeDirective, InputRangeMinDirective, InputRangeMaxDirective] });\nInputRangeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputRangeModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputRangeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    exports: [InputRangeDirective, InputRangeMinDirective, InputRangeMaxDirective],\n                    declarations: [InputRangeDirective, InputRangeMinDirective, InputRangeMaxDirective],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { InputRangeDirective, InputRangeMaxDirective, InputRangeMinDirective, InputRangeModule };\n"]},"metadata":{},"sourceType":"module"}