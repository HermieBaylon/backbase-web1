{"ast":null,"code":"import { HttpResponse, HttpHeaders, HttpErrorResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { toISOExtendedFormat } from '@backbase/notifications-common-ang';\nconst notification = {\n  createdOn: '2017-08-06T14:01:36Z',\n  id: '1234-5678-9022',\n  level: 'ALERT',\n  message: 'Your payment to A. Smith was rejected due to insufficient funds on your current account.',\n  origin: 'Transaction',\n  read: false,\n  title: 'Payment rejected'\n};\nconst DEFAULT_FREQUENCY = 20000;\nconst notificationReadRegexp = /\\/notifications\\/(.*)\\/read\\/?$/;\n\nfunction getGenerationFrequency(frequency) {\n  const freq = frequency && parseInt(frequency, 10);\n  return freq || DEFAULT_FREQUENCY;\n}\n\nfunction createNotificationsPage(notifications, options) {\n  const {\n    from,\n    size\n  } = options;\n  const start = from * size;\n  const end = start + size;\n  return notifications.slice(start, end);\n}\n\nconst quietNotificationsStrategy = {\n  STICKY_LIMIT: 1,\n  POPUPS_LIMIT: 1\n};\nconst noLimitsNotificationsStrategy = {\n  STICKY_LIMIT: Infinity,\n  POPUPS_LIMIT: Infinity\n};\nconst noNotificationsStrategy = {\n  STICKY_LIMIT: 0,\n  POPUPS_LIMIT: 0\n};\n\nclass NotificationsInterceptor {\n  constructor(ngZone) {\n    this.ngZone = ngZone;\n    this.areMocksEnabled = localStorage.getItem('enableMocks') === 'true';\n    this.isEmptyNotificationsEnabled = localStorage.getItem('noNotifications') === 'true';\n    this.isNoLimitsNotificationsEnabled = localStorage.getItem('noLimitsNotifications') === 'true';\n    this.liveNotificationFreq = localStorage.getItem('liveNotificationFreq');\n    this.mockStrategy = this.getMockStrategy();\n    this.readNotifications = {};\n    this.newNotifications = [];\n    this.popupsCount = 0;\n    this.notificationsStreamHandled = false;\n    this.notificationRequestUnreadIds = []; // from spec examples\n\n    if (this.mockStrategy && this.liveNotificationFreq) {\n      this.ngZone.runOutsideAngular(() => {\n        setInterval(() => {\n          this.newNotifications.unshift(Object.assign(Object.assign({}, notification), {\n            id: (345679 + this.newNotifications.length).toString(),\n            title: `New Notification ${this.newNotifications.length + 1}`,\n            createdOn: new Date().toISOString()\n          }));\n        }, getGenerationFrequency(this.liveNotificationFreq));\n      });\n    }\n  }\n\n  intercept(req, next) {\n    if (!this.mockStrategy) {\n      return next.handle(req);\n    }\n\n    if (req.url.endsWith('notifications/unread-count')) {\n      return this.handleUnreadCountRequest(req, next);\n    }\n\n    if (req.url.endsWith('notifications/read')) {\n      return this.handleReadAllNotificationRequest(req, next);\n    }\n\n    if (req.url.endsWith('read') && req.method === 'PUT') {\n      return this.handleReadNotificationRequest(req, next);\n    }\n\n    if (req.url.endsWith('notifications')) {\n      return this.handleNotificationsRequest(req, next);\n    }\n\n    if (req.url.endsWith('notifications/stream')) {\n      return this.handleNotificationsStreamRequest(req, next);\n    }\n\n    return next.handle(req);\n  }\n\n  handleUnreadCountRequest(req, next) {\n    if (this.mockStrategy === noNotificationsStrategy) {\n      return next.handle(req).pipe(map(event => {\n        if (event instanceof HttpResponse) {\n          return event.clone({\n            body: {\n              unread: 0\n            }\n          });\n        }\n\n        return event;\n      }));\n    }\n\n    return next.handle(req).pipe(map(event => {\n      if (event instanceof HttpResponse) {\n        return event.clone({\n          body: {\n            unread: this.newNotifications.length + event.body.unread + this.popupsCount - Object.keys(this.readNotifications).length\n          }\n        });\n      }\n\n      return event;\n    }));\n  }\n\n  handleNotificationsRequest(req, next) {\n    if (this.mockStrategy === noNotificationsStrategy) {\n      return next.handle(req).pipe(map(event => {\n        if (event instanceof HttpResponse) {\n          return event.clone({\n            body: []\n          });\n        }\n\n        return event;\n      }));\n    }\n\n    return next.handle(req).pipe(map(event => {\n      if (event instanceof HttpResponse) {\n        const from = Number(req.params.get('from'));\n        const size = Number(req.params.get('size'));\n        const toDate = req.params.get('toDate');\n\n        if (!this.notificationRequestUnreadIds.length) {\n          this.notificationRequestUnreadIds.push( //@ts-ignore\n          ...event.body.filter(item => !item.read).map(item => item.id));\n        }\n\n        let notifications = [...this.newNotifications, ...event.body];\n\n        if (toDate) {\n          notifications = notifications.filter(({\n            createdOn\n          }) => new Date(toISOExtendedFormat(createdOn)).getTime() <= new Date(toDate).getTime());\n        }\n\n        const notificationsPage = createNotificationsPage(notifications, {\n          from,\n          size\n        });\n        return event.clone({\n          body: notificationsPage.map(n => Object.assign(Object.assign({}, n), {\n            read: this.readNotifications[n.id] || n.read\n          })),\n          headers: new HttpHeaders({\n            'x-total-count': String(notifications.length),\n            'x-cursor': notificationsPage[notificationsPage.length - 1].id\n          })\n        });\n      }\n\n      return event;\n    }));\n  }\n\n  handleReadAllNotificationRequest(req, next) {\n    this.newNotifications.forEach(item => this.readNotifications[item.id] = true);\n    this.notificationRequestUnreadIds.forEach(id => this.readNotifications[id] = true);\n    return next.handle(req);\n  }\n\n  handleReadNotificationRequest(req, next) {\n    const [, notificationId] = notificationReadRegexp.exec(req.url);\n\n    if (notificationId === '1234-5678-9022') {\n      return throwError(new HttpErrorResponse({\n        status: 500,\n        statusText: ''\n      }));\n    }\n\n    this.readNotifications[notificationId] = true;\n    return next.handle(req);\n  }\n\n  handleNotificationsStreamRequest(req, next) {\n    return next.handle(req).pipe(map(event => {\n      if (event instanceof HttpResponse) {\n        const popupsLimit = this.mockStrategy === quietNotificationsStrategy && !this.notificationsStreamHandled ? 0 : // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.mockStrategy.POPUPS_LIMIT;\n        const popups = event.body.filter(item => !item.expiresOn && !this.readNotifications[item.id]).slice(0, popupsLimit).map(item => Object.assign({}, item));\n        const sticky = event.body.filter(item => !!item.expiresOn) // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        .slice(0, this.mockStrategy.STICKY_LIMIT).filter(item => !this.readNotifications[item.id]);\n        const randomPopups = popups.slice(0, Math.ceil(Math.random() * popups.length));\n        this.popupsCount = event.body.length;\n        this.notificationsStreamHandled = true;\n        return event.clone({\n          body: [...sticky, ...randomPopups]\n        });\n      }\n\n      return event;\n    }));\n  }\n\n  getMockStrategy() {\n    if (!this.areMocksEnabled) return undefined;\n    if (this.isEmptyNotificationsEnabled) return noNotificationsStrategy;\n    if (this.isNoLimitsNotificationsEnabled) return noLimitsNotificationsStrategy;\n    return quietNotificationsStrategy;\n  }\n\n}\n\nNotificationsInterceptor.ɵfac = function NotificationsInterceptor_Factory(t) {\n  return new (t || NotificationsInterceptor)(i0.ɵɵinject(i0.NgZone));\n};\n\nNotificationsInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NotificationsInterceptor,\n  factory: NotificationsInterceptor.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NotificationsInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nconst NotificationsMocksProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: NotificationsInterceptor,\n  multi: true\n};\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NotificationsInterceptor, NotificationsMocksProvider };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/notifications-mocks-provider-ang/fesm2015/backbase-notifications-mocks-provider-ang.js"],"names":["HttpResponse","HttpHeaders","HttpErrorResponse","HTTP_INTERCEPTORS","i0","Injectable","throwError","map","toISOExtendedFormat","notification","createdOn","id","level","message","origin","read","title","DEFAULT_FREQUENCY","notificationReadRegexp","getGenerationFrequency","frequency","freq","parseInt","createNotificationsPage","notifications","options","from","size","start","end","slice","quietNotificationsStrategy","STICKY_LIMIT","POPUPS_LIMIT","noLimitsNotificationsStrategy","Infinity","noNotificationsStrategy","NotificationsInterceptor","constructor","ngZone","areMocksEnabled","localStorage","getItem","isEmptyNotificationsEnabled","isNoLimitsNotificationsEnabled","liveNotificationFreq","mockStrategy","getMockStrategy","readNotifications","newNotifications","popupsCount","notificationsStreamHandled","notificationRequestUnreadIds","runOutsideAngular","setInterval","unshift","Object","assign","length","toString","Date","toISOString","intercept","req","next","handle","url","endsWith","handleUnreadCountRequest","handleReadAllNotificationRequest","method","handleReadNotificationRequest","handleNotificationsRequest","handleNotificationsStreamRequest","pipe","event","clone","body","unread","keys","Number","params","get","toDate","push","filter","item","getTime","notificationsPage","n","headers","String","forEach","notificationId","exec","status","statusText","popupsLimit","popups","expiresOn","sticky","randomPopups","Math","ceil","random","undefined","ɵfac","NgZone","ɵprov","type","NotificationsMocksProvider","provide","useClass","multi"],"mappings":"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","sourcesContent":["import { HttpResponse, HttpHeaders, HttpErrorResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { toISOExtendedFormat } from '@backbase/notifications-common-ang';\n\nconst notification = {\n    createdOn: '2017-08-06T14:01:36Z',\n    id: '1234-5678-9022',\n    level: 'ALERT',\n    message: 'Your payment to A. Smith was rejected due to insufficient funds on your current account.',\n    origin: 'Transaction',\n    read: false,\n    title: 'Payment rejected',\n};\n\nconst DEFAULT_FREQUENCY = 20000;\nconst notificationReadRegexp = /\\/notifications\\/(.*)\\/read\\/?$/;\nfunction getGenerationFrequency(frequency) {\n    const freq = frequency && parseInt(frequency, 10);\n    return freq || DEFAULT_FREQUENCY;\n}\nfunction createNotificationsPage(notifications, options) {\n    const { from, size } = options;\n    const start = from * size;\n    const end = start + size;\n    return notifications.slice(start, end);\n}\nconst quietNotificationsStrategy = {\n    STICKY_LIMIT: 1,\n    POPUPS_LIMIT: 1,\n};\nconst noLimitsNotificationsStrategy = {\n    STICKY_LIMIT: Infinity,\n    POPUPS_LIMIT: Infinity,\n};\nconst noNotificationsStrategy = {\n    STICKY_LIMIT: 0,\n    POPUPS_LIMIT: 0,\n};\nclass NotificationsInterceptor {\n    constructor(ngZone) {\n        this.ngZone = ngZone;\n        this.areMocksEnabled = localStorage.getItem('enableMocks') === 'true';\n        this.isEmptyNotificationsEnabled = localStorage.getItem('noNotifications') === 'true';\n        this.isNoLimitsNotificationsEnabled = localStorage.getItem('noLimitsNotifications') === 'true';\n        this.liveNotificationFreq = localStorage.getItem('liveNotificationFreq');\n        this.mockStrategy = this.getMockStrategy();\n        this.readNotifications = {};\n        this.newNotifications = [];\n        this.popupsCount = 0;\n        this.notificationsStreamHandled = false;\n        this.notificationRequestUnreadIds = []; // from spec examples\n        if (this.mockStrategy && this.liveNotificationFreq) {\n            this.ngZone.runOutsideAngular(() => {\n                setInterval(() => {\n                    this.newNotifications.unshift(Object.assign(Object.assign({}, notification), { id: (345679 + this.newNotifications.length).toString(), title: `New Notification ${this.newNotifications.length + 1}`, createdOn: new Date().toISOString() }));\n                }, getGenerationFrequency(this.liveNotificationFreq));\n            });\n        }\n    }\n    intercept(req, next) {\n        if (!this.mockStrategy) {\n            return next.handle(req);\n        }\n        if (req.url.endsWith('notifications/unread-count')) {\n            return this.handleUnreadCountRequest(req, next);\n        }\n        if (req.url.endsWith('notifications/read')) {\n            return this.handleReadAllNotificationRequest(req, next);\n        }\n        if (req.url.endsWith('read') && req.method === 'PUT') {\n            return this.handleReadNotificationRequest(req, next);\n        }\n        if (req.url.endsWith('notifications')) {\n            return this.handleNotificationsRequest(req, next);\n        }\n        if (req.url.endsWith('notifications/stream')) {\n            return this.handleNotificationsStreamRequest(req, next);\n        }\n        return next.handle(req);\n    }\n    handleUnreadCountRequest(req, next) {\n        if (this.mockStrategy === noNotificationsStrategy) {\n            return next.handle(req).pipe(map((event) => {\n                if (event instanceof HttpResponse) {\n                    return event.clone({\n                        body: {\n                            unread: 0,\n                        },\n                    });\n                }\n                return event;\n            }));\n        }\n        return next.handle(req).pipe(map((event) => {\n            if (event instanceof HttpResponse) {\n                return event.clone({\n                    body: {\n                        unread: this.newNotifications.length +\n                            event.body.unread +\n                            this.popupsCount -\n                            Object.keys(this.readNotifications).length,\n                    },\n                });\n            }\n            return event;\n        }));\n    }\n    handleNotificationsRequest(req, next) {\n        if (this.mockStrategy === noNotificationsStrategy) {\n            return next.handle(req).pipe(map((event) => {\n                if (event instanceof HttpResponse) {\n                    return event.clone({\n                        body: [],\n                    });\n                }\n                return event;\n            }));\n        }\n        return next.handle(req).pipe(map((event) => {\n            if (event instanceof HttpResponse) {\n                const from = Number(req.params.get('from'));\n                const size = Number(req.params.get('size'));\n                const toDate = req.params.get('toDate');\n                if (!this.notificationRequestUnreadIds.length) {\n                    this.notificationRequestUnreadIds.push(\n                    //@ts-ignore\n                    ...event.body.filter((item) => !item.read).map((item) => item.id));\n                }\n                let notifications = [...this.newNotifications, ...event.body];\n                if (toDate) {\n                    notifications = notifications.filter(({ createdOn }) => new Date(toISOExtendedFormat(createdOn)).getTime() <= new Date(toDate).getTime());\n                }\n                const notificationsPage = createNotificationsPage(notifications, { from, size });\n                return event.clone({\n                    body: notificationsPage.map((n) => (Object.assign(Object.assign({}, n), { read: this.readNotifications[n.id] || n.read }))),\n                    headers: new HttpHeaders({\n                        'x-total-count': String(notifications.length),\n                        'x-cursor': notificationsPage[notificationsPage.length - 1].id,\n                    }),\n                });\n            }\n            return event;\n        }));\n    }\n    handleReadAllNotificationRequest(req, next) {\n        this.newNotifications.forEach(item => (this.readNotifications[item.id] = true));\n        this.notificationRequestUnreadIds.forEach(id => (this.readNotifications[id] = true));\n        return next.handle(req);\n    }\n    handleReadNotificationRequest(req, next) {\n        const [, notificationId] = notificationReadRegexp.exec(req.url);\n        if (notificationId === '1234-5678-9022') {\n            return throwError(new HttpErrorResponse({\n                status: 500,\n                statusText: '',\n            }));\n        }\n        this.readNotifications[notificationId] = true;\n        return next.handle(req);\n    }\n    handleNotificationsStreamRequest(req, next) {\n        return next.handle(req).pipe(map((event) => {\n            if (event instanceof HttpResponse) {\n                const popupsLimit = this.mockStrategy === quietNotificationsStrategy && !this.notificationsStreamHandled\n                    ? 0\n                    : // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        this.mockStrategy.POPUPS_LIMIT;\n                const popups = event.body\n                    .filter((item) => !item.expiresOn && !this.readNotifications[item.id])\n                    .slice(0, popupsLimit)\n                    .map((item) => (Object.assign({}, item)));\n                const sticky = event.body\n                    .filter((item) => !!item.expiresOn)\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    .slice(0, this.mockStrategy.STICKY_LIMIT)\n                    .filter((item) => !this.readNotifications[item.id]);\n                const randomPopups = popups.slice(0, Math.ceil(Math.random() * popups.length));\n                this.popupsCount = event.body.length;\n                this.notificationsStreamHandled = true;\n                return event.clone({\n                    body: [...sticky, ...randomPopups],\n                });\n            }\n            return event;\n        }));\n    }\n    getMockStrategy() {\n        if (!this.areMocksEnabled)\n            return undefined;\n        if (this.isEmptyNotificationsEnabled)\n            return noNotificationsStrategy;\n        if (this.isNoLimitsNotificationsEnabled)\n            return noLimitsNotificationsStrategy;\n        return quietNotificationsStrategy;\n    }\n}\nNotificationsInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: NotificationsInterceptor, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nNotificationsInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: NotificationsInterceptor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: NotificationsInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\nconst NotificationsMocksProvider = {\n    provide: HTTP_INTERCEPTORS,\n    useClass: NotificationsInterceptor,\n    multi: true,\n};\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NotificationsInterceptor, NotificationsMocksProvider };\n"]},"metadata":{},"sourceType":"module"}