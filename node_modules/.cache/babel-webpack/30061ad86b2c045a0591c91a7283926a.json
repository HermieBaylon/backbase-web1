{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i2 from '@backbase/foundation-ang/data-http';\nimport { createMocks } from '@backbase/foundation-ang/data-http';\nconst AccountStatus = {\n  Active: 'Active',\n  InProcess: 'InProcess',\n  PendingActivation: 'PendingActivation',\n  FailedVerification: 'FailedVerification',\n  RejectedByExternalBank: 'RejectedByExternalBank',\n  DisabledForExcessiveReturns: 'DisabledForExcessiveReturns',\n  DisabledForFraud: 'DisabledForFraud'\n};\nconst AccountType = {\n  Checking: 'Checking',\n  Savings: 'Savings'\n};\nconst PAYMENT_ORDER_A2A_BASE_PATH = new InjectionToken('PAYMENT_ORDER_A2A_BASE_PATH');\nconst COLLECTION_FORMATS = {\n  'csv': ',',\n  'tsv': '   ',\n  'ssv': ' ',\n  'pipes': '|'\n};\n\nclass PaymentOrderA2aConfiguration {\n  constructor(configurationParameters = {}) {\n    this.apiKeys = configurationParameters.apiKeys;\n    this.username = configurationParameters.username;\n    this.password = configurationParameters.password;\n    this.accessToken = configurationParameters.accessToken;\n    this.basePath = configurationParameters.basePath;\n    this.withCredentials = configurationParameters.withCredentials;\n    this.encoder = configurationParameters.encoder;\n\n    if (configurationParameters.credentials) {\n      this.credentials = configurationParameters.credentials;\n    } else {\n      this.credentials = {};\n    }\n  }\n\n  selectHeaderContentType(contentTypes) {\n    if (contentTypes.length === 0) {\n      return undefined;\n    }\n\n    const type = contentTypes.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return contentTypes[0];\n    }\n\n    return type;\n  }\n\n  selectHeaderAccept(accepts) {\n    if (accepts.length === 0) {\n      return undefined;\n    }\n\n    const type = accepts.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return accepts[0];\n    }\n\n    return type;\n  }\n\n  isJsonMime(mime) {\n    const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n\n  lookupCredential(key) {\n    const value = this.credentials[key];\n    return typeof value === 'function' ? value() : value;\n  }\n\n}\n\nconst CONFIG_TOKEN = new InjectionToken('api-data-module PaymentOrderA2aConfiguration');\n\nclass PaymentOrderA2aApiModule {\n  constructor(parentModule, http, dataModulesManager, config) {\n    if (parentModule) {\n      throw new Error('PaymentOrderA2aApiModule is already loaded. Import in your base AppModule only.');\n    }\n\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' + 'See also https://github.com/angular/angular/issues/20575');\n    }\n\n    if (dataModulesManager) {\n      dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n        apiRoot: '',\n        servicePath: config.basePath || '',\n        headers: {}\n      });\n    }\n  }\n\n  static forRoot(configurationFactory) {\n    return {\n      ngModule: PaymentOrderA2aApiModule,\n      providers: [{\n        provide: PaymentOrderA2aConfiguration,\n        useFactory: configurationFactory\n      }]\n    };\n  }\n\n}\n\nPaymentOrderA2aApiModule.ɵfac = function PaymentOrderA2aApiModule_Factory(t) {\n  return new (t || PaymentOrderA2aApiModule)(i0.ɵɵinject(PaymentOrderA2aApiModule, 12), i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DataModulesManager, 8), i0.ɵɵinject(PaymentOrderA2aConfiguration));\n};\n\nPaymentOrderA2aApiModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: PaymentOrderA2aApiModule\n});\nPaymentOrderA2aApiModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [],\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PaymentOrderA2aApiModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [],\n      exports: [],\n      providers: []\n    }]\n  }], function () {\n    return [{\n      type: PaymentOrderA2aApiModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: i1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.DataModulesManager,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: PaymentOrderA2aConfiguration\n    }];\n  }, null);\n})();\n\nclass CustomHttpParameterCodec {\n  encodeKey(k) {\n    return encodeURIComponent(k);\n  }\n\n  encodeValue(v) {\n    return encodeURIComponent(v);\n  }\n\n  decodeKey(k) {\n    return decodeURIComponent(k);\n  }\n\n  decodeValue(v) {\n    return decodeURIComponent(v);\n  }\n\n}\n\nclass A2aClientHttpService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new PaymentOrderA2aConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  _delete(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _externalAccountId = requestParameters[\"externalAccountId\"];\n\n    if (_externalAccountId === null || _externalAccountId === undefined) {\n      throw new Error('Required parameter externalAccountId was null or undefined when calling _delete.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.delete(`${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  _deleteUrl(requestParameters) {\n    const _externalAccountId = requestParameters[\"externalAccountId\"];\n\n    if (_externalAccountId === null || _externalAccountId === undefined) {\n      throw new Error('Required parameter externalAccountId was null or undefined when calling _delete.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}`;\n  }\n\n  create(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _externalAccountPostRequest = requestParameters[\"externalAccountPostRequest\"];\n\n    if (_externalAccountPostRequest === null || _externalAccountPostRequest === undefined) {\n      throw new Error('Required parameter externalAccountPostRequest was null or undefined when calling create.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/external-accounts`, _externalAccountPostRequest, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  createUrl(requestParameters) {\n    const _externalAccountPostRequest = requestParameters[\"externalAccountPostRequest\"];\n\n    if (_externalAccountPostRequest === null || _externalAccountPostRequest === undefined) {\n      throw new Error('Required parameter externalAccountPostRequest was null or undefined when calling create.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v1/external-accounts`;\n  }\n\n  getAll(observe = 'body', reportProgress = false, options) {\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/external-accounts`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getAllUrl() {\n    return `${this.configuration.basePath}/client-api/v1/external-accounts`;\n  }\n\n  getById(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _externalAccountId = requestParameters[\"externalAccountId\"];\n\n    if (_externalAccountId === null || _externalAccountId === undefined) {\n      throw new Error('Required parameter externalAccountId was null or undefined when calling getById.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getByIdUrl(requestParameters) {\n    const _externalAccountId = requestParameters[\"externalAccountId\"];\n\n    if (_externalAccountId === null || _externalAccountId === undefined) {\n      throw new Error('Required parameter externalAccountId was null or undefined when calling getById.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}`;\n  }\n\n  update(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _externalAccountId = requestParameters[\"externalAccountId\"];\n\n    if (_externalAccountId === null || _externalAccountId === undefined) {\n      throw new Error('Required parameter externalAccountId was null or undefined when calling update.');\n    }\n\n    const _externalAccountPutRequest = requestParameters[\"externalAccountPutRequest\"];\n\n    if (_externalAccountPutRequest === null || _externalAccountPutRequest === undefined) {\n      throw new Error('Required parameter externalAccountPutRequest was null or undefined when calling update.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}`, _externalAccountPutRequest, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  updateUrl(requestParameters) {\n    const _externalAccountId = requestParameters[\"externalAccountId\"];\n\n    if (_externalAccountId === null || _externalAccountId === undefined) {\n      throw new Error('Required parameter externalAccountId was null or undefined when calling update.');\n    }\n\n    const _externalAccountPutRequest = requestParameters[\"externalAccountPutRequest\"];\n\n    if (_externalAccountPutRequest === null || _externalAccountPutRequest === undefined) {\n      throw new Error('Required parameter externalAccountPutRequest was null or undefined when calling update.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}`;\n  }\n\n  verify(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _externalAccountId = requestParameters[\"externalAccountId\"];\n\n    if (_externalAccountId === null || _externalAccountId === undefined) {\n      throw new Error('Required parameter externalAccountId was null or undefined when calling verify.');\n    }\n\n    const _externalAccountVerificationPutRequest = requestParameters[\"externalAccountVerificationPutRequest\"];\n\n    if (_externalAccountVerificationPutRequest === null || _externalAccountVerificationPutRequest === undefined) {\n      throw new Error('Required parameter externalAccountVerificationPutRequest was null or undefined when calling verify.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}/account-verification`, _externalAccountVerificationPutRequest, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  verifyUrl(requestParameters) {\n    const _externalAccountId = requestParameters[\"externalAccountId\"];\n\n    if (_externalAccountId === null || _externalAccountId === undefined) {\n      throw new Error('Required parameter externalAccountId was null or undefined when calling verify.');\n    }\n\n    const _externalAccountVerificationPutRequest = requestParameters[\"externalAccountVerificationPutRequest\"];\n\n    if (_externalAccountVerificationPutRequest === null || _externalAccountVerificationPutRequest === undefined) {\n      throw new Error('Required parameter externalAccountVerificationPutRequest was null or undefined when calling verify.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}/account-verification`;\n  }\n\n}\n\nA2aClientHttpService.ɵfac = function A2aClientHttpService_Factory(t) {\n  return new (t || A2aClientHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(PAYMENT_ORDER_A2A_BASE_PATH, 8), i0.ɵɵinject(PaymentOrderA2aConfiguration, 8));\n};\n\nA2aClientHttpService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: A2aClientHttpService,\n  factory: A2aClientHttpService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(A2aClientHttpService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [PAYMENT_ORDER_A2A_BASE_PATH]\n      }]\n    }, {\n      type: PaymentOrderA2aConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst A2aClientHttpService_deleteMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v1/external-accounts/{externalAccountId}\",\n  method: \"DELETE\",\n  responses: [{\n    status: 204,\n    body: \"\"\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}]);\nconst A2aClientHttpServiceCreateMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v1/external-accounts\",\n  method: \"POST\",\n  responses: [{\n    status: 201,\n    body: {\n      \"externalAccountId\": \"31361592\",\n      \"routingNumber\": \"091000022\",\n      \"accountNumber\": \"12351\",\n      \"accountType\": \"Checking\",\n      \"accountNickName\": \"NickName\",\n      \"bankName\": \"US BANK NA\",\n      \"accountMask\": \"2351\",\n      \"status\": \"Active\"\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}]);\nconst A2aClientHttpServiceGetAllMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v1/external-accounts\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"accounts\": [{\n        \"externalAccountId\": \"31361591\",\n        \"routingNumber\": \"091000021\",\n        \"accountNumber\": \"12351\",\n        \"accountType\": \"Checking\",\n        \"accountNickName\": \"NickName1\",\n        \"bankName\": \"US BANK NA\",\n        \"maskedAccountNumber\": \"2351\",\n        \"status\": \"Active\"\n      }, {\n        \"externalAccountId\": \"31361592\",\n        \"routingNumber\": \"091000022\",\n        \"accountNumber\": \"12352\",\n        \"accountType\": \"Savings\",\n        \"accountNickName\": \"NickName2\",\n        \"bankName\": \"US BANK NA\",\n        \"maskedAccountNumber\": \"2352\",\n        \"status\": \"PendingActivation\"\n      }]\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}]);\nconst A2aClientHttpServiceGetByIdMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v1/external-accounts/{externalAccountId}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"externalAccountId\": \"31361592\",\n      \"routingNumber\": \"091000022\",\n      \"accountNumber\": \"12351\",\n      \"accountType\": \"Checking\",\n      \"accountNickName\": \"NickName\",\n      \"bankName\": \"US BANK NA\",\n      \"accountMask\": \"2351\",\n      \"status\": \"Active\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"routingNumber\": \"routingNumber\",\n      \"externalAccountId\": \"externalAccountId\",\n      \"accountNickName\": \"accountNickName\",\n      \"bankName\": \"bankName\",\n      \"accountNumber\": \"accountNumber\",\n      \"maskedAccountNumber\": \"maskedAccountNumber\"\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}]);\nconst A2aClientHttpServiceUpdateMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v1/external-accounts/{externalAccountId}\",\n  method: \"PUT\",\n  responses: [{\n    status: 200,\n    body: {\n      \"externalAccountId\": \"31361592\",\n      \"routingNumber\": \"091000022\",\n      \"accountNumber\": \"12351\",\n      \"accountType\": \"Checking\",\n      \"accountNickName\": \"NickName\",\n      \"bankName\": \"US BANK NA\",\n      \"accountMask\": \"2351\",\n      \"status\": \"Active\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"routingNumber\": \"routingNumber\",\n      \"externalAccountId\": \"externalAccountId\",\n      \"accountNickName\": \"accountNickName\",\n      \"bankName\": \"bankName\",\n      \"accountNumber\": \"accountNumber\",\n      \"maskedAccountNumber\": \"maskedAccountNumber\"\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}]);\nconst A2aClientHttpServiceVerifyMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v1/external-accounts/{externalAccountId}/account-verification\",\n  method: \"PUT\",\n  responses: [{\n    status: 200,\n    body: {\n      \"externalAccountId\": \"31361592\",\n      \"routingNumber\": \"091000022\",\n      \"accountNumber\": \"12351\",\n      \"accountType\": \"Checking\",\n      \"accountNickName\": \"NickName\",\n      \"bankName\": \"US BANK NA\",\n      \"accountMask\": \"2351\",\n      \"status\": \"Active\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"routingNumber\": \"routingNumber\",\n      \"externalAccountId\": \"externalAccountId\",\n      \"accountNickName\": \"accountNickName\",\n      \"bankName\": \"bankName\",\n      \"accountNumber\": \"accountNumber\",\n      \"maskedAccountNumber\": \"maskedAccountNumber\"\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}]);\nconst A2aClientHttpServiceMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v1/external-accounts/{externalAccountId}\",\n  method: \"DELETE\",\n  responses: [{\n    status: 204,\n    body: \"\"\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v1/external-accounts\",\n  method: \"POST\",\n  responses: [{\n    status: 201,\n    body: {\n      \"externalAccountId\": \"31361592\",\n      \"routingNumber\": \"091000022\",\n      \"accountNumber\": \"12351\",\n      \"accountType\": \"Checking\",\n      \"accountNickName\": \"NickName\",\n      \"bankName\": \"US BANK NA\",\n      \"accountMask\": \"2351\",\n      \"status\": \"Active\"\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v1/external-accounts\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"accounts\": [{\n        \"externalAccountId\": \"31361591\",\n        \"routingNumber\": \"091000021\",\n        \"accountNumber\": \"12351\",\n        \"accountType\": \"Checking\",\n        \"accountNickName\": \"NickName1\",\n        \"bankName\": \"US BANK NA\",\n        \"maskedAccountNumber\": \"2351\",\n        \"status\": \"Active\"\n      }, {\n        \"externalAccountId\": \"31361592\",\n        \"routingNumber\": \"091000022\",\n        \"accountNumber\": \"12352\",\n        \"accountType\": \"Savings\",\n        \"accountNickName\": \"NickName2\",\n        \"bankName\": \"US BANK NA\",\n        \"maskedAccountNumber\": \"2352\",\n        \"status\": \"PendingActivation\"\n      }]\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v1/external-accounts/{externalAccountId}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"externalAccountId\": \"31361592\",\n      \"routingNumber\": \"091000022\",\n      \"accountNumber\": \"12351\",\n      \"accountType\": \"Checking\",\n      \"accountNickName\": \"NickName\",\n      \"bankName\": \"US BANK NA\",\n      \"accountMask\": \"2351\",\n      \"status\": \"Active\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"routingNumber\": \"routingNumber\",\n      \"externalAccountId\": \"externalAccountId\",\n      \"accountNickName\": \"accountNickName\",\n      \"bankName\": \"bankName\",\n      \"accountNumber\": \"accountNumber\",\n      \"maskedAccountNumber\": \"maskedAccountNumber\"\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v1/external-accounts/{externalAccountId}\",\n  method: \"PUT\",\n  responses: [{\n    status: 200,\n    body: {\n      \"externalAccountId\": \"31361592\",\n      \"routingNumber\": \"091000022\",\n      \"accountNumber\": \"12351\",\n      \"accountType\": \"Checking\",\n      \"accountNickName\": \"NickName\",\n      \"bankName\": \"US BANK NA\",\n      \"accountMask\": \"2351\",\n      \"status\": \"Active\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"routingNumber\": \"routingNumber\",\n      \"externalAccountId\": \"externalAccountId\",\n      \"accountNickName\": \"accountNickName\",\n      \"bankName\": \"bankName\",\n      \"accountNumber\": \"accountNumber\",\n      \"maskedAccountNumber\": \"maskedAccountNumber\"\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v1/external-accounts/{externalAccountId}/account-verification\",\n  method: \"PUT\",\n  responses: [{\n    status: 200,\n    body: {\n      \"externalAccountId\": \"31361592\",\n      \"routingNumber\": \"091000022\",\n      \"accountNumber\": \"12351\",\n      \"accountType\": \"Checking\",\n      \"accountNickName\": \"NickName\",\n      \"bankName\": \"US BANK NA\",\n      \"accountMask\": \"2351\",\n      \"status\": \"Active\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"routingNumber\": \"routingNumber\",\n      \"externalAccountId\": \"externalAccountId\",\n      \"accountNickName\": \"accountNickName\",\n      \"bankName\": \"bankName\",\n      \"accountNumber\": \"accountNumber\",\n      \"maskedAccountNumber\": \"maskedAccountNumber\"\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}]);\nexport { A2aClientHttpService, A2aClientHttpServiceCreateMocksProvider, A2aClientHttpServiceGetAllMocksProvider, A2aClientHttpServiceGetByIdMocksProvider, A2aClientHttpServiceMocksProvider, A2aClientHttpServiceUpdateMocksProvider, A2aClientHttpServiceVerifyMocksProvider, A2aClientHttpService_deleteMocksProvider, AccountStatus, AccountType, COLLECTION_FORMATS, CONFIG_TOKEN, PAYMENT_ORDER_A2A_BASE_PATH, PaymentOrderA2aApiModule, PaymentOrderA2aConfiguration };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/payment-order-a2a-http-ang/fesm2015/backbase-payment-order-a2a-http-ang.js"],"names":["i0","InjectionToken","NgModule","Optional","SkipSelf","Injectable","Inject","i1","HttpHeaders","i2","createMocks","AccountStatus","Active","InProcess","PendingActivation","FailedVerification","RejectedByExternalBank","DisabledForExcessiveReturns","DisabledForFraud","AccountType","Checking","Savings","PAYMENT_ORDER_A2A_BASE_PATH","COLLECTION_FORMATS","PaymentOrderA2aConfiguration","constructor","configurationParameters","apiKeys","username","password","accessToken","basePath","withCredentials","encoder","credentials","selectHeaderContentType","contentTypes","length","undefined","type","find","x","isJsonMime","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","lookupCredential","key","value","CONFIG_TOKEN","PaymentOrderA2aApiModule","parentModule","http","dataModulesManager","config","Error","setModuleConfig","apiRoot","servicePath","headers","forRoot","configurationFactory","ngModule","providers","provide","useFactory","ɵfac","HttpClient","DataModulesManager","ɵmod","ɵinj","args","imports","declarations","exports","decorators","CustomHttpParameterCodec","encodeKey","k","encodeURIComponent","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","A2aClientHttpService","httpClient","configuration","defaultHeaders","addToHttpParams","httpParams","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","append","toISOString","substr","Object","keys","_delete","requestParameters","observe","reportProgress","options","_externalAccountId","httpHeaderAcceptSelected","httpHeaderAccept","httpHeaderAccepts","set","responseType","startsWith","delete","String","_deleteUrl","create","_externalAccountPostRequest","consumes","httpContentTypeSelected","post","createUrl","getAll","get","getAllUrl","getById","getByIdUrl","update","_externalAccountPutRequest","put","updateUrl","verify","_externalAccountVerificationPutRequest","verifyUrl","ɵprov","providedIn","A2aClientHttpService_deleteMocksProvider","urlPattern","method","responses","status","body","A2aClientHttpServiceCreateMocksProvider","A2aClientHttpServiceGetAllMocksProvider","A2aClientHttpServiceGetByIdMocksProvider","A2aClientHttpServiceUpdateMocksProvider","A2aClientHttpServiceVerifyMocksProvider","A2aClientHttpServiceMocksProvider"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i2 from '@backbase/foundation-ang/data-http';\nimport { createMocks } from '@backbase/foundation-ang/data-http';\n\nconst AccountStatus = {\n    Active: 'Active',\n    InProcess: 'InProcess',\n    PendingActivation: 'PendingActivation',\n    FailedVerification: 'FailedVerification',\n    RejectedByExternalBank: 'RejectedByExternalBank',\n    DisabledForExcessiveReturns: 'DisabledForExcessiveReturns',\n    DisabledForFraud: 'DisabledForFraud'\n};\n\nconst AccountType = {\n    Checking: 'Checking',\n    Savings: 'Savings'\n};\n\nconst PAYMENT_ORDER_A2A_BASE_PATH = new InjectionToken('PAYMENT_ORDER_A2A_BASE_PATH');\nconst COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n};\n\nclass PaymentOrderA2aConfiguration {\n    constructor(configurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n    selectHeaderContentType(contentTypes) {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n        const type = contentTypes.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n    selectHeaderAccept(accepts) {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n        const type = accepts.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n    isJsonMime(mime) {\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n    lookupCredential(key) {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\nconst CONFIG_TOKEN = new InjectionToken('api-data-module PaymentOrderA2aConfiguration');\n\nclass PaymentOrderA2aApiModule {\n    constructor(parentModule, http, dataModulesManager, config) {\n        if (parentModule) {\n            throw new Error('PaymentOrderA2aApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n                'See also https://github.com/angular/angular/issues/20575');\n        }\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n    static forRoot(configurationFactory) {\n        return {\n            ngModule: PaymentOrderA2aApiModule,\n            providers: [{ provide: PaymentOrderA2aConfiguration, useFactory: configurationFactory }]\n        };\n    }\n}\nPaymentOrderA2aApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PaymentOrderA2aApiModule, deps: [{ token: PaymentOrderA2aApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: PaymentOrderA2aConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });\nPaymentOrderA2aApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PaymentOrderA2aApiModule });\nPaymentOrderA2aApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PaymentOrderA2aApiModule, providers: [], imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: PaymentOrderA2aApiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [],\n                    declarations: [],\n                    exports: [],\n                    providers: []\n                }]\n        }], ctorParameters: function () { return [{ type: PaymentOrderA2aApiModule, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DataModulesManager, decorators: [{\n                    type: Optional\n                }] }, { type: PaymentOrderA2aConfiguration }]; } });\n\nclass CustomHttpParameterCodec {\n    encodeKey(k) {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v) {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k) {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v) {\n        return decodeURIComponent(v);\n    }\n}\n\nclass A2aClientHttpService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new PaymentOrderA2aConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    _delete(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _externalAccountId = requestParameters[\"externalAccountId\"];\n        if (_externalAccountId === null || _externalAccountId === undefined) {\n            throw new Error('Required parameter externalAccountId was null or undefined when calling _delete.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    _deleteUrl(requestParameters) {\n        const _externalAccountId = requestParameters[\"externalAccountId\"];\n        if (_externalAccountId === null || _externalAccountId === undefined) {\n            throw new Error('Required parameter externalAccountId was null or undefined when calling _delete.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}`;\n    }\n    create(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _externalAccountPostRequest = requestParameters[\"externalAccountPostRequest\"];\n        if (_externalAccountPostRequest === null || _externalAccountPostRequest === undefined) {\n            throw new Error('Required parameter externalAccountPostRequest was null or undefined when calling create.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/external-accounts`, _externalAccountPostRequest, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    createUrl(requestParameters) {\n        const _externalAccountPostRequest = requestParameters[\"externalAccountPostRequest\"];\n        if (_externalAccountPostRequest === null || _externalAccountPostRequest === undefined) {\n            throw new Error('Required parameter externalAccountPostRequest was null or undefined when calling create.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/external-accounts`;\n    }\n    getAll(observe = 'body', reportProgress = false, options) {\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/external-accounts`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getAllUrl() {\n        return `${this.configuration.basePath}/client-api/v1/external-accounts`;\n    }\n    getById(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _externalAccountId = requestParameters[\"externalAccountId\"];\n        if (_externalAccountId === null || _externalAccountId === undefined) {\n            throw new Error('Required parameter externalAccountId was null or undefined when calling getById.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getByIdUrl(requestParameters) {\n        const _externalAccountId = requestParameters[\"externalAccountId\"];\n        if (_externalAccountId === null || _externalAccountId === undefined) {\n            throw new Error('Required parameter externalAccountId was null or undefined when calling getById.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}`;\n    }\n    update(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _externalAccountId = requestParameters[\"externalAccountId\"];\n        if (_externalAccountId === null || _externalAccountId === undefined) {\n            throw new Error('Required parameter externalAccountId was null or undefined when calling update.');\n        }\n        const _externalAccountPutRequest = requestParameters[\"externalAccountPutRequest\"];\n        if (_externalAccountPutRequest === null || _externalAccountPutRequest === undefined) {\n            throw new Error('Required parameter externalAccountPutRequest was null or undefined when calling update.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}`, _externalAccountPutRequest, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    updateUrl(requestParameters) {\n        const _externalAccountId = requestParameters[\"externalAccountId\"];\n        if (_externalAccountId === null || _externalAccountId === undefined) {\n            throw new Error('Required parameter externalAccountId was null or undefined when calling update.');\n        }\n        const _externalAccountPutRequest = requestParameters[\"externalAccountPutRequest\"];\n        if (_externalAccountPutRequest === null || _externalAccountPutRequest === undefined) {\n            throw new Error('Required parameter externalAccountPutRequest was null or undefined when calling update.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}`;\n    }\n    verify(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _externalAccountId = requestParameters[\"externalAccountId\"];\n        if (_externalAccountId === null || _externalAccountId === undefined) {\n            throw new Error('Required parameter externalAccountId was null or undefined when calling verify.');\n        }\n        const _externalAccountVerificationPutRequest = requestParameters[\"externalAccountVerificationPutRequest\"];\n        if (_externalAccountVerificationPutRequest === null || _externalAccountVerificationPutRequest === undefined) {\n            throw new Error('Required parameter externalAccountVerificationPutRequest was null or undefined when calling verify.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}/account-verification`, _externalAccountVerificationPutRequest, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    verifyUrl(requestParameters) {\n        const _externalAccountId = requestParameters[\"externalAccountId\"];\n        if (_externalAccountId === null || _externalAccountId === undefined) {\n            throw new Error('Required parameter externalAccountId was null or undefined when calling verify.');\n        }\n        const _externalAccountVerificationPutRequest = requestParameters[\"externalAccountVerificationPutRequest\"];\n        if (_externalAccountVerificationPutRequest === null || _externalAccountVerificationPutRequest === undefined) {\n            throw new Error('Required parameter externalAccountVerificationPutRequest was null or undefined when calling verify.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}/account-verification`;\n    }\n}\nA2aClientHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: A2aClientHttpService, deps: [{ token: i1.HttpClient }, { token: PAYMENT_ORDER_A2A_BASE_PATH, optional: true }, { token: PaymentOrderA2aConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nA2aClientHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: A2aClientHttpService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: A2aClientHttpService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [PAYMENT_ORDER_A2A_BASE_PATH]\n                }] }, { type: PaymentOrderA2aConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst A2aClientHttpService_deleteMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v1/external-accounts/{externalAccountId}\",\n        method: \"DELETE\",\n        responses: [\n            {\n                status: 204,\n                body: \"\"\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst A2aClientHttpServiceCreateMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v1/external-accounts\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 201,\n                body: {\n                    \"externalAccountId\": \"31361592\",\n                    \"routingNumber\": \"091000022\",\n                    \"accountNumber\": \"12351\",\n                    \"accountType\": \"Checking\",\n                    \"accountNickName\": \"NickName\",\n                    \"bankName\": \"US BANK NA\",\n                    \"accountMask\": \"2351\",\n                    \"status\": \"Active\"\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst A2aClientHttpServiceGetAllMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v1/external-accounts\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"accounts\": [{\n                            \"externalAccountId\": \"31361591\",\n                            \"routingNumber\": \"091000021\",\n                            \"accountNumber\": \"12351\",\n                            \"accountType\": \"Checking\",\n                            \"accountNickName\": \"NickName1\",\n                            \"bankName\": \"US BANK NA\",\n                            \"maskedAccountNumber\": \"2351\",\n                            \"status\": \"Active\"\n                        }, {\n                            \"externalAccountId\": \"31361592\",\n                            \"routingNumber\": \"091000022\",\n                            \"accountNumber\": \"12352\",\n                            \"accountType\": \"Savings\",\n                            \"accountNickName\": \"NickName2\",\n                            \"bankName\": \"US BANK NA\",\n                            \"maskedAccountNumber\": \"2352\",\n                            \"status\": \"PendingActivation\"\n                        }]\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst A2aClientHttpServiceGetByIdMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v1/external-accounts/{externalAccountId}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"externalAccountId\": \"31361592\",\n                    \"routingNumber\": \"091000022\",\n                    \"accountNumber\": \"12351\",\n                    \"accountType\": \"Checking\",\n                    \"accountNickName\": \"NickName\",\n                    \"bankName\": \"US BANK NA\",\n                    \"accountMask\": \"2351\",\n                    \"status\": \"Active\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"routingNumber\": \"routingNumber\",\n                    \"externalAccountId\": \"externalAccountId\",\n                    \"accountNickName\": \"accountNickName\",\n                    \"bankName\": \"bankName\",\n                    \"accountNumber\": \"accountNumber\",\n                    \"maskedAccountNumber\": \"maskedAccountNumber\"\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst A2aClientHttpServiceUpdateMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v1/external-accounts/{externalAccountId}\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"externalAccountId\": \"31361592\",\n                    \"routingNumber\": \"091000022\",\n                    \"accountNumber\": \"12351\",\n                    \"accountType\": \"Checking\",\n                    \"accountNickName\": \"NickName\",\n                    \"bankName\": \"US BANK NA\",\n                    \"accountMask\": \"2351\",\n                    \"status\": \"Active\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"routingNumber\": \"routingNumber\",\n                    \"externalAccountId\": \"externalAccountId\",\n                    \"accountNickName\": \"accountNickName\",\n                    \"bankName\": \"bankName\",\n                    \"accountNumber\": \"accountNumber\",\n                    \"maskedAccountNumber\": \"maskedAccountNumber\"\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst A2aClientHttpServiceVerifyMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v1/external-accounts/{externalAccountId}/account-verification\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"externalAccountId\": \"31361592\",\n                    \"routingNumber\": \"091000022\",\n                    \"accountNumber\": \"12351\",\n                    \"accountType\": \"Checking\",\n                    \"accountNickName\": \"NickName\",\n                    \"bankName\": \"US BANK NA\",\n                    \"accountMask\": \"2351\",\n                    \"status\": \"Active\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"routingNumber\": \"routingNumber\",\n                    \"externalAccountId\": \"externalAccountId\",\n                    \"accountNickName\": \"accountNickName\",\n                    \"bankName\": \"bankName\",\n                    \"accountNumber\": \"accountNumber\",\n                    \"maskedAccountNumber\": \"maskedAccountNumber\"\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst A2aClientHttpServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/client-api/v1/external-accounts/{externalAccountId}\",\n        method: \"DELETE\",\n        responses: [\n            {\n                status: 204,\n                body: \"\"\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v1/external-accounts\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 201,\n                body: {\n                    \"externalAccountId\": \"31361592\",\n                    \"routingNumber\": \"091000022\",\n                    \"accountNumber\": \"12351\",\n                    \"accountType\": \"Checking\",\n                    \"accountNickName\": \"NickName\",\n                    \"bankName\": \"US BANK NA\",\n                    \"accountMask\": \"2351\",\n                    \"status\": \"Active\"\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v1/external-accounts\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"accounts\": [{\n                            \"externalAccountId\": \"31361591\",\n                            \"routingNumber\": \"091000021\",\n                            \"accountNumber\": \"12351\",\n                            \"accountType\": \"Checking\",\n                            \"accountNickName\": \"NickName1\",\n                            \"bankName\": \"US BANK NA\",\n                            \"maskedAccountNumber\": \"2351\",\n                            \"status\": \"Active\"\n                        }, {\n                            \"externalAccountId\": \"31361592\",\n                            \"routingNumber\": \"091000022\",\n                            \"accountNumber\": \"12352\",\n                            \"accountType\": \"Savings\",\n                            \"accountNickName\": \"NickName2\",\n                            \"bankName\": \"US BANK NA\",\n                            \"maskedAccountNumber\": \"2352\",\n                            \"status\": \"PendingActivation\"\n                        }]\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v1/external-accounts/{externalAccountId}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"externalAccountId\": \"31361592\",\n                    \"routingNumber\": \"091000022\",\n                    \"accountNumber\": \"12351\",\n                    \"accountType\": \"Checking\",\n                    \"accountNickName\": \"NickName\",\n                    \"bankName\": \"US BANK NA\",\n                    \"accountMask\": \"2351\",\n                    \"status\": \"Active\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"routingNumber\": \"routingNumber\",\n                    \"externalAccountId\": \"externalAccountId\",\n                    \"accountNickName\": \"accountNickName\",\n                    \"bankName\": \"bankName\",\n                    \"accountNumber\": \"accountNumber\",\n                    \"maskedAccountNumber\": \"maskedAccountNumber\"\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v1/external-accounts/{externalAccountId}\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"externalAccountId\": \"31361592\",\n                    \"routingNumber\": \"091000022\",\n                    \"accountNumber\": \"12351\",\n                    \"accountType\": \"Checking\",\n                    \"accountNickName\": \"NickName\",\n                    \"bankName\": \"US BANK NA\",\n                    \"accountMask\": \"2351\",\n                    \"status\": \"Active\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"routingNumber\": \"routingNumber\",\n                    \"externalAccountId\": \"externalAccountId\",\n                    \"accountNickName\": \"accountNickName\",\n                    \"bankName\": \"bankName\",\n                    \"accountNumber\": \"accountNumber\",\n                    \"maskedAccountNumber\": \"maskedAccountNumber\"\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v1/external-accounts/{externalAccountId}/account-verification\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"externalAccountId\": \"31361592\",\n                    \"routingNumber\": \"091000022\",\n                    \"accountNumber\": \"12351\",\n                    \"accountType\": \"Checking\",\n                    \"accountNickName\": \"NickName\",\n                    \"bankName\": \"US BANK NA\",\n                    \"accountMask\": \"2351\",\n                    \"status\": \"Active\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"routingNumber\": \"routingNumber\",\n                    \"externalAccountId\": \"externalAccountId\",\n                    \"accountNickName\": \"accountNickName\",\n                    \"bankName\": \"bankName\",\n                    \"accountNumber\": \"accountNumber\",\n                    \"maskedAccountNumber\": \"maskedAccountNumber\"\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n]);\n\nexport { A2aClientHttpService, A2aClientHttpServiceCreateMocksProvider, A2aClientHttpServiceGetAllMocksProvider, A2aClientHttpServiceGetByIdMocksProvider, A2aClientHttpServiceMocksProvider, A2aClientHttpServiceUpdateMocksProvider, A2aClientHttpServiceVerifyMocksProvider, A2aClientHttpService_deleteMocksProvider, AccountStatus, AccountType, COLLECTION_FORMATS, CONFIG_TOKEN, PAYMENT_ORDER_A2A_BASE_PATH, PaymentOrderA2aApiModule, PaymentOrderA2aConfiguration };\n"]},"metadata":{},"sourceType":"module"}