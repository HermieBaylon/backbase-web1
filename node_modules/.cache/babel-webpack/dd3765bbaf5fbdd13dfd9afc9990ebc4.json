{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Directive, Input, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\n\nconst isFocusable = el => !!el && typeof el.focus === 'function';\n\nclass FocusService {\n  constructor() {\n    this.focusSubject = new Subject();\n    this.sub = this.focusSubject.pipe(throttleTime(0, undefined, {\n      leading: true\n    })).subscribe(focused => {\n      if (isFocusable(focused.nativeElement)) {\n        focused.nativeElement.focus();\n      }\n    });\n  }\n\n  focus(el) {\n    this.focusSubject.next(el);\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n\n}\n\nFocusService.ɵfac = function FocusService_Factory(t) {\n  return new (t || FocusService)();\n};\n\nFocusService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FocusService,\n  factory: FocusService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FocusService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nclass FocusDirective {\n  constructor(service, el) {\n    this.service = service;\n    this.el = el;\n    this.autofocus = true;\n  }\n\n  set bbFocus(value) {\n    this.autofocus = value === '' || !!value;\n  }\n\n  ngAfterViewInit() {\n    if (this.autofocus) {\n      this.focus();\n    }\n  }\n\n  focus() {\n    this.service.focus(this.el);\n  }\n\n}\n\nFocusDirective.ɵfac = function FocusDirective_Factory(t) {\n  return new (t || FocusDirective)(i0.ɵɵdirectiveInject(FocusService), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nFocusDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: FocusDirective,\n  selectors: [[\"\", \"bbFocus\", \"\"]],\n  inputs: {\n    bbFocus: \"bbFocus\"\n  },\n  exportAs: [\"bbFocus\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FocusDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[bbFocus]',\n      exportAs: 'bbFocus'\n    }]\n  }], function () {\n    return [{\n      type: FocusService\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    bbFocus: [{\n      type: Input\n    }]\n  });\n})();\n\nclass FocusModule {}\n\nFocusModule.ɵfac = function FocusModule_Factory(t) {\n  return new (t || FocusModule)();\n};\n\nFocusModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: FocusModule\n});\nFocusModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [FocusService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FocusModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [FocusDirective],\n      providers: [FocusService],\n      exports: [FocusDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FocusDirective, FocusModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-focus.js"],"names":["CommonModule","i0","Injectable","Directive","Input","NgModule","Subject","throttleTime","isFocusable","el","focus","FocusService","constructor","focusSubject","sub","pipe","undefined","leading","subscribe","focused","nativeElement","next","ngOnDestroy","unsubscribe","ɵfac","ɵprov","type","args","providedIn","FocusDirective","service","autofocus","bbFocus","value","ngAfterViewInit","ElementRef","ɵdir","selector","exportAs","FocusModule","ɵmod","ɵinj","imports","declarations","providers","exports"],"mappings":"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","sourcesContent":["import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Directive, Input, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\n\nconst isFocusable = (el) => !!el && typeof el.focus === 'function';\nclass FocusService {\n    constructor() {\n        this.focusSubject = new Subject();\n        this.sub = this.focusSubject.pipe(throttleTime(0, undefined, { leading: true })).subscribe((focused) => {\n            if (isFocusable(focused.nativeElement)) {\n                focused.nativeElement.focus();\n            }\n        });\n    }\n    focus(el) {\n        this.focusSubject.next(el);\n    }\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n}\nFocusService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: FocusService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFocusService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: FocusService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: FocusService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }] });\n\nclass FocusDirective {\n    constructor(service, el) {\n        this.service = service;\n        this.el = el;\n        this.autofocus = true;\n    }\n    set bbFocus(value) {\n        this.autofocus = value === '' || !!value;\n    }\n    ngAfterViewInit() {\n        if (this.autofocus) {\n            this.focus();\n        }\n    }\n    focus() {\n        this.service.focus(this.el);\n    }\n}\nFocusDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: FocusDirective, deps: [{ token: FocusService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nFocusDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.16\", type: FocusDirective, selector: \"[bbFocus]\", inputs: { bbFocus: \"bbFocus\" }, exportAs: [\"bbFocus\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: FocusDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[bbFocus]',\n                    exportAs: 'bbFocus',\n                }]\n        }], ctorParameters: function () { return [{ type: FocusService }, { type: i0.ElementRef }]; }, propDecorators: { bbFocus: [{\n                type: Input\n            }] } });\n\nclass FocusModule {\n}\nFocusModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: FocusModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nFocusModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: FocusModule, declarations: [FocusDirective], imports: [CommonModule], exports: [FocusDirective] });\nFocusModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: FocusModule, providers: [FocusService], imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: FocusModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [FocusDirective],\n                    providers: [FocusService],\n                    exports: [FocusDirective],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FocusDirective, FocusModule };\n"]},"metadata":{},"sourceType":"module"}