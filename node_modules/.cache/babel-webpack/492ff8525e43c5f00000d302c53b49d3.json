{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, Optional, SkipSelf, Input, NgModule } from '@angular/core';\n/**\n * @name CollapsibleAccordionComponent\n *\n * @description\n * Component that groups Collapsible components to show them in an accordion fashion.\n * It can assure that only one Collapsible panel can be opened at a time\n */\n\nconst _c0 = [\"*\"];\n\nclass CollapsibleAccordionComponent {\n  constructor(parentAccordion) {\n    this.parentAccordion = parentAccordion;\n    /**\n     * Assures that only one Collapsible panel can be opened at a time.\n     */\n\n    this.closeOthers = false;\n    /**\n     * When true displays the first panel on load.\n     */\n\n    this.openFirst = false;\n    this.collapsiblePanels = new Map();\n    this.nestedAccordions = new Set();\n\n    this.closeOtherPanels = panel => value => {\n      if (!value) {\n        return;\n      }\n\n      if (!this.closeOthers) {\n        return;\n      }\n\n      this.collapsiblePanels.forEach((_, item) => {\n        if (panel !== item) {\n          item.isOpen = false;\n        }\n      });\n    };\n  }\n  /**\n   * When true the Accordion will inherit the parent Accordion behaviour.\n   */\n\n\n  set obeyParentAccordion(obey) {\n    if (!this.parentAccordion) {\n      return;\n    }\n\n    if (obey) {\n      this.parentAccordion.registerNestedAccordion(this);\n    } else {\n      this.parentAccordion.unregisterNestedAccordion(this);\n    }\n  }\n\n  ngOnDestroy() {\n    this.obeyParentAccordion = false;\n  }\n\n  registerNestedAccordion(childAccordion) {\n    this.nestedAccordions.add(childAccordion);\n  }\n\n  unregisterNestedAccordion(childAccordion) {\n    this.nestedAccordions.delete(childAccordion);\n  }\n\n  registerNestedPanel(panel) {\n    const subscription = panel.isOpenChange.subscribe(this.closeOtherPanels(panel));\n    this.collapsiblePanels.set(panel, subscription);\n  }\n\n  unregisterNestedPanel(panel) {\n    const subscription = this.collapsiblePanels.get(panel);\n\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n\n    this.collapsiblePanels.delete(panel);\n  }\n\n  expandAll() {\n    if (this.closeOthers) {\n      return;\n    }\n\n    this.setPanelsState(true);\n    this.setNestedAccordionsState(true);\n  }\n\n  collapseAll() {\n    this.setPanelsState(false);\n    this.setNestedAccordionsState(false);\n  }\n\n  ngAfterContentInit() {\n    if (this.openFirst) {\n      this.collapsiblePanels.keys().next().value.isOpen = true;\n    }\n  }\n\n  setPanelsState(isOpen) {\n    this.collapsiblePanels.forEach((_, panel) => panel.isOpen = isOpen);\n  }\n\n  setNestedAccordionsState(isOpen) {\n    this.nestedAccordions.forEach(accordion => {\n      if (isOpen) {\n        accordion.expandAll();\n      } else {\n        accordion.collapseAll();\n      }\n    });\n  }\n\n}\n\nCollapsibleAccordionComponent.ɵfac = function CollapsibleAccordionComponent_Factory(t) {\n  return new (t || CollapsibleAccordionComponent)(i0.ɵɵdirectiveInject(CollapsibleAccordionComponent, 12));\n};\n\nCollapsibleAccordionComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CollapsibleAccordionComponent,\n  selectors: [[\"bb-collapsible-accordion-ui\"]],\n  inputs: {\n    closeOthers: \"closeOthers\",\n    openFirst: \"openFirst\",\n    obeyParentAccordion: \"obeyParentAccordion\"\n  },\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function CollapsibleAccordionComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CollapsibleAccordionComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-collapsible-accordion-ui',\n      templateUrl: 'collapsible-accordion.component.html'\n    }]\n  }], function () {\n    return [{\n      type: CollapsibleAccordionComponent,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }];\n  }, {\n    closeOthers: [{\n      type: Input\n    }],\n    openFirst: [{\n      type: Input\n    }],\n    obeyParentAccordion: [{\n      type: Input\n    }]\n  });\n})();\n\nclass CollapsibleAccordionModule {}\n\nCollapsibleAccordionModule.ɵfac = function CollapsibleAccordionModule_Factory(t) {\n  return new (t || CollapsibleAccordionModule)();\n};\n\nCollapsibleAccordionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CollapsibleAccordionModule\n});\nCollapsibleAccordionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CollapsibleAccordionModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [CollapsibleAccordionComponent],\n      exports: [CollapsibleAccordionComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CollapsibleAccordionComponent, CollapsibleAccordionModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-collapsible-accordion.js"],"names":["CommonModule","i0","Component","Optional","SkipSelf","Input","NgModule","CollapsibleAccordionComponent","constructor","parentAccordion","closeOthers","openFirst","collapsiblePanels","Map","nestedAccordions","Set","closeOtherPanels","panel","value","forEach","_","item","isOpen","obeyParentAccordion","obey","registerNestedAccordion","unregisterNestedAccordion","ngOnDestroy","childAccordion","add","delete","registerNestedPanel","subscription","isOpenChange","subscribe","set","unregisterNestedPanel","get","unsubscribe","expandAll","setPanelsState","setNestedAccordionsState","collapseAll","ngAfterContentInit","keys","next","accordion","ɵfac","ɵcmp","type","args","selector","templateUrl","decorators","CollapsibleAccordionModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, Optional, SkipSelf, Input, NgModule } from '@angular/core';\n\n/**\n * @name CollapsibleAccordionComponent\n *\n * @description\n * Component that groups Collapsible components to show them in an accordion fashion.\n * It can assure that only one Collapsible panel can be opened at a time\n */\nclass CollapsibleAccordionComponent {\n    constructor(parentAccordion) {\n        this.parentAccordion = parentAccordion;\n        /**\n         * Assures that only one Collapsible panel can be opened at a time.\n         */\n        this.closeOthers = false;\n        /**\n         * When true displays the first panel on load.\n         */\n        this.openFirst = false;\n        this.collapsiblePanels = new Map();\n        this.nestedAccordions = new Set();\n        this.closeOtherPanels = (panel) => (value) => {\n            if (!value) {\n                return;\n            }\n            if (!this.closeOthers) {\n                return;\n            }\n            this.collapsiblePanels.forEach((_, item) => {\n                if (panel !== item) {\n                    item.isOpen = false;\n                }\n            });\n        };\n    }\n    /**\n     * When true the Accordion will inherit the parent Accordion behaviour.\n     */\n    set obeyParentAccordion(obey) {\n        if (!this.parentAccordion) {\n            return;\n        }\n        if (obey) {\n            this.parentAccordion.registerNestedAccordion(this);\n        }\n        else {\n            this.parentAccordion.unregisterNestedAccordion(this);\n        }\n    }\n    ngOnDestroy() {\n        this.obeyParentAccordion = false;\n    }\n    registerNestedAccordion(childAccordion) {\n        this.nestedAccordions.add(childAccordion);\n    }\n    unregisterNestedAccordion(childAccordion) {\n        this.nestedAccordions.delete(childAccordion);\n    }\n    registerNestedPanel(panel) {\n        const subscription = panel.isOpenChange.subscribe(this.closeOtherPanels(panel));\n        this.collapsiblePanels.set(panel, subscription);\n    }\n    unregisterNestedPanel(panel) {\n        const subscription = this.collapsiblePanels.get(panel);\n        if (subscription) {\n            subscription.unsubscribe();\n        }\n        this.collapsiblePanels.delete(panel);\n    }\n    expandAll() {\n        if (this.closeOthers) {\n            return;\n        }\n        this.setPanelsState(true);\n        this.setNestedAccordionsState(true);\n    }\n    collapseAll() {\n        this.setPanelsState(false);\n        this.setNestedAccordionsState(false);\n    }\n    ngAfterContentInit() {\n        if (this.openFirst) {\n            this.collapsiblePanels.keys().next().value.isOpen = true;\n        }\n    }\n    setPanelsState(isOpen) {\n        this.collapsiblePanels.forEach((_, panel) => (panel.isOpen = isOpen));\n    }\n    setNestedAccordionsState(isOpen) {\n        this.nestedAccordions.forEach((accordion) => {\n            if (isOpen) {\n                accordion.expandAll();\n            }\n            else {\n                accordion.collapseAll();\n            }\n        });\n    }\n}\nCollapsibleAccordionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CollapsibleAccordionComponent, deps: [{ token: CollapsibleAccordionComponent, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });\nCollapsibleAccordionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: CollapsibleAccordionComponent, selector: \"bb-collapsible-accordion-ui\", inputs: { closeOthers: \"closeOthers\", openFirst: \"openFirst\", obeyParentAccordion: \"obeyParentAccordion\" }, ngImport: i0, template: \"<ng-content></ng-content>\\n\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CollapsibleAccordionComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-collapsible-accordion-ui',\n                    templateUrl: 'collapsible-accordion.component.html',\n                }]\n        }], ctorParameters: function () { return [{ type: CollapsibleAccordionComponent, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }]; }, propDecorators: { closeOthers: [{\n                type: Input\n            }], openFirst: [{\n                type: Input\n            }], obeyParentAccordion: [{\n                type: Input\n            }] } });\n\nclass CollapsibleAccordionModule {\n}\nCollapsibleAccordionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CollapsibleAccordionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCollapsibleAccordionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CollapsibleAccordionModule, declarations: [CollapsibleAccordionComponent], imports: [CommonModule], exports: [CollapsibleAccordionComponent] });\nCollapsibleAccordionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CollapsibleAccordionModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CollapsibleAccordionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [CollapsibleAccordionComponent],\n                    exports: [CollapsibleAccordionComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CollapsibleAccordionComponent, CollapsibleAccordionModule };\n"]},"metadata":{},"sourceType":"module"}