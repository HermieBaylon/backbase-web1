{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, TemplateRef, Component, ChangeDetectionStrategy, Output, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport * as i1 from '@ng-bootstrap/ng-bootstrap';\nimport { NgbDropdownConfig, NgbDropdown, NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nfunction DropdownPanelComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction DropdownPanelComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    isOpen: a0\n  };\n};\n\nclass DropdownMenuDirective {\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n\n}\n\nDropdownMenuDirective.ɵfac = function DropdownMenuDirective_Factory(t) {\n  return new (t || DropdownMenuDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nDropdownMenuDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DropdownMenuDirective,\n  selectors: [[\"ng-template\", \"bbDropdownMenu\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DropdownMenuDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[bbDropdownMenu]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n\nclass DropdownToggleDirective {\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n\n}\n\nDropdownToggleDirective.ɵfac = function DropdownToggleDirective_Factory(t) {\n  return new (t || DropdownToggleDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nDropdownToggleDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DropdownToggleDirective,\n  selectors: [[\"ng-template\", \"bbDropdownToggle\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DropdownToggleDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[bbDropdownToggle]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * @name DropdownPanelComponent\n *\n * @description\n * Component incapsulating logic for showing/hiding dropdown.\n */\n\n\nclass DropdownPanelComponent {\n  constructor(config) {\n    this.isOpen = new Subject();\n    /**\n     * Event emitted when dropdown open/close.\n     */\n\n    this.open = this.isOpen.asObservable();\n    config.autoClose = 'outside';\n  }\n\n  changeState(state) {\n    this.isOpen.next(state);\n  }\n\n  ngAfterContentInit() {\n    if (!this.customDropdownToggle) {\n      throw new Error('BB Dropdown ui. Toggle content is required.');\n    }\n\n    if (!this.customDropdownContent) {\n      throw new Error('BB Dropdown ui. Dropdown content is required.');\n    }\n  }\n\n  closeMenu() {\n    if (this.dropdown) {\n      this.dropdown.close();\n    }\n  }\n\n}\n\nDropdownPanelComponent.ɵfac = function DropdownPanelComponent_Factory(t) {\n  return new (t || DropdownPanelComponent)(i0.ɵɵdirectiveInject(i1.NgbDropdownConfig));\n};\n\nDropdownPanelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DropdownPanelComponent,\n  selectors: [[\"bb-dropdown-panel-ui\"]],\n  contentQueries: function DropdownPanelComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, DropdownMenuDirective, 7, TemplateRef);\n      i0.ɵɵcontentQuery(dirIndex, DropdownToggleDirective, 7, TemplateRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customDropdownContent = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customDropdownToggle = _t.first);\n    }\n  },\n  viewQuery: function DropdownPanelComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(NgbDropdown, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdown = _t.first);\n    }\n  },\n  outputs: {\n    open: \"open\"\n  },\n  features: [i0.ɵɵProvidersFeature([NgbDropdownConfig])],\n  decls: 6,\n  vars: 11,\n  consts: [[\"ngbDropdown\", \"\", 1, \"bb-dropdown-panel\", 3, \"placement\", \"openChange\"], [\"ngbDropdownToggle\", \"\", 1, \"bb-dropdown-panel__dropdown-toggle\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"ngbDropdownMenu\", \"\", \"position\", \"top\", 1, \"bb-dropdown-panel__dropdown\"], [4, \"ngTemplateOutlet\"]],\n  template: function DropdownPanelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"openChange\", function DropdownPanelComponent_Template_div_openChange_0_listener($event) {\n        return ctx.changeState($event);\n      });\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵtemplate(2, DropdownPanelComponent_ng_container_2_Template, 1, 0, \"ng-container\", 2);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 3);\n      i0.ɵɵtemplate(5, DropdownPanelComponent_ng_container_5_Template, 1, 0, \"ng-container\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"placement\", \"bottom\");\n      i0.ɵɵattribute(\"data-role\", \"dropdown-panel\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"data-role\", \"dropdown-toggle\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.customDropdownToggle)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(9, _c0, i0.ɵɵpipeBind1(3, 7, ctx.isOpen)));\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"data-role\", \"dropdown-panel-menu\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.customDropdownContent);\n    }\n  },\n  directives: [i1.NgbDropdown, i1.NgbDropdownToggle, i2.NgTemplateOutlet, i1.NgbDropdownMenu],\n  pipes: [i2.AsyncPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DropdownPanelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-dropdown-panel-ui',\n      templateUrl: './dropdown-panel.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [NgbDropdownConfig]\n    }]\n  }], function () {\n    return [{\n      type: i1.NgbDropdownConfig\n    }];\n  }, {\n    open: [{\n      type: Output\n    }],\n    customDropdownContent: [{\n      type: ContentChild,\n      args: [DropdownMenuDirective, {\n        read: TemplateRef,\n        static: true\n      }]\n    }],\n    customDropdownToggle: [{\n      type: ContentChild,\n      args: [DropdownToggleDirective, {\n        read: TemplateRef,\n        static: true\n      }]\n    }],\n    dropdown: [{\n      type: ViewChild,\n      args: [NgbDropdown, {\n        static: true\n      }]\n    }]\n  });\n})();\n\nclass DropdownPanelModule {}\n\nDropdownPanelModule.ɵfac = function DropdownPanelModule_Factory(t) {\n  return new (t || DropdownPanelModule)();\n};\n\nDropdownPanelModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: DropdownPanelModule\n});\nDropdownPanelModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, NgbDropdownModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DropdownPanelModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, NgbDropdownModule],\n      declarations: [DropdownPanelComponent, DropdownMenuDirective, DropdownToggleDirective],\n      exports: [DropdownPanelComponent, DropdownToggleDirective, DropdownMenuDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DropdownMenuDirective, DropdownPanelComponent, DropdownPanelModule, DropdownToggleDirective };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-dropdown-panel.js"],"names":["i0","Directive","TemplateRef","Component","ChangeDetectionStrategy","Output","ContentChild","ViewChild","NgModule","i1","NgbDropdownConfig","NgbDropdown","NgbDropdownModule","Subject","i2","CommonModule","DropdownMenuDirective","constructor","templateRef","ɵfac","ɵdir","type","args","selector","DropdownToggleDirective","DropdownPanelComponent","config","isOpen","open","asObservable","autoClose","changeState","state","next","ngAfterContentInit","customDropdownToggle","Error","customDropdownContent","closeMenu","dropdown","close","ɵcmp","NgbDropdownToggle","NgTemplateOutlet","NgbDropdownMenu","AsyncPipe","templateUrl","changeDetection","OnPush","providers","read","static","DropdownPanelModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, TemplateRef, Component, ChangeDetectionStrategy, Output, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport * as i1 from '@ng-bootstrap/ng-bootstrap';\nimport { NgbDropdownConfig, NgbDropdown, NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass DropdownMenuDirective {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nDropdownMenuDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: DropdownMenuDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nDropdownMenuDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.16\", type: DropdownMenuDirective, selector: \"ng-template[bbDropdownMenu]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: DropdownMenuDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: 'ng-template[bbDropdownMenu]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\nclass DropdownToggleDirective {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nDropdownToggleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: DropdownToggleDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nDropdownToggleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.16\", type: DropdownToggleDirective, selector: \"ng-template[bbDropdownToggle]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: DropdownToggleDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: 'ng-template[bbDropdownToggle]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n/**\n * @name DropdownPanelComponent\n *\n * @description\n * Component incapsulating logic for showing/hiding dropdown.\n */\nclass DropdownPanelComponent {\n    constructor(config) {\n        this.isOpen = new Subject();\n        /**\n         * Event emitted when dropdown open/close.\n         */\n        this.open = this.isOpen.asObservable();\n        config.autoClose = 'outside';\n    }\n    changeState(state) {\n        this.isOpen.next(state);\n    }\n    ngAfterContentInit() {\n        if (!this.customDropdownToggle) {\n            throw new Error('BB Dropdown ui. Toggle content is required.');\n        }\n        if (!this.customDropdownContent) {\n            throw new Error('BB Dropdown ui. Dropdown content is required.');\n        }\n    }\n    closeMenu() {\n        if (this.dropdown) {\n            this.dropdown.close();\n        }\n    }\n}\nDropdownPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: DropdownPanelComponent, deps: [{ token: i1.NgbDropdownConfig }], target: i0.ɵɵFactoryTarget.Component });\nDropdownPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: DropdownPanelComponent, selector: \"bb-dropdown-panel-ui\", outputs: { open: \"open\" }, providers: [NgbDropdownConfig], queries: [{ propertyName: \"customDropdownContent\", first: true, predicate: DropdownMenuDirective, descendants: true, read: TemplateRef, static: true }, { propertyName: \"customDropdownToggle\", first: true, predicate: DropdownToggleDirective, descendants: true, read: TemplateRef, static: true }], viewQueries: [{ propertyName: \"dropdown\", first: true, predicate: NgbDropdown, descendants: true, static: true }], ngImport: i0, template: \"<div\\n  [attr.data-role]=\\\"'dropdown-panel'\\\"\\n  class=\\\"bb-dropdown-panel\\\"\\n  [placement]=\\\"'bottom'\\\"\\n  (openChange)=\\\"changeState($event)\\\"\\n  ngbDropdown\\n>\\n  <div ngbDropdownToggle [attr.data-role]=\\\"'dropdown-toggle'\\\" class=\\\"bb-dropdown-panel__dropdown-toggle\\\">\\n    <ng-container *ngTemplateOutlet=\\\"customDropdownToggle; context: { isOpen: isOpen | async }\\\"></ng-container>\\n  </div>\\n  <div class=\\\"bb-dropdown-panel__dropdown\\\" ngbDropdownMenu position=\\\"top\\\" [attr.data-role]=\\\"'dropdown-panel-menu'\\\">\\n    <ng-container *ngTemplateOutlet=\\\"customDropdownContent\\\"></ng-container>\\n  </div>\\n</div>\\n\", directives: [{ type: i1.NgbDropdown, selector: \"[ngbDropdown]\", inputs: [\"open\", \"placement\", \"container\", \"autoClose\", \"display\", \"dropdownClass\"], outputs: [\"openChange\"], exportAs: [\"ngbDropdown\"] }, { type: i1.NgbDropdownToggle, selector: \"[ngbDropdownToggle]\" }, { type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }, { type: i1.NgbDropdownMenu, selector: \"[ngbDropdownMenu]\" }], pipes: { \"async\": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: DropdownPanelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-dropdown-panel-ui',\n                    templateUrl: './dropdown-panel.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    providers: [NgbDropdownConfig],\n                }]\n        }], ctorParameters: function () { return [{ type: i1.NgbDropdownConfig }]; }, propDecorators: { open: [{\n                type: Output\n            }], customDropdownContent: [{\n                type: ContentChild,\n                args: [DropdownMenuDirective, { read: TemplateRef, static: true }]\n            }], customDropdownToggle: [{\n                type: ContentChild,\n                args: [DropdownToggleDirective, { read: TemplateRef, static: true }]\n            }], dropdown: [{\n                type: ViewChild,\n                args: [NgbDropdown, { static: true }]\n            }] } });\n\nclass DropdownPanelModule {\n}\nDropdownPanelModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: DropdownPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nDropdownPanelModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: DropdownPanelModule, declarations: [DropdownPanelComponent, DropdownMenuDirective, DropdownToggleDirective], imports: [CommonModule, NgbDropdownModule], exports: [DropdownPanelComponent, DropdownToggleDirective, DropdownMenuDirective] });\nDropdownPanelModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: DropdownPanelModule, imports: [[CommonModule, NgbDropdownModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: DropdownPanelModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, NgbDropdownModule],\n                    declarations: [DropdownPanelComponent, DropdownMenuDirective, DropdownToggleDirective],\n                    exports: [DropdownPanelComponent, DropdownToggleDirective, DropdownMenuDirective],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DropdownMenuDirective, DropdownPanelComponent, DropdownPanelModule, DropdownToggleDirective };\n"]},"metadata":{},"sourceType":"module"}