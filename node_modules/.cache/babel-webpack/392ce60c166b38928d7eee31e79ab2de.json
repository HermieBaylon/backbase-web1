{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i2 from '@backbase/foundation-ang/data-http';\nimport { createMocks } from '@backbase/foundation-ang/data-http';\nconst AudienceType = {\n  None: 'none',\n  Id: 'id',\n  All: 'all'\n};\nvar BannerChannel;\n\n(function (BannerChannel) {\n  BannerChannel.PriorityEnum = {\n    Low: 'low',\n    Medium: 'medium',\n    High: 'high'\n  };\n})(BannerChannel || (BannerChannel = {}));\n\nvar BannerChannelAllOf;\n\n(function (BannerChannelAllOf) {\n  BannerChannelAllOf.PriorityEnum = {\n    Low: 'low',\n    Medium: 'medium',\n    High: 'high'\n  };\n})(BannerChannelAllOf || (BannerChannelAllOf = {}));\n\nconst CampaignChannelType = {\n  Banner: 'banner',\n  MessageCenter: 'message-center'\n};\nconst CampaignStatus = {\n  Draft: 'draft',\n  Final: 'final',\n  Superseded: 'superseded',\n  Archived: 'archived',\n  Paused: 'paused'\n};\nconst SeverityLevel = {\n  ALERT: 'ALERT',\n  WARNING: 'WARNING',\n  SUCCESS: 'SUCCESS',\n  INFO: 'INFO'\n};\nconst TargetUrlDisplayModeResource = {\n  Self: 'self',\n  Blank: 'blank'\n};\nconst ENGAGEMENT_BASE_PATH = new InjectionToken('ENGAGEMENT_BASE_PATH');\nconst COLLECTION_FORMATS = {\n  'csv': ',',\n  'tsv': '   ',\n  'ssv': ' ',\n  'pipes': '|'\n};\n\nclass EngagementConfiguration {\n  constructor(configurationParameters = {}) {\n    this.apiKeys = configurationParameters.apiKeys;\n    this.username = configurationParameters.username;\n    this.password = configurationParameters.password;\n    this.accessToken = configurationParameters.accessToken;\n    this.basePath = configurationParameters.basePath;\n    this.withCredentials = configurationParameters.withCredentials;\n    this.encoder = configurationParameters.encoder;\n\n    if (configurationParameters.credentials) {\n      this.credentials = configurationParameters.credentials;\n    } else {\n      this.credentials = {};\n    }\n  }\n\n  selectHeaderContentType(contentTypes) {\n    if (contentTypes.length === 0) {\n      return undefined;\n    }\n\n    const type = contentTypes.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return contentTypes[0];\n    }\n\n    return type;\n  }\n\n  selectHeaderAccept(accepts) {\n    if (accepts.length === 0) {\n      return undefined;\n    }\n\n    const type = accepts.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return accepts[0];\n    }\n\n    return type;\n  }\n\n  isJsonMime(mime) {\n    const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n\n  lookupCredential(key) {\n    const value = this.credentials[key];\n    return typeof value === 'function' ? value() : value;\n  }\n\n}\n\nconst CONFIG_TOKEN = new InjectionToken('api-data-module EngagementConfiguration');\n\nclass EngagementApiModule {\n  constructor(parentModule, http, dataModulesManager, config) {\n    if (parentModule) {\n      throw new Error('EngagementApiModule is already loaded. Import in your base AppModule only.');\n    }\n\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' + 'See also https://github.com/angular/angular/issues/20575');\n    }\n\n    if (dataModulesManager) {\n      dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n        apiRoot: '',\n        servicePath: config.basePath || '',\n        headers: {}\n      });\n    }\n  }\n\n  static forRoot(configurationFactory) {\n    return {\n      ngModule: EngagementApiModule,\n      providers: [{\n        provide: EngagementConfiguration,\n        useFactory: configurationFactory\n      }]\n    };\n  }\n\n}\n\nEngagementApiModule.ɵfac = function EngagementApiModule_Factory(t) {\n  return new (t || EngagementApiModule)(i0.ɵɵinject(EngagementApiModule, 12), i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DataModulesManager, 8), i0.ɵɵinject(EngagementConfiguration));\n};\n\nEngagementApiModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: EngagementApiModule\n});\nEngagementApiModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [],\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EngagementApiModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [],\n      exports: [],\n      providers: []\n    }]\n  }], function () {\n    return [{\n      type: EngagementApiModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: i1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.DataModulesManager,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: EngagementConfiguration\n    }];\n  }, null);\n})();\n\nclass CustomHttpParameterCodec {\n  encodeKey(k) {\n    return encodeURIComponent(k);\n  }\n\n  encodeValue(v) {\n    return encodeURIComponent(v);\n  }\n\n  decodeKey(k) {\n    return decodeURIComponent(k);\n  }\n\n  decodeValue(v) {\n    return decodeURIComponent(v);\n  }\n\n}\n\nclass CampaignService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '/engagements';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new EngagementConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  createCampaign(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _campaignRequestResource = requestParameters[\"campaignRequestResource\"];\n\n    if (_campaignRequestResource === null || _campaignRequestResource === undefined) {\n      throw new Error('Required parameter campaignRequestResource was null or undefined when calling createCampaign.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/engagements/custom`, _campaignRequestResource, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  createCampaignUrl(requestParameters) {\n    const _campaignRequestResource = requestParameters[\"campaignRequestResource\"];\n\n    if (_campaignRequestResource === null || _campaignRequestResource === undefined) {\n      throw new Error('Required parameter campaignRequestResource was null or undefined when calling createCampaign.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v1/engagements/custom`;\n  }\n\n  deleteCampaign(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _campaignId = requestParameters[\"campaignId\"];\n\n    if (_campaignId === null || _campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling deleteCampaign.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.delete(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  deleteCampaignUrl(requestParameters) {\n    const _campaignId = requestParameters[\"campaignId\"];\n\n    if (_campaignId === null || _campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling deleteCampaign.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}`;\n  }\n\n  disableCampaign(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _campaignId = requestParameters[\"campaignId\"];\n\n    if (_campaignId === null || _campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling disableCampaign.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/disable`, null, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  disableCampaignUrl(requestParameters) {\n    const _campaignId = requestParameters[\"campaignId\"];\n\n    if (_campaignId === null || _campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling disableCampaign.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/disable`;\n  }\n\n  enableCampaign(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _campaignId = requestParameters[\"campaignId\"];\n\n    if (_campaignId === null || _campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling enableCampaign.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/enable`, null, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  enableCampaignUrl(requestParameters) {\n    const _campaignId = requestParameters[\"campaignId\"];\n\n    if (_campaignId === null || _campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling enableCampaign.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/enable`;\n  }\n\n  finalizeCampaign(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _campaignId = requestParameters[\"campaignId\"];\n\n    if (_campaignId === null || _campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling finalizeCampaign.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/final`, null, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  finalizeCampaignUrl(requestParameters) {\n    const _campaignId = requestParameters[\"campaignId\"];\n\n    if (_campaignId === null || _campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling finalizeCampaign.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/final`;\n  }\n\n  getCampaignByCampaignId(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _campaignId = requestParameters[\"campaignId\"];\n\n    if (_campaignId === null || _campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling getCampaignByCampaignId.');\n    }\n\n    const _status = requestParameters[\"status\"];\n    const _version = requestParameters[\"version\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_status) {\n      queryParameters = this.addToHttpParams(queryParameters, _status.join(COLLECTION_FORMATS['csv']), 'status');\n    }\n\n    if (_version !== undefined && _version !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _version, 'version');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}`, {\n      params: queryParameters,\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getCampaignByCampaignIdUrl(requestParameters) {\n    const _campaignId = requestParameters[\"campaignId\"];\n\n    if (_campaignId === null || _campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling getCampaignByCampaignId.');\n    }\n\n    const _status = requestParameters[\"status\"];\n    const _version = requestParameters[\"version\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_status) {\n      queryParameters = this.addToHttpParams(queryParameters, _status.join(COLLECTION_FORMATS['csv']), 'status');\n    }\n\n    if (_version !== undefined && _version !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _version, 'version');\n    }\n\n    const queryString = queryParameters.toString();\n    return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}${queryString ? `?${queryString}` : ''}`;\n  }\n\n  getCampaigns(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _from = requestParameters[\"from\"];\n    const _size = requestParameters[\"size\"];\n    const _endDateAfter = requestParameters[\"endDateAfter\"];\n    const _endDateBefore = requestParameters[\"endDateBefore\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_from !== undefined && _from !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n    }\n\n    if (_size !== undefined && _size !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n    }\n\n    if (_endDateAfter !== undefined && _endDateAfter !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _endDateAfter, 'endDateAfter');\n    }\n\n    if (_endDateBefore !== undefined && _endDateBefore !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _endDateBefore, 'endDateBefore');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/engagements/custom`, {\n      params: queryParameters,\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getCampaignsUrl(requestParameters) {\n    const _from = requestParameters[\"from\"];\n    const _size = requestParameters[\"size\"];\n    const _endDateAfter = requestParameters[\"endDateAfter\"];\n    const _endDateBefore = requestParameters[\"endDateBefore\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_from !== undefined && _from !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n    }\n\n    if (_size !== undefined && _size !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n    }\n\n    if (_endDateAfter !== undefined && _endDateAfter !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _endDateAfter, 'endDateAfter');\n    }\n\n    if (_endDateBefore !== undefined && _endDateBefore !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _endDateBefore, 'endDateBefore');\n    }\n\n    const queryString = queryParameters.toString();\n    return `${this.configuration.basePath}/client-api/v1/engagements/custom${queryString ? `?${queryString}` : ''}`;\n  }\n\n  updateCampaign(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _campaignId = requestParameters[\"campaignId\"];\n\n    if (_campaignId === null || _campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling updateCampaign.');\n    }\n\n    const _campaignRequestResource = requestParameters[\"campaignRequestResource\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}`, _campaignRequestResource, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  updateCampaignUrl(requestParameters) {\n    const _campaignId = requestParameters[\"campaignId\"];\n\n    if (_campaignId === null || _campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling updateCampaign.');\n    }\n\n    const _campaignRequestResource = requestParameters[\"campaignRequestResource\"];\n    return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}`;\n  }\n\n}\n\nCampaignService.ɵfac = function CampaignService_Factory(t) {\n  return new (t || CampaignService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(ENGAGEMENT_BASE_PATH, 8), i0.ɵɵinject(EngagementConfiguration, 8));\n};\n\nCampaignService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CampaignService,\n  factory: CampaignService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CampaignService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ENGAGEMENT_BASE_PATH]\n      }]\n    }, {\n      type: EngagementConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst CampaignServiceCreateCampaignMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/engagements/custom\",\n  method: \"POST\",\n  responses: [{\n    status: 201,\n    body: \"\"\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }]\n}]);\nconst CampaignServiceDeleteCampaignMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}\",\n  method: \"DELETE\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}]);\nconst CampaignServiceDisableCampaignMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}/disable\",\n  method: \"PUT\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}]);\nconst CampaignServiceEnableCampaignMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}/enable\",\n  method: \"PUT\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}]);\nconst CampaignServiceFinalizeCampaignMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}/final\",\n  method: \"PUT\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}]);\nconst CampaignServiceGetCampaignByCampaignIdMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}\",\n  method: \"GET\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}]);\nconst CampaignServiceGetCampaignsMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/engagements/custom\",\n  method: \"GET\",\n  responses: [{\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }]\n}]);\nconst CampaignServiceUpdateCampaignMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}\",\n  method: \"PUT\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 409,\n    body: {\n      \"message\": \"Conflict error\",\n      \"errors\": [{\n        \"message\": \"The request could not be completed due to a conflict with the current state of the resource.\",\n        \"key\": \"transactions.api.billingstatus.transaction\",\n        \"context\": {\n          \"billingStatus\": \"BILLED\"\n        }\n      }]\n    }\n  }]\n}]);\nconst CampaignServiceMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/engagements/custom\",\n  method: \"POST\",\n  responses: [{\n    status: 201,\n    body: \"\"\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}\",\n  method: \"DELETE\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}/disable\",\n  method: \"PUT\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}/enable\",\n  method: \"PUT\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}/final\",\n  method: \"PUT\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}\",\n  method: \"GET\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/engagements/client-api/v1/engagements/custom\",\n  method: \"GET\",\n  responses: [{\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}\",\n  method: \"PUT\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 409,\n    body: {\n      \"message\": \"Conflict error\",\n      \"errors\": [{\n        \"message\": \"The request could not be completed due to a conflict with the current state of the resource.\",\n        \"key\": \"transactions.api.billingstatus.transaction\",\n        \"context\": {\n          \"billingStatus\": \"BILLED\"\n        }\n      }]\n    }\n  }]\n}]);\n\nclass CampaignMetricsService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '/engagements';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new EngagementConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getCampaignMetrics(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _campaignId = requestParameters[\"campaignId\"];\n\n    if (_campaignId === null || _campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling getCampaignMetrics.');\n    }\n\n    const _channelId = requestParameters[\"channelId\"];\n\n    if (_channelId === null || _channelId === undefined) {\n      throw new Error('Required parameter channelId was null or undefined when calling getCampaignMetrics.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/channels/${encodeURIComponent(String(_channelId))}/metrics`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getCampaignMetricsUrl(requestParameters) {\n    const _campaignId = requestParameters[\"campaignId\"];\n\n    if (_campaignId === null || _campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling getCampaignMetrics.');\n    }\n\n    const _channelId = requestParameters[\"channelId\"];\n\n    if (_channelId === null || _channelId === undefined) {\n      throw new Error('Required parameter channelId was null or undefined when calling getCampaignMetrics.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/channels/${encodeURIComponent(String(_channelId))}/metrics`;\n  }\n\n  redirectCampaign(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _utmContent = requestParameters[\"utmContent\"];\n\n    if (_utmContent === null || _utmContent === undefined) {\n      throw new Error('Required parameter utmContent was null or undefined when calling redirectCampaign.');\n    }\n\n    const _utmBanner = requestParameters[\"utmBanner\"];\n\n    if (_utmBanner === null || _utmBanner === undefined) {\n      throw new Error('Required parameter utmBanner was null or undefined when calling redirectCampaign.');\n    }\n\n    const _key = requestParameters[\"key\"];\n\n    if (_key === null || _key === undefined) {\n      throw new Error('Required parameter key was null or undefined when calling redirectCampaign.');\n    }\n\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_utmContent !== undefined && _utmContent !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _utmContent, 'utm_content');\n    }\n\n    if (_utmBanner !== undefined && _utmBanner !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _utmBanner, 'utm_banner');\n    }\n\n    if (_key !== undefined && _key !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _key, 'key');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/banner/redirect`, {\n      params: queryParameters,\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  redirectCampaignUrl(requestParameters) {\n    const _utmContent = requestParameters[\"utmContent\"];\n\n    if (_utmContent === null || _utmContent === undefined) {\n      throw new Error('Required parameter utmContent was null or undefined when calling redirectCampaign.');\n    }\n\n    const _utmBanner = requestParameters[\"utmBanner\"];\n\n    if (_utmBanner === null || _utmBanner === undefined) {\n      throw new Error('Required parameter utmBanner was null or undefined when calling redirectCampaign.');\n    }\n\n    const _key = requestParameters[\"key\"];\n\n    if (_key === null || _key === undefined) {\n      throw new Error('Required parameter key was null or undefined when calling redirectCampaign.');\n    }\n\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_utmContent !== undefined && _utmContent !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _utmContent, 'utm_content');\n    }\n\n    if (_utmBanner !== undefined && _utmBanner !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _utmBanner, 'utm_banner');\n    }\n\n    if (_key !== undefined && _key !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _key, 'key');\n    }\n\n    const queryString = queryParameters.toString();\n    return `${this.configuration.basePath}/client-api/v1/banner/redirect${queryString ? `?${queryString}` : ''}`;\n  }\n\n}\n\nCampaignMetricsService.ɵfac = function CampaignMetricsService_Factory(t) {\n  return new (t || CampaignMetricsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(ENGAGEMENT_BASE_PATH, 8), i0.ɵɵinject(EngagementConfiguration, 8));\n};\n\nCampaignMetricsService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CampaignMetricsService,\n  factory: CampaignMetricsService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CampaignMetricsService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ENGAGEMENT_BASE_PATH]\n      }]\n    }, {\n      type: EngagementConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst CampaignMetricsServiceGetCampaignMetricsMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}/channels/{channelId}/metrics\",\n  method: \"GET\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}]);\nconst CampaignMetricsServiceRedirectCampaignMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/banner/redirect\",\n  method: \"GET\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}]);\nconst CampaignMetricsServiceMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}/channels/{channelId}/metrics\",\n  method: \"GET\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/engagements/client-api/v1/banner/redirect\",\n  method: \"GET\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}]);\n\nclass GeneralNotificationService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '/engagements';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new EngagementConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getGeneralNotificationById(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling getGeneralNotificationById.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/general-notifications/${encodeURIComponent(String(_id))}`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getGeneralNotificationByIdUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling getGeneralNotificationById.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v1/general-notifications/${encodeURIComponent(String(_id))}`;\n  }\n\n  getGeneralNotifications(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _from = requestParameters[\"from\"];\n    const _size = requestParameters[\"size\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_from !== undefined && _from !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n    }\n\n    if (_size !== undefined && _size !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/general-notifications`, {\n      params: queryParameters,\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getGeneralNotificationsUrl(requestParameters) {\n    const _from = requestParameters[\"from\"];\n    const _size = requestParameters[\"size\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_from !== undefined && _from !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n    }\n\n    if (_size !== undefined && _size !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n    }\n\n    const queryString = queryParameters.toString();\n    return `${this.configuration.basePath}/client-api/v1/general-notifications${queryString ? `?${queryString}` : ''}`;\n  }\n\n}\n\nGeneralNotificationService.ɵfac = function GeneralNotificationService_Factory(t) {\n  return new (t || GeneralNotificationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(ENGAGEMENT_BASE_PATH, 8), i0.ɵɵinject(EngagementConfiguration, 8));\n};\n\nGeneralNotificationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: GeneralNotificationService,\n  factory: GeneralNotificationService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GeneralNotificationService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ENGAGEMENT_BASE_PATH]\n      }]\n    }, {\n      type: EngagementConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst GeneralNotificationServiceGetGeneralNotificationByIdMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/general-notifications/{id}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"$ref\": \"#/components/examples/GeneralNotificationExample/value\"\n    }]\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}]);\nconst GeneralNotificationServiceGetGeneralNotificationsMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/general-notifications\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"value\": [{\n        \"$ref\": \"#/components/examples/GeneralNotificationSummaryExample1/value\"\n      }, {\n        \"$ref\": \"#/components/examples/GeneralNotificationSummaryExample2/value\"\n      }]\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}]);\nconst GeneralNotificationServiceMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/general-notifications/{id}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"$ref\": \"#/components/examples/GeneralNotificationExample/value\"\n    }]\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/engagements/client-api/v1/general-notifications\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"value\": [{\n        \"$ref\": \"#/components/examples/GeneralNotificationSummaryExample1/value\"\n      }, {\n        \"$ref\": \"#/components/examples/GeneralNotificationSummaryExample2/value\"\n      }]\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}]);\n\nclass NotificationPreferenceService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '/engagements';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new EngagementConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  createNotificationPreference(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _notificationPreferencePostRequest = requestParameters[\"notificationPreferencePostRequest\"];\n\n    if (_notificationPreferencePostRequest === null || _notificationPreferencePostRequest === undefined) {\n      throw new Error('Required parameter notificationPreferencePostRequest was null or undefined when calling createNotificationPreference.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/notification-preferences`, _notificationPreferencePostRequest, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  createNotificationPreferenceUrl(requestParameters) {\n    const _notificationPreferencePostRequest = requestParameters[\"notificationPreferencePostRequest\"];\n\n    if (_notificationPreferencePostRequest === null || _notificationPreferencePostRequest === undefined) {\n      throw new Error('Required parameter notificationPreferencePostRequest was null or undefined when calling createNotificationPreference.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v1/notification-preferences`;\n  }\n\n  getNotificationPreferences(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _generalNotificationId = requestParameters[\"generalNotificationId\"];\n    const _active = requestParameters[\"active\"];\n    const _entityId = requestParameters[\"entityId\"];\n    const _entityType = requestParameters[\"entityType\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_generalNotificationId !== undefined && _generalNotificationId !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _generalNotificationId, 'generalNotificationId');\n    }\n\n    if (_active !== undefined && _active !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _active, 'active');\n    }\n\n    if (_entityId !== undefined && _entityId !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _entityId, 'entityId');\n    }\n\n    if (_entityType !== undefined && _entityType !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _entityType, 'entityType');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/notification-preferences`, {\n      params: queryParameters,\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getNotificationPreferencesUrl(requestParameters) {\n    const _generalNotificationId = requestParameters[\"generalNotificationId\"];\n    const _active = requestParameters[\"active\"];\n    const _entityId = requestParameters[\"entityId\"];\n    const _entityType = requestParameters[\"entityType\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_generalNotificationId !== undefined && _generalNotificationId !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _generalNotificationId, 'generalNotificationId');\n    }\n\n    if (_active !== undefined && _active !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _active, 'active');\n    }\n\n    if (_entityId !== undefined && _entityId !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _entityId, 'entityId');\n    }\n\n    if (_entityType !== undefined && _entityType !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _entityType, 'entityType');\n    }\n\n    const queryString = queryParameters.toString();\n    return `${this.configuration.basePath}/client-api/v1/notification-preferences${queryString ? `?${queryString}` : ''}`;\n  }\n\n  updateNotificationPreference(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling updateNotificationPreference.');\n    }\n\n    const _notificationPreferencePutRequest = requestParameters[\"notificationPreferencePutRequest\"];\n\n    if (_notificationPreferencePutRequest === null || _notificationPreferencePutRequest === undefined) {\n      throw new Error('Required parameter notificationPreferencePutRequest was null or undefined when calling updateNotificationPreference.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/notification-preferences/${encodeURIComponent(String(_id))}`, _notificationPreferencePutRequest, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  updateNotificationPreferenceUrl(requestParameters) {\n    const _id = requestParameters[\"id\"];\n\n    if (_id === null || _id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling updateNotificationPreference.');\n    }\n\n    const _notificationPreferencePutRequest = requestParameters[\"notificationPreferencePutRequest\"];\n\n    if (_notificationPreferencePutRequest === null || _notificationPreferencePutRequest === undefined) {\n      throw new Error('Required parameter notificationPreferencePutRequest was null or undefined when calling updateNotificationPreference.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v1/notification-preferences/${encodeURIComponent(String(_id))}`;\n  }\n\n}\n\nNotificationPreferenceService.ɵfac = function NotificationPreferenceService_Factory(t) {\n  return new (t || NotificationPreferenceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(ENGAGEMENT_BASE_PATH, 8), i0.ɵɵinject(EngagementConfiguration, 8));\n};\n\nNotificationPreferenceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NotificationPreferenceService,\n  factory: NotificationPreferenceService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NotificationPreferenceService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ENGAGEMENT_BASE_PATH]\n      }]\n    }, {\n      type: EngagementConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst NotificationPreferenceServiceCreateNotificationPreferenceMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/notification-preferences\",\n  method: \"POST\",\n  responses: [{\n    status: 201,\n    body: {\n      \"$ref\": \"#/components/examples/NotificationPreferenceResponseExample/value\"\n    }\n  }, {\n    status: 201,\n    body: {\n      \"channels\": [{\n        \"userCanChange\": true,\n        \"channel\": \"email\",\n        \"enabled\": true\n      }, {\n        \"userCanChange\": true,\n        \"channel\": \"email\",\n        \"enabled\": true\n      }],\n      \"lastUpdatedAt\": \"2000-01-23T04:56:07.000+00:00\",\n      \"generalNotificationId\": \"generalNotificationId\",\n      \"active\": true,\n      \"id\": \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n      \"createdOn\": \"2000-01-23T04:56:07.000+00:00\",\n      \"userConditions\": {\n        \"eRef\": \"6be7c465-37a7-4f1e-98b7-15d6c636c566\",\n        \"eType\": \"arrangement\",\n        \"conditions\": {\n          \"amount\": 100\n        }\n      }\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}]);\nconst NotificationPreferenceServiceGetNotificationPreferencesMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/notification-preferences\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"value\": {\n        \"totalCount\": 2,\n        \"notificationPreferences\": [{\n          \"$ref\": \"#/components/examples/NotificationPreferenceGetExample2/value\"\n        }, {\n          \"$ref\": \"#/components/examples/NotificationPreferenceGetExample3/value\"\n        }]\n      }\n    }\n  }, {\n    status: 200,\n    body: {\n      \"value\": {\n        \"totalCount\": 2,\n        \"notificationPreferences\": [{\n          \"$ref\": \"#/components/examples/NotificationPreferenceGetExample1/value\"\n        }, {\n          \"$ref\": \"#/components/examples/NotificationPreferenceGetExample2/value\"\n        }]\n      }\n    }\n  }]\n}]);\nconst NotificationPreferenceServiceUpdateNotificationPreferenceMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/notification-preferences/{id}\",\n  method: \"PUT\",\n  responses: [{\n    status: 200,\n    body: {\n      \"$ref\": \"#/components/examples/NotificationPreferenceResponseExample/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"channels\": [{\n        \"userCanChange\": true,\n        \"channel\": \"email\",\n        \"enabled\": true\n      }, {\n        \"userCanChange\": true,\n        \"channel\": \"email\",\n        \"enabled\": true\n      }],\n      \"lastUpdatedAt\": \"2000-01-23T04:56:07.000+00:00\",\n      \"generalNotificationId\": \"generalNotificationId\",\n      \"active\": true,\n      \"id\": \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n      \"createdOn\": \"2000-01-23T04:56:07.000+00:00\",\n      \"userConditions\": {\n        \"eRef\": \"6be7c465-37a7-4f1e-98b7-15d6c636c566\",\n        \"eType\": \"arrangement\",\n        \"conditions\": {\n          \"amount\": 100\n        }\n      }\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}]);\nconst NotificationPreferenceServiceMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/notification-preferences\",\n  method: \"POST\",\n  responses: [{\n    status: 201,\n    body: {\n      \"$ref\": \"#/components/examples/NotificationPreferenceResponseExample/value\"\n    }\n  }, {\n    status: 201,\n    body: {\n      \"channels\": [{\n        \"userCanChange\": true,\n        \"channel\": \"email\",\n        \"enabled\": true\n      }, {\n        \"userCanChange\": true,\n        \"channel\": \"email\",\n        \"enabled\": true\n      }],\n      \"lastUpdatedAt\": \"2000-01-23T04:56:07.000+00:00\",\n      \"generalNotificationId\": \"generalNotificationId\",\n      \"active\": true,\n      \"id\": \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n      \"createdOn\": \"2000-01-23T04:56:07.000+00:00\",\n      \"userConditions\": {\n        \"eRef\": \"6be7c465-37a7-4f1e-98b7-15d6c636c566\",\n        \"eType\": \"arrangement\",\n        \"conditions\": {\n          \"amount\": 100\n        }\n      }\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}, {\n  urlPattern: \"/engagements/client-api/v1/notification-preferences\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"value\": {\n        \"totalCount\": 2,\n        \"notificationPreferences\": [{\n          \"$ref\": \"#/components/examples/NotificationPreferenceGetExample2/value\"\n        }, {\n          \"$ref\": \"#/components/examples/NotificationPreferenceGetExample3/value\"\n        }]\n      }\n    }\n  }, {\n    status: 200,\n    body: {\n      \"value\": {\n        \"totalCount\": 2,\n        \"notificationPreferences\": [{\n          \"$ref\": \"#/components/examples/NotificationPreferenceGetExample1/value\"\n        }, {\n          \"$ref\": \"#/components/examples/NotificationPreferenceGetExample2/value\"\n        }]\n      }\n    }\n  }]\n}, {\n  urlPattern: \"/engagements/client-api/v1/notification-preferences/{id}\",\n  method: \"PUT\",\n  responses: [{\n    status: 200,\n    body: {\n      \"$ref\": \"#/components/examples/NotificationPreferenceResponseExample/value\"\n    }\n  }, {\n    status: 200,\n    body: {\n      \"channels\": [{\n        \"userCanChange\": true,\n        \"channel\": \"email\",\n        \"enabled\": true\n      }, {\n        \"userCanChange\": true,\n        \"channel\": \"email\",\n        \"enabled\": true\n      }],\n      \"lastUpdatedAt\": \"2000-01-23T04:56:07.000+00:00\",\n      \"generalNotificationId\": \"generalNotificationId\",\n      \"active\": true,\n      \"id\": \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n      \"createdOn\": \"2000-01-23T04:56:07.000+00:00\",\n      \"userConditions\": {\n        \"eRef\": \"6be7c465-37a7-4f1e-98b7-15d6c636c566\",\n        \"eType\": \"arrangement\",\n        \"conditions\": {\n          \"amount\": 100\n        }\n      }\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }]\n}]);\n\nclass SelectCampaignService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '/engagements';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new EngagementConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  selectCampaign(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _spaceId = requestParameters[\"spaceId\"];\n\n    if (_spaceId === null || _spaceId === undefined) {\n      throw new Error('Required parameter spaceId was null or undefined when calling selectCampaign.');\n    }\n\n    const _dimensions = requestParameters[\"dimensions\"];\n\n    if (_dimensions === null || _dimensions === undefined) {\n      throw new Error('Required parameter dimensions was null or undefined when calling selectCampaign.');\n    }\n\n    const _locale = requestParameters[\"locale\"];\n\n    if (_locale === null || _locale === undefined) {\n      throw new Error('Required parameter locale was null or undefined when calling selectCampaign.');\n    }\n\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_spaceId !== undefined && _spaceId !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _spaceId, 'spaceId');\n    }\n\n    if (_dimensions !== undefined && _dimensions !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _dimensions, 'dimensions');\n    }\n\n    if (_locale !== undefined && _locale !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _locale, 'locale');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/banner`, {\n      params: queryParameters,\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  selectCampaignUrl(requestParameters) {\n    const _spaceId = requestParameters[\"spaceId\"];\n\n    if (_spaceId === null || _spaceId === undefined) {\n      throw new Error('Required parameter spaceId was null or undefined when calling selectCampaign.');\n    }\n\n    const _dimensions = requestParameters[\"dimensions\"];\n\n    if (_dimensions === null || _dimensions === undefined) {\n      throw new Error('Required parameter dimensions was null or undefined when calling selectCampaign.');\n    }\n\n    const _locale = requestParameters[\"locale\"];\n\n    if (_locale === null || _locale === undefined) {\n      throw new Error('Required parameter locale was null or undefined when calling selectCampaign.');\n    }\n\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_spaceId !== undefined && _spaceId !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _spaceId, 'spaceId');\n    }\n\n    if (_dimensions !== undefined && _dimensions !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _dimensions, 'dimensions');\n    }\n\n    if (_locale !== undefined && _locale !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _locale, 'locale');\n    }\n\n    const queryString = queryParameters.toString();\n    return `${this.configuration.basePath}/client-api/v1/banner${queryString ? `?${queryString}` : ''}`;\n  }\n\n}\n\nSelectCampaignService.ɵfac = function SelectCampaignService_Factory(t) {\n  return new (t || SelectCampaignService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(ENGAGEMENT_BASE_PATH, 8), i0.ɵɵinject(EngagementConfiguration, 8));\n};\n\nSelectCampaignService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SelectCampaignService,\n  factory: SelectCampaignService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SelectCampaignService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ENGAGEMENT_BASE_PATH]\n      }]\n    }, {\n      type: EngagementConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst SelectCampaignServiceSelectCampaignMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/banner\",\n  method: \"GET\",\n  responses: [{\n    status: 204,\n    body: \"\"\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }]\n}]);\nconst SelectCampaignServiceMocksProvider = createMocks([{\n  urlPattern: \"/engagements/client-api/v1/banner\",\n  method: \"GET\",\n  responses: [{\n    status: 204,\n    body: \"\"\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 401,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to invalid credentials.\",\n        \"key\": \"common.api.token\",\n        \"context\": {\n          \"accessToken\": \"expired\"\n        }\n      }]\n    }\n  }]\n}]);\nexport { AudienceType, BannerChannel, BannerChannelAllOf, COLLECTION_FORMATS, CONFIG_TOKEN, CampaignChannelType, CampaignMetricsService, CampaignMetricsServiceGetCampaignMetricsMocksProvider, CampaignMetricsServiceMocksProvider, CampaignMetricsServiceRedirectCampaignMocksProvider, CampaignService, CampaignServiceCreateCampaignMocksProvider, CampaignServiceDeleteCampaignMocksProvider, CampaignServiceDisableCampaignMocksProvider, CampaignServiceEnableCampaignMocksProvider, CampaignServiceFinalizeCampaignMocksProvider, CampaignServiceGetCampaignByCampaignIdMocksProvider, CampaignServiceGetCampaignsMocksProvider, CampaignServiceMocksProvider, CampaignServiceUpdateCampaignMocksProvider, CampaignStatus, ENGAGEMENT_BASE_PATH, EngagementApiModule, EngagementConfiguration, GeneralNotificationService, GeneralNotificationServiceGetGeneralNotificationByIdMocksProvider, GeneralNotificationServiceGetGeneralNotificationsMocksProvider, GeneralNotificationServiceMocksProvider, NotificationPreferenceService, NotificationPreferenceServiceCreateNotificationPreferenceMocksProvider, NotificationPreferenceServiceGetNotificationPreferencesMocksProvider, NotificationPreferenceServiceMocksProvider, NotificationPreferenceServiceUpdateNotificationPreferenceMocksProvider, SelectCampaignService, SelectCampaignServiceMocksProvider, SelectCampaignServiceSelectCampaignMocksProvider, SeverityLevel, TargetUrlDisplayModeResource };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/engagement-http-ang/fesm2015/backbase-engagement-http-ang.js"],"names":["i0","InjectionToken","NgModule","Optional","SkipSelf","Injectable","Inject","i1","HttpHeaders","HttpParams","i2","createMocks","AudienceType","None","Id","All","BannerChannel","PriorityEnum","Low","Medium","High","BannerChannelAllOf","CampaignChannelType","Banner","MessageCenter","CampaignStatus","Draft","Final","Superseded","Archived","Paused","SeverityLevel","ALERT","WARNING","SUCCESS","INFO","TargetUrlDisplayModeResource","Self","Blank","ENGAGEMENT_BASE_PATH","COLLECTION_FORMATS","EngagementConfiguration","constructor","configurationParameters","apiKeys","username","password","accessToken","basePath","withCredentials","encoder","credentials","selectHeaderContentType","contentTypes","length","undefined","type","find","x","isJsonMime","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","lookupCredential","key","value","CONFIG_TOKEN","EngagementApiModule","parentModule","http","dataModulesManager","config","Error","setModuleConfig","apiRoot","servicePath","headers","forRoot","configurationFactory","ngModule","providers","provide","useFactory","ɵfac","HttpClient","DataModulesManager","ɵmod","ɵinj","args","imports","declarations","exports","decorators","CustomHttpParameterCodec","encodeKey","k","encodeURIComponent","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","CampaignService","httpClient","configuration","defaultHeaders","addToHttpParams","httpParams","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","append","toISOString","substr","Object","keys","createCampaign","requestParameters","observe","reportProgress","options","_campaignRequestResource","httpHeaderAcceptSelected","httpHeaderAccept","httpHeaderAccepts","set","consumes","httpContentTypeSelected","responseType","startsWith","post","createCampaignUrl","deleteCampaign","_campaignId","delete","String","deleteCampaignUrl","disableCampaign","put","disableCampaignUrl","enableCampaign","enableCampaignUrl","finalizeCampaign","finalizeCampaignUrl","getCampaignByCampaignId","_status","_version","queryParameters","join","get","params","getCampaignByCampaignIdUrl","queryString","toString","getCampaigns","_from","_size","_endDateAfter","_endDateBefore","getCampaignsUrl","updateCampaign","updateCampaignUrl","ɵprov","providedIn","CampaignServiceCreateCampaignMocksProvider","urlPattern","method","responses","status","body","CampaignServiceDeleteCampaignMocksProvider","CampaignServiceDisableCampaignMocksProvider","CampaignServiceEnableCampaignMocksProvider","CampaignServiceFinalizeCampaignMocksProvider","CampaignServiceGetCampaignByCampaignIdMocksProvider","CampaignServiceGetCampaignsMocksProvider","CampaignServiceUpdateCampaignMocksProvider","CampaignServiceMocksProvider","CampaignMetricsService","getCampaignMetrics","_channelId","getCampaignMetricsUrl","redirectCampaign","_utmContent","_utmBanner","_key","redirectCampaignUrl","CampaignMetricsServiceGetCampaignMetricsMocksProvider","CampaignMetricsServiceRedirectCampaignMocksProvider","CampaignMetricsServiceMocksProvider","GeneralNotificationService","getGeneralNotificationById","_id","getGeneralNotificationByIdUrl","getGeneralNotifications","getGeneralNotificationsUrl","GeneralNotificationServiceGetGeneralNotificationByIdMocksProvider","GeneralNotificationServiceGetGeneralNotificationsMocksProvider","GeneralNotificationServiceMocksProvider","NotificationPreferenceService","createNotificationPreference","_notificationPreferencePostRequest","createNotificationPreferenceUrl","getNotificationPreferences","_generalNotificationId","_active","_entityId","_entityType","getNotificationPreferencesUrl","updateNotificationPreference","_notificationPreferencePutRequest","updateNotificationPreferenceUrl","NotificationPreferenceServiceCreateNotificationPreferenceMocksProvider","NotificationPreferenceServiceGetNotificationPreferencesMocksProvider","NotificationPreferenceServiceUpdateNotificationPreferenceMocksProvider","NotificationPreferenceServiceMocksProvider","SelectCampaignService","selectCampaign","_spaceId","_dimensions","_locale","selectCampaignUrl","SelectCampaignServiceSelectCampaignMocksProvider","SelectCampaignServiceMocksProvider"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i2 from '@backbase/foundation-ang/data-http';\nimport { createMocks } from '@backbase/foundation-ang/data-http';\n\nconst AudienceType = {\n    None: 'none',\n    Id: 'id',\n    All: 'all'\n};\n\nvar BannerChannel;\n(function (BannerChannel) {\n    BannerChannel.PriorityEnum = {\n        Low: 'low',\n        Medium: 'medium',\n        High: 'high'\n    };\n})(BannerChannel || (BannerChannel = {}));\n\nvar BannerChannelAllOf;\n(function (BannerChannelAllOf) {\n    BannerChannelAllOf.PriorityEnum = {\n        Low: 'low',\n        Medium: 'medium',\n        High: 'high'\n    };\n})(BannerChannelAllOf || (BannerChannelAllOf = {}));\n\nconst CampaignChannelType = {\n    Banner: 'banner',\n    MessageCenter: 'message-center'\n};\n\nconst CampaignStatus = {\n    Draft: 'draft',\n    Final: 'final',\n    Superseded: 'superseded',\n    Archived: 'archived',\n    Paused: 'paused'\n};\n\nconst SeverityLevel = {\n    ALERT: 'ALERT',\n    WARNING: 'WARNING',\n    SUCCESS: 'SUCCESS',\n    INFO: 'INFO'\n};\n\nconst TargetUrlDisplayModeResource = {\n    Self: 'self',\n    Blank: 'blank'\n};\n\nconst ENGAGEMENT_BASE_PATH = new InjectionToken('ENGAGEMENT_BASE_PATH');\nconst COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n};\n\nclass EngagementConfiguration {\n    constructor(configurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n    selectHeaderContentType(contentTypes) {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n        const type = contentTypes.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n    selectHeaderAccept(accepts) {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n        const type = accepts.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n    isJsonMime(mime) {\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n    lookupCredential(key) {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\nconst CONFIG_TOKEN = new InjectionToken('api-data-module EngagementConfiguration');\n\nclass EngagementApiModule {\n    constructor(parentModule, http, dataModulesManager, config) {\n        if (parentModule) {\n            throw new Error('EngagementApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n                'See also https://github.com/angular/angular/issues/20575');\n        }\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n    static forRoot(configurationFactory) {\n        return {\n            ngModule: EngagementApiModule,\n            providers: [{ provide: EngagementConfiguration, useFactory: configurationFactory }]\n        };\n    }\n}\nEngagementApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: EngagementApiModule, deps: [{ token: EngagementApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: EngagementConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });\nEngagementApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: EngagementApiModule });\nEngagementApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: EngagementApiModule, providers: [], imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: EngagementApiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [],\n                    declarations: [],\n                    exports: [],\n                    providers: []\n                }]\n        }], ctorParameters: function () { return [{ type: EngagementApiModule, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DataModulesManager, decorators: [{\n                    type: Optional\n                }] }, { type: EngagementConfiguration }]; } });\n\nclass CustomHttpParameterCodec {\n    encodeKey(k) {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v) {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k) {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v) {\n        return decodeURIComponent(v);\n    }\n}\n\nclass CampaignService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '/engagements';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new EngagementConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    createCampaign(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _campaignRequestResource = requestParameters[\"campaignRequestResource\"];\n        if (_campaignRequestResource === null || _campaignRequestResource === undefined) {\n            throw new Error('Required parameter campaignRequestResource was null or undefined when calling createCampaign.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/engagements/custom`, _campaignRequestResource, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    createCampaignUrl(requestParameters) {\n        const _campaignRequestResource = requestParameters[\"campaignRequestResource\"];\n        if (_campaignRequestResource === null || _campaignRequestResource === undefined) {\n            throw new Error('Required parameter campaignRequestResource was null or undefined when calling createCampaign.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/engagements/custom`;\n    }\n    deleteCampaign(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _campaignId = requestParameters[\"campaignId\"];\n        if (_campaignId === null || _campaignId === undefined) {\n            throw new Error('Required parameter campaignId was null or undefined when calling deleteCampaign.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    deleteCampaignUrl(requestParameters) {\n        const _campaignId = requestParameters[\"campaignId\"];\n        if (_campaignId === null || _campaignId === undefined) {\n            throw new Error('Required parameter campaignId was null or undefined when calling deleteCampaign.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}`;\n    }\n    disableCampaign(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _campaignId = requestParameters[\"campaignId\"];\n        if (_campaignId === null || _campaignId === undefined) {\n            throw new Error('Required parameter campaignId was null or undefined when calling disableCampaign.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/disable`, null, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    disableCampaignUrl(requestParameters) {\n        const _campaignId = requestParameters[\"campaignId\"];\n        if (_campaignId === null || _campaignId === undefined) {\n            throw new Error('Required parameter campaignId was null or undefined when calling disableCampaign.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/disable`;\n    }\n    enableCampaign(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _campaignId = requestParameters[\"campaignId\"];\n        if (_campaignId === null || _campaignId === undefined) {\n            throw new Error('Required parameter campaignId was null or undefined when calling enableCampaign.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/enable`, null, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    enableCampaignUrl(requestParameters) {\n        const _campaignId = requestParameters[\"campaignId\"];\n        if (_campaignId === null || _campaignId === undefined) {\n            throw new Error('Required parameter campaignId was null or undefined when calling enableCampaign.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/enable`;\n    }\n    finalizeCampaign(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _campaignId = requestParameters[\"campaignId\"];\n        if (_campaignId === null || _campaignId === undefined) {\n            throw new Error('Required parameter campaignId was null or undefined when calling finalizeCampaign.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/final`, null, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    finalizeCampaignUrl(requestParameters) {\n        const _campaignId = requestParameters[\"campaignId\"];\n        if (_campaignId === null || _campaignId === undefined) {\n            throw new Error('Required parameter campaignId was null or undefined when calling finalizeCampaign.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/final`;\n    }\n    getCampaignByCampaignId(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _campaignId = requestParameters[\"campaignId\"];\n        if (_campaignId === null || _campaignId === undefined) {\n            throw new Error('Required parameter campaignId was null or undefined when calling getCampaignByCampaignId.');\n        }\n        const _status = requestParameters[\"status\"];\n        const _version = requestParameters[\"version\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_status) {\n            queryParameters = this.addToHttpParams(queryParameters, _status.join(COLLECTION_FORMATS['csv']), 'status');\n        }\n        if (_version !== undefined && _version !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _version, 'version');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}`, {\n            params: queryParameters,\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getCampaignByCampaignIdUrl(requestParameters) {\n        const _campaignId = requestParameters[\"campaignId\"];\n        if (_campaignId === null || _campaignId === undefined) {\n            throw new Error('Required parameter campaignId was null or undefined when calling getCampaignByCampaignId.');\n        }\n        const _status = requestParameters[\"status\"];\n        const _version = requestParameters[\"version\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_status) {\n            queryParameters = this.addToHttpParams(queryParameters, _status.join(COLLECTION_FORMATS['csv']), 'status');\n        }\n        if (_version !== undefined && _version !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _version, 'version');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}${queryString ? `?${queryString}` : ''}`;\n    }\n    getCampaigns(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _endDateAfter = requestParameters[\"endDateAfter\"];\n        const _endDateBefore = requestParameters[\"endDateBefore\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_from !== undefined && _from !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n        }\n        if (_endDateAfter !== undefined && _endDateAfter !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _endDateAfter, 'endDateAfter');\n        }\n        if (_endDateBefore !== undefined && _endDateBefore !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _endDateBefore, 'endDateBefore');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/engagements/custom`, {\n            params: queryParameters,\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getCampaignsUrl(requestParameters) {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _endDateAfter = requestParameters[\"endDateAfter\"];\n        const _endDateBefore = requestParameters[\"endDateBefore\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_from !== undefined && _from !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n        }\n        if (_endDateAfter !== undefined && _endDateAfter !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _endDateAfter, 'endDateAfter');\n        }\n        if (_endDateBefore !== undefined && _endDateBefore !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _endDateBefore, 'endDateBefore');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v1/engagements/custom${queryString ? `?${queryString}` : ''}`;\n    }\n    updateCampaign(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _campaignId = requestParameters[\"campaignId\"];\n        if (_campaignId === null || _campaignId === undefined) {\n            throw new Error('Required parameter campaignId was null or undefined when calling updateCampaign.');\n        }\n        const _campaignRequestResource = requestParameters[\"campaignRequestResource\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}`, _campaignRequestResource, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    updateCampaignUrl(requestParameters) {\n        const _campaignId = requestParameters[\"campaignId\"];\n        if (_campaignId === null || _campaignId === undefined) {\n            throw new Error('Required parameter campaignId was null or undefined when calling updateCampaign.');\n        }\n        const _campaignRequestResource = requestParameters[\"campaignRequestResource\"];\n        return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}`;\n    }\n}\nCampaignService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: CampaignService, deps: [{ token: i1.HttpClient }, { token: ENGAGEMENT_BASE_PATH, optional: true }, { token: EngagementConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nCampaignService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: CampaignService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: CampaignService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ENGAGEMENT_BASE_PATH]\n                }] }, { type: EngagementConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst CampaignServiceCreateCampaignMocksProvider = createMocks([{\n        urlPattern: \"/engagements/client-api/v1/engagements/custom\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 201,\n                body: \"\"\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst CampaignServiceDeleteCampaignMocksProvider = createMocks([{\n        urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}\",\n        method: \"DELETE\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst CampaignServiceDisableCampaignMocksProvider = createMocks([{\n        urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}/disable\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst CampaignServiceEnableCampaignMocksProvider = createMocks([{\n        urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}/enable\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst CampaignServiceFinalizeCampaignMocksProvider = createMocks([{\n        urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}/final\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst CampaignServiceGetCampaignByCampaignIdMocksProvider = createMocks([{\n        urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst CampaignServiceGetCampaignsMocksProvider = createMocks([{\n        urlPattern: \"/engagements/client-api/v1/engagements/custom\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst CampaignServiceUpdateCampaignMocksProvider = createMocks([{\n        urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 409,\n                body: {\n                    \"message\": \"Conflict error\",\n                    \"errors\": [{\n                            \"message\": \"The request could not be completed due to a conflict with the current state of the resource.\",\n                            \"key\": \"transactions.api.billingstatus.transaction\",\n                            \"context\": {\n                                \"billingStatus\": \"BILLED\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst CampaignServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/engagements/client-api/v1/engagements/custom\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 201,\n                body: \"\"\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}\",\n        method: \"DELETE\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}/disable\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}/enable\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}/final\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/engagements/client-api/v1/engagements/custom\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 409,\n                body: {\n                    \"message\": \"Conflict error\",\n                    \"errors\": [{\n                            \"message\": \"The request could not be completed due to a conflict with the current state of the resource.\",\n                            \"key\": \"transactions.api.billingstatus.transaction\",\n                            \"context\": {\n                                \"billingStatus\": \"BILLED\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n]);\n\nclass CampaignMetricsService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '/engagements';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new EngagementConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getCampaignMetrics(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _campaignId = requestParameters[\"campaignId\"];\n        if (_campaignId === null || _campaignId === undefined) {\n            throw new Error('Required parameter campaignId was null or undefined when calling getCampaignMetrics.');\n        }\n        const _channelId = requestParameters[\"channelId\"];\n        if (_channelId === null || _channelId === undefined) {\n            throw new Error('Required parameter channelId was null or undefined when calling getCampaignMetrics.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/channels/${encodeURIComponent(String(_channelId))}/metrics`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getCampaignMetricsUrl(requestParameters) {\n        const _campaignId = requestParameters[\"campaignId\"];\n        if (_campaignId === null || _campaignId === undefined) {\n            throw new Error('Required parameter campaignId was null or undefined when calling getCampaignMetrics.');\n        }\n        const _channelId = requestParameters[\"channelId\"];\n        if (_channelId === null || _channelId === undefined) {\n            throw new Error('Required parameter channelId was null or undefined when calling getCampaignMetrics.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/engagements/custom/${encodeURIComponent(String(_campaignId))}/channels/${encodeURIComponent(String(_channelId))}/metrics`;\n    }\n    redirectCampaign(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _utmContent = requestParameters[\"utmContent\"];\n        if (_utmContent === null || _utmContent === undefined) {\n            throw new Error('Required parameter utmContent was null or undefined when calling redirectCampaign.');\n        }\n        const _utmBanner = requestParameters[\"utmBanner\"];\n        if (_utmBanner === null || _utmBanner === undefined) {\n            throw new Error('Required parameter utmBanner was null or undefined when calling redirectCampaign.');\n        }\n        const _key = requestParameters[\"key\"];\n        if (_key === null || _key === undefined) {\n            throw new Error('Required parameter key was null or undefined when calling redirectCampaign.');\n        }\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_utmContent !== undefined && _utmContent !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _utmContent, 'utm_content');\n        }\n        if (_utmBanner !== undefined && _utmBanner !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _utmBanner, 'utm_banner');\n        }\n        if (_key !== undefined && _key !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _key, 'key');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/banner/redirect`, {\n            params: queryParameters,\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    redirectCampaignUrl(requestParameters) {\n        const _utmContent = requestParameters[\"utmContent\"];\n        if (_utmContent === null || _utmContent === undefined) {\n            throw new Error('Required parameter utmContent was null or undefined when calling redirectCampaign.');\n        }\n        const _utmBanner = requestParameters[\"utmBanner\"];\n        if (_utmBanner === null || _utmBanner === undefined) {\n            throw new Error('Required parameter utmBanner was null or undefined when calling redirectCampaign.');\n        }\n        const _key = requestParameters[\"key\"];\n        if (_key === null || _key === undefined) {\n            throw new Error('Required parameter key was null or undefined when calling redirectCampaign.');\n        }\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_utmContent !== undefined && _utmContent !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _utmContent, 'utm_content');\n        }\n        if (_utmBanner !== undefined && _utmBanner !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _utmBanner, 'utm_banner');\n        }\n        if (_key !== undefined && _key !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _key, 'key');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v1/banner/redirect${queryString ? `?${queryString}` : ''}`;\n    }\n}\nCampaignMetricsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: CampaignMetricsService, deps: [{ token: i1.HttpClient }, { token: ENGAGEMENT_BASE_PATH, optional: true }, { token: EngagementConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nCampaignMetricsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: CampaignMetricsService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: CampaignMetricsService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ENGAGEMENT_BASE_PATH]\n                }] }, { type: EngagementConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst CampaignMetricsServiceGetCampaignMetricsMocksProvider = createMocks([{\n        urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}/channels/{channelId}/metrics\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst CampaignMetricsServiceRedirectCampaignMocksProvider = createMocks([{\n        urlPattern: \"/engagements/client-api/v1/banner/redirect\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst CampaignMetricsServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/engagements/client-api/v1/engagements/custom/{campaignId}/channels/{channelId}/metrics\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/engagements/client-api/v1/banner/redirect\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n]);\n\nclass GeneralNotificationService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '/engagements';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new EngagementConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getGeneralNotificationById(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getGeneralNotificationById.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/general-notifications/${encodeURIComponent(String(_id))}`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getGeneralNotificationByIdUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getGeneralNotificationById.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/general-notifications/${encodeURIComponent(String(_id))}`;\n    }\n    getGeneralNotifications(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_from !== undefined && _from !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/general-notifications`, {\n            params: queryParameters,\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getGeneralNotificationsUrl(requestParameters) {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_from !== undefined && _from !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v1/general-notifications${queryString ? `?${queryString}` : ''}`;\n    }\n}\nGeneralNotificationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: GeneralNotificationService, deps: [{ token: i1.HttpClient }, { token: ENGAGEMENT_BASE_PATH, optional: true }, { token: EngagementConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nGeneralNotificationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: GeneralNotificationService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: GeneralNotificationService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ENGAGEMENT_BASE_PATH]\n                }] }, { type: EngagementConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst GeneralNotificationServiceGetGeneralNotificationByIdMocksProvider = createMocks([{\n        urlPattern: \"/engagements/client-api/v1/general-notifications/{id}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"$ref\": \"#/components/examples/GeneralNotificationExample/value\"\n                    }]\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst GeneralNotificationServiceGetGeneralNotificationsMocksProvider = createMocks([{\n        urlPattern: \"/engagements/client-api/v1/general-notifications\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"value\": [{\n                            \"$ref\": \"#/components/examples/GeneralNotificationSummaryExample1/value\"\n                        }, {\n                            \"$ref\": \"#/components/examples/GeneralNotificationSummaryExample2/value\"\n                        }]\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst GeneralNotificationServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/engagements/client-api/v1/general-notifications/{id}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"$ref\": \"#/components/examples/GeneralNotificationExample/value\"\n                    }]\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/engagements/client-api/v1/general-notifications\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"value\": [{\n                            \"$ref\": \"#/components/examples/GeneralNotificationSummaryExample1/value\"\n                        }, {\n                            \"$ref\": \"#/components/examples/GeneralNotificationSummaryExample2/value\"\n                        }]\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n]);\n\nclass NotificationPreferenceService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '/engagements';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new EngagementConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    createNotificationPreference(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _notificationPreferencePostRequest = requestParameters[\"notificationPreferencePostRequest\"];\n        if (_notificationPreferencePostRequest === null || _notificationPreferencePostRequest === undefined) {\n            throw new Error('Required parameter notificationPreferencePostRequest was null or undefined when calling createNotificationPreference.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/notification-preferences`, _notificationPreferencePostRequest, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    createNotificationPreferenceUrl(requestParameters) {\n        const _notificationPreferencePostRequest = requestParameters[\"notificationPreferencePostRequest\"];\n        if (_notificationPreferencePostRequest === null || _notificationPreferencePostRequest === undefined) {\n            throw new Error('Required parameter notificationPreferencePostRequest was null or undefined when calling createNotificationPreference.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/notification-preferences`;\n    }\n    getNotificationPreferences(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _generalNotificationId = requestParameters[\"generalNotificationId\"];\n        const _active = requestParameters[\"active\"];\n        const _entityId = requestParameters[\"entityId\"];\n        const _entityType = requestParameters[\"entityType\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_generalNotificationId !== undefined && _generalNotificationId !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _generalNotificationId, 'generalNotificationId');\n        }\n        if (_active !== undefined && _active !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _active, 'active');\n        }\n        if (_entityId !== undefined && _entityId !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _entityId, 'entityId');\n        }\n        if (_entityType !== undefined && _entityType !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _entityType, 'entityType');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/notification-preferences`, {\n            params: queryParameters,\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getNotificationPreferencesUrl(requestParameters) {\n        const _generalNotificationId = requestParameters[\"generalNotificationId\"];\n        const _active = requestParameters[\"active\"];\n        const _entityId = requestParameters[\"entityId\"];\n        const _entityType = requestParameters[\"entityType\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_generalNotificationId !== undefined && _generalNotificationId !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _generalNotificationId, 'generalNotificationId');\n        }\n        if (_active !== undefined && _active !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _active, 'active');\n        }\n        if (_entityId !== undefined && _entityId !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _entityId, 'entityId');\n        }\n        if (_entityType !== undefined && _entityType !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _entityType, 'entityType');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v1/notification-preferences${queryString ? `?${queryString}` : ''}`;\n    }\n    updateNotificationPreference(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateNotificationPreference.');\n        }\n        const _notificationPreferencePutRequest = requestParameters[\"notificationPreferencePutRequest\"];\n        if (_notificationPreferencePutRequest === null || _notificationPreferencePutRequest === undefined) {\n            throw new Error('Required parameter notificationPreferencePutRequest was null or undefined when calling updateNotificationPreference.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/notification-preferences/${encodeURIComponent(String(_id))}`, _notificationPreferencePutRequest, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    updateNotificationPreferenceUrl(requestParameters) {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateNotificationPreference.');\n        }\n        const _notificationPreferencePutRequest = requestParameters[\"notificationPreferencePutRequest\"];\n        if (_notificationPreferencePutRequest === null || _notificationPreferencePutRequest === undefined) {\n            throw new Error('Required parameter notificationPreferencePutRequest was null or undefined when calling updateNotificationPreference.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/notification-preferences/${encodeURIComponent(String(_id))}`;\n    }\n}\nNotificationPreferenceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: NotificationPreferenceService, deps: [{ token: i1.HttpClient }, { token: ENGAGEMENT_BASE_PATH, optional: true }, { token: EngagementConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nNotificationPreferenceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: NotificationPreferenceService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: NotificationPreferenceService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ENGAGEMENT_BASE_PATH]\n                }] }, { type: EngagementConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst NotificationPreferenceServiceCreateNotificationPreferenceMocksProvider = createMocks([{\n        urlPattern: \"/engagements/client-api/v1/notification-preferences\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 201,\n                body: {\n                    \"$ref\": \"#/components/examples/NotificationPreferenceResponseExample/value\"\n                }\n            },\n            {\n                status: 201,\n                body: {\n                    \"channels\": [{\n                            \"userCanChange\": true,\n                            \"channel\": \"email\",\n                            \"enabled\": true\n                        }, {\n                            \"userCanChange\": true,\n                            \"channel\": \"email\",\n                            \"enabled\": true\n                        }],\n                    \"lastUpdatedAt\": \"2000-01-23T04:56:07.000+00:00\",\n                    \"generalNotificationId\": \"generalNotificationId\",\n                    \"active\": true,\n                    \"id\": \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n                    \"createdOn\": \"2000-01-23T04:56:07.000+00:00\",\n                    \"userConditions\": {\n                        \"eRef\": \"6be7c465-37a7-4f1e-98b7-15d6c636c566\",\n                        \"eType\": \"arrangement\",\n                        \"conditions\": {\n                            \"amount\": 100\n                        }\n                    }\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst NotificationPreferenceServiceGetNotificationPreferencesMocksProvider = createMocks([{\n        urlPattern: \"/engagements/client-api/v1/notification-preferences\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"value\": {\n                        \"totalCount\": 2,\n                        \"notificationPreferences\": [{\n                                \"$ref\": \"#/components/examples/NotificationPreferenceGetExample2/value\"\n                            }, {\n                                \"$ref\": \"#/components/examples/NotificationPreferenceGetExample3/value\"\n                            }]\n                    }\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"value\": {\n                        \"totalCount\": 2,\n                        \"notificationPreferences\": [{\n                                \"$ref\": \"#/components/examples/NotificationPreferenceGetExample1/value\"\n                            }, {\n                                \"$ref\": \"#/components/examples/NotificationPreferenceGetExample2/value\"\n                            }]\n                    }\n                }\n            },\n        ]\n    }]);\nconst NotificationPreferenceServiceUpdateNotificationPreferenceMocksProvider = createMocks([{\n        urlPattern: \"/engagements/client-api/v1/notification-preferences/{id}\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/components/examples/NotificationPreferenceResponseExample/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"channels\": [{\n                            \"userCanChange\": true,\n                            \"channel\": \"email\",\n                            \"enabled\": true\n                        }, {\n                            \"userCanChange\": true,\n                            \"channel\": \"email\",\n                            \"enabled\": true\n                        }],\n                    \"lastUpdatedAt\": \"2000-01-23T04:56:07.000+00:00\",\n                    \"generalNotificationId\": \"generalNotificationId\",\n                    \"active\": true,\n                    \"id\": \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n                    \"createdOn\": \"2000-01-23T04:56:07.000+00:00\",\n                    \"userConditions\": {\n                        \"eRef\": \"6be7c465-37a7-4f1e-98b7-15d6c636c566\",\n                        \"eType\": \"arrangement\",\n                        \"conditions\": {\n                            \"amount\": 100\n                        }\n                    }\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst NotificationPreferenceServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/engagements/client-api/v1/notification-preferences\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 201,\n                body: {\n                    \"$ref\": \"#/components/examples/NotificationPreferenceResponseExample/value\"\n                }\n            },\n            {\n                status: 201,\n                body: {\n                    \"channels\": [{\n                            \"userCanChange\": true,\n                            \"channel\": \"email\",\n                            \"enabled\": true\n                        }, {\n                            \"userCanChange\": true,\n                            \"channel\": \"email\",\n                            \"enabled\": true\n                        }],\n                    \"lastUpdatedAt\": \"2000-01-23T04:56:07.000+00:00\",\n                    \"generalNotificationId\": \"generalNotificationId\",\n                    \"active\": true,\n                    \"id\": \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n                    \"createdOn\": \"2000-01-23T04:56:07.000+00:00\",\n                    \"userConditions\": {\n                        \"eRef\": \"6be7c465-37a7-4f1e-98b7-15d6c636c566\",\n                        \"eType\": \"arrangement\",\n                        \"conditions\": {\n                            \"amount\": 100\n                        }\n                    }\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/engagements/client-api/v1/notification-preferences\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"value\": {\n                        \"totalCount\": 2,\n                        \"notificationPreferences\": [{\n                                \"$ref\": \"#/components/examples/NotificationPreferenceGetExample2/value\"\n                            }, {\n                                \"$ref\": \"#/components/examples/NotificationPreferenceGetExample3/value\"\n                            }]\n                    }\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"value\": {\n                        \"totalCount\": 2,\n                        \"notificationPreferences\": [{\n                                \"$ref\": \"#/components/examples/NotificationPreferenceGetExample1/value\"\n                            }, {\n                                \"$ref\": \"#/components/examples/NotificationPreferenceGetExample2/value\"\n                            }]\n                    }\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/engagements/client-api/v1/notification-preferences/{id}\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"$ref\": \"#/components/examples/NotificationPreferenceResponseExample/value\"\n                }\n            },\n            {\n                status: 200,\n                body: {\n                    \"channels\": [{\n                            \"userCanChange\": true,\n                            \"channel\": \"email\",\n                            \"enabled\": true\n                        }, {\n                            \"userCanChange\": true,\n                            \"channel\": \"email\",\n                            \"enabled\": true\n                        }],\n                    \"lastUpdatedAt\": \"2000-01-23T04:56:07.000+00:00\",\n                    \"generalNotificationId\": \"generalNotificationId\",\n                    \"active\": true,\n                    \"id\": \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n                    \"createdOn\": \"2000-01-23T04:56:07.000+00:00\",\n                    \"userConditions\": {\n                        \"eRef\": \"6be7c465-37a7-4f1e-98b7-15d6c636c566\",\n                        \"eType\": \"arrangement\",\n                        \"conditions\": {\n                            \"amount\": 100\n                        }\n                    }\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n]);\n\nclass SelectCampaignService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '/engagements';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new EngagementConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    selectCampaign(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _spaceId = requestParameters[\"spaceId\"];\n        if (_spaceId === null || _spaceId === undefined) {\n            throw new Error('Required parameter spaceId was null or undefined when calling selectCampaign.');\n        }\n        const _dimensions = requestParameters[\"dimensions\"];\n        if (_dimensions === null || _dimensions === undefined) {\n            throw new Error('Required parameter dimensions was null or undefined when calling selectCampaign.');\n        }\n        const _locale = requestParameters[\"locale\"];\n        if (_locale === null || _locale === undefined) {\n            throw new Error('Required parameter locale was null or undefined when calling selectCampaign.');\n        }\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_spaceId !== undefined && _spaceId !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _spaceId, 'spaceId');\n        }\n        if (_dimensions !== undefined && _dimensions !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _dimensions, 'dimensions');\n        }\n        if (_locale !== undefined && _locale !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _locale, 'locale');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/banner`, {\n            params: queryParameters,\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    selectCampaignUrl(requestParameters) {\n        const _spaceId = requestParameters[\"spaceId\"];\n        if (_spaceId === null || _spaceId === undefined) {\n            throw new Error('Required parameter spaceId was null or undefined when calling selectCampaign.');\n        }\n        const _dimensions = requestParameters[\"dimensions\"];\n        if (_dimensions === null || _dimensions === undefined) {\n            throw new Error('Required parameter dimensions was null or undefined when calling selectCampaign.');\n        }\n        const _locale = requestParameters[\"locale\"];\n        if (_locale === null || _locale === undefined) {\n            throw new Error('Required parameter locale was null or undefined when calling selectCampaign.');\n        }\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_spaceId !== undefined && _spaceId !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _spaceId, 'spaceId');\n        }\n        if (_dimensions !== undefined && _dimensions !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _dimensions, 'dimensions');\n        }\n        if (_locale !== undefined && _locale !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _locale, 'locale');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v1/banner${queryString ? `?${queryString}` : ''}`;\n    }\n}\nSelectCampaignService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: SelectCampaignService, deps: [{ token: i1.HttpClient }, { token: ENGAGEMENT_BASE_PATH, optional: true }, { token: EngagementConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nSelectCampaignService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: SelectCampaignService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: SelectCampaignService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ENGAGEMENT_BASE_PATH]\n                }] }, { type: EngagementConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst SelectCampaignServiceSelectCampaignMocksProvider = createMocks([{\n        urlPattern: \"/engagements/client-api/v1/banner\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 204,\n                body: \"\"\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n        ]\n    }]);\nconst SelectCampaignServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/engagements/client-api/v1/banner\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 204,\n                body: \"\"\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 401,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to invalid credentials.\",\n                            \"key\": \"common.api.token\",\n                            \"context\": {\n                                \"accessToken\": \"expired\"\n                            }\n                        }]\n                }\n            },\n        ]\n    },\n]);\n\nexport { AudienceType, BannerChannel, BannerChannelAllOf, COLLECTION_FORMATS, CONFIG_TOKEN, CampaignChannelType, CampaignMetricsService, CampaignMetricsServiceGetCampaignMetricsMocksProvider, CampaignMetricsServiceMocksProvider, CampaignMetricsServiceRedirectCampaignMocksProvider, CampaignService, CampaignServiceCreateCampaignMocksProvider, CampaignServiceDeleteCampaignMocksProvider, CampaignServiceDisableCampaignMocksProvider, CampaignServiceEnableCampaignMocksProvider, CampaignServiceFinalizeCampaignMocksProvider, CampaignServiceGetCampaignByCampaignIdMocksProvider, CampaignServiceGetCampaignsMocksProvider, CampaignServiceMocksProvider, CampaignServiceUpdateCampaignMocksProvider, CampaignStatus, ENGAGEMENT_BASE_PATH, EngagementApiModule, EngagementConfiguration, GeneralNotificationService, GeneralNotificationServiceGetGeneralNotificationByIdMocksProvider, GeneralNotificationServiceGetGeneralNotificationsMocksProvider, GeneralNotificationServiceMocksProvider, NotificationPreferenceService, NotificationPreferenceServiceCreateNotificationPreferenceMocksProvider, NotificationPreferenceServiceGetNotificationPreferencesMocksProvider, NotificationPreferenceServiceMocksProvider, NotificationPreferenceServiceUpdateNotificationPreferenceMocksProvider, SelectCampaignService, SelectCampaignServiceMocksProvider, SelectCampaignServiceSelectCampaignMocksProvider, SeverityLevel, TargetUrlDisplayModeResource };\n"]},"metadata":{},"sourceType":"module"}