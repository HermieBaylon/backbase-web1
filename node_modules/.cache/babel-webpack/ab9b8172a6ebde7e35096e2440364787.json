{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Output, HostListener, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { throttleTime, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n/**\n * @name KeyboardClickDirective\n *\n * @description\n * Directive that add click/keydown.enter/keydown.space events on element\n * Used for adding accessibility(tab navigation events) for element\n */\n\nclass KeyboardClickDirective {\n  constructor(elem) {\n    this.elem = elem;\n    /**\n     * Stream that should be fired on click/keydown.enter/keydown.space\n     */\n\n    this.bbKeyboardClick = new EventEmitter();\n    this.emit$ = new Subject();\n    this.gc$ = new Subject(); // Fix for frequent keydown event generation for spacebar in FF and IE\n\n    this.emit$.pipe(throttleTime(100), takeUntil(this.gc$)).subscribe(this.bbKeyboardClick);\n  }\n\n  onActionKeyPressed($event) {\n    // Check if the selected element is the current element itself and not its nested selectable children\n    if (this.elem.nativeElement !== $event.target) {\n      return;\n    }\n\n    this.emit$.next($event);\n  }\n\n  onClicked($event) {\n    this.emit$.next($event);\n  }\n\n  ngOnDestroy() {\n    this.gc$.next();\n  }\n\n}\n\nKeyboardClickDirective.ɵfac = function KeyboardClickDirective_Factory(t) {\n  return new (t || KeyboardClickDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nKeyboardClickDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: KeyboardClickDirective,\n  selectors: [[\"\", \"bbKeyboardClick\", \"\"]],\n  hostBindings: function KeyboardClickDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown.enter\", function KeyboardClickDirective_keydown_enter_HostBindingHandler($event) {\n        return ctx.onActionKeyPressed($event);\n      })(\"keydown.space\", function KeyboardClickDirective_keydown_space_HostBindingHandler($event) {\n        return ctx.onActionKeyPressed($event);\n      })(\"click\", function KeyboardClickDirective_click_HostBindingHandler($event) {\n        return ctx.onClicked($event);\n      });\n    }\n  },\n  outputs: {\n    bbKeyboardClick: \"bbKeyboardClick\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KeyboardClickDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[bbKeyboardClick]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    bbKeyboardClick: [{\n      type: Output\n    }],\n    onActionKeyPressed: [{\n      type: HostListener,\n      args: ['keydown.enter', ['$event']]\n    }, {\n      type: HostListener,\n      args: ['keydown.space', ['$event']]\n    }],\n    onClicked: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n\nclass KeyboardClickModule {}\n\nKeyboardClickModule.ɵfac = function KeyboardClickModule_Factory(t) {\n  return new (t || KeyboardClickModule)();\n};\n\nKeyboardClickModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: KeyboardClickModule\n});\nKeyboardClickModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KeyboardClickModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [KeyboardClickDirective],\n      exports: [KeyboardClickDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { KeyboardClickDirective, KeyboardClickModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-keyboard-click-directive.js"],"names":["i0","EventEmitter","Directive","Output","HostListener","NgModule","Subject","throttleTime","takeUntil","CommonModule","KeyboardClickDirective","constructor","elem","bbKeyboardClick","emit$","gc$","pipe","subscribe","onActionKeyPressed","$event","nativeElement","target","next","onClicked","ngOnDestroy","ɵfac","ElementRef","ɵdir","type","args","selector","KeyboardClickModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Output, HostListener, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { throttleTime, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @name KeyboardClickDirective\n *\n * @description\n * Directive that add click/keydown.enter/keydown.space events on element\n * Used for adding accessibility(tab navigation events) for element\n */\nclass KeyboardClickDirective {\n    constructor(elem) {\n        this.elem = elem;\n        /**\n         * Stream that should be fired on click/keydown.enter/keydown.space\n         */\n        this.bbKeyboardClick = new EventEmitter();\n        this.emit$ = new Subject();\n        this.gc$ = new Subject();\n        // Fix for frequent keydown event generation for spacebar in FF and IE\n        this.emit$.pipe(throttleTime(100), takeUntil(this.gc$)).subscribe(this.bbKeyboardClick);\n    }\n    onActionKeyPressed($event) {\n        // Check if the selected element is the current element itself and not its nested selectable children\n        if (this.elem.nativeElement !== $event.target) {\n            return;\n        }\n        this.emit$.next($event);\n    }\n    onClicked($event) {\n        this.emit$.next($event);\n    }\n    ngOnDestroy() {\n        this.gc$.next();\n    }\n}\nKeyboardClickDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: KeyboardClickDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nKeyboardClickDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.16\", type: KeyboardClickDirective, selector: \"[bbKeyboardClick]\", outputs: { bbKeyboardClick: \"bbKeyboardClick\" }, host: { listeners: { \"keydown.enter\": \"onActionKeyPressed($event)\", \"keydown.space\": \"onActionKeyPressed($event)\", \"click\": \"onClicked($event)\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: KeyboardClickDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[bbKeyboardClick]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { bbKeyboardClick: [{\n                type: Output\n            }], onActionKeyPressed: [{\n                type: HostListener,\n                args: ['keydown.enter', ['$event']]\n            }, {\n                type: HostListener,\n                args: ['keydown.space', ['$event']]\n            }], onClicked: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }] } });\n\nclass KeyboardClickModule {\n}\nKeyboardClickModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: KeyboardClickModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nKeyboardClickModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: KeyboardClickModule, declarations: [KeyboardClickDirective], imports: [CommonModule], exports: [KeyboardClickDirective] });\nKeyboardClickModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: KeyboardClickModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: KeyboardClickModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [KeyboardClickDirective],\n                    exports: [KeyboardClickDirective],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { KeyboardClickDirective, KeyboardClickModule };\n"]},"metadata":{},"sourceType":"module"}