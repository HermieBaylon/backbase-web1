{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, Input, HostBinding, ViewChild, Directive, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n/**\n * @name ButtonComponent\n *\n * @description\n * Component that displays a button.\n */\n\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\n\nclass ButtonComponent {\n  constructor(elRef, renderer2) {\n    this.elRef = elRef;\n    this.renderer2 = renderer2;\n    /**\n     * This Boolean attribute lets you specify that the button should have input focus when the page\n     * loads, unless the user overrides it, for example by typing in a different control.  Only one\n     * form-associated element in a document can have this attribute specified.\n     */\n\n    this.autofocus = false;\n    /**\n     * The HTML5 button type.  Defaults to 'button'.\n     */\n\n    this.type = 'button';\n    /**\n     * This Boolean attribute indicates that the user cannot interact with the button.  Defaults to\n     * false.\n     */\n\n    this.disabled = false;\n    /**\n     * Size of the button.\n     */\n\n    this.buttonSize = 'md';\n    /**\n     * The color for the button.  Defaults to 'primary'.\n     */\n\n    this.color = 'primary';\n    /**\n     * The flag to indicate whether the button should fill the container that it is in. Defaults to 'false'.\n     */\n\n    this.block = false;\n  }\n\n  moveAriaAttributes(hostEl, childEl) {\n    const nodeMap = hostEl.attributes; // CUT every aria attribute from the host element and PASTE it into the button element\n\n    Object.keys(nodeMap).forEach(key => {\n      const item = nodeMap.item(Number(key));\n      let attrName;\n      let attrVal;\n\n      if (item) {\n        attrName = item.name;\n        attrVal = item.value;\n\n        if (attrName.includes('aria')) {\n          this.renderer2.setAttribute(childEl, attrName, attrVal);\n          this.renderer2.removeAttribute(hostEl, attrName);\n        }\n      }\n    });\n  }\n\n  ngAfterViewInit() {\n    this.moveAriaAttributes(this.elRef.nativeElement, this.buttonEl && this.buttonEl.nativeElement);\n  }\n\n}\n\nButtonComponent.ɵfac = function ButtonComponent_Factory(t) {\n  return new (t || ButtonComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\n\nButtonComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ButtonComponent,\n  selectors: [[\"bb-button-ui\"]],\n  viewQuery: function ButtonComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.buttonEl = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function ButtonComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"btn-block\", ctx.block);\n    }\n  },\n  inputs: {\n    autofocus: \"autofocus\",\n    type: \"type\",\n    disabled: \"disabled\",\n    buttonSize: \"buttonSize\",\n    color: \"color\",\n    block: \"block\"\n  },\n  ngContentSelectors: _c1,\n  decls: 3,\n  vars: 9,\n  consts: [[3, \"type\", \"autofocus\", \"disabled\", \"ngClass\"], [\"button\", \"\"]],\n  template: function ButtonComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"button\", 0, 1);\n      i0.ɵɵprojection(2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMapInterpolate1(\"btn bb-button btn-\", ctx.color, \"\");\n      i0.ɵɵclassProp(\"btn-block\", ctx.block);\n      i0.ɵɵproperty(\"type\", ctx.type)(\"autofocus\", ctx.autofocus)(\"disabled\", ctx.disabled)(\"ngClass\", ctx.buttonSize === \"sm\" ? \"btn-sm\" : \"btn-md\");\n    }\n  },\n  directives: [i1.NgClass],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-button-ui',\n      templateUrl: './button.component.html'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    autofocus: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    buttonSize: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    block: [{\n      type: HostBinding,\n      args: ['class.btn-block']\n    }, {\n      type: Input\n    }],\n    buttonEl: [{\n      type: ViewChild,\n      args: ['button', {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @name ButtonDirective\n *\n * @description\n * Directive for styling button.\n *\n * @a11y\n * The `bbButton` directive doesn't provide any specific properties for accessibility.\n * In case of necessity add `aria-*` attributes to the `button` element.\n */\n\n\nclass ButtonDirective {\n  constructor(renderer, hostElement) {\n    this.renderer = renderer;\n    this.hostElement = hostElement;\n    /**\n     * Button's type atrribute with default value.\n     */\n\n    this.type = 'button';\n    /**\n     * The color for the button. Defaults to 'primary'.\n     * If a custom string used, then a css class is going to be added. The pattern is as follows:\n     * `btn-customColor`\n     */\n\n    this.color = 'primary';\n    /**\n     * Size of the button.\n     */\n\n    this.buttonSize = 'md';\n    /**\n     * The flag to indicate whether the button should fill the container that it is in. Defaults to 'false'.\n     */\n\n    this.block = false;\n    /**\n     * The flag to indicate whether the button should be in a circular shape. Defaults to 'false'.\n     * This will only work when there's only an icon inside the button without a text.\n     */\n\n    this.circle = false;\n  }\n\n  ngOnInit() {\n    this.renderer.addClass(this.hostElement.nativeElement, 'btn');\n    this.renderer.addClass(this.hostElement.nativeElement, `btn-${this.color}`);\n    this.renderer.addClass(this.hostElement.nativeElement, `btn-${this.buttonSize}`);\n  }\n\n  ngOnChanges(changes) {\n    if (changes.color) {\n      if (changes.color.previousValue) {\n        this.renderer.removeClass(this.hostElement.nativeElement, `btn-${changes.color.previousValue}`);\n      }\n\n      if (changes.color.currentValue) {\n        this.renderer.addClass(this.hostElement.nativeElement, `btn-${changes.color.currentValue}`);\n      }\n    }\n\n    if (changes.buttonSize) {\n      if (changes.buttonSize.previousValue) {\n        this.renderer.removeClass(this.hostElement.nativeElement, `btn-${changes.buttonSize.previousValue}`);\n      }\n\n      if (changes.buttonSize.currentValue) {\n        this.renderer.addClass(this.hostElement.nativeElement, `btn-${changes.buttonSize.currentValue}`);\n      }\n    }\n  }\n\n}\n\nButtonDirective.ɵfac = function ButtonDirective_Factory(t) {\n  return new (t || ButtonDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nButtonDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: ButtonDirective,\n  selectors: [[\"button\", \"bbButton\", \"\"]],\n  hostVars: 5,\n  hostBindings: function ButtonDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"type\", ctx.type);\n      i0.ɵɵclassProp(\"btn-block\", ctx.block)(\"btn-circle\", ctx.circle);\n    }\n  },\n  inputs: {\n    type: \"type\",\n    color: \"color\",\n    buttonSize: \"buttonSize\",\n    block: \"block\",\n    circle: \"circle\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'button[bbButton]'\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    type: [{\n      type: HostBinding,\n      args: ['type']\n    }, {\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    buttonSize: [{\n      type: Input\n    }],\n    block: [{\n      type: HostBinding,\n      args: ['class.btn-block']\n    }, {\n      type: Input\n    }],\n    circle: [{\n      type: HostBinding,\n      args: ['class.btn-circle']\n    }, {\n      type: Input\n    }]\n  });\n})();\n\nclass ButtonModule {}\n\nButtonModule.ɵfac = function ButtonModule_Factory(t) {\n  return new (t || ButtonModule)();\n};\n\nButtonModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ButtonModule\n});\nButtonModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [ButtonComponent, ButtonDirective],\n      exports: [ButtonComponent, ButtonDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ButtonComponent, ButtonDirective, ButtonModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-button.js"],"names":["i0","Component","Input","HostBinding","ViewChild","Directive","NgModule","i1","CommonModule","ButtonComponent","constructor","elRef","renderer2","autofocus","type","disabled","buttonSize","color","block","moveAriaAttributes","hostEl","childEl","nodeMap","attributes","Object","keys","forEach","key","item","Number","attrName","attrVal","name","value","includes","setAttribute","removeAttribute","ngAfterViewInit","nativeElement","buttonEl","ɵfac","ElementRef","Renderer2","ɵcmp","NgClass","args","selector","templateUrl","static","ButtonDirective","renderer","hostElement","circle","ngOnInit","addClass","ngOnChanges","changes","previousValue","removeClass","currentValue","ɵdir","ButtonModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, Input, HostBinding, ViewChild, Directive, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @name ButtonComponent\n *\n * @description\n * Component that displays a button.\n */\nclass ButtonComponent {\n    constructor(elRef, renderer2) {\n        this.elRef = elRef;\n        this.renderer2 = renderer2;\n        /**\n         * This Boolean attribute lets you specify that the button should have input focus when the page\n         * loads, unless the user overrides it, for example by typing in a different control.  Only one\n         * form-associated element in a document can have this attribute specified.\n         */\n        this.autofocus = false;\n        /**\n         * The HTML5 button type.  Defaults to 'button'.\n         */\n        this.type = 'button';\n        /**\n         * This Boolean attribute indicates that the user cannot interact with the button.  Defaults to\n         * false.\n         */\n        this.disabled = false;\n        /**\n         * Size of the button.\n         */\n        this.buttonSize = 'md';\n        /**\n         * The color for the button.  Defaults to 'primary'.\n         */\n        this.color = 'primary';\n        /**\n         * The flag to indicate whether the button should fill the container that it is in. Defaults to 'false'.\n         */\n        this.block = false;\n    }\n    moveAriaAttributes(hostEl, childEl) {\n        const nodeMap = hostEl.attributes;\n        // CUT every aria attribute from the host element and PASTE it into the button element\n        Object.keys(nodeMap).forEach((key) => {\n            const item = nodeMap.item(Number(key));\n            let attrName;\n            let attrVal;\n            if (item) {\n                attrName = item.name;\n                attrVal = item.value;\n                if (attrName.includes('aria')) {\n                    this.renderer2.setAttribute(childEl, attrName, attrVal);\n                    this.renderer2.removeAttribute(hostEl, attrName);\n                }\n            }\n        });\n    }\n    ngAfterViewInit() {\n        this.moveAriaAttributes(this.elRef.nativeElement, this.buttonEl && this.buttonEl.nativeElement);\n    }\n}\nButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ButtonComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });\nButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: ButtonComponent, selector: \"bb-button-ui\", inputs: { autofocus: \"autofocus\", type: \"type\", disabled: \"disabled\", buttonSize: \"buttonSize\", color: \"color\", block: \"block\" }, host: { properties: { \"class.btn-block\": \"this.block\" } }, viewQueries: [{ propertyName: \"buttonEl\", first: true, predicate: [\"button\"], descendants: true, static: true }], ngImport: i0, template: \"<button\\n  #button\\n  [type]=\\\"type\\\"\\n  class=\\\"btn bb-button btn-{{ color }}\\\"\\n  [autofocus]=\\\"autofocus\\\"\\n  [disabled]=\\\"disabled\\\"\\n  [class.btn-block]=\\\"block\\\"\\n  [ngClass]=\\\"buttonSize === 'sm' ? 'btn-sm' : 'btn-md'\\\"\\n>\\n  <ng-content></ng-content>\\n</button>\\n\", directives: [{ type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ButtonComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-button-ui',\n                    templateUrl: './button.component.html',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { autofocus: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], buttonSize: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], block: [{\n                type: HostBinding,\n                args: ['class.btn-block']\n            }, {\n                type: Input\n            }], buttonEl: [{\n                type: ViewChild,\n                args: ['button', { static: true }]\n            }] } });\n\n/**\n * @name ButtonDirective\n *\n * @description\n * Directive for styling button.\n *\n * @a11y\n * The `bbButton` directive doesn't provide any specific properties for accessibility.\n * In case of necessity add `aria-*` attributes to the `button` element.\n */\nclass ButtonDirective {\n    constructor(renderer, hostElement) {\n        this.renderer = renderer;\n        this.hostElement = hostElement;\n        /**\n         * Button's type atrribute with default value.\n         */\n        this.type = 'button';\n        /**\n         * The color for the button. Defaults to 'primary'.\n         * If a custom string used, then a css class is going to be added. The pattern is as follows:\n         * `btn-customColor`\n         */\n        this.color = 'primary';\n        /**\n         * Size of the button.\n         */\n        this.buttonSize = 'md';\n        /**\n         * The flag to indicate whether the button should fill the container that it is in. Defaults to 'false'.\n         */\n        this.block = false;\n        /**\n         * The flag to indicate whether the button should be in a circular shape. Defaults to 'false'.\n         * This will only work when there's only an icon inside the button without a text.\n         */\n        this.circle = false;\n    }\n    ngOnInit() {\n        this.renderer.addClass(this.hostElement.nativeElement, 'btn');\n        this.renderer.addClass(this.hostElement.nativeElement, `btn-${this.color}`);\n        this.renderer.addClass(this.hostElement.nativeElement, `btn-${this.buttonSize}`);\n    }\n    ngOnChanges(changes) {\n        if (changes.color) {\n            if (changes.color.previousValue) {\n                this.renderer.removeClass(this.hostElement.nativeElement, `btn-${changes.color.previousValue}`);\n            }\n            if (changes.color.currentValue) {\n                this.renderer.addClass(this.hostElement.nativeElement, `btn-${changes.color.currentValue}`);\n            }\n        }\n        if (changes.buttonSize) {\n            if (changes.buttonSize.previousValue) {\n                this.renderer.removeClass(this.hostElement.nativeElement, `btn-${changes.buttonSize.previousValue}`);\n            }\n            if (changes.buttonSize.currentValue) {\n                this.renderer.addClass(this.hostElement.nativeElement, `btn-${changes.buttonSize.currentValue}`);\n            }\n        }\n    }\n}\nButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ButtonDirective, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.16\", type: ButtonDirective, selector: \"button[bbButton]\", inputs: { type: \"type\", color: \"color\", buttonSize: \"buttonSize\", block: \"block\", circle: \"circle\" }, host: { properties: { \"type\": \"this.type\", \"class.btn-block\": \"this.block\", \"class.btn-circle\": \"this.circle\" } }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ButtonDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'button[bbButton]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { type: [{\n                type: HostBinding,\n                args: ['type']\n            }, {\n                type: Input\n            }], color: [{\n                type: Input\n            }], buttonSize: [{\n                type: Input\n            }], block: [{\n                type: HostBinding,\n                args: ['class.btn-block']\n            }, {\n                type: Input\n            }], circle: [{\n                type: HostBinding,\n                args: ['class.btn-circle']\n            }, {\n                type: Input\n            }] } });\n\nclass ButtonModule {\n}\nButtonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nButtonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ButtonModule, declarations: [ButtonComponent, ButtonDirective], imports: [CommonModule], exports: [ButtonComponent, ButtonDirective] });\nButtonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ButtonModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ButtonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ButtonComponent, ButtonDirective],\n                    exports: [ButtonComponent, ButtonDirective],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ButtonComponent, ButtonDirective, ButtonModule };\n"]},"metadata":{},"sourceType":"module"}