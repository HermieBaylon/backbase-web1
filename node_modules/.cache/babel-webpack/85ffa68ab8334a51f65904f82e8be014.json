{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Self, Optional, ViewChild, Output, Input, NgModule } from '@angular/core';\nimport { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';\nimport * as i1 from '@backbase/foundation-ang/future';\nimport * as i2 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from '@backbase/ui-ang/icon';\n/**\n * @name InputCheckboxComponent\n *\n * @description\n * Component that displays a checkbox input.\n */\n\nconst _c0 = [\"input\"];\n\nfunction InputCheckboxComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.label, \" \");\n  }\n}\n\nfunction InputCheckboxComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0);\n  }\n}\n\nconst _c1 = function (a0, a1) {\n  return {\n    \"ng-invalid\": a0,\n    \"ng-touched\": a1\n  };\n};\n\nconst _c2 = [\"*\"];\n\nclass InputCheckboxComponent extends InputBaseComponent {\n  constructor(cd, el, deprecationsService, parentFormControl) {\n    super(cd, deprecationsService);\n    this.cd = cd;\n    this.el = el;\n    this.deprecationsService = deprecationsService;\n    this.parentFormControl = parentFormControl;\n    /**\n     * Event emitted when the checkbox's `indeterminate` value changes.\n     */\n\n    this.indeterminateChange = new EventEmitter();\n    this.indeterminateValue = false;\n\n    if (this.parentFormControl) {\n      this.parentFormControl.valueAccessor = this;\n    }\n  }\n  /**\n   * The value that represents indeterminate state of checkbox\n   */\n\n\n  get indeterminate() {\n    return this.indeterminateValue;\n  }\n\n  set indeterminate(value) {\n    if (this.indeterminateValue !== value) {\n      this.indeterminateValue = value;\n      this.indeterminateChange.emit(this.indeterminate);\n    }\n  }\n\n  onValueChange() {\n    if (this.indeterminate && this.inputElement) {\n      this.indeterminate = false;\n      this.inputElement.nativeElement.checked = false;\n      this.inputElement.nativeElement.dispatchEvent(new Event('change'));\n    }\n\n    super.onValueChange();\n  }\n\n  setFocus() {\n    if (this.inputElement) {\n      this.inputElement.nativeElement.focus();\n    }\n  }\n\n}\n\nInputCheckboxComponent.ɵfac = function InputCheckboxComponent_Factory(t) {\n  return new (t || InputCheckboxComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.DeprecationsService), i0.ɵɵdirectiveInject(i2.NgControl, 10));\n};\n\nInputCheckboxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: InputCheckboxComponent,\n  selectors: [[\"bb-input-checkbox-ui\"]],\n  viewQuery: function InputCheckboxComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);\n    }\n  },\n  inputs: {\n    indeterminate: \"indeterminate\"\n  },\n  outputs: {\n    indeterminateChange: \"indeterminateChange\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c2,\n  decls: 7,\n  vars: 24,\n  consts: [[1, \"bb-input-checkbox\", 3, \"ngClass\"], [\"type\", \"checkbox\", 1, \"bb-input-checkbox__input\", 3, \"disabled\", \"required\", \"readOnly\", \"indeterminate\", \"ngModel\", \"ngModelChange\", \"change\", \"focus\", \"blur\"], [\"input\", \"\"], [1, \"bb-input-checkbox__content\"], [4, \"ngIf\", \"ngIfElse\"], [\"content\", \"\"]],\n  template: function InputCheckboxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"label\", 0);\n      i0.ɵɵelementStart(1, \"input\", 1, 2);\n      i0.ɵɵlistener(\"ngModelChange\", function InputCheckboxComponent_Template_input_ngModelChange_1_listener($event) {\n        return ctx.value = $event;\n      })(\"change\", function InputCheckboxComponent_Template_input_change_1_listener() {\n        return ctx.onValueChange();\n      })(\"focus\", function InputCheckboxComponent_Template_input_focus_1_listener($event) {\n        return ctx.onFocus($event);\n      })(\"blur\", function InputCheckboxComponent_Template_input_blur_1_listener($event) {\n        return ctx.onBlur($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"span\", 3);\n      i0.ɵɵtemplate(4, InputCheckboxComponent_ng_container_4_Template, 2, 1, \"ng-container\", 4);\n      i0.ɵɵtemplate(5, InputCheckboxComponent_ng_template_5_Template, 1, 0, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r2 = i0.ɵɵreference(6);\n\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(21, _c1, ctx.parentFormControl == null ? null : ctx.parentFormControl.invalid, ctx.parentFormControl == null ? null : ctx.parentFormControl.touched));\n      i0.ɵɵattribute(\"for\", ctx.id);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.disabled)(\"required\", ctx.required)(\"readOnly\", ctx.readonly)(\"indeterminate\", ctx.indeterminate)(\"ngModel\", ctx.value);\n      i0.ɵɵattribute(\"id\", ctx.id)(\"aria-describedby\", ctx.ariaDescribedby)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-expanded\", ctx.ariaExpanded)(\"role\", ctx.role)(\"aria-invalid\", ctx.ariaInvalid)(\"aria-owns\", ctx.ariaOwns)(\"aria-activedescendant\", ctx.ariaActivedescendant)(\"aria-checked\", ctx.value)(\"aria-label\", !ctx.label && ctx.ariaLabel || null)(\"data-role\", \"checkbox-input\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"data-role\", \"checkbox-label\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.label)(\"ngIfElse\", _r2);\n    }\n  },\n  directives: [i3.NgClass, i2.CheckboxRequiredValidator, i2.CheckboxControlValueAccessor, i2.NgControlStatus, i2.NgModel, i3.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputCheckboxComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-input-checkbox-ui',\n      templateUrl: './input-checkbox.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i1.DeprecationsService\n    }, {\n      type: i2.NgControl,\n      decorators: [{\n        type: Self\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    inputElement: [{\n      type: ViewChild,\n      args: ['input', {\n        static: true\n      }]\n    }],\n    indeterminateChange: [{\n      type: Output\n    }],\n    indeterminate: [{\n      type: Input\n    }]\n  });\n})();\n\nclass InputCheckboxModule {}\n\nInputCheckboxModule.ɵfac = function InputCheckboxModule_Factory(t) {\n  return new (t || InputCheckboxModule)();\n};\n\nInputCheckboxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: InputCheckboxModule\n});\nInputCheckboxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, IconModule, FormsModule, BaseClassesModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputCheckboxModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, IconModule, FormsModule, BaseClassesModule],\n      declarations: [InputCheckboxComponent],\n      exports: [InputCheckboxComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { InputCheckboxComponent, InputCheckboxModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-input-checkbox.js"],"names":["i0","EventEmitter","Component","ChangeDetectionStrategy","Self","Optional","ViewChild","Output","Input","NgModule","InputBaseComponent","BaseClassesModule","i1","i2","FormsModule","i3","CommonModule","IconModule","InputCheckboxComponent","constructor","cd","el","deprecationsService","parentFormControl","indeterminateChange","indeterminateValue","valueAccessor","indeterminate","value","emit","onValueChange","inputElement","nativeElement","checked","dispatchEvent","Event","setFocus","focus","ɵfac","ChangeDetectorRef","ElementRef","DeprecationsService","NgControl","ɵcmp","NgClass","CheckboxRequiredValidator","CheckboxControlValueAccessor","NgControlStatus","NgModel","NgIf","type","args","selector","templateUrl","changeDetection","OnPush","decorators","static","InputCheckboxModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Self, Optional, ViewChild, Output, Input, NgModule } from '@angular/core';\nimport { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';\nimport * as i1 from '@backbase/foundation-ang/future';\nimport * as i2 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from '@backbase/ui-ang/icon';\n\n/**\n * @name InputCheckboxComponent\n *\n * @description\n * Component that displays a checkbox input.\n */\nclass InputCheckboxComponent extends InputBaseComponent {\n    constructor(cd, el, deprecationsService, parentFormControl) {\n        super(cd, deprecationsService);\n        this.cd = cd;\n        this.el = el;\n        this.deprecationsService = deprecationsService;\n        this.parentFormControl = parentFormControl;\n        /**\n         * Event emitted when the checkbox's `indeterminate` value changes.\n         */\n        this.indeterminateChange = new EventEmitter();\n        this.indeterminateValue = false;\n        if (this.parentFormControl) {\n            this.parentFormControl.valueAccessor = this;\n        }\n    }\n    /**\n     * The value that represents indeterminate state of checkbox\n     */\n    get indeterminate() {\n        return this.indeterminateValue;\n    }\n    set indeterminate(value) {\n        if (this.indeterminateValue !== value) {\n            this.indeterminateValue = value;\n            this.indeterminateChange.emit(this.indeterminate);\n        }\n    }\n    onValueChange() {\n        if (this.indeterminate && this.inputElement) {\n            this.indeterminate = false;\n            this.inputElement.nativeElement.checked = false;\n            this.inputElement.nativeElement.dispatchEvent(new Event('change'));\n        }\n        super.onValueChange();\n    }\n    setFocus() {\n        if (this.inputElement) {\n            this.inputElement.nativeElement.focus();\n        }\n    }\n}\nInputCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputCheckboxComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.DeprecationsService }, { token: i2.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });\nInputCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: InputCheckboxComponent, selector: \"bb-input-checkbox-ui\", inputs: { indeterminate: \"indeterminate\" }, outputs: { indeterminateChange: \"indeterminateChange\" }, viewQueries: [{ propertyName: \"inputElement\", first: true, predicate: [\"input\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<label\\n  [attr.for]=\\\"id\\\"\\n  class=\\\"bb-input-checkbox\\\"\\n  [ngClass]=\\\"{ 'ng-invalid': parentFormControl?.invalid, 'ng-touched': parentFormControl?.touched }\\\"\\n>\\n  <input\\n    #input\\n    type=\\\"checkbox\\\"\\n    class=\\\"bb-input-checkbox__input\\\"\\n    [attr.id]=\\\"id\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n    [attr.aria-expanded]=\\\"ariaExpanded\\\"\\n    [attr.role]=\\\"role\\\"\\n    [attr.aria-invalid]=\\\"ariaInvalid\\\"\\n    [attr.aria-owns]=\\\"ariaOwns\\\"\\n    [attr.aria-activedescendant]=\\\"ariaActivedescendant\\\"\\n    [attr.aria-checked]=\\\"value\\\"\\n    [disabled]=\\\"disabled\\\"\\n    [required]=\\\"required\\\"\\n    [readOnly]=\\\"readonly\\\"\\n    [indeterminate]=\\\"indeterminate\\\"\\n    [attr.aria-label]=\\\"(!label && ariaLabel) || null\\\"\\n    [(ngModel)]=\\\"value\\\"\\n    (change)=\\\"onValueChange()\\\"\\n    (focus)=\\\"onFocus($event)\\\"\\n    (blur)=\\\"onBlur($event)\\\"\\n    [attr.data-role]=\\\"'checkbox-input'\\\"\\n  />\\n  <span class=\\\"bb-input-checkbox__content\\\" [attr.data-role]=\\\"'checkbox-label'\\\">\\n    <ng-container *ngIf=\\\"label; else content\\\">\\n      {{ label }}\\n    </ng-container>\\n    <ng-template #content>\\n      <ng-content></ng-content>\\n    </ng-template>\\n  </span>\\n</label>\\n\", directives: [{ type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.CheckboxRequiredValidator, selector: \"input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]\" }, { type: i2.CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\" }, { type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputCheckboxComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-input-checkbox-ui',\n                    templateUrl: './input-checkbox.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.DeprecationsService }, { type: i2.NgControl, decorators: [{\n                    type: Self\n                }, {\n                    type: Optional\n                }] }]; }, propDecorators: { inputElement: [{\n                type: ViewChild,\n                args: ['input', { static: true }]\n            }], indeterminateChange: [{\n                type: Output\n            }], indeterminate: [{\n                type: Input\n            }] } });\n\nclass InputCheckboxModule {\n}\nInputCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nInputCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputCheckboxModule, declarations: [InputCheckboxComponent], imports: [CommonModule, IconModule, FormsModule, BaseClassesModule], exports: [InputCheckboxComponent] });\nInputCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputCheckboxModule, imports: [[CommonModule, IconModule, FormsModule, BaseClassesModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputCheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, IconModule, FormsModule, BaseClassesModule],\n                    declarations: [InputCheckboxComponent],\n                    exports: [InputCheckboxComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { InputCheckboxComponent, InputCheckboxModule };\n"]},"metadata":{},"sourceType":"module"}