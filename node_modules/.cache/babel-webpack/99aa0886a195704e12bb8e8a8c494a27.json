{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, EventEmitter, TemplateRef, Component, Optional, Host, ContentChild, Input, Output, NgModule } from '@angular/core';\nimport * as i1 from '@backbase/ui-ang/collapsible-accordion';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@ng-bootstrap/ng-bootstrap';\nimport { NgbCollapseModule } from '@ng-bootstrap/ng-bootstrap';\n\nfunction CollapsibleComponent_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction CollapsibleComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, CollapsibleComponent_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.collapsibleHeader)(\"ngTemplateOutletContext\", ctx_r0.headerContext);\n  }\n}\n\nfunction CollapsibleComponent_ng_container_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction CollapsibleComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 2);\n    i0.ɵɵtemplate(2, CollapsibleComponent_ng_container_1_ng_container_2_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngbCollapse\", !ctx_r1.isOpen);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.collapsibleBody)(\"ngTemplateOutletContext\", ctx_r1.headerContext);\n  }\n}\n\nfunction CollapsibleComponent_ng_container_2_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction CollapsibleComponent_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, CollapsibleComponent_ng_container_2_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r5.collapsibleBody)(\"ngTemplateOutletContext\", ctx_r5.headerContext);\n  }\n}\n\nfunction CollapsibleComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, CollapsibleComponent_ng_container_2_ng_container_1_Template, 2, 2, \"ng-container\", 0);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.isOpen);\n  }\n}\n\nclass CollapsibleHeaderDirective {\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n\n}\n\nCollapsibleHeaderDirective.ɵfac = function CollapsibleHeaderDirective_Factory(t) {\n  return new (t || CollapsibleHeaderDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nCollapsibleHeaderDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CollapsibleHeaderDirective,\n  selectors: [[\"ng-template\", \"bbCollapsibleHeader\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CollapsibleHeaderDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[bbCollapsibleHeader]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n\nclass CollapsibleBodyDirective {\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n\n}\n\nCollapsibleBodyDirective.ɵfac = function CollapsibleBodyDirective_Factory(t) {\n  return new (t || CollapsibleBodyDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nCollapsibleBodyDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CollapsibleBodyDirective,\n  selectors: [[\"ng-template\", \"bbCollapsibleBody\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CollapsibleBodyDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[bbCollapsibleBody]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * @name CollapsibleComponent\n *\n * @description\n * Provides an expandable details-summary/body-header view.\n */\n\n\nclass CollapsibleComponent {\n  //TODO: review approach with such dependency on Accordion\n  constructor(bbCollapsibleAccordion) {\n    this.bbCollapsibleAccordion = bbCollapsibleAccordion;\n    /**\n     * If true, it will use the ngIf approach to create the content\n     * which is less performant but removes the extra div.\n     * In case of styling issues, set this to true.\n     */\n\n    this.recreateBodyContent = false;\n    /**\n     * Whether chevron should be displayed. Defaults to true.\n     */\n\n    this.hasChevron = true;\n    this.open = false;\n    /**\n     * Emits the toggle content event.\n     */\n\n    this.isOpenChange = new EventEmitter();\n\n    this.toggle = () => {\n      this.isOpen = !this.isOpen;\n    };\n\n    if (this.bbCollapsibleAccordion) {\n      this.bbCollapsibleAccordion.registerNestedPanel(this);\n    }\n\n    this.headerContext = {\n      toggle: this.toggle,\n      isOpen: this.isOpen\n    };\n  }\n  /**\n   * Toggles the content.\n   */\n\n\n  set isOpen(v) {\n    this.open = v;\n    this.isOpenChange.emit(v);\n    this.headerContext.isOpen = v;\n  }\n\n  get isOpen() {\n    return this.open;\n  }\n\n  ngOnDestroy() {\n    if (this.bbCollapsibleAccordion) {\n      this.bbCollapsibleAccordion.unregisterNestedPanel(this);\n    }\n  }\n\n}\n\nCollapsibleComponent.ɵfac = function CollapsibleComponent_Factory(t) {\n  return new (t || CollapsibleComponent)(i0.ɵɵdirectiveInject(i1.CollapsibleAccordionComponent, 9));\n};\n\nCollapsibleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CollapsibleComponent,\n  selectors: [[\"bb-collapsible-ui\"]],\n  contentQueries: function CollapsibleComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, CollapsibleHeaderDirective, 7, TemplateRef);\n      i0.ɵɵcontentQuery(dirIndex, CollapsibleBodyDirective, 7, TemplateRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.collapsibleHeader = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.collapsibleBody = _t.first);\n    }\n  },\n  inputs: {\n    recreateBodyContent: \"recreateBodyContent\",\n    hasChevron: \"hasChevron\",\n    isOpen: \"isOpen\"\n  },\n  outputs: {\n    isOpenChange: \"isOpenChange\"\n  },\n  decls: 3,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngbCollapse\"]],\n  template: function CollapsibleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CollapsibleComponent_ng_container_0_Template, 2, 2, \"ng-container\", 0);\n      i0.ɵɵtemplate(1, CollapsibleComponent_ng_container_1_Template, 3, 3, \"ng-container\", 0);\n      i0.ɵɵtemplate(2, CollapsibleComponent_ng_container_2_Template, 2, 1, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.collapsibleHeader);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.collapsibleBody && !ctx.recreateBodyContent);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.collapsibleBody && ctx.recreateBodyContent);\n    }\n  },\n  directives: [i2.NgIf, i2.NgTemplateOutlet, i3.NgbCollapse],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CollapsibleComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-collapsible-ui',\n      templateUrl: './collapsible.component.html'\n    }]\n  }], function () {\n    return [{\n      type: i1.CollapsibleAccordionComponent,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Host\n      }]\n    }];\n  }, {\n    collapsibleHeader: [{\n      type: ContentChild,\n      args: [CollapsibleHeaderDirective, {\n        read: TemplateRef,\n        static: true\n      }]\n    }],\n    collapsibleBody: [{\n      type: ContentChild,\n      args: [CollapsibleBodyDirective, {\n        read: TemplateRef,\n        static: true\n      }]\n    }],\n    recreateBodyContent: [{\n      type: Input\n    }],\n    hasChevron: [{\n      type: Input\n    }],\n    isOpen: [{\n      type: Input\n    }],\n    isOpenChange: [{\n      type: Output\n    }]\n  });\n})();\n\nclass CollapsibleModule {}\n\nCollapsibleModule.ɵfac = function CollapsibleModule_Factory(t) {\n  return new (t || CollapsibleModule)();\n};\n\nCollapsibleModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CollapsibleModule\n});\nCollapsibleModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, NgbCollapseModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CollapsibleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, NgbCollapseModule],\n      declarations: [CollapsibleComponent, CollapsibleHeaderDirective, CollapsibleBodyDirective],\n      exports: [CollapsibleComponent, CollapsibleHeaderDirective, CollapsibleBodyDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CollapsibleBodyDirective, CollapsibleComponent, CollapsibleHeaderDirective, CollapsibleModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-collapsible.js"],"names":["i0","Directive","EventEmitter","TemplateRef","Component","Optional","Host","ContentChild","Input","Output","NgModule","i1","i2","CommonModule","i3","NgbCollapseModule","CollapsibleHeaderDirective","constructor","templateRef","ɵfac","ɵdir","type","args","selector","CollapsibleBodyDirective","CollapsibleComponent","bbCollapsibleAccordion","recreateBodyContent","hasChevron","open","isOpenChange","toggle","isOpen","registerNestedPanel","headerContext","v","emit","ngOnDestroy","unregisterNestedPanel","CollapsibleAccordionComponent","ɵcmp","NgIf","NgTemplateOutlet","NgbCollapse","templateUrl","decorators","collapsibleHeader","read","static","collapsibleBody","CollapsibleModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, EventEmitter, TemplateRef, Component, Optional, Host, ContentChild, Input, Output, NgModule } from '@angular/core';\nimport * as i1 from '@backbase/ui-ang/collapsible-accordion';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@ng-bootstrap/ng-bootstrap';\nimport { NgbCollapseModule } from '@ng-bootstrap/ng-bootstrap';\n\nclass CollapsibleHeaderDirective {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCollapsibleHeaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CollapsibleHeaderDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCollapsibleHeaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.16\", type: CollapsibleHeaderDirective, selector: \"ng-template[bbCollapsibleHeader]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CollapsibleHeaderDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: 'ng-template[bbCollapsibleHeader]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\nclass CollapsibleBodyDirective {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCollapsibleBodyDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CollapsibleBodyDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCollapsibleBodyDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.16\", type: CollapsibleBodyDirective, selector: \"ng-template[bbCollapsibleBody]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CollapsibleBodyDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: 'ng-template[bbCollapsibleBody]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n/**\n * @name CollapsibleComponent\n *\n * @description\n * Provides an expandable details-summary/body-header view.\n */\nclass CollapsibleComponent {\n    //TODO: review approach with such dependency on Accordion\n    constructor(bbCollapsibleAccordion) {\n        this.bbCollapsibleAccordion = bbCollapsibleAccordion;\n        /**\n         * If true, it will use the ngIf approach to create the content\n         * which is less performant but removes the extra div.\n         * In case of styling issues, set this to true.\n         */\n        this.recreateBodyContent = false;\n        /**\n         * Whether chevron should be displayed. Defaults to true.\n         */\n        this.hasChevron = true;\n        this.open = false;\n        /**\n         * Emits the toggle content event.\n         */\n        this.isOpenChange = new EventEmitter();\n        this.toggle = () => {\n            this.isOpen = !this.isOpen;\n        };\n        if (this.bbCollapsibleAccordion) {\n            this.bbCollapsibleAccordion.registerNestedPanel(this);\n        }\n        this.headerContext = {\n            toggle: this.toggle,\n            isOpen: this.isOpen,\n        };\n    }\n    /**\n     * Toggles the content.\n     */\n    set isOpen(v) {\n        this.open = v;\n        this.isOpenChange.emit(v);\n        this.headerContext.isOpen = v;\n    }\n    get isOpen() {\n        return this.open;\n    }\n    ngOnDestroy() {\n        if (this.bbCollapsibleAccordion) {\n            this.bbCollapsibleAccordion.unregisterNestedPanel(this);\n        }\n    }\n}\nCollapsibleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CollapsibleComponent, deps: [{ token: i1.CollapsibleAccordionComponent, host: true, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nCollapsibleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: CollapsibleComponent, selector: \"bb-collapsible-ui\", inputs: { recreateBodyContent: \"recreateBodyContent\", hasChevron: \"hasChevron\", isOpen: \"isOpen\" }, outputs: { isOpenChange: \"isOpenChange\" }, queries: [{ propertyName: \"collapsibleHeader\", first: true, predicate: CollapsibleHeaderDirective, descendants: true, read: TemplateRef, static: true }, { propertyName: \"collapsibleBody\", first: true, predicate: CollapsibleBodyDirective, descendants: true, read: TemplateRef, static: true }], ngImport: i0, template: \"<ng-container *ngIf=\\\"collapsibleHeader\\\">\\n  <ng-container *ngTemplateOutlet=\\\"collapsibleHeader; context: headerContext\\\"> </ng-container>\\n</ng-container>\\n\\n<ng-container *ngIf=\\\"collapsibleBody && !recreateBodyContent\\\">\\n  <div [ngbCollapse]=\\\"!isOpen\\\">\\n    <ng-container *ngTemplateOutlet=\\\"collapsibleBody; context: headerContext\\\"> </ng-container>\\n  </div>\\n</ng-container>\\n\\n<ng-container *ngIf=\\\"collapsibleBody && recreateBodyContent\\\">\\n  <ng-container *ngIf=\\\"!isOpen\\\">\\n    <ng-container *ngTemplateOutlet=\\\"collapsibleBody; context: headerContext\\\"> </ng-container>\\n  </ng-container>\\n</ng-container>\\n\", directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }, { type: i3.NgbCollapse, selector: \"[ngbCollapse]\", inputs: [\"ngbCollapse\", \"animation\"], outputs: [\"ngbCollapseChange\", \"shown\", \"hidden\"], exportAs: [\"ngbCollapse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CollapsibleComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-collapsible-ui',\n                    templateUrl: './collapsible.component.html',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.CollapsibleAccordionComponent, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }] }]; }, propDecorators: { collapsibleHeader: [{\n                type: ContentChild,\n                args: [CollapsibleHeaderDirective, { read: TemplateRef, static: true }]\n            }], collapsibleBody: [{\n                type: ContentChild,\n                args: [CollapsibleBodyDirective, { read: TemplateRef, static: true }]\n            }], recreateBodyContent: [{\n                type: Input\n            }], hasChevron: [{\n                type: Input\n            }], isOpen: [{\n                type: Input\n            }], isOpenChange: [{\n                type: Output\n            }] } });\n\nclass CollapsibleModule {\n}\nCollapsibleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CollapsibleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCollapsibleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CollapsibleModule, declarations: [CollapsibleComponent, CollapsibleHeaderDirective, CollapsibleBodyDirective], imports: [CommonModule, NgbCollapseModule], exports: [CollapsibleComponent, CollapsibleHeaderDirective, CollapsibleBodyDirective] });\nCollapsibleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CollapsibleModule, imports: [[CommonModule, NgbCollapseModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CollapsibleModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, NgbCollapseModule],\n                    declarations: [CollapsibleComponent, CollapsibleHeaderDirective, CollapsibleBodyDirective],\n                    exports: [CollapsibleComponent, CollapsibleHeaderDirective, CollapsibleBodyDirective],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CollapsibleBodyDirective, CollapsibleComponent, CollapsibleHeaderDirective, CollapsibleModule };\n"]},"metadata":{},"sourceType":"module"}