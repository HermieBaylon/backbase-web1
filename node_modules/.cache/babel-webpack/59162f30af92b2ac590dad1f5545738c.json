{"ast":null,"code":"import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, Input, NgModule } from '@angular/core';\n/**\n * @name CharCounterComponent\n *\n * @description\n * Component for counting characters typed inside a form element\n */\n\nfunction CharCounterComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵi18n(1, 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵi18nExp(ctx_r0.maxLength - ctx_r0.counter);\n    i0.ɵɵi18nApply(1);\n  }\n}\n\nfunction CharCounterComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵi18n(1, 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"data-role\", \"char-counter-error-message\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵi18nExp(ctx_r1.maxLength);\n    i0.ɵɵi18nApply(1);\n  }\n}\n\nfunction CharCounterComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"data-role\", \"char-counter-current-max\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r2.counter, \"/\", ctx_r2.maxLength, \"\");\n  }\n}\n\nclass CharCounterComponent {\n  constructor(renderer, cd) {\n    this.renderer = renderer;\n    this.cd = cd;\n    /**\n     * Indicator for maximum character count.\n     */\n\n    this.maxLength = 150;\n    this._blockTyping = false;\n    this.counter = 0;\n    this.valid = true;\n  }\n  /**\n   * Whether the element should be blocked when maximum character count is reached.\n   */\n\n\n  set blockTyping(val) {\n    this._blockTyping = val;\n\n    if (this.blockTyping && this.element) {\n      this.renderer.setAttribute(this.element, 'maxlength', this.maxLength.toString());\n    } else {\n      this.renderer.removeAttribute(this.element, 'maxlength');\n    }\n  }\n\n  get blockTyping() {\n    return this._blockTyping;\n  }\n\n  ngOnInit() {\n    if (this.blockTyping && this.element) {\n      this.renderer.setAttribute(this.element, 'maxlength', this.maxLength.toString());\n    } // Cover by setTimeout for handling value change in input/textarea\n    // This change cannot be checked by lifecycle hooks.\n\n\n    setTimeout(() => {\n      this.calculateElementValue();\n    }, 0);\n    this.renderer.listen(this.element, 'input', () => this.calculateElementValue());\n  }\n\n  ngOnChanges(changes) {\n    const {\n      inputValue\n    } = changes;\n\n    if (inputValue && inputValue.previousValue !== inputValue.currentValue) {\n      this.counter = inputValue.currentValue.length;\n      this.valid = this.counter <= this.maxLength;\n    }\n  } // It should be deprecated, because it doesn't allow to count\n  // value that was updated programmatically, for instance by patchValue\n\n\n  calculateElementValue() {\n    this.counter = this.element ? this.element.value.length : 0;\n    this.valid = this.counter <= this.maxLength;\n    this.cd.detectChanges();\n  }\n\n}\n\nCharCounterComponent.ɵfac = function CharCounterComponent_Factory(t) {\n  return new (t || CharCounterComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nCharCounterComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CharCounterComponent,\n  selectors: [[\"bb-char-counter-ui\"]],\n  inputs: {\n    inputValue: \"inputValue\",\n    element: \"element\",\n    maxLength: \"maxLength\",\n    blockTyping: \"blockTyping\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 5,\n  vars: 6,\n  consts: function () {\n    let i18n_0;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc String is almost has 'maxLength' characters.\n       *         \n       * @meaning Above to reach Max Length Error\n       */\n      const MSG_C__USERS_HBAYLON_DOCUMENTS_WEST_MONROE_PROJECTS_BACKBASE2_WEB_RETAIL_USA_WEB_NODE_MODULES__BACKBASE_UI_ANG_FESM2015_BACKBASE_UI_ANG_CHAR_COUNTER_JS__1 = goog.getMsg(\" You can type only {$interpolation} more characters in this field. \", {\n        \"interpolation\": \"\\uFFFD0\\uFFFD\"\n      });\n      i18n_0 = MSG_C__USERS_HBAYLON_DOCUMENTS_WEST_MONROE_PROJECTS_BACKBASE2_WEB_RETAIL_USA_WEB_NODE_MODULES__BACKBASE_UI_ANG_FESM2015_BACKBASE_UI_ANG_CHAR_COUNTER_JS__1;\n    } else {\n      i18n_0 = $localize`:Above to reach Max Length Error|String is almost has 'maxLength' characters.\n        @@bb-char-counter-ui.pre-max-length-warning: You can type only ${\"\\uFFFD0\\uFFFD\"}:INTERPOLATION: more characters in this field. `;\n    }\n\n    let i18n_2;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc String is more than 'maxLength' characters. \n       * @meaning Max Length Error\n       */\n      const MSG_C__USERS_HBAYLON_DOCUMENTS_WEST_MONROE_PROJECTS_BACKBASE2_WEB_RETAIL_USA_WEB_NODE_MODULES__BACKBASE_UI_ANG_FESM2015_BACKBASE_UI_ANG_CHAR_COUNTER_JS__3 = goog.getMsg(\" Limit reached. You can only use {$interpolation} characters in this field. \", {\n        \"interpolation\": \"\\uFFFD0\\uFFFD\"\n      });\n      i18n_2 = MSG_C__USERS_HBAYLON_DOCUMENTS_WEST_MONROE_PROJECTS_BACKBASE2_WEB_RETAIL_USA_WEB_NODE_MODULES__BACKBASE_UI_ANG_FESM2015_BACKBASE_UI_ANG_CHAR_COUNTER_JS__3;\n    } else {\n      i18n_2 = $localize`:Max Length Error|String is more than 'maxLength' characters. @@bb-char-counter-ui.max-length-warning: Limit reached. You can only use ${\"\\uFFFD0\\uFFFD\"}:INTERPOLATION: characters in this field. `;\n    }\n\n    return [[1, \"bb-char-counter\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", \"role\", \"log\", 1, \"sr-only\", 3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [4, \"ngIf\"], i18n_0, i18n_2];\n  },\n  template: function CharCounterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵtemplate(2, CharCounterComponent_div_2_Template, 2, 1, \"div\", 2);\n      i0.ɵɵtemplate(3, CharCounterComponent_div_3_Template, 2, 2, \"div\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, CharCounterComponent_div_4_Template, 2, 3, \"div\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"bb-char-counter--invalid\", !ctx.valid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitch\", true);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", ctx.counter > ctx.maxLength - 4 && ctx.counter !== ctx.maxLength);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", ctx.counter === ctx.maxLength);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.element);\n    }\n  },\n  directives: [i1.NgSwitch, i1.NgSwitchCase, i1.NgIf],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CharCounterComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-char-counter-ui',\n      templateUrl: './char-counter.component.html'\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    inputValue: [{\n      type: Input\n    }],\n    element: [{\n      type: Input\n    }],\n    maxLength: [{\n      type: Input\n    }],\n    blockTyping: [{\n      type: Input\n    }]\n  });\n})();\n\nclass CharCounterModule {}\n\nCharCounterModule.ɵfac = function CharCounterModule_Factory(t) {\n  return new (t || CharCounterModule)();\n};\n\nCharCounterModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CharCounterModule\n});\nCharCounterModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CharCounterModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [CharCounterComponent],\n      exports: [CharCounterComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CharCounterComponent, CharCounterModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-char-counter.js"],"names":["i1","CommonModule","i0","Component","Input","NgModule","CharCounterComponent","constructor","renderer","cd","maxLength","_blockTyping","counter","valid","blockTyping","val","element","setAttribute","toString","removeAttribute","ngOnInit","setTimeout","calculateElementValue","listen","ngOnChanges","changes","inputValue","previousValue","currentValue","length","value","detectChanges","ɵfac","Renderer2","ChangeDetectorRef","ɵcmp","NgSwitch","NgSwitchCase","NgIf","type","args","selector","templateUrl","CharCounterModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, Input, NgModule } from '@angular/core';\n\n/**\n * @name CharCounterComponent\n *\n * @description\n * Component for counting characters typed inside a form element\n */\nclass CharCounterComponent {\n    constructor(renderer, cd) {\n        this.renderer = renderer;\n        this.cd = cd;\n        /**\n         * Indicator for maximum character count.\n         */\n        this.maxLength = 150;\n        this._blockTyping = false;\n        this.counter = 0;\n        this.valid = true;\n    }\n    /**\n     * Whether the element should be blocked when maximum character count is reached.\n     */\n    set blockTyping(val) {\n        this._blockTyping = val;\n        if (this.blockTyping && this.element) {\n            this.renderer.setAttribute(this.element, 'maxlength', this.maxLength.toString());\n        }\n        else {\n            this.renderer.removeAttribute(this.element, 'maxlength');\n        }\n    }\n    get blockTyping() {\n        return this._blockTyping;\n    }\n    ngOnInit() {\n        if (this.blockTyping && this.element) {\n            this.renderer.setAttribute(this.element, 'maxlength', this.maxLength.toString());\n        }\n        // Cover by setTimeout for handling value change in input/textarea\n        // This change cannot be checked by lifecycle hooks.\n        setTimeout(() => {\n            this.calculateElementValue();\n        }, 0);\n        this.renderer.listen(this.element, 'input', () => this.calculateElementValue());\n    }\n    ngOnChanges(changes) {\n        const { inputValue } = changes;\n        if (inputValue && inputValue.previousValue !== inputValue.currentValue) {\n            this.counter = inputValue.currentValue.length;\n            this.valid = this.counter <= this.maxLength;\n        }\n    }\n    // It should be deprecated, because it doesn't allow to count\n    // value that was updated programmatically, for instance by patchValue\n    calculateElementValue() {\n        this.counter = this.element ? this.element.value.length : 0;\n        this.valid = this.counter <= this.maxLength;\n        this.cd.detectChanges();\n    }\n}\nCharCounterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CharCounterComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nCharCounterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: CharCounterComponent, selector: \"bb-char-counter-ui\", inputs: { inputValue: \"inputValue\", element: \"element\", maxLength: \"maxLength\", blockTyping: \"blockTyping\" }, usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"bb-char-counter\\\" [class.bb-char-counter--invalid]=\\\"!valid\\\">\\n  <div [ngSwitch]=\\\"true\\\" aria-live=\\\"assertive\\\" class=\\\"sr-only\\\" aria-atomic=\\\"true\\\" role=\\\"log\\\">\\n    <div\\n      *ngSwitchCase=\\\"counter > maxLength - 4 && counter !== maxLength\\\"\\n      i18n=\\\"\\n        Above to reach Max Length Error|String is almost has 'maxLength' characters.\\n        @@bb-char-counter-ui.pre-max-length-warning\\\"\\n    >\\n      You can type only {{ maxLength - counter }} more characters in this field.\\n    </div>\\n    <div\\n      *ngSwitchCase=\\\"counter === maxLength\\\"\\n      [attr.data-role]=\\\"'char-counter-error-message'\\\"\\n      i18n=\\\"Max Length Error|String is more than 'maxLength' characters. @@bb-char-counter-ui.max-length-warning\\\"\\n    >\\n      Limit reached. You can only use {{ maxLength }} characters in this field.\\n    </div>\\n  </div>\\n\\n  <div *ngIf=\\\"element\\\" [attr.data-role]=\\\"'char-counter-current-max'\\\">{{ counter }}/{{ maxLength }}</div>\\n</div>\\n\", directives: [{ type: i1.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i1.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CharCounterComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-char-counter-ui',\n                    templateUrl: './char-counter.component.html',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { inputValue: [{\n                type: Input\n            }], element: [{\n                type: Input\n            }], maxLength: [{\n                type: Input\n            }], blockTyping: [{\n                type: Input\n            }] } });\n\nclass CharCounterModule {\n}\nCharCounterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CharCounterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCharCounterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CharCounterModule, declarations: [CharCounterComponent], imports: [CommonModule], exports: [CharCounterComponent] });\nCharCounterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CharCounterModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CharCounterModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [CharCounterComponent],\n                    exports: [CharCounterComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CharCounterComponent, CharCounterModule };\n"]},"metadata":{},"sourceType":"module"}