{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, HostListener, Component, ChangeDetectionStrategy, Self, Optional, ViewChild, NgModule } from '@angular/core';\nimport { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';\nimport * as i1 from '@backbase/ui-ang/services';\nimport * as i2 from '@backbase/foundation-ang/future';\nimport * as i3 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i6 from '@backbase/ui-ang/focus';\nimport { FocusModule } from '@backbase/ui-ang/focus';\nconst _c0 = [\"inputNumber\"];\n\nfunction InputNumberComponent_label_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"for\", ctx_r0.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.label);\n  }\n}\n\nclass DigitOnlyDirective {\n  constructor(el) {\n    this.el = el;\n    this.navigationKeys = ['Backspace', 'Delete', 'Tab', 'Escape', 'Enter', 'Home', 'End', 'ArrowLeft', 'ArrowRight', 'Clear', 'Copy', 'Paste'];\n    this.isEnabled = true;\n    this.allowNegativeSign = false;\n    this.inputElement = el.nativeElement;\n  }\n  /* eslint-disable complexity */\n\n\n  onKeyDown(e) {\n    const array = ['KeyA', 'KeyC', 'KeyV', 'KeyX'];\n    const matchPattern = this.allowNegativeSign ? /^-|\\d$/ : /^\\d$/;\n\n    if (!this.isEnabled || this.navigationKeys.indexOf(e.key) > -1 || array.includes(e.code) && (e.ctrlKey || e.metaKey)) {\n      this.previousKey = e.key;\n      return;\n    }\n\n    const preventEventDefault = // it is other than pattern\n    !matchPattern.test(e.key) || // try to add negative when there is already a value\n    e.key === '-' && this.inputElement.value.indexOf('-') > -1 || // try to add negative sign when you hit negative sign just before\n    e.key === '-' && this.previousKey === '-';\n\n    if (!this.inputElement.value && this.previousKey !== '-') {\n      this.inputElement.value = '';\n    }\n\n    this.previousKey = e.key;\n\n    if (preventEventDefault) {\n      e.preventDefault();\n    }\n  }\n\n}\n\nDigitOnlyDirective.ɵfac = function DigitOnlyDirective_Factory(t) {\n  return new (t || DigitOnlyDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nDigitOnlyDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DigitOnlyDirective,\n  selectors: [[\"\", \"bbDigitOnly\", \"\"]],\n  hostBindings: function DigitOnlyDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function DigitOnlyDirective_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n  },\n  inputs: {\n    isEnabled: [\"bbDigitOnly\", \"isEnabled\"],\n    allowNegativeSign: \"allowNegativeSign\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DigitOnlyDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[bbDigitOnly]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    isEnabled: [{\n      type: Input,\n      args: ['bbDigitOnly']\n    }],\n    allowNegativeSign: [{\n      type: Input\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\n/**\n * @name InputNumberComponent\n *\n * @description\n * Component that displays a text input.\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes. You need to take care of properties that are required in your case :\n *  - role\n *  - aria-activedescendant\n *  - aria-describedby\n *  - aria-expanded\n *  - aria-invalid\n *  - aria-label\n *  - aria-labelledby\n *  - aria-owns\n *\n */\n\n\nclass InputNumberComponent extends InputBaseComponent {\n  constructor(domAttrService, elem, renderer2, cd, deprecationsService, parentFormControl) {\n    super(cd, deprecationsService);\n    this.domAttrService = domAttrService;\n    this.elem = elem;\n    this.renderer2 = renderer2;\n    this.cd = cd;\n    this.deprecationsService = deprecationsService;\n    this.parentFormControl = parentFormControl;\n    /**\n     * The placeholder for the number input. Defaults to an empty string;\n     */\n\n    this.placeholder = '';\n    /**\n     * Whether the number input is readonly.\n     */\n\n    this.readonly = false;\n    /**\n     * Aria label for the number input\n     */\n\n    this.ariaLabel = 'Number Input';\n    /**\n     * If `true` then the under-laying input control will behave as a default number input\n     */\n\n    this.allowNonDigits = false;\n    /**\n     * If `true` then the under-laying input control will allow negative sign as well.\n     * Known issue is that it is possible to insert the negative sign anywhere in the field, not only at the beginning.\n     * Inserting the negative sign after a digit will render the value empty.\n     */\n\n    this.allowNegativeSign = false;\n    /* eslint-disable-next-line no-null/no-null */\n\n    this.oldInputValue = null;\n\n    if (this.parentFormControl) {\n      this.parentFormControl.valueAccessor = this;\n    }\n  }\n\n  onInput(inputNumber) {\n    if (!inputNumber.value && this.oldInputValue !== null) {\n      inputNumber.value = this.oldInputValue;\n      this.onValueChange(inputNumber.value);\n    }\n    /* eslint-disable-next-line no-null/no-null */\n\n\n    this.oldInputValue = null;\n  }\n\n  onPaste(inputNumber) {\n    this.oldInputValue = inputNumber.value;\n  }\n\n  ngAfterViewInit() {\n    if (!this.ariaLabel) {\n      this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.inputEl && this.inputEl.nativeElement, this.renderer2);\n    }\n  }\n\n}\n\nInputNumberComponent.ɵfac = function InputNumberComponent_Factory(t) {\n  return new (t || InputNumberComponent)(i0.ɵɵdirectiveInject(i1.DomAttributesService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.DeprecationsService), i0.ɵɵdirectiveInject(i3.NgControl, 10));\n};\n\nInputNumberComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: InputNumberComponent,\n  selectors: [[\"bb-input-number-ui\"]],\n  viewQuery: function InputNumberComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);\n    }\n  },\n  inputs: {\n    placeholder: \"placeholder\",\n    max: \"max\",\n    min: \"min\",\n    step: \"step\",\n    readonly: \"readonly\",\n    autocomplete: \"autocomplete\",\n    ariaLabel: \"ariaLabel\",\n    allowNonDigits: \"allowNonDigits\",\n    allowNegativeSign: \"allowNegativeSign\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 24,\n  consts: [[3, \"for\", 4, \"ngIf\"], [\"type\", \"number\", 1, \"form-control\", 3, \"bbDigitOnly\", \"allowNegativeSign\", \"id\", \"ngModel\", \"disabled\", \"readOnly\", \"placeholder\", \"required\", \"bbFocus\", \"ngModelChange\", \"blur\", \"focus\", \"input\", \"paste\"], [\"inputNumber\", \"\"], [3, \"for\"]],\n  template: function InputNumberComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r2 = i0.ɵɵgetCurrentView();\n\n      i0.ɵɵtemplate(0, InputNumberComponent_label_0_Template, 2, 2, \"label\", 0);\n      i0.ɵɵelementStart(1, \"input\", 1, 2);\n      i0.ɵɵlistener(\"ngModelChange\", function InputNumberComponent_Template_input_ngModelChange_1_listener($event) {\n        return ctx.onValueChange($event);\n      })(\"blur\", function InputNumberComponent_Template_input_blur_1_listener() {\n        return ctx.onBlur();\n      })(\"focus\", function InputNumberComponent_Template_input_focus_1_listener() {\n        return ctx.onFocus();\n      })(\"input\", function InputNumberComponent_Template_input_input_1_listener() {\n        i0.ɵɵrestoreView(_r2);\n\n        const _r1 = i0.ɵɵreference(2);\n\n        return ctx.onInput(_r1);\n      })(\"paste\", function InputNumberComponent_Template_input_paste_1_listener() {\n        i0.ɵɵrestoreView(_r2);\n\n        const _r1 = i0.ɵɵreference(2);\n\n        return ctx.onPaste(_r1);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.label);\n      i0.ɵɵadvance(1);\n      i0.ɵɵpropertyInterpolate(\"id\", ctx.id);\n      i0.ɵɵproperty(\"bbDigitOnly\", !ctx.allowNonDigits || ctx.allowNegativeSign)(\"allowNegativeSign\", ctx.allowNegativeSign)(\"ngModel\", ctx.value)(\"disabled\", ctx.disabled)(\"readOnly\", ctx.readonly)(\"placeholder\", ctx.placeholder)(\"required\", ctx.required)(\"bbFocus\", ctx.autofocus);\n      i0.ɵɵattribute(\"aria-autocomplete\", ctx.ariaAutocomplete)(\"aria-controls\", ctx.ariaControls)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby)(\"aria-expanded\", ctx.ariaExpanded)(\"role\", ctx.role)(\"aria-invalid\", ctx.ariaInvalid)(\"aria-owns\", ctx.ariaOwns)(\"aria-label\", !ctx.label && ctx.ariaLabel || null)(\"min\", ctx.min)(\"max\", ctx.max)(\"size\", ctx.size)(\"step\", ctx.step)(\"autocomplete\", ctx.autocomplete);\n    }\n  },\n  directives: [i4.NgIf, i3.NumberValueAccessor, i3.MinValidator, i3.MaxValidator, i3.DefaultValueAccessor, DigitOnlyDirective, i3.NgControlStatus, i3.NgModel, i3.RequiredValidator, i6.FocusDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputNumberComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-input-number-ui',\n      templateUrl: './input-number.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i1.DomAttributesService\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i2.DeprecationsService\n    }, {\n      type: i3.NgControl,\n      decorators: [{\n        type: Self\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    placeholder: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    step: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    autocomplete: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    inputEl: [{\n      type: ViewChild,\n      args: ['inputNumber']\n    }],\n    allowNonDigits: [{\n      type: Input\n    }],\n    allowNegativeSign: [{\n      type: Input\n    }]\n  });\n})();\n\nclass InputNumberModule {}\n\nInputNumberModule.ɵfac = function InputNumberModule_Factory(t) {\n  return new (t || InputNumberModule)();\n};\n\nInputNumberModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: InputNumberModule\n});\nInputNumberModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, FormsModule, BaseClassesModule, FocusModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputNumberModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule, BaseClassesModule, FocusModule],\n      declarations: [InputNumberComponent, DigitOnlyDirective],\n      exports: [InputNumberComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { InputNumberComponent, InputNumberModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-input-number.js"],"names":["i0","Directive","Input","HostListener","Component","ChangeDetectionStrategy","Self","Optional","ViewChild","NgModule","InputBaseComponent","BaseClassesModule","i1","i2","i3","FormsModule","i4","CommonModule","i6","FocusModule","DigitOnlyDirective","constructor","el","navigationKeys","isEnabled","allowNegativeSign","inputElement","nativeElement","onKeyDown","e","array","matchPattern","indexOf","key","includes","code","ctrlKey","metaKey","previousKey","preventEventDefault","test","value","preventDefault","ɵfac","ElementRef","ɵdir","type","args","selector","InputNumberComponent","domAttrService","elem","renderer2","cd","deprecationsService","parentFormControl","placeholder","readonly","ariaLabel","allowNonDigits","oldInputValue","valueAccessor","onInput","inputNumber","onValueChange","onPaste","ngAfterViewInit","moveAriaAttributes","inputEl","DomAttributesService","Renderer2","ChangeDetectorRef","DeprecationsService","NgControl","ɵcmp","NgIf","NumberValueAccessor","MinValidator","MaxValidator","DefaultValueAccessor","NgControlStatus","NgModel","RequiredValidator","FocusDirective","templateUrl","changeDetection","OnPush","decorators","max","min","step","autocomplete","InputNumberModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Input, HostListener, Component, ChangeDetectionStrategy, Self, Optional, ViewChild, NgModule } from '@angular/core';\nimport { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';\nimport * as i1 from '@backbase/ui-ang/services';\nimport * as i2 from '@backbase/foundation-ang/future';\nimport * as i3 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i6 from '@backbase/ui-ang/focus';\nimport { FocusModule } from '@backbase/ui-ang/focus';\n\nclass DigitOnlyDirective {\n    constructor(el) {\n        this.el = el;\n        this.navigationKeys = [\n            'Backspace',\n            'Delete',\n            'Tab',\n            'Escape',\n            'Enter',\n            'Home',\n            'End',\n            'ArrowLeft',\n            'ArrowRight',\n            'Clear',\n            'Copy',\n            'Paste',\n        ];\n        this.isEnabled = true;\n        this.allowNegativeSign = false;\n        this.inputElement = el.nativeElement;\n    }\n    /* eslint-disable complexity */\n    onKeyDown(e) {\n        const array = ['KeyA', 'KeyC', 'KeyV', 'KeyX'];\n        const matchPattern = this.allowNegativeSign ? /^-|\\d$/ : /^\\d$/;\n        if (!this.isEnabled ||\n            this.navigationKeys.indexOf(e.key) > -1 ||\n            (array.includes(e.code) && (e.ctrlKey || e.metaKey))) {\n            this.previousKey = e.key;\n            return;\n        }\n        const preventEventDefault = \n        // it is other than pattern\n        !matchPattern.test(e.key) ||\n            // try to add negative when there is already a value\n            (e.key === '-' && this.inputElement.value.indexOf('-') > -1) ||\n            // try to add negative sign when you hit negative sign just before\n            (e.key === '-' && this.previousKey === '-');\n        if (!this.inputElement.value && this.previousKey !== '-') {\n            this.inputElement.value = '';\n        }\n        this.previousKey = e.key;\n        if (preventEventDefault) {\n            e.preventDefault();\n        }\n    }\n}\nDigitOnlyDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: DigitOnlyDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nDigitOnlyDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.16\", type: DigitOnlyDirective, selector: \"[bbDigitOnly]\", inputs: { isEnabled: [\"bbDigitOnly\", \"isEnabled\"], allowNegativeSign: \"allowNegativeSign\" }, host: { listeners: { \"keydown\": \"onKeyDown($event)\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: DigitOnlyDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[bbDigitOnly]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { isEnabled: [{\n                type: Input,\n                args: ['bbDigitOnly']\n            }], allowNegativeSign: [{\n                type: Input\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\n\n/**\n * @name InputNumberComponent\n *\n * @description\n * Component that displays a text input.\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes. You need to take care of properties that are required in your case :\n *  - role\n *  - aria-activedescendant\n *  - aria-describedby\n *  - aria-expanded\n *  - aria-invalid\n *  - aria-label\n *  - aria-labelledby\n *  - aria-owns\n *\n */\nclass InputNumberComponent extends InputBaseComponent {\n    constructor(domAttrService, elem, renderer2, cd, deprecationsService, parentFormControl) {\n        super(cd, deprecationsService);\n        this.domAttrService = domAttrService;\n        this.elem = elem;\n        this.renderer2 = renderer2;\n        this.cd = cd;\n        this.deprecationsService = deprecationsService;\n        this.parentFormControl = parentFormControl;\n        /**\n         * The placeholder for the number input. Defaults to an empty string;\n         */\n        this.placeholder = '';\n        /**\n         * Whether the number input is readonly.\n         */\n        this.readonly = false;\n        /**\n         * Aria label for the number input\n         */\n        this.ariaLabel = 'Number Input';\n        /**\n         * If `true` then the under-laying input control will behave as a default number input\n         */\n        this.allowNonDigits = false;\n        /**\n         * If `true` then the under-laying input control will allow negative sign as well.\n         * Known issue is that it is possible to insert the negative sign anywhere in the field, not only at the beginning.\n         * Inserting the negative sign after a digit will render the value empty.\n         */\n        this.allowNegativeSign = false;\n        /* eslint-disable-next-line no-null/no-null */\n        this.oldInputValue = null;\n        if (this.parentFormControl) {\n            this.parentFormControl.valueAccessor = this;\n        }\n    }\n    onInput(inputNumber) {\n        if (!inputNumber.value && this.oldInputValue !== null) {\n            inputNumber.value = this.oldInputValue;\n            this.onValueChange(inputNumber.value);\n        }\n        /* eslint-disable-next-line no-null/no-null */\n        this.oldInputValue = null;\n    }\n    onPaste(inputNumber) {\n        this.oldInputValue = inputNumber.value;\n    }\n    ngAfterViewInit() {\n        if (!this.ariaLabel) {\n            this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.inputEl && this.inputEl.nativeElement, this.renderer2);\n        }\n    }\n}\nInputNumberComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputNumberComponent, deps: [{ token: i1.DomAttributesService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: i2.DeprecationsService }, { token: i3.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });\nInputNumberComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: InputNumberComponent, selector: \"bb-input-number-ui\", inputs: { placeholder: \"placeholder\", max: \"max\", min: \"min\", step: \"step\", readonly: \"readonly\", autocomplete: \"autocomplete\", ariaLabel: \"ariaLabel\", allowNonDigits: \"allowNonDigits\", allowNegativeSign: \"allowNegativeSign\" }, viewQueries: [{ propertyName: \"inputEl\", first: true, predicate: [\"inputNumber\"], descendants: true }], usesInheritance: true, ngImport: i0, template: \"<label *ngIf=\\\"label\\\" for=\\\"{{ id }}\\\">{{ label }}</label>\\n<input\\n  #inputNumber\\n  [bbDigitOnly]=\\\"!allowNonDigits || allowNegativeSign\\\"\\n  [allowNegativeSign]=\\\"allowNegativeSign\\\"\\n  id=\\\"{{ id }}\\\"\\n  [attr.aria-autocomplete]=\\\"ariaAutocomplete\\\"\\n  [attr.aria-controls]=\\\"ariaControls\\\"\\n  [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n  [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n  [attr.aria-expanded]=\\\"ariaExpanded\\\"\\n  [attr.role]=\\\"role\\\"\\n  [attr.aria-invalid]=\\\"ariaInvalid\\\"\\n  [attr.aria-owns]=\\\"ariaOwns\\\"\\n  [attr.aria-label]=\\\"(!label && ariaLabel) || null\\\"\\n  [ngModel]=\\\"value\\\"\\n  (ngModelChange)=\\\"onValueChange($event)\\\"\\n  (blur)=\\\"onBlur()\\\"\\n  type=\\\"number\\\"\\n  class=\\\"form-control\\\"\\n  (focus)=\\\"onFocus()\\\"\\n  (input)=\\\"onInput(inputNumber)\\\"\\n  (paste)=\\\"onPaste(inputNumber)\\\"\\n  [disabled]=\\\"disabled\\\"\\n  [readOnly]=\\\"readonly\\\"\\n  [placeholder]=\\\"placeholder\\\"\\n  [required]=\\\"required\\\"\\n  [attr.min]=\\\"min\\\"\\n  [attr.max]=\\\"max\\\"\\n  [attr.size]=\\\"size\\\"\\n  [attr.step]=\\\"step\\\"\\n  [bbFocus]=\\\"autofocus\\\"\\n  [attr.autocomplete]=\\\"autocomplete\\\"\\n/>\\n\", directives: [{ type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.NumberValueAccessor, selector: \"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]\" }, { type: i3.MinValidator, selector: \"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]\", inputs: [\"min\"] }, { type: i3.MaxValidator, selector: \"input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]\", inputs: [\"max\"] }, { type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: DigitOnlyDirective, selector: \"[bbDigitOnly]\", inputs: [\"bbDigitOnly\", \"allowNegativeSign\"] }, { type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i3.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i3.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { type: i6.FocusDirective, selector: \"[bbFocus]\", inputs: [\"bbFocus\"], exportAs: [\"bbFocus\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputNumberComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-input-number-ui',\n                    templateUrl: './input-number.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i1.DomAttributesService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i2.DeprecationsService }, { type: i3.NgControl, decorators: [{\n                    type: Self\n                }, {\n                    type: Optional\n                }] }]; }, propDecorators: { placeholder: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], step: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], autocomplete: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], inputEl: [{\n                type: ViewChild,\n                args: ['inputNumber']\n            }], allowNonDigits: [{\n                type: Input\n            }], allowNegativeSign: [{\n                type: Input\n            }] } });\n\nclass InputNumberModule {\n}\nInputNumberModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputNumberModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nInputNumberModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputNumberModule, declarations: [InputNumberComponent, DigitOnlyDirective], imports: [CommonModule, FormsModule, BaseClassesModule, FocusModule], exports: [InputNumberComponent] });\nInputNumberModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputNumberModule, imports: [[CommonModule, FormsModule, BaseClassesModule, FocusModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: InputNumberModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, FormsModule, BaseClassesModule, FocusModule],\n                    declarations: [InputNumberComponent, DigitOnlyDirective],\n                    exports: [InputNumberComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { InputNumberComponent, InputNumberModule };\n"]},"metadata":{},"sourceType":"module"}