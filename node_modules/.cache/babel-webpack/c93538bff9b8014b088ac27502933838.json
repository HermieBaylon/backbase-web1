{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, Component, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/router';\nimport { provideRoutes, RouterModule } from '@angular/router';\nimport { LoadMoreMethod } from '@backbase/contact-common-ang';\nimport * as i1$1 from '@backbase/contact-manager-widget-ang';\nimport { AccountCreateType, ContactManagerPreferencesService, ContactsNavigationService, ContactsFormContainerComponent, CanDeactivateGuard, ContactManagerWidgetModule } from '@backbase/contact-manager-widget-ang';\nimport { BehaviorSubject, isObservable } from 'rxjs';\nimport * as i2 from '@backbase/ui-ang/header';\nimport { HeaderModule } from '@backbase/ui-ang/header';\nimport { take } from 'rxjs/operators';\nconst ContactManagerJourneyConfigurationToken = new InjectionToken('ContactManagerJourneyConfig injection token');\nconst defaultConfiguration = {\n  newContact: true,\n  pageSize: 5,\n  maxNavPages: 3,\n  paginationType: LoadMoreMethod.PAGINATION,\n  notificationDismissTime: 5000,\n  createContactEmail: false,\n  createContactIBAN: true,\n  createContactAccount: false,\n  createContactPhone: false\n};\n/**\n * Service provides the journey configuration\n *\n * @usageNotes\n *\n * ### Ensure the ContactManagerJourneyModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerJourneyModule,\n *   ],\n * })\n * export class ContactJourneyBundleModule {}\n * ```\n *\n * ### Inject this service into your component\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ContactManagerJourneyPreferencesService],\n * })\n *  export class ContactManagerJourneyModule {\n * `\n */\n\nclass ContactManagerJourneyConfigurationService {\n  constructor(config) {\n    const configFromProviders = config ? config : {};\n    this.configuration = Object.assign(Object.assign({}, defaultConfiguration), configFromProviders);\n  }\n\n  get newContact() {\n    return this.configuration.newContact;\n  }\n\n  get pageSize() {\n    return this.configuration.pageSize;\n  }\n\n  get maxNavPages() {\n    return this.configuration.maxNavPages;\n  }\n\n  get paginationType() {\n    return this.configuration.paginationType;\n  }\n\n  get notificationDismissTime() {\n    return this.configuration.notificationDismissTime;\n  }\n\n  get createContactEmail() {\n    return this.configuration.createContactEmail;\n  }\n\n  get createContactIBAN() {\n    return this.configuration.createContactIBAN;\n  }\n\n  get createContactAccount() {\n    return this.configuration.createContactAccount;\n  }\n\n  get createContactPhone() {\n    return this.configuration.createContactPhone;\n  }\n\n}\n/** @nocollapse */\n\n\nContactManagerJourneyConfigurationService.ɵfac = function ContactManagerJourneyConfigurationService_Factory(t) {\n  return new (t || ContactManagerJourneyConfigurationService)(i0.ɵɵinject(ContactManagerJourneyConfigurationToken, 8));\n};\n/** @nocollapse */\n\n\nContactManagerJourneyConfigurationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ContactManagerJourneyConfigurationService,\n  factory: ContactManagerJourneyConfigurationService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ContactManagerJourneyConfigurationService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ContactManagerJourneyConfigurationToken]\n      }]\n    }];\n  }, null);\n})();\n\nvar View;\n\n(function (View) {\n  View[\"List\"] = \"LIST\";\n  View[\"Detail\"] = \"DETAIL\";\n  View[\"Edit\"] = \"EDIT\";\n  View[\"Select\"] = \"SELECT\";\n})(View || (View = {}));\n/**\n * Service helps the journey navigation\n *\n * @usageNotes\n *\n * ### Ensure the ContactManagerJourneyModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerJourneyModule,\n *   ],\n * })\n * export class ContactJourneyBundleModule {}\n * ```\n *\n * ### Inject this service into your component\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ContactManagerJourneyNavigationService],\n * })\n *  export class ContactManagerJourneyModule {\n * ```\n */\n\n\nclass ContactManagerJourneyNavigationService {\n  constructor(routerService, route) {\n    this.routerService = routerService;\n    this.route = route;\n    this._currentView = View.List;\n  }\n\n  get currentView() {\n    return this._currentView;\n  }\n\n  set currentView(view) {\n    this._currentView = view;\n  }\n\n  list(page, query, queryParamsHandling = 'merge') {\n    const queryParam = {};\n    if (page || page === 0) queryParam.page = page;\n    if (query || query === '') queryParam.query = query;\n    return this.routerService.navigate(['./'], {\n      queryParams: Object.assign({}, queryParam),\n      queryParamsHandling: queryParamsHandling,\n      relativeTo: this.route\n    });\n  }\n\n  select(id) {\n    this.currentView = View.Detail;\n    return this.routerService.navigate(['./', id], {\n      queryParamsHandling: 'merge',\n      relativeTo: this.route\n    });\n  }\n\n  edit(id, type = AccountCreateType.IBAN) {\n    this.currentView = View.Edit;\n    return this.routerService.navigate(['./edit', id, type], {\n      queryParamsHandling: 'merge',\n      relativeTo: this.route\n    });\n  }\n\n  newContact() {\n    this.currentView = View.Select;\n    return this.routerService.navigate(['./select'], {\n      queryParamsHandling: 'merge',\n      relativeTo: this.route\n    });\n  }\n  /**\n   *\n   * @param {AccountCreateType} type - if the new contact is of IBAN/Phone/Email/Account type\n   * @returns {Promise<boolean>} resolves to true when form is ready\n   */\n\n\n  newContactForm(type) {\n    this.currentView = View.Edit;\n    return this.routerService.navigate(['./edit', 0, type], {\n      queryParamsHandling: 'merge',\n      relativeTo: this.route\n    });\n  }\n\n}\n/** @nocollapse */\n\n\nContactManagerJourneyNavigationService.ɵfac = function ContactManagerJourneyNavigationService_Factory(t) {\n  return new (t || ContactManagerJourneyNavigationService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i1.ActivatedRoute));\n};\n/** @nocollapse */\n\n\nContactManagerJourneyNavigationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ContactManagerJourneyNavigationService,\n  factory: ContactManagerJourneyNavigationService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ContactManagerJourneyNavigationService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.Router\n    }, {\n      type: i1.ActivatedRoute\n    }];\n  }, null);\n})();\n/**\n * Service provides the journey configuration\n *\n * @usageNotes\n *\n * ### Ensure the ContactManagerJourneyModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerJourneyModule,\n *   ],\n * })\n * export class ContactJourneyBundleModule {}\n * ```\n *\n * ### Inject this service into your component\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ContactManagerJourneyPreferencesService],\n * })\n *  export class ContactManagerJourneyModule {\n * ```\n */\n\n\nclass ContactManagerJourneyPreferencesService {\n  constructor(config) {\n    this.config = config;\n    this.newContactSubject$ = new BehaviorSubject(this.config.newContact);\n    this.pageSizeSubject$ = new BehaviorSubject(this.config.pageSize);\n    this.maxNavPagesSubject$ = new BehaviorSubject(this.config.maxNavPages);\n    this.paginationTypeSubject$ = new BehaviorSubject(this.config.paginationType);\n    this.createContactEmailSubject$ = new BehaviorSubject(this.config.createContactEmail);\n    this.createContactIBANSubject$ = new BehaviorSubject(this.config.createContactIBAN);\n    this.createContactAccountSubject$ = new BehaviorSubject(this.config.createContactAccount);\n    this.createContactPhoneSubject$ = new BehaviorSubject(this.config.createContactPhone);\n    this.notificationDismissTimeSubject$ = new BehaviorSubject(this.config.notificationDismissTime);\n    this.newContact$ = this.newContactSubject$.asObservable();\n    this.pageSize$ = this.pageSizeSubject$.asObservable();\n    this.maxNavPages$ = this.maxNavPagesSubject$.asObservable();\n    this.paginationType$ = this.paginationTypeSubject$.asObservable();\n    this.createContactEmail$ = this.createContactEmailSubject$.asObservable();\n    this.createContactIBAN$ = this.createContactIBANSubject$.asObservable();\n    this.createContactAccount$ = this.createContactAccountSubject$.asObservable();\n    this.createContactPhone$ = this.createContactPhoneSubject$.asObservable();\n    this.notificationDismissTime$ = this.notificationDismissTimeSubject$.asObservable();\n  }\n\n  setNewContact(value) {\n    this.newContactSubject$.next(value);\n  }\n\n  setPageSize(value) {\n    this.pageSizeSubject$.next(value);\n  }\n\n  setMaxNavPages(value) {\n    this.maxNavPagesSubject$.next(value);\n  }\n\n  setPaginationType(value) {\n    this.paginationTypeSubject$.next(value);\n  }\n\n  setNotificationDismissTime(value) {\n    this.notificationDismissTimeSubject$.next(value);\n  }\n\n  setCreateContactEmail(value) {\n    this.createContactEmailSubject$.next(value);\n  }\n\n  setCreateContactIBAN(value) {\n    this.createContactIBANSubject$.next(value);\n  }\n\n  setCreateContactAccount(value) {\n    this.createContactAccountSubject$.next(value);\n  }\n\n  setCreateContactPhone(value) {\n    this.createContactPhoneSubject$.next(value);\n  }\n\n}\n/** @nocollapse */\n\n\nContactManagerJourneyPreferencesService.ɵfac = function ContactManagerJourneyPreferencesService_Factory(t) {\n  return new (t || ContactManagerJourneyPreferencesService)(i0.ɵɵinject(ContactManagerJourneyConfigurationService));\n};\n/** @nocollapse */\n\n\nContactManagerJourneyPreferencesService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ContactManagerJourneyPreferencesService,\n  factory: ContactManagerJourneyPreferencesService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ContactManagerJourneyPreferencesService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ContactManagerJourneyConfigurationService\n    }];\n  }, null);\n})();\n/**\n * The component combines all the functionality of contacts in journey.\n *\n *\n *  ### Include this journey (standalone model)\n *\n * ```ts\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n *   imports: [ContactManagerJourneyModule.forRoot({ route })],\n * })\n * export class ContactManagerJourneyBundleModule {}\n * ```\n *\n * ### Insert this BundleModule Laziliy.\n *\n * ```ts\n * @NgModule({\n *  BackbaseCoreModule.forRoot({\n *     lazyModules:[ {\n *   module: 'ContactManagerJourneyBundleModule',\n *   components: ['ContactManagerJourneyComponent'],\n *   loadChildren: () => import('./lazy-modules/lazy-bundle.module').then(m => m.ContactManagerJourneyBundleModule),\n * },]\n *  })\n * })\n * ```\n *\n * @ngModule ContactManagerJourneyModule\n */\n\n\nclass ContactManagerJourneyComponent {\n  constructor(config) {\n    this.config = config;\n  }\n\n}\n/** @nocollapse */\n\n\nContactManagerJourneyComponent.ɵfac = function ContactManagerJourneyComponent_Factory(t) {\n  return new (t || ContactManagerJourneyComponent)(i0.ɵɵdirectiveInject(ContactManagerJourneyConfigurationService));\n};\n/** @nocollapse */\n\n\nContactManagerJourneyComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ContactManagerJourneyComponent,\n  selectors: [[\"bb-contact-manager-journey\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: ContactManagerPreferencesService,\n    useClass: ContactManagerJourneyPreferencesService\n  }, {\n    provide: ContactsNavigationService,\n    useClass: ContactManagerJourneyNavigationService\n  }])],\n  decls: 3,\n  vars: 0,\n  consts: function () {\n    let i18n_0;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc Contact manager journey heading\n       */\n      const MSG_C__USERS_HBAYLON_DOCUMENTS_WEST_MONROE_PROJECTS_BACKBASE2_WEB_RETAIL_USA_WEB_NODE_MODULES__BACKBASE_CONTACT_MANAGER_JOURNEY_ANG_FESM2015_BACKBASE_CONTACT_MANAGER_JOURNEY_ANG_JS_1 = goog.getMsg(\"Manage Contacts\");\n      i18n_0 = MSG_C__USERS_HBAYLON_DOCUMENTS_WEST_MONROE_PROJECTS_BACKBASE2_WEB_RETAIL_USA_WEB_NODE_MODULES__BACKBASE_CONTACT_MANAGER_JOURNEY_ANG_FESM2015_BACKBASE_CONTACT_MANAGER_JOURNEY_ANG_JS_1;\n    } else {\n      i18n_0 = $localize`:Contact manager journey heading@@ccontact-manager-journey.heading.text:Manage Contacts`;\n    }\n\n    return [[\"heading\", i18n_0, \"headingType\", \"h1\"]];\n  },\n  template: function ContactManagerJourneyComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"bb-header-ui\", 0);\n      i0.ɵɵelementStart(1, \"bb-contacts-list-container\");\n      i0.ɵɵelement(2, \"router-outlet\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  directives: [i2.HeaderComponent, i1$1.ContactsListContainerComponent, i1.RouterOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ContactManagerJourneyComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-contact-manager-journey',\n      templateUrl: './contact-manager-journey.component.html',\n      providers: [{\n        provide: ContactManagerPreferencesService,\n        useClass: ContactManagerJourneyPreferencesService\n      }, {\n        provide: ContactsNavigationService,\n        useClass: ContactManagerJourneyNavigationService\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ContactManagerJourneyConfigurationService\n    }];\n  }, null);\n})();\n/**\n * The wrappper component will show detail of selected contact\n *\n * @usageNotes\n *\n * ### Display contact detail\n *\n * ```route\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n *   imports: [ContactManagerJourneyModule.forRoot({ routes })],\n * })\n * export class ContactManagerJourneyBundleModule {}\n * ```\n * @ngModule ContactManagerJourneyModule\n */\n\n\nclass ContactManagerDetailViewComponent {}\n/** @nocollapse */\n\n\nContactManagerDetailViewComponent.ɵfac = function ContactManagerDetailViewComponent_Factory(t) {\n  return new (t || ContactManagerDetailViewComponent)();\n};\n/** @nocollapse */\n\n\nContactManagerDetailViewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ContactManagerDetailViewComponent,\n  selectors: [[\"bb-contact-manager-detail-view\"]],\n  decls: 1,\n  vars: 0,\n  template: function ContactManagerDetailViewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"bb-contacts-detail-container\");\n    }\n  },\n  directives: [i1$1.ContactsDetailContainerComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ContactManagerDetailViewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-contact-manager-detail-view',\n      templateUrl: './contact-manager-detail.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, null);\n})();\n/**\n * The wrappper component will show contact form\n *\n * @usageNotes\n *\n * ### Display contact form based on type\n *\n * ```route\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n *   imports: [ContactManagerJourneyModule.forRoot({ routes })],\n * })\n * export class ContactManagerJourneyBundleModule {}\n * ```\n * @ngModule ContactManagerJourneyModule\n */\n\n\nclass ContactManagerFormViewComponent {\n  /**\n   * Event handler for navigation change guard\n   *\n   * @returns {Promise<boolean> | boolean} - resolves to true if navigation can change\n   */\n  canDeactivate() {\n    var _a;\n\n    const canDeactivate = (_a = this.contactsFormContainerComponent) === null || _a === void 0 ? void 0 : _a.canDeactivate();\n\n    if (isObservable(canDeactivate)) {\n      return canDeactivate.pipe(take(1)).toPromise();\n    }\n\n    return canDeactivate !== null && canDeactivate !== void 0 ? canDeactivate : true;\n  }\n\n}\n/** @nocollapse */\n\n\nContactManagerFormViewComponent.ɵfac = function ContactManagerFormViewComponent_Factory(t) {\n  return new (t || ContactManagerFormViewComponent)();\n};\n/** @nocollapse */\n\n\nContactManagerFormViewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ContactManagerFormViewComponent,\n  selectors: [[\"bb-contact-manager-form-view\"]],\n  viewQuery: function ContactManagerFormViewComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(ContactsFormContainerComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contactsFormContainerComponent = _t.first);\n    }\n  },\n  decls: 1,\n  vars: 0,\n  template: function ContactManagerFormViewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"bb-contacts-form-container\");\n    }\n  },\n  directives: [i1$1.ContactsFormContainerComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ContactManagerFormViewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-contact-manager-form-view',\n      templateUrl: './contact-manager-form.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    contactsFormContainerComponent: [{\n      type: ViewChild,\n      args: [ContactsFormContainerComponent]\n    }]\n  });\n})();\n/**\n * The wrappper component will show all contacts in a list\n *\n * @usageNotes\n *\n * ### Display all contacts in a list .\n *\n * ```route\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n *   imports: [ContactManagerJourneyModule.forRoot({ routes })],\n * })\n * export class ContactManagerJourneyBundleModule {}\n * ```\n * @ngModule ContactManagerJourneyModule\n */\n\n\nclass ContactManagerTypeListViewComponent {}\n/** @nocollapse */\n\n\nContactManagerTypeListViewComponent.ɵfac = function ContactManagerTypeListViewComponent_Factory(t) {\n  return new (t || ContactManagerTypeListViewComponent)();\n};\n/** @nocollapse */\n\n\nContactManagerTypeListViewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ContactManagerTypeListViewComponent,\n  selectors: [[\"bb-contact-manager-type-list-view\"]],\n  decls: 1,\n  vars: 0,\n  template: function ContactManagerTypeListViewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"bb-contacts-type-list-container\");\n    }\n  },\n  directives: [i1$1.ContactsTypeListContainerComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ContactManagerTypeListViewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-contact-manager-type-list-view',\n      templateUrl: './contact-manager-type-list.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, null);\n})();\n\nconst contactManagerRoutes = [{\n  path: '',\n  component: ContactManagerJourneyComponent,\n  children: [{\n    path: '',\n    component: ContactManagerDetailViewComponent\n  }, {\n    path: 'select',\n    component: ContactManagerTypeListViewComponent\n  }, {\n    path: ':id',\n    component: ContactManagerDetailViewComponent\n  }, {\n    path: 'edit/:id/:type',\n    canDeactivate: [CanDeactivateGuard],\n    component: ContactManagerFormViewComponent\n  }]\n}];\n/**\n * Journey for contacts in retails apps\n *\n * @usageNotes\n *\n * ### Include the exported widgets in your `AppModule`:\n *\n * ```typescript\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n * imports: [ContactManagerJourneyModule.forRoot({ route })],\n *  providers: [ {\n *   provide: ContactManagerJourneyConfigurationToken,\n *   useValue: {\n *     createContactEmail: true,\n *     createContactIBAN: true,\n *     createContactAccount: true,\n *     createContactPhone: true,\n *   } as Partial<ContactManagerJourneyConfig>,\n * },],\n * })\n * export class AppModule {}\n * ```\n */\n\nclass ContactManagerJourneyModule {\n  static forRoot(data = {\n    routes: contactManagerRoutes\n  }) {\n    return {\n      ngModule: ContactManagerJourneyModule,\n      providers: [provideRoutes(data.routes)]\n    };\n  }\n\n}\n/** @nocollapse */\n\n\nContactManagerJourneyModule.ɵfac = function ContactManagerJourneyModule_Factory(t) {\n  return new (t || ContactManagerJourneyModule)();\n};\n/** @nocollapse */\n\n\nContactManagerJourneyModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ContactManagerJourneyModule\n});\n/** @nocollapse */\n\nContactManagerJourneyModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ContactManagerJourneyConfigurationService],\n  imports: [[CommonModule, ContactManagerWidgetModule, HeaderModule, RouterModule.forChild(contactManagerRoutes)]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ContactManagerJourneyModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [ContactManagerJourneyComponent, ContactManagerDetailViewComponent, ContactManagerTypeListViewComponent, ContactManagerFormViewComponent],\n      imports: [CommonModule, ContactManagerWidgetModule, HeaderModule, RouterModule.forChild(contactManagerRoutes)],\n      providers: [ContactManagerJourneyConfigurationService]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ContactManagerJourneyConfigurationToken, ContactManagerJourneyModule, contactManagerRoutes };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/contact-manager-journey-ang/fesm2015/backbase-contact-manager-journey-ang.js"],"names":["i0","InjectionToken","Injectable","Optional","Inject","Component","ChangeDetectionStrategy","ViewChild","NgModule","CommonModule","i1","provideRoutes","RouterModule","LoadMoreMethod","i1$1","AccountCreateType","ContactManagerPreferencesService","ContactsNavigationService","ContactsFormContainerComponent","CanDeactivateGuard","ContactManagerWidgetModule","BehaviorSubject","isObservable","i2","HeaderModule","take","ContactManagerJourneyConfigurationToken","defaultConfiguration","newContact","pageSize","maxNavPages","paginationType","PAGINATION","notificationDismissTime","createContactEmail","createContactIBAN","createContactAccount","createContactPhone","ContactManagerJourneyConfigurationService","constructor","config","configFromProviders","configuration","Object","assign","ɵfac","ɵprov","type","undefined","decorators","args","View","ContactManagerJourneyNavigationService","routerService","route","_currentView","List","currentView","view","list","page","query","queryParamsHandling","queryParam","navigate","queryParams","relativeTo","select","id","Detail","edit","IBAN","Edit","Select","newContactForm","Router","ActivatedRoute","ContactManagerJourneyPreferencesService","newContactSubject$","pageSizeSubject$","maxNavPagesSubject$","paginationTypeSubject$","createContactEmailSubject$","createContactIBANSubject$","createContactAccountSubject$","createContactPhoneSubject$","notificationDismissTimeSubject$","newContact$","asObservable","pageSize$","maxNavPages$","paginationType$","createContactEmail$","createContactIBAN$","createContactAccount$","createContactPhone$","notificationDismissTime$","setNewContact","value","next","setPageSize","setMaxNavPages","setPaginationType","setNotificationDismissTime","setCreateContactEmail","setCreateContactIBAN","setCreateContactAccount","setCreateContactPhone","ContactManagerJourneyComponent","ɵcmp","provide","useClass","HeaderComponent","ContactsListContainerComponent","RouterOutlet","selector","templateUrl","providers","changeDetection","OnPush","ContactManagerDetailViewComponent","ContactsDetailContainerComponent","ContactManagerFormViewComponent","canDeactivate","_a","contactsFormContainerComponent","pipe","toPromise","ContactManagerTypeListViewComponent","ContactsTypeListContainerComponent","contactManagerRoutes","path","component","children","ContactManagerJourneyModule","forRoot","data","routes","ngModule","ɵmod","ɵinj","forChild","declarations","imports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, Component, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/router';\nimport { provideRoutes, RouterModule } from '@angular/router';\nimport { LoadMoreMethod } from '@backbase/contact-common-ang';\nimport * as i1$1 from '@backbase/contact-manager-widget-ang';\nimport { AccountCreateType, ContactManagerPreferencesService, ContactsNavigationService, ContactsFormContainerComponent, CanDeactivateGuard, ContactManagerWidgetModule } from '@backbase/contact-manager-widget-ang';\nimport { BehaviorSubject, isObservable } from 'rxjs';\nimport * as i2 from '@backbase/ui-ang/header';\nimport { HeaderModule } from '@backbase/ui-ang/header';\nimport { take } from 'rxjs/operators';\n\nconst ContactManagerJourneyConfigurationToken = new InjectionToken('ContactManagerJourneyConfig injection token');\nconst defaultConfiguration = {\n    newContact: true,\n    pageSize: 5,\n    maxNavPages: 3,\n    paginationType: LoadMoreMethod.PAGINATION,\n    notificationDismissTime: 5000,\n    createContactEmail: false,\n    createContactIBAN: true,\n    createContactAccount: false,\n    createContactPhone: false,\n};\n/**\n * Service provides the journey configuration\n *\n * @usageNotes\n *\n * ### Ensure the ContactManagerJourneyModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerJourneyModule,\n *   ],\n * })\n * export class ContactJourneyBundleModule {}\n * ```\n *\n * ### Inject this service into your component\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ContactManagerJourneyPreferencesService],\n * })\n *  export class ContactManagerJourneyModule {\n * `\n */\nclass ContactManagerJourneyConfigurationService {\n    constructor(config) {\n        const configFromProviders = config ? config : {};\n        this.configuration = Object.assign(Object.assign({}, defaultConfiguration), configFromProviders);\n    }\n    get newContact() {\n        return this.configuration.newContact;\n    }\n    get pageSize() {\n        return this.configuration.pageSize;\n    }\n    get maxNavPages() {\n        return this.configuration.maxNavPages;\n    }\n    get paginationType() {\n        return this.configuration.paginationType;\n    }\n    get notificationDismissTime() {\n        return this.configuration.notificationDismissTime;\n    }\n    get createContactEmail() {\n        return this.configuration.createContactEmail;\n    }\n    get createContactIBAN() {\n        return this.configuration.createContactIBAN;\n    }\n    get createContactAccount() {\n        return this.configuration.createContactAccount;\n    }\n    get createContactPhone() {\n        return this.configuration.createContactPhone;\n    }\n}\n/** @nocollapse */ ContactManagerJourneyConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerJourneyConfigurationService, deps: [{ token: ContactManagerJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ ContactManagerJourneyConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerJourneyConfigurationService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerJourneyConfigurationService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ContactManagerJourneyConfigurationToken]\n                }] }]; } });\n\nvar View;\n(function (View) {\n    View[\"List\"] = \"LIST\";\n    View[\"Detail\"] = \"DETAIL\";\n    View[\"Edit\"] = \"EDIT\";\n    View[\"Select\"] = \"SELECT\";\n})(View || (View = {}));\n/**\n * Service helps the journey navigation\n *\n * @usageNotes\n *\n * ### Ensure the ContactManagerJourneyModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerJourneyModule,\n *   ],\n * })\n * export class ContactJourneyBundleModule {}\n * ```\n *\n * ### Inject this service into your component\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ContactManagerJourneyNavigationService],\n * })\n *  export class ContactManagerJourneyModule {\n * ```\n */\nclass ContactManagerJourneyNavigationService {\n    constructor(routerService, route) {\n        this.routerService = routerService;\n        this.route = route;\n        this._currentView = View.List;\n    }\n    get currentView() {\n        return this._currentView;\n    }\n    set currentView(view) {\n        this._currentView = view;\n    }\n    list(page, query, queryParamsHandling = 'merge') {\n        const queryParam = {};\n        if (page || page === 0)\n            queryParam.page = page;\n        if (query || query === '')\n            queryParam.query = query;\n        return this.routerService.navigate(['./'], {\n            queryParams: Object.assign({}, queryParam),\n            queryParamsHandling: queryParamsHandling,\n            relativeTo: this.route,\n        });\n    }\n    select(id) {\n        this.currentView = View.Detail;\n        return this.routerService.navigate(['./', id], { queryParamsHandling: 'merge', relativeTo: this.route });\n    }\n    edit(id, type = AccountCreateType.IBAN) {\n        this.currentView = View.Edit;\n        return this.routerService.navigate(['./edit', id, type], { queryParamsHandling: 'merge', relativeTo: this.route });\n    }\n    newContact() {\n        this.currentView = View.Select;\n        return this.routerService.navigate(['./select'], { queryParamsHandling: 'merge', relativeTo: this.route });\n    }\n    /**\n     *\n     * @param {AccountCreateType} type - if the new contact is of IBAN/Phone/Email/Account type\n     * @returns {Promise<boolean>} resolves to true when form is ready\n     */\n    newContactForm(type) {\n        this.currentView = View.Edit;\n        return this.routerService.navigate(['./edit', 0, type], { queryParamsHandling: 'merge', relativeTo: this.route });\n    }\n}\n/** @nocollapse */ ContactManagerJourneyNavigationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerJourneyNavigationService, deps: [{ token: i1.Router }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ ContactManagerJourneyNavigationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerJourneyNavigationService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerJourneyNavigationService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i1.ActivatedRoute }]; } });\n\n/**\n * Service provides the journey configuration\n *\n * @usageNotes\n *\n * ### Ensure the ContactManagerJourneyModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerJourneyModule,\n *   ],\n * })\n * export class ContactJourneyBundleModule {}\n * ```\n *\n * ### Inject this service into your component\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ContactManagerJourneyPreferencesService],\n * })\n *  export class ContactManagerJourneyModule {\n * ```\n */\nclass ContactManagerJourneyPreferencesService {\n    constructor(config) {\n        this.config = config;\n        this.newContactSubject$ = new BehaviorSubject(this.config.newContact);\n        this.pageSizeSubject$ = new BehaviorSubject(this.config.pageSize);\n        this.maxNavPagesSubject$ = new BehaviorSubject(this.config.maxNavPages);\n        this.paginationTypeSubject$ = new BehaviorSubject(this.config.paginationType);\n        this.createContactEmailSubject$ = new BehaviorSubject(this.config.createContactEmail);\n        this.createContactIBANSubject$ = new BehaviorSubject(this.config.createContactIBAN);\n        this.createContactAccountSubject$ = new BehaviorSubject(this.config.createContactAccount);\n        this.createContactPhoneSubject$ = new BehaviorSubject(this.config.createContactPhone);\n        this.notificationDismissTimeSubject$ = new BehaviorSubject(this.config.notificationDismissTime);\n        this.newContact$ = this.newContactSubject$.asObservable();\n        this.pageSize$ = this.pageSizeSubject$.asObservable();\n        this.maxNavPages$ = this.maxNavPagesSubject$.asObservable();\n        this.paginationType$ = this.paginationTypeSubject$.asObservable();\n        this.createContactEmail$ = this.createContactEmailSubject$.asObservable();\n        this.createContactIBAN$ = this.createContactIBANSubject$.asObservable();\n        this.createContactAccount$ = this.createContactAccountSubject$.asObservable();\n        this.createContactPhone$ = this.createContactPhoneSubject$.asObservable();\n        this.notificationDismissTime$ = this.notificationDismissTimeSubject$.asObservable();\n    }\n    setNewContact(value) {\n        this.newContactSubject$.next(value);\n    }\n    setPageSize(value) {\n        this.pageSizeSubject$.next(value);\n    }\n    setMaxNavPages(value) {\n        this.maxNavPagesSubject$.next(value);\n    }\n    setPaginationType(value) {\n        this.paginationTypeSubject$.next(value);\n    }\n    setNotificationDismissTime(value) {\n        this.notificationDismissTimeSubject$.next(value);\n    }\n    setCreateContactEmail(value) {\n        this.createContactEmailSubject$.next(value);\n    }\n    setCreateContactIBAN(value) {\n        this.createContactIBANSubject$.next(value);\n    }\n    setCreateContactAccount(value) {\n        this.createContactAccountSubject$.next(value);\n    }\n    setCreateContactPhone(value) {\n        this.createContactPhoneSubject$.next(value);\n    }\n}\n/** @nocollapse */ ContactManagerJourneyPreferencesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerJourneyPreferencesService, deps: [{ token: ContactManagerJourneyConfigurationService }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ ContactManagerJourneyPreferencesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerJourneyPreferencesService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerJourneyPreferencesService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: ContactManagerJourneyConfigurationService }]; } });\n\n/**\n * The component combines all the functionality of contacts in journey.\n *\n *\n *  ### Include this journey (standalone model)\n *\n * ```ts\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n *   imports: [ContactManagerJourneyModule.forRoot({ route })],\n * })\n * export class ContactManagerJourneyBundleModule {}\n * ```\n *\n * ### Insert this BundleModule Laziliy.\n *\n * ```ts\n * @NgModule({\n *  BackbaseCoreModule.forRoot({\n *     lazyModules:[ {\n *   module: 'ContactManagerJourneyBundleModule',\n *   components: ['ContactManagerJourneyComponent'],\n *   loadChildren: () => import('./lazy-modules/lazy-bundle.module').then(m => m.ContactManagerJourneyBundleModule),\n * },]\n *  })\n * })\n * ```\n *\n * @ngModule ContactManagerJourneyModule\n */\nclass ContactManagerJourneyComponent {\n    constructor(config) {\n        this.config = config;\n    }\n}\n/** @nocollapse */ ContactManagerJourneyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerJourneyComponent, deps: [{ token: ContactManagerJourneyConfigurationService }], target: i0.ɵɵFactoryTarget.Component });\n/** @nocollapse */ ContactManagerJourneyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: ContactManagerJourneyComponent, selector: \"bb-contact-manager-journey\", providers: [\n        {\n            provide: ContactManagerPreferencesService,\n            useClass: ContactManagerJourneyPreferencesService,\n        },\n        {\n            provide: ContactsNavigationService,\n            useClass: ContactManagerJourneyNavigationService,\n        },\n    ], ngImport: i0, template: \"<bb-header-ui\\n  heading=\\\"Manage Contacts\\\"\\n  i18n-heading=\\\"Contact manager journey heading@@ccontact-manager-journey.heading.text\\\"\\n  headingType=\\\"h1\\\"\\n></bb-header-ui>\\n<bb-contacts-list-container>\\n  <router-outlet></router-outlet>\\n</bb-contacts-list-container>\\n\", components: [{ type: i2.HeaderComponent, selector: \"bb-header-ui\", inputs: [\"headingClasses\", \"headingType\", \"heading\"] }, { type: i1$1.ContactsListContainerComponent, selector: \"bb-contacts-list-container\" }], directives: [{ type: i1.RouterOutlet, selector: \"router-outlet\", outputs: [\"activate\", \"deactivate\"], exportAs: [\"outlet\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerJourneyComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-contact-manager-journey',\n                    templateUrl: './contact-manager-journey.component.html',\n                    providers: [\n                        {\n                            provide: ContactManagerPreferencesService,\n                            useClass: ContactManagerJourneyPreferencesService,\n                        },\n                        {\n                            provide: ContactsNavigationService,\n                            useClass: ContactManagerJourneyNavigationService,\n                        },\n                    ],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: ContactManagerJourneyConfigurationService }]; } });\n\n/**\n * The wrappper component will show detail of selected contact\n *\n * @usageNotes\n *\n * ### Display contact detail\n *\n * ```route\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n *   imports: [ContactManagerJourneyModule.forRoot({ routes })],\n * })\n * export class ContactManagerJourneyBundleModule {}\n * ```\n * @ngModule ContactManagerJourneyModule\n */\nclass ContactManagerDetailViewComponent {\n}\n/** @nocollapse */ ContactManagerDetailViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerDetailViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\n/** @nocollapse */ ContactManagerDetailViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: ContactManagerDetailViewComponent, selector: \"bb-contact-manager-detail-view\", ngImport: i0, template: \"<bb-contacts-detail-container></bb-contacts-detail-container>\\n\", components: [{ type: i1$1.ContactsDetailContainerComponent, selector: \"bb-contacts-detail-container\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerDetailViewComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-contact-manager-detail-view',\n                    templateUrl: './contact-manager-detail.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }] });\n\n/**\n * The wrappper component will show contact form\n *\n * @usageNotes\n *\n * ### Display contact form based on type\n *\n * ```route\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n *   imports: [ContactManagerJourneyModule.forRoot({ routes })],\n * })\n * export class ContactManagerJourneyBundleModule {}\n * ```\n * @ngModule ContactManagerJourneyModule\n */\nclass ContactManagerFormViewComponent {\n    /**\n     * Event handler for navigation change guard\n     *\n     * @returns {Promise<boolean> | boolean} - resolves to true if navigation can change\n     */\n    canDeactivate() {\n        var _a;\n        const canDeactivate = (_a = this.contactsFormContainerComponent) === null || _a === void 0 ? void 0 : _a.canDeactivate();\n        if (isObservable(canDeactivate)) {\n            return canDeactivate.pipe(take(1)).toPromise();\n        }\n        return canDeactivate !== null && canDeactivate !== void 0 ? canDeactivate : true;\n    }\n}\n/** @nocollapse */ ContactManagerFormViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerFormViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\n/** @nocollapse */ ContactManagerFormViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: ContactManagerFormViewComponent, selector: \"bb-contact-manager-form-view\", viewQueries: [{ propertyName: \"contactsFormContainerComponent\", first: true, predicate: ContactsFormContainerComponent, descendants: true }], ngImport: i0, template: \"<bb-contacts-form-container></bb-contacts-form-container>\\n\", components: [{ type: i1$1.ContactsFormContainerComponent, selector: \"bb-contacts-form-container\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerFormViewComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-contact-manager-form-view',\n                    templateUrl: './contact-manager-form.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], propDecorators: { contactsFormContainerComponent: [{\n                type: ViewChild,\n                args: [ContactsFormContainerComponent]\n            }] } });\n\n/**\n * The wrappper component will show all contacts in a list\n *\n * @usageNotes\n *\n * ### Display all contacts in a list .\n *\n * ```route\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n *   imports: [ContactManagerJourneyModule.forRoot({ routes })],\n * })\n * export class ContactManagerJourneyBundleModule {}\n * ```\n * @ngModule ContactManagerJourneyModule\n */\nclass ContactManagerTypeListViewComponent {\n}\n/** @nocollapse */ ContactManagerTypeListViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerTypeListViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\n/** @nocollapse */ ContactManagerTypeListViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: ContactManagerTypeListViewComponent, selector: \"bb-contact-manager-type-list-view\", ngImport: i0, template: \"<bb-contacts-type-list-container></bb-contacts-type-list-container>\\n\", components: [{ type: i1$1.ContactsTypeListContainerComponent, selector: \"bb-contacts-type-list-container\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerTypeListViewComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-contact-manager-type-list-view',\n                    templateUrl: './contact-manager-type-list.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }] });\n\nconst contactManagerRoutes = [\n    {\n        path: '',\n        component: ContactManagerJourneyComponent,\n        children: [\n            {\n                path: '',\n                component: ContactManagerDetailViewComponent,\n            },\n            {\n                path: 'select',\n                component: ContactManagerTypeListViewComponent,\n            },\n            {\n                path: ':id',\n                component: ContactManagerDetailViewComponent,\n            },\n            {\n                path: 'edit/:id/:type',\n                canDeactivate: [CanDeactivateGuard],\n                component: ContactManagerFormViewComponent,\n            },\n        ],\n    },\n];\n\n/**\n * Journey for contacts in retails apps\n *\n * @usageNotes\n *\n * ### Include the exported widgets in your `AppModule`:\n *\n * ```typescript\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n * imports: [ContactManagerJourneyModule.forRoot({ route })],\n *  providers: [ {\n *   provide: ContactManagerJourneyConfigurationToken,\n *   useValue: {\n *     createContactEmail: true,\n *     createContactIBAN: true,\n *     createContactAccount: true,\n *     createContactPhone: true,\n *   } as Partial<ContactManagerJourneyConfig>,\n * },],\n * })\n * export class AppModule {}\n * ```\n */\nclass ContactManagerJourneyModule {\n    static forRoot(data = { routes: contactManagerRoutes }) {\n        return {\n            ngModule: ContactManagerJourneyModule,\n            providers: [provideRoutes(data.routes)],\n        };\n    }\n}\n/** @nocollapse */ ContactManagerJourneyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerJourneyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ ContactManagerJourneyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerJourneyModule, declarations: [ContactManagerJourneyComponent,\n        ContactManagerDetailViewComponent,\n        ContactManagerTypeListViewComponent,\n        ContactManagerFormViewComponent], imports: [CommonModule, ContactManagerWidgetModule, HeaderModule, i1.RouterModule] });\n/** @nocollapse */ ContactManagerJourneyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerJourneyModule, providers: [ContactManagerJourneyConfigurationService], imports: [[CommonModule, ContactManagerWidgetModule, HeaderModule, RouterModule.forChild(contactManagerRoutes)]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ContactManagerJourneyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        ContactManagerJourneyComponent,\n                        ContactManagerDetailViewComponent,\n                        ContactManagerTypeListViewComponent,\n                        ContactManagerFormViewComponent,\n                    ],\n                    imports: [CommonModule, ContactManagerWidgetModule, HeaderModule, RouterModule.forChild(contactManagerRoutes)],\n                    providers: [ContactManagerJourneyConfigurationService],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ContactManagerJourneyConfigurationToken, ContactManagerJourneyModule, contactManagerRoutes };\n"]},"metadata":{},"sourceType":"module"}