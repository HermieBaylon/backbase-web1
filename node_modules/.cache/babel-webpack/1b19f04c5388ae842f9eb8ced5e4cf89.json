{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Component, InjectionToken, Optional, Host, Self, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { fromEvent, Subject, EMPTY, merge } from 'rxjs';\nimport { shareReplay, first, debounceTime, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { errorMessageAnimation, idListAttr } from '@backbase/ui-ang/util';\nimport '@angular/localize/init';\nimport * as i3 from '@angular/forms';\n\nfunction ValidationMessageComponent_small_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 1);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@errorMessageAnimation\", undefined)(\"id\", ctx_r0.errorId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.text, \"\\n\");\n  }\n}\n\nclass FormSubmitDirective {\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n    this.element = this.elementRef.nativeElement;\n    this.submit = fromEvent(this.element, 'submit').pipe(shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n  }\n\n}\n\nFormSubmitDirective.ɵfac = function FormSubmitDirective_Factory(t) {\n  return new (t || FormSubmitDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nFormSubmitDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: FormSubmitDirective,\n  selectors: [[\"form\", \"bbFormSubmit\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormSubmitDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'form[bbFormSubmit]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n\nlet _uniqueId = 0;\n/**\n * @name ValidationMessageComponent\n *\n * @description\n * Dynamic component that displays a control validation message dependence on validation.\n */\n\nclass ValidationMessageComponent {\n  constructor() {\n    this.errorId = `bb-error-message-${_uniqueId++}`;\n  }\n\n}\n\nValidationMessageComponent.ɵfac = function ValidationMessageComponent_Factory(t) {\n  return new (t || ValidationMessageComponent)();\n};\n\nValidationMessageComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ValidationMessageComponent,\n  selectors: [[\"bb-validation-message-ui\"]],\n  decls: 1,\n  vars: 1,\n  consts: [[\"role\", \"alert\", \"class\", \"bb-input-validation-message\", 3, \"id\", 4, \"ngIf\"], [\"role\", \"alert\", 1, \"bb-input-validation-message\", 3, \"id\"]],\n  template: function ValidationMessageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ValidationMessageComponent_small_0_Template, 2, 3, \"small\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.text);\n    }\n  },\n  directives: [i1.NgIf],\n  encapsulation: 2,\n  data: {\n    animation: [errorMessageAnimation]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ValidationMessageComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-validation-message-ui',\n      templateUrl: 'validation-message.component.html',\n      animations: [errorMessageAnimation]\n    }]\n  }], null, null);\n})();\n\nclass ControlErrorContainerDirective {\n  constructor(vcr) {\n    this.vcr = vcr;\n  }\n\n}\n\nControlErrorContainerDirective.ɵfac = function ControlErrorContainerDirective_Factory(t) {\n  return new (t || ControlErrorContainerDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n};\n\nControlErrorContainerDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: ControlErrorContainerDirective,\n  selectors: [[\"\", \"bbControlErrorContainer\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ControlErrorContainerDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[bbControlErrorContainer]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }];\n  }, null);\n})();\n\nconst BB_VALIDATION_ERRORS = new InjectionToken('BB_VALIDATION_ERRORS', {\n  providedIn: 'root',\n  factory: () => defaultFromErrors\n});\nconst BB_DYNAMIC_VALIDATION_ERROR_TMPL = new InjectionToken('BB_DYNAMIC_VALIDATION_ERROR_TMPL', {\n  providedIn: 'root',\n  factory: () => ValidationMessageComponent\n});\nconst defaultFromErrors = {\n  invalid: () => $localize`:@@validation-form-invalid-error:Field is invalid`,\n  required: () => $localize`:@@validation-form-required-error:Field is required`,\n  minlength: ({\n    requiredLength\n  }) => {\n    const singleStr = $localize`:@@validation-form-minlength-error-single:\n    Must be shorter then ${requiredLength} character`;\n    const multipleStr = $localize`:@@validation-form-minlength-error-multiple:\n    Must be shorter then ${requiredLength} characters`;\n    return requiredLength === 1 ? singleStr : multipleStr;\n  },\n  maxlength: ({\n    requiredLength\n  }) => {\n    const singleStr = $localize`:@@validation-form-minlength-error-single:\n    Must be at least ${requiredLength} character long`;\n    const multipleStr = $localize`:@@validation-form-minlength-error-multiple:\n    Must be at least ${requiredLength} characters long`;\n    return requiredLength === 1 ? singleStr : multipleStr;\n  },\n  min: ({\n    min\n  }) => $localize`:@@validation-form-min-error:Expect value to be bigger than ${min}`,\n  max: ({\n    max\n  }) => $localize`:@@validation-form-max-error:Expect value to be less than ${max}`,\n  email: () => $localize`:@@validation-form-email-error:Not a valid email`\n};\n\nclass ValidationErrorsDirective {\n  constructor(form, controlErrorContainer, control, errors, errorTmpl, resolver, vcr, hostElem, renderer) {\n    this.form = form;\n    this.controlErrorContainer = controlErrorContainer;\n    this.control = control;\n    this.errors = errors;\n    this.errorTmpl = errorTmpl;\n    this.resolver = resolver;\n    this.vcr = vcr;\n    this.hostElem = hostElem;\n    this.renderer = renderer;\n    this.onBlur = new Subject();\n    this.destroy = new Subject();\n    this.ariaAttributeName = 'aria-describedby';\n    /**\n     * Custom error labels object.\n     *\n     * Use only if you need to set custom error labels for specific control.\n     * To specify custom error labels for entire form use BB_VALIDATION_ERRORS InjectionToken.\n     *\n     * @default `BB_VALIDATION_ERRORS`.\n     */\n\n    this.errorLabels = {};\n    /**\n     * Custom function to specify when errors should be shown.\n     * By default will be shown when control is invalid.\n     */\n\n    this.showError = this.showErrorDefault;\n    /**\n     * Selector to indicate the control in which `aria-describedby` should be set.\n     */\n\n    this.inputSelector = '.form-control';\n    /**\n     * Input label\n     */\n\n    this.label = null;\n    /**\n     * Custom component for error message.\n     *\n     * Use only if you need to set custom component for specific control.\n     * To specify custom component for all form errors use BB_DYNAMIC_ERROR_TMPL InjectionToken.\n     *\n     * @default `BB_DYNAMIC_ERROR_TMPL`.\n     */\n\n    this.errorComponent = this.errorTmpl;\n    this.submit = this.form ? this.form.submit : EMPTY;\n\n    if (!this.control) {\n      throw Error('bbFormControl must contain a NgControl.');\n    }\n  }\n\n  onElBlur() {\n    this.onBlur.next();\n  }\n\n  ngOnInit() {\n    const controlChanges = this.control.valueChanges ? this.control.valueChanges : EMPTY;\n    merge(controlChanges, this.submit, this.onBlur.pipe(first())).pipe(debounceTime(100), takeUntil(this.destroy)).subscribe(() => this.manageErrors());\n  }\n\n  ngOnDestroy() {\n    this.destroy.next();\n    this.destroy.complete();\n  }\n\n  manageErrors() {\n    var _a, _b, _c;\n\n    const controlErrors = this.control.errors;\n\n    if (controlErrors && this.showError()) {\n      const errorList = Object.assign(Object.assign({}, this.errors), this.errorLabels);\n      const firstKey = Object.keys(controlErrors)[0];\n      const getError = errorList[firstKey] || errorList.invalid;\n      const text = getError(controlErrors[firstKey]); // TODO: add aria-invalid?\n\n      if (((_a = this.ref) === null || _a === void 0 ? void 0 : _a.instance.text) !== text) {\n        this.setError(text);\n        this.setDescribedById((_b = this.ref) === null || _b === void 0 ? void 0 : _b.instance.errorId);\n      }\n    } else if (this.ref) {\n      this.setError('');\n      this.removeErrorId((_c = this.ref) === null || _c === void 0 ? void 0 : _c.instance.errorId);\n    }\n  }\n\n  setDescribedById(id) {\n    const targetEl = this.hostElem.nativeElement.querySelector(this.inputSelector);\n\n    if (targetEl) {\n      const existingIds = targetEl.getAttribute(this.ariaAttributeName);\n      const attributeVal = idListAttr(id, existingIds);\n\n      if (attributeVal) {\n        this.renderer.setAttribute(targetEl, this.ariaAttributeName, attributeVal);\n      }\n    }\n  }\n\n  removeErrorId(id) {\n    const targetEl = this.hostElem.nativeElement.querySelector(this.inputSelector);\n\n    if (targetEl) {\n      const existingIds = targetEl.getAttribute(this.ariaAttributeName) || '';\n      const cleanIds = (id ? existingIds.replace(id, '') : existingIds).trim();\n\n      if (cleanIds) {\n        this.renderer.setAttribute(targetEl, this.ariaAttributeName, cleanIds);\n      } else {\n        this.renderer.removeAttribute(targetEl, this.ariaAttributeName);\n      }\n    }\n  }\n\n  showErrorDefault() {\n    return Boolean(this.control.invalid);\n  }\n\n  setError(text) {\n    var _a;\n\n    if (!this.ref) {\n      const container = ((_a = this.controlErrorContainer) === null || _a === void 0 ? void 0 : _a.vcr) || this.vcr;\n      const factory = this.resolver.resolveComponentFactory(this.errorComponent);\n      this.ref = container.createComponent(factory);\n    }\n\n    this.ref.instance.text = text; // Setup this properties in case of custom validation error component to give possibility to customise behavior.\n\n    this.ref.instance.control = this.control;\n    this.ref.instance.errorList = Object.assign(Object.assign({}, this.errors), this.errorLabels);\n    this.ref.instance.label = this.label;\n    this.ref.changeDetectorRef.detectChanges();\n  }\n\n}\n\nValidationErrorsDirective.ɵfac = function ValidationErrorsDirective_Factory(t) {\n  return new (t || ValidationErrorsDirective)(i0.ɵɵdirectiveInject(FormSubmitDirective, 9), i0.ɵɵdirectiveInject(ControlErrorContainerDirective, 8), i0.ɵɵdirectiveInject(i3.NgControl, 2), i0.ɵɵdirectiveInject(BB_VALIDATION_ERRORS), i0.ɵɵdirectiveInject(BB_DYNAMIC_VALIDATION_ERROR_TMPL), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\n\nValidationErrorsDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: ValidationErrorsDirective,\n  selectors: [[\"\", \"bbFormControl\", \"\"]],\n  hostBindings: function ValidationErrorsDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"blur\", function ValidationErrorsDirective_blur_HostBindingHandler() {\n        return ctx.onElBlur();\n      });\n    }\n  },\n  inputs: {\n    errorLabels: \"errorLabels\",\n    showError: \"showError\",\n    inputSelector: \"inputSelector\",\n    label: \"label\",\n    errorComponent: \"errorComponent\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ValidationErrorsDirective, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line:directive-selector\n      selector: '[bbFormControl]'\n    }]\n  }], function () {\n    return [{\n      type: FormSubmitDirective,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Host\n      }]\n    }, {\n      type: ControlErrorContainerDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.NgControl,\n      decorators: [{\n        type: Self\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [BB_VALIDATION_ERRORS]\n      }]\n    }, {\n      type: i0.Type,\n      decorators: [{\n        type: Inject,\n        args: [BB_DYNAMIC_VALIDATION_ERROR_TMPL]\n      }]\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    errorLabels: [{\n      type: Input\n    }],\n    showError: [{\n      type: Input\n    }],\n    inputSelector: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    errorComponent: [{\n      type: Input\n    }],\n    onElBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }]\n  });\n})();\n\nconst directives = [ValidationErrorsDirective, FormSubmitDirective, ControlErrorContainerDirective];\nconst components = [ValidationMessageComponent];\n\nclass ControlErrorHandlerModule {}\n\nControlErrorHandlerModule.ɵfac = function ControlErrorHandlerModule_Factory(t) {\n  return new (t || ControlErrorHandlerModule)();\n};\n\nControlErrorHandlerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ControlErrorHandlerModule\n});\nControlErrorHandlerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ControlErrorHandlerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [...directives, ...components],\n      exports: [...directives, ...components]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BB_DYNAMIC_VALIDATION_ERROR_TMPL, BB_VALIDATION_ERRORS, ControlErrorContainerDirective, ControlErrorHandlerModule, FormSubmitDirective, ValidationErrorsDirective, ValidationMessageComponent };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-control-error-handler.js"],"names":["i0","Directive","Component","InjectionToken","Optional","Host","Self","Inject","Input","HostListener","NgModule","fromEvent","Subject","EMPTY","merge","shareReplay","first","debounceTime","takeUntil","i1","CommonModule","errorMessageAnimation","idListAttr","i3","FormSubmitDirective","constructor","elementRef","element","nativeElement","submit","pipe","bufferSize","refCount","ɵfac","ElementRef","ɵdir","type","args","selector","_uniqueId","ValidationMessageComponent","errorId","ɵcmp","NgIf","templateUrl","animations","ControlErrorContainerDirective","vcr","ViewContainerRef","BB_VALIDATION_ERRORS","providedIn","factory","defaultFromErrors","BB_DYNAMIC_VALIDATION_ERROR_TMPL","invalid","$localize","required","minlength","requiredLength","singleStr","multipleStr","maxlength","min","max","email","ValidationErrorsDirective","form","controlErrorContainer","control","errors","errorTmpl","resolver","hostElem","renderer","onBlur","destroy","ariaAttributeName","errorLabels","showError","showErrorDefault","inputSelector","label","errorComponent","Error","onElBlur","next","ngOnInit","controlChanges","valueChanges","subscribe","manageErrors","ngOnDestroy","complete","_a","_b","_c","controlErrors","errorList","Object","assign","firstKey","keys","getError","text","ref","instance","setError","setDescribedById","removeErrorId","id","targetEl","querySelector","existingIds","getAttribute","attributeVal","setAttribute","cleanIds","replace","trim","removeAttribute","Boolean","container","resolveComponentFactory","createComponent","changeDetectorRef","detectChanges","NgControl","ComponentFactoryResolver","Renderer2","decorators","undefined","Type","directives","components","ControlErrorHandlerModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Component, InjectionToken, Optional, Host, Self, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { fromEvent, Subject, EMPTY, merge } from 'rxjs';\nimport { shareReplay, first, debounceTime, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { errorMessageAnimation, idListAttr } from '@backbase/ui-ang/util';\nimport '@angular/localize/init';\nimport * as i3 from '@angular/forms';\n\nclass FormSubmitDirective {\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n        this.element = this.elementRef.nativeElement;\n        this.submit = fromEvent(this.element, 'submit').pipe(shareReplay({ bufferSize: 1, refCount: true }));\n    }\n}\nFormSubmitDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: FormSubmitDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nFormSubmitDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.16\", type: FormSubmitDirective, selector: \"form[bbFormSubmit]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: FormSubmitDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'form[bbFormSubmit]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n\nlet _uniqueId = 0;\n/**\n * @name ValidationMessageComponent\n *\n * @description\n * Dynamic component that displays a control validation message dependence on validation.\n */\nclass ValidationMessageComponent {\n    constructor() {\n        this.errorId = `bb-error-message-${_uniqueId++}`;\n    }\n}\nValidationMessageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ValidationMessageComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nValidationMessageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: ValidationMessageComponent, selector: \"bb-validation-message-ui\", ngImport: i0, template: \"<small @errorMessageAnimation *ngIf=\\\"text\\\" [id]=\\\"errorId\\\" role=\\\"alert\\\" class=\\\"bb-input-validation-message\\\">\\n  {{ text }}\\n</small>\\n\", directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [errorMessageAnimation] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ValidationMessageComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-validation-message-ui',\n                    templateUrl: 'validation-message.component.html',\n                    animations: [errorMessageAnimation],\n                }]\n        }] });\n\nclass ControlErrorContainerDirective {\n    constructor(vcr) {\n        this.vcr = vcr;\n    }\n}\nControlErrorContainerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ControlErrorContainerDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });\nControlErrorContainerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.16\", type: ControlErrorContainerDirective, selector: \"[bbControlErrorContainer]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ControlErrorContainerDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[bbControlErrorContainer]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });\n\nconst BB_VALIDATION_ERRORS = new InjectionToken('BB_VALIDATION_ERRORS', {\n    providedIn: 'root',\n    factory: () => defaultFromErrors,\n});\nconst BB_DYNAMIC_VALIDATION_ERROR_TMPL = new InjectionToken('BB_DYNAMIC_VALIDATION_ERROR_TMPL', {\n    providedIn: 'root',\n    factory: () => ValidationMessageComponent,\n});\nconst defaultFromErrors = {\n    invalid: () => $localize `:@@validation-form-invalid-error:Field is invalid`,\n    required: () => $localize `:@@validation-form-required-error:Field is required`,\n    minlength: ({ requiredLength }) => {\n        const singleStr = $localize `:@@validation-form-minlength-error-single:\n    Must be shorter then ${requiredLength} character`;\n        const multipleStr = $localize `:@@validation-form-minlength-error-multiple:\n    Must be shorter then ${requiredLength} characters`;\n        return requiredLength === 1 ? singleStr : multipleStr;\n    },\n    maxlength: ({ requiredLength }) => {\n        const singleStr = $localize `:@@validation-form-minlength-error-single:\n    Must be at least ${requiredLength} character long`;\n        const multipleStr = $localize `:@@validation-form-minlength-error-multiple:\n    Must be at least ${requiredLength} characters long`;\n        return requiredLength === 1 ? singleStr : multipleStr;\n    },\n    min: ({ min }) => $localize `:@@validation-form-min-error:Expect value to be bigger than ${min}`,\n    max: ({ max }) => $localize `:@@validation-form-max-error:Expect value to be less than ${max}`,\n    email: () => $localize `:@@validation-form-email-error:Not a valid email`,\n};\n\nclass ValidationErrorsDirective {\n    constructor(form, controlErrorContainer, control, errors, errorTmpl, resolver, vcr, hostElem, renderer) {\n        this.form = form;\n        this.controlErrorContainer = controlErrorContainer;\n        this.control = control;\n        this.errors = errors;\n        this.errorTmpl = errorTmpl;\n        this.resolver = resolver;\n        this.vcr = vcr;\n        this.hostElem = hostElem;\n        this.renderer = renderer;\n        this.onBlur = new Subject();\n        this.destroy = new Subject();\n        this.ariaAttributeName = 'aria-describedby';\n        /**\n         * Custom error labels object.\n         *\n         * Use only if you need to set custom error labels for specific control.\n         * To specify custom error labels for entire form use BB_VALIDATION_ERRORS InjectionToken.\n         *\n         * @default `BB_VALIDATION_ERRORS`.\n         */\n        this.errorLabels = {};\n        /**\n         * Custom function to specify when errors should be shown.\n         * By default will be shown when control is invalid.\n         */\n        this.showError = this.showErrorDefault;\n        /**\n         * Selector to indicate the control in which `aria-describedby` should be set.\n         */\n        this.inputSelector = '.form-control';\n        /**\n         * Input label\n         */\n        this.label = null;\n        /**\n         * Custom component for error message.\n         *\n         * Use only if you need to set custom component for specific control.\n         * To specify custom component for all form errors use BB_DYNAMIC_ERROR_TMPL InjectionToken.\n         *\n         * @default `BB_DYNAMIC_ERROR_TMPL`.\n         */\n        this.errorComponent = this.errorTmpl;\n        this.submit = this.form ? this.form.submit : EMPTY;\n        if (!this.control) {\n            throw Error('bbFormControl must contain a NgControl.');\n        }\n    }\n    onElBlur() {\n        this.onBlur.next();\n    }\n    ngOnInit() {\n        const controlChanges = this.control.valueChanges ? this.control.valueChanges : EMPTY;\n        merge(controlChanges, this.submit, this.onBlur.pipe(first()))\n            .pipe(debounceTime(100), takeUntil(this.destroy))\n            .subscribe(() => this.manageErrors());\n    }\n    ngOnDestroy() {\n        this.destroy.next();\n        this.destroy.complete();\n    }\n    manageErrors() {\n        var _a, _b, _c;\n        const controlErrors = this.control.errors;\n        if (controlErrors && this.showError()) {\n            const errorList = Object.assign(Object.assign({}, this.errors), this.errorLabels);\n            const firstKey = Object.keys(controlErrors)[0];\n            const getError = errorList[firstKey] || errorList.invalid;\n            const text = getError(controlErrors[firstKey]);\n            // TODO: add aria-invalid?\n            if (((_a = this.ref) === null || _a === void 0 ? void 0 : _a.instance.text) !== text) {\n                this.setError(text);\n                this.setDescribedById((_b = this.ref) === null || _b === void 0 ? void 0 : _b.instance.errorId);\n            }\n        }\n        else if (this.ref) {\n            this.setError('');\n            this.removeErrorId((_c = this.ref) === null || _c === void 0 ? void 0 : _c.instance.errorId);\n        }\n    }\n    setDescribedById(id) {\n        const targetEl = this.hostElem.nativeElement.querySelector(this.inputSelector);\n        if (targetEl) {\n            const existingIds = targetEl.getAttribute(this.ariaAttributeName);\n            const attributeVal = idListAttr(id, existingIds);\n            if (attributeVal) {\n                this.renderer.setAttribute(targetEl, this.ariaAttributeName, attributeVal);\n            }\n        }\n    }\n    removeErrorId(id) {\n        const targetEl = this.hostElem.nativeElement.querySelector(this.inputSelector);\n        if (targetEl) {\n            const existingIds = targetEl.getAttribute(this.ariaAttributeName) || '';\n            const cleanIds = (id ? existingIds.replace(id, '') : existingIds).trim();\n            if (cleanIds) {\n                this.renderer.setAttribute(targetEl, this.ariaAttributeName, cleanIds);\n            }\n            else {\n                this.renderer.removeAttribute(targetEl, this.ariaAttributeName);\n            }\n        }\n    }\n    showErrorDefault() {\n        return Boolean(this.control.invalid);\n    }\n    setError(text) {\n        var _a;\n        if (!this.ref) {\n            const container = ((_a = this.controlErrorContainer) === null || _a === void 0 ? void 0 : _a.vcr) || this.vcr;\n            const factory = this.resolver.resolveComponentFactory(this.errorComponent);\n            this.ref = container.createComponent(factory);\n        }\n        this.ref.instance.text = text;\n        // Setup this properties in case of custom validation error component to give possibility to customise behavior.\n        this.ref.instance.control = this.control;\n        this.ref.instance.errorList = Object.assign(Object.assign({}, this.errors), this.errorLabels);\n        this.ref.instance.label = this.label;\n        this.ref.changeDetectorRef.detectChanges();\n    }\n}\nValidationErrorsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ValidationErrorsDirective, deps: [{ token: FormSubmitDirective, host: true, optional: true }, { token: ControlErrorContainerDirective, optional: true }, { token: i3.NgControl, self: true }, { token: BB_VALIDATION_ERRORS }, { token: BB_DYNAMIC_VALIDATION_ERROR_TMPL }, { token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });\nValidationErrorsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.16\", type: ValidationErrorsDirective, selector: \"[bbFormControl]\", inputs: { errorLabels: \"errorLabels\", showError: \"showError\", inputSelector: \"inputSelector\", label: \"label\", errorComponent: \"errorComponent\" }, host: { listeners: { \"blur\": \"onElBlur()\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ValidationErrorsDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // tslint:disable-next-line:directive-selector\n                    selector: '[bbFormControl]',\n                }]\n        }], ctorParameters: function () { return [{ type: FormSubmitDirective, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }] }, { type: ControlErrorContainerDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i3.NgControl, decorators: [{\n                    type: Self\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [BB_VALIDATION_ERRORS]\n                }] }, { type: i0.Type, decorators: [{\n                    type: Inject,\n                    args: [BB_DYNAMIC_VALIDATION_ERROR_TMPL]\n                }] }, { type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { errorLabels: [{\n                type: Input\n            }], showError: [{\n                type: Input\n            }], inputSelector: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], errorComponent: [{\n                type: Input\n            }], onElBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }] } });\n\nconst directives = [ValidationErrorsDirective, FormSubmitDirective, ControlErrorContainerDirective];\nconst components = [ValidationMessageComponent];\nclass ControlErrorHandlerModule {\n}\nControlErrorHandlerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ControlErrorHandlerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nControlErrorHandlerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ControlErrorHandlerModule, declarations: [ValidationErrorsDirective, FormSubmitDirective, ControlErrorContainerDirective, ValidationMessageComponent], imports: [CommonModule], exports: [ValidationErrorsDirective, FormSubmitDirective, ControlErrorContainerDirective, ValidationMessageComponent] });\nControlErrorHandlerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ControlErrorHandlerModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ControlErrorHandlerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [...directives, ...components],\n                    exports: [...directives, ...components],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BB_DYNAMIC_VALIDATION_ERROR_TMPL, BB_VALIDATION_ERRORS, ControlErrorContainerDirective, ControlErrorHandlerModule, FormSubmitDirective, ValidationErrorsDirective, ValidationMessageComponent };\n"]},"metadata":{},"sourceType":"module"}