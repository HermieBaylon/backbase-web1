{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { startWith, filter, takeUntil } from 'rxjs/operators';\nimport '@angular/localize/init';\nvar ValueDiffPosition;\n\n(function (ValueDiffPosition) {\n  ValueDiffPosition[\"BEFORE\"] = \"before\";\n  ValueDiffPosition[\"AFTER\"] = \"after\";\n})(ValueDiffPosition || (ValueDiffPosition = {}));\n\nconst highlightValueClass = 'bb-value-diff--highlighted';\nconst crossOutValueClass = 'bb-value-diff--crossed';\nconst valueDiffArrowLeftClass = 'bb-value-diff--arrow-left';\nconst valueDiffArrowRightClass = 'bb-value-diff--arrow-right';\nconst srTextForNewVal = $localize`:@@value-diff-current-value-label:Current value:`;\nconst srTextForOldVal = $localize`:@@value-diff-previous-value-label:Previous value:`;\n\nclass ValueDiffDirective {\n  constructor(elRef, renderer, cdRef) {\n    this.elRef = elRef;\n    this.renderer = renderer;\n    this.cdRef = cdRef;\n    this.destroyed$ = new Subject();\n    this.valueChanged$ = new Subject();\n    this.SROnlyOldEl = this.createA11ySpan(srTextForOldVal);\n    this.SROnlyNewEl = this.createA11ySpan(srTextForNewVal);\n    this._newValue = '';\n    this._position = ValueDiffPosition.BEFORE;\n    /**\n     * Show arrow between old and new value\n     * Default value: false\n     */\n\n    this.showArrow = false;\n  }\n  /**\n   * New data with which we will compare content.\n   */\n\n\n  set newValue(value) {\n    this._newValue = value;\n    this.onValueChanged(value);\n  }\n\n  get newValue() {\n    return this._newValue;\n  }\n  /**\n   * A position where differences will be added.\n   * Default value: 'before'\n   */\n\n\n  set position(val) {\n    this._position = val;\n    this.onValueChanged(this._newValue);\n  }\n\n  get position() {\n    return this._position;\n  }\n  /**\n   * Text for screen reader to describe old value\n   * Default value: 'Previous value:'\n   */\n\n\n  set SROnlyOld(val) {\n    this.renderer.setProperty(this.SROnlyOldEl, 'textContent', val);\n  }\n  /**\n   * Text for screen reader to describe new value\n   * Default value: 'Current value:'\n   */\n\n\n  set SROnlyNew(val) {\n    this.renderer.setProperty(this.SROnlyNewEl, 'textContent', val);\n  }\n\n  static isEqual(newData, initialEl) {\n    return initialEl.innerText.trim() === newData;\n  }\n\n  get isPositionBefore() {\n    return this._position === ValueDiffPosition.BEFORE;\n  }\n\n  get parentEl() {\n    return this.elRef.nativeElement.parentElement;\n  }\n\n  ngAfterContentInit() {\n    const changedEl = this.elRef.nativeElement.cloneNode(true);\n    this.valueChanged$.pipe(startWith({\n      newData: this._newValue,\n      elRef: this.elRef\n    }), filter(({\n      newData\n    }) => !ValueDiffDirective.isEqual(newData, this.elRef.nativeElement)), takeUntil(this.destroyed$)).subscribe(({\n      newData\n    }) => {\n      this.cdRef.detectChanges();\n      this.renderer.setProperty(changedEl, 'textContent', newData);\n      this.setupContainer(changedEl);\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next();\n  }\n\n  setupContainer(changedEl) {\n    const {\n      nativeElement\n    } = this.elRef;\n\n    if (ValueDiffDirective.isEqual(changedEl.innerText, nativeElement)) {\n      this.cleanUpContent(changedEl);\n    } else {\n      this.renderer.addClass(changedEl, highlightValueClass);\n      this.renderer.addClass(nativeElement, crossOutValueClass);\n      this.renderer.insertBefore(this.parentEl, changedEl, this.getSiblingEl());\n      this.renderer.insertBefore(this.parentEl, this.SROnlyNewEl, changedEl);\n\n      if (this.showArrow) {\n        this.addElWithArrow();\n      }\n\n      this.renderer.insertBefore(this.parentEl, this.SROnlyOldEl, nativeElement);\n    }\n  }\n\n  cleanUpContent(changedEl) {\n    this.renderer.removeClass(changedEl, highlightValueClass);\n    this.renderer.removeClass(this.elRef.nativeElement, crossOutValueClass);\n    this.renderer.removeChild(this.parentEl, changedEl);\n    this.renderer.removeChild(this.parentEl, this.SROnlyOldEl);\n    this.renderer.removeChild(this.parentEl, this.SROnlyNewEl);\n\n    if (this.arrow) {\n      this.renderer.removeChild(this.parentEl, this.arrow);\n    }\n  }\n\n  createA11ySpan(content) {\n    const SROnlySpan = this.renderer.createElement('span');\n    this.renderer.addClass(SROnlySpan, 'sr-only');\n    this.renderer.setProperty(SROnlySpan, 'textContent', content);\n    return SROnlySpan;\n  }\n\n  addElWithArrow() {\n    if (!this.arrow) {\n      const iconClass = this.isPositionBefore ? valueDiffArrowLeftClass : valueDiffArrowRightClass;\n      this.arrow = this.renderer.createElement('i');\n      this.renderer.addClass(this.arrow, iconClass);\n    }\n\n    this.renderer.insertBefore(this.parentEl, this.arrow, this.getSiblingEl());\n  }\n\n  getSiblingEl() {\n    return this.isPositionBefore ? this.elRef.nativeElement : this.elRef.nativeElement.nextElementSibling;\n  }\n\n  onValueChanged(newData) {\n    this.valueChanged$.next({\n      newData\n    });\n  }\n\n}\n\nValueDiffDirective.ɵfac = function ValueDiffDirective_Factory(t) {\n  return new (t || ValueDiffDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nValueDiffDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: ValueDiffDirective,\n  selectors: [[\"\", \"bbValueDiff\", \"\"]],\n  inputs: {\n    newValue: [\"bbValueDiff\", \"newValue\"],\n    position: \"position\",\n    SROnlyOld: [\"sr-only-old\", \"SROnlyOld\"],\n    SROnlyNew: [\"sr-only-new\", \"SROnlyNew\"],\n    showArrow: \"showArrow\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ValueDiffDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[bbValueDiff]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    newValue: [{\n      type: Input,\n      args: ['bbValueDiff']\n    }],\n    position: [{\n      type: Input\n    }],\n    SROnlyOld: [{\n      type: Input,\n      args: ['sr-only-old']\n    }],\n    SROnlyNew: [{\n      type: Input,\n      args: ['sr-only-new']\n    }],\n    showArrow: [{\n      type: Input\n    }]\n  });\n})();\n\nclass ValueDiffDirectiveModule {}\n\nValueDiffDirectiveModule.ɵfac = function ValueDiffDirectiveModule_Factory(t) {\n  return new (t || ValueDiffDirectiveModule)();\n};\n\nValueDiffDirectiveModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ValueDiffDirectiveModule\n});\nValueDiffDirectiveModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ValueDiffDirectiveModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [ValueDiffDirective],\n      exports: [ValueDiffDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ValueDiffDirective, ValueDiffDirectiveModule, ValueDiffPosition };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-value-diff.js"],"names":["i0","Directive","Input","NgModule","CommonModule","Subject","startWith","filter","takeUntil","ValueDiffPosition","highlightValueClass","crossOutValueClass","valueDiffArrowLeftClass","valueDiffArrowRightClass","srTextForNewVal","$localize","srTextForOldVal","ValueDiffDirective","constructor","elRef","renderer","cdRef","destroyed$","valueChanged$","SROnlyOldEl","createA11ySpan","SROnlyNewEl","_newValue","_position","BEFORE","showArrow","newValue","value","onValueChanged","position","val","SROnlyOld","setProperty","SROnlyNew","isEqual","newData","initialEl","innerText","trim","isPositionBefore","parentEl","nativeElement","parentElement","ngAfterContentInit","changedEl","cloneNode","pipe","subscribe","detectChanges","setupContainer","ngOnDestroy","next","cleanUpContent","addClass","insertBefore","getSiblingEl","addElWithArrow","removeClass","removeChild","arrow","content","SROnlySpan","createElement","iconClass","nextElementSibling","ɵfac","ElementRef","Renderer2","ChangeDetectorRef","ɵdir","type","args","selector","ValueDiffDirectiveModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { startWith, filter, takeUntil } from 'rxjs/operators';\nimport '@angular/localize/init';\n\nvar ValueDiffPosition;\n(function (ValueDiffPosition) {\n    ValueDiffPosition[\"BEFORE\"] = \"before\";\n    ValueDiffPosition[\"AFTER\"] = \"after\";\n})(ValueDiffPosition || (ValueDiffPosition = {}));\nconst highlightValueClass = 'bb-value-diff--highlighted';\nconst crossOutValueClass = 'bb-value-diff--crossed';\nconst valueDiffArrowLeftClass = 'bb-value-diff--arrow-left';\nconst valueDiffArrowRightClass = 'bb-value-diff--arrow-right';\nconst srTextForNewVal = $localize `:@@value-diff-current-value-label:Current value:`;\nconst srTextForOldVal = $localize `:@@value-diff-previous-value-label:Previous value:`;\n\nclass ValueDiffDirective {\n    constructor(elRef, renderer, cdRef) {\n        this.elRef = elRef;\n        this.renderer = renderer;\n        this.cdRef = cdRef;\n        this.destroyed$ = new Subject();\n        this.valueChanged$ = new Subject();\n        this.SROnlyOldEl = this.createA11ySpan(srTextForOldVal);\n        this.SROnlyNewEl = this.createA11ySpan(srTextForNewVal);\n        this._newValue = '';\n        this._position = ValueDiffPosition.BEFORE;\n        /**\n         * Show arrow between old and new value\n         * Default value: false\n         */\n        this.showArrow = false;\n    }\n    /**\n     * New data with which we will compare content.\n     */\n    set newValue(value) {\n        this._newValue = value;\n        this.onValueChanged(value);\n    }\n    get newValue() {\n        return this._newValue;\n    }\n    /**\n     * A position where differences will be added.\n     * Default value: 'before'\n     */\n    set position(val) {\n        this._position = val;\n        this.onValueChanged(this._newValue);\n    }\n    get position() {\n        return this._position;\n    }\n    /**\n     * Text for screen reader to describe old value\n     * Default value: 'Previous value:'\n     */\n    set SROnlyOld(val) {\n        this.renderer.setProperty(this.SROnlyOldEl, 'textContent', val);\n    }\n    /**\n     * Text for screen reader to describe new value\n     * Default value: 'Current value:'\n     */\n    set SROnlyNew(val) {\n        this.renderer.setProperty(this.SROnlyNewEl, 'textContent', val);\n    }\n    static isEqual(newData, initialEl) {\n        return initialEl.innerText.trim() === newData;\n    }\n    get isPositionBefore() {\n        return this._position === ValueDiffPosition.BEFORE;\n    }\n    get parentEl() {\n        return this.elRef.nativeElement.parentElement;\n    }\n    ngAfterContentInit() {\n        const changedEl = this.elRef.nativeElement.cloneNode(true);\n        this.valueChanged$\n            .pipe(startWith({ newData: this._newValue, elRef: this.elRef }), filter(({ newData }) => !ValueDiffDirective.isEqual(newData, this.elRef.nativeElement)), takeUntil(this.destroyed$))\n            .subscribe(({ newData }) => {\n            this.cdRef.detectChanges();\n            this.renderer.setProperty(changedEl, 'textContent', newData);\n            this.setupContainer(changedEl);\n        });\n    }\n    ngOnDestroy() {\n        this.destroyed$.next();\n    }\n    setupContainer(changedEl) {\n        const { nativeElement } = this.elRef;\n        if (ValueDiffDirective.isEqual(changedEl.innerText, nativeElement)) {\n            this.cleanUpContent(changedEl);\n        }\n        else {\n            this.renderer.addClass(changedEl, highlightValueClass);\n            this.renderer.addClass(nativeElement, crossOutValueClass);\n            this.renderer.insertBefore(this.parentEl, changedEl, this.getSiblingEl());\n            this.renderer.insertBefore(this.parentEl, this.SROnlyNewEl, changedEl);\n            if (this.showArrow) {\n                this.addElWithArrow();\n            }\n            this.renderer.insertBefore(this.parentEl, this.SROnlyOldEl, nativeElement);\n        }\n    }\n    cleanUpContent(changedEl) {\n        this.renderer.removeClass(changedEl, highlightValueClass);\n        this.renderer.removeClass(this.elRef.nativeElement, crossOutValueClass);\n        this.renderer.removeChild(this.parentEl, changedEl);\n        this.renderer.removeChild(this.parentEl, this.SROnlyOldEl);\n        this.renderer.removeChild(this.parentEl, this.SROnlyNewEl);\n        if (this.arrow) {\n            this.renderer.removeChild(this.parentEl, this.arrow);\n        }\n    }\n    createA11ySpan(content) {\n        const SROnlySpan = this.renderer.createElement('span');\n        this.renderer.addClass(SROnlySpan, 'sr-only');\n        this.renderer.setProperty(SROnlySpan, 'textContent', content);\n        return SROnlySpan;\n    }\n    addElWithArrow() {\n        if (!this.arrow) {\n            const iconClass = this.isPositionBefore ? valueDiffArrowLeftClass : valueDiffArrowRightClass;\n            this.arrow = this.renderer.createElement('i');\n            this.renderer.addClass(this.arrow, iconClass);\n        }\n        this.renderer.insertBefore(this.parentEl, this.arrow, this.getSiblingEl());\n    }\n    getSiblingEl() {\n        return this.isPositionBefore ? this.elRef.nativeElement : this.elRef.nativeElement.nextElementSibling;\n    }\n    onValueChanged(newData) {\n        this.valueChanged$.next({ newData });\n    }\n}\nValueDiffDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ValueDiffDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\nValueDiffDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.16\", type: ValueDiffDirective, selector: \"[bbValueDiff]\", inputs: { newValue: [\"bbValueDiff\", \"newValue\"], position: \"position\", SROnlyOld: [\"sr-only-old\", \"SROnlyOld\"], SROnlyNew: [\"sr-only-new\", \"SROnlyNew\"], showArrow: \"showArrow\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ValueDiffDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[bbValueDiff]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { newValue: [{\n                type: Input,\n                args: ['bbValueDiff']\n            }], position: [{\n                type: Input\n            }], SROnlyOld: [{\n                type: Input,\n                args: ['sr-only-old']\n            }], SROnlyNew: [{\n                type: Input,\n                args: ['sr-only-new']\n            }], showArrow: [{\n                type: Input\n            }] } });\n\nclass ValueDiffDirectiveModule {\n}\nValueDiffDirectiveModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ValueDiffDirectiveModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nValueDiffDirectiveModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ValueDiffDirectiveModule, declarations: [ValueDiffDirective], imports: [CommonModule], exports: [ValueDiffDirective] });\nValueDiffDirectiveModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ValueDiffDirectiveModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ValueDiffDirectiveModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ValueDiffDirective],\n                    exports: [ValueDiffDirective],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ValueDiffDirective, ValueDiffDirectiveModule, ValueDiffPosition };\n"]},"metadata":{},"sourceType":"module"}