{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i2 from '@backbase/foundation-ang/data-http';\nimport { createMocks } from '@backbase/foundation-ang/data-http';\nconst AccessContextScope = {\n  SA: 'SA',\n  LE: 'LE',\n  USER: 'USER'\n};\nconst AccountIdentifierType = {\n  IBAN: 'IBAN',\n  ACCOUNTNUMBER: 'ACCOUNT_NUMBER',\n  PHONENUMBER: 'PHONE_NUMBER',\n  EMAIL: 'EMAIL'\n};\nconst ActiveContactStatus = {\n  ACTIVE: 'ACTIVE',\n  PENDINGAPPROVAL: 'PENDING_APPROVAL'\n};\nconst ApprovalRequestAction = {\n  CREATE: 'CREATE',\n  UPDATE: 'UPDATE',\n  DELETE: 'DELETE'\n};\nconst ApprovalRequestIndicator = {\n  APPROVALREQUIRED: 'APPROVAL_REQUIRED',\n  REQUESTACCEPTED: 'REQUEST_ACCEPTED'\n};\nconst ApprovalRequestStatus = {\n  ENTERED: 'ENTERED',\n  REJECTED: 'REJECTED'\n};\nconst ApprovalResultStatus = {\n  PENDING: 'PENDING',\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED'\n};\nconst ApprovalSort = {\n  STATUS: 'STATUS',\n  NAME: 'NAME',\n  ACTION: 'ACTION',\n  CREATIONTIME: 'CREATION_TIME'\n};\nconst ApprovalStatus = {\n  PENDING: 'PENDING',\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED',\n  CANCELLED: 'CANCELLED'\n};\nconst RecordStatus = {\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED'\n};\nconst SortDirection = {\n  ASC: 'ASC',\n  DESC: 'DESC'\n};\nconst CONTACT_MANAGER_BASE_PATH = new InjectionToken('CONTACT_MANAGER_BASE_PATH');\nconst COLLECTION_FORMATS = {\n  'csv': ',',\n  'tsv': '   ',\n  'ssv': ' ',\n  'pipes': '|'\n};\n\nclass ContactManagerConfiguration {\n  constructor(configurationParameters = {}) {\n    this.apiKeys = configurationParameters.apiKeys;\n    this.username = configurationParameters.username;\n    this.password = configurationParameters.password;\n    this.accessToken = configurationParameters.accessToken;\n    this.basePath = configurationParameters.basePath;\n    this.withCredentials = configurationParameters.withCredentials;\n    this.encoder = configurationParameters.encoder;\n\n    if (configurationParameters.credentials) {\n      this.credentials = configurationParameters.credentials;\n    } else {\n      this.credentials = {};\n    }\n  }\n\n  selectHeaderContentType(contentTypes) {\n    if (contentTypes.length === 0) {\n      return undefined;\n    }\n\n    const type = contentTypes.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return contentTypes[0];\n    }\n\n    return type;\n  }\n\n  selectHeaderAccept(accepts) {\n    if (accepts.length === 0) {\n      return undefined;\n    }\n\n    const type = accepts.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return accepts[0];\n    }\n\n    return type;\n  }\n\n  isJsonMime(mime) {\n    const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n\n  lookupCredential(key) {\n    const value = this.credentials[key];\n    return typeof value === 'function' ? value() : value;\n  }\n\n}\n\nconst CONFIG_TOKEN = new InjectionToken('api-data-module ContactManagerConfiguration');\n\nclass ContactManagerApiModule {\n  constructor(parentModule, http, dataModulesManager, config) {\n    if (parentModule) {\n      throw new Error('ContactManagerApiModule is already loaded. Import in your base AppModule only.');\n    }\n\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' + 'See also https://github.com/angular/angular/issues/20575');\n    }\n\n    if (dataModulesManager) {\n      dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n        apiRoot: '',\n        servicePath: config.basePath || '',\n        headers: {}\n      });\n    }\n  }\n\n  static forRoot(configurationFactory) {\n    return {\n      ngModule: ContactManagerApiModule,\n      providers: [{\n        provide: ContactManagerConfiguration,\n        useFactory: configurationFactory\n      }]\n    };\n  }\n\n}\n\nContactManagerApiModule.ɵfac = function ContactManagerApiModule_Factory(t) {\n  return new (t || ContactManagerApiModule)(i0.ɵɵinject(ContactManagerApiModule, 12), i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DataModulesManager, 8), i0.ɵɵinject(ContactManagerConfiguration));\n};\n\nContactManagerApiModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ContactManagerApiModule\n});\nContactManagerApiModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [],\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ContactManagerApiModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [],\n      exports: [],\n      providers: []\n    }]\n  }], function () {\n    return [{\n      type: ContactManagerApiModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: i1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.DataModulesManager,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ContactManagerConfiguration\n    }];\n  }, null);\n})();\n\nclass CustomHttpParameterCodec {\n  encodeKey(k) {\n    return encodeURIComponent(k);\n  }\n\n  encodeValue(v) {\n    return encodeURIComponent(v);\n  }\n\n  decodeKey(k) {\n    return decodeURIComponent(k);\n  }\n\n  decodeValue(v) {\n    return decodeURIComponent(v);\n  }\n\n}\n\nclass ApprovalsHttpService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new ContactManagerConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  deleteApprovalRequest(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _requestId = requestParameters[\"requestId\"];\n\n    if (_requestId === null || _requestId === undefined) {\n      throw new Error('Required parameter requestId was null or undefined when calling deleteApprovalRequest.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  deleteApprovalRequestUrl(requestParameters) {\n    const _requestId = requestParameters[\"requestId\"];\n\n    if (_requestId === null || _requestId === undefined) {\n      throw new Error('Required parameter requestId was null or undefined when calling deleteApprovalRequest.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}`;\n  }\n\n  getApprovals(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _from = requestParameters[\"from\"];\n    const _size = requestParameters[\"size\"];\n    const _query = requestParameters[\"query\"];\n    const _accountIdentifierTypes = requestParameters[\"accountIdentifierTypes\"];\n    const _sort = requestParameters[\"sort\"];\n    const _direction = requestParameters[\"direction\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_from !== undefined && _from !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n    }\n\n    if (_size !== undefined && _size !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n    }\n\n    if (_query !== undefined && _query !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _query, 'query');\n    }\n\n    if (_accountIdentifierTypes) {\n      _accountIdentifierTypes.forEach(element => {\n        queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');\n      });\n    }\n\n    if (_sort !== undefined && _sort !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');\n    }\n\n    if (_direction !== undefined && _direction !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/approvals`, {\n      params: queryParameters,\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getApprovalsUrl(requestParameters) {\n    const _from = requestParameters[\"from\"];\n    const _size = requestParameters[\"size\"];\n    const _query = requestParameters[\"query\"];\n    const _accountIdentifierTypes = requestParameters[\"accountIdentifierTypes\"];\n    const _sort = requestParameters[\"sort\"];\n    const _direction = requestParameters[\"direction\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_from !== undefined && _from !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n    }\n\n    if (_size !== undefined && _size !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n    }\n\n    if (_query !== undefined && _query !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _query, 'query');\n    }\n\n    if (_accountIdentifierTypes) {\n      _accountIdentifierTypes.forEach(element => {\n        queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');\n      });\n    }\n\n    if (_sort !== undefined && _sort !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');\n    }\n\n    if (_direction !== undefined && _direction !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');\n    }\n\n    const queryString = queryParameters.toString();\n    return `${this.configuration.basePath}/client-api/v2/approvals${queryString ? `?${queryString}` : ''}`;\n  }\n\n  getApprovalsCreatedByMe(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _from = requestParameters[\"from\"];\n    const _size = requestParameters[\"size\"];\n    const _query = requestParameters[\"query\"];\n    const _accountIdentifierTypes = requestParameters[\"accountIdentifierTypes\"];\n    const _sort = requestParameters[\"sort\"];\n    const _direction = requestParameters[\"direction\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_from !== undefined && _from !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n    }\n\n    if (_size !== undefined && _size !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n    }\n\n    if (_query !== undefined && _query !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _query, 'query');\n    }\n\n    if (_accountIdentifierTypes) {\n      _accountIdentifierTypes.forEach(element => {\n        queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');\n      });\n    }\n\n    if (_sort !== undefined && _sort !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');\n    }\n\n    if (_direction !== undefined && _direction !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/approvals/me`, {\n      params: queryParameters,\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getApprovalsCreatedByMeUrl(requestParameters) {\n    const _from = requestParameters[\"from\"];\n    const _size = requestParameters[\"size\"];\n    const _query = requestParameters[\"query\"];\n    const _accountIdentifierTypes = requestParameters[\"accountIdentifierTypes\"];\n    const _sort = requestParameters[\"sort\"];\n    const _direction = requestParameters[\"direction\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_from !== undefined && _from !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n    }\n\n    if (_size !== undefined && _size !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n    }\n\n    if (_query !== undefined && _query !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _query, 'query');\n    }\n\n    if (_accountIdentifierTypes) {\n      _accountIdentifierTypes.forEach(element => {\n        queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');\n      });\n    }\n\n    if (_sort !== undefined && _sort !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');\n    }\n\n    if (_direction !== undefined && _direction !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');\n    }\n\n    const queryString = queryParameters.toString();\n    return `${this.configuration.basePath}/client-api/v2/approvals/me${queryString ? `?${queryString}` : ''}`;\n  }\n\n  postApprovalRecord(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _requestId = requestParameters[\"requestId\"];\n\n    if (_requestId === null || _requestId === undefined) {\n      throw new Error('Required parameter requestId was null or undefined when calling postApprovalRecord.');\n    }\n\n    const _approvalPostRequestBody = requestParameters[\"approvalPostRequestBody\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/approvalRecords`, _approvalPostRequestBody, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  postApprovalRecordUrl(requestParameters) {\n    const _requestId = requestParameters[\"requestId\"];\n\n    if (_requestId === null || _requestId === undefined) {\n      throw new Error('Required parameter requestId was null or undefined when calling postApprovalRecord.');\n    }\n\n    const _approvalPostRequestBody = requestParameters[\"approvalPostRequestBody\"];\n    return `${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/approvalRecords`;\n  }\n\n  postRejectionRecord(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _requestId = requestParameters[\"requestId\"];\n\n    if (_requestId === null || _requestId === undefined) {\n      throw new Error('Required parameter requestId was null or undefined when calling postRejectionRecord.');\n    }\n\n    const _rejectionPostRequestBody = requestParameters[\"rejectionPostRequestBody\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/rejectionRecords`, _rejectionPostRequestBody, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  postRejectionRecordUrl(requestParameters) {\n    const _requestId = requestParameters[\"requestId\"];\n\n    if (_requestId === null || _requestId === undefined) {\n      throw new Error('Required parameter requestId was null or undefined when calling postRejectionRecord.');\n    }\n\n    const _rejectionPostRequestBody = requestParameters[\"rejectionPostRequestBody\"];\n    return `${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/rejectionRecords`;\n  }\n\n}\n\nApprovalsHttpService.ɵfac = function ApprovalsHttpService_Factory(t) {\n  return new (t || ApprovalsHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(CONTACT_MANAGER_BASE_PATH, 8), i0.ɵɵinject(ContactManagerConfiguration, 8));\n};\n\nApprovalsHttpService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ApprovalsHttpService,\n  factory: ApprovalsHttpService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ApprovalsHttpService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CONTACT_MANAGER_BASE_PATH]\n      }]\n    }, {\n      type: ContactManagerConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst ApprovalsHttpServiceDeleteApprovalRequestMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/approvals/{requestId}\",\n  method: \"DELETE\",\n  responses: [{\n    status: 204,\n    body: \"\"\n  }]\n}]);\nconst ApprovalsHttpServiceGetApprovalsMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/approvals\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"id\": \"0855e686-d31e-4216-b3dd-5d66161d5312\",\n      \"creatorBbId\": \"john@example.com\",\n      \"data\": {\n        \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n        \"name\": \"John Doe\",\n        \"alias\": \"John\",\n        \"category\": \"Employee\",\n        \"contactPerson\": \"Jane Doe\",\n        \"phoneNumber\": \"055512345678\",\n        \"emailId\": \"john@example.com\",\n        \"addressLine1\": \"Backbase enterprise\",\n        \"addressLine2\": \"\",\n        \"streetName\": \"Jacob Bontiusplaats 9\",\n        \"town\": \"Amsterdam\",\n        \"postCode\": \"1018 LL\",\n        \"countrySubDivision\": \"North Holland\",\n        \"country\": \"NL\",\n        \"accounts\": [{\n          \"name\": \"Jane Doe\",\n          \"alias\": \"Jane\",\n          \"accountType\": \"SAVINGS\",\n          \"IBAN\": \"FI21 1234 5600 0007 85\",\n          \"bankName\": \"Test Bank\",\n          \"bankAddressLine1\": \"QA Bank\",\n          \"bankAddressLine2\": \"\",\n          \"bankStreetName\": \"Jodenbreestraat 96\",\n          \"bankTown\": \"Amsterdam\",\n          \"bankPostCode\": \"1011NS\",\n          \"bankCountrySubDivision\": \"North Holland\",\n          \"bankCountry\": \"NL\",\n          \"accountHolderAddressLine1\": \"\",\n          \"accountHolderAddressLine2\": \"\",\n          \"accountHolderStreetName\": \"Woestduinstraat 114-3\",\n          \"accountHolderTown\": \"Amsterdam\",\n          \"accountHolderPostCode\": \"1059 SP\",\n          \"accountHolderCountrySubDivision\": \"North Holland\",\n          \"accountHolderCountry\": \"NL\"\n        }],\n        \"accessContextScope\": \"SA\"\n      },\n      \"creationTime\": \"2017-05-12T14:33:13.452Z\",\n      \"action\": \"CREATE\",\n      \"status\": \"ENTERED\"\n    }, {\n      \"id\": \"55ce2962-7c04-41e2-9bb9-84208342f321\",\n      \"creatorBbId\": \"john@example.com\",\n      \"data\": {\n        \"id\": \"aa7cea7f-38ed-4c09-ab38-b3903f1e40ca\",\n        \"name\": \"Judy Doe\",\n        \"alias\": \"Judy\",\n        \"category\": \"VP\",\n        \"contactPerson\": \"Jane Doe\",\n        \"phoneNumber\": \"055512345678\",\n        \"emailId\": \"judy@example.com\",\n        \"addressLine1\": \"Backbase enterprise\",\n        \"addressLine2\": \"\",\n        \"streetName\": \"Jacob Bontiusplaats 9\",\n        \"town\": \"Amsterdam\",\n        \"postCode\": \"1018 LL\",\n        \"countrySubDivision\": \"North Holland\",\n        \"country\": \"NL\",\n        \"accounts\": [{\n          \"name\": \"Jane Doe\",\n          \"alias\": \"Jane\",\n          \"accountType\": \"SAVINGS\",\n          \"IBAN\": \"FI21 1234 5600 0007 85\",\n          \"bankName\": \"Test Bank\",\n          \"bankAddressLine1\": \"Test Bank Co\",\n          \"bankAddressLine2\": \"\",\n          \"bankStreetName\": \"Jodenbreestraat 96\",\n          \"bankTown\": \"Amsterdam\",\n          \"bankPostCode\": \"1011NS\",\n          \"bankCountrySubDivision\": \"North Holland\",\n          \"bankCountry\": \"NL\"\n        }],\n        \"accessContextScope\": \"LE\"\n      },\n      \"creationTime\": \"2018-05-12T14:33:13.452Z\",\n      \"action\": \"UPDATE\",\n      \"status\": \"ENTERED\"\n    }, {\n      \"id\": \"cf40d556-4634-4e96-8976-7fb3764444e9\",\n      \"creatorBbId\": \"john@example.com\",\n      \"data\": {\n        \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n        \"name\": \"Jane Doe\",\n        \"alias\": \"Jane\",\n        \"category\": \"Manager\",\n        \"contactPerson\": \"John Doe\",\n        \"phoneNumber\": \"055512345678\",\n        \"emailId\": \"jane@example.com\",\n        \"addressLine1\": \"Backbase enterprise\",\n        \"addressLine2\": \"\",\n        \"streetName\": \"Jacob Bontiusplaats 9\",\n        \"town\": \"Amsterdam\",\n        \"postCode\": \"1018 LL\",\n        \"countrySubDivision\": \"North Holland\",\n        \"country\": \"NL\",\n        \"accounts\": [{\n          \"name\": \"Jane Doe\",\n          \"alias\": \"Jane\",\n          \"accountType\": \"SAVINGS\",\n          \"IBAN\": \"FI21 1234 5600 0007 85\",\n          \"bankName\": \"Test Bank\",\n          \"bankAddressLine1\": \"Test Bank Co\",\n          \"bankAddressLine2\": \"\",\n          \"bankStreetName\": \"Jodenbreestraat 96\",\n          \"bankTown\": \"Amsterdam\",\n          \"bankPostCode\": \"1011NS\",\n          \"bankCountrySubDivision\": \"North Holland\",\n          \"bankCountry\": \"NL\"\n        }],\n        \"accessContextScope\": \"LE\"\n      },\n      \"creationTime\": \"2018-05-21T14:33:13.452Z\",\n      \"action\": \"DELETE\",\n      \"status\": \"ENTERED\"\n    }]\n  }]\n}]);\nconst ApprovalsHttpServiceGetApprovalsCreatedByMeMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/approvals/me\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"id\": \"5edffbc2-5dc0-11e8-9c2d-fa7ae01bbebc\",\n      \"creatorBbId\": \"john@example.com\",\n      \"creationTime\": \"2017-05-12T14:33:13Z\",\n      \"action\": \"CREATE\",\n      \"status\": \"ENTERED\",\n      \"data\": {\n        \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n        \"name\": \"John Doe\",\n        \"alias\": \"John\",\n        \"category\": \"Employee\",\n        \"contactPerson\": \"Jane Doe\",\n        \"phoneNumber\": \"055512345678\",\n        \"emailId\": \"john@example.com\",\n        \"addressLine1\": \"Backbase enterprise\",\n        \"addressLine2\": \"\",\n        \"streetName\": \"Jacob Bontiusplaats 9\",\n        \"town\": \"Amsterdam\",\n        \"postCode\": \"1018 LL\",\n        \"countrySubDivision\": \"North Holland\",\n        \"country\": \"NL\",\n        \"accounts\": [{\n          \"name\": \"Jane Doe\",\n          \"alias\": \"Jane\",\n          \"accountType\": \"SAVINGS\",\n          \"IBAN\": \"FI21 1234 5600 0007 85\",\n          \"bankName\": \"Test Bank\",\n          \"bankAddressLine1\": \"Test Bank Co\",\n          \"bankAddressLine2\": \"\",\n          \"bankStreetName\": \"Jodenbreestraat 96\",\n          \"bankTown\": \"Amsterdam\",\n          \"bankPostCode\": \"1011NS\",\n          \"bankCountrySubDivision\": \"North Holland\",\n          \"bankCountry\": \"NL\"\n        }],\n        \"accessContextScope\": \"USER\"\n      }\n    }, {\n      \"id\": \"55ce2962-7c04-41e2-9bb9-84208342f321\",\n      \"creatorBbId\": \"john@example.com\",\n      \"creationTime\": \"2018-05-12T14:33:13.452Z\",\n      \"action\": \"UPDATE\",\n      \"status\": \"REJECTED\",\n      \"data\": {\n        \"id\": \"aa7cea7f-38ed-4c09-ab38-b3903f1e40ca\",\n        \"name\": \"Judy Doe\",\n        \"alias\": \"Judy\",\n        \"category\": \"VP\",\n        \"contactPerson\": \"Jane Doe\",\n        \"phoneNumber\": \"055512345678\",\n        \"emailId\": \"judy@example.com\",\n        \"addressLine1\": \"Backbase enterprise\",\n        \"addressLine2\": \"\",\n        \"streetName\": \"Jacob Bontiusplaats 9\",\n        \"town\": \"Amsterdam\",\n        \"postCode\": \"1018 LL\",\n        \"countrySubDivision\": \"North Holland\",\n        \"country\": \"NL\",\n        \"accounts\": [{\n          \"name\": \"Jane Doe\",\n          \"alias\": \"Jane\",\n          \"accountType\": \"SAVINGS\",\n          \"IBAN\": \"FI21 1234 5600 0007 85\",\n          \"bankName\": \"Test Bank\",\n          \"bankAddressLine1\": \"Test Bank Co\",\n          \"bankAddressLine2\": \"\",\n          \"bankStreetName\": \"Jodenbreestraat 96\",\n          \"bankTown\": \"Amsterdam\",\n          \"bankPostCode\": \"1011NS\",\n          \"bankCountrySubDivision\": \"North Holland\",\n          \"bankCountry\": \"NL\"\n        }],\n        \"accessContextScope\": \"LE\"\n      }\n    }, {\n      \"id\": \"cf40d556-4634-4e96-8976-7fb3764444e9\",\n      \"creatorBbId\": \"john@example.com\",\n      \"creationTime\": \"2018-05-21T14:33:13.452Z\",\n      \"action\": \"DELETE\",\n      \"status\": \"ENTERED\",\n      \"data\": {\n        \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n        \"name\": \"Jane Doe\",\n        \"alias\": \"Jane\",\n        \"category\": \"Manager\",\n        \"contactPerson\": \"John Doe\",\n        \"phoneNumber\": \"055512345678\",\n        \"emailId\": \"jane@example.com\",\n        \"addressLine1\": \"Backbase enterprise\",\n        \"addressLine2\": \"\",\n        \"streetName\": \"Jacob Bontiusplaats 9\",\n        \"town\": \"Amsterdam\",\n        \"postCode\": \"1018 LL\",\n        \"countrySubDivision\": \"North Holland\",\n        \"country\": \"NL\",\n        \"accounts\": [{\n          \"name\": \"Jane Doe\",\n          \"alias\": \"Jane\",\n          \"accountType\": \"SAVINGS\",\n          \"IBAN\": \"FI21 1234 5600 0007 85\",\n          \"bankName\": \"Test Bank\",\n          \"bankAddressLine1\": \"Test Bank Co\",\n          \"bankAddressLine2\": \"\",\n          \"bankStreetName\": \"Jodenbreestraat 96\",\n          \"bankTown\": \"Amsterdam\",\n          \"bankPostCode\": \"1011NS\",\n          \"bankCountrySubDivision\": \"North Holland\",\n          \"bankCountry\": \"NL\"\n        }],\n        \"accessContextScope\": \"LE\"\n      }\n    }]\n  }]\n}]);\nconst ApprovalsHttpServicePostApprovalRecordMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/approvals/{requestId}/approvalRecords\",\n  method: \"POST\",\n  responses: [{\n    status: 202,\n    body: {\n      \"status\": \"PENDING\"\n    }\n  }, {\n    status: 201,\n    body: {\n      \"status\": \"APPROVED\"\n    }\n  }, {\n    status: 409,\n    body: {\n      \"key\": \"ContactAlreadyCreated\",\n      \"message\": \"Contact has already been created, please refresh\"\n    }\n  }, {\n    status: 409,\n    body: {\n      \"key\": \"ContactAlreadyUpdated\",\n      \"message\": \"Contact has already been updated, please refresh\"\n    }\n  }, {\n    status: 409,\n    body: {\n      \"key\": \"ContactAlreadyDeleted\",\n      \"message\": \"Contact has already been deleted, please refresh\"\n    }\n  }]\n}]);\nconst ApprovalsHttpServicePostRejectionRecordMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/approvals/{requestId}/rejectionRecords\",\n  method: \"POST\",\n  responses: [{\n    status: 201,\n    body: \"\"\n  }, {\n    status: 409,\n    body: {\n      \"key\": \"ContactAlreadyRejected\",\n      \"message\": \"Contact request has already been rejected, please refresh\"\n    }\n  }]\n}]);\nconst ApprovalsHttpServiceMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/approvals/{requestId}\",\n  method: \"DELETE\",\n  responses: [{\n    status: 204,\n    body: \"\"\n  }]\n}, {\n  urlPattern: \"/client-api/v2/approvals\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"id\": \"0855e686-d31e-4216-b3dd-5d66161d5312\",\n      \"creatorBbId\": \"john@example.com\",\n      \"data\": {\n        \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n        \"name\": \"John Doe\",\n        \"alias\": \"John\",\n        \"category\": \"Employee\",\n        \"contactPerson\": \"Jane Doe\",\n        \"phoneNumber\": \"055512345678\",\n        \"emailId\": \"john@example.com\",\n        \"addressLine1\": \"Backbase enterprise\",\n        \"addressLine2\": \"\",\n        \"streetName\": \"Jacob Bontiusplaats 9\",\n        \"town\": \"Amsterdam\",\n        \"postCode\": \"1018 LL\",\n        \"countrySubDivision\": \"North Holland\",\n        \"country\": \"NL\",\n        \"accounts\": [{\n          \"name\": \"Jane Doe\",\n          \"alias\": \"Jane\",\n          \"accountType\": \"SAVINGS\",\n          \"IBAN\": \"FI21 1234 5600 0007 85\",\n          \"bankName\": \"Test Bank\",\n          \"bankAddressLine1\": \"QA Bank\",\n          \"bankAddressLine2\": \"\",\n          \"bankStreetName\": \"Jodenbreestraat 96\",\n          \"bankTown\": \"Amsterdam\",\n          \"bankPostCode\": \"1011NS\",\n          \"bankCountrySubDivision\": \"North Holland\",\n          \"bankCountry\": \"NL\",\n          \"accountHolderAddressLine1\": \"\",\n          \"accountHolderAddressLine2\": \"\",\n          \"accountHolderStreetName\": \"Woestduinstraat 114-3\",\n          \"accountHolderTown\": \"Amsterdam\",\n          \"accountHolderPostCode\": \"1059 SP\",\n          \"accountHolderCountrySubDivision\": \"North Holland\",\n          \"accountHolderCountry\": \"NL\"\n        }],\n        \"accessContextScope\": \"SA\"\n      },\n      \"creationTime\": \"2017-05-12T14:33:13.452Z\",\n      \"action\": \"CREATE\",\n      \"status\": \"ENTERED\"\n    }, {\n      \"id\": \"55ce2962-7c04-41e2-9bb9-84208342f321\",\n      \"creatorBbId\": \"john@example.com\",\n      \"data\": {\n        \"id\": \"aa7cea7f-38ed-4c09-ab38-b3903f1e40ca\",\n        \"name\": \"Judy Doe\",\n        \"alias\": \"Judy\",\n        \"category\": \"VP\",\n        \"contactPerson\": \"Jane Doe\",\n        \"phoneNumber\": \"055512345678\",\n        \"emailId\": \"judy@example.com\",\n        \"addressLine1\": \"Backbase enterprise\",\n        \"addressLine2\": \"\",\n        \"streetName\": \"Jacob Bontiusplaats 9\",\n        \"town\": \"Amsterdam\",\n        \"postCode\": \"1018 LL\",\n        \"countrySubDivision\": \"North Holland\",\n        \"country\": \"NL\",\n        \"accounts\": [{\n          \"name\": \"Jane Doe\",\n          \"alias\": \"Jane\",\n          \"accountType\": \"SAVINGS\",\n          \"IBAN\": \"FI21 1234 5600 0007 85\",\n          \"bankName\": \"Test Bank\",\n          \"bankAddressLine1\": \"Test Bank Co\",\n          \"bankAddressLine2\": \"\",\n          \"bankStreetName\": \"Jodenbreestraat 96\",\n          \"bankTown\": \"Amsterdam\",\n          \"bankPostCode\": \"1011NS\",\n          \"bankCountrySubDivision\": \"North Holland\",\n          \"bankCountry\": \"NL\"\n        }],\n        \"accessContextScope\": \"LE\"\n      },\n      \"creationTime\": \"2018-05-12T14:33:13.452Z\",\n      \"action\": \"UPDATE\",\n      \"status\": \"ENTERED\"\n    }, {\n      \"id\": \"cf40d556-4634-4e96-8976-7fb3764444e9\",\n      \"creatorBbId\": \"john@example.com\",\n      \"data\": {\n        \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n        \"name\": \"Jane Doe\",\n        \"alias\": \"Jane\",\n        \"category\": \"Manager\",\n        \"contactPerson\": \"John Doe\",\n        \"phoneNumber\": \"055512345678\",\n        \"emailId\": \"jane@example.com\",\n        \"addressLine1\": \"Backbase enterprise\",\n        \"addressLine2\": \"\",\n        \"streetName\": \"Jacob Bontiusplaats 9\",\n        \"town\": \"Amsterdam\",\n        \"postCode\": \"1018 LL\",\n        \"countrySubDivision\": \"North Holland\",\n        \"country\": \"NL\",\n        \"accounts\": [{\n          \"name\": \"Jane Doe\",\n          \"alias\": \"Jane\",\n          \"accountType\": \"SAVINGS\",\n          \"IBAN\": \"FI21 1234 5600 0007 85\",\n          \"bankName\": \"Test Bank\",\n          \"bankAddressLine1\": \"Test Bank Co\",\n          \"bankAddressLine2\": \"\",\n          \"bankStreetName\": \"Jodenbreestraat 96\",\n          \"bankTown\": \"Amsterdam\",\n          \"bankPostCode\": \"1011NS\",\n          \"bankCountrySubDivision\": \"North Holland\",\n          \"bankCountry\": \"NL\"\n        }],\n        \"accessContextScope\": \"LE\"\n      },\n      \"creationTime\": \"2018-05-21T14:33:13.452Z\",\n      \"action\": \"DELETE\",\n      \"status\": \"ENTERED\"\n    }]\n  }]\n}, {\n  urlPattern: \"/client-api/v2/approvals/me\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"id\": \"5edffbc2-5dc0-11e8-9c2d-fa7ae01bbebc\",\n      \"creatorBbId\": \"john@example.com\",\n      \"creationTime\": \"2017-05-12T14:33:13Z\",\n      \"action\": \"CREATE\",\n      \"status\": \"ENTERED\",\n      \"data\": {\n        \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n        \"name\": \"John Doe\",\n        \"alias\": \"John\",\n        \"category\": \"Employee\",\n        \"contactPerson\": \"Jane Doe\",\n        \"phoneNumber\": \"055512345678\",\n        \"emailId\": \"john@example.com\",\n        \"addressLine1\": \"Backbase enterprise\",\n        \"addressLine2\": \"\",\n        \"streetName\": \"Jacob Bontiusplaats 9\",\n        \"town\": \"Amsterdam\",\n        \"postCode\": \"1018 LL\",\n        \"countrySubDivision\": \"North Holland\",\n        \"country\": \"NL\",\n        \"accounts\": [{\n          \"name\": \"Jane Doe\",\n          \"alias\": \"Jane\",\n          \"accountType\": \"SAVINGS\",\n          \"IBAN\": \"FI21 1234 5600 0007 85\",\n          \"bankName\": \"Test Bank\",\n          \"bankAddressLine1\": \"Test Bank Co\",\n          \"bankAddressLine2\": \"\",\n          \"bankStreetName\": \"Jodenbreestraat 96\",\n          \"bankTown\": \"Amsterdam\",\n          \"bankPostCode\": \"1011NS\",\n          \"bankCountrySubDivision\": \"North Holland\",\n          \"bankCountry\": \"NL\"\n        }],\n        \"accessContextScope\": \"USER\"\n      }\n    }, {\n      \"id\": \"55ce2962-7c04-41e2-9bb9-84208342f321\",\n      \"creatorBbId\": \"john@example.com\",\n      \"creationTime\": \"2018-05-12T14:33:13.452Z\",\n      \"action\": \"UPDATE\",\n      \"status\": \"REJECTED\",\n      \"data\": {\n        \"id\": \"aa7cea7f-38ed-4c09-ab38-b3903f1e40ca\",\n        \"name\": \"Judy Doe\",\n        \"alias\": \"Judy\",\n        \"category\": \"VP\",\n        \"contactPerson\": \"Jane Doe\",\n        \"phoneNumber\": \"055512345678\",\n        \"emailId\": \"judy@example.com\",\n        \"addressLine1\": \"Backbase enterprise\",\n        \"addressLine2\": \"\",\n        \"streetName\": \"Jacob Bontiusplaats 9\",\n        \"town\": \"Amsterdam\",\n        \"postCode\": \"1018 LL\",\n        \"countrySubDivision\": \"North Holland\",\n        \"country\": \"NL\",\n        \"accounts\": [{\n          \"name\": \"Jane Doe\",\n          \"alias\": \"Jane\",\n          \"accountType\": \"SAVINGS\",\n          \"IBAN\": \"FI21 1234 5600 0007 85\",\n          \"bankName\": \"Test Bank\",\n          \"bankAddressLine1\": \"Test Bank Co\",\n          \"bankAddressLine2\": \"\",\n          \"bankStreetName\": \"Jodenbreestraat 96\",\n          \"bankTown\": \"Amsterdam\",\n          \"bankPostCode\": \"1011NS\",\n          \"bankCountrySubDivision\": \"North Holland\",\n          \"bankCountry\": \"NL\"\n        }],\n        \"accessContextScope\": \"LE\"\n      }\n    }, {\n      \"id\": \"cf40d556-4634-4e96-8976-7fb3764444e9\",\n      \"creatorBbId\": \"john@example.com\",\n      \"creationTime\": \"2018-05-21T14:33:13.452Z\",\n      \"action\": \"DELETE\",\n      \"status\": \"ENTERED\",\n      \"data\": {\n        \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n        \"name\": \"Jane Doe\",\n        \"alias\": \"Jane\",\n        \"category\": \"Manager\",\n        \"contactPerson\": \"John Doe\",\n        \"phoneNumber\": \"055512345678\",\n        \"emailId\": \"jane@example.com\",\n        \"addressLine1\": \"Backbase enterprise\",\n        \"addressLine2\": \"\",\n        \"streetName\": \"Jacob Bontiusplaats 9\",\n        \"town\": \"Amsterdam\",\n        \"postCode\": \"1018 LL\",\n        \"countrySubDivision\": \"North Holland\",\n        \"country\": \"NL\",\n        \"accounts\": [{\n          \"name\": \"Jane Doe\",\n          \"alias\": \"Jane\",\n          \"accountType\": \"SAVINGS\",\n          \"IBAN\": \"FI21 1234 5600 0007 85\",\n          \"bankName\": \"Test Bank\",\n          \"bankAddressLine1\": \"Test Bank Co\",\n          \"bankAddressLine2\": \"\",\n          \"bankStreetName\": \"Jodenbreestraat 96\",\n          \"bankTown\": \"Amsterdam\",\n          \"bankPostCode\": \"1011NS\",\n          \"bankCountrySubDivision\": \"North Holland\",\n          \"bankCountry\": \"NL\"\n        }],\n        \"accessContextScope\": \"LE\"\n      }\n    }]\n  }]\n}, {\n  urlPattern: \"/client-api/v2/approvals/{requestId}/approvalRecords\",\n  method: \"POST\",\n  responses: [{\n    status: 202,\n    body: {\n      \"status\": \"PENDING\"\n    }\n  }, {\n    status: 201,\n    body: {\n      \"status\": \"APPROVED\"\n    }\n  }, {\n    status: 409,\n    body: {\n      \"key\": \"ContactAlreadyCreated\",\n      \"message\": \"Contact has already been created, please refresh\"\n    }\n  }, {\n    status: 409,\n    body: {\n      \"key\": \"ContactAlreadyUpdated\",\n      \"message\": \"Contact has already been updated, please refresh\"\n    }\n  }, {\n    status: 409,\n    body: {\n      \"key\": \"ContactAlreadyDeleted\",\n      \"message\": \"Contact has already been deleted, please refresh\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/approvals/{requestId}/rejectionRecords\",\n  method: \"POST\",\n  responses: [{\n    status: 201,\n    body: \"\"\n  }, {\n    status: 409,\n    body: {\n      \"key\": \"ContactAlreadyRejected\",\n      \"message\": \"Contact request has already been rejected, please refresh\"\n    }\n  }]\n}]);\n\nclass ContactsHttpService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new ContactManagerConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  deleteContact(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _contactId = requestParameters[\"contactId\"];\n\n    if (_contactId === null || _contactId === undefined) {\n      throw new Error('Required parameter contactId was null or undefined when calling deleteContact.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  deleteContactUrl(requestParameters) {\n    const _contactId = requestParameters[\"contactId\"];\n\n    if (_contactId === null || _contactId === undefined) {\n      throw new Error('Required parameter contactId was null or undefined when calling deleteContact.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`;\n  }\n\n  getContact(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _contactId = requestParameters[\"contactId\"];\n\n    if (_contactId === null || _contactId === undefined) {\n      throw new Error('Required parameter contactId was null or undefined when calling getContact.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getContactUrl(requestParameters) {\n    const _contactId = requestParameters[\"contactId\"];\n\n    if (_contactId === null || _contactId === undefined) {\n      throw new Error('Required parameter contactId was null or undefined when calling getContact.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`;\n  }\n\n  getContacts(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _from = requestParameters[\"from\"];\n    const _size = requestParameters[\"size\"];\n    const _query = requestParameters[\"query\"];\n    const _accountIdentifierTypes = requestParameters[\"accountIdentifierTypes\"];\n    const _targetSaId = requestParameters[\"targetSaId\"];\n    const _businessFunctions = requestParameters[\"businessFunctions\"];\n    const _arrangementId = requestParameters[\"arrangementId\"];\n    const _privilege = requestParameters[\"privilege\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_from !== undefined && _from !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n    }\n\n    if (_size !== undefined && _size !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n    }\n\n    if (_query !== undefined && _query !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _query, 'query');\n    }\n\n    if (_accountIdentifierTypes) {\n      _accountIdentifierTypes.forEach(element => {\n        queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');\n      });\n    }\n\n    if (_targetSaId !== undefined && _targetSaId !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');\n    }\n\n    if (_businessFunctions) {\n      _businessFunctions.forEach(element => {\n        queryParameters = this.addToHttpParams(queryParameters, element, 'businessFunctions');\n      });\n    }\n\n    if (_arrangementId !== undefined && _arrangementId !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _arrangementId, 'arrangementId');\n    }\n\n    if (_privilege !== undefined && _privilege !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/contacts`, {\n      params: queryParameters,\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getContactsUrl(requestParameters) {\n    const _from = requestParameters[\"from\"];\n    const _size = requestParameters[\"size\"];\n    const _query = requestParameters[\"query\"];\n    const _accountIdentifierTypes = requestParameters[\"accountIdentifierTypes\"];\n    const _targetSaId = requestParameters[\"targetSaId\"];\n    const _businessFunctions = requestParameters[\"businessFunctions\"];\n    const _arrangementId = requestParameters[\"arrangementId\"];\n    const _privilege = requestParameters[\"privilege\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_from !== undefined && _from !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n    }\n\n    if (_size !== undefined && _size !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n    }\n\n    if (_query !== undefined && _query !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _query, 'query');\n    }\n\n    if (_accountIdentifierTypes) {\n      _accountIdentifierTypes.forEach(element => {\n        queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');\n      });\n    }\n\n    if (_targetSaId !== undefined && _targetSaId !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');\n    }\n\n    if (_businessFunctions) {\n      _businessFunctions.forEach(element => {\n        queryParameters = this.addToHttpParams(queryParameters, element, 'businessFunctions');\n      });\n    }\n\n    if (_arrangementId !== undefined && _arrangementId !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _arrangementId, 'arrangementId');\n    }\n\n    if (_privilege !== undefined && _privilege !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');\n    }\n\n    const queryString = queryParameters.toString();\n    return `${this.configuration.basePath}/client-api/v2/contacts${queryString ? `?${queryString}` : ''}`;\n  }\n\n  postContacts(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _contactsPostRequestBody = requestParameters[\"contactsPostRequestBody\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/contacts`, _contactsPostRequestBody, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  postContactsUrl(requestParameters) {\n    const _contactsPostRequestBody = requestParameters[\"contactsPostRequestBody\"];\n    return `${this.configuration.basePath}/client-api/v2/contacts`;\n  }\n\n  postContactsFilter(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _from = requestParameters[\"from\"];\n    const _size = requestParameters[\"size\"];\n    const _query = requestParameters[\"query\"];\n    const _targetSaId = requestParameters[\"targetSaId\"];\n    const _contactsPostFilterRequestBody = requestParameters[\"contactsPostFilterRequestBody\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_from !== undefined && _from !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n    }\n\n    if (_size !== undefined && _size !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n    }\n\n    if (_query !== undefined && _query !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _query, 'query');\n    }\n\n    if (_targetSaId !== undefined && _targetSaId !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/contacts/filter`, _contactsPostFilterRequestBody, {\n      params: queryParameters,\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  postContactsFilterUrl(requestParameters) {\n    const _from = requestParameters[\"from\"];\n    const _size = requestParameters[\"size\"];\n    const _query = requestParameters[\"query\"];\n    const _targetSaId = requestParameters[\"targetSaId\"];\n    const _contactsPostFilterRequestBody = requestParameters[\"contactsPostFilterRequestBody\"];\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (_from !== undefined && _from !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n    }\n\n    if (_size !== undefined && _size !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n    }\n\n    if (_query !== undefined && _query !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _query, 'query');\n    }\n\n    if (_targetSaId !== undefined && _targetSaId !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');\n    }\n\n    const queryString = queryParameters.toString();\n    return `${this.configuration.basePath}/client-api/v2/contacts/filter${queryString ? `?${queryString}` : ''}`;\n  }\n\n  putContact(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _contactId = requestParameters[\"contactId\"];\n\n    if (_contactId === null || _contactId === undefined) {\n      throw new Error('Required parameter contactId was null or undefined when calling putContact.');\n    }\n\n    const _contactPutRequestBody = requestParameters[\"contactPutRequestBody\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`, _contactPutRequestBody, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  putContactUrl(requestParameters) {\n    const _contactId = requestParameters[\"contactId\"];\n\n    if (_contactId === null || _contactId === undefined) {\n      throw new Error('Required parameter contactId was null or undefined when calling putContact.');\n    }\n\n    const _contactPutRequestBody = requestParameters[\"contactPutRequestBody\"];\n    return `${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`;\n  }\n\n}\n\nContactsHttpService.ɵfac = function ContactsHttpService_Factory(t) {\n  return new (t || ContactsHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(CONTACT_MANAGER_BASE_PATH, 8), i0.ɵɵinject(ContactManagerConfiguration, 8));\n};\n\nContactsHttpService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ContactsHttpService,\n  factory: ContactsHttpService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ContactsHttpService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CONTACT_MANAGER_BASE_PATH]\n      }]\n    }, {\n      type: ContactManagerConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst ContactsHttpServiceDeleteContactMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/contacts/{contactId}\",\n  method: \"DELETE\",\n  responses: [{\n    status: 202,\n    body: {\n      \"status\": \"REQUEST_ACCEPTED\"\n    }\n  }, {\n    status: 409,\n    body: {\n      \"key\": \"ApprovalAlreadyExistForContact\",\n      \"message\": \"Approval request already exist with this contact.\"\n    }\n  }]\n}]);\nconst ContactsHttpServiceGetContactMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/contacts/{contactId}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n      \"name\": \"John Doe\",\n      \"alias\": \"John\",\n      \"category\": \"Employee\",\n      \"contactPerson\": \"Jane Doe\",\n      \"phoneNumber\": \"055512345678\",\n      \"emailId\": \"john@example.com\",\n      \"addressLine1\": \"Backbase enterprise\",\n      \"addressLine2\": \"\",\n      \"streetName\": \"Jacob Bontiusplaats 9\",\n      \"town\": \"Amsterdam\",\n      \"postCode\": \"1018 LL\",\n      \"countrySubDivision\": \"North Holland\",\n      \"country\": \"NL\",\n      \"accounts\": [{\n        \"name\": \"Jane Doe\",\n        \"alias\": \"Jane\",\n        \"accountType\": \"SAVINGS\",\n        \"IBAN\": \"FI21 1234 5600 0007 85\",\n        \"bankName\": \"Test Bank\",\n        \"bankAddressLine1\": \"Test Bank Co\",\n        \"bankAddressLine2\": \"\",\n        \"bankStreetName\": \"Jodenbreestraat 96\",\n        \"bankTown\": \"Amsterdam\",\n        \"bankPostCode\": \"1011NS\",\n        \"bankCountrySubDivision\": \"North Holland\",\n        \"bankCountry\": \"NL\",\n        \"accountHolderAddressLine1\": \"Backbase enterprise\",\n        \"accountHolderAddressLine2\": \"\",\n        \"accountHolderStreetName\": \"Jacob Bontiusplaats 9\",\n        \"accountHolderTown\": \"Amsterdam\",\n        \"accountHolderPostCode\": \"1018 LL\",\n        \"accountHolderCountrySubDivision\": \"North Holland\",\n        \"accountHolderCountry\": \"NL\"\n      }],\n      \"accessContextScope\": \"USER\",\n      \"activeStatus\": \"ACTIVE\"\n    }\n  }]\n}]);\nconst ContactsHttpServiceGetContactsMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/contacts\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n      \"name\": \"John Doe\",\n      \"alias\": \"John\",\n      \"category\": \"Employee\",\n      \"contactPerson\": \"Jane Doe\",\n      \"phoneNumber\": \"055512345678\",\n      \"emailId\": \"john@example.com\",\n      \"addressLine1\": \"Backbase enterprise\",\n      \"addressLine2\": \"\",\n      \"streetName\": \"Jacob Bontiusplaats 9\",\n      \"town\": \"Amsterdam\",\n      \"postCode\": \"1018 LL\",\n      \"countrySubDivision\": \"North Holland\",\n      \"country\": \"NL\",\n      \"accounts\": [{\n        \"name\": \"Jane Doe\",\n        \"alias\": \"Jane\",\n        \"accountType\": \"SAVINGS\",\n        \"IBAN\": \"FI21 1234 5600 0007 85\",\n        \"bankName\": \"Test Bank\",\n        \"bankAddressLine1\": \"QA Bank\",\n        \"bankAddressLine2\": \"\",\n        \"bankStreetName\": \"Jodenbreestraat 96\",\n        \"bankTown\": \"Amsterdam\",\n        \"bankPostCode\": \"1011NS\",\n        \"bankCountrySubDivision\": \"North Holland\",\n        \"bankCountry\": \"NL\",\n        \"accountHolderAddressLine1\": \"\",\n        \"accountHolderAddressLine2\": \"\",\n        \"accountHolderStreetName\": \"Woestduinstraat 114-3\",\n        \"accountHolderTown\": \"Amsterdam\",\n        \"accountHolderPostCode\": \"1059 SP\",\n        \"accountHolderCountrySubDivision\": \"North Holland\",\n        \"accountHolderCountry\": \"NL\"\n      }],\n      \"accessContextScope\": \"SA\",\n      \"activeStatus\": \"ACTIVE\"\n    }, {\n      \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n      \"name\": \"Jane Doe\",\n      \"alias\": \"Jane\",\n      \"category\": \"Manager\",\n      \"contactPerson\": \"John Doe\",\n      \"phoneNumber\": \"055512345678\",\n      \"emailId\": \"jane@example.com\",\n      \"addressLine1\": \"Backbase enterprise\",\n      \"addressLine2\": \"\",\n      \"streetName\": \"Jacob Bontiusplaats 9\",\n      \"town\": \"Amsterdam\",\n      \"postCode\": \"1018 LL\",\n      \"countrySubDivision\": \"North Holland\",\n      \"country\": \"NL\",\n      \"accounts\": [{\n        \"name\": \"Jane Doe\",\n        \"alias\": \"Jane\",\n        \"accountType\": \"SAVINGS\",\n        \"IBAN\": \"FI21 1234 5600 0007 85\",\n        \"bankName\": \"Test Bank\",\n        \"bankAddressLine1\": \"Test Bank Co\",\n        \"bankAddressLine2\": \"\",\n        \"bankStreetName\": \"Jodenbreestraat 96\",\n        \"bankTown\": \"Amsterdam\",\n        \"bankPostCode\": \"1011NS\",\n        \"bankCountrySubDivision\": \"North Holland\",\n        \"bankCountry\": \"NL\"\n      }],\n      \"accessContextScope\": \"LE\",\n      \"activeStatus\": \"PENDING_APPROVAL\"\n    }]\n  }]\n}]);\nconst ContactsHttpServicePostContactsMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/contacts\",\n  method: \"POST\",\n  responses: [{\n    status: 201,\n    body: {\n      \"id\": \"0955e686-d31e-4216-b3dd-5d66161d536d\",\n      \"status\": \"ACTIVE\"\n    }\n  }, {\n    status: 202,\n    body: {\n      \"id\": \"0955e686-d31e-4216-b3dd-5d66161d536d\",\n      \"status\": \"ACTIVE\"\n    }\n  }]\n}]);\nconst ContactsHttpServicePostContactsFilterMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/contacts/filter\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n      \"name\": \"John Doe\",\n      \"alias\": \"John\",\n      \"category\": \"Employee\",\n      \"contactPerson\": \"Jane Doe\",\n      \"phoneNumber\": \"055512345678\",\n      \"emailId\": \"john@example.com\",\n      \"addressLine1\": \"Backbase enterprise\",\n      \"addressLine2\": \"\",\n      \"streetName\": \"Jacob Bontiusplaats 9\",\n      \"town\": \"Amsterdam\",\n      \"postCode\": \"1018 LL\",\n      \"countrySubDivision\": \"North Holland\",\n      \"country\": \"NL\",\n      \"accounts\": [{\n        \"name\": \"Jane Doe\",\n        \"alias\": \"Jane\",\n        \"accountType\": \"SAVINGS\",\n        \"IBAN\": \"FI21 1234 5600 0007 85\",\n        \"bankName\": \"Test Bank\",\n        \"bankAddressLine1\": \"QA Bank\",\n        \"bankAddressLine2\": \"\",\n        \"bankStreetName\": \"Jodenbreestraat 96\",\n        \"bankTown\": \"Amsterdam\",\n        \"bankPostCode\": \"1011NS\",\n        \"bankCountrySubDivision\": \"North Holland\",\n        \"bankCountry\": \"NL\",\n        \"accountHolderAddressLine1\": \"\",\n        \"accountHolderAddressLine2\": \"\",\n        \"accountHolderStreetName\": \"Woestduinstraat 114-3\",\n        \"accountHolderTown\": \"Amsterdam\",\n        \"accountHolderPostCode\": \"1059 SP\",\n        \"accountHolderCountrySubDivision\": \"North Holland\",\n        \"accountHolderCountry\": \"NL\"\n      }],\n      \"accessContextScope\": \"SA\",\n      \"activeStatus\": \"ACTIVE\"\n    }, {\n      \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n      \"name\": \"Jane Doe\",\n      \"alias\": \"Jane\",\n      \"category\": \"Manager\",\n      \"contactPerson\": \"John Doe\",\n      \"phoneNumber\": \"055512345678\",\n      \"emailId\": \"jane@example.com\",\n      \"addressLine1\": \"Backbase enterprise\",\n      \"addressLine2\": \"\",\n      \"streetName\": \"Jacob Bontiusplaats 9\",\n      \"town\": \"Amsterdam\",\n      \"postCode\": \"1018 LL\",\n      \"countrySubDivision\": \"North Holland\",\n      \"country\": \"NL\",\n      \"accounts\": [{\n        \"name\": \"Jane Doe\",\n        \"alias\": \"Jane\",\n        \"accountType\": \"SAVINGS\",\n        \"IBAN\": \"FI21 1234 5600 0007 85\",\n        \"bankName\": \"Test Bank\",\n        \"bankAddressLine1\": \"Test Bank Co\",\n        \"bankAddressLine2\": \"\",\n        \"bankStreetName\": \"Jodenbreestraat 96\",\n        \"bankTown\": \"Amsterdam\",\n        \"bankPostCode\": \"1011NS\",\n        \"bankCountrySubDivision\": \"North Holland\",\n        \"bankCountry\": \"NL\"\n      }],\n      \"accessContextScope\": \"LE\",\n      \"activeStatus\": \"PENDING_APPROVAL\"\n    }]\n  }]\n}]);\nconst ContactsHttpServicePutContactMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/contacts/{contactId}\",\n  method: \"PUT\",\n  responses: [{\n    status: 202,\n    body: {\n      \"status\": \"REQUEST_ACCEPTED\"\n    }\n  }, {\n    status: 409,\n    body: {\n      \"key\": \"ApprovalAlreadyExistForContact\",\n      \"message\": \"Approval request already exist with this contact.\"\n    }\n  }]\n}]);\nconst ContactsHttpServiceMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/contacts/{contactId}\",\n  method: \"DELETE\",\n  responses: [{\n    status: 202,\n    body: {\n      \"status\": \"REQUEST_ACCEPTED\"\n    }\n  }, {\n    status: 409,\n    body: {\n      \"key\": \"ApprovalAlreadyExistForContact\",\n      \"message\": \"Approval request already exist with this contact.\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/contacts/{contactId}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n      \"name\": \"John Doe\",\n      \"alias\": \"John\",\n      \"category\": \"Employee\",\n      \"contactPerson\": \"Jane Doe\",\n      \"phoneNumber\": \"055512345678\",\n      \"emailId\": \"john@example.com\",\n      \"addressLine1\": \"Backbase enterprise\",\n      \"addressLine2\": \"\",\n      \"streetName\": \"Jacob Bontiusplaats 9\",\n      \"town\": \"Amsterdam\",\n      \"postCode\": \"1018 LL\",\n      \"countrySubDivision\": \"North Holland\",\n      \"country\": \"NL\",\n      \"accounts\": [{\n        \"name\": \"Jane Doe\",\n        \"alias\": \"Jane\",\n        \"accountType\": \"SAVINGS\",\n        \"IBAN\": \"FI21 1234 5600 0007 85\",\n        \"bankName\": \"Test Bank\",\n        \"bankAddressLine1\": \"Test Bank Co\",\n        \"bankAddressLine2\": \"\",\n        \"bankStreetName\": \"Jodenbreestraat 96\",\n        \"bankTown\": \"Amsterdam\",\n        \"bankPostCode\": \"1011NS\",\n        \"bankCountrySubDivision\": \"North Holland\",\n        \"bankCountry\": \"NL\",\n        \"accountHolderAddressLine1\": \"Backbase enterprise\",\n        \"accountHolderAddressLine2\": \"\",\n        \"accountHolderStreetName\": \"Jacob Bontiusplaats 9\",\n        \"accountHolderTown\": \"Amsterdam\",\n        \"accountHolderPostCode\": \"1018 LL\",\n        \"accountHolderCountrySubDivision\": \"North Holland\",\n        \"accountHolderCountry\": \"NL\"\n      }],\n      \"accessContextScope\": \"USER\",\n      \"activeStatus\": \"ACTIVE\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/contacts\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n      \"name\": \"John Doe\",\n      \"alias\": \"John\",\n      \"category\": \"Employee\",\n      \"contactPerson\": \"Jane Doe\",\n      \"phoneNumber\": \"055512345678\",\n      \"emailId\": \"john@example.com\",\n      \"addressLine1\": \"Backbase enterprise\",\n      \"addressLine2\": \"\",\n      \"streetName\": \"Jacob Bontiusplaats 9\",\n      \"town\": \"Amsterdam\",\n      \"postCode\": \"1018 LL\",\n      \"countrySubDivision\": \"North Holland\",\n      \"country\": \"NL\",\n      \"accounts\": [{\n        \"name\": \"Jane Doe\",\n        \"alias\": \"Jane\",\n        \"accountType\": \"SAVINGS\",\n        \"IBAN\": \"FI21 1234 5600 0007 85\",\n        \"bankName\": \"Test Bank\",\n        \"bankAddressLine1\": \"QA Bank\",\n        \"bankAddressLine2\": \"\",\n        \"bankStreetName\": \"Jodenbreestraat 96\",\n        \"bankTown\": \"Amsterdam\",\n        \"bankPostCode\": \"1011NS\",\n        \"bankCountrySubDivision\": \"North Holland\",\n        \"bankCountry\": \"NL\",\n        \"accountHolderAddressLine1\": \"\",\n        \"accountHolderAddressLine2\": \"\",\n        \"accountHolderStreetName\": \"Woestduinstraat 114-3\",\n        \"accountHolderTown\": \"Amsterdam\",\n        \"accountHolderPostCode\": \"1059 SP\",\n        \"accountHolderCountrySubDivision\": \"North Holland\",\n        \"accountHolderCountry\": \"NL\"\n      }],\n      \"accessContextScope\": \"SA\",\n      \"activeStatus\": \"ACTIVE\"\n    }, {\n      \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n      \"name\": \"Jane Doe\",\n      \"alias\": \"Jane\",\n      \"category\": \"Manager\",\n      \"contactPerson\": \"John Doe\",\n      \"phoneNumber\": \"055512345678\",\n      \"emailId\": \"jane@example.com\",\n      \"addressLine1\": \"Backbase enterprise\",\n      \"addressLine2\": \"\",\n      \"streetName\": \"Jacob Bontiusplaats 9\",\n      \"town\": \"Amsterdam\",\n      \"postCode\": \"1018 LL\",\n      \"countrySubDivision\": \"North Holland\",\n      \"country\": \"NL\",\n      \"accounts\": [{\n        \"name\": \"Jane Doe\",\n        \"alias\": \"Jane\",\n        \"accountType\": \"SAVINGS\",\n        \"IBAN\": \"FI21 1234 5600 0007 85\",\n        \"bankName\": \"Test Bank\",\n        \"bankAddressLine1\": \"Test Bank Co\",\n        \"bankAddressLine2\": \"\",\n        \"bankStreetName\": \"Jodenbreestraat 96\",\n        \"bankTown\": \"Amsterdam\",\n        \"bankPostCode\": \"1011NS\",\n        \"bankCountrySubDivision\": \"North Holland\",\n        \"bankCountry\": \"NL\"\n      }],\n      \"accessContextScope\": \"LE\",\n      \"activeStatus\": \"PENDING_APPROVAL\"\n    }]\n  }]\n}, {\n  urlPattern: \"/client-api/v2/contacts\",\n  method: \"POST\",\n  responses: [{\n    status: 201,\n    body: {\n      \"id\": \"0955e686-d31e-4216-b3dd-5d66161d536d\",\n      \"status\": \"ACTIVE\"\n    }\n  }, {\n    status: 202,\n    body: {\n      \"id\": \"0955e686-d31e-4216-b3dd-5d66161d536d\",\n      \"status\": \"ACTIVE\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/contacts/filter\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n      \"name\": \"John Doe\",\n      \"alias\": \"John\",\n      \"category\": \"Employee\",\n      \"contactPerson\": \"Jane Doe\",\n      \"phoneNumber\": \"055512345678\",\n      \"emailId\": \"john@example.com\",\n      \"addressLine1\": \"Backbase enterprise\",\n      \"addressLine2\": \"\",\n      \"streetName\": \"Jacob Bontiusplaats 9\",\n      \"town\": \"Amsterdam\",\n      \"postCode\": \"1018 LL\",\n      \"countrySubDivision\": \"North Holland\",\n      \"country\": \"NL\",\n      \"accounts\": [{\n        \"name\": \"Jane Doe\",\n        \"alias\": \"Jane\",\n        \"accountType\": \"SAVINGS\",\n        \"IBAN\": \"FI21 1234 5600 0007 85\",\n        \"bankName\": \"Test Bank\",\n        \"bankAddressLine1\": \"QA Bank\",\n        \"bankAddressLine2\": \"\",\n        \"bankStreetName\": \"Jodenbreestraat 96\",\n        \"bankTown\": \"Amsterdam\",\n        \"bankPostCode\": \"1011NS\",\n        \"bankCountrySubDivision\": \"North Holland\",\n        \"bankCountry\": \"NL\",\n        \"accountHolderAddressLine1\": \"\",\n        \"accountHolderAddressLine2\": \"\",\n        \"accountHolderStreetName\": \"Woestduinstraat 114-3\",\n        \"accountHolderTown\": \"Amsterdam\",\n        \"accountHolderPostCode\": \"1059 SP\",\n        \"accountHolderCountrySubDivision\": \"North Holland\",\n        \"accountHolderCountry\": \"NL\"\n      }],\n      \"accessContextScope\": \"SA\",\n      \"activeStatus\": \"ACTIVE\"\n    }, {\n      \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n      \"name\": \"Jane Doe\",\n      \"alias\": \"Jane\",\n      \"category\": \"Manager\",\n      \"contactPerson\": \"John Doe\",\n      \"phoneNumber\": \"055512345678\",\n      \"emailId\": \"jane@example.com\",\n      \"addressLine1\": \"Backbase enterprise\",\n      \"addressLine2\": \"\",\n      \"streetName\": \"Jacob Bontiusplaats 9\",\n      \"town\": \"Amsterdam\",\n      \"postCode\": \"1018 LL\",\n      \"countrySubDivision\": \"North Holland\",\n      \"country\": \"NL\",\n      \"accounts\": [{\n        \"name\": \"Jane Doe\",\n        \"alias\": \"Jane\",\n        \"accountType\": \"SAVINGS\",\n        \"IBAN\": \"FI21 1234 5600 0007 85\",\n        \"bankName\": \"Test Bank\",\n        \"bankAddressLine1\": \"Test Bank Co\",\n        \"bankAddressLine2\": \"\",\n        \"bankStreetName\": \"Jodenbreestraat 96\",\n        \"bankTown\": \"Amsterdam\",\n        \"bankPostCode\": \"1011NS\",\n        \"bankCountrySubDivision\": \"North Holland\",\n        \"bankCountry\": \"NL\"\n      }],\n      \"accessContextScope\": \"LE\",\n      \"activeStatus\": \"PENDING_APPROVAL\"\n    }]\n  }]\n}, {\n  urlPattern: \"/client-api/v2/contacts/{contactId}\",\n  method: \"PUT\",\n  responses: [{\n    status: 202,\n    body: {\n      \"status\": \"REQUEST_ACCEPTED\"\n    }\n  }, {\n    status: 409,\n    body: {\n      \"key\": \"ApprovalAlreadyExistForContact\",\n      \"message\": \"Approval request already exist with this contact.\"\n    }\n  }]\n}]);\n\nclass IbanRestrictionsHttpService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new ContactManagerConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getIbanRestriction(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _code = requestParameters[\"code\"];\n\n    if (_code === null || _code === undefined) {\n      throw new Error('Required parameter code was null or undefined when calling getIbanRestriction.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/iban-restrictions/countries/${encodeURIComponent(String(_code))}`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getIbanRestrictionUrl(requestParameters) {\n    const _code = requestParameters[\"code\"];\n\n    if (_code === null || _code === undefined) {\n      throw new Error('Required parameter code was null or undefined when calling getIbanRestriction.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/iban-restrictions/countries/${encodeURIComponent(String(_code))}`;\n  }\n\n  getIbanRestrictions(observe = 'body', reportProgress = false, options) {\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/iban-restrictions/countries`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getIbanRestrictionsUrl() {\n    return `${this.configuration.basePath}/client-api/v2/iban-restrictions/countries`;\n  }\n\n}\n\nIbanRestrictionsHttpService.ɵfac = function IbanRestrictionsHttpService_Factory(t) {\n  return new (t || IbanRestrictionsHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(CONTACT_MANAGER_BASE_PATH, 8), i0.ɵɵinject(ContactManagerConfiguration, 8));\n};\n\nIbanRestrictionsHttpService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: IbanRestrictionsHttpService,\n  factory: IbanRestrictionsHttpService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IbanRestrictionsHttpService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CONTACT_MANAGER_BASE_PATH]\n      }]\n    }, {\n      type: ContactManagerConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst IbanRestrictionsHttpServiceGetIbanRestrictionMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/iban-restrictions/countries/{code}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"ibanLength\": 18\n    }\n  }]\n}]);\nconst IbanRestrictionsHttpServiceGetIbanRestrictionsMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/iban-restrictions/countries\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"countryCode\": \"NL\",\n      \"ibanLength\": 18\n    }, {\n      \"countryCode\": \"TR\",\n      \"ibanLength\": 26\n    }]\n  }]\n}]);\nconst IbanRestrictionsHttpServiceMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/iban-restrictions/countries/{code}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"ibanLength\": 18\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/iban-restrictions/countries\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"countryCode\": \"NL\",\n      \"ibanLength\": 18\n    }, {\n      \"countryCode\": \"TR\",\n      \"ibanLength\": 26\n    }]\n  }]\n}]);\n\nclass SupportedCountriesHttpService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new ContactManagerConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getSupportedCountries(observe = 'body', reportProgress = false, options) {\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/supported-countries`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getSupportedCountriesUrl() {\n    return `${this.configuration.basePath}/client-api/v2/supported-countries`;\n  }\n\n}\n\nSupportedCountriesHttpService.ɵfac = function SupportedCountriesHttpService_Factory(t) {\n  return new (t || SupportedCountriesHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(CONTACT_MANAGER_BASE_PATH, 8), i0.ɵɵinject(ContactManagerConfiguration, 8));\n};\n\nSupportedCountriesHttpService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SupportedCountriesHttpService,\n  factory: SupportedCountriesHttpService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SupportedCountriesHttpService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CONTACT_MANAGER_BASE_PATH]\n      }]\n    }, {\n      type: ContactManagerConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst SupportedCountriesHttpServiceGetSupportedCountriesMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/supported-countries\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [\"AR\", \"AU\", \"AT\", \"BE\", \"BR\", \"CA\", \"CN\", \"CO\", \"HR\", \"CZ\", \"DK\", \"EC\", \"EG\", \"ET\", \"FR\", \"DE\", \"GR\", \"HN\", \"HK\", \"HU\", \"IN\", \"ID\", \"IE\", \"IT\", \"JM\", \"MY\", \"MX\", \"MA\", \"NA\", \"NL\", \"NZ\", \"NO\", \"PL\", \"PT\", \"RU\", \"SN\"]\n  }]\n}]);\nconst SupportedCountriesHttpServiceMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/supported-countries\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [\"AR\", \"AU\", \"AT\", \"BE\", \"BR\", \"CA\", \"CN\", \"CO\", \"HR\", \"CZ\", \"DK\", \"EC\", \"EG\", \"ET\", \"FR\", \"DE\", \"GR\", \"HN\", \"HK\", \"HU\", \"IN\", \"ID\", \"IE\", \"IT\", \"JM\", \"MY\", \"MX\", \"MA\", \"NA\", \"NL\", \"NZ\", \"NO\", \"PL\", \"PT\", \"RU\", \"SN\"]\n  }]\n}]);\nexport { AccessContextScope, AccountIdentifierType, ActiveContactStatus, ApprovalRequestAction, ApprovalRequestIndicator, ApprovalRequestStatus, ApprovalResultStatus, ApprovalSort, ApprovalStatus, ApprovalsHttpService, ApprovalsHttpServiceDeleteApprovalRequestMocksProvider, ApprovalsHttpServiceGetApprovalsCreatedByMeMocksProvider, ApprovalsHttpServiceGetApprovalsMocksProvider, ApprovalsHttpServiceMocksProvider, ApprovalsHttpServicePostApprovalRecordMocksProvider, ApprovalsHttpServicePostRejectionRecordMocksProvider, COLLECTION_FORMATS, CONFIG_TOKEN, CONTACT_MANAGER_BASE_PATH, ContactManagerApiModule, ContactManagerConfiguration, ContactsHttpService, ContactsHttpServiceDeleteContactMocksProvider, ContactsHttpServiceGetContactMocksProvider, ContactsHttpServiceGetContactsMocksProvider, ContactsHttpServiceMocksProvider, ContactsHttpServicePostContactsFilterMocksProvider, ContactsHttpServicePostContactsMocksProvider, ContactsHttpServicePutContactMocksProvider, IbanRestrictionsHttpService, IbanRestrictionsHttpServiceGetIbanRestrictionMocksProvider, IbanRestrictionsHttpServiceGetIbanRestrictionsMocksProvider, IbanRestrictionsHttpServiceMocksProvider, RecordStatus, SortDirection, SupportedCountriesHttpService, SupportedCountriesHttpServiceGetSupportedCountriesMocksProvider, SupportedCountriesHttpServiceMocksProvider };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/contact-manager-http-ang/fesm2015/backbase-contact-manager-http-ang.js"],"names":["i0","InjectionToken","NgModule","Optional","SkipSelf","Injectable","Inject","i1","HttpHeaders","HttpParams","i2","createMocks","AccessContextScope","SA","LE","USER","AccountIdentifierType","IBAN","ACCOUNTNUMBER","PHONENUMBER","EMAIL","ActiveContactStatus","ACTIVE","PENDINGAPPROVAL","ApprovalRequestAction","CREATE","UPDATE","DELETE","ApprovalRequestIndicator","APPROVALREQUIRED","REQUESTACCEPTED","ApprovalRequestStatus","ENTERED","REJECTED","ApprovalResultStatus","PENDING","APPROVED","ApprovalSort","STATUS","NAME","ACTION","CREATIONTIME","ApprovalStatus","CANCELLED","RecordStatus","SortDirection","ASC","DESC","CONTACT_MANAGER_BASE_PATH","COLLECTION_FORMATS","ContactManagerConfiguration","constructor","configurationParameters","apiKeys","username","password","accessToken","basePath","withCredentials","encoder","credentials","selectHeaderContentType","contentTypes","length","undefined","type","find","x","isJsonMime","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","lookupCredential","key","value","CONFIG_TOKEN","ContactManagerApiModule","parentModule","http","dataModulesManager","config","Error","setModuleConfig","apiRoot","servicePath","headers","forRoot","configurationFactory","ngModule","providers","provide","useFactory","ɵfac","HttpClient","DataModulesManager","ɵmod","ɵinj","args","imports","declarations","exports","decorators","CustomHttpParameterCodec","encodeKey","k","encodeURIComponent","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","ApprovalsHttpService","httpClient","configuration","defaultHeaders","addToHttpParams","httpParams","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","append","toISOString","substr","Object","keys","deleteApprovalRequest","requestParameters","observe","reportProgress","options","_requestId","httpHeaderAcceptSelected","httpHeaderAccept","httpHeaderAccepts","set","responseType","startsWith","delete","String","deleteApprovalRequestUrl","getApprovals","_from","_size","_query","_accountIdentifierTypes","_sort","_direction","queryParameters","element","get","params","getApprovalsUrl","queryString","toString","getApprovalsCreatedByMe","getApprovalsCreatedByMeUrl","postApprovalRecord","_approvalPostRequestBody","consumes","httpContentTypeSelected","post","postApprovalRecordUrl","postRejectionRecord","_rejectionPostRequestBody","postRejectionRecordUrl","ɵprov","providedIn","ApprovalsHttpServiceDeleteApprovalRequestMocksProvider","urlPattern","method","responses","status","body","ApprovalsHttpServiceGetApprovalsMocksProvider","ApprovalsHttpServiceGetApprovalsCreatedByMeMocksProvider","ApprovalsHttpServicePostApprovalRecordMocksProvider","ApprovalsHttpServicePostRejectionRecordMocksProvider","ApprovalsHttpServiceMocksProvider","ContactsHttpService","deleteContact","_contactId","deleteContactUrl","getContact","getContactUrl","getContacts","_targetSaId","_businessFunctions","_arrangementId","_privilege","getContactsUrl","postContacts","_contactsPostRequestBody","postContactsUrl","postContactsFilter","_contactsPostFilterRequestBody","postContactsFilterUrl","putContact","_contactPutRequestBody","put","putContactUrl","ContactsHttpServiceDeleteContactMocksProvider","ContactsHttpServiceGetContactMocksProvider","ContactsHttpServiceGetContactsMocksProvider","ContactsHttpServicePostContactsMocksProvider","ContactsHttpServicePostContactsFilterMocksProvider","ContactsHttpServicePutContactMocksProvider","ContactsHttpServiceMocksProvider","IbanRestrictionsHttpService","getIbanRestriction","_code","getIbanRestrictionUrl","getIbanRestrictions","getIbanRestrictionsUrl","IbanRestrictionsHttpServiceGetIbanRestrictionMocksProvider","IbanRestrictionsHttpServiceGetIbanRestrictionsMocksProvider","IbanRestrictionsHttpServiceMocksProvider","SupportedCountriesHttpService","getSupportedCountries","getSupportedCountriesUrl","SupportedCountriesHttpServiceGetSupportedCountriesMocksProvider","SupportedCountriesHttpServiceMocksProvider"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i2 from '@backbase/foundation-ang/data-http';\nimport { createMocks } from '@backbase/foundation-ang/data-http';\n\nconst AccessContextScope = {\n    SA: 'SA',\n    LE: 'LE',\n    USER: 'USER'\n};\n\nconst AccountIdentifierType = {\n    IBAN: 'IBAN',\n    ACCOUNTNUMBER: 'ACCOUNT_NUMBER',\n    PHONENUMBER: 'PHONE_NUMBER',\n    EMAIL: 'EMAIL'\n};\n\nconst ActiveContactStatus = {\n    ACTIVE: 'ACTIVE',\n    PENDINGAPPROVAL: 'PENDING_APPROVAL'\n};\n\nconst ApprovalRequestAction = {\n    CREATE: 'CREATE',\n    UPDATE: 'UPDATE',\n    DELETE: 'DELETE'\n};\n\nconst ApprovalRequestIndicator = {\n    APPROVALREQUIRED: 'APPROVAL_REQUIRED',\n    REQUESTACCEPTED: 'REQUEST_ACCEPTED'\n};\n\nconst ApprovalRequestStatus = {\n    ENTERED: 'ENTERED',\n    REJECTED: 'REJECTED'\n};\n\nconst ApprovalResultStatus = {\n    PENDING: 'PENDING',\n    APPROVED: 'APPROVED',\n    REJECTED: 'REJECTED'\n};\n\nconst ApprovalSort = {\n    STATUS: 'STATUS',\n    NAME: 'NAME',\n    ACTION: 'ACTION',\n    CREATIONTIME: 'CREATION_TIME'\n};\n\nconst ApprovalStatus = {\n    PENDING: 'PENDING',\n    APPROVED: 'APPROVED',\n    REJECTED: 'REJECTED',\n    CANCELLED: 'CANCELLED'\n};\n\nconst RecordStatus = {\n    APPROVED: 'APPROVED',\n    REJECTED: 'REJECTED'\n};\n\nconst SortDirection = {\n    ASC: 'ASC',\n    DESC: 'DESC'\n};\n\nconst CONTACT_MANAGER_BASE_PATH = new InjectionToken('CONTACT_MANAGER_BASE_PATH');\nconst COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n};\n\nclass ContactManagerConfiguration {\n    constructor(configurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n    selectHeaderContentType(contentTypes) {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n        const type = contentTypes.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n    selectHeaderAccept(accepts) {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n        const type = accepts.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n    isJsonMime(mime) {\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n    lookupCredential(key) {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\nconst CONFIG_TOKEN = new InjectionToken('api-data-module ContactManagerConfiguration');\n\nclass ContactManagerApiModule {\n    constructor(parentModule, http, dataModulesManager, config) {\n        if (parentModule) {\n            throw new Error('ContactManagerApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n                'See also https://github.com/angular/angular/issues/20575');\n        }\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n    static forRoot(configurationFactory) {\n        return {\n            ngModule: ContactManagerApiModule,\n            providers: [{ provide: ContactManagerConfiguration, useFactory: configurationFactory }]\n        };\n    }\n}\nContactManagerApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ContactManagerApiModule, deps: [{ token: ContactManagerApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: ContactManagerConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });\nContactManagerApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ContactManagerApiModule });\nContactManagerApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ContactManagerApiModule, providers: [], imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ContactManagerApiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [],\n                    declarations: [],\n                    exports: [],\n                    providers: []\n                }]\n        }], ctorParameters: function () { return [{ type: ContactManagerApiModule, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DataModulesManager, decorators: [{\n                    type: Optional\n                }] }, { type: ContactManagerConfiguration }]; } });\n\nclass CustomHttpParameterCodec {\n    encodeKey(k) {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v) {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k) {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v) {\n        return decodeURIComponent(v);\n    }\n}\n\nclass ApprovalsHttpService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new ContactManagerConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    deleteApprovalRequest(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _requestId = requestParameters[\"requestId\"];\n        if (_requestId === null || _requestId === undefined) {\n            throw new Error('Required parameter requestId was null or undefined when calling deleteApprovalRequest.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    deleteApprovalRequestUrl(requestParameters) {\n        const _requestId = requestParameters[\"requestId\"];\n        if (_requestId === null || _requestId === undefined) {\n            throw new Error('Required parameter requestId was null or undefined when calling deleteApprovalRequest.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}`;\n    }\n    getApprovals(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _query = requestParameters[\"query\"];\n        const _accountIdentifierTypes = requestParameters[\"accountIdentifierTypes\"];\n        const _sort = requestParameters[\"sort\"];\n        const _direction = requestParameters[\"direction\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_from !== undefined && _from !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n        }\n        if (_query !== undefined && _query !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');\n        }\n        if (_accountIdentifierTypes) {\n            _accountIdentifierTypes.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');\n            });\n        }\n        if (_sort !== undefined && _sort !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');\n        }\n        if (_direction !== undefined && _direction !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/approvals`, {\n            params: queryParameters,\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getApprovalsUrl(requestParameters) {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _query = requestParameters[\"query\"];\n        const _accountIdentifierTypes = requestParameters[\"accountIdentifierTypes\"];\n        const _sort = requestParameters[\"sort\"];\n        const _direction = requestParameters[\"direction\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_from !== undefined && _from !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n        }\n        if (_query !== undefined && _query !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');\n        }\n        if (_accountIdentifierTypes) {\n            _accountIdentifierTypes.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');\n            });\n        }\n        if (_sort !== undefined && _sort !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');\n        }\n        if (_direction !== undefined && _direction !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v2/approvals${queryString ? `?${queryString}` : ''}`;\n    }\n    getApprovalsCreatedByMe(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _query = requestParameters[\"query\"];\n        const _accountIdentifierTypes = requestParameters[\"accountIdentifierTypes\"];\n        const _sort = requestParameters[\"sort\"];\n        const _direction = requestParameters[\"direction\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_from !== undefined && _from !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n        }\n        if (_query !== undefined && _query !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');\n        }\n        if (_accountIdentifierTypes) {\n            _accountIdentifierTypes.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');\n            });\n        }\n        if (_sort !== undefined && _sort !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');\n        }\n        if (_direction !== undefined && _direction !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/approvals/me`, {\n            params: queryParameters,\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getApprovalsCreatedByMeUrl(requestParameters) {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _query = requestParameters[\"query\"];\n        const _accountIdentifierTypes = requestParameters[\"accountIdentifierTypes\"];\n        const _sort = requestParameters[\"sort\"];\n        const _direction = requestParameters[\"direction\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_from !== undefined && _from !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n        }\n        if (_query !== undefined && _query !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');\n        }\n        if (_accountIdentifierTypes) {\n            _accountIdentifierTypes.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');\n            });\n        }\n        if (_sort !== undefined && _sort !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _sort, 'sort');\n        }\n        if (_direction !== undefined && _direction !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v2/approvals/me${queryString ? `?${queryString}` : ''}`;\n    }\n    postApprovalRecord(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _requestId = requestParameters[\"requestId\"];\n        if (_requestId === null || _requestId === undefined) {\n            throw new Error('Required parameter requestId was null or undefined when calling postApprovalRecord.');\n        }\n        const _approvalPostRequestBody = requestParameters[\"approvalPostRequestBody\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/approvalRecords`, _approvalPostRequestBody, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    postApprovalRecordUrl(requestParameters) {\n        const _requestId = requestParameters[\"requestId\"];\n        if (_requestId === null || _requestId === undefined) {\n            throw new Error('Required parameter requestId was null or undefined when calling postApprovalRecord.');\n        }\n        const _approvalPostRequestBody = requestParameters[\"approvalPostRequestBody\"];\n        return `${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/approvalRecords`;\n    }\n    postRejectionRecord(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _requestId = requestParameters[\"requestId\"];\n        if (_requestId === null || _requestId === undefined) {\n            throw new Error('Required parameter requestId was null or undefined when calling postRejectionRecord.');\n        }\n        const _rejectionPostRequestBody = requestParameters[\"rejectionPostRequestBody\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/rejectionRecords`, _rejectionPostRequestBody, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    postRejectionRecordUrl(requestParameters) {\n        const _requestId = requestParameters[\"requestId\"];\n        if (_requestId === null || _requestId === undefined) {\n            throw new Error('Required parameter requestId was null or undefined when calling postRejectionRecord.');\n        }\n        const _rejectionPostRequestBody = requestParameters[\"rejectionPostRequestBody\"];\n        return `${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_requestId))}/rejectionRecords`;\n    }\n}\nApprovalsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ApprovalsHttpService, deps: [{ token: i1.HttpClient }, { token: CONTACT_MANAGER_BASE_PATH, optional: true }, { token: ContactManagerConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nApprovalsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ApprovalsHttpService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ApprovalsHttpService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CONTACT_MANAGER_BASE_PATH]\n                }] }, { type: ContactManagerConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst ApprovalsHttpServiceDeleteApprovalRequestMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/approvals/{requestId}\",\n        method: \"DELETE\",\n        responses: [\n            {\n                status: 204,\n                body: \"\"\n            },\n        ]\n    }]);\nconst ApprovalsHttpServiceGetApprovalsMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/approvals\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"0855e686-d31e-4216-b3dd-5d66161d5312\",\n                        \"creatorBbId\": \"john@example.com\",\n                        \"data\": {\n                            \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n                            \"name\": \"John Doe\",\n                            \"alias\": \"John\",\n                            \"category\": \"Employee\",\n                            \"contactPerson\": \"Jane Doe\",\n                            \"phoneNumber\": \"055512345678\",\n                            \"emailId\": \"john@example.com\",\n                            \"addressLine1\": \"Backbase enterprise\",\n                            \"addressLine2\": \"\",\n                            \"streetName\": \"Jacob Bontiusplaats 9\",\n                            \"town\": \"Amsterdam\",\n                            \"postCode\": \"1018 LL\",\n                            \"countrySubDivision\": \"North Holland\",\n                            \"country\": \"NL\",\n                            \"accounts\": [{\n                                    \"name\": \"Jane Doe\",\n                                    \"alias\": \"Jane\",\n                                    \"accountType\": \"SAVINGS\",\n                                    \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                    \"bankName\": \"Test Bank\",\n                                    \"bankAddressLine1\": \"QA Bank\",\n                                    \"bankAddressLine2\": \"\",\n                                    \"bankStreetName\": \"Jodenbreestraat 96\",\n                                    \"bankTown\": \"Amsterdam\",\n                                    \"bankPostCode\": \"1011NS\",\n                                    \"bankCountrySubDivision\": \"North Holland\",\n                                    \"bankCountry\": \"NL\",\n                                    \"accountHolderAddressLine1\": \"\",\n                                    \"accountHolderAddressLine2\": \"\",\n                                    \"accountHolderStreetName\": \"Woestduinstraat 114-3\",\n                                    \"accountHolderTown\": \"Amsterdam\",\n                                    \"accountHolderPostCode\": \"1059 SP\",\n                                    \"accountHolderCountrySubDivision\": \"North Holland\",\n                                    \"accountHolderCountry\": \"NL\"\n                                }],\n                            \"accessContextScope\": \"SA\"\n                        },\n                        \"creationTime\": \"2017-05-12T14:33:13.452Z\",\n                        \"action\": \"CREATE\",\n                        \"status\": \"ENTERED\"\n                    }, {\n                        \"id\": \"55ce2962-7c04-41e2-9bb9-84208342f321\",\n                        \"creatorBbId\": \"john@example.com\",\n                        \"data\": {\n                            \"id\": \"aa7cea7f-38ed-4c09-ab38-b3903f1e40ca\",\n                            \"name\": \"Judy Doe\",\n                            \"alias\": \"Judy\",\n                            \"category\": \"VP\",\n                            \"contactPerson\": \"Jane Doe\",\n                            \"phoneNumber\": \"055512345678\",\n                            \"emailId\": \"judy@example.com\",\n                            \"addressLine1\": \"Backbase enterprise\",\n                            \"addressLine2\": \"\",\n                            \"streetName\": \"Jacob Bontiusplaats 9\",\n                            \"town\": \"Amsterdam\",\n                            \"postCode\": \"1018 LL\",\n                            \"countrySubDivision\": \"North Holland\",\n                            \"country\": \"NL\",\n                            \"accounts\": [{\n                                    \"name\": \"Jane Doe\",\n                                    \"alias\": \"Jane\",\n                                    \"accountType\": \"SAVINGS\",\n                                    \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                    \"bankName\": \"Test Bank\",\n                                    \"bankAddressLine1\": \"Test Bank Co\",\n                                    \"bankAddressLine2\": \"\",\n                                    \"bankStreetName\": \"Jodenbreestraat 96\",\n                                    \"bankTown\": \"Amsterdam\",\n                                    \"bankPostCode\": \"1011NS\",\n                                    \"bankCountrySubDivision\": \"North Holland\",\n                                    \"bankCountry\": \"NL\"\n                                }],\n                            \"accessContextScope\": \"LE\"\n                        },\n                        \"creationTime\": \"2018-05-12T14:33:13.452Z\",\n                        \"action\": \"UPDATE\",\n                        \"status\": \"ENTERED\"\n                    }, {\n                        \"id\": \"cf40d556-4634-4e96-8976-7fb3764444e9\",\n                        \"creatorBbId\": \"john@example.com\",\n                        \"data\": {\n                            \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n                            \"name\": \"Jane Doe\",\n                            \"alias\": \"Jane\",\n                            \"category\": \"Manager\",\n                            \"contactPerson\": \"John Doe\",\n                            \"phoneNumber\": \"055512345678\",\n                            \"emailId\": \"jane@example.com\",\n                            \"addressLine1\": \"Backbase enterprise\",\n                            \"addressLine2\": \"\",\n                            \"streetName\": \"Jacob Bontiusplaats 9\",\n                            \"town\": \"Amsterdam\",\n                            \"postCode\": \"1018 LL\",\n                            \"countrySubDivision\": \"North Holland\",\n                            \"country\": \"NL\",\n                            \"accounts\": [{\n                                    \"name\": \"Jane Doe\",\n                                    \"alias\": \"Jane\",\n                                    \"accountType\": \"SAVINGS\",\n                                    \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                    \"bankName\": \"Test Bank\",\n                                    \"bankAddressLine1\": \"Test Bank Co\",\n                                    \"bankAddressLine2\": \"\",\n                                    \"bankStreetName\": \"Jodenbreestraat 96\",\n                                    \"bankTown\": \"Amsterdam\",\n                                    \"bankPostCode\": \"1011NS\",\n                                    \"bankCountrySubDivision\": \"North Holland\",\n                                    \"bankCountry\": \"NL\"\n                                }],\n                            \"accessContextScope\": \"LE\"\n                        },\n                        \"creationTime\": \"2018-05-21T14:33:13.452Z\",\n                        \"action\": \"DELETE\",\n                        \"status\": \"ENTERED\"\n                    }]\n            },\n        ]\n    }]);\nconst ApprovalsHttpServiceGetApprovalsCreatedByMeMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/approvals/me\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"5edffbc2-5dc0-11e8-9c2d-fa7ae01bbebc\",\n                        \"creatorBbId\": \"john@example.com\",\n                        \"creationTime\": \"2017-05-12T14:33:13Z\",\n                        \"action\": \"CREATE\",\n                        \"status\": \"ENTERED\",\n                        \"data\": {\n                            \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n                            \"name\": \"John Doe\",\n                            \"alias\": \"John\",\n                            \"category\": \"Employee\",\n                            \"contactPerson\": \"Jane Doe\",\n                            \"phoneNumber\": \"055512345678\",\n                            \"emailId\": \"john@example.com\",\n                            \"addressLine1\": \"Backbase enterprise\",\n                            \"addressLine2\": \"\",\n                            \"streetName\": \"Jacob Bontiusplaats 9\",\n                            \"town\": \"Amsterdam\",\n                            \"postCode\": \"1018 LL\",\n                            \"countrySubDivision\": \"North Holland\",\n                            \"country\": \"NL\",\n                            \"accounts\": [{\n                                    \"name\": \"Jane Doe\",\n                                    \"alias\": \"Jane\",\n                                    \"accountType\": \"SAVINGS\",\n                                    \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                    \"bankName\": \"Test Bank\",\n                                    \"bankAddressLine1\": \"Test Bank Co\",\n                                    \"bankAddressLine2\": \"\",\n                                    \"bankStreetName\": \"Jodenbreestraat 96\",\n                                    \"bankTown\": \"Amsterdam\",\n                                    \"bankPostCode\": \"1011NS\",\n                                    \"bankCountrySubDivision\": \"North Holland\",\n                                    \"bankCountry\": \"NL\"\n                                }],\n                            \"accessContextScope\": \"USER\"\n                        }\n                    }, {\n                        \"id\": \"55ce2962-7c04-41e2-9bb9-84208342f321\",\n                        \"creatorBbId\": \"john@example.com\",\n                        \"creationTime\": \"2018-05-12T14:33:13.452Z\",\n                        \"action\": \"UPDATE\",\n                        \"status\": \"REJECTED\",\n                        \"data\": {\n                            \"id\": \"aa7cea7f-38ed-4c09-ab38-b3903f1e40ca\",\n                            \"name\": \"Judy Doe\",\n                            \"alias\": \"Judy\",\n                            \"category\": \"VP\",\n                            \"contactPerson\": \"Jane Doe\",\n                            \"phoneNumber\": \"055512345678\",\n                            \"emailId\": \"judy@example.com\",\n                            \"addressLine1\": \"Backbase enterprise\",\n                            \"addressLine2\": \"\",\n                            \"streetName\": \"Jacob Bontiusplaats 9\",\n                            \"town\": \"Amsterdam\",\n                            \"postCode\": \"1018 LL\",\n                            \"countrySubDivision\": \"North Holland\",\n                            \"country\": \"NL\",\n                            \"accounts\": [{\n                                    \"name\": \"Jane Doe\",\n                                    \"alias\": \"Jane\",\n                                    \"accountType\": \"SAVINGS\",\n                                    \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                    \"bankName\": \"Test Bank\",\n                                    \"bankAddressLine1\": \"Test Bank Co\",\n                                    \"bankAddressLine2\": \"\",\n                                    \"bankStreetName\": \"Jodenbreestraat 96\",\n                                    \"bankTown\": \"Amsterdam\",\n                                    \"bankPostCode\": \"1011NS\",\n                                    \"bankCountrySubDivision\": \"North Holland\",\n                                    \"bankCountry\": \"NL\"\n                                }],\n                            \"accessContextScope\": \"LE\"\n                        }\n                    }, {\n                        \"id\": \"cf40d556-4634-4e96-8976-7fb3764444e9\",\n                        \"creatorBbId\": \"john@example.com\",\n                        \"creationTime\": \"2018-05-21T14:33:13.452Z\",\n                        \"action\": \"DELETE\",\n                        \"status\": \"ENTERED\",\n                        \"data\": {\n                            \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n                            \"name\": \"Jane Doe\",\n                            \"alias\": \"Jane\",\n                            \"category\": \"Manager\",\n                            \"contactPerson\": \"John Doe\",\n                            \"phoneNumber\": \"055512345678\",\n                            \"emailId\": \"jane@example.com\",\n                            \"addressLine1\": \"Backbase enterprise\",\n                            \"addressLine2\": \"\",\n                            \"streetName\": \"Jacob Bontiusplaats 9\",\n                            \"town\": \"Amsterdam\",\n                            \"postCode\": \"1018 LL\",\n                            \"countrySubDivision\": \"North Holland\",\n                            \"country\": \"NL\",\n                            \"accounts\": [{\n                                    \"name\": \"Jane Doe\",\n                                    \"alias\": \"Jane\",\n                                    \"accountType\": \"SAVINGS\",\n                                    \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                    \"bankName\": \"Test Bank\",\n                                    \"bankAddressLine1\": \"Test Bank Co\",\n                                    \"bankAddressLine2\": \"\",\n                                    \"bankStreetName\": \"Jodenbreestraat 96\",\n                                    \"bankTown\": \"Amsterdam\",\n                                    \"bankPostCode\": \"1011NS\",\n                                    \"bankCountrySubDivision\": \"North Holland\",\n                                    \"bankCountry\": \"NL\"\n                                }],\n                            \"accessContextScope\": \"LE\"\n                        }\n                    }]\n            },\n        ]\n    }]);\nconst ApprovalsHttpServicePostApprovalRecordMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/approvals/{requestId}/approvalRecords\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 202,\n                body: {\n                    \"status\": \"PENDING\"\n                }\n            },\n            {\n                status: 201,\n                body: {\n                    \"status\": \"APPROVED\"\n                }\n            },\n            {\n                status: 409,\n                body: {\n                    \"key\": \"ContactAlreadyCreated\",\n                    \"message\": \"Contact has already been created, please refresh\"\n                }\n            },\n            {\n                status: 409,\n                body: {\n                    \"key\": \"ContactAlreadyUpdated\",\n                    \"message\": \"Contact has already been updated, please refresh\"\n                }\n            },\n            {\n                status: 409,\n                body: {\n                    \"key\": \"ContactAlreadyDeleted\",\n                    \"message\": \"Contact has already been deleted, please refresh\"\n                }\n            },\n        ]\n    }]);\nconst ApprovalsHttpServicePostRejectionRecordMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/approvals/{requestId}/rejectionRecords\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 201,\n                body: \"\"\n            },\n            {\n                status: 409,\n                body: {\n                    \"key\": \"ContactAlreadyRejected\",\n                    \"message\": \"Contact request has already been rejected, please refresh\"\n                }\n            },\n        ]\n    }]);\nconst ApprovalsHttpServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/client-api/v2/approvals/{requestId}\",\n        method: \"DELETE\",\n        responses: [\n            {\n                status: 204,\n                body: \"\"\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/approvals\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"0855e686-d31e-4216-b3dd-5d66161d5312\",\n                        \"creatorBbId\": \"john@example.com\",\n                        \"data\": {\n                            \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n                            \"name\": \"John Doe\",\n                            \"alias\": \"John\",\n                            \"category\": \"Employee\",\n                            \"contactPerson\": \"Jane Doe\",\n                            \"phoneNumber\": \"055512345678\",\n                            \"emailId\": \"john@example.com\",\n                            \"addressLine1\": \"Backbase enterprise\",\n                            \"addressLine2\": \"\",\n                            \"streetName\": \"Jacob Bontiusplaats 9\",\n                            \"town\": \"Amsterdam\",\n                            \"postCode\": \"1018 LL\",\n                            \"countrySubDivision\": \"North Holland\",\n                            \"country\": \"NL\",\n                            \"accounts\": [{\n                                    \"name\": \"Jane Doe\",\n                                    \"alias\": \"Jane\",\n                                    \"accountType\": \"SAVINGS\",\n                                    \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                    \"bankName\": \"Test Bank\",\n                                    \"bankAddressLine1\": \"QA Bank\",\n                                    \"bankAddressLine2\": \"\",\n                                    \"bankStreetName\": \"Jodenbreestraat 96\",\n                                    \"bankTown\": \"Amsterdam\",\n                                    \"bankPostCode\": \"1011NS\",\n                                    \"bankCountrySubDivision\": \"North Holland\",\n                                    \"bankCountry\": \"NL\",\n                                    \"accountHolderAddressLine1\": \"\",\n                                    \"accountHolderAddressLine2\": \"\",\n                                    \"accountHolderStreetName\": \"Woestduinstraat 114-3\",\n                                    \"accountHolderTown\": \"Amsterdam\",\n                                    \"accountHolderPostCode\": \"1059 SP\",\n                                    \"accountHolderCountrySubDivision\": \"North Holland\",\n                                    \"accountHolderCountry\": \"NL\"\n                                }],\n                            \"accessContextScope\": \"SA\"\n                        },\n                        \"creationTime\": \"2017-05-12T14:33:13.452Z\",\n                        \"action\": \"CREATE\",\n                        \"status\": \"ENTERED\"\n                    }, {\n                        \"id\": \"55ce2962-7c04-41e2-9bb9-84208342f321\",\n                        \"creatorBbId\": \"john@example.com\",\n                        \"data\": {\n                            \"id\": \"aa7cea7f-38ed-4c09-ab38-b3903f1e40ca\",\n                            \"name\": \"Judy Doe\",\n                            \"alias\": \"Judy\",\n                            \"category\": \"VP\",\n                            \"contactPerson\": \"Jane Doe\",\n                            \"phoneNumber\": \"055512345678\",\n                            \"emailId\": \"judy@example.com\",\n                            \"addressLine1\": \"Backbase enterprise\",\n                            \"addressLine2\": \"\",\n                            \"streetName\": \"Jacob Bontiusplaats 9\",\n                            \"town\": \"Amsterdam\",\n                            \"postCode\": \"1018 LL\",\n                            \"countrySubDivision\": \"North Holland\",\n                            \"country\": \"NL\",\n                            \"accounts\": [{\n                                    \"name\": \"Jane Doe\",\n                                    \"alias\": \"Jane\",\n                                    \"accountType\": \"SAVINGS\",\n                                    \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                    \"bankName\": \"Test Bank\",\n                                    \"bankAddressLine1\": \"Test Bank Co\",\n                                    \"bankAddressLine2\": \"\",\n                                    \"bankStreetName\": \"Jodenbreestraat 96\",\n                                    \"bankTown\": \"Amsterdam\",\n                                    \"bankPostCode\": \"1011NS\",\n                                    \"bankCountrySubDivision\": \"North Holland\",\n                                    \"bankCountry\": \"NL\"\n                                }],\n                            \"accessContextScope\": \"LE\"\n                        },\n                        \"creationTime\": \"2018-05-12T14:33:13.452Z\",\n                        \"action\": \"UPDATE\",\n                        \"status\": \"ENTERED\"\n                    }, {\n                        \"id\": \"cf40d556-4634-4e96-8976-7fb3764444e9\",\n                        \"creatorBbId\": \"john@example.com\",\n                        \"data\": {\n                            \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n                            \"name\": \"Jane Doe\",\n                            \"alias\": \"Jane\",\n                            \"category\": \"Manager\",\n                            \"contactPerson\": \"John Doe\",\n                            \"phoneNumber\": \"055512345678\",\n                            \"emailId\": \"jane@example.com\",\n                            \"addressLine1\": \"Backbase enterprise\",\n                            \"addressLine2\": \"\",\n                            \"streetName\": \"Jacob Bontiusplaats 9\",\n                            \"town\": \"Amsterdam\",\n                            \"postCode\": \"1018 LL\",\n                            \"countrySubDivision\": \"North Holland\",\n                            \"country\": \"NL\",\n                            \"accounts\": [{\n                                    \"name\": \"Jane Doe\",\n                                    \"alias\": \"Jane\",\n                                    \"accountType\": \"SAVINGS\",\n                                    \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                    \"bankName\": \"Test Bank\",\n                                    \"bankAddressLine1\": \"Test Bank Co\",\n                                    \"bankAddressLine2\": \"\",\n                                    \"bankStreetName\": \"Jodenbreestraat 96\",\n                                    \"bankTown\": \"Amsterdam\",\n                                    \"bankPostCode\": \"1011NS\",\n                                    \"bankCountrySubDivision\": \"North Holland\",\n                                    \"bankCountry\": \"NL\"\n                                }],\n                            \"accessContextScope\": \"LE\"\n                        },\n                        \"creationTime\": \"2018-05-21T14:33:13.452Z\",\n                        \"action\": \"DELETE\",\n                        \"status\": \"ENTERED\"\n                    }]\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/approvals/me\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"5edffbc2-5dc0-11e8-9c2d-fa7ae01bbebc\",\n                        \"creatorBbId\": \"john@example.com\",\n                        \"creationTime\": \"2017-05-12T14:33:13Z\",\n                        \"action\": \"CREATE\",\n                        \"status\": \"ENTERED\",\n                        \"data\": {\n                            \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n                            \"name\": \"John Doe\",\n                            \"alias\": \"John\",\n                            \"category\": \"Employee\",\n                            \"contactPerson\": \"Jane Doe\",\n                            \"phoneNumber\": \"055512345678\",\n                            \"emailId\": \"john@example.com\",\n                            \"addressLine1\": \"Backbase enterprise\",\n                            \"addressLine2\": \"\",\n                            \"streetName\": \"Jacob Bontiusplaats 9\",\n                            \"town\": \"Amsterdam\",\n                            \"postCode\": \"1018 LL\",\n                            \"countrySubDivision\": \"North Holland\",\n                            \"country\": \"NL\",\n                            \"accounts\": [{\n                                    \"name\": \"Jane Doe\",\n                                    \"alias\": \"Jane\",\n                                    \"accountType\": \"SAVINGS\",\n                                    \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                    \"bankName\": \"Test Bank\",\n                                    \"bankAddressLine1\": \"Test Bank Co\",\n                                    \"bankAddressLine2\": \"\",\n                                    \"bankStreetName\": \"Jodenbreestraat 96\",\n                                    \"bankTown\": \"Amsterdam\",\n                                    \"bankPostCode\": \"1011NS\",\n                                    \"bankCountrySubDivision\": \"North Holland\",\n                                    \"bankCountry\": \"NL\"\n                                }],\n                            \"accessContextScope\": \"USER\"\n                        }\n                    }, {\n                        \"id\": \"55ce2962-7c04-41e2-9bb9-84208342f321\",\n                        \"creatorBbId\": \"john@example.com\",\n                        \"creationTime\": \"2018-05-12T14:33:13.452Z\",\n                        \"action\": \"UPDATE\",\n                        \"status\": \"REJECTED\",\n                        \"data\": {\n                            \"id\": \"aa7cea7f-38ed-4c09-ab38-b3903f1e40ca\",\n                            \"name\": \"Judy Doe\",\n                            \"alias\": \"Judy\",\n                            \"category\": \"VP\",\n                            \"contactPerson\": \"Jane Doe\",\n                            \"phoneNumber\": \"055512345678\",\n                            \"emailId\": \"judy@example.com\",\n                            \"addressLine1\": \"Backbase enterprise\",\n                            \"addressLine2\": \"\",\n                            \"streetName\": \"Jacob Bontiusplaats 9\",\n                            \"town\": \"Amsterdam\",\n                            \"postCode\": \"1018 LL\",\n                            \"countrySubDivision\": \"North Holland\",\n                            \"country\": \"NL\",\n                            \"accounts\": [{\n                                    \"name\": \"Jane Doe\",\n                                    \"alias\": \"Jane\",\n                                    \"accountType\": \"SAVINGS\",\n                                    \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                    \"bankName\": \"Test Bank\",\n                                    \"bankAddressLine1\": \"Test Bank Co\",\n                                    \"bankAddressLine2\": \"\",\n                                    \"bankStreetName\": \"Jodenbreestraat 96\",\n                                    \"bankTown\": \"Amsterdam\",\n                                    \"bankPostCode\": \"1011NS\",\n                                    \"bankCountrySubDivision\": \"North Holland\",\n                                    \"bankCountry\": \"NL\"\n                                }],\n                            \"accessContextScope\": \"LE\"\n                        }\n                    }, {\n                        \"id\": \"cf40d556-4634-4e96-8976-7fb3764444e9\",\n                        \"creatorBbId\": \"john@example.com\",\n                        \"creationTime\": \"2018-05-21T14:33:13.452Z\",\n                        \"action\": \"DELETE\",\n                        \"status\": \"ENTERED\",\n                        \"data\": {\n                            \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n                            \"name\": \"Jane Doe\",\n                            \"alias\": \"Jane\",\n                            \"category\": \"Manager\",\n                            \"contactPerson\": \"John Doe\",\n                            \"phoneNumber\": \"055512345678\",\n                            \"emailId\": \"jane@example.com\",\n                            \"addressLine1\": \"Backbase enterprise\",\n                            \"addressLine2\": \"\",\n                            \"streetName\": \"Jacob Bontiusplaats 9\",\n                            \"town\": \"Amsterdam\",\n                            \"postCode\": \"1018 LL\",\n                            \"countrySubDivision\": \"North Holland\",\n                            \"country\": \"NL\",\n                            \"accounts\": [{\n                                    \"name\": \"Jane Doe\",\n                                    \"alias\": \"Jane\",\n                                    \"accountType\": \"SAVINGS\",\n                                    \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                    \"bankName\": \"Test Bank\",\n                                    \"bankAddressLine1\": \"Test Bank Co\",\n                                    \"bankAddressLine2\": \"\",\n                                    \"bankStreetName\": \"Jodenbreestraat 96\",\n                                    \"bankTown\": \"Amsterdam\",\n                                    \"bankPostCode\": \"1011NS\",\n                                    \"bankCountrySubDivision\": \"North Holland\",\n                                    \"bankCountry\": \"NL\"\n                                }],\n                            \"accessContextScope\": \"LE\"\n                        }\n                    }]\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/approvals/{requestId}/approvalRecords\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 202,\n                body: {\n                    \"status\": \"PENDING\"\n                }\n            },\n            {\n                status: 201,\n                body: {\n                    \"status\": \"APPROVED\"\n                }\n            },\n            {\n                status: 409,\n                body: {\n                    \"key\": \"ContactAlreadyCreated\",\n                    \"message\": \"Contact has already been created, please refresh\"\n                }\n            },\n            {\n                status: 409,\n                body: {\n                    \"key\": \"ContactAlreadyUpdated\",\n                    \"message\": \"Contact has already been updated, please refresh\"\n                }\n            },\n            {\n                status: 409,\n                body: {\n                    \"key\": \"ContactAlreadyDeleted\",\n                    \"message\": \"Contact has already been deleted, please refresh\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/approvals/{requestId}/rejectionRecords\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 201,\n                body: \"\"\n            },\n            {\n                status: 409,\n                body: {\n                    \"key\": \"ContactAlreadyRejected\",\n                    \"message\": \"Contact request has already been rejected, please refresh\"\n                }\n            },\n        ]\n    },\n]);\n\nclass ContactsHttpService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new ContactManagerConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    deleteContact(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _contactId = requestParameters[\"contactId\"];\n        if (_contactId === null || _contactId === undefined) {\n            throw new Error('Required parameter contactId was null or undefined when calling deleteContact.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    deleteContactUrl(requestParameters) {\n        const _contactId = requestParameters[\"contactId\"];\n        if (_contactId === null || _contactId === undefined) {\n            throw new Error('Required parameter contactId was null or undefined when calling deleteContact.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`;\n    }\n    getContact(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _contactId = requestParameters[\"contactId\"];\n        if (_contactId === null || _contactId === undefined) {\n            throw new Error('Required parameter contactId was null or undefined when calling getContact.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getContactUrl(requestParameters) {\n        const _contactId = requestParameters[\"contactId\"];\n        if (_contactId === null || _contactId === undefined) {\n            throw new Error('Required parameter contactId was null or undefined when calling getContact.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`;\n    }\n    getContacts(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _query = requestParameters[\"query\"];\n        const _accountIdentifierTypes = requestParameters[\"accountIdentifierTypes\"];\n        const _targetSaId = requestParameters[\"targetSaId\"];\n        const _businessFunctions = requestParameters[\"businessFunctions\"];\n        const _arrangementId = requestParameters[\"arrangementId\"];\n        const _privilege = requestParameters[\"privilege\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_from !== undefined && _from !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n        }\n        if (_query !== undefined && _query !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');\n        }\n        if (_accountIdentifierTypes) {\n            _accountIdentifierTypes.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');\n            });\n        }\n        if (_targetSaId !== undefined && _targetSaId !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');\n        }\n        if (_businessFunctions) {\n            _businessFunctions.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters, element, 'businessFunctions');\n            });\n        }\n        if (_arrangementId !== undefined && _arrangementId !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _arrangementId, 'arrangementId');\n        }\n        if (_privilege !== undefined && _privilege !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/contacts`, {\n            params: queryParameters,\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getContactsUrl(requestParameters) {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _query = requestParameters[\"query\"];\n        const _accountIdentifierTypes = requestParameters[\"accountIdentifierTypes\"];\n        const _targetSaId = requestParameters[\"targetSaId\"];\n        const _businessFunctions = requestParameters[\"businessFunctions\"];\n        const _arrangementId = requestParameters[\"arrangementId\"];\n        const _privilege = requestParameters[\"privilege\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_from !== undefined && _from !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n        }\n        if (_query !== undefined && _query !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');\n        }\n        if (_accountIdentifierTypes) {\n            _accountIdentifierTypes.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters, element, 'accountIdentifierTypes');\n            });\n        }\n        if (_targetSaId !== undefined && _targetSaId !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');\n        }\n        if (_businessFunctions) {\n            _businessFunctions.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters, element, 'businessFunctions');\n            });\n        }\n        if (_arrangementId !== undefined && _arrangementId !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _arrangementId, 'arrangementId');\n        }\n        if (_privilege !== undefined && _privilege !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v2/contacts${queryString ? `?${queryString}` : ''}`;\n    }\n    postContacts(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _contactsPostRequestBody = requestParameters[\"contactsPostRequestBody\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/contacts`, _contactsPostRequestBody, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    postContactsUrl(requestParameters) {\n        const _contactsPostRequestBody = requestParameters[\"contactsPostRequestBody\"];\n        return `${this.configuration.basePath}/client-api/v2/contacts`;\n    }\n    postContactsFilter(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _query = requestParameters[\"query\"];\n        const _targetSaId = requestParameters[\"targetSaId\"];\n        const _contactsPostFilterRequestBody = requestParameters[\"contactsPostFilterRequestBody\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_from !== undefined && _from !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n        }\n        if (_query !== undefined && _query !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');\n        }\n        if (_targetSaId !== undefined && _targetSaId !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/contacts/filter`, _contactsPostFilterRequestBody, {\n            params: queryParameters,\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    postContactsFilterUrl(requestParameters) {\n        const _from = requestParameters[\"from\"];\n        const _size = requestParameters[\"size\"];\n        const _query = requestParameters[\"query\"];\n        const _targetSaId = requestParameters[\"targetSaId\"];\n        const _contactsPostFilterRequestBody = requestParameters[\"contactsPostFilterRequestBody\"];\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (_from !== undefined && _from !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');\n        }\n        if (_size !== undefined && _size !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');\n        }\n        if (_query !== undefined && _query !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');\n        }\n        if (_targetSaId !== undefined && _targetSaId !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, _targetSaId, 'targetSaId');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v2/contacts/filter${queryString ? `?${queryString}` : ''}`;\n    }\n    putContact(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _contactId = requestParameters[\"contactId\"];\n        if (_contactId === null || _contactId === undefined) {\n            throw new Error('Required parameter contactId was null or undefined when calling putContact.');\n        }\n        const _contactPutRequestBody = requestParameters[\"contactPutRequestBody\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`, _contactPutRequestBody, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    putContactUrl(requestParameters) {\n        const _contactId = requestParameters[\"contactId\"];\n        if (_contactId === null || _contactId === undefined) {\n            throw new Error('Required parameter contactId was null or undefined when calling putContact.');\n        }\n        const _contactPutRequestBody = requestParameters[\"contactPutRequestBody\"];\n        return `${this.configuration.basePath}/client-api/v2/contacts/${encodeURIComponent(String(_contactId))}`;\n    }\n}\nContactsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ContactsHttpService, deps: [{ token: i1.HttpClient }, { token: CONTACT_MANAGER_BASE_PATH, optional: true }, { token: ContactManagerConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nContactsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ContactsHttpService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: ContactsHttpService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CONTACT_MANAGER_BASE_PATH]\n                }] }, { type: ContactManagerConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst ContactsHttpServiceDeleteContactMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/contacts/{contactId}\",\n        method: \"DELETE\",\n        responses: [\n            {\n                status: 202,\n                body: {\n                    \"status\": \"REQUEST_ACCEPTED\"\n                }\n            },\n            {\n                status: 409,\n                body: {\n                    \"key\": \"ApprovalAlreadyExistForContact\",\n                    \"message\": \"Approval request already exist with this contact.\"\n                }\n            },\n        ]\n    }]);\nconst ContactsHttpServiceGetContactMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/contacts/{contactId}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n                    \"name\": \"John Doe\",\n                    \"alias\": \"John\",\n                    \"category\": \"Employee\",\n                    \"contactPerson\": \"Jane Doe\",\n                    \"phoneNumber\": \"055512345678\",\n                    \"emailId\": \"john@example.com\",\n                    \"addressLine1\": \"Backbase enterprise\",\n                    \"addressLine2\": \"\",\n                    \"streetName\": \"Jacob Bontiusplaats 9\",\n                    \"town\": \"Amsterdam\",\n                    \"postCode\": \"1018 LL\",\n                    \"countrySubDivision\": \"North Holland\",\n                    \"country\": \"NL\",\n                    \"accounts\": [{\n                            \"name\": \"Jane Doe\",\n                            \"alias\": \"Jane\",\n                            \"accountType\": \"SAVINGS\",\n                            \"IBAN\": \"FI21 1234 5600 0007 85\",\n                            \"bankName\": \"Test Bank\",\n                            \"bankAddressLine1\": \"Test Bank Co\",\n                            \"bankAddressLine2\": \"\",\n                            \"bankStreetName\": \"Jodenbreestraat 96\",\n                            \"bankTown\": \"Amsterdam\",\n                            \"bankPostCode\": \"1011NS\",\n                            \"bankCountrySubDivision\": \"North Holland\",\n                            \"bankCountry\": \"NL\",\n                            \"accountHolderAddressLine1\": \"Backbase enterprise\",\n                            \"accountHolderAddressLine2\": \"\",\n                            \"accountHolderStreetName\": \"Jacob Bontiusplaats 9\",\n                            \"accountHolderTown\": \"Amsterdam\",\n                            \"accountHolderPostCode\": \"1018 LL\",\n                            \"accountHolderCountrySubDivision\": \"North Holland\",\n                            \"accountHolderCountry\": \"NL\"\n                        }],\n                    \"accessContextScope\": \"USER\",\n                    \"activeStatus\": \"ACTIVE\"\n                }\n            },\n        ]\n    }]);\nconst ContactsHttpServiceGetContactsMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/contacts\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n                        \"name\": \"John Doe\",\n                        \"alias\": \"John\",\n                        \"category\": \"Employee\",\n                        \"contactPerson\": \"Jane Doe\",\n                        \"phoneNumber\": \"055512345678\",\n                        \"emailId\": \"john@example.com\",\n                        \"addressLine1\": \"Backbase enterprise\",\n                        \"addressLine2\": \"\",\n                        \"streetName\": \"Jacob Bontiusplaats 9\",\n                        \"town\": \"Amsterdam\",\n                        \"postCode\": \"1018 LL\",\n                        \"countrySubDivision\": \"North Holland\",\n                        \"country\": \"NL\",\n                        \"accounts\": [{\n                                \"name\": \"Jane Doe\",\n                                \"alias\": \"Jane\",\n                                \"accountType\": \"SAVINGS\",\n                                \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                \"bankName\": \"Test Bank\",\n                                \"bankAddressLine1\": \"QA Bank\",\n                                \"bankAddressLine2\": \"\",\n                                \"bankStreetName\": \"Jodenbreestraat 96\",\n                                \"bankTown\": \"Amsterdam\",\n                                \"bankPostCode\": \"1011NS\",\n                                \"bankCountrySubDivision\": \"North Holland\",\n                                \"bankCountry\": \"NL\",\n                                \"accountHolderAddressLine1\": \"\",\n                                \"accountHolderAddressLine2\": \"\",\n                                \"accountHolderStreetName\": \"Woestduinstraat 114-3\",\n                                \"accountHolderTown\": \"Amsterdam\",\n                                \"accountHolderPostCode\": \"1059 SP\",\n                                \"accountHolderCountrySubDivision\": \"North Holland\",\n                                \"accountHolderCountry\": \"NL\"\n                            }],\n                        \"accessContextScope\": \"SA\",\n                        \"activeStatus\": \"ACTIVE\"\n                    }, {\n                        \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n                        \"name\": \"Jane Doe\",\n                        \"alias\": \"Jane\",\n                        \"category\": \"Manager\",\n                        \"contactPerson\": \"John Doe\",\n                        \"phoneNumber\": \"055512345678\",\n                        \"emailId\": \"jane@example.com\",\n                        \"addressLine1\": \"Backbase enterprise\",\n                        \"addressLine2\": \"\",\n                        \"streetName\": \"Jacob Bontiusplaats 9\",\n                        \"town\": \"Amsterdam\",\n                        \"postCode\": \"1018 LL\",\n                        \"countrySubDivision\": \"North Holland\",\n                        \"country\": \"NL\",\n                        \"accounts\": [{\n                                \"name\": \"Jane Doe\",\n                                \"alias\": \"Jane\",\n                                \"accountType\": \"SAVINGS\",\n                                \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                \"bankName\": \"Test Bank\",\n                                \"bankAddressLine1\": \"Test Bank Co\",\n                                \"bankAddressLine2\": \"\",\n                                \"bankStreetName\": \"Jodenbreestraat 96\",\n                                \"bankTown\": \"Amsterdam\",\n                                \"bankPostCode\": \"1011NS\",\n                                \"bankCountrySubDivision\": \"North Holland\",\n                                \"bankCountry\": \"NL\"\n                            }],\n                        \"accessContextScope\": \"LE\",\n                        \"activeStatus\": \"PENDING_APPROVAL\"\n                    }]\n            },\n        ]\n    }]);\nconst ContactsHttpServicePostContactsMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/contacts\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 201,\n                body: {\n                    \"id\": \"0955e686-d31e-4216-b3dd-5d66161d536d\",\n                    \"status\": \"ACTIVE\"\n                }\n            },\n            {\n                status: 202,\n                body: {\n                    \"id\": \"0955e686-d31e-4216-b3dd-5d66161d536d\",\n                    \"status\": \"ACTIVE\"\n                }\n            },\n        ]\n    }]);\nconst ContactsHttpServicePostContactsFilterMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/contacts/filter\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n                        \"name\": \"John Doe\",\n                        \"alias\": \"John\",\n                        \"category\": \"Employee\",\n                        \"contactPerson\": \"Jane Doe\",\n                        \"phoneNumber\": \"055512345678\",\n                        \"emailId\": \"john@example.com\",\n                        \"addressLine1\": \"Backbase enterprise\",\n                        \"addressLine2\": \"\",\n                        \"streetName\": \"Jacob Bontiusplaats 9\",\n                        \"town\": \"Amsterdam\",\n                        \"postCode\": \"1018 LL\",\n                        \"countrySubDivision\": \"North Holland\",\n                        \"country\": \"NL\",\n                        \"accounts\": [{\n                                \"name\": \"Jane Doe\",\n                                \"alias\": \"Jane\",\n                                \"accountType\": \"SAVINGS\",\n                                \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                \"bankName\": \"Test Bank\",\n                                \"bankAddressLine1\": \"QA Bank\",\n                                \"bankAddressLine2\": \"\",\n                                \"bankStreetName\": \"Jodenbreestraat 96\",\n                                \"bankTown\": \"Amsterdam\",\n                                \"bankPostCode\": \"1011NS\",\n                                \"bankCountrySubDivision\": \"North Holland\",\n                                \"bankCountry\": \"NL\",\n                                \"accountHolderAddressLine1\": \"\",\n                                \"accountHolderAddressLine2\": \"\",\n                                \"accountHolderStreetName\": \"Woestduinstraat 114-3\",\n                                \"accountHolderTown\": \"Amsterdam\",\n                                \"accountHolderPostCode\": \"1059 SP\",\n                                \"accountHolderCountrySubDivision\": \"North Holland\",\n                                \"accountHolderCountry\": \"NL\"\n                            }],\n                        \"accessContextScope\": \"SA\",\n                        \"activeStatus\": \"ACTIVE\"\n                    }, {\n                        \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n                        \"name\": \"Jane Doe\",\n                        \"alias\": \"Jane\",\n                        \"category\": \"Manager\",\n                        \"contactPerson\": \"John Doe\",\n                        \"phoneNumber\": \"055512345678\",\n                        \"emailId\": \"jane@example.com\",\n                        \"addressLine1\": \"Backbase enterprise\",\n                        \"addressLine2\": \"\",\n                        \"streetName\": \"Jacob Bontiusplaats 9\",\n                        \"town\": \"Amsterdam\",\n                        \"postCode\": \"1018 LL\",\n                        \"countrySubDivision\": \"North Holland\",\n                        \"country\": \"NL\",\n                        \"accounts\": [{\n                                \"name\": \"Jane Doe\",\n                                \"alias\": \"Jane\",\n                                \"accountType\": \"SAVINGS\",\n                                \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                \"bankName\": \"Test Bank\",\n                                \"bankAddressLine1\": \"Test Bank Co\",\n                                \"bankAddressLine2\": \"\",\n                                \"bankStreetName\": \"Jodenbreestraat 96\",\n                                \"bankTown\": \"Amsterdam\",\n                                \"bankPostCode\": \"1011NS\",\n                                \"bankCountrySubDivision\": \"North Holland\",\n                                \"bankCountry\": \"NL\"\n                            }],\n                        \"accessContextScope\": \"LE\",\n                        \"activeStatus\": \"PENDING_APPROVAL\"\n                    }]\n            },\n        ]\n    }]);\nconst ContactsHttpServicePutContactMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/contacts/{contactId}\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 202,\n                body: {\n                    \"status\": \"REQUEST_ACCEPTED\"\n                }\n            },\n            {\n                status: 409,\n                body: {\n                    \"key\": \"ApprovalAlreadyExistForContact\",\n                    \"message\": \"Approval request already exist with this contact.\"\n                }\n            },\n        ]\n    }]);\nconst ContactsHttpServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/client-api/v2/contacts/{contactId}\",\n        method: \"DELETE\",\n        responses: [\n            {\n                status: 202,\n                body: {\n                    \"status\": \"REQUEST_ACCEPTED\"\n                }\n            },\n            {\n                status: 409,\n                body: {\n                    \"key\": \"ApprovalAlreadyExistForContact\",\n                    \"message\": \"Approval request already exist with this contact.\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/contacts/{contactId}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n                    \"name\": \"John Doe\",\n                    \"alias\": \"John\",\n                    \"category\": \"Employee\",\n                    \"contactPerson\": \"Jane Doe\",\n                    \"phoneNumber\": \"055512345678\",\n                    \"emailId\": \"john@example.com\",\n                    \"addressLine1\": \"Backbase enterprise\",\n                    \"addressLine2\": \"\",\n                    \"streetName\": \"Jacob Bontiusplaats 9\",\n                    \"town\": \"Amsterdam\",\n                    \"postCode\": \"1018 LL\",\n                    \"countrySubDivision\": \"North Holland\",\n                    \"country\": \"NL\",\n                    \"accounts\": [{\n                            \"name\": \"Jane Doe\",\n                            \"alias\": \"Jane\",\n                            \"accountType\": \"SAVINGS\",\n                            \"IBAN\": \"FI21 1234 5600 0007 85\",\n                            \"bankName\": \"Test Bank\",\n                            \"bankAddressLine1\": \"Test Bank Co\",\n                            \"bankAddressLine2\": \"\",\n                            \"bankStreetName\": \"Jodenbreestraat 96\",\n                            \"bankTown\": \"Amsterdam\",\n                            \"bankPostCode\": \"1011NS\",\n                            \"bankCountrySubDivision\": \"North Holland\",\n                            \"bankCountry\": \"NL\",\n                            \"accountHolderAddressLine1\": \"Backbase enterprise\",\n                            \"accountHolderAddressLine2\": \"\",\n                            \"accountHolderStreetName\": \"Jacob Bontiusplaats 9\",\n                            \"accountHolderTown\": \"Amsterdam\",\n                            \"accountHolderPostCode\": \"1018 LL\",\n                            \"accountHolderCountrySubDivision\": \"North Holland\",\n                            \"accountHolderCountry\": \"NL\"\n                        }],\n                    \"accessContextScope\": \"USER\",\n                    \"activeStatus\": \"ACTIVE\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/contacts\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n                        \"name\": \"John Doe\",\n                        \"alias\": \"John\",\n                        \"category\": \"Employee\",\n                        \"contactPerson\": \"Jane Doe\",\n                        \"phoneNumber\": \"055512345678\",\n                        \"emailId\": \"john@example.com\",\n                        \"addressLine1\": \"Backbase enterprise\",\n                        \"addressLine2\": \"\",\n                        \"streetName\": \"Jacob Bontiusplaats 9\",\n                        \"town\": \"Amsterdam\",\n                        \"postCode\": \"1018 LL\",\n                        \"countrySubDivision\": \"North Holland\",\n                        \"country\": \"NL\",\n                        \"accounts\": [{\n                                \"name\": \"Jane Doe\",\n                                \"alias\": \"Jane\",\n                                \"accountType\": \"SAVINGS\",\n                                \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                \"bankName\": \"Test Bank\",\n                                \"bankAddressLine1\": \"QA Bank\",\n                                \"bankAddressLine2\": \"\",\n                                \"bankStreetName\": \"Jodenbreestraat 96\",\n                                \"bankTown\": \"Amsterdam\",\n                                \"bankPostCode\": \"1011NS\",\n                                \"bankCountrySubDivision\": \"North Holland\",\n                                \"bankCountry\": \"NL\",\n                                \"accountHolderAddressLine1\": \"\",\n                                \"accountHolderAddressLine2\": \"\",\n                                \"accountHolderStreetName\": \"Woestduinstraat 114-3\",\n                                \"accountHolderTown\": \"Amsterdam\",\n                                \"accountHolderPostCode\": \"1059 SP\",\n                                \"accountHolderCountrySubDivision\": \"North Holland\",\n                                \"accountHolderCountry\": \"NL\"\n                            }],\n                        \"accessContextScope\": \"SA\",\n                        \"activeStatus\": \"ACTIVE\"\n                    }, {\n                        \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n                        \"name\": \"Jane Doe\",\n                        \"alias\": \"Jane\",\n                        \"category\": \"Manager\",\n                        \"contactPerson\": \"John Doe\",\n                        \"phoneNumber\": \"055512345678\",\n                        \"emailId\": \"jane@example.com\",\n                        \"addressLine1\": \"Backbase enterprise\",\n                        \"addressLine2\": \"\",\n                        \"streetName\": \"Jacob Bontiusplaats 9\",\n                        \"town\": \"Amsterdam\",\n                        \"postCode\": \"1018 LL\",\n                        \"countrySubDivision\": \"North Holland\",\n                        \"country\": \"NL\",\n                        \"accounts\": [{\n                                \"name\": \"Jane Doe\",\n                                \"alias\": \"Jane\",\n                                \"accountType\": \"SAVINGS\",\n                                \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                \"bankName\": \"Test Bank\",\n                                \"bankAddressLine1\": \"Test Bank Co\",\n                                \"bankAddressLine2\": \"\",\n                                \"bankStreetName\": \"Jodenbreestraat 96\",\n                                \"bankTown\": \"Amsterdam\",\n                                \"bankPostCode\": \"1011NS\",\n                                \"bankCountrySubDivision\": \"North Holland\",\n                                \"bankCountry\": \"NL\"\n                            }],\n                        \"accessContextScope\": \"LE\",\n                        \"activeStatus\": \"PENDING_APPROVAL\"\n                    }]\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/contacts\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 201,\n                body: {\n                    \"id\": \"0955e686-d31e-4216-b3dd-5d66161d536d\",\n                    \"status\": \"ACTIVE\"\n                }\n            },\n            {\n                status: 202,\n                body: {\n                    \"id\": \"0955e686-d31e-4216-b3dd-5d66161d536d\",\n                    \"status\": \"ACTIVE\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/contacts/filter\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536d\",\n                        \"name\": \"John Doe\",\n                        \"alias\": \"John\",\n                        \"category\": \"Employee\",\n                        \"contactPerson\": \"Jane Doe\",\n                        \"phoneNumber\": \"055512345678\",\n                        \"emailId\": \"john@example.com\",\n                        \"addressLine1\": \"Backbase enterprise\",\n                        \"addressLine2\": \"\",\n                        \"streetName\": \"Jacob Bontiusplaats 9\",\n                        \"town\": \"Amsterdam\",\n                        \"postCode\": \"1018 LL\",\n                        \"countrySubDivision\": \"North Holland\",\n                        \"country\": \"NL\",\n                        \"accounts\": [{\n                                \"name\": \"Jane Doe\",\n                                \"alias\": \"Jane\",\n                                \"accountType\": \"SAVINGS\",\n                                \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                \"bankName\": \"Test Bank\",\n                                \"bankAddressLine1\": \"QA Bank\",\n                                \"bankAddressLine2\": \"\",\n                                \"bankStreetName\": \"Jodenbreestraat 96\",\n                                \"bankTown\": \"Amsterdam\",\n                                \"bankPostCode\": \"1011NS\",\n                                \"bankCountrySubDivision\": \"North Holland\",\n                                \"bankCountry\": \"NL\",\n                                \"accountHolderAddressLine1\": \"\",\n                                \"accountHolderAddressLine2\": \"\",\n                                \"accountHolderStreetName\": \"Woestduinstraat 114-3\",\n                                \"accountHolderTown\": \"Amsterdam\",\n                                \"accountHolderPostCode\": \"1059 SP\",\n                                \"accountHolderCountrySubDivision\": \"North Holland\",\n                                \"accountHolderCountry\": \"NL\"\n                            }],\n                        \"accessContextScope\": \"SA\",\n                        \"activeStatus\": \"ACTIVE\"\n                    }, {\n                        \"id\": \"0855e686-d31e-4216-b3dd-5d66161d536e\",\n                        \"name\": \"Jane Doe\",\n                        \"alias\": \"Jane\",\n                        \"category\": \"Manager\",\n                        \"contactPerson\": \"John Doe\",\n                        \"phoneNumber\": \"055512345678\",\n                        \"emailId\": \"jane@example.com\",\n                        \"addressLine1\": \"Backbase enterprise\",\n                        \"addressLine2\": \"\",\n                        \"streetName\": \"Jacob Bontiusplaats 9\",\n                        \"town\": \"Amsterdam\",\n                        \"postCode\": \"1018 LL\",\n                        \"countrySubDivision\": \"North Holland\",\n                        \"country\": \"NL\",\n                        \"accounts\": [{\n                                \"name\": \"Jane Doe\",\n                                \"alias\": \"Jane\",\n                                \"accountType\": \"SAVINGS\",\n                                \"IBAN\": \"FI21 1234 5600 0007 85\",\n                                \"bankName\": \"Test Bank\",\n                                \"bankAddressLine1\": \"Test Bank Co\",\n                                \"bankAddressLine2\": \"\",\n                                \"bankStreetName\": \"Jodenbreestraat 96\",\n                                \"bankTown\": \"Amsterdam\",\n                                \"bankPostCode\": \"1011NS\",\n                                \"bankCountrySubDivision\": \"North Holland\",\n                                \"bankCountry\": \"NL\"\n                            }],\n                        \"accessContextScope\": \"LE\",\n                        \"activeStatus\": \"PENDING_APPROVAL\"\n                    }]\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/contacts/{contactId}\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 202,\n                body: {\n                    \"status\": \"REQUEST_ACCEPTED\"\n                }\n            },\n            {\n                status: 409,\n                body: {\n                    \"key\": \"ApprovalAlreadyExistForContact\",\n                    \"message\": \"Approval request already exist with this contact.\"\n                }\n            },\n        ]\n    },\n]);\n\nclass IbanRestrictionsHttpService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new ContactManagerConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getIbanRestriction(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _code = requestParameters[\"code\"];\n        if (_code === null || _code === undefined) {\n            throw new Error('Required parameter code was null or undefined when calling getIbanRestriction.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/iban-restrictions/countries/${encodeURIComponent(String(_code))}`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getIbanRestrictionUrl(requestParameters) {\n        const _code = requestParameters[\"code\"];\n        if (_code === null || _code === undefined) {\n            throw new Error('Required parameter code was null or undefined when calling getIbanRestriction.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/iban-restrictions/countries/${encodeURIComponent(String(_code))}`;\n    }\n    getIbanRestrictions(observe = 'body', reportProgress = false, options) {\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/iban-restrictions/countries`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getIbanRestrictionsUrl() {\n        return `${this.configuration.basePath}/client-api/v2/iban-restrictions/countries`;\n    }\n}\nIbanRestrictionsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: IbanRestrictionsHttpService, deps: [{ token: i1.HttpClient }, { token: CONTACT_MANAGER_BASE_PATH, optional: true }, { token: ContactManagerConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nIbanRestrictionsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: IbanRestrictionsHttpService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: IbanRestrictionsHttpService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CONTACT_MANAGER_BASE_PATH]\n                }] }, { type: ContactManagerConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst IbanRestrictionsHttpServiceGetIbanRestrictionMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/iban-restrictions/countries/{code}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"ibanLength\": 18\n                }\n            },\n        ]\n    }]);\nconst IbanRestrictionsHttpServiceGetIbanRestrictionsMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/iban-restrictions/countries\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"countryCode\": \"NL\",\n                        \"ibanLength\": 18\n                    }, {\n                        \"countryCode\": \"TR\",\n                        \"ibanLength\": 26\n                    }]\n            },\n        ]\n    }]);\nconst IbanRestrictionsHttpServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/client-api/v2/iban-restrictions/countries/{code}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"ibanLength\": 18\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/iban-restrictions/countries\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"countryCode\": \"NL\",\n                        \"ibanLength\": 18\n                    }, {\n                        \"countryCode\": \"TR\",\n                        \"ibanLength\": 26\n                    }]\n            },\n        ]\n    },\n]);\n\nclass SupportedCountriesHttpService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new ContactManagerConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getSupportedCountries(observe = 'body', reportProgress = false, options) {\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/supported-countries`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getSupportedCountriesUrl() {\n        return `${this.configuration.basePath}/client-api/v2/supported-countries`;\n    }\n}\nSupportedCountriesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: SupportedCountriesHttpService, deps: [{ token: i1.HttpClient }, { token: CONTACT_MANAGER_BASE_PATH, optional: true }, { token: ContactManagerConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nSupportedCountriesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: SupportedCountriesHttpService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: SupportedCountriesHttpService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CONTACT_MANAGER_BASE_PATH]\n                }] }, { type: ContactManagerConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst SupportedCountriesHttpServiceGetSupportedCountriesMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/supported-countries\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [\"AR\", \"AU\", \"AT\", \"BE\", \"BR\", \"CA\", \"CN\", \"CO\", \"HR\", \"CZ\", \"DK\", \"EC\", \"EG\", \"ET\", \"FR\", \"DE\", \"GR\", \"HN\", \"HK\", \"HU\", \"IN\", \"ID\", \"IE\", \"IT\", \"JM\", \"MY\", \"MX\", \"MA\", \"NA\", \"NL\", \"NZ\", \"NO\", \"PL\", \"PT\", \"RU\", \"SN\"]\n            },\n        ]\n    }]);\nconst SupportedCountriesHttpServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/client-api/v2/supported-countries\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [\"AR\", \"AU\", \"AT\", \"BE\", \"BR\", \"CA\", \"CN\", \"CO\", \"HR\", \"CZ\", \"DK\", \"EC\", \"EG\", \"ET\", \"FR\", \"DE\", \"GR\", \"HN\", \"HK\", \"HU\", \"IN\", \"ID\", \"IE\", \"IT\", \"JM\", \"MY\", \"MX\", \"MA\", \"NA\", \"NL\", \"NZ\", \"NO\", \"PL\", \"PT\", \"RU\", \"SN\"]\n            },\n        ]\n    },\n]);\n\nexport { AccessContextScope, AccountIdentifierType, ActiveContactStatus, ApprovalRequestAction, ApprovalRequestIndicator, ApprovalRequestStatus, ApprovalResultStatus, ApprovalSort, ApprovalStatus, ApprovalsHttpService, ApprovalsHttpServiceDeleteApprovalRequestMocksProvider, ApprovalsHttpServiceGetApprovalsCreatedByMeMocksProvider, ApprovalsHttpServiceGetApprovalsMocksProvider, ApprovalsHttpServiceMocksProvider, ApprovalsHttpServicePostApprovalRecordMocksProvider, ApprovalsHttpServicePostRejectionRecordMocksProvider, COLLECTION_FORMATS, CONFIG_TOKEN, CONTACT_MANAGER_BASE_PATH, ContactManagerApiModule, ContactManagerConfiguration, ContactsHttpService, ContactsHttpServiceDeleteContactMocksProvider, ContactsHttpServiceGetContactMocksProvider, ContactsHttpServiceGetContactsMocksProvider, ContactsHttpServiceMocksProvider, ContactsHttpServicePostContactsFilterMocksProvider, ContactsHttpServicePostContactsMocksProvider, ContactsHttpServicePutContactMocksProvider, IbanRestrictionsHttpService, IbanRestrictionsHttpServiceGetIbanRestrictionMocksProvider, IbanRestrictionsHttpServiceGetIbanRestrictionsMocksProvider, IbanRestrictionsHttpServiceMocksProvider, RecordStatus, SortDirection, SupportedCountriesHttpService, SupportedCountriesHttpServiceGetSupportedCountriesMocksProvider, SupportedCountriesHttpServiceMocksProvider };\n"]},"metadata":{},"sourceType":"module"}