{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i2 from '@backbase/foundation-ang/data-http';\nimport { createMocks } from '@backbase/foundation-ang/data-http';\nconst ApprovalStatus = {\n  EFFECTIVE: 'EFFECTIVE',\n  PENDING: 'PENDING',\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED',\n  CANCELLED: 'CANCELLED'\n};\nconst BreachType = {\n  THRESHOLD: 'THRESHOLD',\n  CONSUMPTION: 'CONSUMPTION'\n};\nconst BreachedLimitType = {\n  PERIODIC: 'PERIODIC',\n  TRANSACTIONAL: 'TRANSACTIONAL'\n};\nvar Consumption;\n\n(function (Consumption) {\n  Consumption.StateEnum = {\n    CONSUMED: 'CONSUMED',\n    ROLLEDBACK: 'ROLLED_BACK'\n  };\n})(Consumption || (Consumption = {}));\n\nconst PaymentState = {\n  APPROVED: 'APPROVED',\n  NEW: 'NEW',\n  PARTIALLYAPPROVED: 'PARTIALLY_APPROVED'\n};\nconst LIMIT_BASE_PATH = new InjectionToken('LIMIT_BASE_PATH');\nconst COLLECTION_FORMATS = {\n  'csv': ',',\n  'tsv': '   ',\n  'ssv': ' ',\n  'pipes': '|'\n};\n\nclass LimitConfiguration {\n  constructor(configurationParameters = {}) {\n    this.apiKeys = configurationParameters.apiKeys;\n    this.username = configurationParameters.username;\n    this.password = configurationParameters.password;\n    this.accessToken = configurationParameters.accessToken;\n    this.basePath = configurationParameters.basePath;\n    this.withCredentials = configurationParameters.withCredentials;\n    this.encoder = configurationParameters.encoder;\n\n    if (configurationParameters.credentials) {\n      this.credentials = configurationParameters.credentials;\n    } else {\n      this.credentials = {};\n    }\n  }\n\n  selectHeaderContentType(contentTypes) {\n    if (contentTypes.length === 0) {\n      return undefined;\n    }\n\n    const type = contentTypes.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return contentTypes[0];\n    }\n\n    return type;\n  }\n\n  selectHeaderAccept(accepts) {\n    if (accepts.length === 0) {\n      return undefined;\n    }\n\n    const type = accepts.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return accepts[0];\n    }\n\n    return type;\n  }\n\n  isJsonMime(mime) {\n    const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n\n  lookupCredential(key) {\n    const value = this.credentials[key];\n    return typeof value === 'function' ? value() : value;\n  }\n\n}\n\nconst CONFIG_TOKEN = new InjectionToken('api-data-module LimitConfiguration');\n\nclass LimitApiModule {\n  constructor(parentModule, http, dataModulesManager, config) {\n    if (parentModule) {\n      throw new Error('LimitApiModule is already loaded. Import in your base AppModule only.');\n    }\n\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' + 'See also https://github.com/angular/angular/issues/20575');\n    }\n\n    if (dataModulesManager) {\n      dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n        apiRoot: '',\n        servicePath: config.basePath || '',\n        headers: {}\n      });\n    }\n  }\n\n  static forRoot(configurationFactory) {\n    return {\n      ngModule: LimitApiModule,\n      providers: [{\n        provide: LimitConfiguration,\n        useFactory: configurationFactory\n      }]\n    };\n  }\n\n}\n\nLimitApiModule.ɵfac = function LimitApiModule_Factory(t) {\n  return new (t || LimitApiModule)(i0.ɵɵinject(LimitApiModule, 12), i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DataModulesManager, 8), i0.ɵɵinject(LimitConfiguration));\n};\n\nLimitApiModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: LimitApiModule\n});\nLimitApiModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [],\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LimitApiModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [],\n      exports: [],\n      providers: []\n    }]\n  }], function () {\n    return [{\n      type: LimitApiModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: i1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.DataModulesManager,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: LimitConfiguration\n    }];\n  }, null);\n})();\n\nclass CustomHttpParameterCodec {\n  encodeKey(k) {\n    return encodeURIComponent(k);\n  }\n\n  encodeValue(v) {\n    return encodeURIComponent(v);\n  }\n\n  decodeKey(k) {\n    return decodeURIComponent(k);\n  }\n\n  decodeValue(v) {\n    return decodeURIComponent(v);\n  }\n\n}\n\nclass GlobalLimitsApprovalHttpService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new LimitConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getGlobalLimitsApprovalDetails(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _approvalId = requestParameters[\"approvalId\"];\n\n    if (_approvalId === null || _approvalId === undefined) {\n      throw new Error('Required parameter approvalId was null or undefined when calling getGlobalLimitsApprovalDetails.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/limits/global/approvals/${encodeURIComponent(String(_approvalId))}`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getGlobalLimitsApprovalDetailsUrl(requestParameters) {\n    const _approvalId = requestParameters[\"approvalId\"];\n\n    if (_approvalId === null || _approvalId === undefined) {\n      throw new Error('Required parameter approvalId was null or undefined when calling getGlobalLimitsApprovalDetails.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/limits/global/approvals/${encodeURIComponent(String(_approvalId))}`;\n  }\n\n  postGlobalLimitsApprovalStatus(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _approvalId = requestParameters[\"approvalId\"];\n\n    if (_approvalId === null || _approvalId === undefined) {\n      throw new Error('Required parameter approvalId was null or undefined when calling postGlobalLimitsApprovalStatus.');\n    }\n\n    const _limitApprovalRequest = requestParameters[\"limitApprovalRequest\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/limits/global/approvals/${encodeURIComponent(String(_approvalId))}/status`, _limitApprovalRequest, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  postGlobalLimitsApprovalStatusUrl(requestParameters) {\n    const _approvalId = requestParameters[\"approvalId\"];\n\n    if (_approvalId === null || _approvalId === undefined) {\n      throw new Error('Required parameter approvalId was null or undefined when calling postGlobalLimitsApprovalStatus.');\n    }\n\n    const _limitApprovalRequest = requestParameters[\"limitApprovalRequest\"];\n    return `${this.configuration.basePath}/client-api/v2/limits/global/approvals/${encodeURIComponent(String(_approvalId))}/status`;\n  }\n\n}\n\nGlobalLimitsApprovalHttpService.ɵfac = function GlobalLimitsApprovalHttpService_Factory(t) {\n  return new (t || GlobalLimitsApprovalHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(LIMIT_BASE_PATH, 8), i0.ɵɵinject(LimitConfiguration, 8));\n};\n\nGlobalLimitsApprovalHttpService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: GlobalLimitsApprovalHttpService,\n  factory: GlobalLimitsApprovalHttpService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GlobalLimitsApprovalHttpService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIMIT_BASE_PATH]\n      }]\n    }, {\n      type: LimitConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst GlobalLimitsApprovalHttpServiceGetGlobalLimitsApprovalDetailsMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/limits/global/approvals/{approvalId}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"approvalId\": \"bc1c03f2-6483-46ca-a7ec-192a2d963a8d\",\n      \"currency\": \"EUR\",\n      \"limits\": [{\n        \"alias\": \"Personal\",\n        \"uuid\": \"e211eded-572f-48b1-8940-ae7a301838cb\",\n        \"entities\": [{\n          \"type\": \"USER\"\n        }],\n        \"bounds\": [{\n          \"type\": \"daily\",\n          \"effectiveAmount\": \"200.00\",\n          \"pendingAmount\": \"300.00\"\n        }, {\n          \"type\": \"weekly\",\n          \"effectiveAmount\": \"1000.00\",\n          \"pendingAmount\": \"\"\n        }, {\n          \"type\": \"transactional\",\n          \"effectiveAmount\": \"\",\n          \"pendingAmount\": \"300.00\"\n        }]\n      }, {\n        \"alias\": \"Service Agreement\",\n        \"uuid\": \"ac825135-96ac-4883-8f46-aa5bd9497745\",\n        \"entities\": [{\n          \"type\": \"SA\"\n        }],\n        \"bounds\": [{\n          \"type\": \"daily\",\n          \"effectiveAmount\": \"400.00\",\n          \"pendingAmount\": \"\"\n        }, {\n          \"type\": \"weekly\",\n          \"effectiveAmount\": \"800.00\",\n          \"pendingAmount\": \"600\"\n        }, {\n          \"type\": \"transactional\",\n          \"effectiveAmount\": \"300.00\",\n          \"pendingAmount\": \"300.00\"\n        }]\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nconst GlobalLimitsApprovalHttpServicePostGlobalLimitsApprovalStatusMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/limits/global/approvals/{approvalId}/status\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {\n      \"approvalId\": \"bc1c03f2-6483-46ca-a7ec-192a2d963a8d\",\n      \"approvalStatus\": \"APPROVED\"\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nconst GlobalLimitsApprovalHttpServiceMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/limits/global/approvals/{approvalId}\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"approvalId\": \"bc1c03f2-6483-46ca-a7ec-192a2d963a8d\",\n      \"currency\": \"EUR\",\n      \"limits\": [{\n        \"alias\": \"Personal\",\n        \"uuid\": \"e211eded-572f-48b1-8940-ae7a301838cb\",\n        \"entities\": [{\n          \"type\": \"USER\"\n        }],\n        \"bounds\": [{\n          \"type\": \"daily\",\n          \"effectiveAmount\": \"200.00\",\n          \"pendingAmount\": \"300.00\"\n        }, {\n          \"type\": \"weekly\",\n          \"effectiveAmount\": \"1000.00\",\n          \"pendingAmount\": \"\"\n        }, {\n          \"type\": \"transactional\",\n          \"effectiveAmount\": \"\",\n          \"pendingAmount\": \"300.00\"\n        }]\n      }, {\n        \"alias\": \"Service Agreement\",\n        \"uuid\": \"ac825135-96ac-4883-8f46-aa5bd9497745\",\n        \"entities\": [{\n          \"type\": \"SA\"\n        }],\n        \"bounds\": [{\n          \"type\": \"daily\",\n          \"effectiveAmount\": \"400.00\",\n          \"pendingAmount\": \"\"\n        }, {\n          \"type\": \"weekly\",\n          \"effectiveAmount\": \"800.00\",\n          \"pendingAmount\": \"600\"\n        }, {\n          \"type\": \"transactional\",\n          \"effectiveAmount\": \"300.00\",\n          \"pendingAmount\": \"300.00\"\n        }]\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/limits/global/approvals/{approvalId}/status\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: {\n      \"approvalId\": \"bc1c03f2-6483-46ca-a7ec-192a2d963a8d\",\n      \"approvalStatus\": \"APPROVED\"\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\n\nclass LimitsHttpService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = '';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new LimitConfiguration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getApprovals(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _approvalId = requestParameters[\"approvalId\"];\n\n    if (_approvalId === null || _approvalId === undefined) {\n      throw new Error('Required parameter approvalId was null or undefined when calling getApprovals.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_approvalId))}/approvals`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getApprovalsUrl(requestParameters) {\n    const _approvalId = requestParameters[\"approvalId\"];\n\n    if (_approvalId === null || _approvalId === undefined) {\n      throw new Error('Required parameter approvalId was null or undefined when calling getApprovals.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_approvalId))}/approvals`;\n  }\n\n  getBreachableOperationByPaymentRef(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _paymentRef = requestParameters[\"paymentRef\"];\n\n    if (_paymentRef === null || _paymentRef === undefined) {\n      throw new Error('Required parameter paymentRef was null or undefined when calling getBreachableOperationByPaymentRef.');\n    }\n\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_paymentRef))}/breachreport`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getBreachableOperationByPaymentRefUrl(requestParameters) {\n    const _paymentRef = requestParameters[\"paymentRef\"];\n\n    if (_paymentRef === null || _paymentRef === undefined) {\n      throw new Error('Required parameter paymentRef was null or undefined when calling getBreachableOperationByPaymentRef.');\n    }\n\n    return `${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_paymentRef))}/breachreport`;\n  }\n\n  getCurrency(observe = 'body', reportProgress = false, options) {\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/limits/currency`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getCurrencyUrl() {\n    return `${this.configuration.basePath}/client-api/v2/limits/currency`;\n  }\n\n  getGlobalLimits(observe = 'body', reportProgress = false, options) {\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/limits/global`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getGlobalLimitsUrl() {\n    return `${this.configuration.basePath}/client-api/v2/limits/global`;\n  }\n\n  getSupportedPeriods(observe = 'body', reportProgress = false, options) {\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/limits/periods`, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getSupportedPeriodsUrl() {\n    return `${this.configuration.basePath}/client-api/v2/limits/periods`;\n  }\n\n  postCurrentLimitsConsumptionsRetrieval(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _currentLimitsConsumptionsRetrievalPostRequestBody = requestParameters[\"currentLimitsConsumptionsRetrievalPostRequestBody\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/limits/consumptions`, _currentLimitsConsumptionsRetrievalPostRequestBody, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  postCurrentLimitsConsumptionsRetrievalUrl(requestParameters) {\n    const _currentLimitsConsumptionsRetrievalPostRequestBody = requestParameters[\"currentLimitsConsumptionsRetrievalPostRequestBody\"];\n    return `${this.configuration.basePath}/client-api/v2/limits/consumptions`;\n  }\n\n  postLimits(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _createLimitRequestBody = requestParameters[\"createLimitRequestBody\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/limits`, _createLimitRequestBody, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  postLimitsUrl(requestParameters) {\n    const _createLimitRequestBody = requestParameters[\"createLimitRequestBody\"];\n    return `${this.configuration.basePath}/client-api/v2/limits`;\n  }\n\n  postLimitsRetrieval(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _limitsRetrievalPostRequestBody = requestParameters[\"limitsRetrievalPostRequestBody\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/limits/retrieval`, _limitsRetrievalPostRequestBody, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  postLimitsRetrievalUrl(requestParameters) {\n    const _limitsRetrievalPostRequestBody = requestParameters[\"limitsRetrievalPostRequestBody\"];\n    return `${this.configuration.basePath}/client-api/v2/limits/retrieval`;\n  }\n\n  postPeriodicLimitSoftCheck(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _periodicLimitSoftCheckPostRequestBody = requestParameters[\"periodicLimitSoftCheckPostRequestBody\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/limits/periodic/soft-check`, _periodicLimitSoftCheckPostRequestBody, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  postPeriodicLimitSoftCheckUrl(requestParameters) {\n    const _periodicLimitSoftCheckPostRequestBody = requestParameters[\"periodicLimitSoftCheckPostRequestBody\"];\n    return `${this.configuration.basePath}/client-api/v2/limits/periodic/soft-check`;\n  }\n\n  postTransactionalLimitSoftCheck(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _transactionalLimitSoftCheckPostRequestBody = requestParameters[\"transactionalLimitSoftCheckPostRequestBody\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/limits/transactional/soft-check`, _transactionalLimitSoftCheckPostRequestBody, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  postTransactionalLimitSoftCheckUrl(requestParameters) {\n    const _transactionalLimitSoftCheckPostRequestBody = requestParameters[\"transactionalLimitSoftCheckPostRequestBody\"];\n    return `${this.configuration.basePath}/client-api/v2/limits/transactional/soft-check`;\n  }\n\n  putApprovals(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _approvalId = requestParameters[\"approvalId\"];\n\n    if (_approvalId === null || _approvalId === undefined) {\n      throw new Error('Required parameter approvalId was null or undefined when calling putApprovals.');\n    }\n\n    const _limitApprovalRequest = requestParameters[\"limitApprovalRequest\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_approvalId))}/approvals`, _limitApprovalRequest, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  putApprovalsUrl(requestParameters) {\n    const _approvalId = requestParameters[\"approvalId\"];\n\n    if (_approvalId === null || _approvalId === undefined) {\n      throw new Error('Required parameter approvalId was null or undefined when calling putApprovals.');\n    }\n\n    const _limitApprovalRequest = requestParameters[\"limitApprovalRequest\"];\n    return `${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_approvalId))}/approvals`;\n  }\n\n  putGlobalLimits(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _upsertGlobalLimitsRequestBody = requestParameters[\"upsertGlobalLimitsRequestBody\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/limits/global`, _upsertGlobalLimitsRequestBody, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  putGlobalLimitsUrl(requestParameters) {\n    const _upsertGlobalLimitsRequestBody = requestParameters[\"upsertGlobalLimitsRequestBody\"];\n    return `${this.configuration.basePath}/client-api/v2/limits/global`;\n  }\n\n  putLimitByUuid(requestParameters, observe = 'body', reportProgress = false, options) {\n    const _uuid = requestParameters[\"uuid\"];\n\n    if (_uuid === null || _uuid === undefined) {\n      throw new Error('Required parameter uuid was null or undefined when calling putLimitByUuid.');\n    }\n\n    const _updateLimitRequestBody = requestParameters[\"updateLimitRequestBody\"];\n    let headers = this.defaultHeaders;\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      const httpHeaderAccepts = ['application/json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType = 'text';\n    }\n\n    return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_uuid))}`, _updateLimitRequestBody, {\n      responseType: responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  putLimitByUuidUrl(requestParameters) {\n    const _uuid = requestParameters[\"uuid\"];\n\n    if (_uuid === null || _uuid === undefined) {\n      throw new Error('Required parameter uuid was null or undefined when calling putLimitByUuid.');\n    }\n\n    const _updateLimitRequestBody = requestParameters[\"updateLimitRequestBody\"];\n    return `${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_uuid))}`;\n  }\n\n}\n\nLimitsHttpService.ɵfac = function LimitsHttpService_Factory(t) {\n  return new (t || LimitsHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(LIMIT_BASE_PATH, 8), i0.ɵɵinject(LimitConfiguration, 8));\n};\n\nLimitsHttpService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: LimitsHttpService,\n  factory: LimitsHttpService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LimitsHttpService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIMIT_BASE_PATH]\n      }]\n    }, {\n      type: LimitConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst LimitsHttpServiceGetApprovalsMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/limits/{approvalId}/approvals\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"alias\": \"Personal Service Agreement Limit\",\n      \"uuid\": \"1234-5678-9101-1121\",\n      \"user-BBID\": \"uuid-user-id\",\n      \"userName\": \"Full Username\",\n      \"entities\": [{\n        \"etype\": \"SA\",\n        \"eref\": \"550e8400-e29b-41d4-a716-446655440000\",\n        \"name\": \"Service agreement #1\"\n      }],\n      \"currency\": \"EUR\",\n      \"approval-currency\": \"EUR\",\n      \"periodic-limits-bounds\": {\n        \"daily\": \"100.0\",\n        \"weekly\": \"120.0\",\n        \"monthly\": \"300.0\",\n        \"quarterly\": \"600.0\"\n      },\n      \"approval-periodic-limits-bounds\": {\n        \"daily\": \"200.0\",\n        \"weekly\": \"300.0\",\n        \"monthly\": \"500.0\",\n        \"quarterly\": \"1000.0\"\n      },\n      \"shadow\": true,\n      \"approvalStatus\": \"PENDING\"\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nconst LimitsHttpServiceGetBreachableOperationByPaymentRefMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/limits/{paymentRef}/breachreport\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"payment\": {\n        \"refNo\": \"4563-3474-34553-24556\",\n        \"user-BBID\": \"550e8400-e29b-41d4-a716-446655440000\",\n        \"amount\": \"599.99\",\n        \"effectiveDate\": \"2017-01-31T12:12:12.000Z\",\n        \"currency\": \"EUR\",\n        \"paymentType\": \"Domestic Payments\",\n        \"state\": \"NEW\"\n      },\n      \"matchedLimits\": 1,\n      \"consumption\": [{\n        \"limitId\": \"4563-3474-34553-24556\",\n        \"limitCcy\": \"EUR\",\n        \"consumedAmount\": \"599.99\",\n        \"consumedOn\": \"2017-01-31T12:12:12.000Z\",\n        \"state\": \"CONSUMED\"\n      }],\n      \"checkTime\": \"2017-01-31T12:12:12.000Z\",\n      \"breachReport\": [{\n        \"alias\": \"Personal Service Agreement Limit\",\n        \"user-BBID\": \"oleksii\",\n        \"limitedEntity\": [{\n          \"ref\": \"1234567-12312-123123\",\n          \"type\": \"Service Agreement\",\n          \"description\": \"Kuhic, Gislason and Kemmer. SERVICE AGREEMENT\"\n        }],\n        \"shadow\": false,\n        \"currency\": \"EUR\",\n        \"breachInfo\": [{\n          \"breachType\": \"THRESHOLD\",\n          \"breachedLimitType\": \"PERIODIC\",\n          \"timeframe\": {\n            \"period\": \"daily\",\n            \"startTime\": \"2017-01-31T00:00:00.000Z\",\n            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n          },\n          \"currentConsumption\": \"250.0\",\n          \"currentThreshold\": \"499.9\"\n        }, {\n          \"breachType\": \"CONSUMPTION\",\n          \"breachedLimitType\": \"PERIODIC\",\n          \"timeframe\": {\n            \"period\": \"monthly\",\n            \"startTime\": \"2017-01-01T00:00:00.000Z\",\n            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n          },\n          \"currentConsumption\": \"9950.0\",\n          \"currentThreshold\": \"10000.0\"\n        }]\n      }, {\n        \"alias\": \"Personal Limit\",\n        \"user-BBID\": \"oleksii\",\n        \"shadow\": false,\n        \"currency\": \"EUR\",\n        \"breachInfo\": [{\n          \"breachType\": \"CONSUMPTION\",\n          \"breachedLimitType\": \"PERIODIC\",\n          \"timeframe\": {\n            \"period\": \"daily\",\n            \"startTime\": \"2017-01-31T00:00:00.000Z\",\n            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n          },\n          \"currentConsumption\": \"500.0\",\n          \"currentThreshold\": \"1000.0\"\n        }]\n      }, {\n        \"alias\": \"Common Job Profile Limit\",\n        \"limitedEntity\": [{\n          \"ref\": \"1234567-12312-123123\",\n          \"type\": \"Function Access Group\",\n          \"description\": \"Payments approvers\"\n        }, {\n          \"ref\": \"1234567-12312-123123\",\n          \"type\": \"Function\",\n          \"description\": \"Domestic payments\"\n        }, {\n          \"ref\": \"Approve\",\n          \"type\": \"Privilege\",\n          \"description\": \"Approve\"\n        }, {\n          \"ref\": \"1234567-12312-123123\",\n          \"type\": \"Service Agreement\",\n          \"description\": \"Kuhic, Gislason and Kemmer. SERVICE AGREEMENT\"\n        }],\n        \"shadow\": false,\n        \"currency\": \"EUR\",\n        \"breachInfo\": [{\n          \"breachType\": \"THRESHOLD\",\n          \"breachedLimitType\": \"PERIODIC\",\n          \"timeframe\": {\n            \"period\": \"daily\",\n            \"startTime\": \"2017-01-31T00:00:00.000Z\",\n            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n          },\n          \"currentConsumption\": \"250.0\",\n          \"currentThreshold\": \"499.9\"\n        }]\n      }, {\n        \"alias\": \"\",\n        \"limitedEntity\": [{\n          \"ref\": \"1234567-12312-123123\",\n          \"type\": \"Legal Entity\",\n          \"description\": \"Kuhic, Gislason and Kemmer\"\n        }],\n        \"shadow\": false,\n        \"currency\": \"EUR\",\n        \"breachInfo\": [{\n          \"breachType\": \"CONSUMPTION\",\n          \"breachedLimitType\": \"PERIODIC\",\n          \"timeframe\": {\n            \"period\": \"quarterly\",\n            \"startTime\": \"2017-01-01T00:00:00.000Z\",\n            \"endTime\": \"2017-03-31T23:59:59.000Z\"\n          },\n          \"currentConsumption\": \"99950.0\",\n          \"currentThreshold\": \"100000.0\"\n        }, {\n          \"breachType\": \"THRESHOLD\",\n          \"breachedLimitType\": \"TRANSACTIONAL\",\n          \"currentThreshold\": \"499.9\"\n        }]\n      }],\n      \"globalBreachReport\": [{\n        \"alias\": \"Service Agreement Limit\",\n        \"currency\": \"EUR\",\n        \"limitedEntity\": [{\n          \"type\": \"Service Agreement\"\n        }],\n        \"breachInfo\": [{\n          \"breachType\": \"THRESHOLD\",\n          \"breachedLimitType\": \"PERIODIC\",\n          \"timeframe\": {\n            \"period\": \"daily\",\n            \"startTime\": \"2017-01-31T00:00:00.000Z\",\n            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n          },\n          \"currentConsumption\": \"250.0\",\n          \"currentThreshold\": \"499.9\"\n        }, {\n          \"breachType\": \"CONSUMPTION\",\n          \"breachedLimitType\": \"PERIODIC\",\n          \"timeframe\": {\n            \"period\": \"monthly\",\n            \"startTime\": \"2017-01-01T00:00:00.000Z\",\n            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n          },\n          \"currentConsumption\": \"9950.0\",\n          \"currentThreshold\": \"10000.0\"\n        }]\n      }]\n    }]\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nconst LimitsHttpServiceGetCurrencyMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/limits/currency\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"defaultCurrency\": \"EUR\",\n      \"allowedCurrencyList\": [\"EUR\", \"USD\", \"AED\"]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nconst LimitsHttpServiceGetGlobalLimitsMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/limits/global\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"limits\": [{\n        \"alias\": \"User Limit\",\n        \"uuid\": \"dfab7e60-064e-4af5-b54d-96d28fef0573\",\n        \"entities\": [{\n          \"type\": \"USER\"\n        }],\n        \"periodic-limits-bounds\": {\n          \"daily\": \"100.0\",\n          \"weekly\": \"120.0\",\n          \"monthly\": \"300.0\",\n          \"quarterly\": \"600.0\",\n          \"customPeriods\": [{\n            \"period\": \"biweekly\",\n            \"amount\": \"100\"\n          }]\n        },\n        \"transactional-limits-bound\": {\n          \"amount\": \"100.0\"\n        }\n      }, {\n        \"alias\": \"Service Agreement Limit\",\n        \"uuid\": \"a93cf136-ef7a-48eb-bde8-7f50e42540c8\",\n        \"entities\": [{\n          \"type\": \"SA\"\n        }],\n        \"periodic-limits-bounds\": {\n          \"daily\": \"1000.0\",\n          \"weekly\": \"1200.0\",\n          \"monthly\": \"3000.0\",\n          \"quarterly\": \"6000.0\",\n          \"customPeriods\": [{\n            \"period\": \"biweekly\",\n            \"amount\": \"1000\"\n          }]\n        },\n        \"transactional-limits-bound\": {\n          \"amount\": \"1000.0\"\n        }\n      }, {\n        \"alias\": \"Legal Entity Limit\",\n        \"uuid\": \"a93cf136-ef7a-48eb-bde8-7f50e42540c8\",\n        \"entities\": [{\n          \"type\": \"LE\"\n        }],\n        \"periodic-limits-bounds\": {\n          \"daily\": \"1000.0\",\n          \"weekly\": \"1200.0\",\n          \"monthly\": \"3000.0\",\n          \"quarterly\": \"6000.0\",\n          \"customPeriods\": [{\n            \"period\": \"biweekly\",\n            \"amount\": \"1000\"\n          }]\n        },\n        \"transactional-limits-bound\": {\n          \"amount\": \"1000.0\"\n        }\n      }],\n      \"currency\": \"EUR\"\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nconst LimitsHttpServiceGetSupportedPeriodsMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/limits/periods\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"name\": \"DAILY\"\n    }, {\n      \"name\": \"WEEKLY\"\n    }, {\n      \"name\": \"MONTHLY\"\n    }, {\n      \"name\": \"QUARTERLY\"\n    }, {\n      \"name\": \"YEARLY\"\n    }]\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nconst LimitsHttpServicePostCurrentLimitsConsumptionsRetrievalMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/limits/consumptions\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"limit\": {\n        \"alias\": \"\",\n        \"uuid\": \"1234-5678-9101-1121\",\n        \"user-BBID\": \"uuid-user-id\",\n        \"entities\": [{\n          \"etype\": \"LE\",\n          \"eref\": \"550e8400-e29b-41d4-a716-446655440000\"\n        }],\n        \"currency\": \"EUR\",\n        \"periodic-limits-bounds\": {\n          \"daily\": \"100.0\",\n          \"weekly\": \"120.0\",\n          \"monthly\": \"300.0\",\n          \"quarterly\": \"600.0\",\n          \"customPeriods\": [{\n            \"period\": \"biweekly\",\n            \"amount\": \"100\"\n          }]\n        },\n        \"shadow\": true\n      },\n      \"consumptions\": {\n        \"daily\": \"0.0\",\n        \"weekly\": \"50.0\",\n        \"monthly\": \"60.0\",\n        \"quarterly\": \"160.0\",\n        \"customPeriods\": [{\n          \"period\": \"biweekly\",\n          \"amount\": \"50\"\n        }]\n      },\n      \"checkTime\": \"2017-01-31T12:12:12.000Z\"\n    }]\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 422,\n    body: {\n      \"message\": \"Unprocessable Entity\",\n      \"errors\": [{\n        \"message\": \"Array size is over {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"100\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nconst LimitsHttpServicePostLimitsMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/limits\",\n  method: \"POST\",\n  responses: [{\n    status: 201,\n    body: {\n      \"uuid\": \"1234-1234-1312-5434\"\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 409,\n    body: {\n      \"message\": \"Conflict error\",\n      \"errors\": [{\n        \"message\": \"The request could not be completed due to a conflict with the current state of the resource.\",\n        \"key\": \"transactions.api.billingstatus.transaction\",\n        \"context\": {\n          \"billingStatus\": \"BILLED\"\n        }\n      }]\n    }\n  }, {\n    status: 422,\n    body: {\n      \"message\": \"Unprocessable Entity\",\n      \"errors\": [{\n        \"message\": \"Array size is over {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"100\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nconst LimitsHttpServicePostLimitsRetrievalMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/limits/retrieval\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"alias\": \"Personal Service Agreement Limit\",\n      \"uuid\": \"1234-5678-9101-1121\",\n      \"user-BBID\": \"uuid-user-id\",\n      \"entities\": [{\n        \"etype\": \"SA\",\n        \"eref\": \"550e8400-e29b-41d4-a716-446655440000\"\n      }],\n      \"approvalId\": \"710d559b-a922-424d-a21c-7e63b6351661\",\n      \"currency\": \"EUR\",\n      \"periodic-limits-bounds\": {\n        \"daily\": \"100.0\",\n        \"weekly\": \"120.0\",\n        \"monthly\": \"300.0\",\n        \"quarterly\": \"600.0\",\n        \"customPeriods\": [{\n          \"period\": \"biweekly\",\n          \"amount\": \"100\"\n        }]\n      },\n      \"shadow\": true\n    }]\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 422,\n    body: {\n      \"message\": \"Unprocessable Entity\",\n      \"errors\": [{\n        \"message\": \"Array size is over {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"100\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nconst LimitsHttpServicePostPeriodicLimitSoftCheckMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/limits/periodic/soft-check\",\n  method: \"POST\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 422,\n    body: {\n      \"message\": \"Unprocessable Entity\",\n      \"errors\": [{\n        \"message\": \"Array size is over {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"100\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nconst LimitsHttpServicePostTransactionalLimitSoftCheckMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/limits/transactional/soft-check\",\n  method: \"POST\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 422,\n    body: {\n      \"message\": \"Unprocessable Entity\",\n      \"errors\": [{\n        \"message\": \"Array size is over {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"100\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nconst LimitsHttpServicePutApprovalsMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/limits/{approvalId}/approvals\",\n  method: \"PUT\",\n  responses: [{\n    status: 200,\n    body: {\n      \"alias\": \"Personal Service Agreement Limit\",\n      \"uuid\": \"1234-5678-9101-1121\",\n      \"user-BBID\": \"uuid-user-id\",\n      \"entities\": [{\n        \"etype\": \"SA\",\n        \"eref\": \"550e8400-e29b-41d4-a716-446655440000\"\n      }],\n      \"currency\": \"EUR\",\n      \"periodic-limits-bounds\": {\n        \"daily\": \"100.0\",\n        \"weekly\": \"120.0\",\n        \"monthly\": \"300.0\",\n        \"quarterly\": \"600.0\",\n        \"customPeriods\": [{\n          \"period\": \"biweekly\",\n          \"amount\": \"100\"\n        }]\n      },\n      \"shadow\": true,\n      \"approvalStatus\": \"APPROVED\"\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nconst LimitsHttpServicePutGlobalLimitsMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/limits/global\",\n  method: \"PUT\",\n  responses: [{\n    status: 200,\n    body: {\n      \"limits\": [{\n        \"alias\": \"User Limit\",\n        \"uuid\": \"dfab7e60-064e-4af5-b54d-96d28fef0573\",\n        \"entities\": [{\n          \"type\": \"USER\"\n        }],\n        \"periodic-limits-bounds\": {\n          \"daily\": \"100.0\",\n          \"weekly\": \"120.0\",\n          \"monthly\": \"300.0\",\n          \"quarterly\": \"600.0\",\n          \"customPeriods\": [{\n            \"period\": \"biweekly\",\n            \"amount\": \"100\"\n          }]\n        },\n        \"transactional-limits-bound\": {\n          \"amount\": \"100.0\"\n        }\n      }, {\n        \"alias\": \"Service Agreement Limit\",\n        \"uuid\": \"a93cf136-ef7a-48eb-bde8-7f50e42540c8\",\n        \"entities\": [{\n          \"type\": \"SA\"\n        }],\n        \"periodic-limits-bounds\": {\n          \"daily\": \"1000.0\",\n          \"weekly\": \"1200.0\",\n          \"monthly\": \"3000.0\",\n          \"quarterly\": \"6000.0\",\n          \"customPeriods\": [{\n            \"period\": \"biweekly\",\n            \"amount\": \"1000\"\n          }]\n        },\n        \"transactional-limits-bound\": {\n          \"amount\": \"1000.0\"\n        }\n      }],\n      \"currency\": \"EUR\",\n      \"approvalId\": \"911c07d1-7f0c-4437-b27b-ae0d2bcf9e5c\"\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nconst LimitsHttpServicePutLimitByUuidMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/limits/{uuid}\",\n  method: \"PUT\",\n  responses: [{\n    status: 200,\n    body: {\n      \"alias\": \"Personal Service Agreement Limit\",\n      \"uuid\": \"1234-5678-9101-1121\",\n      \"user-BBID\": \"uuid-user-id\",\n      \"entities\": [{\n        \"etype\": \"SA\",\n        \"eref\": \"550e8400-e29b-41d4-a716-446655440000\"\n      }],\n      \"approvalId\": \"d1d0e7d0-30a4-472b-a8c0-3908b9e3847a\",\n      \"approvalStatus\": \"PENDING\",\n      \"currency\": \"EUR\",\n      \"periodic-limits-bounds\": {\n        \"daily\": \"100.0\",\n        \"weekly\": \"120.0\",\n        \"monthly\": \"300.0\",\n        \"quarterly\": \"600.0\",\n        \"customPeriods\": [{\n          \"period\": \"biweekly\",\n          \"amount\": \"100\"\n        }]\n      },\n      \"shadow\": true\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 422,\n    body: {\n      \"message\": \"Unprocessable Entity\",\n      \"errors\": [{\n        \"message\": \"Array size is over {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"100\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nconst LimitsHttpServiceMocksProvider = createMocks([{\n  urlPattern: \"/client-api/v2/limits/{approvalId}/approvals\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"alias\": \"Personal Service Agreement Limit\",\n      \"uuid\": \"1234-5678-9101-1121\",\n      \"user-BBID\": \"uuid-user-id\",\n      \"userName\": \"Full Username\",\n      \"entities\": [{\n        \"etype\": \"SA\",\n        \"eref\": \"550e8400-e29b-41d4-a716-446655440000\",\n        \"name\": \"Service agreement #1\"\n      }],\n      \"currency\": \"EUR\",\n      \"approval-currency\": \"EUR\",\n      \"periodic-limits-bounds\": {\n        \"daily\": \"100.0\",\n        \"weekly\": \"120.0\",\n        \"monthly\": \"300.0\",\n        \"quarterly\": \"600.0\"\n      },\n      \"approval-periodic-limits-bounds\": {\n        \"daily\": \"200.0\",\n        \"weekly\": \"300.0\",\n        \"monthly\": \"500.0\",\n        \"quarterly\": \"1000.0\"\n      },\n      \"shadow\": true,\n      \"approvalStatus\": \"PENDING\"\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/limits/{paymentRef}/breachreport\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"payment\": {\n        \"refNo\": \"4563-3474-34553-24556\",\n        \"user-BBID\": \"550e8400-e29b-41d4-a716-446655440000\",\n        \"amount\": \"599.99\",\n        \"effectiveDate\": \"2017-01-31T12:12:12.000Z\",\n        \"currency\": \"EUR\",\n        \"paymentType\": \"Domestic Payments\",\n        \"state\": \"NEW\"\n      },\n      \"matchedLimits\": 1,\n      \"consumption\": [{\n        \"limitId\": \"4563-3474-34553-24556\",\n        \"limitCcy\": \"EUR\",\n        \"consumedAmount\": \"599.99\",\n        \"consumedOn\": \"2017-01-31T12:12:12.000Z\",\n        \"state\": \"CONSUMED\"\n      }],\n      \"checkTime\": \"2017-01-31T12:12:12.000Z\",\n      \"breachReport\": [{\n        \"alias\": \"Personal Service Agreement Limit\",\n        \"user-BBID\": \"oleksii\",\n        \"limitedEntity\": [{\n          \"ref\": \"1234567-12312-123123\",\n          \"type\": \"Service Agreement\",\n          \"description\": \"Kuhic, Gislason and Kemmer. SERVICE AGREEMENT\"\n        }],\n        \"shadow\": false,\n        \"currency\": \"EUR\",\n        \"breachInfo\": [{\n          \"breachType\": \"THRESHOLD\",\n          \"breachedLimitType\": \"PERIODIC\",\n          \"timeframe\": {\n            \"period\": \"daily\",\n            \"startTime\": \"2017-01-31T00:00:00.000Z\",\n            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n          },\n          \"currentConsumption\": \"250.0\",\n          \"currentThreshold\": \"499.9\"\n        }, {\n          \"breachType\": \"CONSUMPTION\",\n          \"breachedLimitType\": \"PERIODIC\",\n          \"timeframe\": {\n            \"period\": \"monthly\",\n            \"startTime\": \"2017-01-01T00:00:00.000Z\",\n            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n          },\n          \"currentConsumption\": \"9950.0\",\n          \"currentThreshold\": \"10000.0\"\n        }]\n      }, {\n        \"alias\": \"Personal Limit\",\n        \"user-BBID\": \"oleksii\",\n        \"shadow\": false,\n        \"currency\": \"EUR\",\n        \"breachInfo\": [{\n          \"breachType\": \"CONSUMPTION\",\n          \"breachedLimitType\": \"PERIODIC\",\n          \"timeframe\": {\n            \"period\": \"daily\",\n            \"startTime\": \"2017-01-31T00:00:00.000Z\",\n            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n          },\n          \"currentConsumption\": \"500.0\",\n          \"currentThreshold\": \"1000.0\"\n        }]\n      }, {\n        \"alias\": \"Common Job Profile Limit\",\n        \"limitedEntity\": [{\n          \"ref\": \"1234567-12312-123123\",\n          \"type\": \"Function Access Group\",\n          \"description\": \"Payments approvers\"\n        }, {\n          \"ref\": \"1234567-12312-123123\",\n          \"type\": \"Function\",\n          \"description\": \"Domestic payments\"\n        }, {\n          \"ref\": \"Approve\",\n          \"type\": \"Privilege\",\n          \"description\": \"Approve\"\n        }, {\n          \"ref\": \"1234567-12312-123123\",\n          \"type\": \"Service Agreement\",\n          \"description\": \"Kuhic, Gislason and Kemmer. SERVICE AGREEMENT\"\n        }],\n        \"shadow\": false,\n        \"currency\": \"EUR\",\n        \"breachInfo\": [{\n          \"breachType\": \"THRESHOLD\",\n          \"breachedLimitType\": \"PERIODIC\",\n          \"timeframe\": {\n            \"period\": \"daily\",\n            \"startTime\": \"2017-01-31T00:00:00.000Z\",\n            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n          },\n          \"currentConsumption\": \"250.0\",\n          \"currentThreshold\": \"499.9\"\n        }]\n      }, {\n        \"alias\": \"\",\n        \"limitedEntity\": [{\n          \"ref\": \"1234567-12312-123123\",\n          \"type\": \"Legal Entity\",\n          \"description\": \"Kuhic, Gislason and Kemmer\"\n        }],\n        \"shadow\": false,\n        \"currency\": \"EUR\",\n        \"breachInfo\": [{\n          \"breachType\": \"CONSUMPTION\",\n          \"breachedLimitType\": \"PERIODIC\",\n          \"timeframe\": {\n            \"period\": \"quarterly\",\n            \"startTime\": \"2017-01-01T00:00:00.000Z\",\n            \"endTime\": \"2017-03-31T23:59:59.000Z\"\n          },\n          \"currentConsumption\": \"99950.0\",\n          \"currentThreshold\": \"100000.0\"\n        }, {\n          \"breachType\": \"THRESHOLD\",\n          \"breachedLimitType\": \"TRANSACTIONAL\",\n          \"currentThreshold\": \"499.9\"\n        }]\n      }],\n      \"globalBreachReport\": [{\n        \"alias\": \"Service Agreement Limit\",\n        \"currency\": \"EUR\",\n        \"limitedEntity\": [{\n          \"type\": \"Service Agreement\"\n        }],\n        \"breachInfo\": [{\n          \"breachType\": \"THRESHOLD\",\n          \"breachedLimitType\": \"PERIODIC\",\n          \"timeframe\": {\n            \"period\": \"daily\",\n            \"startTime\": \"2017-01-31T00:00:00.000Z\",\n            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n          },\n          \"currentConsumption\": \"250.0\",\n          \"currentThreshold\": \"499.9\"\n        }, {\n          \"breachType\": \"CONSUMPTION\",\n          \"breachedLimitType\": \"PERIODIC\",\n          \"timeframe\": {\n            \"period\": \"monthly\",\n            \"startTime\": \"2017-01-01T00:00:00.000Z\",\n            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n          },\n          \"currentConsumption\": \"9950.0\",\n          \"currentThreshold\": \"10000.0\"\n        }]\n      }]\n    }]\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/limits/currency\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"defaultCurrency\": \"EUR\",\n      \"allowedCurrencyList\": [\"EUR\", \"USD\", \"AED\"]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/limits/global\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: {\n      \"limits\": [{\n        \"alias\": \"User Limit\",\n        \"uuid\": \"dfab7e60-064e-4af5-b54d-96d28fef0573\",\n        \"entities\": [{\n          \"type\": \"USER\"\n        }],\n        \"periodic-limits-bounds\": {\n          \"daily\": \"100.0\",\n          \"weekly\": \"120.0\",\n          \"monthly\": \"300.0\",\n          \"quarterly\": \"600.0\",\n          \"customPeriods\": [{\n            \"period\": \"biweekly\",\n            \"amount\": \"100\"\n          }]\n        },\n        \"transactional-limits-bound\": {\n          \"amount\": \"100.0\"\n        }\n      }, {\n        \"alias\": \"Service Agreement Limit\",\n        \"uuid\": \"a93cf136-ef7a-48eb-bde8-7f50e42540c8\",\n        \"entities\": [{\n          \"type\": \"SA\"\n        }],\n        \"periodic-limits-bounds\": {\n          \"daily\": \"1000.0\",\n          \"weekly\": \"1200.0\",\n          \"monthly\": \"3000.0\",\n          \"quarterly\": \"6000.0\",\n          \"customPeriods\": [{\n            \"period\": \"biweekly\",\n            \"amount\": \"1000\"\n          }]\n        },\n        \"transactional-limits-bound\": {\n          \"amount\": \"1000.0\"\n        }\n      }, {\n        \"alias\": \"Legal Entity Limit\",\n        \"uuid\": \"a93cf136-ef7a-48eb-bde8-7f50e42540c8\",\n        \"entities\": [{\n          \"type\": \"LE\"\n        }],\n        \"periodic-limits-bounds\": {\n          \"daily\": \"1000.0\",\n          \"weekly\": \"1200.0\",\n          \"monthly\": \"3000.0\",\n          \"quarterly\": \"6000.0\",\n          \"customPeriods\": [{\n            \"period\": \"biweekly\",\n            \"amount\": \"1000\"\n          }]\n        },\n        \"transactional-limits-bound\": {\n          \"amount\": \"1000.0\"\n        }\n      }],\n      \"currency\": \"EUR\"\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/limits/periods\",\n  method: \"GET\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"name\": \"DAILY\"\n    }, {\n      \"name\": \"WEEKLY\"\n    }, {\n      \"name\": \"MONTHLY\"\n    }, {\n      \"name\": \"QUARTERLY\"\n    }, {\n      \"name\": \"YEARLY\"\n    }]\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/limits/consumptions\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"limit\": {\n        \"alias\": \"\",\n        \"uuid\": \"1234-5678-9101-1121\",\n        \"user-BBID\": \"uuid-user-id\",\n        \"entities\": [{\n          \"etype\": \"LE\",\n          \"eref\": \"550e8400-e29b-41d4-a716-446655440000\"\n        }],\n        \"currency\": \"EUR\",\n        \"periodic-limits-bounds\": {\n          \"daily\": \"100.0\",\n          \"weekly\": \"120.0\",\n          \"monthly\": \"300.0\",\n          \"quarterly\": \"600.0\",\n          \"customPeriods\": [{\n            \"period\": \"biweekly\",\n            \"amount\": \"100\"\n          }]\n        },\n        \"shadow\": true\n      },\n      \"consumptions\": {\n        \"daily\": \"0.0\",\n        \"weekly\": \"50.0\",\n        \"monthly\": \"60.0\",\n        \"quarterly\": \"160.0\",\n        \"customPeriods\": [{\n          \"period\": \"biweekly\",\n          \"amount\": \"50\"\n        }]\n      },\n      \"checkTime\": \"2017-01-31T12:12:12.000Z\"\n    }]\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 422,\n    body: {\n      \"message\": \"Unprocessable Entity\",\n      \"errors\": [{\n        \"message\": \"Array size is over {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"100\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/limits\",\n  method: \"POST\",\n  responses: [{\n    status: 201,\n    body: {\n      \"uuid\": \"1234-1234-1312-5434\"\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 409,\n    body: {\n      \"message\": \"Conflict error\",\n      \"errors\": [{\n        \"message\": \"The request could not be completed due to a conflict with the current state of the resource.\",\n        \"key\": \"transactions.api.billingstatus.transaction\",\n        \"context\": {\n          \"billingStatus\": \"BILLED\"\n        }\n      }]\n    }\n  }, {\n    status: 422,\n    body: {\n      \"message\": \"Unprocessable Entity\",\n      \"errors\": [{\n        \"message\": \"Array size is over {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"100\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/limits/retrieval\",\n  method: \"POST\",\n  responses: [{\n    status: 200,\n    body: [{\n      \"alias\": \"Personal Service Agreement Limit\",\n      \"uuid\": \"1234-5678-9101-1121\",\n      \"user-BBID\": \"uuid-user-id\",\n      \"entities\": [{\n        \"etype\": \"SA\",\n        \"eref\": \"550e8400-e29b-41d4-a716-446655440000\"\n      }],\n      \"approvalId\": \"710d559b-a922-424d-a21c-7e63b6351661\",\n      \"currency\": \"EUR\",\n      \"periodic-limits-bounds\": {\n        \"daily\": \"100.0\",\n        \"weekly\": \"120.0\",\n        \"monthly\": \"300.0\",\n        \"quarterly\": \"600.0\",\n        \"customPeriods\": [{\n          \"period\": \"biweekly\",\n          \"amount\": \"100\"\n        }]\n      },\n      \"shadow\": true\n    }]\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 422,\n    body: {\n      \"message\": \"Unprocessable Entity\",\n      \"errors\": [{\n        \"message\": \"Array size is over {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"100\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/limits/periodic/soft-check\",\n  method: \"POST\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 422,\n    body: {\n      \"message\": \"Unprocessable Entity\",\n      \"errors\": [{\n        \"message\": \"Array size is over {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"100\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/limits/transactional/soft-check\",\n  method: \"POST\",\n  responses: [{\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 422,\n    body: {\n      \"message\": \"Unprocessable Entity\",\n      \"errors\": [{\n        \"message\": \"Array size is over {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"100\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/limits/{approvalId}/approvals\",\n  method: \"PUT\",\n  responses: [{\n    status: 200,\n    body: {\n      \"alias\": \"Personal Service Agreement Limit\",\n      \"uuid\": \"1234-5678-9101-1121\",\n      \"user-BBID\": \"uuid-user-id\",\n      \"entities\": [{\n        \"etype\": \"SA\",\n        \"eref\": \"550e8400-e29b-41d4-a716-446655440000\"\n      }],\n      \"currency\": \"EUR\",\n      \"periodic-limits-bounds\": {\n        \"daily\": \"100.0\",\n        \"weekly\": \"120.0\",\n        \"monthly\": \"300.0\",\n        \"quarterly\": \"600.0\",\n        \"customPeriods\": [{\n          \"period\": \"biweekly\",\n          \"amount\": \"100\"\n        }]\n      },\n      \"shadow\": true,\n      \"approvalStatus\": \"APPROVED\"\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/limits/global\",\n  method: \"PUT\",\n  responses: [{\n    status: 200,\n    body: {\n      \"limits\": [{\n        \"alias\": \"User Limit\",\n        \"uuid\": \"dfab7e60-064e-4af5-b54d-96d28fef0573\",\n        \"entities\": [{\n          \"type\": \"USER\"\n        }],\n        \"periodic-limits-bounds\": {\n          \"daily\": \"100.0\",\n          \"weekly\": \"120.0\",\n          \"monthly\": \"300.0\",\n          \"quarterly\": \"600.0\",\n          \"customPeriods\": [{\n            \"period\": \"biweekly\",\n            \"amount\": \"100\"\n          }]\n        },\n        \"transactional-limits-bound\": {\n          \"amount\": \"100.0\"\n        }\n      }, {\n        \"alias\": \"Service Agreement Limit\",\n        \"uuid\": \"a93cf136-ef7a-48eb-bde8-7f50e42540c8\",\n        \"entities\": [{\n          \"type\": \"SA\"\n        }],\n        \"periodic-limits-bounds\": {\n          \"daily\": \"1000.0\",\n          \"weekly\": \"1200.0\",\n          \"monthly\": \"3000.0\",\n          \"quarterly\": \"6000.0\",\n          \"customPeriods\": [{\n            \"period\": \"biweekly\",\n            \"amount\": \"1000\"\n          }]\n        },\n        \"transactional-limits-bound\": {\n          \"amount\": \"1000.0\"\n        }\n      }],\n      \"currency\": \"EUR\",\n      \"approvalId\": \"911c07d1-7f0c-4437-b27b-ae0d2bcf9e5c\"\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}, {\n  urlPattern: \"/client-api/v2/limits/{uuid}\",\n  method: \"PUT\",\n  responses: [{\n    status: 200,\n    body: {\n      \"alias\": \"Personal Service Agreement Limit\",\n      \"uuid\": \"1234-5678-9101-1121\",\n      \"user-BBID\": \"uuid-user-id\",\n      \"entities\": [{\n        \"etype\": \"SA\",\n        \"eref\": \"550e8400-e29b-41d4-a716-446655440000\"\n      }],\n      \"approvalId\": \"d1d0e7d0-30a4-472b-a8c0-3908b9e3847a\",\n      \"approvalStatus\": \"PENDING\",\n      \"currency\": \"EUR\",\n      \"periodic-limits-bounds\": {\n        \"daily\": \"100.0\",\n        \"weekly\": \"120.0\",\n        \"monthly\": \"300.0\",\n        \"quarterly\": \"600.0\",\n        \"customPeriods\": [{\n          \"period\": \"biweekly\",\n          \"amount\": \"100\"\n        }]\n      },\n      \"shadow\": true\n    }\n  }, {\n    status: 400,\n    body: {\n      \"message\": \"Bad Request\",\n      \"errors\": [{\n        \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"50\",\n          \"min\": \"1\"\n        }\n      }]\n    }\n  }, {\n    status: 403,\n    body: {\n      \"message\": \"Access to requested resource denied.\",\n      \"errors\": [{\n        \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n        \"key\": \"common.api.quota\",\n        \"context\": {\n          \"quota\": \"someQuota\"\n        }\n      }]\n    }\n  }, {\n    status: 404,\n    body: {\n      \"message\": \"Resource not found.\",\n      \"errors\": [{\n        \"message\": \"Unable to find the resource requested resource: {resource}.\",\n        \"key\": \"common.api.resource\",\n        \"context\": {\n          \"resource\": \"aResource\"\n        }\n      }]\n    }\n  }, {\n    status: 422,\n    body: {\n      \"message\": \"Unprocessable Entity\",\n      \"errors\": [{\n        \"message\": \"Array size is over {max}.\",\n        \"key\": \"common.api.shoesize\",\n        \"context\": {\n          \"max\": \"100\"\n        }\n      }]\n    }\n  }, {\n    status: 500,\n    body: {\n      \"message\": \"Description of error\"\n    }\n  }]\n}]);\nexport { ApprovalStatus, BreachType, BreachedLimitType, COLLECTION_FORMATS, CONFIG_TOKEN, Consumption, GlobalLimitsApprovalHttpService, GlobalLimitsApprovalHttpServiceGetGlobalLimitsApprovalDetailsMocksProvider, GlobalLimitsApprovalHttpServiceMocksProvider, GlobalLimitsApprovalHttpServicePostGlobalLimitsApprovalStatusMocksProvider, LIMIT_BASE_PATH, LimitApiModule, LimitConfiguration, LimitsHttpService, LimitsHttpServiceGetApprovalsMocksProvider, LimitsHttpServiceGetBreachableOperationByPaymentRefMocksProvider, LimitsHttpServiceGetCurrencyMocksProvider, LimitsHttpServiceGetGlobalLimitsMocksProvider, LimitsHttpServiceGetSupportedPeriodsMocksProvider, LimitsHttpServiceMocksProvider, LimitsHttpServicePostCurrentLimitsConsumptionsRetrievalMocksProvider, LimitsHttpServicePostLimitsMocksProvider, LimitsHttpServicePostLimitsRetrievalMocksProvider, LimitsHttpServicePostPeriodicLimitSoftCheckMocksProvider, LimitsHttpServicePostTransactionalLimitSoftCheckMocksProvider, LimitsHttpServicePutApprovalsMocksProvider, LimitsHttpServicePutGlobalLimitsMocksProvider, LimitsHttpServicePutLimitByUuidMocksProvider, PaymentState };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/limit-http-ang/fesm2015/backbase-limit-http-ang.js"],"names":["i0","InjectionToken","NgModule","Optional","SkipSelf","Injectable","Inject","i1","HttpHeaders","i2","createMocks","ApprovalStatus","EFFECTIVE","PENDING","APPROVED","REJECTED","CANCELLED","BreachType","THRESHOLD","CONSUMPTION","BreachedLimitType","PERIODIC","TRANSACTIONAL","Consumption","StateEnum","CONSUMED","ROLLEDBACK","PaymentState","NEW","PARTIALLYAPPROVED","LIMIT_BASE_PATH","COLLECTION_FORMATS","LimitConfiguration","constructor","configurationParameters","apiKeys","username","password","accessToken","basePath","withCredentials","encoder","credentials","selectHeaderContentType","contentTypes","length","undefined","type","find","x","isJsonMime","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","lookupCredential","key","value","CONFIG_TOKEN","LimitApiModule","parentModule","http","dataModulesManager","config","Error","setModuleConfig","apiRoot","servicePath","headers","forRoot","configurationFactory","ngModule","providers","provide","useFactory","ɵfac","HttpClient","DataModulesManager","ɵmod","ɵinj","args","imports","declarations","exports","decorators","CustomHttpParameterCodec","encodeKey","k","encodeURIComponent","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","GlobalLimitsApprovalHttpService","httpClient","configuration","defaultHeaders","addToHttpParams","httpParams","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","append","toISOString","substr","Object","keys","getGlobalLimitsApprovalDetails","requestParameters","observe","reportProgress","options","_approvalId","httpHeaderAcceptSelected","httpHeaderAccept","httpHeaderAccepts","set","responseType","startsWith","get","String","getGlobalLimitsApprovalDetailsUrl","postGlobalLimitsApprovalStatus","_limitApprovalRequest","consumes","httpContentTypeSelected","post","postGlobalLimitsApprovalStatusUrl","ɵprov","providedIn","GlobalLimitsApprovalHttpServiceGetGlobalLimitsApprovalDetailsMocksProvider","urlPattern","method","responses","status","body","GlobalLimitsApprovalHttpServicePostGlobalLimitsApprovalStatusMocksProvider","GlobalLimitsApprovalHttpServiceMocksProvider","LimitsHttpService","getApprovals","getApprovalsUrl","getBreachableOperationByPaymentRef","_paymentRef","getBreachableOperationByPaymentRefUrl","getCurrency","getCurrencyUrl","getGlobalLimits","getGlobalLimitsUrl","getSupportedPeriods","getSupportedPeriodsUrl","postCurrentLimitsConsumptionsRetrieval","_currentLimitsConsumptionsRetrievalPostRequestBody","postCurrentLimitsConsumptionsRetrievalUrl","postLimits","_createLimitRequestBody","postLimitsUrl","postLimitsRetrieval","_limitsRetrievalPostRequestBody","postLimitsRetrievalUrl","postPeriodicLimitSoftCheck","_periodicLimitSoftCheckPostRequestBody","postPeriodicLimitSoftCheckUrl","postTransactionalLimitSoftCheck","_transactionalLimitSoftCheckPostRequestBody","postTransactionalLimitSoftCheckUrl","putApprovals","put","putApprovalsUrl","putGlobalLimits","_upsertGlobalLimitsRequestBody","putGlobalLimitsUrl","putLimitByUuid","_uuid","_updateLimitRequestBody","putLimitByUuidUrl","LimitsHttpServiceGetApprovalsMocksProvider","LimitsHttpServiceGetBreachableOperationByPaymentRefMocksProvider","LimitsHttpServiceGetCurrencyMocksProvider","LimitsHttpServiceGetGlobalLimitsMocksProvider","LimitsHttpServiceGetSupportedPeriodsMocksProvider","LimitsHttpServicePostCurrentLimitsConsumptionsRetrievalMocksProvider","LimitsHttpServicePostLimitsMocksProvider","LimitsHttpServicePostLimitsRetrievalMocksProvider","LimitsHttpServicePostPeriodicLimitSoftCheckMocksProvider","LimitsHttpServicePostTransactionalLimitSoftCheckMocksProvider","LimitsHttpServicePutApprovalsMocksProvider","LimitsHttpServicePutGlobalLimitsMocksProvider","LimitsHttpServicePutLimitByUuidMocksProvider","LimitsHttpServiceMocksProvider"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i2 from '@backbase/foundation-ang/data-http';\nimport { createMocks } from '@backbase/foundation-ang/data-http';\n\nconst ApprovalStatus = {\n    EFFECTIVE: 'EFFECTIVE',\n    PENDING: 'PENDING',\n    APPROVED: 'APPROVED',\n    REJECTED: 'REJECTED',\n    CANCELLED: 'CANCELLED'\n};\n\nconst BreachType = {\n    THRESHOLD: 'THRESHOLD',\n    CONSUMPTION: 'CONSUMPTION'\n};\n\nconst BreachedLimitType = {\n    PERIODIC: 'PERIODIC',\n    TRANSACTIONAL: 'TRANSACTIONAL'\n};\n\nvar Consumption;\n(function (Consumption) {\n    Consumption.StateEnum = {\n        CONSUMED: 'CONSUMED',\n        ROLLEDBACK: 'ROLLED_BACK'\n    };\n})(Consumption || (Consumption = {}));\n\nconst PaymentState = {\n    APPROVED: 'APPROVED',\n    NEW: 'NEW',\n    PARTIALLYAPPROVED: 'PARTIALLY_APPROVED'\n};\n\nconst LIMIT_BASE_PATH = new InjectionToken('LIMIT_BASE_PATH');\nconst COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n};\n\nclass LimitConfiguration {\n    constructor(configurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n    selectHeaderContentType(contentTypes) {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n        const type = contentTypes.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n    selectHeaderAccept(accepts) {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n        const type = accepts.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n    isJsonMime(mime) {\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n    lookupCredential(key) {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\nconst CONFIG_TOKEN = new InjectionToken('api-data-module LimitConfiguration');\n\nclass LimitApiModule {\n    constructor(parentModule, http, dataModulesManager, config) {\n        if (parentModule) {\n            throw new Error('LimitApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n                'See also https://github.com/angular/angular/issues/20575');\n        }\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n    static forRoot(configurationFactory) {\n        return {\n            ngModule: LimitApiModule,\n            providers: [{ provide: LimitConfiguration, useFactory: configurationFactory }]\n        };\n    }\n}\nLimitApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: LimitApiModule, deps: [{ token: LimitApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: LimitConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });\nLimitApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: LimitApiModule });\nLimitApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: LimitApiModule, providers: [], imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: LimitApiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [],\n                    declarations: [],\n                    exports: [],\n                    providers: []\n                }]\n        }], ctorParameters: function () { return [{ type: LimitApiModule, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DataModulesManager, decorators: [{\n                    type: Optional\n                }] }, { type: LimitConfiguration }]; } });\n\nclass CustomHttpParameterCodec {\n    encodeKey(k) {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v) {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k) {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v) {\n        return decodeURIComponent(v);\n    }\n}\n\nclass GlobalLimitsApprovalHttpService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new LimitConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getGlobalLimitsApprovalDetails(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _approvalId = requestParameters[\"approvalId\"];\n        if (_approvalId === null || _approvalId === undefined) {\n            throw new Error('Required parameter approvalId was null or undefined when calling getGlobalLimitsApprovalDetails.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/limits/global/approvals/${encodeURIComponent(String(_approvalId))}`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getGlobalLimitsApprovalDetailsUrl(requestParameters) {\n        const _approvalId = requestParameters[\"approvalId\"];\n        if (_approvalId === null || _approvalId === undefined) {\n            throw new Error('Required parameter approvalId was null or undefined when calling getGlobalLimitsApprovalDetails.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/limits/global/approvals/${encodeURIComponent(String(_approvalId))}`;\n    }\n    postGlobalLimitsApprovalStatus(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _approvalId = requestParameters[\"approvalId\"];\n        if (_approvalId === null || _approvalId === undefined) {\n            throw new Error('Required parameter approvalId was null or undefined when calling postGlobalLimitsApprovalStatus.');\n        }\n        const _limitApprovalRequest = requestParameters[\"limitApprovalRequest\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/limits/global/approvals/${encodeURIComponent(String(_approvalId))}/status`, _limitApprovalRequest, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    postGlobalLimitsApprovalStatusUrl(requestParameters) {\n        const _approvalId = requestParameters[\"approvalId\"];\n        if (_approvalId === null || _approvalId === undefined) {\n            throw new Error('Required parameter approvalId was null or undefined when calling postGlobalLimitsApprovalStatus.');\n        }\n        const _limitApprovalRequest = requestParameters[\"limitApprovalRequest\"];\n        return `${this.configuration.basePath}/client-api/v2/limits/global/approvals/${encodeURIComponent(String(_approvalId))}/status`;\n    }\n}\nGlobalLimitsApprovalHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: GlobalLimitsApprovalHttpService, deps: [{ token: i1.HttpClient }, { token: LIMIT_BASE_PATH, optional: true }, { token: LimitConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nGlobalLimitsApprovalHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: GlobalLimitsApprovalHttpService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: GlobalLimitsApprovalHttpService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [LIMIT_BASE_PATH]\n                }] }, { type: LimitConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst GlobalLimitsApprovalHttpServiceGetGlobalLimitsApprovalDetailsMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/limits/global/approvals/{approvalId}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"approvalId\": \"bc1c03f2-6483-46ca-a7ec-192a2d963a8d\",\n                    \"currency\": \"EUR\",\n                    \"limits\": [{\n                            \"alias\": \"Personal\",\n                            \"uuid\": \"e211eded-572f-48b1-8940-ae7a301838cb\",\n                            \"entities\": [{\n                                    \"type\": \"USER\"\n                                }],\n                            \"bounds\": [{\n                                    \"type\": \"daily\",\n                                    \"effectiveAmount\": \"200.00\",\n                                    \"pendingAmount\": \"300.00\"\n                                }, {\n                                    \"type\": \"weekly\",\n                                    \"effectiveAmount\": \"1000.00\",\n                                    \"pendingAmount\": \"\"\n                                }, {\n                                    \"type\": \"transactional\",\n                                    \"effectiveAmount\": \"\",\n                                    \"pendingAmount\": \"300.00\"\n                                }]\n                        }, {\n                            \"alias\": \"Service Agreement\",\n                            \"uuid\": \"ac825135-96ac-4883-8f46-aa5bd9497745\",\n                            \"entities\": [{\n                                    \"type\": \"SA\"\n                                }],\n                            \"bounds\": [{\n                                    \"type\": \"daily\",\n                                    \"effectiveAmount\": \"400.00\",\n                                    \"pendingAmount\": \"\"\n                                }, {\n                                    \"type\": \"weekly\",\n                                    \"effectiveAmount\": \"800.00\",\n                                    \"pendingAmount\": \"600\"\n                                }, {\n                                    \"type\": \"transactional\",\n                                    \"effectiveAmount\": \"300.00\",\n                                    \"pendingAmount\": \"300.00\"\n                                }]\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    }]);\nconst GlobalLimitsApprovalHttpServicePostGlobalLimitsApprovalStatusMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/limits/global/approvals/{approvalId}/status\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"approvalId\": \"bc1c03f2-6483-46ca-a7ec-192a2d963a8d\",\n                    \"approvalStatus\": \"APPROVED\"\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    }]);\nconst GlobalLimitsApprovalHttpServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/client-api/v2/limits/global/approvals/{approvalId}\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"approvalId\": \"bc1c03f2-6483-46ca-a7ec-192a2d963a8d\",\n                    \"currency\": \"EUR\",\n                    \"limits\": [{\n                            \"alias\": \"Personal\",\n                            \"uuid\": \"e211eded-572f-48b1-8940-ae7a301838cb\",\n                            \"entities\": [{\n                                    \"type\": \"USER\"\n                                }],\n                            \"bounds\": [{\n                                    \"type\": \"daily\",\n                                    \"effectiveAmount\": \"200.00\",\n                                    \"pendingAmount\": \"300.00\"\n                                }, {\n                                    \"type\": \"weekly\",\n                                    \"effectiveAmount\": \"1000.00\",\n                                    \"pendingAmount\": \"\"\n                                }, {\n                                    \"type\": \"transactional\",\n                                    \"effectiveAmount\": \"\",\n                                    \"pendingAmount\": \"300.00\"\n                                }]\n                        }, {\n                            \"alias\": \"Service Agreement\",\n                            \"uuid\": \"ac825135-96ac-4883-8f46-aa5bd9497745\",\n                            \"entities\": [{\n                                    \"type\": \"SA\"\n                                }],\n                            \"bounds\": [{\n                                    \"type\": \"daily\",\n                                    \"effectiveAmount\": \"400.00\",\n                                    \"pendingAmount\": \"\"\n                                }, {\n                                    \"type\": \"weekly\",\n                                    \"effectiveAmount\": \"800.00\",\n                                    \"pendingAmount\": \"600\"\n                                }, {\n                                    \"type\": \"transactional\",\n                                    \"effectiveAmount\": \"300.00\",\n                                    \"pendingAmount\": \"300.00\"\n                                }]\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/limits/global/approvals/{approvalId}/status\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"approvalId\": \"bc1c03f2-6483-46ca-a7ec-192a2d963a8d\",\n                    \"approvalStatus\": \"APPROVED\"\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    },\n]);\n\nclass LimitsHttpService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = '';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new LimitConfiguration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getApprovals(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _approvalId = requestParameters[\"approvalId\"];\n        if (_approvalId === null || _approvalId === undefined) {\n            throw new Error('Required parameter approvalId was null or undefined when calling getApprovals.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_approvalId))}/approvals`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getApprovalsUrl(requestParameters) {\n        const _approvalId = requestParameters[\"approvalId\"];\n        if (_approvalId === null || _approvalId === undefined) {\n            throw new Error('Required parameter approvalId was null or undefined when calling getApprovals.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_approvalId))}/approvals`;\n    }\n    getBreachableOperationByPaymentRef(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _paymentRef = requestParameters[\"paymentRef\"];\n        if (_paymentRef === null || _paymentRef === undefined) {\n            throw new Error('Required parameter paymentRef was null or undefined when calling getBreachableOperationByPaymentRef.');\n        }\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_paymentRef))}/breachreport`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getBreachableOperationByPaymentRefUrl(requestParameters) {\n        const _paymentRef = requestParameters[\"paymentRef\"];\n        if (_paymentRef === null || _paymentRef === undefined) {\n            throw new Error('Required parameter paymentRef was null or undefined when calling getBreachableOperationByPaymentRef.');\n        }\n        return `${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_paymentRef))}/breachreport`;\n    }\n    getCurrency(observe = 'body', reportProgress = false, options) {\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/limits/currency`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getCurrencyUrl() {\n        return `${this.configuration.basePath}/client-api/v2/limits/currency`;\n    }\n    getGlobalLimits(observe = 'body', reportProgress = false, options) {\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/limits/global`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getGlobalLimitsUrl() {\n        return `${this.configuration.basePath}/client-api/v2/limits/global`;\n    }\n    getSupportedPeriods(observe = 'body', reportProgress = false, options) {\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/limits/periods`, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getSupportedPeriodsUrl() {\n        return `${this.configuration.basePath}/client-api/v2/limits/periods`;\n    }\n    postCurrentLimitsConsumptionsRetrieval(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _currentLimitsConsumptionsRetrievalPostRequestBody = requestParameters[\"currentLimitsConsumptionsRetrievalPostRequestBody\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/limits/consumptions`, _currentLimitsConsumptionsRetrievalPostRequestBody, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    postCurrentLimitsConsumptionsRetrievalUrl(requestParameters) {\n        const _currentLimitsConsumptionsRetrievalPostRequestBody = requestParameters[\"currentLimitsConsumptionsRetrievalPostRequestBody\"];\n        return `${this.configuration.basePath}/client-api/v2/limits/consumptions`;\n    }\n    postLimits(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _createLimitRequestBody = requestParameters[\"createLimitRequestBody\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/limits`, _createLimitRequestBody, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    postLimitsUrl(requestParameters) {\n        const _createLimitRequestBody = requestParameters[\"createLimitRequestBody\"];\n        return `${this.configuration.basePath}/client-api/v2/limits`;\n    }\n    postLimitsRetrieval(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _limitsRetrievalPostRequestBody = requestParameters[\"limitsRetrievalPostRequestBody\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/limits/retrieval`, _limitsRetrievalPostRequestBody, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    postLimitsRetrievalUrl(requestParameters) {\n        const _limitsRetrievalPostRequestBody = requestParameters[\"limitsRetrievalPostRequestBody\"];\n        return `${this.configuration.basePath}/client-api/v2/limits/retrieval`;\n    }\n    postPeriodicLimitSoftCheck(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _periodicLimitSoftCheckPostRequestBody = requestParameters[\"periodicLimitSoftCheckPostRequestBody\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/limits/periodic/soft-check`, _periodicLimitSoftCheckPostRequestBody, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    postPeriodicLimitSoftCheckUrl(requestParameters) {\n        const _periodicLimitSoftCheckPostRequestBody = requestParameters[\"periodicLimitSoftCheckPostRequestBody\"];\n        return `${this.configuration.basePath}/client-api/v2/limits/periodic/soft-check`;\n    }\n    postTransactionalLimitSoftCheck(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _transactionalLimitSoftCheckPostRequestBody = requestParameters[\"transactionalLimitSoftCheckPostRequestBody\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/limits/transactional/soft-check`, _transactionalLimitSoftCheckPostRequestBody, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    postTransactionalLimitSoftCheckUrl(requestParameters) {\n        const _transactionalLimitSoftCheckPostRequestBody = requestParameters[\"transactionalLimitSoftCheckPostRequestBody\"];\n        return `${this.configuration.basePath}/client-api/v2/limits/transactional/soft-check`;\n    }\n    putApprovals(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _approvalId = requestParameters[\"approvalId\"];\n        if (_approvalId === null || _approvalId === undefined) {\n            throw new Error('Required parameter approvalId was null or undefined when calling putApprovals.');\n        }\n        const _limitApprovalRequest = requestParameters[\"limitApprovalRequest\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_approvalId))}/approvals`, _limitApprovalRequest, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    putApprovalsUrl(requestParameters) {\n        const _approvalId = requestParameters[\"approvalId\"];\n        if (_approvalId === null || _approvalId === undefined) {\n            throw new Error('Required parameter approvalId was null or undefined when calling putApprovals.');\n        }\n        const _limitApprovalRequest = requestParameters[\"limitApprovalRequest\"];\n        return `${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_approvalId))}/approvals`;\n    }\n    putGlobalLimits(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _upsertGlobalLimitsRequestBody = requestParameters[\"upsertGlobalLimitsRequestBody\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/limits/global`, _upsertGlobalLimitsRequestBody, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    putGlobalLimitsUrl(requestParameters) {\n        const _upsertGlobalLimitsRequestBody = requestParameters[\"upsertGlobalLimitsRequestBody\"];\n        return `${this.configuration.basePath}/client-api/v2/limits/global`;\n    }\n    putLimitByUuid(requestParameters, observe = 'body', reportProgress = false, options) {\n        const _uuid = requestParameters[\"uuid\"];\n        if (_uuid === null || _uuid === undefined) {\n            throw new Error('Required parameter uuid was null or undefined when calling putLimitByUuid.');\n        }\n        const _updateLimitRequestBody = requestParameters[\"updateLimitRequestBody\"];\n        let headers = this.defaultHeaders;\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            const httpHeaderAccepts = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_uuid))}`, _updateLimitRequestBody, {\n            responseType: responseType,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    putLimitByUuidUrl(requestParameters) {\n        const _uuid = requestParameters[\"uuid\"];\n        if (_uuid === null || _uuid === undefined) {\n            throw new Error('Required parameter uuid was null or undefined when calling putLimitByUuid.');\n        }\n        const _updateLimitRequestBody = requestParameters[\"updateLimitRequestBody\"];\n        return `${this.configuration.basePath}/client-api/v2/limits/${encodeURIComponent(String(_uuid))}`;\n    }\n}\nLimitsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: LimitsHttpService, deps: [{ token: i1.HttpClient }, { token: LIMIT_BASE_PATH, optional: true }, { token: LimitConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nLimitsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: LimitsHttpService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.15\", ngImport: i0, type: LimitsHttpService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [LIMIT_BASE_PATH]\n                }] }, { type: LimitConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst LimitsHttpServiceGetApprovalsMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/limits/{approvalId}/approvals\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"alias\": \"Personal Service Agreement Limit\",\n                    \"uuid\": \"1234-5678-9101-1121\",\n                    \"user-BBID\": \"uuid-user-id\",\n                    \"userName\": \"Full Username\",\n                    \"entities\": [{\n                            \"etype\": \"SA\",\n                            \"eref\": \"550e8400-e29b-41d4-a716-446655440000\",\n                            \"name\": \"Service agreement #1\"\n                        }],\n                    \"currency\": \"EUR\",\n                    \"approval-currency\": \"EUR\",\n                    \"periodic-limits-bounds\": {\n                        \"daily\": \"100.0\",\n                        \"weekly\": \"120.0\",\n                        \"monthly\": \"300.0\",\n                        \"quarterly\": \"600.0\"\n                    },\n                    \"approval-periodic-limits-bounds\": {\n                        \"daily\": \"200.0\",\n                        \"weekly\": \"300.0\",\n                        \"monthly\": \"500.0\",\n                        \"quarterly\": \"1000.0\"\n                    },\n                    \"shadow\": true,\n                    \"approvalStatus\": \"PENDING\"\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    }]);\nconst LimitsHttpServiceGetBreachableOperationByPaymentRefMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/limits/{paymentRef}/breachreport\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"payment\": {\n                            \"refNo\": \"4563-3474-34553-24556\",\n                            \"user-BBID\": \"550e8400-e29b-41d4-a716-446655440000\",\n                            \"amount\": \"599.99\",\n                            \"effectiveDate\": \"2017-01-31T12:12:12.000Z\",\n                            \"currency\": \"EUR\",\n                            \"paymentType\": \"Domestic Payments\",\n                            \"state\": \"NEW\"\n                        },\n                        \"matchedLimits\": 1,\n                        \"consumption\": [{\n                                \"limitId\": \"4563-3474-34553-24556\",\n                                \"limitCcy\": \"EUR\",\n                                \"consumedAmount\": \"599.99\",\n                                \"consumedOn\": \"2017-01-31T12:12:12.000Z\",\n                                \"state\": \"CONSUMED\"\n                            }],\n                        \"checkTime\": \"2017-01-31T12:12:12.000Z\",\n                        \"breachReport\": [{\n                                \"alias\": \"Personal Service Agreement Limit\",\n                                \"user-BBID\": \"oleksii\",\n                                \"limitedEntity\": [{\n                                        \"ref\": \"1234567-12312-123123\",\n                                        \"type\": \"Service Agreement\",\n                                        \"description\": \"Kuhic, Gislason and Kemmer. SERVICE AGREEMENT\"\n                                    }],\n                                \"shadow\": false,\n                                \"currency\": \"EUR\",\n                                \"breachInfo\": [{\n                                        \"breachType\": \"THRESHOLD\",\n                                        \"breachedLimitType\": \"PERIODIC\",\n                                        \"timeframe\": {\n                                            \"period\": \"daily\",\n                                            \"startTime\": \"2017-01-31T00:00:00.000Z\",\n                                            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n                                        },\n                                        \"currentConsumption\": \"250.0\",\n                                        \"currentThreshold\": \"499.9\"\n                                    }, {\n                                        \"breachType\": \"CONSUMPTION\",\n                                        \"breachedLimitType\": \"PERIODIC\",\n                                        \"timeframe\": {\n                                            \"period\": \"monthly\",\n                                            \"startTime\": \"2017-01-01T00:00:00.000Z\",\n                                            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n                                        },\n                                        \"currentConsumption\": \"9950.0\",\n                                        \"currentThreshold\": \"10000.0\"\n                                    }]\n                            }, {\n                                \"alias\": \"Personal Limit\",\n                                \"user-BBID\": \"oleksii\",\n                                \"shadow\": false,\n                                \"currency\": \"EUR\",\n                                \"breachInfo\": [{\n                                        \"breachType\": \"CONSUMPTION\",\n                                        \"breachedLimitType\": \"PERIODIC\",\n                                        \"timeframe\": {\n                                            \"period\": \"daily\",\n                                            \"startTime\": \"2017-01-31T00:00:00.000Z\",\n                                            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n                                        },\n                                        \"currentConsumption\": \"500.0\",\n                                        \"currentThreshold\": \"1000.0\"\n                                    }]\n                            }, {\n                                \"alias\": \"Common Job Profile Limit\",\n                                \"limitedEntity\": [{\n                                        \"ref\": \"1234567-12312-123123\",\n                                        \"type\": \"Function Access Group\",\n                                        \"description\": \"Payments approvers\"\n                                    }, {\n                                        \"ref\": \"1234567-12312-123123\",\n                                        \"type\": \"Function\",\n                                        \"description\": \"Domestic payments\"\n                                    }, {\n                                        \"ref\": \"Approve\",\n                                        \"type\": \"Privilege\",\n                                        \"description\": \"Approve\"\n                                    }, {\n                                        \"ref\": \"1234567-12312-123123\",\n                                        \"type\": \"Service Agreement\",\n                                        \"description\": \"Kuhic, Gislason and Kemmer. SERVICE AGREEMENT\"\n                                    }],\n                                \"shadow\": false,\n                                \"currency\": \"EUR\",\n                                \"breachInfo\": [{\n                                        \"breachType\": \"THRESHOLD\",\n                                        \"breachedLimitType\": \"PERIODIC\",\n                                        \"timeframe\": {\n                                            \"period\": \"daily\",\n                                            \"startTime\": \"2017-01-31T00:00:00.000Z\",\n                                            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n                                        },\n                                        \"currentConsumption\": \"250.0\",\n                                        \"currentThreshold\": \"499.9\"\n                                    }]\n                            }, {\n                                \"alias\": \"\",\n                                \"limitedEntity\": [{\n                                        \"ref\": \"1234567-12312-123123\",\n                                        \"type\": \"Legal Entity\",\n                                        \"description\": \"Kuhic, Gislason and Kemmer\"\n                                    }],\n                                \"shadow\": false,\n                                \"currency\": \"EUR\",\n                                \"breachInfo\": [{\n                                        \"breachType\": \"CONSUMPTION\",\n                                        \"breachedLimitType\": \"PERIODIC\",\n                                        \"timeframe\": {\n                                            \"period\": \"quarterly\",\n                                            \"startTime\": \"2017-01-01T00:00:00.000Z\",\n                                            \"endTime\": \"2017-03-31T23:59:59.000Z\"\n                                        },\n                                        \"currentConsumption\": \"99950.0\",\n                                        \"currentThreshold\": \"100000.0\"\n                                    }, {\n                                        \"breachType\": \"THRESHOLD\",\n                                        \"breachedLimitType\": \"TRANSACTIONAL\",\n                                        \"currentThreshold\": \"499.9\"\n                                    }]\n                            }],\n                        \"globalBreachReport\": [{\n                                \"alias\": \"Service Agreement Limit\",\n                                \"currency\": \"EUR\",\n                                \"limitedEntity\": [{\n                                        \"type\": \"Service Agreement\"\n                                    }],\n                                \"breachInfo\": [{\n                                        \"breachType\": \"THRESHOLD\",\n                                        \"breachedLimitType\": \"PERIODIC\",\n                                        \"timeframe\": {\n                                            \"period\": \"daily\",\n                                            \"startTime\": \"2017-01-31T00:00:00.000Z\",\n                                            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n                                        },\n                                        \"currentConsumption\": \"250.0\",\n                                        \"currentThreshold\": \"499.9\"\n                                    }, {\n                                        \"breachType\": \"CONSUMPTION\",\n                                        \"breachedLimitType\": \"PERIODIC\",\n                                        \"timeframe\": {\n                                            \"period\": \"monthly\",\n                                            \"startTime\": \"2017-01-01T00:00:00.000Z\",\n                                            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n                                        },\n                                        \"currentConsumption\": \"9950.0\",\n                                        \"currentThreshold\": \"10000.0\"\n                                    }]\n                            }]\n                    }]\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    }]);\nconst LimitsHttpServiceGetCurrencyMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/limits/currency\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"defaultCurrency\": \"EUR\",\n                    \"allowedCurrencyList\": [\"EUR\", \"USD\", \"AED\"]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    }]);\nconst LimitsHttpServiceGetGlobalLimitsMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/limits/global\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"limits\": [{\n                            \"alias\": \"User Limit\",\n                            \"uuid\": \"dfab7e60-064e-4af5-b54d-96d28fef0573\",\n                            \"entities\": [{\n                                    \"type\": \"USER\"\n                                }],\n                            \"periodic-limits-bounds\": {\n                                \"daily\": \"100.0\",\n                                \"weekly\": \"120.0\",\n                                \"monthly\": \"300.0\",\n                                \"quarterly\": \"600.0\",\n                                \"customPeriods\": [{\n                                        \"period\": \"biweekly\",\n                                        \"amount\": \"100\"\n                                    }]\n                            },\n                            \"transactional-limits-bound\": {\n                                \"amount\": \"100.0\"\n                            }\n                        }, {\n                            \"alias\": \"Service Agreement Limit\",\n                            \"uuid\": \"a93cf136-ef7a-48eb-bde8-7f50e42540c8\",\n                            \"entities\": [{\n                                    \"type\": \"SA\"\n                                }],\n                            \"periodic-limits-bounds\": {\n                                \"daily\": \"1000.0\",\n                                \"weekly\": \"1200.0\",\n                                \"monthly\": \"3000.0\",\n                                \"quarterly\": \"6000.0\",\n                                \"customPeriods\": [{\n                                        \"period\": \"biweekly\",\n                                        \"amount\": \"1000\"\n                                    }]\n                            },\n                            \"transactional-limits-bound\": {\n                                \"amount\": \"1000.0\"\n                            }\n                        }, {\n                            \"alias\": \"Legal Entity Limit\",\n                            \"uuid\": \"a93cf136-ef7a-48eb-bde8-7f50e42540c8\",\n                            \"entities\": [{\n                                    \"type\": \"LE\"\n                                }],\n                            \"periodic-limits-bounds\": {\n                                \"daily\": \"1000.0\",\n                                \"weekly\": \"1200.0\",\n                                \"monthly\": \"3000.0\",\n                                \"quarterly\": \"6000.0\",\n                                \"customPeriods\": [{\n                                        \"period\": \"biweekly\",\n                                        \"amount\": \"1000\"\n                                    }]\n                            },\n                            \"transactional-limits-bound\": {\n                                \"amount\": \"1000.0\"\n                            }\n                        }],\n                    \"currency\": \"EUR\"\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    }]);\nconst LimitsHttpServiceGetSupportedPeriodsMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/limits/periods\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"name\": \"DAILY\"\n                    }, {\n                        \"name\": \"WEEKLY\"\n                    }, {\n                        \"name\": \"MONTHLY\"\n                    }, {\n                        \"name\": \"QUARTERLY\"\n                    }, {\n                        \"name\": \"YEARLY\"\n                    }]\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    }]);\nconst LimitsHttpServicePostCurrentLimitsConsumptionsRetrievalMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/limits/consumptions\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"limit\": {\n                            \"alias\": \"\",\n                            \"uuid\": \"1234-5678-9101-1121\",\n                            \"user-BBID\": \"uuid-user-id\",\n                            \"entities\": [{\n                                    \"etype\": \"LE\",\n                                    \"eref\": \"550e8400-e29b-41d4-a716-446655440000\"\n                                }],\n                            \"currency\": \"EUR\",\n                            \"periodic-limits-bounds\": {\n                                \"daily\": \"100.0\",\n                                \"weekly\": \"120.0\",\n                                \"monthly\": \"300.0\",\n                                \"quarterly\": \"600.0\",\n                                \"customPeriods\": [{\n                                        \"period\": \"biweekly\",\n                                        \"amount\": \"100\"\n                                    }]\n                            },\n                            \"shadow\": true\n                        },\n                        \"consumptions\": {\n                            \"daily\": \"0.0\",\n                            \"weekly\": \"50.0\",\n                            \"monthly\": \"60.0\",\n                            \"quarterly\": \"160.0\",\n                            \"customPeriods\": [{\n                                    \"period\": \"biweekly\",\n                                    \"amount\": \"50\"\n                                }]\n                        },\n                        \"checkTime\": \"2017-01-31T12:12:12.000Z\"\n                    }]\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 422,\n                body: {\n                    \"message\": \"Unprocessable Entity\",\n                    \"errors\": [{\n                            \"message\": \"Array size is over {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"100\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    }]);\nconst LimitsHttpServicePostLimitsMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/limits\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 201,\n                body: {\n                    \"uuid\": \"1234-1234-1312-5434\"\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 409,\n                body: {\n                    \"message\": \"Conflict error\",\n                    \"errors\": [{\n                            \"message\": \"The request could not be completed due to a conflict with the current state of the resource.\",\n                            \"key\": \"transactions.api.billingstatus.transaction\",\n                            \"context\": {\n                                \"billingStatus\": \"BILLED\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 422,\n                body: {\n                    \"message\": \"Unprocessable Entity\",\n                    \"errors\": [{\n                            \"message\": \"Array size is over {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"100\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    }]);\nconst LimitsHttpServicePostLimitsRetrievalMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/limits/retrieval\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"alias\": \"Personal Service Agreement Limit\",\n                        \"uuid\": \"1234-5678-9101-1121\",\n                        \"user-BBID\": \"uuid-user-id\",\n                        \"entities\": [{\n                                \"etype\": \"SA\",\n                                \"eref\": \"550e8400-e29b-41d4-a716-446655440000\"\n                            }],\n                        \"approvalId\": \"710d559b-a922-424d-a21c-7e63b6351661\",\n                        \"currency\": \"EUR\",\n                        \"periodic-limits-bounds\": {\n                            \"daily\": \"100.0\",\n                            \"weekly\": \"120.0\",\n                            \"monthly\": \"300.0\",\n                            \"quarterly\": \"600.0\",\n                            \"customPeriods\": [{\n                                    \"period\": \"biweekly\",\n                                    \"amount\": \"100\"\n                                }]\n                        },\n                        \"shadow\": true\n                    }]\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 422,\n                body: {\n                    \"message\": \"Unprocessable Entity\",\n                    \"errors\": [{\n                            \"message\": \"Array size is over {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"100\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    }]);\nconst LimitsHttpServicePostPeriodicLimitSoftCheckMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/limits/periodic/soft-check\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 422,\n                body: {\n                    \"message\": \"Unprocessable Entity\",\n                    \"errors\": [{\n                            \"message\": \"Array size is over {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"100\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    }]);\nconst LimitsHttpServicePostTransactionalLimitSoftCheckMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/limits/transactional/soft-check\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 422,\n                body: {\n                    \"message\": \"Unprocessable Entity\",\n                    \"errors\": [{\n                            \"message\": \"Array size is over {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"100\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    }]);\nconst LimitsHttpServicePutApprovalsMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/limits/{approvalId}/approvals\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"alias\": \"Personal Service Agreement Limit\",\n                    \"uuid\": \"1234-5678-9101-1121\",\n                    \"user-BBID\": \"uuid-user-id\",\n                    \"entities\": [{\n                            \"etype\": \"SA\",\n                            \"eref\": \"550e8400-e29b-41d4-a716-446655440000\"\n                        }],\n                    \"currency\": \"EUR\",\n                    \"periodic-limits-bounds\": {\n                        \"daily\": \"100.0\",\n                        \"weekly\": \"120.0\",\n                        \"monthly\": \"300.0\",\n                        \"quarterly\": \"600.0\",\n                        \"customPeriods\": [{\n                                \"period\": \"biweekly\",\n                                \"amount\": \"100\"\n                            }]\n                    },\n                    \"shadow\": true,\n                    \"approvalStatus\": \"APPROVED\"\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    }]);\nconst LimitsHttpServicePutGlobalLimitsMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/limits/global\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"limits\": [{\n                            \"alias\": \"User Limit\",\n                            \"uuid\": \"dfab7e60-064e-4af5-b54d-96d28fef0573\",\n                            \"entities\": [{\n                                    \"type\": \"USER\"\n                                }],\n                            \"periodic-limits-bounds\": {\n                                \"daily\": \"100.0\",\n                                \"weekly\": \"120.0\",\n                                \"monthly\": \"300.0\",\n                                \"quarterly\": \"600.0\",\n                                \"customPeriods\": [{\n                                        \"period\": \"biweekly\",\n                                        \"amount\": \"100\"\n                                    }]\n                            },\n                            \"transactional-limits-bound\": {\n                                \"amount\": \"100.0\"\n                            }\n                        }, {\n                            \"alias\": \"Service Agreement Limit\",\n                            \"uuid\": \"a93cf136-ef7a-48eb-bde8-7f50e42540c8\",\n                            \"entities\": [{\n                                    \"type\": \"SA\"\n                                }],\n                            \"periodic-limits-bounds\": {\n                                \"daily\": \"1000.0\",\n                                \"weekly\": \"1200.0\",\n                                \"monthly\": \"3000.0\",\n                                \"quarterly\": \"6000.0\",\n                                \"customPeriods\": [{\n                                        \"period\": \"biweekly\",\n                                        \"amount\": \"1000\"\n                                    }]\n                            },\n                            \"transactional-limits-bound\": {\n                                \"amount\": \"1000.0\"\n                            }\n                        }],\n                    \"currency\": \"EUR\",\n                    \"approvalId\": \"911c07d1-7f0c-4437-b27b-ae0d2bcf9e5c\"\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    }]);\nconst LimitsHttpServicePutLimitByUuidMocksProvider = createMocks([{\n        urlPattern: \"/client-api/v2/limits/{uuid}\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"alias\": \"Personal Service Agreement Limit\",\n                    \"uuid\": \"1234-5678-9101-1121\",\n                    \"user-BBID\": \"uuid-user-id\",\n                    \"entities\": [{\n                            \"etype\": \"SA\",\n                            \"eref\": \"550e8400-e29b-41d4-a716-446655440000\"\n                        }],\n                    \"approvalId\": \"d1d0e7d0-30a4-472b-a8c0-3908b9e3847a\",\n                    \"approvalStatus\": \"PENDING\",\n                    \"currency\": \"EUR\",\n                    \"periodic-limits-bounds\": {\n                        \"daily\": \"100.0\",\n                        \"weekly\": \"120.0\",\n                        \"monthly\": \"300.0\",\n                        \"quarterly\": \"600.0\",\n                        \"customPeriods\": [{\n                                \"period\": \"biweekly\",\n                                \"amount\": \"100\"\n                            }]\n                    },\n                    \"shadow\": true\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 422,\n                body: {\n                    \"message\": \"Unprocessable Entity\",\n                    \"errors\": [{\n                            \"message\": \"Array size is over {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"100\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    }]);\nconst LimitsHttpServiceMocksProvider = createMocks([\n    {\n        urlPattern: \"/client-api/v2/limits/{approvalId}/approvals\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"alias\": \"Personal Service Agreement Limit\",\n                    \"uuid\": \"1234-5678-9101-1121\",\n                    \"user-BBID\": \"uuid-user-id\",\n                    \"userName\": \"Full Username\",\n                    \"entities\": [{\n                            \"etype\": \"SA\",\n                            \"eref\": \"550e8400-e29b-41d4-a716-446655440000\",\n                            \"name\": \"Service agreement #1\"\n                        }],\n                    \"currency\": \"EUR\",\n                    \"approval-currency\": \"EUR\",\n                    \"periodic-limits-bounds\": {\n                        \"daily\": \"100.0\",\n                        \"weekly\": \"120.0\",\n                        \"monthly\": \"300.0\",\n                        \"quarterly\": \"600.0\"\n                    },\n                    \"approval-periodic-limits-bounds\": {\n                        \"daily\": \"200.0\",\n                        \"weekly\": \"300.0\",\n                        \"monthly\": \"500.0\",\n                        \"quarterly\": \"1000.0\"\n                    },\n                    \"shadow\": true,\n                    \"approvalStatus\": \"PENDING\"\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/limits/{paymentRef}/breachreport\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"payment\": {\n                            \"refNo\": \"4563-3474-34553-24556\",\n                            \"user-BBID\": \"550e8400-e29b-41d4-a716-446655440000\",\n                            \"amount\": \"599.99\",\n                            \"effectiveDate\": \"2017-01-31T12:12:12.000Z\",\n                            \"currency\": \"EUR\",\n                            \"paymentType\": \"Domestic Payments\",\n                            \"state\": \"NEW\"\n                        },\n                        \"matchedLimits\": 1,\n                        \"consumption\": [{\n                                \"limitId\": \"4563-3474-34553-24556\",\n                                \"limitCcy\": \"EUR\",\n                                \"consumedAmount\": \"599.99\",\n                                \"consumedOn\": \"2017-01-31T12:12:12.000Z\",\n                                \"state\": \"CONSUMED\"\n                            }],\n                        \"checkTime\": \"2017-01-31T12:12:12.000Z\",\n                        \"breachReport\": [{\n                                \"alias\": \"Personal Service Agreement Limit\",\n                                \"user-BBID\": \"oleksii\",\n                                \"limitedEntity\": [{\n                                        \"ref\": \"1234567-12312-123123\",\n                                        \"type\": \"Service Agreement\",\n                                        \"description\": \"Kuhic, Gislason and Kemmer. SERVICE AGREEMENT\"\n                                    }],\n                                \"shadow\": false,\n                                \"currency\": \"EUR\",\n                                \"breachInfo\": [{\n                                        \"breachType\": \"THRESHOLD\",\n                                        \"breachedLimitType\": \"PERIODIC\",\n                                        \"timeframe\": {\n                                            \"period\": \"daily\",\n                                            \"startTime\": \"2017-01-31T00:00:00.000Z\",\n                                            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n                                        },\n                                        \"currentConsumption\": \"250.0\",\n                                        \"currentThreshold\": \"499.9\"\n                                    }, {\n                                        \"breachType\": \"CONSUMPTION\",\n                                        \"breachedLimitType\": \"PERIODIC\",\n                                        \"timeframe\": {\n                                            \"period\": \"monthly\",\n                                            \"startTime\": \"2017-01-01T00:00:00.000Z\",\n                                            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n                                        },\n                                        \"currentConsumption\": \"9950.0\",\n                                        \"currentThreshold\": \"10000.0\"\n                                    }]\n                            }, {\n                                \"alias\": \"Personal Limit\",\n                                \"user-BBID\": \"oleksii\",\n                                \"shadow\": false,\n                                \"currency\": \"EUR\",\n                                \"breachInfo\": [{\n                                        \"breachType\": \"CONSUMPTION\",\n                                        \"breachedLimitType\": \"PERIODIC\",\n                                        \"timeframe\": {\n                                            \"period\": \"daily\",\n                                            \"startTime\": \"2017-01-31T00:00:00.000Z\",\n                                            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n                                        },\n                                        \"currentConsumption\": \"500.0\",\n                                        \"currentThreshold\": \"1000.0\"\n                                    }]\n                            }, {\n                                \"alias\": \"Common Job Profile Limit\",\n                                \"limitedEntity\": [{\n                                        \"ref\": \"1234567-12312-123123\",\n                                        \"type\": \"Function Access Group\",\n                                        \"description\": \"Payments approvers\"\n                                    }, {\n                                        \"ref\": \"1234567-12312-123123\",\n                                        \"type\": \"Function\",\n                                        \"description\": \"Domestic payments\"\n                                    }, {\n                                        \"ref\": \"Approve\",\n                                        \"type\": \"Privilege\",\n                                        \"description\": \"Approve\"\n                                    }, {\n                                        \"ref\": \"1234567-12312-123123\",\n                                        \"type\": \"Service Agreement\",\n                                        \"description\": \"Kuhic, Gislason and Kemmer. SERVICE AGREEMENT\"\n                                    }],\n                                \"shadow\": false,\n                                \"currency\": \"EUR\",\n                                \"breachInfo\": [{\n                                        \"breachType\": \"THRESHOLD\",\n                                        \"breachedLimitType\": \"PERIODIC\",\n                                        \"timeframe\": {\n                                            \"period\": \"daily\",\n                                            \"startTime\": \"2017-01-31T00:00:00.000Z\",\n                                            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n                                        },\n                                        \"currentConsumption\": \"250.0\",\n                                        \"currentThreshold\": \"499.9\"\n                                    }]\n                            }, {\n                                \"alias\": \"\",\n                                \"limitedEntity\": [{\n                                        \"ref\": \"1234567-12312-123123\",\n                                        \"type\": \"Legal Entity\",\n                                        \"description\": \"Kuhic, Gislason and Kemmer\"\n                                    }],\n                                \"shadow\": false,\n                                \"currency\": \"EUR\",\n                                \"breachInfo\": [{\n                                        \"breachType\": \"CONSUMPTION\",\n                                        \"breachedLimitType\": \"PERIODIC\",\n                                        \"timeframe\": {\n                                            \"period\": \"quarterly\",\n                                            \"startTime\": \"2017-01-01T00:00:00.000Z\",\n                                            \"endTime\": \"2017-03-31T23:59:59.000Z\"\n                                        },\n                                        \"currentConsumption\": \"99950.0\",\n                                        \"currentThreshold\": \"100000.0\"\n                                    }, {\n                                        \"breachType\": \"THRESHOLD\",\n                                        \"breachedLimitType\": \"TRANSACTIONAL\",\n                                        \"currentThreshold\": \"499.9\"\n                                    }]\n                            }],\n                        \"globalBreachReport\": [{\n                                \"alias\": \"Service Agreement Limit\",\n                                \"currency\": \"EUR\",\n                                \"limitedEntity\": [{\n                                        \"type\": \"Service Agreement\"\n                                    }],\n                                \"breachInfo\": [{\n                                        \"breachType\": \"THRESHOLD\",\n                                        \"breachedLimitType\": \"PERIODIC\",\n                                        \"timeframe\": {\n                                            \"period\": \"daily\",\n                                            \"startTime\": \"2017-01-31T00:00:00.000Z\",\n                                            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n                                        },\n                                        \"currentConsumption\": \"250.0\",\n                                        \"currentThreshold\": \"499.9\"\n                                    }, {\n                                        \"breachType\": \"CONSUMPTION\",\n                                        \"breachedLimitType\": \"PERIODIC\",\n                                        \"timeframe\": {\n                                            \"period\": \"monthly\",\n                                            \"startTime\": \"2017-01-01T00:00:00.000Z\",\n                                            \"endTime\": \"2017-01-31T23:59:59.000Z\"\n                                        },\n                                        \"currentConsumption\": \"9950.0\",\n                                        \"currentThreshold\": \"10000.0\"\n                                    }]\n                            }]\n                    }]\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/limits/currency\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"defaultCurrency\": \"EUR\",\n                    \"allowedCurrencyList\": [\"EUR\", \"USD\", \"AED\"]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/limits/global\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"limits\": [{\n                            \"alias\": \"User Limit\",\n                            \"uuid\": \"dfab7e60-064e-4af5-b54d-96d28fef0573\",\n                            \"entities\": [{\n                                    \"type\": \"USER\"\n                                }],\n                            \"periodic-limits-bounds\": {\n                                \"daily\": \"100.0\",\n                                \"weekly\": \"120.0\",\n                                \"monthly\": \"300.0\",\n                                \"quarterly\": \"600.0\",\n                                \"customPeriods\": [{\n                                        \"period\": \"biweekly\",\n                                        \"amount\": \"100\"\n                                    }]\n                            },\n                            \"transactional-limits-bound\": {\n                                \"amount\": \"100.0\"\n                            }\n                        }, {\n                            \"alias\": \"Service Agreement Limit\",\n                            \"uuid\": \"a93cf136-ef7a-48eb-bde8-7f50e42540c8\",\n                            \"entities\": [{\n                                    \"type\": \"SA\"\n                                }],\n                            \"periodic-limits-bounds\": {\n                                \"daily\": \"1000.0\",\n                                \"weekly\": \"1200.0\",\n                                \"monthly\": \"3000.0\",\n                                \"quarterly\": \"6000.0\",\n                                \"customPeriods\": [{\n                                        \"period\": \"biweekly\",\n                                        \"amount\": \"1000\"\n                                    }]\n                            },\n                            \"transactional-limits-bound\": {\n                                \"amount\": \"1000.0\"\n                            }\n                        }, {\n                            \"alias\": \"Legal Entity Limit\",\n                            \"uuid\": \"a93cf136-ef7a-48eb-bde8-7f50e42540c8\",\n                            \"entities\": [{\n                                    \"type\": \"LE\"\n                                }],\n                            \"periodic-limits-bounds\": {\n                                \"daily\": \"1000.0\",\n                                \"weekly\": \"1200.0\",\n                                \"monthly\": \"3000.0\",\n                                \"quarterly\": \"6000.0\",\n                                \"customPeriods\": [{\n                                        \"period\": \"biweekly\",\n                                        \"amount\": \"1000\"\n                                    }]\n                            },\n                            \"transactional-limits-bound\": {\n                                \"amount\": \"1000.0\"\n                            }\n                        }],\n                    \"currency\": \"EUR\"\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/limits/periods\",\n        method: \"GET\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"name\": \"DAILY\"\n                    }, {\n                        \"name\": \"WEEKLY\"\n                    }, {\n                        \"name\": \"MONTHLY\"\n                    }, {\n                        \"name\": \"QUARTERLY\"\n                    }, {\n                        \"name\": \"YEARLY\"\n                    }]\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/limits/consumptions\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"limit\": {\n                            \"alias\": \"\",\n                            \"uuid\": \"1234-5678-9101-1121\",\n                            \"user-BBID\": \"uuid-user-id\",\n                            \"entities\": [{\n                                    \"etype\": \"LE\",\n                                    \"eref\": \"550e8400-e29b-41d4-a716-446655440000\"\n                                }],\n                            \"currency\": \"EUR\",\n                            \"periodic-limits-bounds\": {\n                                \"daily\": \"100.0\",\n                                \"weekly\": \"120.0\",\n                                \"monthly\": \"300.0\",\n                                \"quarterly\": \"600.0\",\n                                \"customPeriods\": [{\n                                        \"period\": \"biweekly\",\n                                        \"amount\": \"100\"\n                                    }]\n                            },\n                            \"shadow\": true\n                        },\n                        \"consumptions\": {\n                            \"daily\": \"0.0\",\n                            \"weekly\": \"50.0\",\n                            \"monthly\": \"60.0\",\n                            \"quarterly\": \"160.0\",\n                            \"customPeriods\": [{\n                                    \"period\": \"biweekly\",\n                                    \"amount\": \"50\"\n                                }]\n                        },\n                        \"checkTime\": \"2017-01-31T12:12:12.000Z\"\n                    }]\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 422,\n                body: {\n                    \"message\": \"Unprocessable Entity\",\n                    \"errors\": [{\n                            \"message\": \"Array size is over {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"100\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/limits\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 201,\n                body: {\n                    \"uuid\": \"1234-1234-1312-5434\"\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 409,\n                body: {\n                    \"message\": \"Conflict error\",\n                    \"errors\": [{\n                            \"message\": \"The request could not be completed due to a conflict with the current state of the resource.\",\n                            \"key\": \"transactions.api.billingstatus.transaction\",\n                            \"context\": {\n                                \"billingStatus\": \"BILLED\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 422,\n                body: {\n                    \"message\": \"Unprocessable Entity\",\n                    \"errors\": [{\n                            \"message\": \"Array size is over {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"100\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/limits/retrieval\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 200,\n                body: [{\n                        \"alias\": \"Personal Service Agreement Limit\",\n                        \"uuid\": \"1234-5678-9101-1121\",\n                        \"user-BBID\": \"uuid-user-id\",\n                        \"entities\": [{\n                                \"etype\": \"SA\",\n                                \"eref\": \"550e8400-e29b-41d4-a716-446655440000\"\n                            }],\n                        \"approvalId\": \"710d559b-a922-424d-a21c-7e63b6351661\",\n                        \"currency\": \"EUR\",\n                        \"periodic-limits-bounds\": {\n                            \"daily\": \"100.0\",\n                            \"weekly\": \"120.0\",\n                            \"monthly\": \"300.0\",\n                            \"quarterly\": \"600.0\",\n                            \"customPeriods\": [{\n                                    \"period\": \"biweekly\",\n                                    \"amount\": \"100\"\n                                }]\n                        },\n                        \"shadow\": true\n                    }]\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 422,\n                body: {\n                    \"message\": \"Unprocessable Entity\",\n                    \"errors\": [{\n                            \"message\": \"Array size is over {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"100\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/limits/periodic/soft-check\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 422,\n                body: {\n                    \"message\": \"Unprocessable Entity\",\n                    \"errors\": [{\n                            \"message\": \"Array size is over {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"100\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/limits/transactional/soft-check\",\n        method: \"POST\",\n        responses: [\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 422,\n                body: {\n                    \"message\": \"Unprocessable Entity\",\n                    \"errors\": [{\n                            \"message\": \"Array size is over {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"100\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/limits/{approvalId}/approvals\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"alias\": \"Personal Service Agreement Limit\",\n                    \"uuid\": \"1234-5678-9101-1121\",\n                    \"user-BBID\": \"uuid-user-id\",\n                    \"entities\": [{\n                            \"etype\": \"SA\",\n                            \"eref\": \"550e8400-e29b-41d4-a716-446655440000\"\n                        }],\n                    \"currency\": \"EUR\",\n                    \"periodic-limits-bounds\": {\n                        \"daily\": \"100.0\",\n                        \"weekly\": \"120.0\",\n                        \"monthly\": \"300.0\",\n                        \"quarterly\": \"600.0\",\n                        \"customPeriods\": [{\n                                \"period\": \"biweekly\",\n                                \"amount\": \"100\"\n                            }]\n                    },\n                    \"shadow\": true,\n                    \"approvalStatus\": \"APPROVED\"\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/limits/global\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"limits\": [{\n                            \"alias\": \"User Limit\",\n                            \"uuid\": \"dfab7e60-064e-4af5-b54d-96d28fef0573\",\n                            \"entities\": [{\n                                    \"type\": \"USER\"\n                                }],\n                            \"periodic-limits-bounds\": {\n                                \"daily\": \"100.0\",\n                                \"weekly\": \"120.0\",\n                                \"monthly\": \"300.0\",\n                                \"quarterly\": \"600.0\",\n                                \"customPeriods\": [{\n                                        \"period\": \"biweekly\",\n                                        \"amount\": \"100\"\n                                    }]\n                            },\n                            \"transactional-limits-bound\": {\n                                \"amount\": \"100.0\"\n                            }\n                        }, {\n                            \"alias\": \"Service Agreement Limit\",\n                            \"uuid\": \"a93cf136-ef7a-48eb-bde8-7f50e42540c8\",\n                            \"entities\": [{\n                                    \"type\": \"SA\"\n                                }],\n                            \"periodic-limits-bounds\": {\n                                \"daily\": \"1000.0\",\n                                \"weekly\": \"1200.0\",\n                                \"monthly\": \"3000.0\",\n                                \"quarterly\": \"6000.0\",\n                                \"customPeriods\": [{\n                                        \"period\": \"biweekly\",\n                                        \"amount\": \"1000\"\n                                    }]\n                            },\n                            \"transactional-limits-bound\": {\n                                \"amount\": \"1000.0\"\n                            }\n                        }],\n                    \"currency\": \"EUR\",\n                    \"approvalId\": \"911c07d1-7f0c-4437-b27b-ae0d2bcf9e5c\"\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    },\n    {\n        urlPattern: \"/client-api/v2/limits/{uuid}\",\n        method: \"PUT\",\n        responses: [\n            {\n                status: 200,\n                body: {\n                    \"alias\": \"Personal Service Agreement Limit\",\n                    \"uuid\": \"1234-5678-9101-1121\",\n                    \"user-BBID\": \"uuid-user-id\",\n                    \"entities\": [{\n                            \"etype\": \"SA\",\n                            \"eref\": \"550e8400-e29b-41d4-a716-446655440000\"\n                        }],\n                    \"approvalId\": \"d1d0e7d0-30a4-472b-a8c0-3908b9e3847a\",\n                    \"approvalStatus\": \"PENDING\",\n                    \"currency\": \"EUR\",\n                    \"periodic-limits-bounds\": {\n                        \"daily\": \"100.0\",\n                        \"weekly\": \"120.0\",\n                        \"monthly\": \"300.0\",\n                        \"quarterly\": \"600.0\",\n                        \"customPeriods\": [{\n                                \"period\": \"biweekly\",\n                                \"amount\": \"100\"\n                            }]\n                    },\n                    \"shadow\": true\n                }\n            },\n            {\n                status: 400,\n                body: {\n                    \"message\": \"Bad Request\",\n                    \"errors\": [{\n                            \"message\": \"Value Exceeded. Must be between {min} and {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"50\",\n                                \"min\": \"1\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 403,\n                body: {\n                    \"message\": \"Access to requested resource denied.\",\n                    \"errors\": [{\n                            \"message\": \"Resource access denied due to an insufficient user quota of {quota}.\",\n                            \"key\": \"common.api.quota\",\n                            \"context\": {\n                                \"quota\": \"someQuota\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 404,\n                body: {\n                    \"message\": \"Resource not found.\",\n                    \"errors\": [{\n                            \"message\": \"Unable to find the resource requested resource: {resource}.\",\n                            \"key\": \"common.api.resource\",\n                            \"context\": {\n                                \"resource\": \"aResource\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 422,\n                body: {\n                    \"message\": \"Unprocessable Entity\",\n                    \"errors\": [{\n                            \"message\": \"Array size is over {max}.\",\n                            \"key\": \"common.api.shoesize\",\n                            \"context\": {\n                                \"max\": \"100\"\n                            }\n                        }]\n                }\n            },\n            {\n                status: 500,\n                body: {\n                    \"message\": \"Description of error\"\n                }\n            },\n        ]\n    },\n]);\n\nexport { ApprovalStatus, BreachType, BreachedLimitType, COLLECTION_FORMATS, CONFIG_TOKEN, Consumption, GlobalLimitsApprovalHttpService, GlobalLimitsApprovalHttpServiceGetGlobalLimitsApprovalDetailsMocksProvider, GlobalLimitsApprovalHttpServiceMocksProvider, GlobalLimitsApprovalHttpServicePostGlobalLimitsApprovalStatusMocksProvider, LIMIT_BASE_PATH, LimitApiModule, LimitConfiguration, LimitsHttpService, LimitsHttpServiceGetApprovalsMocksProvider, LimitsHttpServiceGetBreachableOperationByPaymentRefMocksProvider, LimitsHttpServiceGetCurrencyMocksProvider, LimitsHttpServiceGetGlobalLimitsMocksProvider, LimitsHttpServiceGetSupportedPeriodsMocksProvider, LimitsHttpServiceMocksProvider, LimitsHttpServicePostCurrentLimitsConsumptionsRetrievalMocksProvider, LimitsHttpServicePostLimitsMocksProvider, LimitsHttpServicePostLimitsRetrievalMocksProvider, LimitsHttpServicePostPeriodicLimitSoftCheckMocksProvider, LimitsHttpServicePostTransactionalLimitSoftCheckMocksProvider, LimitsHttpServicePutApprovalsMocksProvider, LimitsHttpServicePutGlobalLimitsMocksProvider, LimitsHttpServicePutLimitByUuidMocksProvider, PaymentState };\n"]},"metadata":{},"sourceType":"module"}