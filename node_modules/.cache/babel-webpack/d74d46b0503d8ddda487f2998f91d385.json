{"ast":null,"code":"import * as i4 from '@angular/common';\nimport { getLocaleNumberSymbol, NumberSymbol, getNumberOfCurrencyDigits, DecimalPipe, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, LOCALE_ID, Component, Inject, Optional, Self, Input, ViewChild, Output, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { FormControl, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport BigNumber from 'bignumber.js';\nimport { getInputNextId } from '@backbase/ui-ang/base-classes';\nimport { idListAttr } from '@backbase/ui-ang/util';\nimport * as i1 from '@backbase/ui-ang/services';\nimport * as i3 from '@backbase/ui-ang/dropdown-single-select';\nimport { DropdownSingleSelectModule } from '@backbase/ui-ang/dropdown-single-select';\nimport { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';\nconst _c0 = [\"integerInput\"];\nconst _c1 = [\"decimalsInput\"];\n\nfunction CurrencyInputComponent_div_2_label_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r9.curList && ctx_r9.curList.length > 1 ? ctx_r9.currencyListAriaLabel : ctx_r9.currencyListWithOnItemAriaLabel, \" \");\n  }\n}\n\nfunction CurrencyInputComponent_div_2_label_1_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵi18n(1, 18);\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction CurrencyInputComponent_div_2_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 17);\n    i0.ɵɵelementContainerStart(1, 5);\n    i0.ɵɵtemplate(2, CurrencyInputComponent_div_2_label_1_ng_container_2_Template, 2, 1, \"ng-container\", 6);\n    i0.ɵɵtemplate(3, CurrencyInputComponent_div_2_label_1_ng_container_3_Template, 2, 0, \"ng-container\", 7);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵpropertyInterpolate(\"for\", ctx_r6.currencyInputId);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r6.currencyLabelId);\n    i0.ɵɵattribute(\"aria-label\", ctx_r6.currencyListWithOnItemAriaLabel)(\"data-role\", \"currency-input-label\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitch\", !!ctx_r6.currencyListAriaLabel || !!ctx_r6.currencyListWithOnItemAriaLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\n\nfunction CurrencyInputComponent_div_2_input_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 19);\n    i0.ɵɵlistener(\"blur\", function CurrencyInputComponent_div_2_input_3_Template_input_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11.markAsTouched($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r7.cur);\n    i0.ɵɵproperty(\"id\", ctx_r7.currencyInputId)(\"readonly\", true)(\"required\", ctx_r7.required);\n    i0.ɵɵattribute(\"aria-invalid\", ctx_r7.ariaInvalid)(\"aria-labelledby\", ctx_r7.idListAttr(ctx_r7.ariaLabelledby, ctx_r7.currencyLabelId))(\"data-role\", \"currency-input-currency-readonly\");\n  }\n}\n\nfunction CurrencyInputComponent_div_2_bb_dropdown_single_select_ui_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"bb-dropdown-single-select-ui\", 20);\n    i0.ɵɵlistener(\"change\", function CurrencyInputComponent_div_2_bb_dropdown_single_select_ui_4_Template_bb_dropdown_single_select_ui_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      ctx_r13.updateCurrency();\n      return ctx_r13.markAsTouched($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"id\", ctx_r8.currencyInputId)(\"placeholder\", ctx_r8.curList[0])(\"options\", ctx_r8.curList)(\"readonly\", ctx_r8.readonly)(\"required\", ctx_r8.required)(\"aria-invalid\", ctx_r8.ariaInvalid)(\"aria-labelledby\", ctx_r8.idListAttr(ctx_r8.ariaLabelledby, ctx_r8.currencyLabelId))(\"formControl\", ctx_r8.currControl);\n    i0.ɵɵattribute(\"data-role\", \"currency-input-currency-selector\");\n  }\n}\n\nfunction CurrencyInputComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtemplate(1, CurrencyInputComponent_div_2_label_1_Template, 4, 6, \"label\", 14);\n    i0.ɵɵelementContainerStart(2, 5);\n    i0.ɵɵtemplate(3, CurrencyInputComponent_div_2_input_3_Template, 1, 7, \"input\", 15);\n    i0.ɵɵtemplate(4, CurrencyInputComponent_div_2_bb_dropdown_single_select_ui_4_Template, 1, 9, \"bb-dropdown-single-select-ui\", 16);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.currencyListAriaLabel || ctx_r0.currencyListWithOnItemAriaLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitch\", ctx_r0.readonly || ctx_r0.curList && ctx_r0.curList.length === 1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\n\nfunction CurrencyInputComponent_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.integerLabel, \" \");\n  }\n}\n\nfunction CurrencyInputComponent_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵi18n(1, 21);\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction CurrencyInputComponent_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.decimalSeparator);\n  }\n}\n\nfunction CurrencyInputComponent_div_11_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r15.decimalLabel, \" \");\n  }\n}\n\nfunction CurrencyInputComponent_div_11_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵi18n(1, 26);\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nconst _c8 = function (a0) {\n  return {\n    \"bb-text-align-right\": a0\n  };\n};\n\nfunction CurrencyInputComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵelementStart(1, \"label\", 4);\n    i0.ɵɵelementContainerStart(2, 5);\n    i0.ɵɵtemplate(3, CurrencyInputComponent_div_11_ng_container_3_Template, 2, 1, \"ng-container\", 6);\n    i0.ɵɵtemplate(4, CurrencyInputComponent_div_11_ng_container_4_Template, 2, 0, \"ng-container\", 7);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"input\", 24, 25);\n    i0.ɵɵlistener(\"keypress\", function CurrencyInputComponent_div_11_Template_input_keypress_5_listener($event) {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.onPress($event);\n    })(\"input\", function CurrencyInputComponent_div_11_Template_input_input_5_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.triggerChange();\n    })(\"blur\", function CurrencyInputComponent_div_11_Template_input_blur_5_listener($event) {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.decOnBlur($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"ng-touched\", ctx_r5.intControl.touched || ctx_r5.decControl.touched || (ctx_r5.parentFormControl == null ? null : ctx_r5.parentFormControl.touched))(\"ng-invalid\", ctx_r5.intControl.invalid || (ctx_r5.parentFormControl == null ? null : ctx_r5.parentFormControl.invalid));\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"sr-only\", !ctx_r5.decimalLabel || ctx_r5.decimalLabelSrOnly);\n    i0.ɵɵpropertyInterpolate(\"for\", ctx_r5.decimalInputId);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r5.decimalLabelId);\n    i0.ɵɵattribute(\"data-role\", \"currency-input-decimal-label\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitch\", !!ctx_r5.decimalLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", true);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r5.decimalInputId);\n    i0.ɵɵpropertyInterpolate(\"maxlength\", ctx_r5.decMaxLen);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r5.decPlaceholder);\n    i0.ɵɵproperty(\"readOnly\", ctx_r5.readonly)(\"required\", ctx_r5.required)(\"formControl\", ctx_r5.decControl)(\"ngClass\", i0.ɵɵpureFunction1(22, _c8, ctx_r5.isRightAligned));\n    i0.ɵɵattribute(\"aria-describedby\", ctx_r5.idListAttr(ctx_r5.ariaDescribedby, ctx_r5.validationMessagesId))(\"aria-invalid\", ctx_r5.ariaInvalid)(\"aria-labelledby\", ctx_r5.idListAttr(ctx_r5.ariaLabelledby, ctx_r5.decimalLabelId))(\"data-role\", \"input-currency-decimals\");\n  }\n}\n\nconst _c9 = [[[\"\", \"bbValidationMessage\", \"\"]]];\nconst _c10 = [\"[bbValidationMessage]\"];\nconst defaultIntLength = 13;\nconst defaultDecimalPrecision = 2;\n/**\n * @name CurrencyInputComponent\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes. You need to take care of properties that are required in your case :\n *  - aria-describedby\n *  - aria-invalid\n *  - aria-labelledby\n *  - integerLabelSrOnly\n *  - decimalLabelSrOnly\n * @description\n * Component for displaying and managing currency and it amount\n *\n */\n\nclass CurrencyInputComponent {\n  constructor(el, locale, domAttributeService, parentFormControl) {\n    this.el = el;\n    this.locale = locale;\n    this.domAttributeService = domAttributeService;\n    this.parentFormControl = parentFormControl;\n    this.currencyList = [];\n    this.currencyDisabledState = {\n      currency: false,\n      integer: false,\n      decimal: false\n    };\n    this.decimalSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal);\n    this.localeSeparatorSymbols = [this.decimalSeparator, getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyGroup)];\n    /**\n     * Number of minimum currency precision. Defaults to 2.\n     */\n\n    this.decMinLen = defaultDecimalPrecision;\n    this.currControl = new FormControl();\n    this.intControl = new FormControl();\n    this.decControl = new FormControl();\n    /**\n     * The placeholder for the input. Defaults to 0.\n     */\n\n    this.placeholder = '0';\n    /**\n     * For set output type string/number, by default 'number', when  need work with long number\n     * ( bigger than MAX_SAFE_INTEGER = 9,007,199,254,740,993 ) need to use 'string'\n     */\n\n    this.resultType = 'number';\n    /**\n     * Whether there should be only the integer part.\n     * You have to keep in mind, that if you have decimal part, even \".00\"\n     * you will not be able to remove it\n     */\n\n    this.integer = false;\n    /**\n     * Whether the input is required. Defaults to false.\n     */\n\n    this.required = false;\n    /**\n     * Whether the input is read only. Defaults to false.\n     */\n\n    this.readonly = false;\n    /**\n     * Whether integer label is only visible for screen readers.\n     * By default is visible if it is needed to hide change this property\n     * to \"true\" and it will have class \"sr-only\"\n     */\n\n    this.integerLabelSrOnly = false;\n    /**\n     * By default is visible if it is needed to hide change this property\n     * to \"true\" and it will have class \"sr-only\"\n     * By default is hidden and accessible only for screen reader\n     */\n\n    this.decimalLabelSrOnly = false;\n    /**\n     * Whether decimal text is aligned to the right.\n     * By default is false\n     */\n\n    this.isRightAligned = false;\n    this._integerId = getInputNextId();\n    this._decimalId = getInputNextId();\n    this.idListAttr = idListAttr;\n    this.initialized = false;\n    /**\n     * The label for the integer input.\n     */\n\n    this.integerLabel = '';\n    /**\n     * The label for the decimal input.\n     */\n\n    this.decimalLabel = '';\n    /**\n     * The label for the currency input.\n     */\n\n    this.currencyLabel = '';\n    /**\n     * Flag is used to allow input negative value\n     */\n\n    this.allowNegativeValue = false;\n    /**\n     * Aria label for the currency dropdown.\n     */\n\n    this.currencyListAriaLabel = 'Currency List Dropdown';\n    /**\n     * Aria label for the currency list with one item.\n     */\n\n    this.currencyListWithOnItemAriaLabel = 'Currency';\n    /**\n     * An event emitter for on blur actions.\n     */\n\n    this.blur = new EventEmitter();\n\n    this.onChange = _ => {};\n\n    this.onTouched = () => {};\n\n    this.currencyInputId = this.domAttributeService.generateId();\n    this.currencyLabelId = this.domAttributeService.generateId();\n    this.decimalInputId = this.domAttributeService.generateId();\n    this.decimalLabelId = this.domAttributeService.generateId();\n    this.integerInputId = this.domAttributeService.generateId();\n    this.integerLabelId = this.domAttributeService.generateId();\n    this.validationMessagesId = this.domAttributeService.generateId();\n    BigNumber.config({\n      FORMAT: {\n        // grouping separator of the integer part\n        groupSeparator: getLocaleNumberSymbol(this.locale, NumberSymbol.Group),\n        // primary grouping size of the integer part\n        groupSize: 3\n      }\n    });\n\n    if (this.parentFormControl != null) {\n      // Setting the value accessor directly (instead of using\n      // the providers) to avoid running into a circular import.\n      this.parentFormControl.valueAccessor = this;\n    }\n  }\n  /**\n   * Configure the maximum number of decimals.\n   * When greater than the default number of decimals for the specified currency, this value will take precedence.\n   * Configuring this value can affect the input placeholder.\n   */\n\n\n  get decMaxLen() {\n    return typeof this._decMaxLen === 'number' ? this._decMaxLen : this.getDecimalDigits(this.currency || '');\n  }\n\n  set decMaxLen(value) {\n    this._decMaxLen = value;\n  }\n  /**\n   * Non-configurable placeholder for the decimal input.\n   * Displays a zero digit for every digit that is allowed in the decimal field.\n   */\n\n\n  get decPlaceholder() {\n    return '0'.repeat(this.decMaxLen || 0);\n  }\n  /**\n   * Whether the input is disabled. Defaults to false.\n   */\n\n\n  set disabled(disabled) {\n    if (typeof disabled === 'boolean') {\n      this.currencyDisabledState = {\n        currency: disabled,\n        integer: disabled,\n        decimal: disabled\n      };\n    } else {\n      this.currencyDisabledState = disabled;\n    }\n  }\n\n  get disabled() {\n    return this.currencyDisabledState;\n  }\n  /**\n   * Currency list to be displayed in the dropdown.\n   *\n   * Note: Non-empty currency list is required for the currency symbol\n   * field to be shown. Otherwise, only the amount fields will be shown.\n   *\n   * Additionally, If only a single currency provided, the dropdown of\n   * the currency selection will be disabled and its value set to that single currency\n   */\n\n\n  set currencies(list) {\n    this.currencyList = list;\n\n    if (this.currencyList && this.currencyList.length > 1) {\n      this.currControl.enable();\n    } else {\n      this.currControl.disable();\n    } // if currency is not set, use first item from the list\n\n\n    if (this.currencyList && (this.currency === undefined || this.currencyList.indexOf(this.currency) === -1)) {\n      // [FIXME] Nothing guarantees that the currencyList isn't empty\n      this.updateCurrency(this.currencyList[0]);\n    }\n  }\n  /**\n   * The id for the integer input. Defaults to unique string.\n   * Used to map the label to the input.\n   */\n\n\n  set integerId(value) {\n    this._integerId = value;\n  }\n\n  get integerId() {\n    return this._integerId;\n  }\n  /**\n   * The id for the decimal input. Defaults to unique string.\n   * Used to map the label to the input.\n   */\n\n\n  set decimalId(value) {\n    this._decimalId = value;\n  }\n\n  get decimalId() {\n    return this._decimalId;\n  }\n\n  ngOnInit() {\n    this.initialized = true;\n\n    if (!this.integerLabel || !this.decimalLabel) {\n      console.warn(`\n          Found an input from '\n          ${this.constructor.name}\n          ' without 'label' or 'aria-label' attribute, please provide one of them\n        `);\n    }\n\n    this.setDisabled(this.currencyDisabledState);\n    this.formatInteger();\n  }\n\n  ngOnChanges(changes) {\n    if (changes.disabled) {\n      this.setDisabled(this.currencyDisabledState);\n    }\n  }\n\n  decOnBlur($event) {\n    this.markAsTouched($event);\n    this.formatDecimal(this.decControl);\n  }\n\n  get cur() {\n    return this.currency;\n  }\n\n  get curList() {\n    return this.currencyList;\n  }\n\n  ngAfterViewInit() {\n    const len = this.el.nativeElement.getAttribute('maxlength');\n    this.intMaxLen = len ? parseInt(len, 10) : defaultIntLength;\n  }\n\n  onPress($event) {\n    this.focusDecEl($event.key);\n    const keyCode = $event.keyCode || $event.which;\n    const key = String.fromCharCode(keyCode); // allow to enter 'minus' only at the first position and if correspondent flag is enabled\n\n    const isLeadingMinusPosition = this.allowNegativeValue && this.intEl && this.intEl.nativeElement.selectionStart === 0 && key === '-'; // regexp is used here to support both of regular keyboard's numbers and numpad's numbers\n\n    if (!(isLeadingMinusPosition || /^\\d$/.test(key)) && $event.keyCode !== 8 && $event.keyCode !== 9) {\n      $event.preventDefault();\n    }\n  }\n\n  onInput() {\n    const isFormatted = this.formatInteger();\n\n    if (isFormatted) {\n      this.triggerChange();\n    }\n  }\n\n  updateCurrency(currency) {\n    this.currency = currency || this.currControl.value;\n    this.triggerChange();\n  }\n\n  checkValues() {\n    if (this.currency === undefined) {\n      return true;\n    }\n\n    if (!this.decControl.value && !this.intControl.value) {\n      this.onChange(null);\n      return true;\n    }\n\n    return false;\n  }\n\n  formatDecimal(decControl) {\n    const {\n      value\n    } = decControl;\n\n    if (value && this.decMaxLen && value.lenght < this.decMaxLen) {\n      const updatedValue = String(value).padEnd(this.decMaxLen, '0');\n      decControl.patchValue(updatedValue);\n    }\n  }\n\n  triggerChange() {\n    if (this.checkValues()) {\n      return;\n    }\n\n    const int = this.intControl.value || '0';\n\n    if (this.resultType === 'string') {\n      const currencyGroupSymbol = new RegExp(`\\\\${this.localeSeparatorSymbols[1]}`, 'g');\n      const whole = int.replace(currencyGroupSymbol, '');\n      const dec = this.decControl.value || '0';\n      const newAmount = whole + (dec !== '0' ? '.' + dec : '');\n      this.onChange({\n        currency: this.currency,\n        amount: newAmount\n      });\n    } else {\n      const whole = parseInt(int.replace(/[^-\\d]/g, ''), 10);\n      const dec = parseFloat('0.' + this.decControl.value) || 0;\n      const sign = whole < 0 ? -1 : 1;\n      const newAmount = (Math.abs(whole) + dec) * sign;\n      this.onChange({\n        currency: this.currency,\n        amount: newAmount\n      });\n    }\n  }\n\n  checkNumeric(numeric) {\n    // removed all dashes except the first one\n    if (numeric.length > 0) {\n      numeric = numeric[0] + numeric.slice(1).replace(/-/g, '');\n    }\n\n    numeric = this.sanitizeNumericValue(numeric);\n    return numeric === '' ? numeric : new BigNumber(numeric || 0).toFormat();\n  }\n  /**\n   * Formats integer to user-friendly format\n   *\n   * @returns Returns true in case of successful formatting, otherwise - false.\n   */\n\n\n  formatInteger() {\n    // The behavior of `formatInteger` is dependent on some component inputs,\n    // so don't format anything until the configuration is available.\n    if (!this.initialized || !this.intEl) {\n      return false;\n    }\n\n    if (!this.intControl.value) {\n      this.intControl.setValue('');\n      return true;\n    }\n\n    const offset = this.intEl.nativeElement.selectionStart - this.intControl.value.length;\n    const numeric = this.intControl.value.replace(this.allowNegativeValue ? /[^-\\d]/g : /\\D/g, '');\n\n    if (numeric === '-') {\n      this.intControl.setValue('-', {\n        emitEvent: false\n      });\n      return false;\n    }\n\n    const newVal = this.checkNumeric(numeric); // extend maxlength (if set) with the amount of special chars\n\n    if (this.intMaxLen) {\n      const specialCount = newVal.replace(/\\d/g, '').length;\n      this.intEl.nativeElement.setAttribute('maxlength', '' + (this.intMaxLen + specialCount));\n    }\n\n    this.intControl.setValue(newVal);\n    const newLen = this.intControl.value.length;\n    const newPos = Math.max(offset + newLen, 0);\n\n    if (newLen > 0 && document.activeElement === this.intEl.nativeElement) {\n      this.intEl.nativeElement.selectionStart = newPos;\n      this.intEl.nativeElement.selectionEnd = newPos;\n    }\n\n    return true;\n  }\n  /**\n   * Event handler for backspace key press, and check if correct number is deleted\n   */\n\n\n  onBackspace(el) {\n    if (el.selectionStart) {\n      const selectionStartPosition = el.selectionStart - 1;\n      const value = el.value[selectionStartPosition];\n\n      if (this.localeSeparatorSymbols.includes(value)) {\n        el.setSelectionRange(selectionStartPosition, selectionStartPosition);\n      }\n    }\n  } // method is used to correct rendered input's value if user entered '-' and left the field\n\n\n  correctInputValue($event) {\n    this.markAsTouched($event);\n    const numeric = this.intControl.value;\n\n    if (numeric !== '-') {\n      return;\n    }\n\n    this.intControl.setValue('', {\n      emitEvent: false\n    });\n  }\n\n  writeValue(model) {\n    if (!model) {\n      return;\n    } // currency cannot be set to nothing\n\n\n    if (model.currency) {\n      this.currency = model.currency;\n      this.currControl.setValue(model.currency);\n    }\n\n    if (typeof model.amount === 'string' || typeof model.amount === 'number') {\n      const [whole, decimals] = ('' + model.amount).split('.');\n      this.intControl.setValue(whole);\n      this.decControl.setValue(decimals);\n    } else {\n      this.intControl.setValue('');\n      this.decControl.setValue('');\n    }\n\n    this.formatInteger();\n  }\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n\n  markAsTouched($event) {\n    this.blur.emit($event);\n    this.onTouched();\n  }\n\n  setDisabled(disableState) {\n    if (disableState.currency) {\n      this.currControl.disable();\n    } else {\n      this.currControl.enable();\n    }\n\n    if (disableState.integer) {\n      this.intControl.disable();\n    } else {\n      this.intControl.enable();\n    }\n\n    if (disableState.decimal) {\n      this.decControl.disable();\n    } else {\n      this.decControl.enable();\n    }\n  }\n\n  focusDecEl(key) {\n    if (this.decEl && ['.', ','].indexOf(key) !== -1) {\n      this.decEl.nativeElement.focus();\n    }\n  }\n  /**\n   * Make sure that numeric value doesn't exceed max length (if set)\n   * this might happen in case value is pasted to input that has extended max length\n   *\n   * @param numeric\n   */\n\n\n  sanitizeNumericValue(numeric) {\n    if (this.intMaxLen && numeric) {\n      return numeric.slice(0, this.intMaxLen);\n    }\n\n    return numeric;\n  }\n  /**\n   * If currency doesn't have decimal part, decimal placeholder\n   * will be set to default decMinLen\n   */\n\n\n  getDecimalDigits(currency) {\n    return getNumberOfCurrencyDigits(currency) === 0 ? this.decMinLen : getNumberOfCurrencyDigits(currency);\n  }\n\n}\n\nCurrencyInputComponent.ɵfac = function CurrencyInputComponent_Factory(t) {\n  return new (t || CurrencyInputComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LOCALE_ID), i0.ɵɵdirectiveInject(i1.DomAttributesService), i0.ɵɵdirectiveInject(i2.NgControl, 10));\n};\n\nCurrencyInputComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CurrencyInputComponent,\n  selectors: [[\"bb-currency-input-ui\"]],\n  viewQuery: function CurrencyInputComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.intEl = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.decEl = _t.first);\n    }\n  },\n  inputs: {\n    decMaxLen: \"decMaxLen\",\n    decMinLen: \"decMinLen\",\n    placeholder: \"placeholder\",\n    resultType: \"resultType\",\n    integer: \"integer\",\n    required: \"required\",\n    readonly: \"readonly\",\n    disabled: \"disabled\",\n    integerLabelSrOnly: \"integerLabelSrOnly\",\n    decimalLabelSrOnly: \"decimalLabelSrOnly\",\n    currencies: \"currencies\",\n    isRightAligned: \"isRightAligned\",\n    integerId: \"integerId\",\n    decimalId: \"decimalId\",\n    integerLabel: \"integerLabel\",\n    decimalLabel: \"decimalLabel\",\n    currencyLabel: \"currencyLabel\",\n    allowNegativeValue: \"allowNegativeValue\",\n    currencyListAriaLabel: \"currencyListAriaLabel\",\n    currencyListWithOnItemAriaLabel: \"currencyListWithOnItemAriaLabel\",\n    ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    ariaInvalid: [\"aria-invalid\", \"ariaInvalid\"]\n  },\n  outputs: {\n    blur: \"blur\"\n  },\n  features: [i0.ɵɵProvidersFeature([DecimalPipe]), i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c10,\n  decls: 14,\n  vars: 25,\n  consts: function () {\n    let i18n_2;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc  Label for currency code dropdown of the Currency Input component\n       *               \n       * @meaning Currency label \n       */\n      const MSG_C__USERS_HBAYLON_DOCUMENTS_WEST_MONROE_PROJECTS_BACKBASE2_WEB_RETAIL_USA_WEB_NODE_MODULES__BACKBASE_UI_ANG_FESM2015_BACKBASE_UI_ANG_CURRENCY_INPUT_JS____3 = goog.getMsg(\"Currency\");\n      i18n_2 = MSG_C__USERS_HBAYLON_DOCUMENTS_WEST_MONROE_PROJECTS_BACKBASE2_WEB_RETAIL_USA_WEB_NODE_MODULES__BACKBASE_UI_ANG_FESM2015_BACKBASE_UI_ANG_CURRENCY_INPUT_JS____3;\n    } else {\n      i18n_2 = $localize`:Currency label | Label for currency code dropdown of the Currency Input component\n              @@bb-currency-input-ui.currency-input-label:Currency`;\n    }\n\n    let i18n_4;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc  Label for integer part of the monetary amount of the Currency Input component\n       *               \n       * @meaning Integer label \n       */\n      const MSG_C__USERS_HBAYLON_DOCUMENTS_WEST_MONROE_PROJECTS_BACKBASE2_WEB_RETAIL_USA_WEB_NODE_MODULES__BACKBASE_UI_ANG_FESM2015_BACKBASE_UI_ANG_CURRENCY_INPUT_JS__5 = goog.getMsg(\"Integer\");\n      i18n_4 = MSG_C__USERS_HBAYLON_DOCUMENTS_WEST_MONROE_PROJECTS_BACKBASE2_WEB_RETAIL_USA_WEB_NODE_MODULES__BACKBASE_UI_ANG_FESM2015_BACKBASE_UI_ANG_CURRENCY_INPUT_JS__5;\n    } else {\n      i18n_4 = $localize`:Integer label | Label for integer part of the monetary amount of the Currency Input component\n              @@bb-currency-input-ui.integer-input-label:Integer`;\n    }\n\n    let i18n_6;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc  Label for decimal part of the monetary amount of the Currency Input component\n       *               \n       * @meaning Decimal label \n       */\n      const MSG_C__USERS_HBAYLON_DOCUMENTS_WEST_MONROE_PROJECTS_BACKBASE2_WEB_RETAIL_USA_WEB_NODE_MODULES__BACKBASE_UI_ANG_FESM2015_BACKBASE_UI_ANG_CURRENCY_INPUT_JS___7 = goog.getMsg(\" Decimals \");\n      i18n_6 = MSG_C__USERS_HBAYLON_DOCUMENTS_WEST_MONROE_PROJECTS_BACKBASE2_WEB_RETAIL_USA_WEB_NODE_MODULES__BACKBASE_UI_ANG_FESM2015_BACKBASE_UI_ANG_CURRENCY_INPUT_JS___7;\n    } else {\n      i18n_6 = $localize`:Decimal label | Label for decimal part of the monetary amount of the Currency Input component\n              @@bb-currency-input-ui.decimal-input-label: Decimals `;\n    }\n\n    return [[1, \"bb-currency-input\"], [1, \"bb-stack\", \"bb-stack--align-bottom\"], [\"class\", \"bb-currency-input__currency-selector selector bb-stack__item\", 4, \"ngIf\"], [1, \"bb-currency-input__integer\", \"bb-stack__item\", \"bb-stack__item--spacing-sm\"], [3, \"for\", \"id\"], [3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [4, \"ngSwitchDefault\"], [\"name\", \"integer\", \"type\", \"text\", \"size\", \"5\", \"role\", \"textbox\", \"autocomplete\", \"off\", \"autocorrect\", \"off\", \"autocapitalize\", \"off\", \"spellcheck\", \"false\", 1, \"form-control\", \"bb-text-align-right\", 3, \"id\", \"readOnly\", \"required\", \"formControl\", \"placeholder\", \"keydown.backspace\", \"keypress\", \"input\", \"blur\"], [\"integerInput\", \"\"], [\"class\", \"bb-stack__item bb-stack__item--spacing-sm\", 4, \"ngIf\"], [\"class\", \"bb-currency-input__decimal\", 3, \"ng-touched\", \"ng-invalid\", 4, \"ngIf\"], [\"aria-live\", \"assertive\", 1, \"bb-input-validation-message\", 3, \"id\"], [1, \"bb-currency-input__currency-selector\", \"selector\", \"bb-stack__item\"], [\"class\", \"sr-only\", 3, \"for\", \"id\", 4, \"ngIf\"], [\"type\", \"text\", \"class\", \"form-control bb-text-align-center\", 3, \"id\", \"readonly\", \"required\", \"value\", \"blur\", 4, \"ngSwitchCase\"], [\"class\", \"bb-block\", 3, \"id\", \"placeholder\", \"options\", \"readonly\", \"required\", \"aria-invalid\", \"aria-labelledby\", \"formControl\", \"change\", 4, \"ngSwitchDefault\"], [1, \"sr-only\", 3, \"for\", \"id\"], i18n_2, [\"type\", \"text\", 1, \"form-control\", \"bb-text-align-center\", 3, \"id\", \"readonly\", \"required\", \"value\", \"blur\"], [1, \"bb-block\", 3, \"id\", \"placeholder\", \"options\", \"readonly\", \"required\", \"aria-invalid\", \"aria-labelledby\", \"formControl\", \"change\"], i18n_4, [1, \"bb-stack__item\", \"bb-stack__item--spacing-sm\"], [1, \"bb-currency-input__decimal\"], [\"name\", \"decimals\", \"type\", \"text\", \"role\", \"textbox\", \"autocomplete\", \"off\", \"autocorrect\", \"off\", \"autocapitalize\", \"off\", \"spellcheck\", \"false\", 1, \"form-control\", 3, \"id\", \"readOnly\", \"required\", \"formControl\", \"ngClass\", \"maxlength\", \"placeholder\", \"keypress\", \"input\", \"blur\"], [\"decimalsInput\", \"\"], i18n_6];\n  },\n  template: function CurrencyInputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r22 = i0.ɵɵgetCurrentView();\n\n      i0.ɵɵprojectionDef(_c9);\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵtemplate(2, CurrencyInputComponent_div_2_Template, 5, 3, \"div\", 2);\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵelementStart(4, \"label\", 4);\n      i0.ɵɵelementContainerStart(5, 5);\n      i0.ɵɵtemplate(6, CurrencyInputComponent_ng_container_6_Template, 2, 1, \"ng-container\", 6);\n      i0.ɵɵtemplate(7, CurrencyInputComponent_ng_container_7_Template, 2, 0, \"ng-container\", 7);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"input\", 8, 9);\n      i0.ɵɵlistener(\"keydown.backspace\", function CurrencyInputComponent_Template_input_keydown_backspace_8_listener() {\n        i0.ɵɵrestoreView(_r22);\n\n        const _r3 = i0.ɵɵreference(9);\n\n        return ctx.onBackspace(_r3);\n      })(\"keypress\", function CurrencyInputComponent_Template_input_keypress_8_listener($event) {\n        return ctx.onPress($event);\n      })(\"input\", function CurrencyInputComponent_Template_input_input_8_listener() {\n        return ctx.onInput();\n      })(\"blur\", function CurrencyInputComponent_Template_input_blur_8_listener($event) {\n        return ctx.correctInputValue($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, CurrencyInputComponent_span_10_Template, 2, 1, \"span\", 10);\n      i0.ɵɵtemplate(11, CurrencyInputComponent_div_11_Template, 7, 24, \"div\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 12);\n      i0.ɵɵprojection(13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.curList && ctx.curList.length);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"ng-touched\", ctx.intControl.touched || ctx.decControl.touched || (ctx.parentFormControl == null ? null : ctx.parentFormControl.touched))(\"ng-invalid\", ctx.intControl.invalid || (ctx.parentFormControl == null ? null : ctx.parentFormControl.invalid));\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"sr-only\", !ctx.integerLabel || ctx.integerLabelSrOnly);\n      i0.ɵɵpropertyInterpolate(\"for\", ctx.integerInputId);\n      i0.ɵɵpropertyInterpolate(\"id\", ctx.integerLabelId);\n      i0.ɵɵattribute(\"data-role\", \"currency-input-integer-label\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitch\", !!ctx.integerLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", true);\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"id\", ctx.integerInputId);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", ctx.placeholder);\n      i0.ɵɵproperty(\"readOnly\", ctx.readonly)(\"required\", ctx.required)(\"formControl\", ctx.intControl);\n      i0.ɵɵattribute(\"aria-describedby\", ctx.idListAttr(ctx.ariaDescribedby, ctx.validationMessagesId))(\"aria-invalid\", ctx.ariaInvalid)(\"aria-labelledby\", ctx.idListAttr(ctx.ariaLabelledby, ctx.integerLabelId))(\"data-role\", \"currency-input-integer-input\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", !ctx.integer && ctx.decMaxLen);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.integer && ctx.decMaxLen);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"id\", ctx.validationMessagesId);\n      i0.ɵɵattribute(\"data-role\", \"currency-input-validation-message\");\n    }\n  },\n  directives: [i4.NgIf, i4.NgSwitch, i4.NgSwitchCase, i4.NgSwitchDefault, i2.DefaultValueAccessor, i2.RequiredValidator, i2.NgControlStatus, i2.FormControlDirective, i3.DropdownSingleSelectComponent, i4.NgClass, i2.MaxLengthValidator],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CurrencyInputComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-currency-input-ui',\n      templateUrl: './currency-input.component.html',\n      providers: [DecimalPipe]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOCALE_ID]\n      }]\n    }, {\n      type: i1.DomAttributesService\n    }, {\n      type: i2.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }];\n  }, {\n    decMaxLen: [{\n      type: Input\n    }],\n    decMinLen: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    resultType: [{\n      type: Input\n    }],\n    integer: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    integerLabelSrOnly: [{\n      type: Input\n    }],\n    decimalLabelSrOnly: [{\n      type: Input\n    }],\n    currencies: [{\n      type: Input\n    }],\n    isRightAligned: [{\n      type: Input\n    }],\n    integerId: [{\n      type: Input\n    }],\n    decimalId: [{\n      type: Input\n    }],\n    integerLabel: [{\n      type: Input\n    }],\n    decimalLabel: [{\n      type: Input\n    }],\n    currencyLabel: [{\n      type: Input\n    }],\n    allowNegativeValue: [{\n      type: Input\n    }],\n    currencyListAriaLabel: [{\n      type: Input\n    }],\n    currencyListWithOnItemAriaLabel: [{\n      type: Input\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaInvalid: [{\n      type: Input,\n      args: ['aria-invalid']\n    }],\n    intEl: [{\n      type: ViewChild,\n      args: ['integerInput', {\n        static: true\n      }]\n    }],\n    decEl: [{\n      type: ViewChild,\n      args: ['decimalsInput']\n    }],\n    blur: [{\n      type: Output\n    }]\n  });\n})();\n\nclass CurrencyInputModule {}\n\nCurrencyInputModule.ɵfac = function CurrencyInputModule_Factory(t) {\n  return new (t || CurrencyInputModule)();\n};\n\nCurrencyInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CurrencyInputModule\n});\nCurrencyInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, ReactiveFormsModule, DropdownSingleSelectModule], // exporting validation message as it can be injected into the component template\n  InputValidationMessageModule,\n  /**\n   * @deprecated\n   * Exporting `FormsModule` is deprecated\n   **/\n  FormsModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CurrencyInputModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, ReactiveFormsModule, DropdownSingleSelectModule],\n      declarations: [CurrencyInputComponent],\n      exports: [CurrencyInputComponent, // exporting validation message as it can be injected into the component template\n      InputValidationMessageModule,\n      /**\n       * @deprecated\n       * Exporting `FormsModule` is deprecated\n       **/\n      FormsModule]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CurrencyInputComponent, CurrencyInputModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-currency-input.js"],"names":["i4","getLocaleNumberSymbol","NumberSymbol","getNumberOfCurrencyDigits","DecimalPipe","CommonModule","i0","EventEmitter","LOCALE_ID","Component","Inject","Optional","Self","Input","ViewChild","Output","NgModule","i2","FormControl","ReactiveFormsModule","FormsModule","BigNumber","getInputNextId","idListAttr","i1","i3","DropdownSingleSelectModule","InputValidationMessageModule","defaultIntLength","defaultDecimalPrecision","CurrencyInputComponent","constructor","el","locale","domAttributeService","parentFormControl","currencyList","currencyDisabledState","currency","integer","decimal","decimalSeparator","CurrencyDecimal","localeSeparatorSymbols","CurrencyGroup","decMinLen","currControl","intControl","decControl","placeholder","resultType","required","readonly","integerLabelSrOnly","decimalLabelSrOnly","isRightAligned","_integerId","_decimalId","initialized","integerLabel","decimalLabel","currencyLabel","allowNegativeValue","currencyListAriaLabel","currencyListWithOnItemAriaLabel","blur","onChange","_","onTouched","currencyInputId","generateId","currencyLabelId","decimalInputId","decimalLabelId","integerInputId","integerLabelId","validationMessagesId","config","FORMAT","groupSeparator","Group","groupSize","valueAccessor","decMaxLen","_decMaxLen","getDecimalDigits","value","decPlaceholder","repeat","disabled","currencies","list","length","enable","disable","undefined","indexOf","updateCurrency","integerId","decimalId","ngOnInit","console","warn","name","setDisabled","formatInteger","ngOnChanges","changes","decOnBlur","$event","markAsTouched","formatDecimal","cur","curList","ngAfterViewInit","len","nativeElement","getAttribute","intMaxLen","parseInt","onPress","focusDecEl","key","keyCode","which","String","fromCharCode","isLeadingMinusPosition","intEl","selectionStart","test","preventDefault","onInput","isFormatted","triggerChange","checkValues","lenght","updatedValue","padEnd","patchValue","int","currencyGroupSymbol","RegExp","whole","replace","dec","newAmount","amount","parseFloat","sign","Math","abs","checkNumeric","numeric","slice","sanitizeNumericValue","toFormat","setValue","offset","emitEvent","newVal","specialCount","setAttribute","newLen","newPos","max","document","activeElement","selectionEnd","onBackspace","selectionStartPosition","includes","setSelectionRange","correctInputValue","writeValue","model","decimals","split","registerOnChange","fn","registerOnTouched","emit","disableState","decEl","focus","ɵfac","ElementRef","DomAttributesService","NgControl","ɵcmp","NgIf","NgSwitch","NgSwitchCase","NgSwitchDefault","DefaultValueAccessor","RequiredValidator","NgControlStatus","FormControlDirective","DropdownSingleSelectComponent","NgClass","MaxLengthValidator","type","args","selector","templateUrl","providers","decorators","ariaDescribedby","ariaLabelledby","ariaInvalid","static","CurrencyInputModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i4 from '@angular/common';\nimport { getLocaleNumberSymbol, NumberSymbol, getNumberOfCurrencyDigits, DecimalPipe, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, LOCALE_ID, Component, Inject, Optional, Self, Input, ViewChild, Output, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { FormControl, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport BigNumber from 'bignumber.js';\nimport { getInputNextId } from '@backbase/ui-ang/base-classes';\nimport { idListAttr } from '@backbase/ui-ang/util';\nimport * as i1 from '@backbase/ui-ang/services';\nimport * as i3 from '@backbase/ui-ang/dropdown-single-select';\nimport { DropdownSingleSelectModule } from '@backbase/ui-ang/dropdown-single-select';\nimport { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';\n\nconst defaultIntLength = 13;\nconst defaultDecimalPrecision = 2;\n/**\n * @name CurrencyInputComponent\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes. You need to take care of properties that are required in your case :\n *  - aria-describedby\n *  - aria-invalid\n *  - aria-labelledby\n *  - integerLabelSrOnly\n *  - decimalLabelSrOnly\n * @description\n * Component for displaying and managing currency and it amount\n *\n */\nclass CurrencyInputComponent {\n    constructor(el, locale, domAttributeService, parentFormControl) {\n        this.el = el;\n        this.locale = locale;\n        this.domAttributeService = domAttributeService;\n        this.parentFormControl = parentFormControl;\n        this.currencyList = [];\n        this.currencyDisabledState = {\n            currency: false,\n            integer: false,\n            decimal: false,\n        };\n        this.decimalSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal);\n        this.localeSeparatorSymbols = [\n            this.decimalSeparator,\n            getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyGroup),\n        ];\n        /**\n         * Number of minimum currency precision. Defaults to 2.\n         */\n        this.decMinLen = defaultDecimalPrecision;\n        this.currControl = new FormControl();\n        this.intControl = new FormControl();\n        this.decControl = new FormControl();\n        /**\n         * The placeholder for the input. Defaults to 0.\n         */\n        this.placeholder = '0';\n        /**\n         * For set output type string/number, by default 'number', when  need work with long number\n         * ( bigger than MAX_SAFE_INTEGER = 9,007,199,254,740,993 ) need to use 'string'\n         */\n        this.resultType = 'number';\n        /**\n         * Whether there should be only the integer part.\n         * You have to keep in mind, that if you have decimal part, even \".00\"\n         * you will not be able to remove it\n         */\n        this.integer = false;\n        /**\n         * Whether the input is required. Defaults to false.\n         */\n        this.required = false;\n        /**\n         * Whether the input is read only. Defaults to false.\n         */\n        this.readonly = false;\n        /**\n         * Whether integer label is only visible for screen readers.\n         * By default is visible if it is needed to hide change this property\n         * to \"true\" and it will have class \"sr-only\"\n         */\n        this.integerLabelSrOnly = false;\n        /**\n         * By default is visible if it is needed to hide change this property\n         * to \"true\" and it will have class \"sr-only\"\n         * By default is hidden and accessible only for screen reader\n         */\n        this.decimalLabelSrOnly = false;\n        /**\n         * Whether decimal text is aligned to the right.\n         * By default is false\n         */\n        this.isRightAligned = false;\n        this._integerId = getInputNextId();\n        this._decimalId = getInputNextId();\n        this.idListAttr = idListAttr;\n        this.initialized = false;\n        /**\n         * The label for the integer input.\n         */\n        this.integerLabel = '';\n        /**\n         * The label for the decimal input.\n         */\n        this.decimalLabel = '';\n        /**\n         * The label for the currency input.\n         */\n        this.currencyLabel = '';\n        /**\n         * Flag is used to allow input negative value\n         */\n        this.allowNegativeValue = false;\n        /**\n         * Aria label for the currency dropdown.\n         */\n        this.currencyListAriaLabel = 'Currency List Dropdown';\n        /**\n         * Aria label for the currency list with one item.\n         */\n        this.currencyListWithOnItemAriaLabel = 'Currency';\n        /**\n         * An event emitter for on blur actions.\n         */\n        this.blur = new EventEmitter();\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n        this.currencyInputId = this.domAttributeService.generateId();\n        this.currencyLabelId = this.domAttributeService.generateId();\n        this.decimalInputId = this.domAttributeService.generateId();\n        this.decimalLabelId = this.domAttributeService.generateId();\n        this.integerInputId = this.domAttributeService.generateId();\n        this.integerLabelId = this.domAttributeService.generateId();\n        this.validationMessagesId = this.domAttributeService.generateId();\n        BigNumber.config({\n            FORMAT: {\n                // grouping separator of the integer part\n                groupSeparator: getLocaleNumberSymbol(this.locale, NumberSymbol.Group),\n                // primary grouping size of the integer part\n                groupSize: 3,\n            },\n        });\n        if (this.parentFormControl != null) {\n            // Setting the value accessor directly (instead of using\n            // the providers) to avoid running into a circular import.\n            this.parentFormControl.valueAccessor = this;\n        }\n    }\n    /**\n     * Configure the maximum number of decimals.\n     * When greater than the default number of decimals for the specified currency, this value will take precedence.\n     * Configuring this value can affect the input placeholder.\n     */\n    get decMaxLen() {\n        return typeof this._decMaxLen === 'number' ? this._decMaxLen : this.getDecimalDigits(this.currency || '');\n    }\n    set decMaxLen(value) {\n        this._decMaxLen = value;\n    }\n    /**\n     * Non-configurable placeholder for the decimal input.\n     * Displays a zero digit for every digit that is allowed in the decimal field.\n     */\n    get decPlaceholder() {\n        return '0'.repeat(this.decMaxLen || 0);\n    }\n    /**\n     * Whether the input is disabled. Defaults to false.\n     */\n    set disabled(disabled) {\n        if (typeof disabled === 'boolean') {\n            this.currencyDisabledState = {\n                currency: disabled,\n                integer: disabled,\n                decimal: disabled,\n            };\n        }\n        else {\n            this.currencyDisabledState = disabled;\n        }\n    }\n    get disabled() {\n        return this.currencyDisabledState;\n    }\n    /**\n     * Currency list to be displayed in the dropdown.\n     *\n     * Note: Non-empty currency list is required for the currency symbol\n     * field to be shown. Otherwise, only the amount fields will be shown.\n     *\n     * Additionally, If only a single currency provided, the dropdown of\n     * the currency selection will be disabled and its value set to that single currency\n     */\n    set currencies(list) {\n        this.currencyList = list;\n        if (this.currencyList && this.currencyList.length > 1) {\n            this.currControl.enable();\n        }\n        else {\n            this.currControl.disable();\n        }\n        // if currency is not set, use first item from the list\n        if (this.currencyList && (this.currency === undefined || this.currencyList.indexOf(this.currency) === -1)) {\n            // [FIXME] Nothing guarantees that the currencyList isn't empty\n            this.updateCurrency(this.currencyList[0]);\n        }\n    }\n    /**\n     * The id for the integer input. Defaults to unique string.\n     * Used to map the label to the input.\n     */\n    set integerId(value) {\n        this._integerId = value;\n    }\n    get integerId() {\n        return this._integerId;\n    }\n    /**\n     * The id for the decimal input. Defaults to unique string.\n     * Used to map the label to the input.\n     */\n    set decimalId(value) {\n        this._decimalId = value;\n    }\n    get decimalId() {\n        return this._decimalId;\n    }\n    ngOnInit() {\n        this.initialized = true;\n        if (!this.integerLabel || !this.decimalLabel) {\n            console.warn(`\n          Found an input from '\n          ${this.constructor.name}\n          ' without 'label' or 'aria-label' attribute, please provide one of them\n        `);\n        }\n        this.setDisabled(this.currencyDisabledState);\n        this.formatInteger();\n    }\n    ngOnChanges(changes) {\n        if (changes.disabled) {\n            this.setDisabled(this.currencyDisabledState);\n        }\n    }\n    decOnBlur($event) {\n        this.markAsTouched($event);\n        this.formatDecimal(this.decControl);\n    }\n    get cur() {\n        return this.currency;\n    }\n    get curList() {\n        return this.currencyList;\n    }\n    ngAfterViewInit() {\n        const len = this.el.nativeElement.getAttribute('maxlength');\n        this.intMaxLen = len ? parseInt(len, 10) : defaultIntLength;\n    }\n    onPress($event) {\n        this.focusDecEl($event.key);\n        const keyCode = $event.keyCode || $event.which;\n        const key = String.fromCharCode(keyCode);\n        // allow to enter 'minus' only at the first position and if correspondent flag is enabled\n        const isLeadingMinusPosition = this.allowNegativeValue && this.intEl && this.intEl.nativeElement.selectionStart === 0 && key === '-';\n        // regexp is used here to support both of regular keyboard's numbers and numpad's numbers\n        if (!(isLeadingMinusPosition || /^\\d$/.test(key)) && $event.keyCode !== 8 && $event.keyCode !== 9) {\n            $event.preventDefault();\n        }\n    }\n    onInput() {\n        const isFormatted = this.formatInteger();\n        if (isFormatted) {\n            this.triggerChange();\n        }\n    }\n    updateCurrency(currency) {\n        this.currency = currency || this.currControl.value;\n        this.triggerChange();\n    }\n    checkValues() {\n        if (this.currency === undefined) {\n            return true;\n        }\n        if (!this.decControl.value && !this.intControl.value) {\n            this.onChange(null);\n            return true;\n        }\n        return false;\n    }\n    formatDecimal(decControl) {\n        const { value } = decControl;\n        if (value && this.decMaxLen && value.lenght < this.decMaxLen) {\n            const updatedValue = String(value).padEnd(this.decMaxLen, '0');\n            decControl.patchValue(updatedValue);\n        }\n    }\n    triggerChange() {\n        if (this.checkValues()) {\n            return;\n        }\n        const int = this.intControl.value || '0';\n        if (this.resultType === 'string') {\n            const currencyGroupSymbol = new RegExp(`\\\\${this.localeSeparatorSymbols[1]}`, 'g');\n            const whole = int.replace(currencyGroupSymbol, '');\n            const dec = this.decControl.value || '0';\n            const newAmount = whole + (dec !== '0' ? '.' + dec : '');\n            this.onChange({\n                currency: this.currency,\n                amount: newAmount,\n            });\n        }\n        else {\n            const whole = parseInt(int.replace(/[^-\\d]/g, ''), 10);\n            const dec = parseFloat('0.' + this.decControl.value) || 0;\n            const sign = whole < 0 ? -1 : 1;\n            const newAmount = (Math.abs(whole) + dec) * sign;\n            this.onChange({\n                currency: this.currency,\n                amount: newAmount,\n            });\n        }\n    }\n    checkNumeric(numeric) {\n        // removed all dashes except the first one\n        if (numeric.length > 0) {\n            numeric = numeric[0] + numeric.slice(1).replace(/-/g, '');\n        }\n        numeric = this.sanitizeNumericValue(numeric);\n        return numeric === '' ? numeric : new BigNumber(numeric || 0).toFormat();\n    }\n    /**\n     * Formats integer to user-friendly format\n     *\n     * @returns Returns true in case of successful formatting, otherwise - false.\n     */\n    formatInteger() {\n        // The behavior of `formatInteger` is dependent on some component inputs,\n        // so don't format anything until the configuration is available.\n        if (!this.initialized || !this.intEl) {\n            return false;\n        }\n        if (!this.intControl.value) {\n            this.intControl.setValue('');\n            return true;\n        }\n        const offset = this.intEl.nativeElement.selectionStart - this.intControl.value.length;\n        const numeric = this.intControl.value.replace(this.allowNegativeValue ? /[^-\\d]/g : /\\D/g, '');\n        if (numeric === '-') {\n            this.intControl.setValue('-', { emitEvent: false });\n            return false;\n        }\n        const newVal = this.checkNumeric(numeric);\n        // extend maxlength (if set) with the amount of special chars\n        if (this.intMaxLen) {\n            const specialCount = newVal.replace(/\\d/g, '').length;\n            this.intEl.nativeElement.setAttribute('maxlength', '' + (this.intMaxLen + specialCount));\n        }\n        this.intControl.setValue(newVal);\n        const newLen = this.intControl.value.length;\n        const newPos = Math.max(offset + newLen, 0);\n        if (newLen > 0 && document.activeElement === this.intEl.nativeElement) {\n            this.intEl.nativeElement.selectionStart = newPos;\n            this.intEl.nativeElement.selectionEnd = newPos;\n        }\n        return true;\n    }\n    /**\n     * Event handler for backspace key press, and check if correct number is deleted\n     */\n    onBackspace(el) {\n        if (el.selectionStart) {\n            const selectionStartPosition = el.selectionStart - 1;\n            const value = el.value[selectionStartPosition];\n            if (this.localeSeparatorSymbols.includes(value)) {\n                el.setSelectionRange(selectionStartPosition, selectionStartPosition);\n            }\n        }\n    }\n    // method is used to correct rendered input's value if user entered '-' and left the field\n    correctInputValue($event) {\n        this.markAsTouched($event);\n        const numeric = this.intControl.value;\n        if (numeric !== '-') {\n            return;\n        }\n        this.intControl.setValue('', { emitEvent: false });\n    }\n    writeValue(model) {\n        if (!model) {\n            return;\n        }\n        // currency cannot be set to nothing\n        if (model.currency) {\n            this.currency = model.currency;\n            this.currControl.setValue(model.currency);\n        }\n        if (typeof model.amount === 'string' || typeof model.amount === 'number') {\n            const [whole, decimals] = ('' + model.amount).split('.');\n            this.intControl.setValue(whole);\n            this.decControl.setValue(decimals);\n        }\n        else {\n            this.intControl.setValue('');\n            this.decControl.setValue('');\n        }\n        this.formatInteger();\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    markAsTouched($event) {\n        this.blur.emit($event);\n        this.onTouched();\n    }\n    setDisabled(disableState) {\n        if (disableState.currency) {\n            this.currControl.disable();\n        }\n        else {\n            this.currControl.enable();\n        }\n        if (disableState.integer) {\n            this.intControl.disable();\n        }\n        else {\n            this.intControl.enable();\n        }\n        if (disableState.decimal) {\n            this.decControl.disable();\n        }\n        else {\n            this.decControl.enable();\n        }\n    }\n    focusDecEl(key) {\n        if (this.decEl && ['.', ','].indexOf(key) !== -1) {\n            this.decEl.nativeElement.focus();\n        }\n    }\n    /**\n     * Make sure that numeric value doesn't exceed max length (if set)\n     * this might happen in case value is pasted to input that has extended max length\n     *\n     * @param numeric\n     */\n    sanitizeNumericValue(numeric) {\n        if (this.intMaxLen && numeric) {\n            return numeric.slice(0, this.intMaxLen);\n        }\n        return numeric;\n    }\n    /**\n     * If currency doesn't have decimal part, decimal placeholder\n     * will be set to default decMinLen\n     */\n    getDecimalDigits(currency) {\n        return getNumberOfCurrencyDigits(currency) === 0 ? this.decMinLen : getNumberOfCurrencyDigits(currency);\n    }\n}\nCurrencyInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CurrencyInputComponent, deps: [{ token: i0.ElementRef }, { token: LOCALE_ID }, { token: i1.DomAttributesService }, { token: i2.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });\nCurrencyInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: CurrencyInputComponent, selector: \"bb-currency-input-ui\", inputs: { decMaxLen: \"decMaxLen\", decMinLen: \"decMinLen\", placeholder: \"placeholder\", resultType: \"resultType\", integer: \"integer\", required: \"required\", readonly: \"readonly\", disabled: \"disabled\", integerLabelSrOnly: \"integerLabelSrOnly\", decimalLabelSrOnly: \"decimalLabelSrOnly\", currencies: \"currencies\", isRightAligned: \"isRightAligned\", integerId: \"integerId\", decimalId: \"decimalId\", integerLabel: \"integerLabel\", decimalLabel: \"decimalLabel\", currencyLabel: \"currencyLabel\", allowNegativeValue: \"allowNegativeValue\", currencyListAriaLabel: \"currencyListAriaLabel\", currencyListWithOnItemAriaLabel: \"currencyListWithOnItemAriaLabel\", ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaInvalid: [\"aria-invalid\", \"ariaInvalid\"] }, outputs: { blur: \"blur\" }, providers: [DecimalPipe], viewQueries: [{ propertyName: \"intEl\", first: true, predicate: [\"integerInput\"], descendants: true, static: true }, { propertyName: \"decEl\", first: true, predicate: [\"decimalsInput\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"bb-currency-input\\\">\\n  <div class=\\\"bb-stack bb-stack--align-bottom\\\">\\n    <div *ngIf=\\\"curList && curList.length\\\" class=\\\"bb-currency-input__currency-selector selector bb-stack__item\\\">\\n      <label\\n        class=\\\"sr-only\\\"\\n        *ngIf=\\\"currencyListAriaLabel || currencyListWithOnItemAriaLabel\\\"\\n        for=\\\"{{ currencyInputId }}\\\"\\n        [attr.aria-label]=\\\"currencyListWithOnItemAriaLabel\\\"\\n        id=\\\"{{ currencyLabelId }}\\\"\\n        [attr.data-role]=\\\"'currency-input-label'\\\"\\n      >\\n        <ng-container [ngSwitch]=\\\"!!currencyListAriaLabel || !!currencyListWithOnItemAriaLabel\\\">\\n          <ng-container *ngSwitchCase=\\\"true\\\">\\n            {{ curList && curList.length > 1 ? currencyListAriaLabel : currencyListWithOnItemAriaLabel }}\\n          </ng-container>\\n          <ng-container\\n            *ngSwitchDefault\\n            i18n=\\\"\\n              Currency label | Label for currency code dropdown of the Currency Input component\\n              @@bb-currency-input-ui.currency-input-label\\\"\\n            >Currency</ng-container\\n          >\\n        </ng-container>\\n      </label>\\n      <ng-container [ngSwitch]=\\\"readonly || (curList && curList.length === 1)\\\">\\n        <input\\n          *ngSwitchCase=\\\"true\\\"\\n          type=\\\"text\\\"\\n          (blur)=\\\"markAsTouched($event)\\\"\\n          [id]=\\\"currencyInputId\\\"\\n          [readonly]=\\\"true\\\"\\n          [required]=\\\"required\\\"\\n          [attr.aria-invalid]=\\\"ariaInvalid\\\"\\n          [attr.aria-labelledby]=\\\"idListAttr(ariaLabelledby, currencyLabelId)\\\"\\n          class=\\\"form-control bb-text-align-center\\\"\\n          value=\\\"{{ cur }}\\\"\\n          [attr.data-role]=\\\"'currency-input-currency-readonly'\\\"\\n        />\\n        <bb-dropdown-single-select-ui\\n          *ngSwitchDefault\\n          [id]=\\\"currencyInputId\\\"\\n          class=\\\"bb-block\\\"\\n          [placeholder]=\\\"curList[0]\\\"\\n          [options]=\\\"curList\\\"\\n          [readonly]=\\\"readonly\\\"\\n          [required]=\\\"required\\\"\\n          [aria-invalid]=\\\"ariaInvalid\\\"\\n          [aria-labelledby]=\\\"idListAttr(ariaLabelledby, currencyLabelId)\\\"\\n          (change)=\\\"updateCurrency(); markAsTouched($event)\\\"\\n          [formControl]=\\\"currControl\\\"\\n          [attr.data-role]=\\\"'currency-input-currency-selector'\\\"\\n        ></bb-dropdown-single-select-ui>\\n      </ng-container>\\n    </div>\\n\\n    <div\\n      class=\\\"bb-currency-input__integer bb-stack__item bb-stack__item--spacing-sm\\\"\\n      [class.ng-touched]=\\\"intControl.touched || decControl.touched || parentFormControl?.touched\\\"\\n      [class.ng-invalid]=\\\"intControl.invalid || parentFormControl?.invalid\\\"\\n    >\\n      <label\\n        [class.sr-only]=\\\"!integerLabel || integerLabelSrOnly\\\"\\n        for=\\\"{{ integerInputId }}\\\"\\n        id=\\\"{{ integerLabelId }}\\\"\\n        [attr.data-role]=\\\"'currency-input-integer-label'\\\"\\n      >\\n        <ng-container [ngSwitch]=\\\"!!integerLabel\\\">\\n          <ng-container *ngSwitchCase=\\\"true\\\">\\n            {{ integerLabel }}\\n          </ng-container>\\n          <ng-container\\n            *ngSwitchDefault\\n            i18n=\\\"\\n              Integer label | Label for integer part of the monetary amount of the Currency Input component\\n              @@bb-currency-input-ui.integer-input-label\\\"\\n            >Integer</ng-container\\n          >\\n        </ng-container>\\n      </label>\\n      <input\\n        id=\\\"{{ integerInputId }}\\\"\\n        [attr.aria-describedby]=\\\"idListAttr(ariaDescribedby, validationMessagesId)\\\"\\n        [attr.aria-invalid]=\\\"ariaInvalid\\\"\\n        [attr.aria-labelledby]=\\\"idListAttr(ariaLabelledby, integerLabelId)\\\"\\n        name=\\\"integer\\\"\\n        type=\\\"text\\\"\\n        size=\\\"5\\\"\\n        role=\\\"textbox\\\"\\n        [readOnly]=\\\"readonly\\\"\\n        [required]=\\\"required\\\"\\n        (keydown.backspace)=\\\"onBackspace(integerInput)\\\"\\n        (keypress)=\\\"onPress($event)\\\"\\n        (input)=\\\"onInput()\\\"\\n        (blur)=\\\"correctInputValue($event)\\\"\\n        [formControl]=\\\"intControl\\\"\\n        class=\\\"form-control bb-text-align-right\\\"\\n        placeholder=\\\"{{ placeholder }}\\\"\\n        #integerInput\\n        autocomplete=\\\"off\\\"\\n        autocorrect=\\\"off\\\"\\n        autocapitalize=\\\"off\\\"\\n        spellcheck=\\\"false\\\"\\n        [attr.data-role]=\\\"'currency-input-integer-input'\\\"\\n      />\\n    </div>\\n\\n    <span *ngIf=\\\"!integer && decMaxLen\\\" class=\\\"bb-stack__item bb-stack__item--spacing-sm\\\">{{ decimalSeparator }}</span>\\n\\n    <div\\n      *ngIf=\\\"!integer && decMaxLen\\\"\\n      class=\\\"bb-currency-input__decimal\\\"\\n      [class.ng-touched]=\\\"intControl.touched || decControl.touched || parentFormControl?.touched\\\"\\n      [class.ng-invalid]=\\\"intControl.invalid || parentFormControl?.invalid\\\"\\n    >\\n      <label\\n        [class.sr-only]=\\\"!decimalLabel || decimalLabelSrOnly\\\"\\n        for=\\\"{{ decimalInputId }}\\\"\\n        id=\\\"{{ decimalLabelId }}\\\"\\n        [attr.data-role]=\\\"'currency-input-decimal-label'\\\"\\n      >\\n        <ng-container [ngSwitch]=\\\"!!decimalLabel\\\">\\n          <ng-container *ngSwitchCase=\\\"true\\\">\\n            {{ decimalLabel }}\\n          </ng-container>\\n          <ng-container\\n            *ngSwitchDefault\\n            i18n=\\\"\\n              Decimal label | Label for decimal part of the monetary amount of the Currency Input component\\n              @@bb-currency-input-ui.decimal-input-label\\\"\\n          >\\n            Decimals\\n          </ng-container>\\n        </ng-container>\\n      </label>\\n      <input\\n        id=\\\"{{ decimalInputId }}\\\"\\n        [attr.aria-describedby]=\\\"idListAttr(ariaDescribedby, validationMessagesId)\\\"\\n        [attr.aria-invalid]=\\\"ariaInvalid\\\"\\n        [attr.aria-labelledby]=\\\"idListAttr(ariaLabelledby, decimalLabelId)\\\"\\n        name=\\\"decimals\\\"\\n        type=\\\"text\\\"\\n        role=\\\"textbox\\\"\\n        [readOnly]=\\\"readonly\\\"\\n        [required]=\\\"required\\\"\\n        (keypress)=\\\"onPress($event)\\\"\\n        (input)=\\\"triggerChange()\\\"\\n        (blur)=\\\"decOnBlur($event)\\\"\\n        [formControl]=\\\"decControl\\\"\\n        class=\\\"form-control\\\"\\n        [ngClass]=\\\"{ 'bb-text-align-right': isRightAligned }\\\"\\n        maxlength=\\\"{{ decMaxLen }}\\\"\\n        placeholder=\\\"{{ decPlaceholder }}\\\"\\n        #decimalsInput\\n        autocomplete=\\\"off\\\"\\n        autocorrect=\\\"off\\\"\\n        autocapitalize=\\\"off\\\"\\n        spellcheck=\\\"false\\\"\\n        [attr.data-role]=\\\"'input-currency-decimals'\\\"\\n      />\\n    </div>\\n  </div>\\n  <div\\n    class=\\\"bb-input-validation-message\\\"\\n    aria-live=\\\"assertive\\\"\\n    [id]=\\\"validationMessagesId\\\"\\n    [attr.data-role]=\\\"'currency-input-validation-message'\\\"\\n  >\\n    <ng-content select=\\\"[bbValidationMessage]\\\"></ng-content>\\n  </div>\\n</div>\\n\", components: [{ type: i3.DropdownSingleSelectComponent, selector: \"bb-dropdown-single-select-ui\", inputs: [\"placeholder\", \"defaultOptionAsPlaceholder\", \"options\", \"displayAttributePath\", \"iconName\", \"compareWithFn\"] }], directives: [{ type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i4.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i4.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { type: i2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.FormControlDirective, selector: \"[formControl]\", inputs: [\"disabled\", \"formControl\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }, { type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i4.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.MaxLengthValidator, selector: \"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\", inputs: [\"maxlength\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CurrencyInputComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-currency-input-ui',\n                    templateUrl: './currency-input.component.html',\n                    providers: [DecimalPipe],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LOCALE_ID]\n                }] }, { type: i1.DomAttributesService }, { type: i2.NgControl, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }]; }, propDecorators: { decMaxLen: [{\n                type: Input\n            }], decMinLen: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], resultType: [{\n                type: Input\n            }], integer: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], integerLabelSrOnly: [{\n                type: Input\n            }], decimalLabelSrOnly: [{\n                type: Input\n            }], currencies: [{\n                type: Input\n            }], isRightAligned: [{\n                type: Input\n            }], integerId: [{\n                type: Input\n            }], decimalId: [{\n                type: Input\n            }], integerLabel: [{\n                type: Input\n            }], decimalLabel: [{\n                type: Input\n            }], currencyLabel: [{\n                type: Input\n            }], allowNegativeValue: [{\n                type: Input\n            }], currencyListAriaLabel: [{\n                type: Input\n            }], currencyListWithOnItemAriaLabel: [{\n                type: Input\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaInvalid: [{\n                type: Input,\n                args: ['aria-invalid']\n            }], intEl: [{\n                type: ViewChild,\n                args: ['integerInput', { static: true }]\n            }], decEl: [{\n                type: ViewChild,\n                args: ['decimalsInput']\n            }], blur: [{\n                type: Output\n            }] } });\n\nclass CurrencyInputModule {\n}\nCurrencyInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CurrencyInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCurrencyInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CurrencyInputModule, declarations: [CurrencyInputComponent], imports: [CommonModule, ReactiveFormsModule, DropdownSingleSelectModule], exports: [CurrencyInputComponent,\n        // exporting validation message as it can be injected into the component template\n        InputValidationMessageModule,\n        /**\n         * @deprecated\n         * Exporting `FormsModule` is deprecated\n         **/\n        FormsModule] });\nCurrencyInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CurrencyInputModule, imports: [[CommonModule, ReactiveFormsModule, DropdownSingleSelectModule], \n        // exporting validation message as it can be injected into the component template\n        InputValidationMessageModule,\n        /**\n         * @deprecated\n         * Exporting `FormsModule` is deprecated\n         **/\n        FormsModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CurrencyInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, ReactiveFormsModule, DropdownSingleSelectModule],\n                    declarations: [CurrencyInputComponent],\n                    exports: [\n                        CurrencyInputComponent,\n                        // exporting validation message as it can be injected into the component template\n                        InputValidationMessageModule,\n                        /**\n                         * @deprecated\n                         * Exporting `FormsModule` is deprecated\n                         **/\n                        FormsModule,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CurrencyInputComponent, CurrencyInputModule };\n"]},"metadata":{},"sourceType":"module"}