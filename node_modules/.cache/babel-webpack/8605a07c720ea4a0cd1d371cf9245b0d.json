{"ast":null,"code":"import * as i2 from '@angular/common';\nimport { getLocaleNumberSymbol, NumberSymbol, getCurrencySymbol, getNumberOfCurrencyDigits, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { LOCALE_ID, forwardRef, Component, ChangeDetectionStrategy, Inject, HostBinding, Input, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';\nimport BigNumber from 'bignumber.js';\nimport { idListAttr } from '@backbase/ui-ang/util';\nimport * as i1 from '@backbase/foundation-ang/future';\n/**\n * @name AmountInputComponent\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes. You need to take care of properties that are required in your case :\n *  - set aria-describedby with ID of another element in the DOM with descriptive text about the amount input,\n *    by default it is set to div defining the type of currency\n *  - set aria-invalid with boolean value when the entered input value is not valid\n *  - set aria-labelledby with ID of another element in the DOM as input's label\n *\n * @description\n * Component that displays a text input.\n */\n\nconst _c0 = [\"amountInput\"];\n\nfunction AmountInputComponent_label_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"for\", ctx_r0.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.label, \" \");\n  }\n}\n\nfunction AmountInputComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 6);\n    i0.ɵɵelementStart(1, \"span\", 7);\n    i0.ɵɵi18n(2, 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", ctx_r2.componentUniqueId);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.currency, \" \");\n  }\n}\n\nclass AmountInputComponent extends InputBaseComponent {\n  constructor(cd, deprecationsService, locale, renderer) {\n    super(cd, deprecationsService);\n    this.locale = locale;\n    this.renderer = renderer;\n    this.inputClass = 'bb-amount-input';\n    /**\n     * Unique ID used for the accessibility property. New value is created when component is initialized.\n     *\n     * @internal\n     */\n\n    this.componentUniqueId = `${this.id}-currency`;\n    /**\n     * Utility function for use in template\n     */\n\n    this.idListAttr = idListAttr;\n    /**\n     * The placeholder for the text input. Defaults to an empty string;\n     */\n\n    this.placeholder = '';\n    /**\n     * classnames for the wrapper div\n     */\n\n    this.wrapperClasses = '';\n    /**\n     * Whether currency local should be transformed to symbol.\n     * Default value true.\n     */\n\n    this.mapCurrency = true;\n    /**\n     * Determines currency type.\n     * If nothing provided, wouldn't be displayed.\n     */\n\n    this._currency = '';\n    this._decimals = 2;\n    /**\n     * The flag to wether auto add decimal part or not defaults to false\n     */\n\n    this.autoDecimal = false;\n    this.groupSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyGroup);\n    this.decimalSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal);\n    this.nonNumbersAndDecimalSeparatorRegex = new RegExp(`[^${this.decimalSeparator}\\\\d]`, 'g');\n    this.endWithDecimal = new RegExp(`[${this.decimalSeparator}]$`, 'g');\n    this.format = {\n      groupSeparator: this.groupSeparator,\n      decimalSeparator: this.decimalSeparator,\n      groupSize: 3\n    };\n  }\n\n  set currency(value) {\n    if (value) {\n      this._currency = this.mapCurrency ? getCurrencySymbol(value, 'wide', this.locale) : value;\n      this._decimals = getNumberOfCurrencyDigits(value);\n    }\n  }\n\n  get currency() {\n    return this._currency;\n  }\n\n  writeValue(model) {\n    const sanitizedInput = model !== null && model !== void 0 ? model : '';\n\n    if (typeof sanitizedInput === 'string') {\n      const numeric = sanitizedInput.replace(this.nonNumbersAndDecimalSeparatorRegex, '').slice(0, this.maxLength) || '';\n      this.renderer.setProperty(this.amountEl.nativeElement, 'value', this.formatAmount(numeric));\n    }\n  }\n\n  formatAmount(numeric) {\n    if (numeric) {\n      if (numeric.includes(this.decimalSeparator)) {\n        const [int, dec] = numeric.split(this.decimalSeparator);\n        return new BigNumber(int || 0).toFormat(this.format) + this.decimalSeparator + dec.slice(0, this._decimals);\n      } else {\n        return new BigNumber(numeric).toFormat(this.format);\n      }\n    } else {\n      return numeric;\n    }\n  }\n\n  updateAmountInput() {\n    var _a;\n\n    const amountEl = this.amountEl.nativeElement;\n    const numeric = ((_a = amountEl.value) === null || _a === void 0 ? void 0 : _a.replace(this.nonNumbersAndDecimalSeparatorRegex, '').slice(0, this.maxLength)) || '';\n    this.renderer.setProperty(amountEl, 'value', this.formatAmount(numeric));\n  }\n\n  setSelection(start, end) {\n    const amountEl = this.amountEl.nativeElement;\n    this.renderer.setProperty(amountEl, 'selectionStart', start);\n    this.renderer.setProperty(amountEl, 'selectionEnd', end);\n  }\n\n  correctInputValue() {\n    var _a;\n\n    this.onBlur();\n    const amountEl = (_a = this.amountEl) === null || _a === void 0 ? void 0 : _a.nativeElement;\n\n    if (amountEl.value) {\n      const numeric = amountEl.value.replace(this.endWithDecimal, '');\n      this.renderer.setProperty(amountEl, 'value', numeric);\n      this.updateOutputValue(numeric.replace(this.nonNumbersAndDecimalSeparatorRegex, ''));\n    }\n  }\n  /**\n   * Event handler for backspace key press, and check if correct number is deleted\n   */\n\n\n  onBackspace(el) {\n    if (this.autoDecimal && el.selectionStart && el.value[el.selectionStart - 1] === this.groupSeparator) {\n      this.setSelection(el.selectionStart - 1, el.selectionStart - 1);\n    }\n  }\n\n  onPress($event) {\n    const key = $event.key;\n    const elm = this.amountEl.nativeElement;\n    const value = elm.value;\n\n    if (value) {\n      const isDotExist = value.includes(this.decimalSeparator) && key === this.decimalSeparator;\n      const regexString = `^[\\\\d${this.groupSeparator}]*[${this.decimalSeparator}]?\\\\d{0,${this._decimals}}$`;\n      const formattedCurrencyRegex = new RegExp(regexString, 'g');\n      const decimalStructure = formattedCurrencyRegex.test(value);\n\n      if (isDotExist || !decimalStructure) {\n        const pos = elm.selectionStart;\n\n        if (value.indexOf(this.decimalSeparator) === pos) {\n          this.setSelection(pos + 1, pos + 1);\n        }\n\n        $event.preventDefault();\n      }\n    }\n  }\n\n  onInput() {\n    const elm = this.amountEl.nativeElement;\n    const value = elm.value.trim();\n    const cursorPos = elm.selectionStart || 0;\n    const oldPos = value.length - cursorPos;\n    this.updateAmountInput();\n    const formatted = elm.value.replace(this.nonNumbersAndDecimalSeparatorRegex, '').replace(this.endWithDecimal, '');\n\n    if (formatted) {\n      if (value.length === 1 && value !== this.decimalSeparator) {\n        const newValue = this.autoDecimal ? value + this.decimalSeparator + '0'.repeat(this._decimals) : value;\n        this.renderer.setProperty(elm, 'value', newValue);\n        this.setSelection(1, 1);\n      } else {\n        let newpos = elm.value.length - oldPos;\n\n        if (value.includes(this.decimalSeparator) && cursorPos > value.indexOf(this.decimalSeparator)) {\n          newpos++;\n        }\n\n        this.setSelection(newpos, newpos);\n      }\n    }\n\n    this.updateOutputValue(formatted);\n  }\n\n  updateOutputValue(value) {\n    this.onValueChange(value.replace(this.decimalSeparator, '.'));\n  }\n\n}\n\nAmountInputComponent.ɵfac = function AmountInputComponent_Factory(t) {\n  return new (t || AmountInputComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.DeprecationsService), i0.ɵɵdirectiveInject(LOCALE_ID), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\n\nAmountInputComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AmountInputComponent,\n  selectors: [[\"bb-amount-input-ui\"]],\n  viewQuery: function AmountInputComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.amountEl = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function AmountInputComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.inputClass);\n    }\n  },\n  inputs: {\n    placeholder: \"placeholder\",\n    maxLength: \"maxLength\",\n    wrapperClasses: \"wrapperClasses\",\n    mapCurrency: \"mapCurrency\",\n    currency: \"currency\",\n    autoDecimal: \"autoDecimal\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => AmountInputComponent),\n    multi: true\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 12,\n  consts: function () {\n    let i18n_1;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc Text to explain that currency will be read by screen reader\n       * @meaning Currency\n       */\n      const MSG_C__USERS_HBAYLON_DOCUMENTS_WEST_MONROE_PROJECTS_BACKBASE2_WEB_RETAIL_USA_WEB_NODE_MODULES__BACKBASE_UI_ANG_FESM2015_BACKBASE_UI_ANG_AMOUNT_INPUT_JS__2 = goog.getMsg(\"Currency\");\n      i18n_1 = MSG_C__USERS_HBAYLON_DOCUMENTS_WEST_MONROE_PROJECTS_BACKBASE2_WEB_RETAIL_USA_WEB_NODE_MODULES__BACKBASE_UI_ANG_FESM2015_BACKBASE_UI_ANG_AMOUNT_INPUT_JS__2;\n    } else {\n      i18n_1 = $localize`:Currency|Text to explain that currency will be read by screen reader@@bb-amount-input-ui.currency-description:Currency`;\n    }\n\n    return [[3, \"for\", 4, \"ngIf\"], [1, \"bb-amount-input__field\", 3, \"ngClass\"], [\"type\", \"text\", \"autocomplete\", \"off\", \"autocorrect\", \"off\", \"autocapitalize\", \"off\", \"spellcheck\", \"false\", \"data-role\", \"bb-amount-input-ui\", 1, \"form-control\", \"bb-text-align-right\", 3, \"id\", \"readOnly\", \"disabled\", \"required\", \"placeholder\", \"keydown\", \"keydown.backspace\", \"blur\", \"input\"], [\"amountInput\", \"\"], [\"data-role\", \"bb-amount-input-currency\", \"class\", \"bb-amount-input__symbol\", 3, \"id\", 4, \"ngIf\"], [3, \"for\"], [\"data-role\", \"bb-amount-input-currency\", 1, \"bb-amount-input__symbol\", 3, \"id\"], [1, \"sr-only\"], i18n_1];\n  },\n  template: function AmountInputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r3 = i0.ɵɵgetCurrentView();\n\n      i0.ɵɵtemplate(0, AmountInputComponent_label_0_Template, 2, 2, \"label\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"input\", 2, 3);\n      i0.ɵɵlistener(\"keydown\", function AmountInputComponent_Template_input_keydown_2_listener($event) {\n        return ctx.onPress($event);\n      })(\"keydown.backspace\", function AmountInputComponent_Template_input_keydown_backspace_2_listener() {\n        i0.ɵɵrestoreView(_r3);\n\n        const _r1 = i0.ɵɵreference(3);\n\n        return ctx.onBackspace(_r1);\n      })(\"blur\", function AmountInputComponent_Template_input_blur_2_listener() {\n        return ctx.correctInputValue();\n      })(\"input\", function AmountInputComponent_Template_input_input_2_listener() {\n        return ctx.onInput();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, AmountInputComponent_span_4_Template, 4, 2, \"span\", 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.label);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", ctx.wrapperClasses);\n      i0.ɵɵadvance(1);\n      i0.ɵɵpropertyInterpolate(\"id\", ctx.id);\n      i0.ɵɵproperty(\"readOnly\", ctx.readonly)(\"disabled\", ctx.disabled)(\"required\", ctx.required)(\"placeholder\", ctx.placeholder);\n      i0.ɵɵattribute(\"maxlength\", ctx.maxLength)(\"aria-describedby\", ctx.idListAttr(ctx.ariaDescribedby, ctx.componentUniqueId))(\"aria-invalid\", ctx.ariaInvalid)(\"aria-labelledby\", ctx.ariaLabelledby);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.currency);\n    }\n  },\n  directives: [i2.NgIf, i2.NgClass],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AmountInputComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-amount-input-ui',\n      templateUrl: './amount-input.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AmountInputComponent),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.DeprecationsService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOCALE_ID]\n      }]\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    inputClass: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    maxLength: [{\n      type: Input\n    }],\n    wrapperClasses: [{\n      type: Input\n    }],\n    mapCurrency: [{\n      type: Input\n    }],\n    currency: [{\n      type: Input\n    }],\n    autoDecimal: [{\n      type: Input\n    }],\n    amountEl: [{\n      type: ViewChild,\n      args: ['amountInput', {\n        static: true\n      }]\n    }]\n  });\n})();\n\nclass AmountInputModule {}\n\nAmountInputModule.ɵfac = function AmountInputModule_Factory(t) {\n  return new (t || AmountInputModule)();\n};\n\nAmountInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AmountInputModule\n});\nAmountInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, FormsModule, BaseClassesModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AmountInputModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule, BaseClassesModule],\n      declarations: [AmountInputComponent],\n      exports: [AmountInputComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AmountInputComponent, AmountInputModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-amount-input.js"],"names":["i2","getLocaleNumberSymbol","NumberSymbol","getCurrencySymbol","getNumberOfCurrencyDigits","CommonModule","i0","LOCALE_ID","forwardRef","Component","ChangeDetectionStrategy","Inject","HostBinding","Input","ViewChild","NgModule","NG_VALUE_ACCESSOR","FormsModule","InputBaseComponent","BaseClassesModule","BigNumber","idListAttr","i1","AmountInputComponent","constructor","cd","deprecationsService","locale","renderer","inputClass","componentUniqueId","id","placeholder","wrapperClasses","mapCurrency","_currency","_decimals","autoDecimal","groupSeparator","CurrencyGroup","decimalSeparator","CurrencyDecimal","nonNumbersAndDecimalSeparatorRegex","RegExp","endWithDecimal","format","groupSize","currency","value","writeValue","model","sanitizedInput","numeric","replace","slice","maxLength","setProperty","amountEl","nativeElement","formatAmount","includes","int","dec","split","toFormat","updateAmountInput","_a","setSelection","start","end","correctInputValue","onBlur","updateOutputValue","onBackspace","el","selectionStart","onPress","$event","key","elm","isDotExist","regexString","formattedCurrencyRegex","decimalStructure","test","pos","indexOf","preventDefault","onInput","trim","cursorPos","oldPos","length","formatted","newValue","repeat","newpos","onValueChange","ɵfac","ChangeDetectorRef","DeprecationsService","Renderer2","ɵcmp","provide","useExisting","multi","NgIf","NgClass","type","args","selector","templateUrl","changeDetection","OnPush","providers","undefined","decorators","static","AmountInputModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i2 from '@angular/common';\nimport { getLocaleNumberSymbol, NumberSymbol, getCurrencySymbol, getNumberOfCurrencyDigits, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { LOCALE_ID, forwardRef, Component, ChangeDetectionStrategy, Inject, HostBinding, Input, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';\nimport BigNumber from 'bignumber.js';\nimport { idListAttr } from '@backbase/ui-ang/util';\nimport * as i1 from '@backbase/foundation-ang/future';\n\n/**\n * @name AmountInputComponent\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes. You need to take care of properties that are required in your case :\n *  - set aria-describedby with ID of another element in the DOM with descriptive text about the amount input,\n *    by default it is set to div defining the type of currency\n *  - set aria-invalid with boolean value when the entered input value is not valid\n *  - set aria-labelledby with ID of another element in the DOM as input's label\n *\n * @description\n * Component that displays a text input.\n */\nclass AmountInputComponent extends InputBaseComponent {\n    constructor(cd, deprecationsService, locale, renderer) {\n        super(cd, deprecationsService);\n        this.locale = locale;\n        this.renderer = renderer;\n        this.inputClass = 'bb-amount-input';\n        /**\n         * Unique ID used for the accessibility property. New value is created when component is initialized.\n         *\n         * @internal\n         */\n        this.componentUniqueId = `${this.id}-currency`;\n        /**\n         * Utility function for use in template\n         */\n        this.idListAttr = idListAttr;\n        /**\n         * The placeholder for the text input. Defaults to an empty string;\n         */\n        this.placeholder = '';\n        /**\n         * classnames for the wrapper div\n         */\n        this.wrapperClasses = '';\n        /**\n         * Whether currency local should be transformed to symbol.\n         * Default value true.\n         */\n        this.mapCurrency = true;\n        /**\n         * Determines currency type.\n         * If nothing provided, wouldn't be displayed.\n         */\n        this._currency = '';\n        this._decimals = 2;\n        /**\n         * The flag to wether auto add decimal part or not defaults to false\n         */\n        this.autoDecimal = false;\n        this.groupSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyGroup);\n        this.decimalSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal);\n        this.nonNumbersAndDecimalSeparatorRegex = new RegExp(`[^${this.decimalSeparator}\\\\d]`, 'g');\n        this.endWithDecimal = new RegExp(`[${this.decimalSeparator}]$`, 'g');\n        this.format = {\n            groupSeparator: this.groupSeparator,\n            decimalSeparator: this.decimalSeparator,\n            groupSize: 3,\n        };\n    }\n    set currency(value) {\n        if (value) {\n            this._currency = this.mapCurrency ? getCurrencySymbol(value, 'wide', this.locale) : value;\n            this._decimals = getNumberOfCurrencyDigits(value);\n        }\n    }\n    get currency() {\n        return this._currency;\n    }\n    writeValue(model) {\n        const sanitizedInput = model !== null && model !== void 0 ? model : '';\n        if (typeof sanitizedInput === 'string') {\n            const numeric = sanitizedInput.replace(this.nonNumbersAndDecimalSeparatorRegex, '').slice(0, this.maxLength) || '';\n            this.renderer.setProperty(this.amountEl.nativeElement, 'value', this.formatAmount(numeric));\n        }\n    }\n    formatAmount(numeric) {\n        if (numeric) {\n            if (numeric.includes(this.decimalSeparator)) {\n                const [int, dec] = numeric.split(this.decimalSeparator);\n                return new BigNumber(int || 0).toFormat(this.format) + this.decimalSeparator + dec.slice(0, this._decimals);\n            }\n            else {\n                return new BigNumber(numeric).toFormat(this.format);\n            }\n        }\n        else {\n            return numeric;\n        }\n    }\n    updateAmountInput() {\n        var _a;\n        const amountEl = this.amountEl.nativeElement;\n        const numeric = ((_a = amountEl.value) === null || _a === void 0 ? void 0 : _a.replace(this.nonNumbersAndDecimalSeparatorRegex, '').slice(0, this.maxLength)) || '';\n        this.renderer.setProperty(amountEl, 'value', this.formatAmount(numeric));\n    }\n    setSelection(start, end) {\n        const amountEl = this.amountEl.nativeElement;\n        this.renderer.setProperty(amountEl, 'selectionStart', start);\n        this.renderer.setProperty(amountEl, 'selectionEnd', end);\n    }\n    correctInputValue() {\n        var _a;\n        this.onBlur();\n        const amountEl = (_a = this.amountEl) === null || _a === void 0 ? void 0 : _a.nativeElement;\n        if (amountEl.value) {\n            const numeric = amountEl.value.replace(this.endWithDecimal, '');\n            this.renderer.setProperty(amountEl, 'value', numeric);\n            this.updateOutputValue(numeric.replace(this.nonNumbersAndDecimalSeparatorRegex, ''));\n        }\n    }\n    /**\n     * Event handler for backspace key press, and check if correct number is deleted\n     */\n    onBackspace(el) {\n        if (this.autoDecimal && el.selectionStart && el.value[el.selectionStart - 1] === this.groupSeparator) {\n            this.setSelection(el.selectionStart - 1, el.selectionStart - 1);\n        }\n    }\n    onPress($event) {\n        const key = $event.key;\n        const elm = this.amountEl.nativeElement;\n        const value = elm.value;\n        if (value) {\n            const isDotExist = value.includes(this.decimalSeparator) && key === this.decimalSeparator;\n            const regexString = `^[\\\\d${this.groupSeparator}]*[${this.decimalSeparator}]?\\\\d{0,${this._decimals}}$`;\n            const formattedCurrencyRegex = new RegExp(regexString, 'g');\n            const decimalStructure = formattedCurrencyRegex.test(value);\n            if (isDotExist || !decimalStructure) {\n                const pos = elm.selectionStart;\n                if (value.indexOf(this.decimalSeparator) === pos) {\n                    this.setSelection(pos + 1, pos + 1);\n                }\n                $event.preventDefault();\n            }\n        }\n    }\n    onInput() {\n        const elm = this.amountEl.nativeElement;\n        const value = elm.value.trim();\n        const cursorPos = elm.selectionStart || 0;\n        const oldPos = value.length - cursorPos;\n        this.updateAmountInput();\n        const formatted = elm.value.replace(this.nonNumbersAndDecimalSeparatorRegex, '').replace(this.endWithDecimal, '');\n        if (formatted) {\n            if (value.length === 1 && value !== this.decimalSeparator) {\n                const newValue = this.autoDecimal ? value + this.decimalSeparator + '0'.repeat(this._decimals) : value;\n                this.renderer.setProperty(elm, 'value', newValue);\n                this.setSelection(1, 1);\n            }\n            else {\n                let newpos = elm.value.length - oldPos;\n                if (value.includes(this.decimalSeparator) && cursorPos > value.indexOf(this.decimalSeparator)) {\n                    newpos++;\n                }\n                this.setSelection(newpos, newpos);\n            }\n        }\n        this.updateOutputValue(formatted);\n    }\n    updateOutputValue(value) {\n        this.onValueChange(value.replace(this.decimalSeparator, '.'));\n    }\n}\nAmountInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AmountInputComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DeprecationsService }, { token: LOCALE_ID }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });\nAmountInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: AmountInputComponent, selector: \"bb-amount-input-ui\", inputs: { placeholder: \"placeholder\", maxLength: \"maxLength\", wrapperClasses: \"wrapperClasses\", mapCurrency: \"mapCurrency\", currency: \"currency\", autoDecimal: \"autoDecimal\" }, host: { properties: { \"class\": \"this.inputClass\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => AmountInputComponent),\n            multi: true,\n        },\n    ], viewQueries: [{ propertyName: \"amountEl\", first: true, predicate: [\"amountInput\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<label *ngIf=\\\"label\\\" for=\\\"{{ id }}\\\"> {{ label }} </label>\\n<div class=\\\"bb-amount-input__field\\\" [ngClass]=\\\"wrapperClasses\\\">\\n  <input\\n    id=\\\"{{ id }}\\\"\\n    type=\\\"text\\\"\\n    class=\\\"form-control bb-text-align-right\\\"\\n    autocomplete=\\\"off\\\"\\n    autocorrect=\\\"off\\\"\\n    autocapitalize=\\\"off\\\"\\n    spellcheck=\\\"false\\\"\\n    data-role=\\\"bb-amount-input-ui\\\"\\n    #amountInput\\n    [attr.maxlength]=\\\"maxLength\\\"\\n    [readOnly]=\\\"readonly\\\"\\n    [disabled]=\\\"disabled\\\"\\n    [required]=\\\"required\\\"\\n    [placeholder]=\\\"placeholder\\\"\\n    [attr.aria-describedby]=\\\"idListAttr(ariaDescribedby, componentUniqueId)\\\"\\n    [attr.aria-invalid]=\\\"ariaInvalid\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n    (keydown)=\\\"onPress($event)\\\"\\n    (keydown.backspace)=\\\"onBackspace(amountInput)\\\"\\n    (blur)=\\\"correctInputValue()\\\"\\n    (input)=\\\"onInput()\\\"\\n  />\\n  <span *ngIf=\\\"currency\\\" data-role=\\\"bb-amount-input-currency\\\" class=\\\"bb-amount-input__symbol\\\" [id]=\\\"componentUniqueId\\\">\\n    <span\\n      class=\\\"sr-only\\\"\\n      i18n=\\\"\\n        Currency|Text to explain that currency will be read by screen reader@@bb-amount-input-ui.currency-description\\\"\\n      >Currency</span\\n    >\\n    {{ currency }}\\n  </span>\\n</div>\\n\", directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AmountInputComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-amount-input-ui',\n                    templateUrl: './amount-input.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => AmountInputComponent),\n                            multi: true,\n                        },\n                    ],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DeprecationsService }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LOCALE_ID]\n                }] }, { type: i0.Renderer2 }]; }, propDecorators: { inputClass: [{\n                type: HostBinding,\n                args: ['class']\n            }], placeholder: [{\n                type: Input\n            }], maxLength: [{\n                type: Input\n            }], wrapperClasses: [{\n                type: Input\n            }], mapCurrency: [{\n                type: Input\n            }], currency: [{\n                type: Input\n            }], autoDecimal: [{\n                type: Input\n            }], amountEl: [{\n                type: ViewChild,\n                args: ['amountInput', { static: true }]\n            }] } });\n\nclass AmountInputModule {\n}\nAmountInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AmountInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAmountInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AmountInputModule, declarations: [AmountInputComponent], imports: [CommonModule, FormsModule, BaseClassesModule], exports: [AmountInputComponent] });\nAmountInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AmountInputModule, imports: [[CommonModule, FormsModule, BaseClassesModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AmountInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, FormsModule, BaseClassesModule],\n                    declarations: [AmountInputComponent],\n                    exports: [AmountInputComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AmountInputComponent, AmountInputModule };\n"]},"metadata":{},"sourceType":"module"}