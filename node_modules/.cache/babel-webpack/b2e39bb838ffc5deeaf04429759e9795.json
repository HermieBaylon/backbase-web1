{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { forwardRef, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { FormGroup, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';\nimport { BehaviorSubject, Subject, combineLatest } from 'rxjs';\nimport * as i1 from '@backbase/foundation-ang/future';\nimport * as i3 from '@backbase/ui-ang/input-checkbox';\nimport { InputCheckboxModule } from '@backbase/ui-ang/input-checkbox';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n/**\n * @name CheckboxGroupComponent\n *\n * @description\n * Stores a state, determines it and displays a parent checkbox for a checkboxes group.\n * Required module(s): FormsModule\n */\n\nfunction CheckboxGroupComponent_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 0, [\"*ngIf\", \"!label\"]);\n  }\n}\n\nconst _c0 = [\"*\"];\n\nclass CheckboxGroupComponent extends InputBaseComponent {\n  constructor(cd, deprecationsService, controlContainer) {\n    super(cd, deprecationsService);\n    this.cd = cd;\n    this.deprecationsService = deprecationsService;\n    this.controlContainer = controlContainer;\n    this.indeterminate = false;\n    this.skip$ = new BehaviorSubject(false);\n    this.unsubscribe$ = new Subject();\n  }\n\n  ngAfterContentChecked() {\n    if (this.controlContainer.control && this.control !== this.controlContainer.control) {\n      this.control = this.controlContainer.control;\n      this.checkState(this.control.value);\n      combineLatest(this.control.valueChanges, this.skip$).pipe(filter(([state, skip]) => !skip), takeUntil(this.unsubscribe$)).subscribe(([state]) => this.checkState(state));\n    }\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n\n  onValueChange() {\n    const setValue = control => {\n      Object.keys(control.value).forEach(key => control.controls[key] instanceof FormGroup ? setValue(control.controls[key]) : control.controls[key].setValue(this.value));\n    };\n\n    if (this.control) {\n      this.skip$.next(true);\n      setValue(this.control);\n      this.skip$.next(false);\n    }\n\n    super.onValueChange();\n  }\n\n  isDisabled() {\n    return !!this.control && Object.keys(this.control.controls).every(key => this.control && this.control.controls && this.control.controls[key] && this.control.controls[key].disabled || false);\n  }\n\n  checkState(state) {\n    /**\n     * @param arrayHandler - a function to iterate over a tree\n     * @description iterates over a tree using an arrayHandler function\n     * @return a function which recursively calls arrayHandler over a tree\n     */\n    const checkGroup = arrayHandler => {\n      /**\n       * @param value - primitive or tree data structure\n       * @return\n       * if input value is a primitive - returns value, casted to boolean,\n       * if input value is a tree - returns result of recursively calling arrayHandler function over a tree\n       */\n      const checkValue = value => typeof value === 'object' && value !== null ? arrayHandler.call(Object.keys(value).map(key => value[key]), checkValue) : !!value;\n\n      return value => arrayHandler.call(Object.keys(value).map(key => value[key]), checkValue);\n    };\n\n    const isAllChecked = checkGroup(Array.prototype.every)(state);\n    const isSomeChecked = checkGroup(Array.prototype.some)(state);\n    this.indeterminate = isSomeChecked && !isAllChecked;\n    this.writeValue(isAllChecked);\n  }\n\n}\n\nCheckboxGroupComponent.ɵfac = function CheckboxGroupComponent_Factory(t) {\n  return new (t || CheckboxGroupComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.DeprecationsService), i0.ɵɵdirectiveInject(i2.ControlContainer));\n};\n\nCheckboxGroupComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CheckboxGroupComponent,\n  selectors: [[\"bb-checkbox-group-ui\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxGroupComponent),\n    multi: true\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 6,\n  consts: [[3, \"label\", \"aria-label\", \"indeterminate\", \"ngModel\", \"disabled\", \"indeterminateChange\", \"ngModelChange\", \"change\"], [4, \"ngIf\"]],\n  template: function CheckboxGroupComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"bb-input-checkbox-ui\", 0);\n      i0.ɵɵlistener(\"indeterminateChange\", function CheckboxGroupComponent_Template_bb_input_checkbox_ui_indeterminateChange_0_listener($event) {\n        return ctx.indeterminate = $event;\n      })(\"ngModelChange\", function CheckboxGroupComponent_Template_bb_input_checkbox_ui_ngModelChange_0_listener($event) {\n        return ctx.value = $event;\n      })(\"change\", function CheckboxGroupComponent_Template_bb_input_checkbox_ui_change_0_listener() {\n        return ctx.onValueChange();\n      });\n      i0.ɵɵtemplate(1, CheckboxGroupComponent_ng_content_1_Template, 1, 0, \"ng-content\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"label\", ctx.label)(\"aria-label\", !ctx.label && ctx.ariaLabel || null)(\"indeterminate\", ctx.indeterminate)(\"ngModel\", ctx.value)(\"disabled\", ctx.isDisabled());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.label);\n    }\n  },\n  directives: [i3.InputCheckboxComponent, i2.NgControlStatus, i2.NgModel, i4.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CheckboxGroupComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bb-checkbox-group-ui',\n      templateUrl: './checkbox-group.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => CheckboxGroupComponent),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.DeprecationsService\n    }, {\n      type: i2.ControlContainer\n    }];\n  }, null);\n})();\n\nclass CheckboxGroupModule {}\n\nCheckboxGroupModule.ɵfac = function CheckboxGroupModule_Factory(t) {\n  return new (t || CheckboxGroupModule)();\n};\n\nCheckboxGroupModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CheckboxGroupModule\n});\nCheckboxGroupModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, InputCheckboxModule, FormsModule, BaseClassesModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CheckboxGroupModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, InputCheckboxModule, FormsModule, BaseClassesModule],\n      declarations: [CheckboxGroupComponent],\n      exports: [CheckboxGroupComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CheckboxGroupComponent, CheckboxGroupModule };","map":{"version":3,"sources":["C:/Users/hbaylon/Documents/West Monroe/Projects/Backbase2/web/retail-usa-web/node_modules/@backbase/ui-ang/fesm2015/backbase-ui-ang-checkbox-group.js"],"names":["i0","forwardRef","Component","ChangeDetectionStrategy","NgModule","i2","FormGroup","NG_VALUE_ACCESSOR","FormsModule","filter","takeUntil","InputBaseComponent","BaseClassesModule","BehaviorSubject","Subject","combineLatest","i1","i3","InputCheckboxModule","i4","CommonModule","CheckboxGroupComponent","constructor","cd","deprecationsService","controlContainer","indeterminate","skip$","unsubscribe$","ngAfterContentChecked","control","checkState","value","valueChanges","pipe","state","skip","subscribe","ngOnDestroy","next","complete","onValueChange","setValue","Object","keys","forEach","key","controls","isDisabled","every","disabled","checkGroup","arrayHandler","checkValue","call","map","isAllChecked","Array","prototype","isSomeChecked","some","writeValue","ɵfac","ChangeDetectorRef","DeprecationsService","ControlContainer","ɵcmp","provide","useExisting","multi","InputCheckboxComponent","NgControlStatus","NgModel","NgIf","type","args","selector","templateUrl","changeDetection","OnPush","providers","CheckboxGroupModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,uBAAhC,EAAyDC,QAAzD,QAAyE,eAAzE;AACA,OAAO,KAAKC,EAAZ,MAAoB,gBAApB;AACA,SAASC,SAAT,EAAoBC,iBAApB,EAAuCC,WAAvC,QAA0D,gBAA1D;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,gBAAlC;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,QAAsD,+BAAtD;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,aAAnC,QAAwD,MAAxD;AACA,OAAO,KAAKC,EAAZ,MAAoB,iCAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iCAApB;AACA,SAASC,mBAAT,QAAoC,iCAApC;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAqE0GpB,IAAAA,EAO+K,wC;;;;;;AA3EzR,MAAMqB,sBAAN,SAAqCV,kBAArC,CAAwD;AACpDW,EAAAA,WAAW,CAACC,EAAD,EAAKC,mBAAL,EAA0BC,gBAA1B,EAA4C;AACnD,UAAMF,EAAN,EAAUC,mBAAV;AACA,SAAKD,EAAL,GAAUA,EAAV;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,aAAL,GAAqB,KAArB;AACA,SAAKC,KAAL,GAAa,IAAId,eAAJ,CAAoB,KAApB,CAAb;AACA,SAAKe,YAAL,GAAoB,IAAId,OAAJ,EAApB;AACH;;AACDe,EAAAA,qBAAqB,GAAG;AACpB,QAAI,KAAKJ,gBAAL,CAAsBK,OAAtB,IAAiC,KAAKA,OAAL,KAAiB,KAAKL,gBAAL,CAAsBK,OAA5E,EAAqF;AACjF,WAAKA,OAAL,GAAe,KAAKL,gBAAL,CAAsBK,OAArC;AACA,WAAKC,UAAL,CAAgB,KAAKD,OAAL,CAAaE,KAA7B;AACAjB,MAAAA,aAAa,CAAC,KAAKe,OAAL,CAAaG,YAAd,EAA4B,KAAKN,KAAjC,CAAb,CACKO,IADL,CACUzB,MAAM,CAAC,CAAC,CAAC0B,KAAD,EAAQC,IAAR,CAAD,KAAmB,CAACA,IAArB,CADhB,EAC4C1B,SAAS,CAAC,KAAKkB,YAAN,CADrD,EAEKS,SAFL,CAEe,CAAC,CAACF,KAAD,CAAD,KAAa,KAAKJ,UAAL,CAAgBI,KAAhB,CAF5B;AAGH;AACJ;;AACDG,EAAAA,WAAW,GAAG;AACV,SAAKV,YAAL,CAAkBW,IAAlB;AACA,SAAKX,YAAL,CAAkBY,QAAlB;AACH;;AACDC,EAAAA,aAAa,GAAG;AACZ,UAAMC,QAAQ,GAAIZ,OAAD,IAAa;AAC1Ba,MAAAA,MAAM,CAACC,IAAP,CAAYd,OAAO,CAACE,KAApB,EAA2Ba,OAA3B,CAAoCC,GAAD,IAAShB,OAAO,CAACiB,QAAR,CAAiBD,GAAjB,aAAiCxC,SAAjC,GACtCoC,QAAQ,CAACZ,OAAO,CAACiB,QAAR,CAAiBD,GAAjB,CAAD,CAD8B,GAEtChB,OAAO,CAACiB,QAAR,CAAiBD,GAAjB,EAAsBJ,QAAtB,CAA+B,KAAKV,KAApC,CAFN;AAGH,KAJD;;AAKA,QAAI,KAAKF,OAAT,EAAkB;AACd,WAAKH,KAAL,CAAWY,IAAX,CAAgB,IAAhB;AACAG,MAAAA,QAAQ,CAAC,KAAKZ,OAAN,CAAR;AACA,WAAKH,KAAL,CAAWY,IAAX,CAAgB,KAAhB;AACH;;AACD,UAAME,aAAN;AACH;;AACDO,EAAAA,UAAU,GAAG;AACT,WAAQ,CAAC,CAAC,KAAKlB,OAAP,IACJa,MAAM,CAACC,IAAP,CAAY,KAAKd,OAAL,CAAaiB,QAAzB,EAAmCE,KAAnC,CAA0CH,GAAD,IAAU,KAAKhB,OAAL,IAC/C,KAAKA,OAAL,CAAaiB,QADkC,IAE/C,KAAKjB,OAAL,CAAaiB,QAAb,CAAsBD,GAAtB,CAF+C,IAG/C,KAAKhB,OAAL,CAAaiB,QAAb,CAAsBD,GAAtB,EAA2BI,QAHmB,IAI9C,KAJJ,CADJ;AAMH;;AACDnB,EAAAA,UAAU,CAACI,KAAD,EAAQ;AACd;AACR;AACA;AACA;AACA;AACQ,UAAMgB,UAAU,GAAIC,YAAD,IAAkB;AACjC;AACZ;AACA;AACA;AACA;AACA;AACY,YAAMC,UAAU,GAAIrB,KAAD,IAAW,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAAvC,GACxBoB,YAAY,CAACE,IAAb,CAAkBX,MAAM,CAACC,IAAP,CAAYZ,KAAZ,EAAmBuB,GAAnB,CAAwBT,GAAD,IAASd,KAAK,CAACc,GAAD,CAArC,CAAlB,EAA+DO,UAA/D,CADwB,GAExB,CAAC,CAACrB,KAFR;;AAGA,aAAQA,KAAD,IAAWoB,YAAY,CAACE,IAAb,CAAkBX,MAAM,CAACC,IAAP,CAAYZ,KAAZ,EAAmBuB,GAAnB,CAAwBT,GAAD,IAASd,KAAK,CAACc,GAAD,CAArC,CAAlB,EAA+DO,UAA/D,CAAlB;AACH,KAXD;;AAYA,UAAMG,YAAY,GAAGL,UAAU,CAACM,KAAK,CAACC,SAAN,CAAgBT,KAAjB,CAAV,CAAkCd,KAAlC,CAArB;AACA,UAAMwB,aAAa,GAAGR,UAAU,CAACM,KAAK,CAACC,SAAN,CAAgBE,IAAjB,CAAV,CAAiCzB,KAAjC,CAAtB;AACA,SAAKT,aAAL,GAAqBiC,aAAa,IAAI,CAACH,YAAvC;AACA,SAAKK,UAAL,CAAgBL,YAAhB;AACH;;AAlEmD;;AAoExDnC,sBAAsB,CAACyC,IAAvB;AAAA,mBAAoHzC,sBAApH,EAA0GrB,EAA1G,mBAA4JA,EAAE,CAAC+D,iBAA/J,GAA0G/D,EAA1G,mBAA6LgB,EAAE,CAACgD,mBAAhM,GAA0GhE,EAA1G,mBAAgOK,EAAE,CAAC4D,gBAAnO;AAAA;;AACA5C,sBAAsB,CAAC6C,IAAvB,kBAD0GlE,EAC1G;AAAA,QAAwGqB,sBAAxG;AAAA;AAAA,aAD0GrB,EAC1G,oBAA6K,CACrK;AACImE,IAAAA,OAAO,EAAE5D,iBADb;AAEI6D,IAAAA,WAAW,EAAEnE,UAAU,CAAC,MAAMoB,sBAAP,CAF3B;AAGIgD,IAAAA,KAAK,EAAE;AAHX,GADqK,CAA7K,GAD0GrE,EAC1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAD0GA,MAAAA,EAC1G;AAD0GA,MAAAA,EAOnD,6CANvD;AAD0GA,MAAAA,EAO6C;AAAA;AAAA;AAAA;AAAA;AAAA,eAA0G,mBAA1G;AAAA,QANvJ;AAD0GA,MAAAA,EAO+K,mFANzR;AAD0GA,MAAAA,EAO2N,eANrU;AAAA;;AAAA;AAD0GA,MAAAA,EAO1B,0KANhF;AAD0GA,MAAAA,EAO4L,aANtS;AAD0GA,MAAAA,EAO4L,+BANtS;AAAA;AAAA;AAAA,eAMsXiB,EAAE,CAACqD,sBANzX,EAMwgBjE,EAAE,CAACkE,eAN3gB,EAM6lBlE,EAAE,CAACmE,OANhmB,EAMkyBrD,EAAE,CAACsD,IANryB;AAAA;AAAA;AAAA;;AAOA;AAAA,qDAR0GzE,EAQ1G,mBAA4FqB,sBAA5F,EAAgI,CAAC;AACrHqD,IAAAA,IAAI,EAAExE,SAD+G;AAErHyE,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,sBADX;AAECC,MAAAA,WAAW,EAAE,iCAFd;AAGCC,MAAAA,eAAe,EAAE3E,uBAAuB,CAAC4E,MAH1C;AAICC,MAAAA,SAAS,EAAE,CACP;AACIb,QAAAA,OAAO,EAAE5D,iBADb;AAEI6D,QAAAA,WAAW,EAAEnE,UAAU,CAAC,MAAMoB,sBAAP,CAF3B;AAGIgD,QAAAA,KAAK,EAAE;AAHX,OADO;AAJZ,KAAD;AAF+G,GAAD,CAAhI,EAc4B,YAAY;AAAE,WAAO,CAAC;AAAEK,MAAAA,IAAI,EAAE1E,EAAE,CAAC+D;AAAX,KAAD,EAAiC;AAAEW,MAAAA,IAAI,EAAE1D,EAAE,CAACgD;AAAX,KAAjC,EAAmE;AAAEU,MAAAA,IAAI,EAAErE,EAAE,CAAC4D;AAAX,KAAnE,CAAP;AAA2G,GAdrJ;AAAA;;AAgBA,MAAMgB,mBAAN,CAA0B;;AAE1BA,mBAAmB,CAACnB,IAApB;AAAA,mBAAiHmB,mBAAjH;AAAA;;AACAA,mBAAmB,CAACC,IAApB,kBA3B0GlF,EA2B1G;AAAA,QAAkHiF;AAAlH;AACAA,mBAAmB,CAACE,IAApB,kBA5B0GnF,EA4B1G;AAAA,YAAiJ,CAACoB,YAAD,EAAeF,mBAAf,EAAoCV,WAApC,EAAiDI,iBAAjD,CAAjJ;AAAA;;AACA;AAAA,qDA7B0GZ,EA6B1G,mBAA4FiF,mBAA5F,EAA6H,CAAC;AAClHP,IAAAA,IAAI,EAAEtE,QAD4G;AAElHuE,IAAAA,IAAI,EAAE,CAAC;AACCS,MAAAA,OAAO,EAAE,CAAChE,YAAD,EAAeF,mBAAf,EAAoCV,WAApC,EAAiDI,iBAAjD,CADV;AAECyE,MAAAA,YAAY,EAAE,CAAChE,sBAAD,CAFf;AAGCiE,MAAAA,OAAO,EAAE,CAACjE,sBAAD;AAHV,KAAD;AAF4G,GAAD,CAA7H;AAAA;AASA;AACA;AACA;;;AAEA,SAASA,sBAAT,EAAiC4D,mBAAjC","sourcesContent":["import * as i0 from '@angular/core';\nimport { forwardRef, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { FormGroup, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';\nimport { BehaviorSubject, Subject, combineLatest } from 'rxjs';\nimport * as i1 from '@backbase/foundation-ang/future';\nimport * as i3 from '@backbase/ui-ang/input-checkbox';\nimport { InputCheckboxModule } from '@backbase/ui-ang/input-checkbox';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @name CheckboxGroupComponent\n *\n * @description\n * Stores a state, determines it and displays a parent checkbox for a checkboxes group.\n * Required module(s): FormsModule\n */\nclass CheckboxGroupComponent extends InputBaseComponent {\n    constructor(cd, deprecationsService, controlContainer) {\n        super(cd, deprecationsService);\n        this.cd = cd;\n        this.deprecationsService = deprecationsService;\n        this.controlContainer = controlContainer;\n        this.indeterminate = false;\n        this.skip$ = new BehaviorSubject(false);\n        this.unsubscribe$ = new Subject();\n    }\n    ngAfterContentChecked() {\n        if (this.controlContainer.control && this.control !== this.controlContainer.control) {\n            this.control = this.controlContainer.control;\n            this.checkState(this.control.value);\n            combineLatest(this.control.valueChanges, this.skip$)\n                .pipe(filter(([state, skip]) => !skip), takeUntil(this.unsubscribe$))\n                .subscribe(([state]) => this.checkState(state));\n        }\n    }\n    ngOnDestroy() {\n        this.unsubscribe$.next();\n        this.unsubscribe$.complete();\n    }\n    onValueChange() {\n        const setValue = (control) => {\n            Object.keys(control.value).forEach((key) => control.controls[key] instanceof FormGroup\n                ? setValue(control.controls[key])\n                : control.controls[key].setValue(this.value));\n        };\n        if (this.control) {\n            this.skip$.next(true);\n            setValue(this.control);\n            this.skip$.next(false);\n        }\n        super.onValueChange();\n    }\n    isDisabled() {\n        return (!!this.control &&\n            Object.keys(this.control.controls).every((key) => (this.control &&\n                this.control.controls &&\n                this.control.controls[key] &&\n                this.control.controls[key].disabled) ||\n                false));\n    }\n    checkState(state) {\n        /**\n         * @param arrayHandler - a function to iterate over a tree\n         * @description iterates over a tree using an arrayHandler function\n         * @return a function which recursively calls arrayHandler over a tree\n         */\n        const checkGroup = (arrayHandler) => {\n            /**\n             * @param value - primitive or tree data structure\n             * @return\n             * if input value is a primitive - returns value, casted to boolean,\n             * if input value is a tree - returns result of recursively calling arrayHandler function over a tree\n             */\n            const checkValue = (value) => typeof value === 'object' && value !== null\n                ? arrayHandler.call(Object.keys(value).map((key) => value[key]), checkValue)\n                : !!value;\n            return (value) => arrayHandler.call(Object.keys(value).map((key) => value[key]), checkValue);\n        };\n        const isAllChecked = checkGroup(Array.prototype.every)(state);\n        const isSomeChecked = checkGroup(Array.prototype.some)(state);\n        this.indeterminate = isSomeChecked && !isAllChecked;\n        this.writeValue(isAllChecked);\n    }\n}\nCheckboxGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CheckboxGroupComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DeprecationsService }, { token: i2.ControlContainer }], target: i0.ɵɵFactoryTarget.Component });\nCheckboxGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: CheckboxGroupComponent, selector: \"bb-checkbox-group-ui\", providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => CheckboxGroupComponent),\n            multi: true,\n        },\n    ], usesInheritance: true, ngImport: i0, template: \"<bb-input-checkbox-ui\\n  [label]=\\\"label\\\"\\n  [aria-label]=\\\"(!label && ariaLabel) || null\\\"\\n  [(indeterminate)]=\\\"indeterminate\\\"\\n  [(ngModel)]=\\\"value\\\"\\n  [disabled]=\\\"isDisabled()\\\"\\n  (change)=\\\"onValueChange()\\\"\\n>\\n  <ng-content *ngIf=\\\"!label\\\"></ng-content>\\n</bb-input-checkbox-ui>\\n\", components: [{ type: i3.InputCheckboxComponent, selector: \"bb-input-checkbox-ui\", inputs: [\"indeterminate\"], outputs: [\"indeterminateChange\"] }], directives: [{ type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CheckboxGroupComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bb-checkbox-group-ui',\n                    templateUrl: './checkbox-group.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => CheckboxGroupComponent),\n                            multi: true,\n                        },\n                    ],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DeprecationsService }, { type: i2.ControlContainer }]; } });\n\nclass CheckboxGroupModule {\n}\nCheckboxGroupModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CheckboxGroupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCheckboxGroupModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CheckboxGroupModule, declarations: [CheckboxGroupComponent], imports: [CommonModule, InputCheckboxModule, FormsModule, BaseClassesModule], exports: [CheckboxGroupComponent] });\nCheckboxGroupModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CheckboxGroupModule, imports: [[CommonModule, InputCheckboxModule, FormsModule, BaseClassesModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CheckboxGroupModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, InputCheckboxModule, FormsModule, BaseClassesModule],\n                    declarations: [CheckboxGroupComponent],\n                    exports: [CheckboxGroupComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CheckboxGroupComponent, CheckboxGroupModule };\n"]},"metadata":{},"sourceType":"module"}